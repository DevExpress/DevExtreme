System.register(['@angular/platform-browser', '@angular/core', 'devextreme/bundles/dx.all', 'devextreme/ui/data_grid', '@angular/common', 'devextreme/core/dom_adapter', 'devextreme/events', 'devextreme/core/utils/common', 'devextreme/core/renderer', 'devextreme/core/http_request', 'devextreme/core/utils/ready_callbacks', 'devextreme/events/core/events_engine', 'devextreme/core/utils/ajax', 'devextreme/core/utils/deferred'], (function (exports) {
    'use strict';
    var i2, makeStateKey, i0, Injectable, Directive, Input, NgModule, EventEmitter, Component, PLATFORM_ID, Inject, Optional, VERSION, SkipSelf, Host, Output, ContentChildren, forwardRef, DxDataGrid, isPlatformServer, DOCUMENT, i1, domAdapter, one, triggerHandler, equalByValue, render, httpRequest, readyCallbacks, eventsEngine, ajax, Deferred;
    return {
        setters: [function (module) {
            i2 = module;
            makeStateKey = module.makeStateKey;
        }, function (module) {
            i0 = module;
            Injectable = module.Injectable;
            Directive = module.Directive;
            Input = module.Input;
            NgModule = module.NgModule;
            EventEmitter = module.EventEmitter;
            Component = module.Component;
            PLATFORM_ID = module.PLATFORM_ID;
            Inject = module.Inject;
            Optional = module.Optional;
            VERSION = module.VERSION;
            SkipSelf = module.SkipSelf;
            Host = module.Host;
            Output = module.Output;
            ContentChildren = module.ContentChildren;
            forwardRef = module.forwardRef;
        }, null, function (module) {
            DxDataGrid = module.default;
        }, function (module) {
            isPlatformServer = module.isPlatformServer;
            DOCUMENT = module.DOCUMENT;
            i1 = module;
        }, function (module) {
            domAdapter = module.default;
        }, function (module) {
            one = module.one;
            triggerHandler = module.triggerHandler;
        }, function (module) {
            equalByValue = module.equalByValue;
        }, function (module) {
            render = module.default;
        }, function (module) {
            httpRequest = module.default;
        }, function (module) {
            readyCallbacks = module.default;
        }, function (module) {
            eventsEngine = module.default;
        }, function (module) {
            ajax = module.default;
        }, function (module) {
            Deferred = module.Deferred;
        }],
        execute: (function () {

            exports({
                dx: extractTemplate,
                dy: getElement
            });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            class DxTemplateHost {
                host;
                setHost(host) {
                    this.host = host;
                }
                setTemplate(template) {
                    this.host.setTemplate(template);
                }
            } exports("a", DxTemplateHost);

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            class NgEventsStrategy {
                instance;
                zone;
                subscriptions = {};
                events = {};
                constructor(instance, zone) {
                    this.instance = instance;
                    this.zone = zone;
                }
                hasEvent(name) {
                    return this.getEmitter(name).observers.length !== 0;
                }
                fireEvent(name, args) {
                    const emitter = this.getEmitter(name);
                    if (emitter.observers.length) {
                        const internalSubs = this.subscriptions[name] || [];
                        if (internalSubs.length === emitter.observers.length) {
                            emitter.next(args && args[0]);
                        }
                        else {
                            this.zone.run(() => emitter.next(args && args[0]));
                        }
                    }
                }
                on(name, handler) {
                    if (typeof name === 'string') {
                        const eventSubscriptions = this.subscriptions[name] || [];
                        const subcription = this.getEmitter(name).subscribe(handler?.bind(this.instance));
                        const unsubscribe = subcription.unsubscribe.bind(subcription);
                        eventSubscriptions.push({ handler, unsubscribe });
                        this.subscriptions[name] = eventSubscriptions;
                    }
                    else {
                        const handlersObj = name;
                        Object.keys(handlersObj).forEach((event) => this.on(event, handlersObj[event]));
                    }
                }
                off(name, handler) {
                    const eventSubscriptions = this.subscriptions[name] || [];
                    if (handler) {
                        eventSubscriptions.some((subscription, i) => {
                            if (subscription.handler === handler) {
                                subscription.unsubscribe();
                                eventSubscriptions.splice(i, 1);
                                return true;
                            }
                            return false;
                        });
                    }
                    else {
                        eventSubscriptions.forEach((subscription) => {
                            subscription.unsubscribe();
                        });
                        eventSubscriptions.splice(0, eventSubscriptions.length);
                    }
                }
                dispose() { }
                addEmitter(eventName, emitter) {
                    this.events[eventName] = emitter;
                }
                getEmitter(eventName) {
                    if (!this.events[eventName]) {
                        this.events[eventName] = new EventEmitter();
                    }
                    return this.events[eventName];
                }
            } exports("dv", NgEventsStrategy);
            class EmitterHelper {
                zone;
                component;
                lockedValueChangeEvent = false;
                constructor(zone, component) {
                    this.zone = zone;
                    this.component = component;
                }
                fireNgEvent(eventName, eventArgs) {
                    if (this.lockedValueChangeEvent && eventName === 'valueChange') {
                        return;
                    }
                    const emitter = this.component[eventName];
                    if (emitter && emitter.observers.length) {
                        this.zone.run(() => {
                            emitter.next(eventArgs && eventArgs[0]);
                        });
                    }
                }
                createEmitters(events) {
                    events.forEach((event) => {
                        this.component[event.emit] = new EventEmitter();
                    });
                }
            } exports("dt", EmitterHelper);

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            class WatcherHelper {
                _watchers = [];
                getWatchMethod() {
                    const watchMethod = (valueGetter, valueChangeCallback, options) => {
                        let oldValue = valueGetter();
                        options = options || {};
                        if (!options.skipImmediate) {
                            valueChangeCallback(oldValue);
                        }
                        const watcher = () => {
                            const newValue = valueGetter();
                            if (this._isDifferentValues(oldValue, newValue, options.deep)) {
                                valueChangeCallback(newValue);
                                oldValue = newValue;
                            }
                        };
                        this._watchers.push(watcher);
                        return () => {
                            const index = this._watchers.indexOf(watcher);
                            if (index !== -1) {
                                this._watchers.splice(index, 1);
                            }
                        };
                    };
                    return watchMethod;
                }
                _isDifferentValues(oldValue, newValue, deepCheck) {
                    const comparableNewValue = this._toComparable(newValue);
                    const comparableOldValue = this._toComparable(oldValue);
                    const isObjectValues = comparableNewValue instanceof Object && comparableOldValue instanceof Object;
                    if (deepCheck && isObjectValues) {
                        return this._checkObjectsFields(newValue, oldValue);
                    }
                    return comparableNewValue !== comparableOldValue;
                }
                _toComparable(value) {
                    if (value instanceof Date) {
                        return value.getTime();
                    }
                    return value;
                }
                _checkObjectsFields(checkingFromObject, checkingToObject) {
                    for (const field in checkingFromObject) {
                        const oldValue = this._toComparable(checkingFromObject[field]);
                        const newValue = this._toComparable(checkingToObject[field]);
                        let isEqualObjects = false;
                        if (typeof oldValue === 'object' && typeof newValue === 'object') {
                            isEqualObjects = equalByValue(oldValue, newValue);
                        }
                        if (oldValue !== newValue && !isEqualObjects) {
                            return true;
                        }
                    }
                }
                checkWatchers() {
                    for (const watcher of this._watchers) {
                        watcher();
                    }
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: WatcherHelper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
                /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: WatcherHelper });
            } exports("W", WatcherHelper);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: WatcherHelper, decorators: [{
                        type: Injectable
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            function getElement(element) {
                return element.get ? element.get(0) : element;
            }

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:use-input-property-decorator */
            const DX_TEMPLATE_WRAPPER_CLASS = exports("dq", 'dx-template-wrapper');
            class RenderData {
                model;
                index;
                container;
            } exports("dw", RenderData);
            class DxTemplateDirective {
                templateRef;
                viewContainerRef;
                renderer;
                zone;
                set dxTemplateOf(value) {
                    this.name = value;
                }
                name;
                constructor(templateRef, viewContainerRef, templateHost, renderer, zone) {
                    this.templateRef = templateRef;
                    this.viewContainerRef = viewContainerRef;
                    this.renderer = renderer;
                    this.zone = zone;
                    templateHost.setTemplate(this);
                }
                renderTemplate(renderData) {
                    const childView = this.viewContainerRef.createEmbeddedView(this.templateRef, {
                        $implicit: renderData.model,
                        index: renderData.index,
                    });
                    const container = getElement(renderData.container);
                    if (renderData.container) {
                        childView.rootNodes.forEach((element) => {
                            this.renderer.appendChild(container, element);
                        });
                    }
                    return childView;
                }
                render(renderData) {
                    let childView;
                    if (this.zone.isStable) {
                        childView = this.zone.run(() => this.renderTemplate(renderData));
                    }
                    else {
                        childView = this.renderTemplate(renderData);
                    }
                    // =========== WORKAROUND =============
                    // https://github.com/angular/angular/issues/12243
                    childView.detectChanges();
                    // =========== /WORKAROUND =============
                    childView.rootNodes.forEach((element) => {
                        if (element.nodeType === 1) {
                            domAdapter.setClass(element, DX_TEMPLATE_WRAPPER_CLASS, true);
                        }
                        one(element, 'dxremove', ({}, params) => {
                            if (!params || !params._angularIntegration) {
                                childView.destroy();
                            }
                        });
                    });
                    return childView.rootNodes;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: DxTemplateHost }, { token: i0.Renderer2 }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
                /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.0", type: DxTemplateDirective, selector: "[dxTemplate]", inputs: { dxTemplateOf: "dxTemplateOf" }, ngImport: i0 });
            } exports("ds", DxTemplateDirective);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateDirective, decorators: [{
                        type: Directive,
                        args: [{
                                selector: '[dxTemplate]',
                            }]
                    }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: DxTemplateHost }, { type: i0.Renderer2 }, { type: i0.NgZone }], propDecorators: { dxTemplateOf: [{
                            type: Input
                        }] } });
            class DxTemplateModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateModule, declarations: [DxTemplateDirective], exports: [DxTemplateDirective] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateModule });
            } exports("e", DxTemplateModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [DxTemplateDirective],
                                exports: [DxTemplateDirective],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            const VISIBILITY_CHANGE_SELECTOR = 'dx-visibility-change-handler';
            class BaseNestedOption {
                _host;
                _hostOptionPath;
                _collectionContainerImpl;
                _initialOptions = {};
                constructor() {
                    this._collectionContainerImpl = new CollectionNestedOptionContainerImpl(this._setOption.bind(this), this._filterItems.bind(this));
                }
                _optionChangedHandler(e) {
                    const fullOptionPath = this._fullOptionPath();
                    if (e.fullName.indexOf(fullOptionPath) === 0) {
                        const optionName = e.fullName.slice(fullOptionPath.length);
                        const emitter = this[`${optionName}Change`];
                        if (emitter) {
                            emitter.next(e.value);
                        }
                    }
                }
                _createEventEmitters(events) {
                    events.forEach((event) => {
                        this[event.emit] = new EventEmitter();
                    });
                }
                _getOption(name) {
                    if (this.isLinked) {
                        return this.instance.option(this._fullOptionPath() + name);
                    }
                    return this._initialOptions[name];
                }
                _setOption(name, value) {
                    if (this.isLinked) {
                        const fullPath = this._fullOptionPath() + name;
                        this.instance.option(fullPath, value);
                    }
                    else {
                        this._initialOptions[name] = value;
                    }
                }
                _addRemovedOption(name) {
                    if (this.instance && this.removedNestedComponents) {
                        this.removedNestedComponents.push(name);
                    }
                }
                _deleteRemovedOptions(name) {
                    if (this.instance && this.removedNestedComponents) {
                        this.removedNestedComponents = this.removedNestedComponents.filter((x) => !x.startsWith(name));
                    }
                }
                _addRecreatedComponent() {
                    if (this.instance && this.recreatedNestedComponents) {
                        this.recreatedNestedComponents.push({ getOptionPath: () => this._getOptionPath() });
                    }
                }
                _getOptionPath() {
                    return this._hostOptionPath() + this._optionPath;
                }
                setHost(host, optionPath) {
                    this._host = host;
                    this._hostOptionPath = optionPath;
                    this.optionChangedHandlers.subscribe(this._optionChangedHandler.bind(this));
                }
                setChildren(propertyName, items) {
                    this.resetOptions(propertyName);
                    return this._collectionContainerImpl.setChildren(propertyName, items);
                }
                _filterItems(items) {
                    return items.filter((item) => item !== this);
                }
                get instance() {
                    return this._host && this._host.instance;
                }
                get resetOptions() {
                    return this._host && this._host.resetOptions;
                }
                get isRecreated() {
                    return this._host && this._host.isRecreated;
                }
                get removedNestedComponents() {
                    return this._host && this._host.removedNestedComponents;
                }
                set removedNestedComponents(value) {
                    this._host.removedNestedComponents = value;
                }
                get recreatedNestedComponents() {
                    return this._host && this._host.recreatedNestedComponents;
                }
                set recreatedNestedComponents(value) {
                    this._host.recreatedNestedComponents = value;
                }
                get isLinked() {
                    return !!this.instance && this._host.isLinked;
                }
                get optionChangedHandlers() {
                    return this._host && this._host.optionChangedHandlers;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: BaseNestedOption, deps: [], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: BaseNestedOption, selector: "ng-component", ngImport: i0, template: '', isInline: true });
            } exports("dm", BaseNestedOption);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: BaseNestedOption, decorators: [{
                        type: Component,
                        args: [{
                                template: '',
                            }]
                    }], ctorParameters: () => [] });
            class CollectionNestedOptionContainerImpl {
                _setOption;
                _filterItems;
                _activatedQueries = {};
                constructor(_setOption, _filterItems) {
                    this._setOption = _setOption;
                    this._filterItems = _filterItems;
                }
                setChildren(propertyName, items) {
                    if (this._filterItems) {
                        items = this._filterItems(items);
                    }
                    if (items.length) {
                        this._activatedQueries[propertyName] = true;
                    }
                    if (this._activatedQueries[propertyName]) {
                        const widgetItems = items.map((item, index) => {
                            item._index = index;
                            return item._value;
                        });
                        this._setOption(propertyName, widgetItems);
                    }
                }
            } exports("dp", CollectionNestedOptionContainerImpl);
            class NestedOption extends BaseNestedOption {
                setHost(host, optionPath) {
                    super.setHost(host, optionPath);
                    this._host[this._optionPath] = this._initialOptions;
                }
                _fullOptionPath() {
                    return `${this._getOptionPath()}.`;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: NestedOption, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: NestedOption, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            } exports("du", NestedOption);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: NestedOption, decorators: [{
                        type: Component,
                        args: [{
                                template: '',
                            }]
                    }] });
            class CollectionNestedOption extends BaseNestedOption {
                _index;
                _fullOptionPath() {
                    return `${this._getOptionPath()}[${this._index}].`;
                }
                get _value() {
                    return this._initialOptions;
                }
                get isLinked() {
                    return this._index !== undefined && !!this.instance && this._host.isLinked;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CollectionNestedOption, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: CollectionNestedOption, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            } exports("dn", CollectionNestedOption);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CollectionNestedOption, decorators: [{
                        type: Component,
                        args: [{
                                template: '',
                            }]
                    }] });
            const triggerShownEvent = function (element) {
                const changeHandlers = [];
                if (!render(element).hasClass(VISIBILITY_CHANGE_SELECTOR)) {
                    changeHandlers.push(element);
                }
                changeHandlers.push.apply(changeHandlers, element.querySelectorAll(`.${VISIBILITY_CHANGE_SELECTOR}`));
                for (let i = 0; i < changeHandlers.length; i++) {
                    triggerHandler(changeHandlers[i], 'dxshown');
                }
            };
            function extractTemplate(option, element, renderer, document) {
                if (!option.template === undefined || !element.nativeElement.hasChildNodes()) {
                    return;
                }
                const childNodes = [].slice.call(element.nativeElement.childNodes);
                const userContent = childNodes.filter((n) => {
                    if (n.tagName) {
                        const tagNamePrefix = n.tagName.toLowerCase().substr(0, 3);
                        return !(tagNamePrefix === 'dxi' || tagNamePrefix === 'dxo');
                    }
                    return n.nodeName !== '#comment' && n.textContent.replace(/\s/g, '').length;
                });
                if (!userContent.length) {
                    return;
                }
                option.template = {
                    render: (renderData) => {
                        const result = element.nativeElement;
                        domAdapter.setClass(result, DX_TEMPLATE_WRAPPER_CLASS, true);
                        if (renderData.container) {
                            const container = getElement(renderData.container);
                            const resultInContainer = container.contains(element.nativeElement);
                            renderer.appendChild(container, element.nativeElement);
                            if (!resultInContainer) {
                                const resultInBody = document.body.contains(container);
                                if (resultInBody) {
                                    triggerShownEvent(result);
                                }
                            }
                        }
                        return result;
                    },
                };
            }
            class NestedOptionHost {
                _host;
                _optionPath;
                getHost() {
                    return this._host;
                }
                setHost(host, optionPath) {
                    this._host = host;
                    this._optionPath = optionPath || (() => '');
                }
                setNestedOption(nestedOption) {
                    nestedOption.setHost(this._host, this._optionPath);
                }
            } exports("N", NestedOptionHost);

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            let serverStateKey;
            const getServerStateKey = exports("dz", () => {
                if (!serverStateKey) {
                    serverStateKey = makeStateKey('DX_isPlatformServer');
                }
                return serverStateKey;
            });
            class DxComponent {
                element;
                ngZone;
                watcherHelper;
                transferState;
                platformId;
                _initialOptions = {};
                _optionsToUpdate = {};
                _collectionContainerImpl;
                eventHelper;
                optionChangedHandlers = new EventEmitter();
                templates;
                instance;
                isLinked = true;
                changedOptions = {};
                removedNestedComponents = [];
                recreatedNestedComponents;
                widgetUpdateLocked = false;
                templateUpdateRequired = false;
                _updateTemplates() {
                    if (this.templates.length && this.templateUpdateRequired) {
                        const updatedTemplates = {};
                        this.templates.forEach((template) => {
                            updatedTemplates[template.name] = template;
                        });
                        this.instance.option('integrationOptions.templates', updatedTemplates);
                        this.templates = Object.values(updatedTemplates);
                        this.templateUpdateRequired = false;
                    }
                }
                _initEvents() {
                    this.instance.on('optionChanged', (e) => {
                        this.changedOptions[e.name] = e.value;
                        const value = e.name === e.fullName ? e.value : e.component.option(e.name);
                        this.eventHelper.fireNgEvent(`${e.name}Change`, [value]);
                        this.optionChangedHandlers.emit(e);
                    });
                }
                _initOptions() {
                    this._initialOptions.integrationOptions.watchMethod = this.watcherHelper.getWatchMethod();
                }
                _initPlatform() {
                    if (this.transferState.hasKey(getServerStateKey())) {
                        this._initialOptions.integrationOptions.renderedOnServer = this.transferState.get(getServerStateKey(), null);
                    }
                    else if (isPlatformServer(this.platformId)) {
                        this.transferState.set(getServerStateKey(), true);
                    }
                }
                _createEventEmitters(events) {
                    const zone = this.ngZone;
                    this.eventHelper.createEmitters(events);
                    this._initialOptions.eventsStrategy = (instance) => {
                        const strategy = new NgEventsStrategy(instance, zone);
                        events.filter((event) => event.subscribe).forEach((event) => {
                            strategy.addEmitter(event.subscribe, this[event.emit]);
                        });
                        return strategy;
                    };
                    this._initialOptions.nestedComponentOptions = function (component) {
                        return {
                            eventsStrategy: (instance) => new NgEventsStrategy(instance, zone),
                            nestedComponentOptions: component.option('nestedComponentOptions'),
                        };
                    };
                }
                _shouldOptionChange(name, value) {
                    if (this.changedOptions.hasOwnProperty(name)) {
                        const prevValue = this.changedOptions[name];
                        delete this.changedOptions[name];
                        return value !== prevValue;
                    }
                    return true;
                }
                clearChangedOptions() {
                    this.changedOptions = {};
                }
                _getOption(name) {
                    return this.instance
                        ? this.instance.option(name)
                        : this._initialOptions[name];
                }
                lockWidgetUpdate() {
                    if (!this.widgetUpdateLocked && this.instance) {
                        this.instance.beginUpdate();
                        this.widgetUpdateLocked = true;
                    }
                }
                unlockWidgetUpdate() {
                    if (this.widgetUpdateLocked) {
                        this.widgetUpdateLocked = false;
                        this.instance.endUpdate();
                    }
                }
                _setOption(name, value) {
                    this.lockWidgetUpdate();
                    if (!this._shouldOptionChange(name, value)) {
                        return;
                    }
                    if (this.instance) {
                        this.instance.option(name, value);
                    }
                    else {
                        this._initialOptions[name] = value;
                    }
                }
                _createWidget(element) {
                    this._initialOptions.integrationOptions = {};
                    this._initPlatform();
                    this._initOptions();
                    this._initialOptions.onInitializing = function () {
                        this.beginUpdate();
                    };
                    this.instance = this._createInstance(element, this._initialOptions);
                    this._initEvents();
                    this._initialOptions = {};
                }
                _destroyWidget() {
                    this.removedNestedComponents = [];
                    if (this.instance) {
                        const element = this.instance.element();
                        triggerHandler(element, 'dxremove', { _angularIntegration: true });
                        this.instance.dispose();
                        domAdapter.removeElement(element);
                    }
                }
                constructor(element, ngZone, templateHost, watcherHelper, transferState, platformId) {
                    this.element = element;
                    this.ngZone = ngZone;
                    this.watcherHelper = watcherHelper;
                    this.transferState = transferState;
                    this.platformId = platformId;
                    this.templates = [];
                    templateHost.setHost(this);
                    this._collectionContainerImpl = new CollectionNestedOptionContainerImpl(this._setOption.bind(this));
                    this.eventHelper = new EmitterHelper(ngZone, this);
                }
                ngOnChanges(changes) {
                    for (const key in changes) {
                        const change = changes[key];
                        if (change.currentValue !== this[key]) {
                            this._optionsToUpdate[key] = changes[key].currentValue;
                        }
                    }
                }
                ngOnInit() {
                    this._createWidget(this.element.nativeElement);
                }
                ngDoCheck() {
                    this.applyOptions();
                }
                ngAfterContentChecked() {
                    this.applyOptions();
                    this.resetOptions();
                    this.unlockWidgetUpdate();
                }
                ngAfterViewInit() {
                    this._updateTemplates();
                    this.instance.endUpdate();
                    this.recreatedNestedComponents = [];
                }
                ngAfterViewChecked() {
                    this._updateTemplates();
                }
                applyOptions() {
                    if (Object.keys(this._optionsToUpdate).length) {
                        if (this.instance) {
                            this.instance.option(this._optionsToUpdate);
                        }
                        this._optionsToUpdate = {};
                    }
                }
                resetOptions(collectionName) {
                    if (this.instance) {
                        this.removedNestedComponents.filter((option) => (option
                            && !this.isRecreated(option)
                            && collectionName ? option.startsWith(collectionName) : true))
                            .forEach((option) => {
                            this.instance.resetOption(option);
                        });
                        this.removedNestedComponents = [];
                        this.recreatedNestedComponents = [];
                    }
                }
                isRecreated(name) {
                    return this.recreatedNestedComponents
                        && this.recreatedNestedComponents.some((nestedComponent) => nestedComponent.getOptionPath() === name);
                }
                setTemplate(template) {
                    this.templates.push(template);
                    this.templateUpdateRequired = true;
                }
                setChildren(propertyName, items) {
                    this.resetOptions(propertyName);
                    return this._collectionContainerImpl.setChildren(propertyName, items);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: DxTemplateHost }, { token: WatcherHelper }, { token: i2.TransferState }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxComponent, selector: "ng-component", usesOnChanges: true, ngImport: i0, template: '', isInline: true });
            } exports("D", DxComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxComponent, decorators: [{
                        type: Component,
                        args: [{
                                template: '',
                            }]
                    }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: DxTemplateHost }, { type: WatcherHelper }, { type: i2.TransferState }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [PLATFORM_ID]
                            }] }] });
            class DxComponentExtension extends DxComponent {
                createInstance(element) {
                    this._createWidget(element);
                }
                ngOnInit() {
                }
                ngAfterViewInit() {
                    this._createWidget(this.element.nativeElement);
                    this.instance.endUpdate();
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxComponentExtension, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxComponentExtension, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            } exports("da", DxComponentExtension);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxComponentExtension, decorators: [{
                        type: Component,
                        args: [{
                                template: '',
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            const outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
            const insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
            let originalAdd;
            let callbacks = [];
            let readyCallbackAdd = function (callback) {
                if (!originalAdd) {
                    originalAdd = this.callBase.bind(this);
                }
                callbacks.push(callback);
            };
            readyCallbacks.inject({
                add(callback) {
                    return readyCallbackAdd.call(this, callback);
                },
            });
            let doInjections = (document, ngZone, xhrFactory) => {
                if (Number(VERSION.major) < 12) {
                    console.warn('Your version of Angular is not supported. Please update your project to version 12 or later.'
                        + ' Please refer to the Angular Update Guide for more information: https://update.angular.io');
                }
                domAdapter.inject({
                    _document: document,
                    listen(...args) {
                        const eventName = args[1];
                        if (outsideZoneEvents.includes(eventName)) {
                            return ngZone.runOutsideAngular(() => this.callBase.apply(this, args));
                        }
                        if (ngZone.isStable && insideZoneEvents.includes(eventName)) {
                            return ngZone.run(() => this.callBase.apply(this, args));
                        }
                        return this.callBase.apply(this, args);
                    },
                    isElementNode(element) {
                        return element && element.nodeType === 1;
                    },
                    isTextNode(element) {
                        return element && element.nodeType === 3;
                    },
                    isDocument(element) {
                        return element && element.nodeType === 9;
                    },
                });
                httpRequest.inject({
                    getXhr() {
                        if (!xhrFactory) {
                            return this.callBase.apply(this);
                        }
                        const _xhr = xhrFactory.build();
                        if (!('withCredentials' in _xhr)) {
                            _xhr.withCredentials = false;
                        }
                        return _xhr;
                    },
                });
                const runReadyCallbacksInZone = () => {
                    ngZone.run(() => {
                        eventsEngine.set({});
                        callbacks.forEach((callback) => originalAdd.call(null, callback));
                        callbacks = [];
                        readyCallbacks.fire();
                    });
                };
                runReadyCallbacksInZone();
                readyCallbackAdd = (callback) => ngZone.run(() => callback());
                doInjections = runReadyCallbacksInZone;
            };
            class DxIntegrationModule {
                constructor(document, ngZone, xhrFactory) {
                    doInjections(document, ngZone, xhrFactory);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxIntegrationModule, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.XhrFactory, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxIntegrationModule });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxIntegrationModule });
            } exports("d", DxIntegrationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxIntegrationModule, decorators: [{
                        type: NgModule,
                        args: [{}]
                    }], ctorParameters: () => [{ type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: i0.NgZone }, { type: i1.XhrFactory, decorators: [{
                                type: Optional
                            }] }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            function isIterable(value) {
                return value && (typeof value[Symbol.iterator] === 'function');
            }
            class IterableDifferHelper {
                _differs;
                _host;
                _propertyDiffers = {};
                constructor(_differs) {
                    this._differs = _differs;
                }
                setHost(host) {
                    this._host = host;
                }
                setup(prop, changes) {
                    if (prop in changes) {
                        const value = changes[prop].currentValue;
                        this.setupSingle(prop, value);
                    }
                }
                setupSingle(prop, value) {
                    if (value && Array.isArray(value)) {
                        if (!this._propertyDiffers[prop]) {
                            try {
                                this._propertyDiffers[prop] = this._differs.find(value).create(null);
                                return true;
                            }
                            catch (e) { }
                        }
                    }
                    else {
                        delete this._propertyDiffers[prop];
                    }
                    return false;
                }
                getChanges(prop, value) {
                    if (this._propertyDiffers[prop]) {
                        return this._propertyDiffers[prop].diff(value);
                    }
                }
                checkChangedOptions(propName, hostValue) {
                    return this._host.changedOptions[propName] === hostValue;
                }
                doCheck(prop) {
                    if (this._propertyDiffers[prop] && this._host.instance) {
                        const hostValue = this._host[prop];
                        const changes = isIterable(hostValue) && this.getChanges(prop, hostValue);
                        if (changes && !this.checkChangedOptions(prop, hostValue)) {
                            this._host.lockWidgetUpdate();
                            this._host.instance.option(prop, hostValue);
                        }
                    }
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IterableDifferHelper, deps: [{ token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Injectable });
                /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IterableDifferHelper });
            } exports("I", IterableDifferHelper);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IterableDifferHelper, decorators: [{
                        type: Injectable
                    }], ctorParameters: () => [{ type: i0.IterableDiffers }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            class DxServerTransferStateModule {
                state;
                platformId;
                constructor(state, platformId) {
                    this.state = state;
                    this.platformId = platformId;
                    const that = this;
                    ajax.inject({
                        sendRequest(...args) {
                            const key = makeStateKey(that.generateKey(args));
                            const cachedData = that.state.get(key, null);
                            if (isPlatformServer(that.platformId)) {
                                const result = this.callBase.apply(this, args);
                                result.always((data, status) => {
                                    const dataForCache = {
                                        data,
                                        status,
                                    };
                                    that.state.set(key, dataForCache);
                                });
                                return result;
                            }
                            if (cachedData) {
                                const d = Deferred();
                                d.resolve(cachedData.data, cachedData.status);
                                that.state.set(key, null);
                                return d.promise();
                            }
                            return this.callBase.apply(this, args);
                        },
                    });
                }
                generateKey(args) {
                    let keyValue = '';
                    for (const key in args) {
                        if (typeof args[key] === 'object') {
                            const objKey = this.generateKey(args[key]);
                            keyValue += key + objKey;
                        }
                        else {
                            keyValue += key + args[key];
                        }
                    }
                    return keyValue;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxServerTransferStateModule, deps: [{ token: i2.TransferState }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxServerTransferStateModule });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxServerTransferStateModule });
            } exports("dr", DxServerTransferStateModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxServerTransferStateModule, decorators: [{
                        type: NgModule,
                        args: [{}]
                    }], ctorParameters: () => [{ type: i2.TransferState }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [PLATFORM_ID]
                            }] }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAdapterComponent extends NestedOption {
                get applyValidationResults() {
                    return this._getOption('applyValidationResults');
                }
                set applyValidationResults(value) {
                    this._setOption('applyValidationResults', value);
                }
                get bypass() {
                    return this._getOption('bypass');
                }
                set bypass(value) {
                    this._setOption('bypass', value);
                }
                get focus() {
                    return this._getOption('focus');
                }
                set focus(value) {
                    this._setOption('focus', value);
                }
                get getValue() {
                    return this._getOption('getValue');
                }
                set getValue(value) {
                    this._setOption('getValue', value);
                }
                get reset() {
                    return this._getOption('reset');
                }
                set reset(value) {
                    this._setOption('reset', value);
                }
                get validationRequestsCallbacks() {
                    return this._getOption('validationRequestsCallbacks');
                }
                set validationRequestsCallbacks(value) {
                    this._setOption('validationRequestsCallbacks', value);
                }
                get _optionPath() {
                    return 'adapter';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAdapterComponent, selector: "dxo-adapter", inputs: { applyValidationResults: "applyValidationResults", bypass: "bypass", focus: "focus", getValue: "getValue", reset: "reset", validationRequestsCallbacks: "validationRequestsCallbacks" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-adapter', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { applyValidationResults: [{
                            type: Input
                        }], bypass: [{
                            type: Input
                        }], focus: [{
                            type: Input
                        }], getValue: [{
                            type: Input
                        }], reset: [{
                            type: Input
                        }], validationRequestsCallbacks: [{
                            type: Input
                        }] } });
            class DxoAdapterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterModule, declarations: [DxoAdapterComponent], exports: [DxoAdapterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterModule });
            } exports("dc", DxoAdapterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAdapterComponent
                                ],
                                exports: [
                                    DxoAdapterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAdaptiveLayoutComponent extends NestedOption {
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get keepLabels() {
                    return this._getOption('keepLabels');
                }
                set keepLabels(value) {
                    this._setOption('keepLabels', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'adaptiveLayout';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAdaptiveLayoutComponent, selector: "dxo-adaptive-layout", inputs: { height: "height", keepLabels: "keepLabels", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-adaptive-layout', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { height: [{
                            type: Input
                        }], keepLabels: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoAdaptiveLayoutModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutModule, declarations: [DxoAdaptiveLayoutComponent], exports: [DxoAdaptiveLayoutComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutModule });
            } exports("S", DxoAdaptiveLayoutModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAdaptiveLayoutComponent
                                ],
                                exports: [
                                    DxoAdaptiveLayoutComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAggregationIntervalComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'aggregationInterval';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAggregationIntervalComponent, selector: "dxo-aggregation-interval", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-aggregation-interval', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoAggregationIntervalModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalModule, declarations: [DxoAggregationIntervalComponent], exports: [DxoAggregationIntervalComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalModule });
            } exports("X", DxoAggregationIntervalModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAggregationIntervalComponent
                                ],
                                exports: [
                                    DxoAggregationIntervalComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAggregationComponent extends NestedOption {
                get calculate() {
                    return this._getOption('calculate');
                }
                set calculate(value) {
                    this._setOption('calculate', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get method() {
                    return this._getOption('method');
                }
                set method(value) {
                    this._setOption('method', value);
                }
                get _optionPath() {
                    return 'aggregation';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAggregationComponent, selector: "dxo-aggregation", inputs: { calculate: "calculate", enabled: "enabled", method: "method" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-aggregation', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { calculate: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], method: [{
                            type: Input
                        }] } });
            class DxoAggregationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationModule, declarations: [DxoAggregationComponent], exports: [DxoAggregationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationModule });
            } exports("ae", DxoAggregationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAggregationComponent
                                ],
                                exports: [
                                    DxoAggregationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAnimationConfig extends NestedOption {
                get hide() {
                    return this._getOption('hide');
                }
                set hide(value) {
                    this._setOption('hide', value);
                }
                get show() {
                    return this._getOption('show');
                }
                set show(value) {
                    this._setOption('show', value);
                }
                get duration() {
                    return this._getOption('duration');
                }
                set duration(value) {
                    this._setOption('duration', value);
                }
                get easing() {
                    return this._getOption('easing');
                }
                set easing(value) {
                    this._setOption('easing', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get maxPointCountSupported() {
                    return this._getOption('maxPointCountSupported');
                }
                set maxPointCountSupported(value) {
                    this._setOption('maxPointCountSupported', value);
                }
                get complete() {
                    return this._getOption('complete');
                }
                set complete(value) {
                    this._setOption('complete', value);
                }
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get direction() {
                    return this._getOption('direction');
                }
                set direction(value) {
                    this._setOption('direction', value);
                }
                get from() {
                    return this._getOption('from');
                }
                set from(value) {
                    this._setOption('from', value);
                }
                get staggerDelay() {
                    return this._getOption('staggerDelay');
                }
                set staggerDelay(value) {
                    this._setOption('staggerDelay', value);
                }
                get start() {
                    return this._getOption('start');
                }
                set start(value) {
                    this._setOption('start', value);
                }
                get to() {
                    return this._getOption('to');
                }
                set to(value) {
                    this._setOption('to', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAnimationConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationConfig, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoAnimationComponent extends DxoAnimationConfig {
                get _optionPath() {
                    return 'animation';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAnimationComponent, selector: "dxo-animation", inputs: { hide: "hide", show: "show", duration: "duration", easing: "easing", enabled: "enabled", maxPointCountSupported: "maxPointCountSupported", complete: "complete", delay: "delay", direction: "direction", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-animation', template: '', providers: [NestedOptionHost], inputs: [
                                    'hide',
                                    'show',
                                    'duration',
                                    'easing',
                                    'enabled',
                                    'maxPointCountSupported',
                                    'complete',
                                    'delay',
                                    'direction',
                                    'from',
                                    'staggerDelay',
                                    'start',
                                    'to',
                                    'type'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoAnimationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationModule, declarations: [DxoAnimationComponent], exports: [DxoAnimationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationModule });
            } exports("j", DxoAnimationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAnimationComponent
                                ],
                                exports: [
                                    DxoAnimationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiChartAnnotationConfig extends CollectionNestedOption {
                get allowDragging() {
                    return this._getOption('allowDragging');
                }
                set allowDragging(value) {
                    this._setOption('allowDragging', value);
                }
                get argument() {
                    return this._getOption('argument');
                }
                set argument(value) {
                    this._setOption('argument', value);
                }
                get arrowLength() {
                    return this._getOption('arrowLength');
                }
                set arrowLength(value) {
                    this._setOption('arrowLength', value);
                }
                get arrowWidth() {
                    return this._getOption('arrowWidth');
                }
                set arrowWidth(value) {
                    this._setOption('arrowWidth', value);
                }
                get axis() {
                    return this._getOption('axis');
                }
                set axis(value) {
                    this._setOption('axis', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get customizeTooltip() {
                    return this._getOption('customizeTooltip');
                }
                set customizeTooltip(value) {
                    this._setOption('customizeTooltip', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get description() {
                    return this._getOption('description');
                }
                set description(value) {
                    this._setOption('description', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get image() {
                    return this._getOption('image');
                }
                set image(value) {
                    this._setOption('image', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get offsetX() {
                    return this._getOption('offsetX');
                }
                set offsetX(value) {
                    this._setOption('offsetX', value);
                }
                get offsetY() {
                    return this._getOption('offsetY');
                }
                set offsetY(value) {
                    this._setOption('offsetY', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get series() {
                    return this._getOption('series');
                }
                set series(value) {
                    this._setOption('series', value);
                }
                get shadow() {
                    return this._getOption('shadow');
                }
                set shadow(value) {
                    this._setOption('shadow', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get tooltipEnabled() {
                    return this._getOption('tooltipEnabled');
                }
                set tooltipEnabled(value) {
                    this._setOption('tooltipEnabled', value);
                }
                get tooltipTemplate() {
                    return this._getOption('tooltipTemplate');
                }
                set tooltipTemplate(value) {
                    this._setOption('tooltipTemplate', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get angle() {
                    return this._getOption('angle');
                }
                set angle(value) {
                    this._setOption('angle', value);
                }
                get radius() {
                    return this._getOption('radius');
                }
                set radius(value) {
                    this._setOption('radius', value);
                }
                get coordinates() {
                    return this._getOption('coordinates');
                }
                set coordinates(value) {
                    this._setOption('coordinates', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChartAnnotationConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiChartAnnotationConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChartAnnotationConfig, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiAnnotationComponent extends DxiChartAnnotationConfig {
                get _optionPath() {
                    return 'annotations';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiAnnotationComponent, selector: "dxi-annotation", inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", name: "name", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y", location: "location", angle: "angle", radius: "radius", coordinates: "coordinates" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("O", DxiAnnotationComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-annotation', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowDragging',
                                    'argument',
                                    'arrowLength',
                                    'arrowWidth',
                                    'axis',
                                    'border',
                                    'color',
                                    'customizeTooltip',
                                    'data',
                                    'description',
                                    'font',
                                    'height',
                                    'image',
                                    'name',
                                    'offsetX',
                                    'offsetY',
                                    'opacity',
                                    'paddingLeftRight',
                                    'paddingTopBottom',
                                    'series',
                                    'shadow',
                                    'template',
                                    'text',
                                    'textOverflow',
                                    'tooltipEnabled',
                                    'tooltipTemplate',
                                    'type',
                                    'value',
                                    'width',
                                    'wordWrap',
                                    'x',
                                    'y',
                                    'location',
                                    'angle',
                                    'radius',
                                    'coordinates'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiAnnotationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationModule, declarations: [DxiAnnotationComponent], exports: [DxiAnnotationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationModule });
            } exports("T", DxiAnnotationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiAnnotationComponent
                                ],
                                exports: [
                                    DxiAnnotationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoApiKeyComponent extends NestedOption {
                get bing() {
                    return this._getOption('bing');
                }
                set bing(value) {
                    this._setOption('bing', value);
                }
                get google() {
                    return this._getOption('google');
                }
                set google(value) {
                    this._setOption('google', value);
                }
                get googleStatic() {
                    return this._getOption('googleStatic');
                }
                set googleStatic(value) {
                    this._setOption('googleStatic', value);
                }
                get _optionPath() {
                    return 'apiKey';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoApiKeyComponent, selector: "dxo-api-key", inputs: { bing: "bing", google: "google", googleStatic: "googleStatic" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-api-key', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { bing: [{
                            type: Input
                        }], google: [{
                            type: Input
                        }], googleStatic: [{
                            type: Input
                        }] } });
            class DxoApiKeyModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyModule, declarations: [DxoApiKeyComponent], exports: [DxoApiKeyComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyModule });
            } exports("ch", DxoApiKeyModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoApiKeyComponent
                                ],
                                exports: [
                                    DxoApiKeyComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAppointmentDraggingComponent extends NestedOption {
                get autoScroll() {
                    return this._getOption('autoScroll');
                }
                set autoScroll(value) {
                    this._setOption('autoScroll', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get group() {
                    return this._getOption('group');
                }
                set group(value) {
                    this._setOption('group', value);
                }
                get onAdd() {
                    return this._getOption('onAdd');
                }
                set onAdd(value) {
                    this._setOption('onAdd', value);
                }
                get onDragEnd() {
                    return this._getOption('onDragEnd');
                }
                set onDragEnd(value) {
                    this._setOption('onDragEnd', value);
                }
                get onDragMove() {
                    return this._getOption('onDragMove');
                }
                set onDragMove(value) {
                    this._setOption('onDragMove', value);
                }
                get onDragStart() {
                    return this._getOption('onDragStart');
                }
                set onDragStart(value) {
                    this._setOption('onDragStart', value);
                }
                get onRemove() {
                    return this._getOption('onRemove');
                }
                set onRemove(value) {
                    this._setOption('onRemove', value);
                }
                get scrollSensitivity() {
                    return this._getOption('scrollSensitivity');
                }
                set scrollSensitivity(value) {
                    this._setOption('scrollSensitivity', value);
                }
                get scrollSpeed() {
                    return this._getOption('scrollSpeed');
                }
                set scrollSpeed(value) {
                    this._setOption('scrollSpeed', value);
                }
                get _optionPath() {
                    return 'appointmentDragging';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAppointmentDraggingComponent, selector: "dxo-appointment-dragging", inputs: { autoScroll: "autoScroll", data: "data", group: "group", onAdd: "onAdd", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onRemove: "onRemove", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-appointment-dragging', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { autoScroll: [{
                            type: Input
                        }], data: [{
                            type: Input
                        }], group: [{
                            type: Input
                        }], onAdd: [{
                            type: Input
                        }], onDragEnd: [{
                            type: Input
                        }], onDragMove: [{
                            type: Input
                        }], onDragStart: [{
                            type: Input
                        }], onRemove: [{
                            type: Input
                        }], scrollSensitivity: [{
                            type: Input
                        }], scrollSpeed: [{
                            type: Input
                        }] } });
            class DxoAppointmentDraggingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingModule, declarations: [DxoAppointmentDraggingComponent], exports: [DxoAppointmentDraggingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingModule });
            } exports("cP", DxoAppointmentDraggingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAppointmentDraggingComponent
                                ],
                                exports: [
                                    DxoAppointmentDraggingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoChartCommonSeriesSettings extends NestedOption {
                get aggregation() {
                    return this._getOption('aggregation');
                }
                set aggregation(value) {
                    this._setOption('aggregation', value);
                }
                get area() {
                    return this._getOption('area');
                }
                set area(value) {
                    this._setOption('area', value);
                }
                get argumentField() {
                    return this._getOption('argumentField');
                }
                set argumentField(value) {
                    this._setOption('argumentField', value);
                }
                get axis() {
                    return this._getOption('axis');
                }
                set axis(value) {
                    this._setOption('axis', value);
                }
                get bar() {
                    return this._getOption('bar');
                }
                set bar(value) {
                    this._setOption('bar', value);
                }
                get barOverlapGroup() {
                    return this._getOption('barOverlapGroup');
                }
                set barOverlapGroup(value) {
                    this._setOption('barOverlapGroup', value);
                }
                get barPadding() {
                    return this._getOption('barPadding');
                }
                set barPadding(value) {
                    this._setOption('barPadding', value);
                }
                get barWidth() {
                    return this._getOption('barWidth');
                }
                set barWidth(value) {
                    this._setOption('barWidth', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get bubble() {
                    return this._getOption('bubble');
                }
                set bubble(value) {
                    this._setOption('bubble', value);
                }
                get candlestick() {
                    return this._getOption('candlestick');
                }
                set candlestick(value) {
                    this._setOption('candlestick', value);
                }
                get closeValueField() {
                    return this._getOption('closeValueField');
                }
                set closeValueField(value) {
                    this._setOption('closeValueField', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get cornerRadius() {
                    return this._getOption('cornerRadius');
                }
                set cornerRadius(value) {
                    this._setOption('cornerRadius', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get fullstackedarea() {
                    return this._getOption('fullstackedarea');
                }
                set fullstackedarea(value) {
                    this._setOption('fullstackedarea', value);
                }
                get fullstackedbar() {
                    return this._getOption('fullstackedbar');
                }
                set fullstackedbar(value) {
                    this._setOption('fullstackedbar', value);
                }
                get fullstackedline() {
                    return this._getOption('fullstackedline');
                }
                set fullstackedline(value) {
                    this._setOption('fullstackedline', value);
                }
                get fullstackedspline() {
                    return this._getOption('fullstackedspline');
                }
                set fullstackedspline(value) {
                    this._setOption('fullstackedspline', value);
                }
                get fullstackedsplinearea() {
                    return this._getOption('fullstackedsplinearea');
                }
                set fullstackedsplinearea(value) {
                    this._setOption('fullstackedsplinearea', value);
                }
                get highValueField() {
                    return this._getOption('highValueField');
                }
                set highValueField(value) {
                    this._setOption('highValueField', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get ignoreEmptyPoints() {
                    return this._getOption('ignoreEmptyPoints');
                }
                set ignoreEmptyPoints(value) {
                    this._setOption('ignoreEmptyPoints', value);
                }
                get innerColor() {
                    return this._getOption('innerColor');
                }
                set innerColor(value) {
                    this._setOption('innerColor', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get line() {
                    return this._getOption('line');
                }
                set line(value) {
                    this._setOption('line', value);
                }
                get lowValueField() {
                    return this._getOption('lowValueField');
                }
                set lowValueField(value) {
                    this._setOption('lowValueField', value);
                }
                get maxLabelCount() {
                    return this._getOption('maxLabelCount');
                }
                set maxLabelCount(value) {
                    this._setOption('maxLabelCount', value);
                }
                get minBarSize() {
                    return this._getOption('minBarSize');
                }
                set minBarSize(value) {
                    this._setOption('minBarSize', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get openValueField() {
                    return this._getOption('openValueField');
                }
                set openValueField(value) {
                    this._setOption('openValueField', value);
                }
                get pane() {
                    return this._getOption('pane');
                }
                set pane(value) {
                    this._setOption('pane', value);
                }
                get point() {
                    return this._getOption('point');
                }
                set point(value) {
                    this._setOption('point', value);
                }
                get rangearea() {
                    return this._getOption('rangearea');
                }
                set rangearea(value) {
                    this._setOption('rangearea', value);
                }
                get rangebar() {
                    return this._getOption('rangebar');
                }
                set rangebar(value) {
                    this._setOption('rangebar', value);
                }
                get rangeValue1Field() {
                    return this._getOption('rangeValue1Field');
                }
                set rangeValue1Field(value) {
                    this._setOption('rangeValue1Field', value);
                }
                get rangeValue2Field() {
                    return this._getOption('rangeValue2Field');
                }
                set rangeValue2Field(value) {
                    this._setOption('rangeValue2Field', value);
                }
                get reduction() {
                    return this._getOption('reduction');
                }
                set reduction(value) {
                    this._setOption('reduction', value);
                }
                get scatter() {
                    return this._getOption('scatter');
                }
                set scatter(value) {
                    this._setOption('scatter', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get showInLegend() {
                    return this._getOption('showInLegend');
                }
                set showInLegend(value) {
                    this._setOption('showInLegend', value);
                }
                get sizeField() {
                    return this._getOption('sizeField');
                }
                set sizeField(value) {
                    this._setOption('sizeField', value);
                }
                get spline() {
                    return this._getOption('spline');
                }
                set spline(value) {
                    this._setOption('spline', value);
                }
                get splinearea() {
                    return this._getOption('splinearea');
                }
                set splinearea(value) {
                    this._setOption('splinearea', value);
                }
                get stack() {
                    return this._getOption('stack');
                }
                set stack(value) {
                    this._setOption('stack', value);
                }
                get stackedarea() {
                    return this._getOption('stackedarea');
                }
                set stackedarea(value) {
                    this._setOption('stackedarea', value);
                }
                get stackedbar() {
                    return this._getOption('stackedbar');
                }
                set stackedbar(value) {
                    this._setOption('stackedbar', value);
                }
                get stackedline() {
                    return this._getOption('stackedline');
                }
                set stackedline(value) {
                    this._setOption('stackedline', value);
                }
                get stackedspline() {
                    return this._getOption('stackedspline');
                }
                set stackedspline(value) {
                    this._setOption('stackedspline', value);
                }
                get stackedsplinearea() {
                    return this._getOption('stackedsplinearea');
                }
                set stackedsplinearea(value) {
                    this._setOption('stackedsplinearea', value);
                }
                get steparea() {
                    return this._getOption('steparea');
                }
                set steparea(value) {
                    this._setOption('steparea', value);
                }
                get stepline() {
                    return this._getOption('stepline');
                }
                set stepline(value) {
                    this._setOption('stepline', value);
                }
                get stock() {
                    return this._getOption('stock');
                }
                set stock(value) {
                    this._setOption('stock', value);
                }
                get tagField() {
                    return this._getOption('tagField');
                }
                set tagField(value) {
                    this._setOption('tagField', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueErrorBar() {
                    return this._getOption('valueErrorBar');
                }
                set valueErrorBar(value) {
                    this._setOption('valueErrorBar', value);
                }
                get valueField() {
                    return this._getOption('valueField');
                }
                set valueField(value) {
                    this._setOption('valueField', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get argumentType() {
                    return this._getOption('argumentType');
                }
                set argumentType(value) {
                    this._setOption('argumentType', value);
                }
                get minSegmentSize() {
                    return this._getOption('minSegmentSize');
                }
                set minSegmentSize(value) {
                    this._setOption('minSegmentSize', value);
                }
                get smallValuesGrouping() {
                    return this._getOption('smallValuesGrouping');
                }
                set smallValuesGrouping(value) {
                    this._setOption('smallValuesGrouping', value);
                }
                get closed() {
                    return this._getOption('closed');
                }
                set closed(value) {
                    this._setOption('closed', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartCommonSeriesSettings, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoChartCommonSeriesSettings, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartCommonSeriesSettings, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoAreaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'area';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAreaComponent, selector: "dxo-area", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-area', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoAreaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaModule, declarations: [DxoAreaComponent], exports: [DxoAreaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaModule });
            } exports("af", DxoAreaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAreaComponent
                                ],
                                exports: [
                                    DxoAreaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiVizScaleBreak extends CollectionNestedOption {
                get endValue() {
                    return this._getOption('endValue');
                }
                set endValue(value) {
                    this._setOption('endValue', value);
                }
                get startValue() {
                    return this._getOption('startValue');
                }
                set startValue(value) {
                    this._setOption('startValue', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiVizScaleBreak, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiVizScaleBreak, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiVizScaleBreak, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiBreakComponent extends DxiVizScaleBreak {
                get _optionPath() {
                    return 'breaks';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiBreakComponent, selector: "dxi-break", inputs: { endValue: "endValue", startValue: "startValue" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-break', template: '', providers: [NestedOptionHost], inputs: [
                                    'endValue',
                                    'startValue'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiBreakModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakModule, declarations: [DxiBreakComponent], exports: [DxiBreakComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakModule });
            } exports("Y", DxiBreakModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiBreakComponent
                                ],
                                exports: [
                                    DxiBreakComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiConstantLineComponent extends CollectionNestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get displayBehindSeries() {
                    return this._getOption('displayBehindSeries');
                }
                set displayBehindSeries(value) {
                    this._setOption('displayBehindSeries', value);
                }
                get extendAxis() {
                    return this._getOption('extendAxis');
                }
                set extendAxis(value) {
                    this._setOption('extendAxis', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'constantLines';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiConstantLineComponent, selector: "dxi-constant-line", inputs: { color: "color", dashStyle: "dashStyle", displayBehindSeries: "displayBehindSeries", extendAxis: "extendAxis", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", value: "value", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-constant-line', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], displayBehindSeries: [{
                            type: Input
                        }], extendAxis: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], value: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxiConstantLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineModule, declarations: [DxiConstantLineComponent], exports: [DxiConstantLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineModule });
            } exports("_", DxiConstantLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiConstantLineComponent
                                ],
                                exports: [
                                    DxiConstantLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiStripComponent extends CollectionNestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get endValue() {
                    return this._getOption('endValue');
                }
                set endValue(value) {
                    this._setOption('endValue', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get startValue() {
                    return this._getOption('startValue');
                }
                set startValue(value) {
                    this._setOption('startValue', value);
                }
                get _optionPath() {
                    return 'strips';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiStripComponent, selector: "dxi-strip", inputs: { color: "color", endValue: "endValue", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", startValue: "startValue" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-strip', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], endValue: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], startValue: [{
                            type: Input
                        }] } });
            class DxiStripModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiStripModule, declarations: [DxiStripComponent], exports: [DxiStripComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripModule });
            } exports("a5", DxiStripModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiStripComponent
                                ],
                                exports: [
                                    DxiStripComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoArgumentAxisComponent extends NestedOption {
                get aggregateByCategory() {
                    return this._getOption('aggregateByCategory');
                }
                set aggregateByCategory(value) {
                    this._setOption('aggregateByCategory', value);
                }
                get aggregatedPointsPosition() {
                    return this._getOption('aggregatedPointsPosition');
                }
                set aggregatedPointsPosition(value) {
                    this._setOption('aggregatedPointsPosition', value);
                }
                get aggregationGroupWidth() {
                    return this._getOption('aggregationGroupWidth');
                }
                set aggregationGroupWidth(value) {
                    this._setOption('aggregationGroupWidth', value);
                }
                get aggregationInterval() {
                    return this._getOption('aggregationInterval');
                }
                set aggregationInterval(value) {
                    this._setOption('aggregationInterval', value);
                }
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get argumentType() {
                    return this._getOption('argumentType');
                }
                set argumentType(value) {
                    this._setOption('argumentType', value);
                }
                get axisDivisionFactor() {
                    return this._getOption('axisDivisionFactor');
                }
                set axisDivisionFactor(value) {
                    this._setOption('axisDivisionFactor', value);
                }
                get breaks() {
                    return this._getOption('breaks');
                }
                set breaks(value) {
                    this._setOption('breaks', value);
                }
                get breakStyle() {
                    return this._getOption('breakStyle');
                }
                set breakStyle(value) {
                    this._setOption('breakStyle', value);
                }
                get categories() {
                    return this._getOption('categories');
                }
                set categories(value) {
                    this._setOption('categories', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get constantLines() {
                    return this._getOption('constantLines');
                }
                set constantLines(value) {
                    this._setOption('constantLines', value);
                }
                get constantLineStyle() {
                    return this._getOption('constantLineStyle');
                }
                set constantLineStyle(value) {
                    this._setOption('constantLineStyle', value);
                }
                get customPosition() {
                    return this._getOption('customPosition');
                }
                set customPosition(value) {
                    this._setOption('customPosition', value);
                }
                get customPositionAxis() {
                    return this._getOption('customPositionAxis');
                }
                set customPositionAxis(value) {
                    this._setOption('customPositionAxis', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get grid() {
                    return this._getOption('grid');
                }
                set grid(value) {
                    this._setOption('grid', value);
                }
                get holidays() {
                    return this._getOption('holidays');
                }
                set holidays(value) {
                    this._setOption('holidays', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get inverted() {
                    return this._getOption('inverted');
                }
                set inverted(value) {
                    this._setOption('inverted', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get linearThreshold() {
                    return this._getOption('linearThreshold');
                }
                set linearThreshold(value) {
                    this._setOption('linearThreshold', value);
                }
                get logarithmBase() {
                    return this._getOption('logarithmBase');
                }
                set logarithmBase(value) {
                    this._setOption('logarithmBase', value);
                }
                get maxValueMargin() {
                    return this._getOption('maxValueMargin');
                }
                set maxValueMargin(value) {
                    this._setOption('maxValueMargin', value);
                }
                get minorGrid() {
                    return this._getOption('minorGrid');
                }
                set minorGrid(value) {
                    this._setOption('minorGrid', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minorTickCount() {
                    return this._getOption('minorTickCount');
                }
                set minorTickCount(value) {
                    this._setOption('minorTickCount', value);
                }
                get minorTickInterval() {
                    return this._getOption('minorTickInterval');
                }
                set minorTickInterval(value) {
                    this._setOption('minorTickInterval', value);
                }
                get minValueMargin() {
                    return this._getOption('minValueMargin');
                }
                set minValueMargin(value) {
                    this._setOption('minValueMargin', value);
                }
                get minVisualRangeLength() {
                    return this._getOption('minVisualRangeLength');
                }
                set minVisualRangeLength(value) {
                    this._setOption('minVisualRangeLength', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get placeholderSize() {
                    return this._getOption('placeholderSize');
                }
                set placeholderSize(value) {
                    this._setOption('placeholderSize', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get singleWorkdays() {
                    return this._getOption('singleWorkdays');
                }
                set singleWorkdays(value) {
                    this._setOption('singleWorkdays', value);
                }
                get strips() {
                    return this._getOption('strips');
                }
                set strips(value) {
                    this._setOption('strips', value);
                }
                get stripStyle() {
                    return this._getOption('stripStyle');
                }
                set stripStyle(value) {
                    this._setOption('stripStyle', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get tickInterval() {
                    return this._getOption('tickInterval');
                }
                set tickInterval(value) {
                    this._setOption('tickInterval', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueMarginsEnabled() {
                    return this._getOption('valueMarginsEnabled');
                }
                set valueMarginsEnabled(value) {
                    this._setOption('valueMarginsEnabled', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visualRange() {
                    return this._getOption('visualRange');
                }
                set visualRange(value) {
                    this._setOption('visualRange', value);
                }
                get visualRangeUpdateMode() {
                    return this._getOption('visualRangeUpdateMode');
                }
                set visualRangeUpdateMode(value) {
                    this._setOption('visualRangeUpdateMode', value);
                }
                get wholeRange() {
                    return this._getOption('wholeRange');
                }
                set wholeRange(value) {
                    this._setOption('wholeRange', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get workdaysOnly() {
                    return this._getOption('workdaysOnly');
                }
                set workdaysOnly(value) {
                    this._setOption('workdaysOnly', value);
                }
                get workWeek() {
                    return this._getOption('workWeek');
                }
                set workWeek(value) {
                    this._setOption('workWeek', value);
                }
                get firstPointOnStartAngle() {
                    return this._getOption('firstPointOnStartAngle');
                }
                set firstPointOnStartAngle(value) {
                    this._setOption('firstPointOnStartAngle', value);
                }
                get originValue() {
                    return this._getOption('originValue');
                }
                set originValue(value) {
                    this._setOption('originValue', value);
                }
                get period() {
                    return this._getOption('period');
                }
                set period(value) {
                    this._setOption('period', value);
                }
                get startAngle() {
                    return this._getOption('startAngle');
                }
                set startAngle(value) {
                    this._setOption('startAngle', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                categoriesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visualRangeChange;
                get _optionPath() {
                    return 'argumentAxis';
                }
                get breaksChildren() {
                    return this._getOption('breaks');
                }
                set breaksChildren(value) {
                    this.setChildren('breaks', value);
                }
                get constantLinesChildren() {
                    return this._getOption('constantLines');
                }
                set constantLinesChildren(value) {
                    this.setChildren('constantLines', value);
                }
                get stripsChildren() {
                    return this._getOption('strips');
                }
                set stripsChildren(value) {
                    this.setChildren('strips', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'categoriesChange' },
                        { emit: 'visualRangeChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoArgumentAxisComponent, selector: "dxo-argument-axis", inputs: { aggregateByCategory: "aggregateByCategory", aggregatedPointsPosition: "aggregatedPointsPosition", aggregationGroupWidth: "aggregationGroupWidth", aggregationInterval: "aggregationInterval", allowDecimals: "allowDecimals", argumentType: "argumentType", axisDivisionFactor: "axisDivisionFactor", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", customPosition: "customPosition", customPositionAxis: "customPositionAxis", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", holidays: "holidays", hoverMode: "hoverMode", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", offset: "offset", opacity: "opacity", placeholderSize: "placeholderSize", position: "position", singleWorkdays: "singleWorkdays", strips: "strips", stripStyle: "stripStyle", tick: "tick", tickInterval: "tickInterval", title: "title", type: "type", valueMarginsEnabled: "valueMarginsEnabled", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width", workdaysOnly: "workdaysOnly", workWeek: "workWeek", firstPointOnStartAngle: "firstPointOnStartAngle", originValue: "originValue", period: "period", startAngle: "startAngle" }, outputs: { categoriesChange: "categoriesChange", visualRangeChange: "visualRangeChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "breaksChildren", predicate: i0.forwardRef(() => DxiBreakComponent) }, { propertyName: "constantLinesChildren", predicate: i0.forwardRef(() => DxiConstantLineComponent) }, { propertyName: "stripsChildren", predicate: i0.forwardRef(() => DxiStripComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-argument-axis', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { aggregateByCategory: [{
                            type: Input
                        }], aggregatedPointsPosition: [{
                            type: Input
                        }], aggregationGroupWidth: [{
                            type: Input
                        }], aggregationInterval: [{
                            type: Input
                        }], allowDecimals: [{
                            type: Input
                        }], argumentType: [{
                            type: Input
                        }], axisDivisionFactor: [{
                            type: Input
                        }], breaks: [{
                            type: Input
                        }], breakStyle: [{
                            type: Input
                        }], categories: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], constantLines: [{
                            type: Input
                        }], constantLineStyle: [{
                            type: Input
                        }], customPosition: [{
                            type: Input
                        }], customPositionAxis: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], grid: [{
                            type: Input
                        }], holidays: [{
                            type: Input
                        }], hoverMode: [{
                            type: Input
                        }], inverted: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], linearThreshold: [{
                            type: Input
                        }], logarithmBase: [{
                            type: Input
                        }], maxValueMargin: [{
                            type: Input
                        }], minorGrid: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minorTickCount: [{
                            type: Input
                        }], minorTickInterval: [{
                            type: Input
                        }], minValueMargin: [{
                            type: Input
                        }], minVisualRangeLength: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], placeholderSize: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], singleWorkdays: [{
                            type: Input
                        }], strips: [{
                            type: Input
                        }], stripStyle: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], tickInterval: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], valueMarginsEnabled: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], visualRange: [{
                            type: Input
                        }], visualRangeUpdateMode: [{
                            type: Input
                        }], wholeRange: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], workdaysOnly: [{
                            type: Input
                        }], workWeek: [{
                            type: Input
                        }], firstPointOnStartAngle: [{
                            type: Input
                        }], originValue: [{
                            type: Input
                        }], period: [{
                            type: Input
                        }], startAngle: [{
                            type: Input
                        }], categoriesChange: [{
                            type: Output
                        }], visualRangeChange: [{
                            type: Output
                        }], breaksChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiBreakComponent)]
                        }], constantLinesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiConstantLineComponent)]
                        }], stripsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiStripComponent)]
                        }] } });
            class DxoArgumentAxisModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisModule, declarations: [DxoArgumentAxisComponent], exports: [DxoArgumentAxisComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisModule });
            } exports("V", DxoArgumentAxisModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoArgumentAxisComponent
                                ],
                                exports: [
                                    DxoArgumentAxisComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFormat extends NestedOption {
                get currency() {
                    return this._getOption('currency');
                }
                set currency(value) {
                    this._setOption('currency', value);
                }
                get formatter() {
                    return this._getOption('formatter');
                }
                set formatter(value) {
                    this._setOption('formatter', value);
                }
                get parser() {
                    return this._getOption('parser');
                }
                set parser(value) {
                    this._setOption('parser', value);
                }
                get precision() {
                    return this._getOption('precision');
                }
                set precision(value) {
                    this._setOption('precision', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get useCurrencyAccountingStyle() {
                    return this._getOption('useCurrencyAccountingStyle');
                }
                set useCurrencyAccountingStyle(value) {
                    this._setOption('useCurrencyAccountingStyle', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormat, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormat, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormat, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoArgumentFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'argumentFormat';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoArgumentFormatComponent, selector: "dxo-argument-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-argument-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoArgumentFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatModule, declarations: [DxoArgumentFormatComponent], exports: [DxoArgumentFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatModule });
            } exports("az", DxoArgumentFormatModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoArgumentFormatComponent
                                ],
                                exports: [
                                    DxoArgumentFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAtComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'at';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAtComponent, selector: "dxo-at", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-at', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoAtModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAtModule, declarations: [DxoAtComponent], exports: [DxoAtComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtModule });
            } exports("n", DxoAtModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAtComponent
                                ],
                                exports: [
                                    DxoAtComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAutoLayoutComponent extends NestedOption {
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'autoLayout';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAutoLayoutComponent, selector: "dxo-auto-layout", inputs: { orientation: "orientation", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-auto-layout', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { orientation: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxoAutoLayoutModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutModule, declarations: [DxoAutoLayoutComponent], exports: [DxoAutoLayoutComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutModule });
            } exports("bl", DxoAutoLayoutModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAutoLayoutComponent
                                ],
                                exports: [
                                    DxoAutoLayoutComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoChartsColor extends NestedOption {
                get base() {
                    return this._getOption('base');
                }
                set base(value) {
                    this._setOption('base', value);
                }
                get fillId() {
                    return this._getOption('fillId');
                }
                set fillId(value) {
                    this._setOption('fillId', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartsColor, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoChartsColor, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartsColor, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoBackgroundColorComponent extends DxoChartsColor {
                get _optionPath() {
                    return 'backgroundColor';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBackgroundColorComponent, selector: "dxo-background-color", inputs: { base: "base", fillId: "fillId" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-background-color', template: '', providers: [NestedOptionHost], inputs: [
                                    'base',
                                    'fillId'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoBackgroundColorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorModule, declarations: [DxoBackgroundColorComponent], exports: [DxoBackgroundColorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorModule });
            } exports("ac", DxoBackgroundColorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBackgroundColorComponent
                                ],
                                exports: [
                                    DxoBackgroundColorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBackgroundComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get image() {
                    return this._getOption('image');
                }
                set image(value) {
                    this._setOption('image', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get borderColor() {
                    return this._getOption('borderColor');
                }
                set borderColor(value) {
                    this._setOption('borderColor', value);
                }
                get _optionPath() {
                    return 'background';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBackgroundComponent, selector: "dxo-background", inputs: { color: "color", image: "image", visible: "visible", borderColor: "borderColor" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-background', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], image: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], borderColor: [{
                            type: Input
                        }] } });
            class DxoBackgroundModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundModule, declarations: [DxoBackgroundComponent], exports: [DxoBackgroundComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundModule });
            } exports("cx", DxoBackgroundModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBackgroundComponent
                                ],
                                exports: [
                                    DxoBackgroundComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoBarComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'bar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBarComponent, selector: "dxo-bar", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-bar', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoBarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBarModule, declarations: [DxoBarComponent], exports: [DxoBarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarModule });
            } exports("aq", DxoBarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBarComponent
                                ],
                                exports: [
                                    DxoBarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBehaviorComponent extends NestedOption {
                get allowSlidersSwap() {
                    return this._getOption('allowSlidersSwap');
                }
                set allowSlidersSwap(value) {
                    this._setOption('allowSlidersSwap', value);
                }
                get animationEnabled() {
                    return this._getOption('animationEnabled');
                }
                set animationEnabled(value) {
                    this._setOption('animationEnabled', value);
                }
                get callValueChanged() {
                    return this._getOption('callValueChanged');
                }
                set callValueChanged(value) {
                    this._setOption('callValueChanged', value);
                }
                get manualRangeSelectionEnabled() {
                    return this._getOption('manualRangeSelectionEnabled');
                }
                set manualRangeSelectionEnabled(value) {
                    this._setOption('manualRangeSelectionEnabled', value);
                }
                get moveSelectedRangeByClick() {
                    return this._getOption('moveSelectedRangeByClick');
                }
                set moveSelectedRangeByClick(value) {
                    this._setOption('moveSelectedRangeByClick', value);
                }
                get snapToTicks() {
                    return this._getOption('snapToTicks');
                }
                set snapToTicks(value) {
                    this._setOption('snapToTicks', value);
                }
                get valueChangeMode() {
                    return this._getOption('valueChangeMode');
                }
                set valueChangeMode(value) {
                    this._setOption('valueChangeMode', value);
                }
                get _optionPath() {
                    return 'behavior';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBehaviorComponent, selector: "dxo-behavior", inputs: { allowSlidersSwap: "allowSlidersSwap", animationEnabled: "animationEnabled", callValueChanged: "callValueChanged", manualRangeSelectionEnabled: "manualRangeSelectionEnabled", moveSelectedRangeByClick: "moveSelectedRangeByClick", snapToTicks: "snapToTicks", valueChangeMode: "valueChangeMode" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-behavior', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowSlidersSwap: [{
                            type: Input
                        }], animationEnabled: [{
                            type: Input
                        }], callValueChanged: [{
                            type: Input
                        }], manualRangeSelectionEnabled: [{
                            type: Input
                        }], moveSelectedRangeByClick: [{
                            type: Input
                        }], snapToTicks: [{
                            type: Input
                        }], valueChangeMode: [{
                            type: Input
                        }] } });
            class DxoBehaviorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorModule, declarations: [DxoBehaviorComponent], exports: [DxoBehaviorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorModule });
            } exports("cy", DxoBehaviorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBehaviorComponent
                                ],
                                exports: [
                                    DxoBehaviorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBorderComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get cornerRadius() {
                    return this._getOption('cornerRadius');
                }
                set cornerRadius(value) {
                    this._setOption('cornerRadius', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get bottom() {
                    return this._getOption('bottom');
                }
                set bottom(value) {
                    this._setOption('bottom', value);
                }
                get left() {
                    return this._getOption('left');
                }
                set left(value) {
                    this._setOption('left', value);
                }
                get right() {
                    return this._getOption('right');
                }
                set right(value) {
                    this._setOption('right', value);
                }
                get top() {
                    return this._getOption('top');
                }
                set top(value) {
                    this._setOption('top', value);
                }
                get _optionPath() {
                    return 'border';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBorderComponent, selector: "dxo-border", inputs: { color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", opacity: "opacity", visible: "visible", width: "width", bottom: "bottom", left: "left", right: "right", top: "top" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-border', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], cornerRadius: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], bottom: [{
                            type: Input
                        }], left: [{
                            type: Input
                        }], right: [{
                            type: Input
                        }], top: [{
                            type: Input
                        }] } });
            class DxoBorderModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderModule, declarations: [DxoBorderComponent], exports: [DxoBorderComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderModule });
            } exports("B", DxoBorderModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBorderComponent
                                ],
                                exports: [
                                    DxoBorderComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBoundaryOffsetComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'boundaryOffset';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBoundaryOffsetComponent, selector: "dxo-boundary-offset", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-boundary-offset', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoBoundaryOffsetModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetModule, declarations: [DxoBoundaryOffsetComponent], exports: [DxoBoundaryOffsetComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetModule });
            } exports("o", DxoBoundaryOffsetModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBoundaryOffsetComponent
                                ],
                                exports: [
                                    DxoBoundaryOffsetComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBoxOptions extends NestedOption {
                get align() {
                    return this._getOption('align');
                }
                set align(value) {
                    this._setOption('align', value);
                }
                get crossAlign() {
                    return this._getOption('crossAlign');
                }
                set crossAlign(value) {
                    this._setOption('crossAlign', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get direction() {
                    return this._getOption('direction');
                }
                set direction(value) {
                    this._setOption('direction', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get itemHoldTimeout() {
                    return this._getOption('itemHoldTimeout');
                }
                set itemHoldTimeout(value) {
                    this._setOption('itemHoldTimeout', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get itemTemplate() {
                    return this._getOption('itemTemplate');
                }
                set itemTemplate(value) {
                    this._setOption('itemTemplate', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onItemClick() {
                    return this._getOption('onItemClick');
                }
                set onItemClick(value) {
                    this._setOption('onItemClick', value);
                }
                get onItemContextMenu() {
                    return this._getOption('onItemContextMenu');
                }
                set onItemContextMenu(value) {
                    this._setOption('onItemContextMenu', value);
                }
                get onItemHold() {
                    return this._getOption('onItemHold');
                }
                set onItemHold(value) {
                    this._setOption('onItemHold', value);
                }
                get onItemRendered() {
                    return this._getOption('onItemRendered');
                }
                set onItemRendered(value) {
                    this._setOption('onItemRendered', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBoxOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiButtonGroupItem extends CollectionNestedOption {
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get html() {
                    return this._getOption('html');
                }
                set html(value) {
                    this._setOption('html', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get titleTemplate() {
                    return this._getOption('titleTemplate');
                }
                set titleTemplate(value) {
                    this._setOption('titleTemplate', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get onClick() {
                    return this._getOption('onClick');
                }
                set onClick(value) {
                    this._setOption('onClick', value);
                }
                get stylingMode() {
                    return this._getOption('stylingMode');
                }
                set stylingMode(value) {
                    this._setOption('stylingMode', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get baseSize() {
                    return this._getOption('baseSize');
                }
                set baseSize(value) {
                    this._setOption('baseSize', value);
                }
                get box() {
                    return this._getOption('box');
                }
                set box(value) {
                    this._setOption('box', value);
                }
                get ratio() {
                    return this._getOption('ratio');
                }
                set ratio(value) {
                    this._setOption('ratio', value);
                }
                get shrink() {
                    return this._getOption('shrink');
                }
                set shrink(value) {
                    this._setOption('shrink', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get beginGroup() {
                    return this._getOption('beginGroup');
                }
                set beginGroup(value) {
                    this._setOption('beginGroup', value);
                }
                get closeMenuOnClick() {
                    return this._getOption('closeMenuOnClick');
                }
                set closeMenuOnClick(value) {
                    this._setOption('closeMenuOnClick', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get selectable() {
                    return this._getOption('selectable');
                }
                set selectable(value) {
                    this._setOption('selectable', value);
                }
                get selected() {
                    return this._getOption('selected');
                }
                set selected(value) {
                    this._setOption('selected', value);
                }
                get colSpan() {
                    return this._getOption('colSpan');
                }
                set colSpan(value) {
                    this._setOption('colSpan', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get editorType() {
                    return this._getOption('editorType');
                }
                set editorType(value) {
                    this._setOption('editorType', value);
                }
                get helpText() {
                    return this._getOption('helpText');
                }
                set helpText(value) {
                    this._setOption('helpText', value);
                }
                get isRequired() {
                    return this._getOption('isRequired');
                }
                set isRequired(value) {
                    this._setOption('isRequired', value);
                }
                get itemType() {
                    return this._getOption('itemType');
                }
                set itemType(value) {
                    this._setOption('itemType', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get validationRules() {
                    return this._getOption('validationRules');
                }
                set validationRules(value) {
                    this._setOption('validationRules', value);
                }
                get visibleIndex() {
                    return this._getOption('visibleIndex');
                }
                set visibleIndex(value) {
                    this._setOption('visibleIndex', value);
                }
                get alignItemLabels() {
                    return this._getOption('alignItemLabels');
                }
                set alignItemLabels(value) {
                    this._setOption('alignItemLabels', value);
                }
                get caption() {
                    return this._getOption('caption');
                }
                set caption(value) {
                    this._setOption('caption', value);
                }
                get captionTemplate() {
                    return this._getOption('captionTemplate');
                }
                set captionTemplate(value) {
                    this._setOption('captionTemplate', value);
                }
                get colCount() {
                    return this._getOption('colCount');
                }
                set colCount(value) {
                    this._setOption('colCount', value);
                }
                get colCountByScreen() {
                    return this._getOption('colCountByScreen');
                }
                set colCountByScreen(value) {
                    this._setOption('colCountByScreen', value);
                }
                get tabPanelOptions() {
                    return this._getOption('tabPanelOptions');
                }
                set tabPanelOptions(value) {
                    this._setOption('tabPanelOptions', value);
                }
                get tabs() {
                    return this._getOption('tabs');
                }
                set tabs(value) {
                    this._setOption('tabs', value);
                }
                get badge() {
                    return this._getOption('badge');
                }
                set badge(value) {
                    this._setOption('badge', value);
                }
                get tabTemplate() {
                    return this._getOption('tabTemplate');
                }
                set tabTemplate(value) {
                    this._setOption('tabTemplate', value);
                }
                get buttonOptions() {
                    return this._getOption('buttonOptions');
                }
                set buttonOptions(value) {
                    this._setOption('buttonOptions', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get locateInMenu() {
                    return this._getOption('locateInMenu');
                }
                set locateInMenu(value) {
                    this._setOption('locateInMenu', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get menuItemTemplate() {
                    return this._getOption('menuItemTemplate');
                }
                set menuItemTemplate(value) {
                    this._setOption('menuItemTemplate', value);
                }
                get options() {
                    return this._getOption('options');
                }
                set options(value) {
                    this._setOption('options', value);
                }
                get showText() {
                    return this._getOption('showText');
                }
                set showText(value) {
                    this._setOption('showText', value);
                }
                get widget() {
                    return this._getOption('widget');
                }
                set widget(value) {
                    this._setOption('widget', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get imageAlt() {
                    return this._getOption('imageAlt');
                }
                set imageAlt(value) {
                    this._setOption('imageAlt', value);
                }
                get imageSrc() {
                    return this._getOption('imageSrc');
                }
                set imageSrc(value) {
                    this._setOption('imageSrc', value);
                }
                get acceptedValues() {
                    return this._getOption('acceptedValues');
                }
                set acceptedValues(value) {
                    this._setOption('acceptedValues', value);
                }
                get formatName() {
                    return this._getOption('formatName');
                }
                set formatName(value) {
                    this._setOption('formatName', value);
                }
                get formatValues() {
                    return this._getOption('formatValues');
                }
                set formatValues(value) {
                    this._setOption('formatValues', value);
                }
                get key() {
                    return this._getOption('key');
                }
                set key(value) {
                    this._setOption('key', value);
                }
                get showChevron() {
                    return this._getOption('showChevron');
                }
                set showChevron(value) {
                    this._setOption('showChevron', value);
                }
                get linkAttr() {
                    return this._getOption('linkAttr');
                }
                set linkAttr(value) {
                    this._setOption('linkAttr', value);
                }
                get url() {
                    return this._getOption('url');
                }
                set url(value) {
                    this._setOption('url', value);
                }
                get collapsed() {
                    return this._getOption('collapsed');
                }
                set collapsed(value) {
                    this._setOption('collapsed', value);
                }
                get collapsedSize() {
                    return this._getOption('collapsedSize');
                }
                set collapsedSize(value) {
                    this._setOption('collapsedSize', value);
                }
                get collapsible() {
                    return this._getOption('collapsible');
                }
                set collapsible(value) {
                    this._setOption('collapsible', value);
                }
                get maxSize() {
                    return this._getOption('maxSize');
                }
                set maxSize(value) {
                    this._setOption('maxSize', value);
                }
                get minSize() {
                    return this._getOption('minSize');
                }
                set minSize(value) {
                    this._setOption('minSize', value);
                }
                get resizable() {
                    return this._getOption('resizable');
                }
                set resizable(value) {
                    this._setOption('resizable', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get splitter() {
                    return this._getOption('splitter');
                }
                set splitter(value) {
                    this._setOption('splitter', value);
                }
                get heightRatio() {
                    return this._getOption('heightRatio');
                }
                set heightRatio(value) {
                    this._setOption('heightRatio', value);
                }
                get widthRatio() {
                    return this._getOption('widthRatio');
                }
                set widthRatio(value) {
                    this._setOption('widthRatio', value);
                }
                get expanded() {
                    return this._getOption('expanded');
                }
                set expanded(value) {
                    this._setOption('expanded', value);
                }
                get hasItems() {
                    return this._getOption('hasItems');
                }
                set hasItems(value) {
                    this._setOption('hasItems', value);
                }
                get id() {
                    return this._getOption('id');
                }
                set id(value) {
                    this._setOption('id', value);
                }
                get parentId() {
                    return this._getOption('parentId');
                }
                set parentId(value) {
                    this._setOption('parentId', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonGroupItem, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiButtonGroupItem, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonGroupItem, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiValidationRuleComponent extends CollectionNestedOption {
                get message() {
                    return this._getOption('message');
                }
                set message(value) {
                    this._setOption('message', value);
                }
                get trim() {
                    return this._getOption('trim');
                }
                set trim(value) {
                    this._setOption('trim', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get ignoreEmptyValue() {
                    return this._getOption('ignoreEmptyValue');
                }
                set ignoreEmptyValue(value) {
                    this._setOption('ignoreEmptyValue', value);
                }
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                get reevaluate() {
                    return this._getOption('reevaluate');
                }
                set reevaluate(value) {
                    this._setOption('reevaluate', value);
                }
                get validationCallback() {
                    return this._getOption('validationCallback');
                }
                set validationCallback(value) {
                    this._setOption('validationCallback', value);
                }
                get comparisonTarget() {
                    return this._getOption('comparisonTarget');
                }
                set comparisonTarget(value) {
                    this._setOption('comparisonTarget', value);
                }
                get comparisonType() {
                    return this._getOption('comparisonType');
                }
                set comparisonType(value) {
                    this._setOption('comparisonType', value);
                }
                get pattern() {
                    return this._getOption('pattern');
                }
                set pattern(value) {
                    this._setOption('pattern', value);
                }
                get _optionPath() {
                    return 'validationRules';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiValidationRuleComponent, selector: "dxi-validation-rule", inputs: { message: "message", trim: "trim", type: "type", ignoreEmptyValue: "ignoreEmptyValue", max: "max", min: "min", reevaluate: "reevaluate", validationCallback: "validationCallback", comparisonTarget: "comparisonTarget", comparisonType: "comparisonType", pattern: "pattern" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("db", DxiValidationRuleComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-validation-rule', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { message: [{
                            type: Input
                        }], trim: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], ignoreEmptyValue: [{
                            type: Input
                        }], max: [{
                            type: Input
                        }], min: [{
                            type: Input
                        }], reevaluate: [{
                            type: Input
                        }], validationCallback: [{
                            type: Input
                        }], comparisonTarget: [{
                            type: Input
                        }], comparisonType: [{
                            type: Input
                        }], pattern: [{
                            type: Input
                        }] } });
            class DxiValidationRuleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleModule, declarations: [DxiValidationRuleComponent], exports: [DxiValidationRuleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleModule });
            } exports("bK", DxiValidationRuleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiValidationRuleComponent
                                ],
                                exports: [
                                    DxiValidationRuleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiHtmlEditorImageUploadTabItem extends CollectionNestedOption {
                get alignItemLabels() {
                    return this._getOption('alignItemLabels');
                }
                set alignItemLabels(value) {
                    this._setOption('alignItemLabels', value);
                }
                get badge() {
                    return this._getOption('badge');
                }
                set badge(value) {
                    this._setOption('badge', value);
                }
                get colCount() {
                    return this._getOption('colCount');
                }
                set colCount(value) {
                    this._setOption('colCount', value);
                }
                get colCountByScreen() {
                    return this._getOption('colCountByScreen');
                }
                set colCountByScreen(value) {
                    this._setOption('colCountByScreen', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get tabTemplate() {
                    return this._getOption('tabTemplate');
                }
                set tabTemplate(value) {
                    this._setOption('tabTemplate', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get groups() {
                    return this._getOption('groups');
                }
                set groups(value) {
                    this._setOption('groups', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiHtmlEditorImageUploadTabItem, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiHtmlEditorImageUploadTabItem, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiHtmlEditorImageUploadTabItem, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiDiagramCustomCommand extends CollectionNestedOption {
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDiagramCustomCommand, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiDiagramCustomCommand, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDiagramCustomCommand, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiCommandComponent extends DxiDiagramCustomCommand {
                get _optionPath() {
                    return 'commands';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiCommandComponent, selector: "dxi-command", inputs: { icon: "icon", items: "items", location: "location", name: "name", text: "text" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-command', template: '', providers: [NestedOptionHost], inputs: [
                                    'icon',
                                    'items',
                                    'location',
                                    'name',
                                    'text'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxiCommandModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandModule, declarations: [DxiCommandComponent], exports: [DxiCommandComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandModule });
            } exports("ba", DxiCommandModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiCommandComponent
                                ],
                                exports: [
                                    DxiCommandComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiGroupComponent extends CollectionNestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get category() {
                    return this._getOption('category');
                }
                set category(value) {
                    this._setOption('category', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get expanded() {
                    return this._getOption('expanded');
                }
                set expanded(value) {
                    this._setOption('expanded', value);
                }
                get shapes() {
                    return this._getOption('shapes');
                }
                set shapes(value) {
                    this._setOption('shapes', value);
                }
                get _optionPath() {
                    return 'groups';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiGroupComponent, selector: "dxi-group", inputs: { commands: "commands", title: "title", category: "category", displayMode: "displayMode", expanded: "expanded", shapes: "shapes" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-group', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commands: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], category: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], expanded: [{
                            type: Input
                        }], shapes: [{
                            type: Input
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }] } });
            class DxiGroupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupModule, declarations: [DxiGroupComponent], exports: [DxiGroupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupModule });
            } exports("bp", DxiGroupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiGroupComponent
                                ],
                                exports: [
                                    DxiGroupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiTabComponent extends DxiHtmlEditorImageUploadTabItem {
                renderer;
                document;
                element;
                get _optionPath() {
                    return 'tabs';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                get groupsChildren() {
                    return this._getOption('groups');
                }
                set groupsChildren(value) {
                    this.setChildren('groups', value);
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiTabComponent, selector: "dxi-tab", inputs: { alignItemLabels: "alignItemLabels", badge: "badge", colCount: "colCount", colCountByScreen: "colCountByScreen", disabled: "disabled", icon: "icon", items: "items", tabTemplate: "tabTemplate", template: "template", title: "title", commands: "commands", groups: "groups", name: "name" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }, { propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }, { propertyName: "groupsChildren", predicate: i0.forwardRef(() => DxiGroupComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-tab', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], inputs: [
                                    'alignItemLabels',
                                    'badge',
                                    'colCount',
                                    'colCountByScreen',
                                    'disabled',
                                    'icon',
                                    'items',
                                    'tabTemplate',
                                    'template',
                                    'title',
                                    'commands',
                                    'groups',
                                    'name'
                                ], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }], groupsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiGroupComponent)]
                        }] } });
            class DxiTabModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiTabModule, declarations: [DxiTabComponent], exports: [DxiTabComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabModule });
            } exports("bo", DxiTabModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiTabComponent
                                ],
                                exports: [
                                    DxiTabComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiLocationComponent extends CollectionNestedOption {
                get lat() {
                    return this._getOption('lat');
                }
                set lat(value) {
                    this._setOption('lat', value);
                }
                get lng() {
                    return this._getOption('lng');
                }
                set lng(value) {
                    this._setOption('lng', value);
                }
                get col() {
                    return this._getOption('col');
                }
                set col(value) {
                    this._setOption('col', value);
                }
                get colspan() {
                    return this._getOption('colspan');
                }
                set colspan(value) {
                    this._setOption('colspan', value);
                }
                get row() {
                    return this._getOption('row');
                }
                set row(value) {
                    this._setOption('row', value);
                }
                get rowspan() {
                    return this._getOption('rowspan');
                }
                set rowspan(value) {
                    this._setOption('rowspan', value);
                }
                get screen() {
                    return this._getOption('screen');
                }
                set screen(value) {
                    this._setOption('screen', value);
                }
                get _optionPath() {
                    return 'location';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiLocationComponent, selector: "dxi-location", inputs: { lat: "lat", lng: "lng", col: "col", colspan: "colspan", row: "row", rowspan: "rowspan", screen: "screen" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-location', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { lat: [{
                            type: Input
                        }], lng: [{
                            type: Input
                        }], col: [{
                            type: Input
                        }], colspan: [{
                            type: Input
                        }], row: [{
                            type: Input
                        }], rowspan: [{
                            type: Input
                        }], screen: [{
                            type: Input
                        }] } });
            class DxiLocationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationModule, declarations: [DxiLocationComponent], exports: [DxiLocationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationModule });
            } exports("ck", DxiLocationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiLocationComponent
                                ],
                                exports: [
                                    DxiLocationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiItemComponent extends DxiButtonGroupItem {
                renderer;
                document;
                element;
                get _optionPath() {
                    return 'items';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                get validationRulesChildren() {
                    return this._getOption('validationRules');
                }
                set validationRulesChildren(value) {
                    this.setChildren('validationRules', value);
                }
                get tabsChildren() {
                    return this._getOption('tabs');
                }
                set tabsChildren(value) {
                    this.setChildren('tabs', value);
                }
                get locationChildren() {
                    return this._getOption('location');
                }
                set locationChildren(value) {
                    this.setChildren('location', value);
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiItemComponent, selector: "dxi-item", inputs: { disabled: "disabled", html: "html", icon: "icon", template: "template", text: "text", title: "title", titleTemplate: "titleTemplate", visible: "visible", onClick: "onClick", stylingMode: "stylingMode", type: "type", baseSize: "baseSize", box: "box", ratio: "ratio", shrink: "shrink", elementAttr: "elementAttr", hint: "hint", beginGroup: "beginGroup", closeMenuOnClick: "closeMenuOnClick", items: "items", selectable: "selectable", selected: "selected", colSpan: "colSpan", cssClass: "cssClass", dataField: "dataField", editorOptions: "editorOptions", editorType: "editorType", helpText: "helpText", isRequired: "isRequired", itemType: "itemType", label: "label", name: "name", validationRules: "validationRules", visibleIndex: "visibleIndex", alignItemLabels: "alignItemLabels", caption: "caption", captionTemplate: "captionTemplate", colCount: "colCount", colCountByScreen: "colCountByScreen", tabPanelOptions: "tabPanelOptions", tabs: "tabs", badge: "badge", tabTemplate: "tabTemplate", buttonOptions: "buttonOptions", horizontalAlignment: "horizontalAlignment", verticalAlignment: "verticalAlignment", locateInMenu: "locateInMenu", location: "location", menuItemTemplate: "menuItemTemplate", options: "options", showText: "showText", widget: "widget", height: "height", width: "width", imageAlt: "imageAlt", imageSrc: "imageSrc", acceptedValues: "acceptedValues", formatName: "formatName", formatValues: "formatValues", key: "key", showChevron: "showChevron", linkAttr: "linkAttr", url: "url", collapsed: "collapsed", collapsedSize: "collapsedSize", collapsible: "collapsible", maxSize: "maxSize", minSize: "minSize", resizable: "resizable", size: "size", splitter: "splitter", heightRatio: "heightRatio", widthRatio: "widthRatio", expanded: "expanded", hasItems: "hasItems", id: "id", parentId: "parentId" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }, { propertyName: "validationRulesChildren", predicate: i0.forwardRef(() => DxiValidationRuleComponent) }, { propertyName: "tabsChildren", predicate: i0.forwardRef(() => DxiTabComponent) }, { propertyName: "locationChildren", predicate: i0.forwardRef(() => DxiLocationComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            } exports("b", DxiItemComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-item', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], inputs: [
                                    'disabled',
                                    'html',
                                    'icon',
                                    'template',
                                    'text',
                                    'title',
                                    'titleTemplate',
                                    'visible',
                                    'onClick',
                                    'stylingMode',
                                    'type',
                                    'baseSize',
                                    'box',
                                    'ratio',
                                    'shrink',
                                    'elementAttr',
                                    'hint',
                                    'beginGroup',
                                    'closeMenuOnClick',
                                    'items',
                                    'selectable',
                                    'selected',
                                    'colSpan',
                                    'cssClass',
                                    'dataField',
                                    'editorOptions',
                                    'editorType',
                                    'helpText',
                                    'isRequired',
                                    'itemType',
                                    'label',
                                    'name',
                                    'validationRules',
                                    'visibleIndex',
                                    'alignItemLabels',
                                    'caption',
                                    'captionTemplate',
                                    'colCount',
                                    'colCountByScreen',
                                    'tabPanelOptions',
                                    'tabs',
                                    'badge',
                                    'tabTemplate',
                                    'buttonOptions',
                                    'horizontalAlignment',
                                    'verticalAlignment',
                                    'locateInMenu',
                                    'location',
                                    'menuItemTemplate',
                                    'options',
                                    'showText',
                                    'widget',
                                    'height',
                                    'width',
                                    'imageAlt',
                                    'imageSrc',
                                    'acceptedValues',
                                    'formatName',
                                    'formatValues',
                                    'key',
                                    'showChevron',
                                    'linkAttr',
                                    'url',
                                    'collapsed',
                                    'collapsedSize',
                                    'collapsible',
                                    'maxSize',
                                    'minSize',
                                    'resizable',
                                    'size',
                                    'splitter',
                                    'heightRatio',
                                    'widthRatio',
                                    'expanded',
                                    'hasItems',
                                    'id',
                                    'parentId'
                                ], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }], validationRulesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiValidationRuleComponent)]
                        }], tabsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiTabComponent)]
                        }], locationChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiLocationComponent)]
                        }] } });
            class DxiItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiItemModule, declarations: [DxiItemComponent], exports: [DxiItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemModule });
            } exports("c", DxiItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiItemComponent
                                ],
                                exports: [
                                    DxiItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoBoxComponent extends DxoBoxOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                itemsChange;
                get _optionPath() {
                    return 'box';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'itemsChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBoxComponent, selector: "dxo-box", inputs: { align: "align", crossAlign: "crossAlign", dataSource: "dataSource", direction: "direction", disabled: "disabled", elementAttr: "elementAttr", height: "height", hoverStateEnabled: "hoverStateEnabled", itemHoldTimeout: "itemHoldTimeout", items: "items", itemTemplate: "itemTemplate", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemContextMenu: "onItemContextMenu", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-box', template: '', providers: [NestedOptionHost], inputs: [
                                    'align',
                                    'crossAlign',
                                    'dataSource',
                                    'direction',
                                    'disabled',
                                    'elementAttr',
                                    'height',
                                    'hoverStateEnabled',
                                    'itemHoldTimeout',
                                    'items',
                                    'itemTemplate',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onItemClick',
                                    'onItemContextMenu',
                                    'onItemHold',
                                    'onItemRendered',
                                    'onOptionChanged',
                                    'rtlEnabled',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoBoxModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxModule, declarations: [DxoBoxComponent], exports: [DxoBoxComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxModule });
            } exports("M", DxoBoxModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBoxComponent
                                ],
                                exports: [
                                    DxoBoxComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBreakStyleComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get line() {
                    return this._getOption('line');
                }
                set line(value) {
                    this._setOption('line', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'breakStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBreakStyleComponent, selector: "dxo-break-style", inputs: { color: "color", line: "line", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-break-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], line: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoBreakStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleModule, declarations: [DxoBreakStyleComponent], exports: [DxoBreakStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleModule });
            } exports("Z", DxoBreakStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBreakStyleComponent
                                ],
                                exports: [
                                    DxoBreakStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoBubbleComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'bubble';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBubbleComponent, selector: "dxo-bubble", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-bubble', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoBubbleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleModule, declarations: [DxoBubbleComponent], exports: [DxoBubbleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleModule });
            } exports("ar", DxoBubbleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBubbleComponent
                                ],
                                exports: [
                                    DxoBubbleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiTextEditorButton extends CollectionNestedOption {
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get options() {
                    return this._getOption('options');
                }
                set options(value) {
                    this._setOption('options', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get onClick() {
                    return this._getOption('onClick');
                }
                set onClick(value) {
                    this._setOption('onClick', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTextEditorButton, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiTextEditorButton, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTextEditorButton, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiButtonComponent extends DxiTextEditorButton {
                get _optionPath() {
                    return 'buttons';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiButtonComponent, selector: "dxi-button", inputs: { location: "location", name: "name", options: "options", cssClass: "cssClass", disabled: "disabled", hint: "hint", icon: "icon", onClick: "onClick", template: "template", text: "text", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("f", DxiButtonComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-button', template: '', providers: [NestedOptionHost], inputs: [
                                    'location',
                                    'name',
                                    'options',
                                    'cssClass',
                                    'disabled',
                                    'hint',
                                    'icon',
                                    'onClick',
                                    'template',
                                    'text',
                                    'visible'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiButtonModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonModule, declarations: [DxiButtonComponent], exports: [DxiButtonComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonModule });
            } exports("g", DxiButtonModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiButtonComponent
                                ],
                                exports: [
                                    DxiButtonComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoButtonOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get onClick() {
                    return this._getOption('onClick');
                }
                set onClick(value) {
                    this._setOption('onClick', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get stylingMode() {
                    return this._getOption('stylingMode');
                }
                set stylingMode(value) {
                    this._setOption('stylingMode', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get useSubmitBehavior() {
                    return this._getOption('useSubmitBehavior');
                }
                set useSubmitBehavior(value) {
                    this._setOption('useSubmitBehavior', value);
                }
                get validationGroup() {
                    return this._getOption('validationGroup');
                }
                set validationGroup(value) {
                    this._setOption('validationGroup', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoButtonOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoButtonOptionsComponent extends DxoButtonOptions {
                get _optionPath() {
                    return 'buttonOptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoButtonOptionsComponent, selector: "dxo-button-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", icon: "icon", onClick: "onClick", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", stylingMode: "stylingMode", tabIndex: "tabIndex", template: "template", text: "text", type: "type", useSubmitBehavior: "useSubmitBehavior", validationGroup: "validationGroup", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-button-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'icon',
                                    'onClick',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'rtlEnabled',
                                    'stylingMode',
                                    'tabIndex',
                                    'template',
                                    'text',
                                    'type',
                                    'useSubmitBehavior',
                                    'validationGroup',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoButtonOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsModule, declarations: [DxoButtonOptionsComponent], exports: [DxoButtonOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsModule });
            } exports("bM", DxoButtonOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoButtonOptionsComponent
                                ],
                                exports: [
                                    DxoButtonOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCalendarOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get cellTemplate() {
                    return this._getOption('cellTemplate');
                }
                set cellTemplate(value) {
                    this._setOption('cellTemplate', value);
                }
                get dateSerializationFormat() {
                    return this._getOption('dateSerializationFormat');
                }
                set dateSerializationFormat(value) {
                    this._setOption('dateSerializationFormat', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get disabledDates() {
                    return this._getOption('disabledDates');
                }
                set disabledDates(value) {
                    this._setOption('disabledDates', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get firstDayOfWeek() {
                    return this._getOption('firstDayOfWeek');
                }
                set firstDayOfWeek(value) {
                    this._setOption('firstDayOfWeek', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get isDirty() {
                    return this._getOption('isDirty');
                }
                set isDirty(value) {
                    this._setOption('isDirty', value);
                }
                get isValid() {
                    return this._getOption('isValid');
                }
                set isValid(value) {
                    this._setOption('isValid', value);
                }
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get maxZoomLevel() {
                    return this._getOption('maxZoomLevel');
                }
                set maxZoomLevel(value) {
                    this._setOption('maxZoomLevel', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                get minZoomLevel() {
                    return this._getOption('minZoomLevel');
                }
                set minZoomLevel(value) {
                    this._setOption('minZoomLevel', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onValueChanged() {
                    return this._getOption('onValueChanged');
                }
                set onValueChanged(value) {
                    this._setOption('onValueChanged', value);
                }
                get readOnly() {
                    return this._getOption('readOnly');
                }
                set readOnly(value) {
                    this._setOption('readOnly', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get selectWeekOnClick() {
                    return this._getOption('selectWeekOnClick');
                }
                set selectWeekOnClick(value) {
                    this._setOption('selectWeekOnClick', value);
                }
                get showTodayButton() {
                    return this._getOption('showTodayButton');
                }
                set showTodayButton(value) {
                    this._setOption('showTodayButton', value);
                }
                get showWeekNumbers() {
                    return this._getOption('showWeekNumbers');
                }
                set showWeekNumbers(value) {
                    this._setOption('showWeekNumbers', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get validationError() {
                    return this._getOption('validationError');
                }
                set validationError(value) {
                    this._setOption('validationError', value);
                }
                get validationErrors() {
                    return this._getOption('validationErrors');
                }
                set validationErrors(value) {
                    this._setOption('validationErrors', value);
                }
                get validationMessageMode() {
                    return this._getOption('validationMessageMode');
                }
                set validationMessageMode(value) {
                    this._setOption('validationMessageMode', value);
                }
                get validationMessagePosition() {
                    return this._getOption('validationMessagePosition');
                }
                set validationMessagePosition(value) {
                    this._setOption('validationMessagePosition', value);
                }
                get validationStatus() {
                    return this._getOption('validationStatus');
                }
                set validationStatus(value) {
                    this._setOption('validationStatus', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get weekNumberRule() {
                    return this._getOption('weekNumberRule');
                }
                set weekNumberRule(value) {
                    this._setOption('weekNumberRule', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get zoomLevel() {
                    return this._getOption('zoomLevel');
                }
                set zoomLevel(value) {
                    this._setOption('zoomLevel', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCalendarOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoCalendarOptionsComponent extends DxoCalendarOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                zoomLevelChange;
                get _optionPath() {
                    return 'calendarOptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' },
                        { emit: 'zoomLevelChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCalendarOptionsComponent, selector: "dxo-calendar-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", cellTemplate: "cellTemplate", dateSerializationFormat: "dateSerializationFormat", disabled: "disabled", disabledDates: "disabledDates", elementAttr: "elementAttr", firstDayOfWeek: "firstDayOfWeek", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", isDirty: "isDirty", isValid: "isValid", max: "max", maxZoomLevel: "maxZoomLevel", min: "min", minZoomLevel: "minZoomLevel", name: "name", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onValueChanged: "onValueChanged", readOnly: "readOnly", rtlEnabled: "rtlEnabled", selectionMode: "selectionMode", selectWeekOnClick: "selectWeekOnClick", showTodayButton: "showTodayButton", showWeekNumbers: "showWeekNumbers", tabIndex: "tabIndex", validationError: "validationError", validationErrors: "validationErrors", validationMessageMode: "validationMessageMode", validationMessagePosition: "validationMessagePosition", validationStatus: "validationStatus", value: "value", visible: "visible", weekNumberRule: "weekNumberRule", width: "width", zoomLevel: "zoomLevel" }, outputs: { valueChange: "valueChange", zoomLevelChange: "zoomLevelChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-calendar-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'cellTemplate',
                                    'dateSerializationFormat',
                                    'disabled',
                                    'disabledDates',
                                    'elementAttr',
                                    'firstDayOfWeek',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'isDirty',
                                    'isValid',
                                    'max',
                                    'maxZoomLevel',
                                    'min',
                                    'minZoomLevel',
                                    'name',
                                    'onDisposing',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onValueChanged',
                                    'readOnly',
                                    'rtlEnabled',
                                    'selectionMode',
                                    'selectWeekOnClick',
                                    'showTodayButton',
                                    'showWeekNumbers',
                                    'tabIndex',
                                    'validationError',
                                    'validationErrors',
                                    'validationMessageMode',
                                    'validationMessagePosition',
                                    'validationStatus',
                                    'value',
                                    'visible',
                                    'weekNumberRule',
                                    'width',
                                    'zoomLevel'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { valueChange: [{
                            type: Output
                        }], zoomLevelChange: [{
                            type: Output
                        }] } });
            class DxoCalendarOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsModule, declarations: [DxoCalendarOptionsComponent], exports: [DxoCalendarOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsModule });
            } exports("b6", DxoCalendarOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCalendarOptionsComponent
                                ],
                                exports: [
                                    DxoCalendarOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoCandlestickComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'candlestick';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCandlestickComponent, selector: "dxo-candlestick", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-candlestick', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoCandlestickModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickModule, declarations: [DxoCandlestickComponent], exports: [DxoCandlestickComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickModule });
            } exports("as", DxoCandlestickModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCandlestickComponent
                                ],
                                exports: [
                                    DxoCandlestickComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiCenterComponent extends CollectionNestedOption {
                get lat() {
                    return this._getOption('lat');
                }
                set lat(value) {
                    this._setOption('lat', value);
                }
                get lng() {
                    return this._getOption('lng');
                }
                set lng(value) {
                    this._setOption('lng', value);
                }
                get _optionPath() {
                    return 'center';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiCenterComponent, selector: "dxi-center", inputs: { lat: "lat", lng: "lng" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("ce", DxiCenterComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-center', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { lat: [{
                            type: Input
                        }], lng: [{
                            type: Input
                        }] } });
            class DxiCenterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterModule, declarations: [DxiCenterComponent], exports: [DxiCenterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterModule });
            } exports("ci", DxiCenterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiCenterComponent
                                ],
                                exports: [
                                    DxiCenterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiDataChange extends CollectionNestedOption {
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get insertAfterKey() {
                    return this._getOption('insertAfterKey');
                }
                set insertAfterKey(value) {
                    this._setOption('insertAfterKey', value);
                }
                get insertBeforeKey() {
                    return this._getOption('insertBeforeKey');
                }
                set insertBeforeKey(value) {
                    this._setOption('insertBeforeKey', value);
                }
                get key() {
                    return this._getOption('key');
                }
                set key(value) {
                    this._setOption('key', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDataChange, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiDataChange, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDataChange, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiChangeComponent extends DxiDataChange {
                get _optionPath() {
                    return 'changes';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiChangeComponent, selector: "dxi-change", inputs: { data: "data", insertAfterKey: "insertAfterKey", insertBeforeKey: "insertBeforeKey", key: "key", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-change', template: '', providers: [NestedOptionHost], inputs: [
                                    'data',
                                    'insertAfterKey',
                                    'insertBeforeKey',
                                    'key',
                                    'type'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiChangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeModule, declarations: [DxiChangeComponent], exports: [DxiChangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeModule });
            } exports("cX", DxiChangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiChangeComponent
                                ],
                                exports: [
                                    DxiChangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiChartSeries extends CollectionNestedOption {
                get aggregation() {
                    return this._getOption('aggregation');
                }
                set aggregation(value) {
                    this._setOption('aggregation', value);
                }
                get argumentField() {
                    return this._getOption('argumentField');
                }
                set argumentField(value) {
                    this._setOption('argumentField', value);
                }
                get axis() {
                    return this._getOption('axis');
                }
                set axis(value) {
                    this._setOption('axis', value);
                }
                get barOverlapGroup() {
                    return this._getOption('barOverlapGroup');
                }
                set barOverlapGroup(value) {
                    this._setOption('barOverlapGroup', value);
                }
                get barPadding() {
                    return this._getOption('barPadding');
                }
                set barPadding(value) {
                    this._setOption('barPadding', value);
                }
                get barWidth() {
                    return this._getOption('barWidth');
                }
                set barWidth(value) {
                    this._setOption('barWidth', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get closeValueField() {
                    return this._getOption('closeValueField');
                }
                set closeValueField(value) {
                    this._setOption('closeValueField', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get cornerRadius() {
                    return this._getOption('cornerRadius');
                }
                set cornerRadius(value) {
                    this._setOption('cornerRadius', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get highValueField() {
                    return this._getOption('highValueField');
                }
                set highValueField(value) {
                    this._setOption('highValueField', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get ignoreEmptyPoints() {
                    return this._getOption('ignoreEmptyPoints');
                }
                set ignoreEmptyPoints(value) {
                    this._setOption('ignoreEmptyPoints', value);
                }
                get innerColor() {
                    return this._getOption('innerColor');
                }
                set innerColor(value) {
                    this._setOption('innerColor', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get lowValueField() {
                    return this._getOption('lowValueField');
                }
                set lowValueField(value) {
                    this._setOption('lowValueField', value);
                }
                get maxLabelCount() {
                    return this._getOption('maxLabelCount');
                }
                set maxLabelCount(value) {
                    this._setOption('maxLabelCount', value);
                }
                get minBarSize() {
                    return this._getOption('minBarSize');
                }
                set minBarSize(value) {
                    this._setOption('minBarSize', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get openValueField() {
                    return this._getOption('openValueField');
                }
                set openValueField(value) {
                    this._setOption('openValueField', value);
                }
                get pane() {
                    return this._getOption('pane');
                }
                set pane(value) {
                    this._setOption('pane', value);
                }
                get point() {
                    return this._getOption('point');
                }
                set point(value) {
                    this._setOption('point', value);
                }
                get rangeValue1Field() {
                    return this._getOption('rangeValue1Field');
                }
                set rangeValue1Field(value) {
                    this._setOption('rangeValue1Field', value);
                }
                get rangeValue2Field() {
                    return this._getOption('rangeValue2Field');
                }
                set rangeValue2Field(value) {
                    this._setOption('rangeValue2Field', value);
                }
                get reduction() {
                    return this._getOption('reduction');
                }
                set reduction(value) {
                    this._setOption('reduction', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get showInLegend() {
                    return this._getOption('showInLegend');
                }
                set showInLegend(value) {
                    this._setOption('showInLegend', value);
                }
                get sizeField() {
                    return this._getOption('sizeField');
                }
                set sizeField(value) {
                    this._setOption('sizeField', value);
                }
                get stack() {
                    return this._getOption('stack');
                }
                set stack(value) {
                    this._setOption('stack', value);
                }
                get tag() {
                    return this._getOption('tag');
                }
                set tag(value) {
                    this._setOption('tag', value);
                }
                get tagField() {
                    return this._getOption('tagField');
                }
                set tagField(value) {
                    this._setOption('tagField', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueErrorBar() {
                    return this._getOption('valueErrorBar');
                }
                set valueErrorBar(value) {
                    this._setOption('valueErrorBar', value);
                }
                get valueField() {
                    return this._getOption('valueField');
                }
                set valueField(value) {
                    this._setOption('valueField', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get argumentType() {
                    return this._getOption('argumentType');
                }
                set argumentType(value) {
                    this._setOption('argumentType', value);
                }
                get minSegmentSize() {
                    return this._getOption('minSegmentSize');
                }
                set minSegmentSize(value) {
                    this._setOption('minSegmentSize', value);
                }
                get smallValuesGrouping() {
                    return this._getOption('smallValuesGrouping');
                }
                set smallValuesGrouping(value) {
                    this._setOption('smallValuesGrouping', value);
                }
                get closed() {
                    return this._getOption('closed');
                }
                set closed(value) {
                    this._setOption('closed', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChartSeries, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiChartSeries, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChartSeries, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiSeriesComponent extends DxiChartSeries {
                get _optionPath() {
                    return 'series';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiSeriesComponent, selector: "dxi-series", inputs: { aggregation: "aggregation", argumentField: "argumentField", axis: "axis", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", name: "name", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", stack: "stack", tag: "tag", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", argumentType: "argumentType", minSegmentSize: "minSegmentSize", smallValuesGrouping: "smallValuesGrouping", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("Q", DxiSeriesComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-series', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'argumentField',
                                    'axis',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'name',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'stack',
                                    'tag',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'argumentType',
                                    'minSegmentSize',
                                    'smallValuesGrouping',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiSeriesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesModule, declarations: [DxiSeriesComponent], exports: [DxiSeriesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesModule });
            } exports("aU", DxiSeriesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiSeriesComponent
                                ],
                                exports: [
                                    DxiSeriesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoChartComponent extends NestedOption {
                get barGroupPadding() {
                    return this._getOption('barGroupPadding');
                }
                set barGroupPadding(value) {
                    this._setOption('barGroupPadding', value);
                }
                get barGroupWidth() {
                    return this._getOption('barGroupWidth');
                }
                set barGroupWidth(value) {
                    this._setOption('barGroupWidth', value);
                }
                get bottomIndent() {
                    return this._getOption('bottomIndent');
                }
                set bottomIndent(value) {
                    this._setOption('bottomIndent', value);
                }
                get commonSeriesSettings() {
                    return this._getOption('commonSeriesSettings');
                }
                set commonSeriesSettings(value) {
                    this._setOption('commonSeriesSettings', value);
                }
                get dataPrepareSettings() {
                    return this._getOption('dataPrepareSettings');
                }
                set dataPrepareSettings(value) {
                    this._setOption('dataPrepareSettings', value);
                }
                get maxBubbleSize() {
                    return this._getOption('maxBubbleSize');
                }
                set maxBubbleSize(value) {
                    this._setOption('maxBubbleSize', value);
                }
                get minBubbleSize() {
                    return this._getOption('minBubbleSize');
                }
                set minBubbleSize(value) {
                    this._setOption('minBubbleSize', value);
                }
                get negativesAsZeroes() {
                    return this._getOption('negativesAsZeroes');
                }
                set negativesAsZeroes(value) {
                    this._setOption('negativesAsZeroes', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get paletteExtensionMode() {
                    return this._getOption('paletteExtensionMode');
                }
                set paletteExtensionMode(value) {
                    this._setOption('paletteExtensionMode', value);
                }
                get series() {
                    return this._getOption('series');
                }
                set series(value) {
                    this._setOption('series', value);
                }
                get seriesTemplate() {
                    return this._getOption('seriesTemplate');
                }
                set seriesTemplate(value) {
                    this._setOption('seriesTemplate', value);
                }
                get topIndent() {
                    return this._getOption('topIndent');
                }
                set topIndent(value) {
                    this._setOption('topIndent', value);
                }
                get valueAxis() {
                    return this._getOption('valueAxis');
                }
                set valueAxis(value) {
                    this._setOption('valueAxis', value);
                }
                get _optionPath() {
                    return 'chart';
                }
                get seriesChildren() {
                    return this._getOption('series');
                }
                set seriesChildren(value) {
                    this.setChildren('series', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoChartComponent, selector: "dxo-chart", inputs: { barGroupPadding: "barGroupPadding", barGroupWidth: "barGroupWidth", bottomIndent: "bottomIndent", commonSeriesSettings: "commonSeriesSettings", dataPrepareSettings: "dataPrepareSettings", maxBubbleSize: "maxBubbleSize", minBubbleSize: "minBubbleSize", negativesAsZeroes: "negativesAsZeroes", palette: "palette", paletteExtensionMode: "paletteExtensionMode", series: "series", seriesTemplate: "seriesTemplate", topIndent: "topIndent", valueAxis: "valueAxis" }, providers: [NestedOptionHost], queries: [{ propertyName: "seriesChildren", predicate: i0.forwardRef(() => DxiSeriesComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-chart', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { barGroupPadding: [{
                            type: Input
                        }], barGroupWidth: [{
                            type: Input
                        }], bottomIndent: [{
                            type: Input
                        }], commonSeriesSettings: [{
                            type: Input
                        }], dataPrepareSettings: [{
                            type: Input
                        }], maxBubbleSize: [{
                            type: Input
                        }], minBubbleSize: [{
                            type: Input
                        }], negativesAsZeroes: [{
                            type: Input
                        }], palette: [{
                            type: Input
                        }], paletteExtensionMode: [{
                            type: Input
                        }], series: [{
                            type: Input
                        }], seriesTemplate: [{
                            type: Input
                        }], topIndent: [{
                            type: Input
                        }], valueAxis: [{
                            type: Input
                        }], seriesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiSeriesComponent)]
                        }] } });
            class DxoChartModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoChartModule, declarations: [DxoChartComponent], exports: [DxoChartComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartModule });
            } exports("cz", DxoChartModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoChartComponent
                                ],
                                exports: [
                                    DxoChartComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColCountByScreenComponent extends NestedOption {
                get lg() {
                    return this._getOption('lg');
                }
                set lg(value) {
                    this._setOption('lg', value);
                }
                get md() {
                    return this._getOption('md');
                }
                set md(value) {
                    this._setOption('md', value);
                }
                get sm() {
                    return this._getOption('sm');
                }
                set sm(value) {
                    this._setOption('sm', value);
                }
                get xs() {
                    return this._getOption('xs');
                }
                set xs(value) {
                    this._setOption('xs', value);
                }
                get _optionPath() {
                    return 'colCountByScreen';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColCountByScreenComponent, selector: "dxo-col-count-by-screen", inputs: { lg: "lg", md: "md", sm: "sm", xs: "xs" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-col-count-by-screen', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { lg: [{
                            type: Input
                        }], md: [{
                            type: Input
                        }], sm: [{
                            type: Input
                        }], xs: [{
                            type: Input
                        }] } });
            class DxoColCountByScreenModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenModule, declarations: [DxoColCountByScreenComponent], exports: [DxoColCountByScreenComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenModule });
            } exports("bJ", DxoColCountByScreenModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColCountByScreenComponent
                                ],
                                exports: [
                                    DxoColCountByScreenComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiColComponent extends CollectionNestedOption {
                get baseSize() {
                    return this._getOption('baseSize');
                }
                set baseSize(value) {
                    this._setOption('baseSize', value);
                }
                get ratio() {
                    return this._getOption('ratio');
                }
                set ratio(value) {
                    this._setOption('ratio', value);
                }
                get screen() {
                    return this._getOption('screen');
                }
                set screen(value) {
                    this._setOption('screen', value);
                }
                get shrink() {
                    return this._getOption('shrink');
                }
                set shrink(value) {
                    this._setOption('shrink', value);
                }
                get _optionPath() {
                    return 'cols';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiColComponent, selector: "dxi-col", inputs: { baseSize: "baseSize", ratio: "ratio", screen: "screen", shrink: "shrink" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cH", DxiColComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-col', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { baseSize: [{
                            type: Input
                        }], ratio: [{
                            type: Input
                        }], screen: [{
                            type: Input
                        }], shrink: [{
                            type: Input
                        }] } });
            class DxiColModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiColModule, declarations: [DxiColComponent], exports: [DxiColComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColModule });
            } exports("cJ", DxiColModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiColComponent
                                ],
                                exports: [
                                    DxiColComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCollisionComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'collision';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCollisionComponent, selector: "dxo-collision", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-collision', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoCollisionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionModule, declarations: [DxoCollisionComponent], exports: [DxoCollisionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionModule });
            } exports("p", DxoCollisionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCollisionComponent
                                ],
                                exports: [
                                    DxoCollisionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoColorComponent extends DxoChartsColor {
                get _optionPath() {
                    return 'color';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColorComponent, selector: "dxo-color", inputs: { base: "base", fillId: "fillId" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-color', template: '', providers: [NestedOptionHost], inputs: [
                                    'base',
                                    'fillId'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoColorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColorModule, declarations: [DxoColorComponent], exports: [DxoColorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorModule });
            } exports("at", DxoColorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColorComponent
                                ],
                                exports: [
                                    DxoColorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColorizerComponent extends NestedOption {
                get colorCodeField() {
                    return this._getOption('colorCodeField');
                }
                set colorCodeField(value) {
                    this._setOption('colorCodeField', value);
                }
                get colorizeGroups() {
                    return this._getOption('colorizeGroups');
                }
                set colorizeGroups(value) {
                    this._setOption('colorizeGroups', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get paletteExtensionMode() {
                    return this._getOption('paletteExtensionMode');
                }
                set paletteExtensionMode(value) {
                    this._setOption('paletteExtensionMode', value);
                }
                get range() {
                    return this._getOption('range');
                }
                set range(value) {
                    this._setOption('range', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'colorizer';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColorizerComponent, selector: "dxo-colorizer", inputs: { colorCodeField: "colorCodeField", colorizeGroups: "colorizeGroups", palette: "palette", paletteExtensionMode: "paletteExtensionMode", range: "range", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-colorizer', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { colorCodeField: [{
                            type: Input
                        }], colorizeGroups: [{
                            type: Input
                        }], palette: [{
                            type: Input
                        }], paletteExtensionMode: [{
                            type: Input
                        }], range: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxoColorizerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerModule, declarations: [DxoColorizerComponent], exports: [DxoColorizerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerModule });
            } exports("d7", DxoColorizerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColorizerComponent
                                ],
                                exports: [
                                    DxoColorizerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColumnChooserComponent extends NestedOption {
                get allowSearch() {
                    return this._getOption('allowSearch');
                }
                set allowSearch(value) {
                    this._setOption('allowSearch', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get emptyPanelText() {
                    return this._getOption('emptyPanelText');
                }
                set emptyPanelText(value) {
                    this._setOption('emptyPanelText', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get search() {
                    return this._getOption('search');
                }
                set search(value) {
                    this._setOption('search', value);
                }
                get searchTimeout() {
                    return this._getOption('searchTimeout');
                }
                set searchTimeout(value) {
                    this._setOption('searchTimeout', value);
                }
                get selection() {
                    return this._getOption('selection');
                }
                set selection(value) {
                    this._setOption('selection', value);
                }
                get sortOrder() {
                    return this._getOption('sortOrder');
                }
                set sortOrder(value) {
                    this._setOption('sortOrder', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'columnChooser';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColumnChooserComponent, selector: "dxo-column-chooser", inputs: { allowSearch: "allowSearch", container: "container", emptyPanelText: "emptyPanelText", enabled: "enabled", height: "height", mode: "mode", position: "position", search: "search", searchTimeout: "searchTimeout", selection: "selection", sortOrder: "sortOrder", title: "title", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-column-chooser', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowSearch: [{
                            type: Input
                        }], container: [{
                            type: Input
                        }], emptyPanelText: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], search: [{
                            type: Input
                        }], searchTimeout: [{
                            type: Input
                        }], selection: [{
                            type: Input
                        }], sortOrder: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoColumnChooserModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserModule, declarations: [DxoColumnChooserComponent], exports: [DxoColumnChooserComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserModule });
            } exports("cT", DxoColumnChooserModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColumnChooserComponent
                                ],
                                exports: [
                                    DxoColumnChooserComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiDataGridColumn extends CollectionNestedOption {
                get alignment() {
                    return this._getOption('alignment');
                }
                set alignment(value) {
                    this._setOption('alignment', value);
                }
                get allowEditing() {
                    return this._getOption('allowEditing');
                }
                set allowEditing(value) {
                    this._setOption('allowEditing', value);
                }
                get allowExporting() {
                    return this._getOption('allowExporting');
                }
                set allowExporting(value) {
                    this._setOption('allowExporting', value);
                }
                get allowFiltering() {
                    return this._getOption('allowFiltering');
                }
                set allowFiltering(value) {
                    this._setOption('allowFiltering', value);
                }
                get allowFixing() {
                    return this._getOption('allowFixing');
                }
                set allowFixing(value) {
                    this._setOption('allowFixing', value);
                }
                get allowGrouping() {
                    return this._getOption('allowGrouping');
                }
                set allowGrouping(value) {
                    this._setOption('allowGrouping', value);
                }
                get allowHeaderFiltering() {
                    return this._getOption('allowHeaderFiltering');
                }
                set allowHeaderFiltering(value) {
                    this._setOption('allowHeaderFiltering', value);
                }
                get allowHiding() {
                    return this._getOption('allowHiding');
                }
                set allowHiding(value) {
                    this._setOption('allowHiding', value);
                }
                get allowReordering() {
                    return this._getOption('allowReordering');
                }
                set allowReordering(value) {
                    this._setOption('allowReordering', value);
                }
                get allowResizing() {
                    return this._getOption('allowResizing');
                }
                set allowResizing(value) {
                    this._setOption('allowResizing', value);
                }
                get allowSearch() {
                    return this._getOption('allowSearch');
                }
                set allowSearch(value) {
                    this._setOption('allowSearch', value);
                }
                get allowSorting() {
                    return this._getOption('allowSorting');
                }
                set allowSorting(value) {
                    this._setOption('allowSorting', value);
                }
                get autoExpandGroup() {
                    return this._getOption('autoExpandGroup');
                }
                set autoExpandGroup(value) {
                    this._setOption('autoExpandGroup', value);
                }
                get buttons() {
                    return this._getOption('buttons');
                }
                set buttons(value) {
                    this._setOption('buttons', value);
                }
                get calculateCellValue() {
                    return this._getOption('calculateCellValue');
                }
                set calculateCellValue(value) {
                    this._setOption('calculateCellValue', value);
                }
                get calculateDisplayValue() {
                    return this._getOption('calculateDisplayValue');
                }
                set calculateDisplayValue(value) {
                    this._setOption('calculateDisplayValue', value);
                }
                get calculateFilterExpression() {
                    return this._getOption('calculateFilterExpression');
                }
                set calculateFilterExpression(value) {
                    this._setOption('calculateFilterExpression', value);
                }
                get calculateGroupValue() {
                    return this._getOption('calculateGroupValue');
                }
                set calculateGroupValue(value) {
                    this._setOption('calculateGroupValue', value);
                }
                get calculateSortValue() {
                    return this._getOption('calculateSortValue');
                }
                set calculateSortValue(value) {
                    this._setOption('calculateSortValue', value);
                }
                get caption() {
                    return this._getOption('caption');
                }
                set caption(value) {
                    this._setOption('caption', value);
                }
                get cellTemplate() {
                    return this._getOption('cellTemplate');
                }
                set cellTemplate(value) {
                    this._setOption('cellTemplate', value);
                }
                get columns() {
                    return this._getOption('columns');
                }
                set columns(value) {
                    this._setOption('columns', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get dataType() {
                    return this._getOption('dataType');
                }
                set dataType(value) {
                    this._setOption('dataType', value);
                }
                get editCellTemplate() {
                    return this._getOption('editCellTemplate');
                }
                set editCellTemplate(value) {
                    this._setOption('editCellTemplate', value);
                }
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get encodeHtml() {
                    return this._getOption('encodeHtml');
                }
                set encodeHtml(value) {
                    this._setOption('encodeHtml', value);
                }
                get falseText() {
                    return this._getOption('falseText');
                }
                set falseText(value) {
                    this._setOption('falseText', value);
                }
                get filterOperations() {
                    return this._getOption('filterOperations');
                }
                set filterOperations(value) {
                    this._setOption('filterOperations', value);
                }
                get filterType() {
                    return this._getOption('filterType');
                }
                set filterType(value) {
                    this._setOption('filterType', value);
                }
                get filterValue() {
                    return this._getOption('filterValue');
                }
                set filterValue(value) {
                    this._setOption('filterValue', value);
                }
                get filterValues() {
                    return this._getOption('filterValues');
                }
                set filterValues(value) {
                    this._setOption('filterValues', value);
                }
                get fixed() {
                    return this._getOption('fixed');
                }
                set fixed(value) {
                    this._setOption('fixed', value);
                }
                get fixedPosition() {
                    return this._getOption('fixedPosition');
                }
                set fixedPosition(value) {
                    this._setOption('fixedPosition', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get formItem() {
                    return this._getOption('formItem');
                }
                set formItem(value) {
                    this._setOption('formItem', value);
                }
                get groupCellTemplate() {
                    return this._getOption('groupCellTemplate');
                }
                set groupCellTemplate(value) {
                    this._setOption('groupCellTemplate', value);
                }
                get groupIndex() {
                    return this._getOption('groupIndex');
                }
                set groupIndex(value) {
                    this._setOption('groupIndex', value);
                }
                get headerCellTemplate() {
                    return this._getOption('headerCellTemplate');
                }
                set headerCellTemplate(value) {
                    this._setOption('headerCellTemplate', value);
                }
                get headerFilter() {
                    return this._getOption('headerFilter');
                }
                set headerFilter(value) {
                    this._setOption('headerFilter', value);
                }
                get hidingPriority() {
                    return this._getOption('hidingPriority');
                }
                set hidingPriority(value) {
                    this._setOption('hidingPriority', value);
                }
                get isBand() {
                    return this._getOption('isBand');
                }
                set isBand(value) {
                    this._setOption('isBand', value);
                }
                get lookup() {
                    return this._getOption('lookup');
                }
                set lookup(value) {
                    this._setOption('lookup', value);
                }
                get minWidth() {
                    return this._getOption('minWidth');
                }
                set minWidth(value) {
                    this._setOption('minWidth', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get ownerBand() {
                    return this._getOption('ownerBand');
                }
                set ownerBand(value) {
                    this._setOption('ownerBand', value);
                }
                get renderAsync() {
                    return this._getOption('renderAsync');
                }
                set renderAsync(value) {
                    this._setOption('renderAsync', value);
                }
                get selectedFilterOperation() {
                    return this._getOption('selectedFilterOperation');
                }
                set selectedFilterOperation(value) {
                    this._setOption('selectedFilterOperation', value);
                }
                get setCellValue() {
                    return this._getOption('setCellValue');
                }
                set setCellValue(value) {
                    this._setOption('setCellValue', value);
                }
                get showEditorAlways() {
                    return this._getOption('showEditorAlways');
                }
                set showEditorAlways(value) {
                    this._setOption('showEditorAlways', value);
                }
                get showInColumnChooser() {
                    return this._getOption('showInColumnChooser');
                }
                set showInColumnChooser(value) {
                    this._setOption('showInColumnChooser', value);
                }
                get showWhenGrouped() {
                    return this._getOption('showWhenGrouped');
                }
                set showWhenGrouped(value) {
                    this._setOption('showWhenGrouped', value);
                }
                get sortIndex() {
                    return this._getOption('sortIndex');
                }
                set sortIndex(value) {
                    this._setOption('sortIndex', value);
                }
                get sortingMethod() {
                    return this._getOption('sortingMethod');
                }
                set sortingMethod(value) {
                    this._setOption('sortingMethod', value);
                }
                get sortOrder() {
                    return this._getOption('sortOrder');
                }
                set sortOrder(value) {
                    this._setOption('sortOrder', value);
                }
                get trueText() {
                    return this._getOption('trueText');
                }
                set trueText(value) {
                    this._setOption('trueText', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get validationRules() {
                    return this._getOption('validationRules');
                }
                set validationRules(value) {
                    this._setOption('validationRules', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visibleIndex() {
                    return this._getOption('visibleIndex');
                }
                set visibleIndex(value) {
                    this._setOption('visibleIndex', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDataGridColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiDataGridColumn, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDataGridColumn, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiColumnComponent extends DxiDataGridColumn {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterValueChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterValuesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                groupIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectedFilterOperationChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                sortIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                sortOrderChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleIndexChange;
                get _optionPath() {
                    return 'columns';
                }
                get buttonsChildren() {
                    return this._getOption('buttons');
                }
                set buttonsChildren(value) {
                    this.setChildren('buttons', value);
                }
                get columnsChildren() {
                    return this._getOption('columns');
                }
                set columnsChildren(value) {
                    this.setChildren('columns', value);
                }
                get validationRulesChildren() {
                    return this._getOption('validationRules');
                }
                set validationRulesChildren(value) {
                    this.setChildren('validationRules', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'filterValueChange' },
                        { emit: 'filterValuesChange' },
                        { emit: 'groupIndexChange' },
                        { emit: 'selectedFilterOperationChange' },
                        { emit: 'sortIndexChange' },
                        { emit: 'sortOrderChange' },
                        { emit: 'visibleChange' },
                        { emit: 'visibleIndexChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiColumnComponent, selector: "dxi-column", inputs: { alignment: "alignment", allowEditing: "allowEditing", allowExporting: "allowExporting", allowFiltering: "allowFiltering", allowFixing: "allowFixing", allowGrouping: "allowGrouping", allowHeaderFiltering: "allowHeaderFiltering", allowHiding: "allowHiding", allowReordering: "allowReordering", allowResizing: "allowResizing", allowSearch: "allowSearch", allowSorting: "allowSorting", autoExpandGroup: "autoExpandGroup", buttons: "buttons", calculateCellValue: "calculateCellValue", calculateDisplayValue: "calculateDisplayValue", calculateFilterExpression: "calculateFilterExpression", calculateGroupValue: "calculateGroupValue", calculateSortValue: "calculateSortValue", caption: "caption", cellTemplate: "cellTemplate", columns: "columns", cssClass: "cssClass", customizeText: "customizeText", dataField: "dataField", dataType: "dataType", editCellTemplate: "editCellTemplate", editorOptions: "editorOptions", encodeHtml: "encodeHtml", falseText: "falseText", filterOperations: "filterOperations", filterType: "filterType", filterValue: "filterValue", filterValues: "filterValues", fixed: "fixed", fixedPosition: "fixedPosition", format: "format", formItem: "formItem", groupCellTemplate: "groupCellTemplate", groupIndex: "groupIndex", headerCellTemplate: "headerCellTemplate", headerFilter: "headerFilter", hidingPriority: "hidingPriority", isBand: "isBand", lookup: "lookup", minWidth: "minWidth", name: "name", ownerBand: "ownerBand", renderAsync: "renderAsync", selectedFilterOperation: "selectedFilterOperation", setCellValue: "setCellValue", showEditorAlways: "showEditorAlways", showInColumnChooser: "showInColumnChooser", showWhenGrouped: "showWhenGrouped", sortIndex: "sortIndex", sortingMethod: "sortingMethod", sortOrder: "sortOrder", trueText: "trueText", type: "type", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex", width: "width" }, outputs: { filterValueChange: "filterValueChange", filterValuesChange: "filterValuesChange", groupIndexChange: "groupIndexChange", selectedFilterOperationChange: "selectedFilterOperationChange", sortIndexChange: "sortIndexChange", sortOrderChange: "sortOrderChange", visibleChange: "visibleChange", visibleIndexChange: "visibleIndexChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "buttonsChildren", predicate: i0.forwardRef(() => DxiButtonComponent) }, { propertyName: "columnsChildren", predicate: i0.forwardRef(() => DxiColumnComponent) }, { propertyName: "validationRulesChildren", predicate: i0.forwardRef(() => DxiValidationRuleComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("bO", DxiColumnComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-column', template: '', providers: [NestedOptionHost], inputs: [
                                    'alignment',
                                    'allowEditing',
                                    'allowExporting',
                                    'allowFiltering',
                                    'allowFixing',
                                    'allowGrouping',
                                    'allowHeaderFiltering',
                                    'allowHiding',
                                    'allowReordering',
                                    'allowResizing',
                                    'allowSearch',
                                    'allowSorting',
                                    'autoExpandGroup',
                                    'buttons',
                                    'calculateCellValue',
                                    'calculateDisplayValue',
                                    'calculateFilterExpression',
                                    'calculateGroupValue',
                                    'calculateSortValue',
                                    'caption',
                                    'cellTemplate',
                                    'columns',
                                    'cssClass',
                                    'customizeText',
                                    'dataField',
                                    'dataType',
                                    'editCellTemplate',
                                    'editorOptions',
                                    'encodeHtml',
                                    'falseText',
                                    'filterOperations',
                                    'filterType',
                                    'filterValue',
                                    'filterValues',
                                    'fixed',
                                    'fixedPosition',
                                    'format',
                                    'formItem',
                                    'groupCellTemplate',
                                    'groupIndex',
                                    'headerCellTemplate',
                                    'headerFilter',
                                    'hidingPriority',
                                    'isBand',
                                    'lookup',
                                    'minWidth',
                                    'name',
                                    'ownerBand',
                                    'renderAsync',
                                    'selectedFilterOperation',
                                    'setCellValue',
                                    'showEditorAlways',
                                    'showInColumnChooser',
                                    'showWhenGrouped',
                                    'sortIndex',
                                    'sortingMethod',
                                    'sortOrder',
                                    'trueText',
                                    'type',
                                    'validationRules',
                                    'visible',
                                    'visibleIndex',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { filterValueChange: [{
                            type: Output
                        }], filterValuesChange: [{
                            type: Output
                        }], groupIndexChange: [{
                            type: Output
                        }], selectedFilterOperationChange: [{
                            type: Output
                        }], sortIndexChange: [{
                            type: Output
                        }], sortOrderChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], visibleIndexChange: [{
                            type: Output
                        }], buttonsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiButtonComponent)]
                        }], columnsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiColumnComponent)]
                        }], validationRulesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiValidationRuleComponent)]
                        }] } });
            class DxiColumnModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnModule, declarations: [DxiColumnComponent], exports: [DxiColumnComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnModule });
            } exports("bw", DxiColumnModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiColumnComponent
                                ],
                                exports: [
                                    DxiColumnComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColumnFixingComponent extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get _optionPath() {
                    return 'columnFixing';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColumnFixingComponent, selector: "dxo-column-fixing", inputs: { enabled: "enabled", texts: "texts" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-column-fixing', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { enabled: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }] } });
            class DxoColumnFixingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingModule, declarations: [DxoColumnFixingComponent], exports: [DxoColumnFixingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingModule });
            } exports("cV", DxoColumnFixingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColumnFixingComponent
                                ],
                                exports: [
                                    DxoColumnFixingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoChartCommonAnnotationConfig extends NestedOption {
                get allowDragging() {
                    return this._getOption('allowDragging');
                }
                set allowDragging(value) {
                    this._setOption('allowDragging', value);
                }
                get argument() {
                    return this._getOption('argument');
                }
                set argument(value) {
                    this._setOption('argument', value);
                }
                get arrowLength() {
                    return this._getOption('arrowLength');
                }
                set arrowLength(value) {
                    this._setOption('arrowLength', value);
                }
                get arrowWidth() {
                    return this._getOption('arrowWidth');
                }
                set arrowWidth(value) {
                    this._setOption('arrowWidth', value);
                }
                get axis() {
                    return this._getOption('axis');
                }
                set axis(value) {
                    this._setOption('axis', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get customizeTooltip() {
                    return this._getOption('customizeTooltip');
                }
                set customizeTooltip(value) {
                    this._setOption('customizeTooltip', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get description() {
                    return this._getOption('description');
                }
                set description(value) {
                    this._setOption('description', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get image() {
                    return this._getOption('image');
                }
                set image(value) {
                    this._setOption('image', value);
                }
                get offsetX() {
                    return this._getOption('offsetX');
                }
                set offsetX(value) {
                    this._setOption('offsetX', value);
                }
                get offsetY() {
                    return this._getOption('offsetY');
                }
                set offsetY(value) {
                    this._setOption('offsetY', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get series() {
                    return this._getOption('series');
                }
                set series(value) {
                    this._setOption('series', value);
                }
                get shadow() {
                    return this._getOption('shadow');
                }
                set shadow(value) {
                    this._setOption('shadow', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get tooltipEnabled() {
                    return this._getOption('tooltipEnabled');
                }
                set tooltipEnabled(value) {
                    this._setOption('tooltipEnabled', value);
                }
                get tooltipTemplate() {
                    return this._getOption('tooltipTemplate');
                }
                set tooltipTemplate(value) {
                    this._setOption('tooltipTemplate', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get angle() {
                    return this._getOption('angle');
                }
                set angle(value) {
                    this._setOption('angle', value);
                }
                get radius() {
                    return this._getOption('radius');
                }
                set radius(value) {
                    this._setOption('radius', value);
                }
                get coordinates() {
                    return this._getOption('coordinates');
                }
                set coordinates(value) {
                    this._setOption('coordinates', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartCommonAnnotationConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoChartCommonAnnotationConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartCommonAnnotationConfig, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoCommonAnnotationSettingsComponent extends DxoChartCommonAnnotationConfig {
                get _optionPath() {
                    return 'commonAnnotationSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCommonAnnotationSettingsComponent, selector: "dxo-common-annotation-settings", inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y", location: "location", angle: "angle", radius: "radius", coordinates: "coordinates" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-common-annotation-settings', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowDragging',
                                    'argument',
                                    'arrowLength',
                                    'arrowWidth',
                                    'axis',
                                    'border',
                                    'color',
                                    'customizeTooltip',
                                    'data',
                                    'description',
                                    'font',
                                    'height',
                                    'image',
                                    'offsetX',
                                    'offsetY',
                                    'opacity',
                                    'paddingLeftRight',
                                    'paddingTopBottom',
                                    'series',
                                    'shadow',
                                    'template',
                                    'text',
                                    'textOverflow',
                                    'tooltipEnabled',
                                    'tooltipTemplate',
                                    'type',
                                    'value',
                                    'width',
                                    'wordWrap',
                                    'x',
                                    'y',
                                    'location',
                                    'angle',
                                    'radius',
                                    'coordinates'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoCommonAnnotationSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsModule, declarations: [DxoCommonAnnotationSettingsComponent], exports: [DxoCommonAnnotationSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsModule });
            } exports("a9", DxoCommonAnnotationSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCommonAnnotationSettingsComponent
                                ],
                                exports: [
                                    DxoCommonAnnotationSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCommonAxisSettingsComponent extends NestedOption {
                get aggregatedPointsPosition() {
                    return this._getOption('aggregatedPointsPosition');
                }
                set aggregatedPointsPosition(value) {
                    this._setOption('aggregatedPointsPosition', value);
                }
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get breakStyle() {
                    return this._getOption('breakStyle');
                }
                set breakStyle(value) {
                    this._setOption('breakStyle', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get constantLineStyle() {
                    return this._getOption('constantLineStyle');
                }
                set constantLineStyle(value) {
                    this._setOption('constantLineStyle', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get grid() {
                    return this._getOption('grid');
                }
                set grid(value) {
                    this._setOption('grid', value);
                }
                get inverted() {
                    return this._getOption('inverted');
                }
                set inverted(value) {
                    this._setOption('inverted', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get maxValueMargin() {
                    return this._getOption('maxValueMargin');
                }
                set maxValueMargin(value) {
                    this._setOption('maxValueMargin', value);
                }
                get minorGrid() {
                    return this._getOption('minorGrid');
                }
                set minorGrid(value) {
                    this._setOption('minorGrid', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minValueMargin() {
                    return this._getOption('minValueMargin');
                }
                set minValueMargin(value) {
                    this._setOption('minValueMargin', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get placeholderSize() {
                    return this._getOption('placeholderSize');
                }
                set placeholderSize(value) {
                    this._setOption('placeholderSize', value);
                }
                get stripStyle() {
                    return this._getOption('stripStyle');
                }
                set stripStyle(value) {
                    this._setOption('stripStyle', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get valueMarginsEnabled() {
                    return this._getOption('valueMarginsEnabled');
                }
                set valueMarginsEnabled(value) {
                    this._setOption('valueMarginsEnabled', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'commonAxisSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCommonAxisSettingsComponent, selector: "dxo-common-axis-settings", inputs: { aggregatedPointsPosition: "aggregatedPointsPosition", allowDecimals: "allowDecimals", breakStyle: "breakStyle", color: "color", constantLineStyle: "constantLineStyle", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minValueMargin: "minValueMargin", opacity: "opacity", placeholderSize: "placeholderSize", stripStyle: "stripStyle", tick: "tick", title: "title", valueMarginsEnabled: "valueMarginsEnabled", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-common-axis-settings', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { aggregatedPointsPosition: [{
                            type: Input
                        }], allowDecimals: [{
                            type: Input
                        }], breakStyle: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], constantLineStyle: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], grid: [{
                            type: Input
                        }], inverted: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], maxValueMargin: [{
                            type: Input
                        }], minorGrid: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minValueMargin: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], placeholderSize: [{
                            type: Input
                        }], stripStyle: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], valueMarginsEnabled: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoCommonAxisSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsModule, declarations: [DxoCommonAxisSettingsComponent], exports: [DxoCommonAxisSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsModule });
            } exports("aa", DxoCommonAxisSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCommonAxisSettingsComponent
                                ],
                                exports: [
                                    DxoCommonAxisSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCommonPaneSettingsComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get _optionPath() {
                    return 'commonPaneSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCommonPaneSettingsComponent, selector: "dxo-common-pane-settings", inputs: { backgroundColor: "backgroundColor", border: "border" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-common-pane-settings', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }] } });
            class DxoCommonPaneSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsModule, declarations: [DxoCommonPaneSettingsComponent], exports: [DxoCommonPaneSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsModule });
            } exports("ab", DxoCommonPaneSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCommonPaneSettingsComponent
                                ],
                                exports: [
                                    DxoCommonPaneSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoCommonSeriesSettingsComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'commonSeriesSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCommonSeriesSettingsComponent, selector: "dxo-common-series-settings", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", argumentType: "argumentType", minSegmentSize: "minSegmentSize", smallValuesGrouping: "smallValuesGrouping", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-common-series-settings', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'argumentType',
                                    'minSegmentSize',
                                    'smallValuesGrouping',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoCommonSeriesSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsModule, declarations: [DxoCommonSeriesSettingsComponent], exports: [DxoCommonSeriesSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsModule });
            } exports("ad", DxoCommonSeriesSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCommonSeriesSettingsComponent
                                ],
                                exports: [
                                    DxoCommonSeriesSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiConnectionPointComponent extends CollectionNestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'connectionPoints';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiConnectionPointComponent, selector: "dxi-connection-point", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-connection-point', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxiConnectionPointModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointModule, declarations: [DxiConnectionPointComponent], exports: [DxiConnectionPointComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointModule });
            } exports("bd", DxiConnectionPointModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiConnectionPointComponent
                                ],
                                exports: [
                                    DxiConnectionPointComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoConnectorComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'connector';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoConnectorComponent, selector: "dxo-connector", inputs: { color: "color", visible: "visible", width: "width", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-connector', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoConnectorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorModule, declarations: [DxoConnectorComponent], exports: [DxoConnectorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorModule });
            } exports("ai", DxoConnectorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoConnectorComponent
                                ],
                                exports: [
                                    DxoConnectorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoConstantLineStyleComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'constantLineStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoConstantLineStyleComponent, selector: "dxo-constant-line-style", inputs: { color: "color", dashStyle: "dashStyle", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-constant-line-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoConstantLineStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleModule, declarations: [DxoConstantLineStyleComponent], exports: [DxoConstantLineStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleModule });
            } exports("$", DxoConstantLineStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoConstantLineStyleComponent
                                ],
                                exports: [
                                    DxoConstantLineStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFileManagerContextMenu extends NestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileManagerContextMenu, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFileManagerContextMenu, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileManagerContextMenu, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoContextMenuComponent extends DxoFileManagerContextMenu {
                get _optionPath() {
                    return 'contextMenu';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoContextMenuComponent, selector: "dxo-context-menu", inputs: { commands: "commands", enabled: "enabled", items: "items" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }, { propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-context-menu', template: '', providers: [NestedOptionHost], inputs: [
                                    'commands',
                                    'enabled',
                                    'items'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoContextMenuModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuModule, declarations: [DxoContextMenuComponent], exports: [DxoContextMenuComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuModule });
            } exports("b9", DxoContextMenuModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoContextMenuComponent
                                ],
                                exports: [
                                    DxoContextMenuComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoContextToolboxComponent extends NestedOption {
                get category() {
                    return this._getOption('category');
                }
                set category(value) {
                    this._setOption('category', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get shapeIconsPerRow() {
                    return this._getOption('shapeIconsPerRow');
                }
                set shapeIconsPerRow(value) {
                    this._setOption('shapeIconsPerRow', value);
                }
                get shapes() {
                    return this._getOption('shapes');
                }
                set shapes(value) {
                    this._setOption('shapes', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'contextToolbox';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoContextToolboxComponent, selector: "dxo-context-toolbox", inputs: { category: "category", displayMode: "displayMode", enabled: "enabled", shapeIconsPerRow: "shapeIconsPerRow", shapes: "shapes", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-context-toolbox', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { category: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], shapeIconsPerRow: [{
                            type: Input
                        }], shapes: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoContextToolboxModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxModule, declarations: [DxoContextToolboxComponent], exports: [DxoContextToolboxComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxModule });
            } exports("bb", DxoContextToolboxModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoContextToolboxComponent
                                ],
                                exports: [
                                    DxoContextToolboxComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoControlBarComponent extends NestedOption {
                get borderColor() {
                    return this._getOption('borderColor');
                }
                set borderColor(value) {
                    this._setOption('borderColor', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get panVisible() {
                    return this._getOption('panVisible');
                }
                set panVisible(value) {
                    this._setOption('panVisible', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get zoomVisible() {
                    return this._getOption('zoomVisible');
                }
                set zoomVisible(value) {
                    this._setOption('zoomVisible', value);
                }
                get _optionPath() {
                    return 'controlBar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoControlBarComponent, selector: "dxo-control-bar", inputs: { borderColor: "borderColor", color: "color", enabled: "enabled", horizontalAlignment: "horizontalAlignment", margin: "margin", opacity: "opacity", panVisible: "panVisible", verticalAlignment: "verticalAlignment", zoomVisible: "zoomVisible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-control-bar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { borderColor: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], panVisible: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], zoomVisible: [{
                            type: Input
                        }] } });
            class DxoControlBarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarModule, declarations: [DxoControlBarComponent], exports: [DxoControlBarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarModule });
            } exports("df", DxoControlBarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoControlBarComponent
                                ],
                                exports: [
                                    DxoControlBarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCrosshairComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get horizontalLine() {
                    return this._getOption('horizontalLine');
                }
                set horizontalLine(value) {
                    this._setOption('horizontalLine', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get verticalLine() {
                    return this._getOption('verticalLine');
                }
                set verticalLine(value) {
                    this._setOption('verticalLine', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'crosshair';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCrosshairComponent, selector: "dxo-crosshair", inputs: { color: "color", dashStyle: "dashStyle", enabled: "enabled", horizontalLine: "horizontalLine", label: "label", opacity: "opacity", verticalLine: "verticalLine", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-crosshair', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], horizontalLine: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], verticalLine: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoCrosshairModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairModule, declarations: [DxoCrosshairComponent], exports: [DxoCrosshairComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairModule });
            } exports("aO", DxoCrosshairModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCrosshairComponent
                                ],
                                exports: [
                                    DxoCrosshairComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCursorOffsetComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'cursorOffset';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCursorOffsetComponent, selector: "dxo-cursor-offset", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-cursor-offset', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoCursorOffsetModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetModule, declarations: [DxoCursorOffsetComponent], exports: [DxoCursorOffsetComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetModule });
            } exports("bt", DxoCursorOffsetModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCursorOffsetComponent
                                ],
                                exports: [
                                    DxoCursorOffsetComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiFilterBuilderCustomOperation extends CollectionNestedOption {
                get calculateFilterExpression() {
                    return this._getOption('calculateFilterExpression');
                }
                set calculateFilterExpression(value) {
                    this._setOption('calculateFilterExpression', value);
                }
                get caption() {
                    return this._getOption('caption');
                }
                set caption(value) {
                    this._setOption('caption', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get dataTypes() {
                    return this._getOption('dataTypes');
                }
                set dataTypes(value) {
                    this._setOption('dataTypes', value);
                }
                get editorTemplate() {
                    return this._getOption('editorTemplate');
                }
                set editorTemplate(value) {
                    this._setOption('editorTemplate', value);
                }
                get hasValue() {
                    return this._getOption('hasValue');
                }
                set hasValue(value) {
                    this._setOption('hasValue', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFilterBuilderCustomOperation, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFilterBuilderCustomOperation, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFilterBuilderCustomOperation, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiCustomOperationComponent extends DxiFilterBuilderCustomOperation {
                get _optionPath() {
                    return 'customOperations';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiCustomOperationComponent, selector: "dxi-custom-operation", inputs: { calculateFilterExpression: "calculateFilterExpression", caption: "caption", customizeText: "customizeText", dataTypes: "dataTypes", editorTemplate: "editorTemplate", hasValue: "hasValue", icon: "icon", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("bC", DxiCustomOperationComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-custom-operation', template: '', providers: [NestedOptionHost], inputs: [
                                    'calculateFilterExpression',
                                    'caption',
                                    'customizeText',
                                    'dataTypes',
                                    'editorTemplate',
                                    'hasValue',
                                    'icon',
                                    'name'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiCustomOperationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationModule, declarations: [DxiCustomOperationComponent], exports: [DxiCustomOperationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationModule });
            } exports("bE", DxiCustomOperationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiCustomOperationComponent
                                ],
                                exports: [
                                    DxiCustomOperationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiCustomShapeComponent extends CollectionNestedOption {
                renderer;
                document;
                element;
                get allowEditImage() {
                    return this._getOption('allowEditImage');
                }
                set allowEditImage(value) {
                    this._setOption('allowEditImage', value);
                }
                get allowEditText() {
                    return this._getOption('allowEditText');
                }
                set allowEditText(value) {
                    this._setOption('allowEditText', value);
                }
                get allowResize() {
                    return this._getOption('allowResize');
                }
                set allowResize(value) {
                    this._setOption('allowResize', value);
                }
                get backgroundImageHeight() {
                    return this._getOption('backgroundImageHeight');
                }
                set backgroundImageHeight(value) {
                    this._setOption('backgroundImageHeight', value);
                }
                get backgroundImageLeft() {
                    return this._getOption('backgroundImageLeft');
                }
                set backgroundImageLeft(value) {
                    this._setOption('backgroundImageLeft', value);
                }
                get backgroundImageToolboxUrl() {
                    return this._getOption('backgroundImageToolboxUrl');
                }
                set backgroundImageToolboxUrl(value) {
                    this._setOption('backgroundImageToolboxUrl', value);
                }
                get backgroundImageTop() {
                    return this._getOption('backgroundImageTop');
                }
                set backgroundImageTop(value) {
                    this._setOption('backgroundImageTop', value);
                }
                get backgroundImageUrl() {
                    return this._getOption('backgroundImageUrl');
                }
                set backgroundImageUrl(value) {
                    this._setOption('backgroundImageUrl', value);
                }
                get backgroundImageWidth() {
                    return this._getOption('backgroundImageWidth');
                }
                set backgroundImageWidth(value) {
                    this._setOption('backgroundImageWidth', value);
                }
                get baseType() {
                    return this._getOption('baseType');
                }
                set baseType(value) {
                    this._setOption('baseType', value);
                }
                get category() {
                    return this._getOption('category');
                }
                set category(value) {
                    this._setOption('category', value);
                }
                get connectionPoints() {
                    return this._getOption('connectionPoints');
                }
                set connectionPoints(value) {
                    this._setOption('connectionPoints', value);
                }
                get defaultHeight() {
                    return this._getOption('defaultHeight');
                }
                set defaultHeight(value) {
                    this._setOption('defaultHeight', value);
                }
                get defaultImageUrl() {
                    return this._getOption('defaultImageUrl');
                }
                set defaultImageUrl(value) {
                    this._setOption('defaultImageUrl', value);
                }
                get defaultText() {
                    return this._getOption('defaultText');
                }
                set defaultText(value) {
                    this._setOption('defaultText', value);
                }
                get defaultWidth() {
                    return this._getOption('defaultWidth');
                }
                set defaultWidth(value) {
                    this._setOption('defaultWidth', value);
                }
                get imageHeight() {
                    return this._getOption('imageHeight');
                }
                set imageHeight(value) {
                    this._setOption('imageHeight', value);
                }
                get imageLeft() {
                    return this._getOption('imageLeft');
                }
                set imageLeft(value) {
                    this._setOption('imageLeft', value);
                }
                get imageTop() {
                    return this._getOption('imageTop');
                }
                set imageTop(value) {
                    this._setOption('imageTop', value);
                }
                get imageWidth() {
                    return this._getOption('imageWidth');
                }
                set imageWidth(value) {
                    this._setOption('imageWidth', value);
                }
                get keepRatioOnAutoSize() {
                    return this._getOption('keepRatioOnAutoSize');
                }
                set keepRatioOnAutoSize(value) {
                    this._setOption('keepRatioOnAutoSize', value);
                }
                get maxHeight() {
                    return this._getOption('maxHeight');
                }
                set maxHeight(value) {
                    this._setOption('maxHeight', value);
                }
                get maxWidth() {
                    return this._getOption('maxWidth');
                }
                set maxWidth(value) {
                    this._setOption('maxWidth', value);
                }
                get minHeight() {
                    return this._getOption('minHeight');
                }
                set minHeight(value) {
                    this._setOption('minHeight', value);
                }
                get minWidth() {
                    return this._getOption('minWidth');
                }
                set minWidth(value) {
                    this._setOption('minWidth', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get templateHeight() {
                    return this._getOption('templateHeight');
                }
                set templateHeight(value) {
                    this._setOption('templateHeight', value);
                }
                get templateLeft() {
                    return this._getOption('templateLeft');
                }
                set templateLeft(value) {
                    this._setOption('templateLeft', value);
                }
                get templateTop() {
                    return this._getOption('templateTop');
                }
                set templateTop(value) {
                    this._setOption('templateTop', value);
                }
                get templateWidth() {
                    return this._getOption('templateWidth');
                }
                set templateWidth(value) {
                    this._setOption('templateWidth', value);
                }
                get textHeight() {
                    return this._getOption('textHeight');
                }
                set textHeight(value) {
                    this._setOption('textHeight', value);
                }
                get textLeft() {
                    return this._getOption('textLeft');
                }
                set textLeft(value) {
                    this._setOption('textLeft', value);
                }
                get textTop() {
                    return this._getOption('textTop');
                }
                set textTop(value) {
                    this._setOption('textTop', value);
                }
                get textWidth() {
                    return this._getOption('textWidth');
                }
                set textWidth(value) {
                    this._setOption('textWidth', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get toolboxTemplate() {
                    return this._getOption('toolboxTemplate');
                }
                set toolboxTemplate(value) {
                    this._setOption('toolboxTemplate', value);
                }
                get toolboxWidthToHeightRatio() {
                    return this._getOption('toolboxWidthToHeightRatio');
                }
                set toolboxWidthToHeightRatio(value) {
                    this._setOption('toolboxWidthToHeightRatio', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'customShapes';
                }
                get connectionPointsChildren() {
                    return this._getOption('connectionPoints');
                }
                set connectionPointsChildren(value) {
                    this.setChildren('connectionPoints', value);
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiCustomShapeComponent, selector: "dxi-custom-shape", inputs: { allowEditImage: "allowEditImage", allowEditText: "allowEditText", allowResize: "allowResize", backgroundImageHeight: "backgroundImageHeight", backgroundImageLeft: "backgroundImageLeft", backgroundImageToolboxUrl: "backgroundImageToolboxUrl", backgroundImageTop: "backgroundImageTop", backgroundImageUrl: "backgroundImageUrl", backgroundImageWidth: "backgroundImageWidth", baseType: "baseType", category: "category", connectionPoints: "connectionPoints", defaultHeight: "defaultHeight", defaultImageUrl: "defaultImageUrl", defaultText: "defaultText", defaultWidth: "defaultWidth", imageHeight: "imageHeight", imageLeft: "imageLeft", imageTop: "imageTop", imageWidth: "imageWidth", keepRatioOnAutoSize: "keepRatioOnAutoSize", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", template: "template", templateHeight: "templateHeight", templateLeft: "templateLeft", templateTop: "templateTop", templateWidth: "templateWidth", textHeight: "textHeight", textLeft: "textLeft", textTop: "textTop", textWidth: "textWidth", title: "title", toolboxTemplate: "toolboxTemplate", toolboxWidthToHeightRatio: "toolboxWidthToHeightRatio", type: "type" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "connectionPointsChildren", predicate: i0.forwardRef(() => DxiConnectionPointComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            } exports("b8", DxiCustomShapeComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-custom-shape', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { allowEditImage: [{
                            type: Input
                        }], allowEditText: [{
                            type: Input
                        }], allowResize: [{
                            type: Input
                        }], backgroundImageHeight: [{
                            type: Input
                        }], backgroundImageLeft: [{
                            type: Input
                        }], backgroundImageToolboxUrl: [{
                            type: Input
                        }], backgroundImageTop: [{
                            type: Input
                        }], backgroundImageUrl: [{
                            type: Input
                        }], backgroundImageWidth: [{
                            type: Input
                        }], baseType: [{
                            type: Input
                        }], category: [{
                            type: Input
                        }], connectionPoints: [{
                            type: Input
                        }], defaultHeight: [{
                            type: Input
                        }], defaultImageUrl: [{
                            type: Input
                        }], defaultText: [{
                            type: Input
                        }], defaultWidth: [{
                            type: Input
                        }], imageHeight: [{
                            type: Input
                        }], imageLeft: [{
                            type: Input
                        }], imageTop: [{
                            type: Input
                        }], imageWidth: [{
                            type: Input
                        }], keepRatioOnAutoSize: [{
                            type: Input
                        }], maxHeight: [{
                            type: Input
                        }], maxWidth: [{
                            type: Input
                        }], minHeight: [{
                            type: Input
                        }], minWidth: [{
                            type: Input
                        }], template: [{
                            type: Input
                        }], templateHeight: [{
                            type: Input
                        }], templateLeft: [{
                            type: Input
                        }], templateTop: [{
                            type: Input
                        }], templateWidth: [{
                            type: Input
                        }], textHeight: [{
                            type: Input
                        }], textLeft: [{
                            type: Input
                        }], textTop: [{
                            type: Input
                        }], textWidth: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], toolboxTemplate: [{
                            type: Input
                        }], toolboxWidthToHeightRatio: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], connectionPointsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiConnectionPointComponent)]
                        }] } });
            class DxiCustomShapeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeModule, declarations: [DxiCustomShapeComponent], exports: [DxiCustomShapeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeModule });
            } exports("bc", DxiCustomShapeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiCustomShapeComponent
                                ],
                                exports: [
                                    DxiCustomShapeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDataPrepareSettingsComponent extends NestedOption {
                get checkTypeForAllData() {
                    return this._getOption('checkTypeForAllData');
                }
                set checkTypeForAllData(value) {
                    this._setOption('checkTypeForAllData', value);
                }
                get convertToAxisDataType() {
                    return this._getOption('convertToAxisDataType');
                }
                set convertToAxisDataType(value) {
                    this._setOption('convertToAxisDataType', value);
                }
                get sortingMethod() {
                    return this._getOption('sortingMethod');
                }
                set sortingMethod(value) {
                    this._setOption('sortingMethod', value);
                }
                get _optionPath() {
                    return 'dataPrepareSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDataPrepareSettingsComponent, selector: "dxo-data-prepare-settings", inputs: { checkTypeForAllData: "checkTypeForAllData", convertToAxisDataType: "convertToAxisDataType", sortingMethod: "sortingMethod" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-data-prepare-settings', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { checkTypeForAllData: [{
                            type: Input
                        }], convertToAxisDataType: [{
                            type: Input
                        }], sortingMethod: [{
                            type: Input
                        }] } });
            class DxoDataPrepareSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsModule, declarations: [DxoDataPrepareSettingsComponent], exports: [DxoDataPrepareSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsModule });
            } exports("aR", DxoDataPrepareSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDataPrepareSettingsComponent
                                ],
                                exports: [
                                    DxoDataPrepareSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPivotGridDataSource extends NestedOption {
                get fields() {
                    return this._getOption('fields');
                }
                set fields(value) {
                    this._setOption('fields', value);
                }
                get filter() {
                    return this._getOption('filter');
                }
                set filter(value) {
                    this._setOption('filter', value);
                }
                get onChanged() {
                    return this._getOption('onChanged');
                }
                set onChanged(value) {
                    this._setOption('onChanged', value);
                }
                get onFieldsPrepared() {
                    return this._getOption('onFieldsPrepared');
                }
                set onFieldsPrepared(value) {
                    this._setOption('onFieldsPrepared', value);
                }
                get onLoadError() {
                    return this._getOption('onLoadError');
                }
                set onLoadError(value) {
                    this._setOption('onLoadError', value);
                }
                get onLoadingChanged() {
                    return this._getOption('onLoadingChanged');
                }
                set onLoadingChanged(value) {
                    this._setOption('onLoadingChanged', value);
                }
                get remoteOperations() {
                    return this._getOption('remoteOperations');
                }
                set remoteOperations(value) {
                    this._setOption('remoteOperations', value);
                }
                get retrieveFields() {
                    return this._getOption('retrieveFields');
                }
                set retrieveFields(value) {
                    this._setOption('retrieveFields', value);
                }
                get store() {
                    return this._getOption('store');
                }
                set store(value) {
                    this._setOption('store', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPivotGridDataSource, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPivotGridDataSource, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPivotGridDataSource, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiFilterBuilderField extends CollectionNestedOption {
                get calculateFilterExpression() {
                    return this._getOption('calculateFilterExpression');
                }
                set calculateFilterExpression(value) {
                    this._setOption('calculateFilterExpression', value);
                }
                get caption() {
                    return this._getOption('caption');
                }
                set caption(value) {
                    this._setOption('caption', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get dataType() {
                    return this._getOption('dataType');
                }
                set dataType(value) {
                    this._setOption('dataType', value);
                }
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get editorTemplate() {
                    return this._getOption('editorTemplate');
                }
                set editorTemplate(value) {
                    this._setOption('editorTemplate', value);
                }
                get falseText() {
                    return this._getOption('falseText');
                }
                set falseText(value) {
                    this._setOption('falseText', value);
                }
                get filterOperations() {
                    return this._getOption('filterOperations');
                }
                set filterOperations(value) {
                    this._setOption('filterOperations', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get lookup() {
                    return this._getOption('lookup');
                }
                set lookup(value) {
                    this._setOption('lookup', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get trueText() {
                    return this._getOption('trueText');
                }
                set trueText(value) {
                    this._setOption('trueText', value);
                }
                get allowCrossGroupCalculation() {
                    return this._getOption('allowCrossGroupCalculation');
                }
                set allowCrossGroupCalculation(value) {
                    this._setOption('allowCrossGroupCalculation', value);
                }
                get allowExpandAll() {
                    return this._getOption('allowExpandAll');
                }
                set allowExpandAll(value) {
                    this._setOption('allowExpandAll', value);
                }
                get allowFiltering() {
                    return this._getOption('allowFiltering');
                }
                set allowFiltering(value) {
                    this._setOption('allowFiltering', value);
                }
                get allowSorting() {
                    return this._getOption('allowSorting');
                }
                set allowSorting(value) {
                    this._setOption('allowSorting', value);
                }
                get allowSortingBySummary() {
                    return this._getOption('allowSortingBySummary');
                }
                set allowSortingBySummary(value) {
                    this._setOption('allowSortingBySummary', value);
                }
                get area() {
                    return this._getOption('area');
                }
                set area(value) {
                    this._setOption('area', value);
                }
                get areaIndex() {
                    return this._getOption('areaIndex');
                }
                set areaIndex(value) {
                    this._setOption('areaIndex', value);
                }
                get calculateCustomSummary() {
                    return this._getOption('calculateCustomSummary');
                }
                set calculateCustomSummary(value) {
                    this._setOption('calculateCustomSummary', value);
                }
                get calculateSummaryValue() {
                    return this._getOption('calculateSummaryValue');
                }
                set calculateSummaryValue(value) {
                    this._setOption('calculateSummaryValue', value);
                }
                get displayFolder() {
                    return this._getOption('displayFolder');
                }
                set displayFolder(value) {
                    this._setOption('displayFolder', value);
                }
                get expanded() {
                    return this._getOption('expanded');
                }
                set expanded(value) {
                    this._setOption('expanded', value);
                }
                get filterType() {
                    return this._getOption('filterType');
                }
                set filterType(value) {
                    this._setOption('filterType', value);
                }
                get filterValues() {
                    return this._getOption('filterValues');
                }
                set filterValues(value) {
                    this._setOption('filterValues', value);
                }
                get groupIndex() {
                    return this._getOption('groupIndex');
                }
                set groupIndex(value) {
                    this._setOption('groupIndex', value);
                }
                get groupInterval() {
                    return this._getOption('groupInterval');
                }
                set groupInterval(value) {
                    this._setOption('groupInterval', value);
                }
                get groupName() {
                    return this._getOption('groupName');
                }
                set groupName(value) {
                    this._setOption('groupName', value);
                }
                get headerFilter() {
                    return this._getOption('headerFilter');
                }
                set headerFilter(value) {
                    this._setOption('headerFilter', value);
                }
                get isMeasure() {
                    return this._getOption('isMeasure');
                }
                set isMeasure(value) {
                    this._setOption('isMeasure', value);
                }
                get precision() {
                    return this._getOption('precision');
                }
                set precision(value) {
                    this._setOption('precision', value);
                }
                get runningTotal() {
                    return this._getOption('runningTotal');
                }
                set runningTotal(value) {
                    this._setOption('runningTotal', value);
                }
                get selector() {
                    return this._getOption('selector');
                }
                set selector(value) {
                    this._setOption('selector', value);
                }
                get showGrandTotals() {
                    return this._getOption('showGrandTotals');
                }
                set showGrandTotals(value) {
                    this._setOption('showGrandTotals', value);
                }
                get showTotals() {
                    return this._getOption('showTotals');
                }
                set showTotals(value) {
                    this._setOption('showTotals', value);
                }
                get showValues() {
                    return this._getOption('showValues');
                }
                set showValues(value) {
                    this._setOption('showValues', value);
                }
                get sortBy() {
                    return this._getOption('sortBy');
                }
                set sortBy(value) {
                    this._setOption('sortBy', value);
                }
                get sortBySummaryField() {
                    return this._getOption('sortBySummaryField');
                }
                set sortBySummaryField(value) {
                    this._setOption('sortBySummaryField', value);
                }
                get sortBySummaryPath() {
                    return this._getOption('sortBySummaryPath');
                }
                set sortBySummaryPath(value) {
                    this._setOption('sortBySummaryPath', value);
                }
                get sortingMethod() {
                    return this._getOption('sortingMethod');
                }
                set sortingMethod(value) {
                    this._setOption('sortingMethod', value);
                }
                get sortOrder() {
                    return this._getOption('sortOrder');
                }
                set sortOrder(value) {
                    this._setOption('sortOrder', value);
                }
                get summaryDisplayMode() {
                    return this._getOption('summaryDisplayMode');
                }
                set summaryDisplayMode(value) {
                    this._setOption('summaryDisplayMode', value);
                }
                get summaryType() {
                    return this._getOption('summaryType');
                }
                set summaryType(value) {
                    this._setOption('summaryType', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get wordWrapEnabled() {
                    return this._getOption('wordWrapEnabled');
                }
                set wordWrapEnabled(value) {
                    this._setOption('wordWrapEnabled', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFilterBuilderField, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFilterBuilderField, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFilterBuilderField, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiFieldComponent extends DxiFilterBuilderField {
                get _optionPath() {
                    return 'fields';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFieldComponent, selector: "dxi-field", inputs: { calculateFilterExpression: "calculateFilterExpression", caption: "caption", customizeText: "customizeText", dataField: "dataField", dataType: "dataType", editorOptions: "editorOptions", editorTemplate: "editorTemplate", falseText: "falseText", filterOperations: "filterOperations", format: "format", lookup: "lookup", name: "name", trueText: "trueText", allowCrossGroupCalculation: "allowCrossGroupCalculation", allowExpandAll: "allowExpandAll", allowFiltering: "allowFiltering", allowSorting: "allowSorting", allowSortingBySummary: "allowSortingBySummary", area: "area", areaIndex: "areaIndex", calculateCustomSummary: "calculateCustomSummary", calculateSummaryValue: "calculateSummaryValue", displayFolder: "displayFolder", expanded: "expanded", filterType: "filterType", filterValues: "filterValues", groupIndex: "groupIndex", groupInterval: "groupInterval", groupName: "groupName", headerFilter: "headerFilter", isMeasure: "isMeasure", precision: "precision", runningTotal: "runningTotal", selector: "selector", showGrandTotals: "showGrandTotals", showTotals: "showTotals", showValues: "showValues", sortBy: "sortBy", sortBySummaryField: "sortBySummaryField", sortBySummaryPath: "sortBySummaryPath", sortingMethod: "sortingMethod", sortOrder: "sortOrder", summaryDisplayMode: "summaryDisplayMode", summaryType: "summaryType", visible: "visible", width: "width", wordWrapEnabled: "wordWrapEnabled" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("bD", DxiFieldComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-field', template: '', providers: [NestedOptionHost], inputs: [
                                    'calculateFilterExpression',
                                    'caption',
                                    'customizeText',
                                    'dataField',
                                    'dataType',
                                    'editorOptions',
                                    'editorTemplate',
                                    'falseText',
                                    'filterOperations',
                                    'format',
                                    'lookup',
                                    'name',
                                    'trueText',
                                    'allowCrossGroupCalculation',
                                    'allowExpandAll',
                                    'allowFiltering',
                                    'allowSorting',
                                    'allowSortingBySummary',
                                    'area',
                                    'areaIndex',
                                    'calculateCustomSummary',
                                    'calculateSummaryValue',
                                    'displayFolder',
                                    'expanded',
                                    'filterType',
                                    'filterValues',
                                    'groupIndex',
                                    'groupInterval',
                                    'groupName',
                                    'headerFilter',
                                    'isMeasure',
                                    'precision',
                                    'runningTotal',
                                    'selector',
                                    'showGrandTotals',
                                    'showTotals',
                                    'showValues',
                                    'sortBy',
                                    'sortBySummaryField',
                                    'sortBySummaryPath',
                                    'sortingMethod',
                                    'sortOrder',
                                    'summaryDisplayMode',
                                    'summaryType',
                                    'visible',
                                    'width',
                                    'wordWrapEnabled'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiFieldModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldModule, declarations: [DxiFieldComponent], exports: [DxiFieldComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldModule });
            } exports("bF", DxiFieldModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiFieldComponent
                                ],
                                exports: [
                                    DxiFieldComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoDataSourceComponent extends DxoPivotGridDataSource {
                get _optionPath() {
                    return 'dataSource';
                }
                get fieldsChildren() {
                    return this._getOption('fields');
                }
                set fieldsChildren(value) {
                    this.setChildren('fields', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    if ((console) && (console.warn)) {
                        console.warn('The nested \'dxo-data-source\' component is deprecated in 17.2. ' +
                            'Use the \'dataSource\' option instead. ' +
                            'See:\nhttps://github.com/DevExpress/devextreme-angular/blob/master/CHANGELOG.md#17.2.3');
                    }
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDataSourceComponent, selector: "dxo-data-source", inputs: { fields: "fields", filter: "filter", onChanged: "onChanged", onFieldsPrepared: "onFieldsPrepared", onLoadError: "onLoadError", onLoadingChanged: "onLoadingChanged", remoteOperations: "remoteOperations", retrieveFields: "retrieveFields", store: "store" }, providers: [NestedOptionHost], queries: [{ propertyName: "fieldsChildren", predicate: i0.forwardRef(() => DxiFieldComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-data-source', template: '', providers: [NestedOptionHost], inputs: [
                                    'fields',
                                    'filter',
                                    'onChanged',
                                    'onFieldsPrepared',
                                    'onLoadError',
                                    'onLoadingChanged',
                                    'remoteOperations',
                                    'retrieveFields',
                                    'store'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { fieldsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiFieldComponent)]
                        }] } });
            class DxoDataSourceModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceModule, declarations: [DxoDataSourceComponent], exports: [DxoDataSourceComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceModule });
            } exports("co", DxoDataSourceModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDataSourceComponent
                                ],
                                exports: [
                                    DxoDataSourceComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDefaultItemPropertiesComponent extends NestedOption {
                get connectorLineEnd() {
                    return this._getOption('connectorLineEnd');
                }
                set connectorLineEnd(value) {
                    this._setOption('connectorLineEnd', value);
                }
                get connectorLineStart() {
                    return this._getOption('connectorLineStart');
                }
                set connectorLineStart(value) {
                    this._setOption('connectorLineStart', value);
                }
                get connectorLineType() {
                    return this._getOption('connectorLineType');
                }
                set connectorLineType(value) {
                    this._setOption('connectorLineType', value);
                }
                get shapeMaxHeight() {
                    return this._getOption('shapeMaxHeight');
                }
                set shapeMaxHeight(value) {
                    this._setOption('shapeMaxHeight', value);
                }
                get shapeMaxWidth() {
                    return this._getOption('shapeMaxWidth');
                }
                set shapeMaxWidth(value) {
                    this._setOption('shapeMaxWidth', value);
                }
                get shapeMinHeight() {
                    return this._getOption('shapeMinHeight');
                }
                set shapeMinHeight(value) {
                    this._setOption('shapeMinHeight', value);
                }
                get shapeMinWidth() {
                    return this._getOption('shapeMinWidth');
                }
                set shapeMinWidth(value) {
                    this._setOption('shapeMinWidth', value);
                }
                get style() {
                    return this._getOption('style');
                }
                set style(value) {
                    this._setOption('style', value);
                }
                get textStyle() {
                    return this._getOption('textStyle');
                }
                set textStyle(value) {
                    this._setOption('textStyle', value);
                }
                get _optionPath() {
                    return 'defaultItemProperties';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDefaultItemPropertiesComponent, selector: "dxo-default-item-properties", inputs: { connectorLineEnd: "connectorLineEnd", connectorLineStart: "connectorLineStart", connectorLineType: "connectorLineType", shapeMaxHeight: "shapeMaxHeight", shapeMaxWidth: "shapeMaxWidth", shapeMinHeight: "shapeMinHeight", shapeMinWidth: "shapeMinWidth", style: "style", textStyle: "textStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-default-item-properties', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { connectorLineEnd: [{
                            type: Input
                        }], connectorLineStart: [{
                            type: Input
                        }], connectorLineType: [{
                            type: Input
                        }], shapeMaxHeight: [{
                            type: Input
                        }], shapeMaxWidth: [{
                            type: Input
                        }], shapeMinHeight: [{
                            type: Input
                        }], shapeMinWidth: [{
                            type: Input
                        }], style: [{
                            type: Input
                        }], textStyle: [{
                            type: Input
                        }] } });
            class DxoDefaultItemPropertiesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesModule, declarations: [DxoDefaultItemPropertiesComponent], exports: [DxoDefaultItemPropertiesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesModule });
            } exports("be", DxoDefaultItemPropertiesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDefaultItemPropertiesComponent
                                ],
                                exports: [
                                    DxoDefaultItemPropertiesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDelayComponent extends NestedOption {
                get hide() {
                    return this._getOption('hide');
                }
                set hide(value) {
                    this._setOption('hide', value);
                }
                get show() {
                    return this._getOption('show');
                }
                set show(value) {
                    this._setOption('show', value);
                }
                get _optionPath() {
                    return 'delay';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDelayComponent, selector: "dxo-delay", inputs: { hide: "hide", show: "show" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-delay', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { hide: [{
                            type: Input
                        }], show: [{
                            type: Input
                        }] } });
            class DxoDelayModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayModule, declarations: [DxoDelayComponent], exports: [DxoDelayComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayModule });
            } exports("b5", DxoDelayModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDelayComponent
                                ],
                                exports: [
                                    DxoDelayComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDependenciesComponent extends NestedOption {
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get predecessorIdExpr() {
                    return this._getOption('predecessorIdExpr');
                }
                set predecessorIdExpr(value) {
                    this._setOption('predecessorIdExpr', value);
                }
                get successorIdExpr() {
                    return this._getOption('successorIdExpr');
                }
                set successorIdExpr(value) {
                    this._setOption('successorIdExpr', value);
                }
                get typeExpr() {
                    return this._getOption('typeExpr');
                }
                set typeExpr(value) {
                    this._setOption('typeExpr', value);
                }
                get _optionPath() {
                    return 'dependencies';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDependenciesComponent, selector: "dxo-dependencies", inputs: { dataSource: "dataSource", keyExpr: "keyExpr", predecessorIdExpr: "predecessorIdExpr", successorIdExpr: "successorIdExpr", typeExpr: "typeExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-dependencies', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { dataSource: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], predecessorIdExpr: [{
                            type: Input
                        }], successorIdExpr: [{
                            type: Input
                        }], typeExpr: [{
                            type: Input
                        }] } });
            class DxoDependenciesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesModule, declarations: [DxoDependenciesComponent], exports: [DxoDependenciesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesModule });
            } exports("bS", DxoDependenciesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDependenciesComponent
                                ],
                                exports: [
                                    DxoDependenciesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDetailsComponent extends NestedOption {
                get columns() {
                    return this._getOption('columns');
                }
                set columns(value) {
                    this._setOption('columns', value);
                }
                get _optionPath() {
                    return 'details';
                }
                get columnsChildren() {
                    return this._getOption('columns');
                }
                set columnsChildren(value) {
                    this.setChildren('columns', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDetailsComponent, selector: "dxo-details", inputs: { columns: "columns" }, providers: [NestedOptionHost], queries: [{ propertyName: "columnsChildren", predicate: i0.forwardRef(() => DxiColumnComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-details', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { columns: [{
                            type: Input
                        }], columnsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiColumnComponent)]
                        }] } });
            class DxoDetailsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsModule, declarations: [DxoDetailsComponent], exports: [DxoDetailsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsModule });
            } exports("bv", DxoDetailsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDetailsComponent
                                ],
                                exports: [
                                    DxoDetailsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoDisplayFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'displayFormat';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDisplayFormatComponent, selector: "dxo-display-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-display-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoDisplayFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatModule, declarations: [DxoDisplayFormatComponent], exports: [DxoDisplayFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatModule });
            } exports("b7", DxoDisplayFormatModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDisplayFormatComponent
                                ],
                                exports: [
                                    DxoDisplayFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDragBoxStyleComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'dragBoxStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDragBoxStyleComponent, selector: "dxo-drag-box-style", inputs: { color: "color", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-drag-box-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoDragBoxStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleModule, declarations: [DxoDragBoxStyleComponent], exports: [DxoDragBoxStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleModule });
            } exports("aY", DxoDragBoxStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDragBoxStyleComponent
                                ],
                                exports: [
                                    DxoDragBoxStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPopupOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get animation() {
                    return this._getOption('animation');
                }
                set animation(value) {
                    this._setOption('animation', value);
                }
                get closeOnOutsideClick() {
                    return this._getOption('closeOnOutsideClick');
                }
                set closeOnOutsideClick(value) {
                    this._setOption('closeOnOutsideClick', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get contentTemplate() {
                    return this._getOption('contentTemplate');
                }
                set contentTemplate(value) {
                    this._setOption('contentTemplate', value);
                }
                get deferRendering() {
                    return this._getOption('deferRendering');
                }
                set deferRendering(value) {
                    this._setOption('deferRendering', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get dragAndResizeArea() {
                    return this._getOption('dragAndResizeArea');
                }
                set dragAndResizeArea(value) {
                    this._setOption('dragAndResizeArea', value);
                }
                get dragEnabled() {
                    return this._getOption('dragEnabled');
                }
                set dragEnabled(value) {
                    this._setOption('dragEnabled', value);
                }
                get dragOutsideBoundary() {
                    return this._getOption('dragOutsideBoundary');
                }
                set dragOutsideBoundary(value) {
                    this._setOption('dragOutsideBoundary', value);
                }
                get enableBodyScroll() {
                    return this._getOption('enableBodyScroll');
                }
                set enableBodyScroll(value) {
                    this._setOption('enableBodyScroll', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get fullScreen() {
                    return this._getOption('fullScreen');
                }
                set fullScreen(value) {
                    this._setOption('fullScreen', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hideOnOutsideClick() {
                    return this._getOption('hideOnOutsideClick');
                }
                set hideOnOutsideClick(value) {
                    this._setOption('hideOnOutsideClick', value);
                }
                get hideOnParentScroll() {
                    return this._getOption('hideOnParentScroll');
                }
                set hideOnParentScroll(value) {
                    this._setOption('hideOnParentScroll', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get maxHeight() {
                    return this._getOption('maxHeight');
                }
                set maxHeight(value) {
                    this._setOption('maxHeight', value);
                }
                get maxWidth() {
                    return this._getOption('maxWidth');
                }
                set maxWidth(value) {
                    this._setOption('maxWidth', value);
                }
                get minHeight() {
                    return this._getOption('minHeight');
                }
                set minHeight(value) {
                    this._setOption('minHeight', value);
                }
                get minWidth() {
                    return this._getOption('minWidth');
                }
                set minWidth(value) {
                    this._setOption('minWidth', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onHidden() {
                    return this._getOption('onHidden');
                }
                set onHidden(value) {
                    this._setOption('onHidden', value);
                }
                get onHiding() {
                    return this._getOption('onHiding');
                }
                set onHiding(value) {
                    this._setOption('onHiding', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onResize() {
                    return this._getOption('onResize');
                }
                set onResize(value) {
                    this._setOption('onResize', value);
                }
                get onResizeEnd() {
                    return this._getOption('onResizeEnd');
                }
                set onResizeEnd(value) {
                    this._setOption('onResizeEnd', value);
                }
                get onResizeStart() {
                    return this._getOption('onResizeStart');
                }
                set onResizeStart(value) {
                    this._setOption('onResizeStart', value);
                }
                get onShowing() {
                    return this._getOption('onShowing');
                }
                set onShowing(value) {
                    this._setOption('onShowing', value);
                }
                get onShown() {
                    return this._getOption('onShown');
                }
                set onShown(value) {
                    this._setOption('onShown', value);
                }
                get onTitleRendered() {
                    return this._getOption('onTitleRendered');
                }
                set onTitleRendered(value) {
                    this._setOption('onTitleRendered', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get resizeEnabled() {
                    return this._getOption('resizeEnabled');
                }
                set resizeEnabled(value) {
                    this._setOption('resizeEnabled', value);
                }
                get restorePosition() {
                    return this._getOption('restorePosition');
                }
                set restorePosition(value) {
                    this._setOption('restorePosition', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get shading() {
                    return this._getOption('shading');
                }
                set shading(value) {
                    this._setOption('shading', value);
                }
                get shadingColor() {
                    return this._getOption('shadingColor');
                }
                set shadingColor(value) {
                    this._setOption('shadingColor', value);
                }
                get showCloseButton() {
                    return this._getOption('showCloseButton');
                }
                set showCloseButton(value) {
                    this._setOption('showCloseButton', value);
                }
                get showTitle() {
                    return this._getOption('showTitle');
                }
                set showTitle(value) {
                    this._setOption('showTitle', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get titleTemplate() {
                    return this._getOption('titleTemplate');
                }
                set titleTemplate(value) {
                    this._setOption('titleTemplate', value);
                }
                get toolbarItems() {
                    return this._getOption('toolbarItems');
                }
                set toolbarItems(value) {
                    this._setOption('toolbarItems', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get wrapperAttr() {
                    return this._getOption('wrapperAttr');
                }
                set wrapperAttr(value) {
                    this._setOption('wrapperAttr', value);
                }
                get hideEvent() {
                    return this._getOption('hideEvent');
                }
                set hideEvent(value) {
                    this._setOption('hideEvent', value);
                }
                get showEvent() {
                    return this._getOption('showEvent');
                }
                set showEvent(value) {
                    this._setOption('showEvent', value);
                }
                get target() {
                    return this._getOption('target');
                }
                set target(value) {
                    this._setOption('target', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPopupOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiToolbarItemComponent extends CollectionNestedOption {
                renderer;
                document;
                element;
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get html() {
                    return this._getOption('html');
                }
                set html(value) {
                    this._setOption('html', value);
                }
                get locateInMenu() {
                    return this._getOption('locateInMenu');
                }
                set locateInMenu(value) {
                    this._setOption('locateInMenu', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get menuItemTemplate() {
                    return this._getOption('menuItemTemplate');
                }
                set menuItemTemplate(value) {
                    this._setOption('menuItemTemplate', value);
                }
                get options() {
                    return this._getOption('options');
                }
                set options(value) {
                    this._setOption('options', value);
                }
                get showText() {
                    return this._getOption('showText');
                }
                set showText(value) {
                    this._setOption('showText', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get toolbar() {
                    return this._getOption('toolbar');
                }
                set toolbar(value) {
                    this._setOption('toolbar', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get widget() {
                    return this._getOption('widget');
                }
                set widget(value) {
                    this._setOption('widget', value);
                }
                get _optionPath() {
                    return 'toolbarItems';
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiToolbarItemComponent, selector: "dxi-toolbar-item", inputs: { cssClass: "cssClass", disabled: "disabled", html: "html", locateInMenu: "locateInMenu", location: "location", menuItemTemplate: "menuItemTemplate", options: "options", showText: "showText", template: "template", text: "text", toolbar: "toolbar", visible: "visible", widget: "widget" }, providers: [NestedOptionHost, DxTemplateHost], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            } exports("cw", DxiToolbarItemComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-toolbar-item', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { cssClass: [{
                            type: Input
                        }], disabled: [{
                            type: Input
                        }], html: [{
                            type: Input
                        }], locateInMenu: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }], menuItemTemplate: [{
                            type: Input
                        }], options: [{
                            type: Input
                        }], showText: [{
                            type: Input
                        }], template: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], toolbar: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], widget: [{
                            type: Input
                        }] } });
            class DxiToolbarItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemModule, declarations: [DxiToolbarItemComponent], exports: [DxiToolbarItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemModule });
            } exports("u", DxiToolbarItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiToolbarItemComponent
                                ],
                                exports: [
                                    DxiToolbarItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoDropDownOptionsComponent extends DxoPopupOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                positionChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                get _optionPath() {
                    return 'dropDownOptions';
                }
                get toolbarItemsChildren() {
                    return this._getOption('toolbarItems');
                }
                set toolbarItemsChildren(value) {
                    this.setChildren('toolbarItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'heightChange' },
                        { emit: 'positionChange' },
                        { emit: 'visibleChange' },
                        { emit: 'widthChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDropDownOptionsComponent, selector: "dxo-drop-down-options", inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr", hideEvent: "hideEvent", showEvent: "showEvent", target: "target" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "toolbarItemsChildren", predicate: i0.forwardRef(() => DxiToolbarItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-drop-down-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'animation',
                                    'closeOnOutsideClick',
                                    'container',
                                    'contentTemplate',
                                    'deferRendering',
                                    'disabled',
                                    'dragAndResizeArea',
                                    'dragEnabled',
                                    'dragOutsideBoundary',
                                    'enableBodyScroll',
                                    'focusStateEnabled',
                                    'fullScreen',
                                    'height',
                                    'hideOnOutsideClick',
                                    'hideOnParentScroll',
                                    'hint',
                                    'hoverStateEnabled',
                                    'maxHeight',
                                    'maxWidth',
                                    'minHeight',
                                    'minWidth',
                                    'onContentReady',
                                    'onDisposing',
                                    'onHidden',
                                    'onHiding',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onResize',
                                    'onResizeEnd',
                                    'onResizeStart',
                                    'onShowing',
                                    'onShown',
                                    'onTitleRendered',
                                    'position',
                                    'resizeEnabled',
                                    'restorePosition',
                                    'rtlEnabled',
                                    'shading',
                                    'shadingColor',
                                    'showCloseButton',
                                    'showTitle',
                                    'tabIndex',
                                    'title',
                                    'titleTemplate',
                                    'toolbarItems',
                                    'visible',
                                    'width',
                                    'wrapperAttr',
                                    'hideEvent',
                                    'showEvent',
                                    'target'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { heightChange: [{
                            type: Output
                        }], positionChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], toolbarItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiToolbarItemComponent)]
                        }] } });
            class DxoDropDownOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsModule, declarations: [DxoDropDownOptionsComponent], exports: [DxoDropDownOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsModule });
            } exports("i", DxoDropDownOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDropDownOptionsComponent
                                ],
                                exports: [
                                    DxoDropDownOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoEdgesComponent extends NestedOption {
                get customDataExpr() {
                    return this._getOption('customDataExpr');
                }
                set customDataExpr(value) {
                    this._setOption('customDataExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get fromExpr() {
                    return this._getOption('fromExpr');
                }
                set fromExpr(value) {
                    this._setOption('fromExpr', value);
                }
                get fromLineEndExpr() {
                    return this._getOption('fromLineEndExpr');
                }
                set fromLineEndExpr(value) {
                    this._setOption('fromLineEndExpr', value);
                }
                get fromPointIndexExpr() {
                    return this._getOption('fromPointIndexExpr');
                }
                set fromPointIndexExpr(value) {
                    this._setOption('fromPointIndexExpr', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get lineTypeExpr() {
                    return this._getOption('lineTypeExpr');
                }
                set lineTypeExpr(value) {
                    this._setOption('lineTypeExpr', value);
                }
                get lockedExpr() {
                    return this._getOption('lockedExpr');
                }
                set lockedExpr(value) {
                    this._setOption('lockedExpr', value);
                }
                get pointsExpr() {
                    return this._getOption('pointsExpr');
                }
                set pointsExpr(value) {
                    this._setOption('pointsExpr', value);
                }
                get styleExpr() {
                    return this._getOption('styleExpr');
                }
                set styleExpr(value) {
                    this._setOption('styleExpr', value);
                }
                get textExpr() {
                    return this._getOption('textExpr');
                }
                set textExpr(value) {
                    this._setOption('textExpr', value);
                }
                get textStyleExpr() {
                    return this._getOption('textStyleExpr');
                }
                set textStyleExpr(value) {
                    this._setOption('textStyleExpr', value);
                }
                get toExpr() {
                    return this._getOption('toExpr');
                }
                set toExpr(value) {
                    this._setOption('toExpr', value);
                }
                get toLineEndExpr() {
                    return this._getOption('toLineEndExpr');
                }
                set toLineEndExpr(value) {
                    this._setOption('toLineEndExpr', value);
                }
                get toPointIndexExpr() {
                    return this._getOption('toPointIndexExpr');
                }
                set toPointIndexExpr(value) {
                    this._setOption('toPointIndexExpr', value);
                }
                get zIndexExpr() {
                    return this._getOption('zIndexExpr');
                }
                set zIndexExpr(value) {
                    this._setOption('zIndexExpr', value);
                }
                get _optionPath() {
                    return 'edges';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoEdgesComponent, selector: "dxo-edges", inputs: { customDataExpr: "customDataExpr", dataSource: "dataSource", fromExpr: "fromExpr", fromLineEndExpr: "fromLineEndExpr", fromPointIndexExpr: "fromPointIndexExpr", keyExpr: "keyExpr", lineTypeExpr: "lineTypeExpr", lockedExpr: "lockedExpr", pointsExpr: "pointsExpr", styleExpr: "styleExpr", textExpr: "textExpr", textStyleExpr: "textStyleExpr", toExpr: "toExpr", toLineEndExpr: "toLineEndExpr", toPointIndexExpr: "toPointIndexExpr", zIndexExpr: "zIndexExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-edges', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customDataExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], fromExpr: [{
                            type: Input
                        }], fromLineEndExpr: [{
                            type: Input
                        }], fromPointIndexExpr: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], lineTypeExpr: [{
                            type: Input
                        }], lockedExpr: [{
                            type: Input
                        }], pointsExpr: [{
                            type: Input
                        }], styleExpr: [{
                            type: Input
                        }], textExpr: [{
                            type: Input
                        }], textStyleExpr: [{
                            type: Input
                        }], toExpr: [{
                            type: Input
                        }], toLineEndExpr: [{
                            type: Input
                        }], toPointIndexExpr: [{
                            type: Input
                        }], zIndexExpr: [{
                            type: Input
                        }] } });
            class DxoEdgesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesModule, declarations: [DxoEdgesComponent], exports: [DxoEdgesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesModule });
            } exports("bf", DxoEdgesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoEdgesComponent
                                ],
                                exports: [
                                    DxoEdgesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoEditingComponent extends NestedOption {
                get allowAdding() {
                    return this._getOption('allowAdding');
                }
                set allowAdding(value) {
                    this._setOption('allowAdding', value);
                }
                get allowDeleting() {
                    return this._getOption('allowDeleting');
                }
                set allowDeleting(value) {
                    this._setOption('allowDeleting', value);
                }
                get allowUpdating() {
                    return this._getOption('allowUpdating');
                }
                set allowUpdating(value) {
                    this._setOption('allowUpdating', value);
                }
                get changes() {
                    return this._getOption('changes');
                }
                set changes(value) {
                    this._setOption('changes', value);
                }
                get confirmDelete() {
                    return this._getOption('confirmDelete');
                }
                set confirmDelete(value) {
                    this._setOption('confirmDelete', value);
                }
                get editColumnName() {
                    return this._getOption('editColumnName');
                }
                set editColumnName(value) {
                    this._setOption('editColumnName', value);
                }
                get editRowKey() {
                    return this._getOption('editRowKey');
                }
                set editRowKey(value) {
                    this._setOption('editRowKey', value);
                }
                get form() {
                    return this._getOption('form');
                }
                set form(value) {
                    this._setOption('form', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get newRowPosition() {
                    return this._getOption('newRowPosition');
                }
                set newRowPosition(value) {
                    this._setOption('newRowPosition', value);
                }
                get popup() {
                    return this._getOption('popup');
                }
                set popup(value) {
                    this._setOption('popup', value);
                }
                get refreshMode() {
                    return this._getOption('refreshMode');
                }
                set refreshMode(value) {
                    this._setOption('refreshMode', value);
                }
                get selectTextOnEditStart() {
                    return this._getOption('selectTextOnEditStart');
                }
                set selectTextOnEditStart(value) {
                    this._setOption('selectTextOnEditStart', value);
                }
                get startEditAction() {
                    return this._getOption('startEditAction');
                }
                set startEditAction(value) {
                    this._setOption('startEditAction', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get useIcons() {
                    return this._getOption('useIcons');
                }
                set useIcons(value) {
                    this._setOption('useIcons', value);
                }
                get allowAddShape() {
                    return this._getOption('allowAddShape');
                }
                set allowAddShape(value) {
                    this._setOption('allowAddShape', value);
                }
                get allowChangeConnection() {
                    return this._getOption('allowChangeConnection');
                }
                set allowChangeConnection(value) {
                    this._setOption('allowChangeConnection', value);
                }
                get allowChangeConnectorPoints() {
                    return this._getOption('allowChangeConnectorPoints');
                }
                set allowChangeConnectorPoints(value) {
                    this._setOption('allowChangeConnectorPoints', value);
                }
                get allowChangeConnectorText() {
                    return this._getOption('allowChangeConnectorText');
                }
                set allowChangeConnectorText(value) {
                    this._setOption('allowChangeConnectorText', value);
                }
                get allowChangeShapeText() {
                    return this._getOption('allowChangeShapeText');
                }
                set allowChangeShapeText(value) {
                    this._setOption('allowChangeShapeText', value);
                }
                get allowDeleteConnector() {
                    return this._getOption('allowDeleteConnector');
                }
                set allowDeleteConnector(value) {
                    this._setOption('allowDeleteConnector', value);
                }
                get allowDeleteShape() {
                    return this._getOption('allowDeleteShape');
                }
                set allowDeleteShape(value) {
                    this._setOption('allowDeleteShape', value);
                }
                get allowMoveShape() {
                    return this._getOption('allowMoveShape');
                }
                set allowMoveShape(value) {
                    this._setOption('allowMoveShape', value);
                }
                get allowResizeShape() {
                    return this._getOption('allowResizeShape');
                }
                set allowResizeShape(value) {
                    this._setOption('allowResizeShape', value);
                }
                get allowDependencyAdding() {
                    return this._getOption('allowDependencyAdding');
                }
                set allowDependencyAdding(value) {
                    this._setOption('allowDependencyAdding', value);
                }
                get allowDependencyDeleting() {
                    return this._getOption('allowDependencyDeleting');
                }
                set allowDependencyDeleting(value) {
                    this._setOption('allowDependencyDeleting', value);
                }
                get allowResourceAdding() {
                    return this._getOption('allowResourceAdding');
                }
                set allowResourceAdding(value) {
                    this._setOption('allowResourceAdding', value);
                }
                get allowResourceDeleting() {
                    return this._getOption('allowResourceDeleting');
                }
                set allowResourceDeleting(value) {
                    this._setOption('allowResourceDeleting', value);
                }
                get allowResourceUpdating() {
                    return this._getOption('allowResourceUpdating');
                }
                set allowResourceUpdating(value) {
                    this._setOption('allowResourceUpdating', value);
                }
                get allowTaskAdding() {
                    return this._getOption('allowTaskAdding');
                }
                set allowTaskAdding(value) {
                    this._setOption('allowTaskAdding', value);
                }
                get allowTaskDeleting() {
                    return this._getOption('allowTaskDeleting');
                }
                set allowTaskDeleting(value) {
                    this._setOption('allowTaskDeleting', value);
                }
                get allowTaskResourceUpdating() {
                    return this._getOption('allowTaskResourceUpdating');
                }
                set allowTaskResourceUpdating(value) {
                    this._setOption('allowTaskResourceUpdating', value);
                }
                get allowTaskUpdating() {
                    return this._getOption('allowTaskUpdating');
                }
                set allowTaskUpdating(value) {
                    this._setOption('allowTaskUpdating', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get allowDragging() {
                    return this._getOption('allowDragging');
                }
                set allowDragging(value) {
                    this._setOption('allowDragging', value);
                }
                get allowResizing() {
                    return this._getOption('allowResizing');
                }
                set allowResizing(value) {
                    this._setOption('allowResizing', value);
                }
                get allowTimeZoneEditing() {
                    return this._getOption('allowTimeZoneEditing');
                }
                set allowTimeZoneEditing(value) {
                    this._setOption('allowTimeZoneEditing', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                changesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                editColumnNameChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                editRowKeyChange;
                get _optionPath() {
                    return 'editing';
                }
                get changesChildren() {
                    return this._getOption('changes');
                }
                set changesChildren(value) {
                    this.setChildren('changes', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'changesChange' },
                        { emit: 'editColumnNameChange' },
                        { emit: 'editRowKeyChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoEditingComponent, selector: "dxo-editing", inputs: { allowAdding: "allowAdding", allowDeleting: "allowDeleting", allowUpdating: "allowUpdating", changes: "changes", confirmDelete: "confirmDelete", editColumnName: "editColumnName", editRowKey: "editRowKey", form: "form", mode: "mode", newRowPosition: "newRowPosition", popup: "popup", refreshMode: "refreshMode", selectTextOnEditStart: "selectTextOnEditStart", startEditAction: "startEditAction", texts: "texts", useIcons: "useIcons", allowAddShape: "allowAddShape", allowChangeConnection: "allowChangeConnection", allowChangeConnectorPoints: "allowChangeConnectorPoints", allowChangeConnectorText: "allowChangeConnectorText", allowChangeShapeText: "allowChangeShapeText", allowDeleteConnector: "allowDeleteConnector", allowDeleteShape: "allowDeleteShape", allowMoveShape: "allowMoveShape", allowResizeShape: "allowResizeShape", allowDependencyAdding: "allowDependencyAdding", allowDependencyDeleting: "allowDependencyDeleting", allowResourceAdding: "allowResourceAdding", allowResourceDeleting: "allowResourceDeleting", allowResourceUpdating: "allowResourceUpdating", allowTaskAdding: "allowTaskAdding", allowTaskDeleting: "allowTaskDeleting", allowTaskResourceUpdating: "allowTaskResourceUpdating", allowTaskUpdating: "allowTaskUpdating", enabled: "enabled", allowDragging: "allowDragging", allowResizing: "allowResizing", allowTimeZoneEditing: "allowTimeZoneEditing" }, outputs: { changesChange: "changesChange", editColumnNameChange: "editColumnNameChange", editRowKeyChange: "editRowKeyChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "changesChildren", predicate: i0.forwardRef(() => DxiChangeComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-editing', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowAdding: [{
                            type: Input
                        }], allowDeleting: [{
                            type: Input
                        }], allowUpdating: [{
                            type: Input
                        }], changes: [{
                            type: Input
                        }], confirmDelete: [{
                            type: Input
                        }], editColumnName: [{
                            type: Input
                        }], editRowKey: [{
                            type: Input
                        }], form: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], newRowPosition: [{
                            type: Input
                        }], popup: [{
                            type: Input
                        }], refreshMode: [{
                            type: Input
                        }], selectTextOnEditStart: [{
                            type: Input
                        }], startEditAction: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], useIcons: [{
                            type: Input
                        }], allowAddShape: [{
                            type: Input
                        }], allowChangeConnection: [{
                            type: Input
                        }], allowChangeConnectorPoints: [{
                            type: Input
                        }], allowChangeConnectorText: [{
                            type: Input
                        }], allowChangeShapeText: [{
                            type: Input
                        }], allowDeleteConnector: [{
                            type: Input
                        }], allowDeleteShape: [{
                            type: Input
                        }], allowMoveShape: [{
                            type: Input
                        }], allowResizeShape: [{
                            type: Input
                        }], allowDependencyAdding: [{
                            type: Input
                        }], allowDependencyDeleting: [{
                            type: Input
                        }], allowResourceAdding: [{
                            type: Input
                        }], allowResourceDeleting: [{
                            type: Input
                        }], allowResourceUpdating: [{
                            type: Input
                        }], allowTaskAdding: [{
                            type: Input
                        }], allowTaskDeleting: [{
                            type: Input
                        }], allowTaskResourceUpdating: [{
                            type: Input
                        }], allowTaskUpdating: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], allowDragging: [{
                            type: Input
                        }], allowResizing: [{
                            type: Input
                        }], allowTimeZoneEditing: [{
                            type: Input
                        }], changesChange: [{
                            type: Output
                        }], editColumnNameChange: [{
                            type: Output
                        }], editRowKeyChange: [{
                            type: Output
                        }], changesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiChangeComponent)]
                        }] } });
            class DxoEditingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingModule, declarations: [DxoEditingComponent], exports: [DxoEditingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingModule });
            } exports("bg", DxoEditingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoEditingComponent
                                ],
                                exports: [
                                    DxoEditingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoExportComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get fileName() {
                    return this._getOption('fileName');
                }
                set fileName(value) {
                    this._setOption('fileName', value);
                }
                get formats() {
                    return this._getOption('formats');
                }
                set formats(value) {
                    this._setOption('formats', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get printingEnabled() {
                    return this._getOption('printingEnabled');
                }
                set printingEnabled(value) {
                    this._setOption('printingEnabled', value);
                }
                get svgToCanvas() {
                    return this._getOption('svgToCanvas');
                }
                set svgToCanvas(value) {
                    this._setOption('svgToCanvas', value);
                }
                get allowExportSelectedData() {
                    return this._getOption('allowExportSelectedData');
                }
                set allowExportSelectedData(value) {
                    this._setOption('allowExportSelectedData', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get _optionPath() {
                    return 'export';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoExportComponent, selector: "dxo-export", inputs: { backgroundColor: "backgroundColor", enabled: "enabled", fileName: "fileName", formats: "formats", margin: "margin", printingEnabled: "printingEnabled", svgToCanvas: "svgToCanvas", allowExportSelectedData: "allowExportSelectedData", texts: "texts" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-export', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], fileName: [{
                            type: Input
                        }], formats: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], printingEnabled: [{
                            type: Input
                        }], svgToCanvas: [{
                            type: Input
                        }], allowExportSelectedData: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }] } });
            class DxoExportModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoExportModule, declarations: [DxoExportComponent], exports: [DxoExportComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportModule });
            } exports("v", DxoExportModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoExportComponent
                                ],
                                exports: [
                                    DxoExportComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFieldChooserComponent extends NestedOption {
                get allowSearch() {
                    return this._getOption('allowSearch');
                }
                set allowSearch(value) {
                    this._setOption('allowSearch', value);
                }
                get applyChangesMode() {
                    return this._getOption('applyChangesMode');
                }
                set applyChangesMode(value) {
                    this._setOption('applyChangesMode', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get layout() {
                    return this._getOption('layout');
                }
                set layout(value) {
                    this._setOption('layout', value);
                }
                get searchTimeout() {
                    return this._getOption('searchTimeout');
                }
                set searchTimeout(value) {
                    this._setOption('searchTimeout', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'fieldChooser';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFieldChooserComponent, selector: "dxo-field-chooser", inputs: { allowSearch: "allowSearch", applyChangesMode: "applyChangesMode", enabled: "enabled", height: "height", layout: "layout", searchTimeout: "searchTimeout", texts: "texts", title: "title", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-field-chooser', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowSearch: [{
                            type: Input
                        }], applyChangesMode: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], layout: [{
                            type: Input
                        }], searchTimeout: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoFieldChooserModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserModule, declarations: [DxoFieldChooserComponent], exports: [DxoFieldChooserComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserModule });
            } exports("cq", DxoFieldChooserModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFieldChooserComponent
                                ],
                                exports: [
                                    DxoFieldChooserComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFieldPanelComponent extends NestedOption {
                get allowFieldDragging() {
                    return this._getOption('allowFieldDragging');
                }
                set allowFieldDragging(value) {
                    this._setOption('allowFieldDragging', value);
                }
                get showColumnFields() {
                    return this._getOption('showColumnFields');
                }
                set showColumnFields(value) {
                    this._setOption('showColumnFields', value);
                }
                get showDataFields() {
                    return this._getOption('showDataFields');
                }
                set showDataFields(value) {
                    this._setOption('showDataFields', value);
                }
                get showFilterFields() {
                    return this._getOption('showFilterFields');
                }
                set showFilterFields(value) {
                    this._setOption('showFilterFields', value);
                }
                get showRowFields() {
                    return this._getOption('showRowFields');
                }
                set showRowFields(value) {
                    this._setOption('showRowFields', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'fieldPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFieldPanelComponent, selector: "dxo-field-panel", inputs: { allowFieldDragging: "allowFieldDragging", showColumnFields: "showColumnFields", showDataFields: "showDataFields", showFilterFields: "showFilterFields", showRowFields: "showRowFields", texts: "texts", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-field-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowFieldDragging: [{
                            type: Input
                        }], showColumnFields: [{
                            type: Input
                        }], showDataFields: [{
                            type: Input
                        }], showFilterFields: [{
                            type: Input
                        }], showRowFields: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoFieldPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelModule, declarations: [DxoFieldPanelComponent], exports: [DxoFieldPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelModule });
            } exports("cr", DxoFieldPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFieldPanelComponent
                                ],
                                exports: [
                                    DxoFieldPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiFileManagerToolbarItem extends CollectionNestedOption {
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get locateInMenu() {
                    return this._getOption('locateInMenu');
                }
                set locateInMenu(value) {
                    this._setOption('locateInMenu', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get options() {
                    return this._getOption('options');
                }
                set options(value) {
                    this._setOption('options', value);
                }
                get showText() {
                    return this._getOption('showText');
                }
                set showText(value) {
                    this._setOption('showText', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get widget() {
                    return this._getOption('widget');
                }
                set widget(value) {
                    this._setOption('widget', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileManagerToolbarItem, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFileManagerToolbarItem, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileManagerToolbarItem, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiFileSelectionItemComponent extends DxiFileManagerToolbarItem {
                get _optionPath() {
                    return 'fileSelectionItems';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFileSelectionItemComponent, selector: "dxi-file-selection-item", inputs: { cssClass: "cssClass", disabled: "disabled", icon: "icon", locateInMenu: "locateInMenu", location: "location", name: "name", options: "options", showText: "showText", text: "text", visible: "visible", widget: "widget" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-file-selection-item', template: '', providers: [NestedOptionHost], inputs: [
                                    'cssClass',
                                    'disabled',
                                    'icon',
                                    'locateInMenu',
                                    'location',
                                    'name',
                                    'options',
                                    'showText',
                                    'text',
                                    'visible',
                                    'widget'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiFileSelectionItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemModule, declarations: [DxiFileSelectionItemComponent], exports: [DxiFileSelectionItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemModule });
            } exports("bA", DxiFileSelectionItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiFileSelectionItemComponent
                                ],
                                exports: [
                                    DxiFileSelectionItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFileUploaderOptions extends NestedOption {
                get abortUpload() {
                    return this._getOption('abortUpload');
                }
                set abortUpload(value) {
                    this._setOption('abortUpload', value);
                }
                get accept() {
                    return this._getOption('accept');
                }
                set accept(value) {
                    this._setOption('accept', value);
                }
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get allowCanceling() {
                    return this._getOption('allowCanceling');
                }
                set allowCanceling(value) {
                    this._setOption('allowCanceling', value);
                }
                get allowedFileExtensions() {
                    return this._getOption('allowedFileExtensions');
                }
                set allowedFileExtensions(value) {
                    this._setOption('allowedFileExtensions', value);
                }
                get chunkSize() {
                    return this._getOption('chunkSize');
                }
                set chunkSize(value) {
                    this._setOption('chunkSize', value);
                }
                get dialogTrigger() {
                    return this._getOption('dialogTrigger');
                }
                set dialogTrigger(value) {
                    this._setOption('dialogTrigger', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get dropZone() {
                    return this._getOption('dropZone');
                }
                set dropZone(value) {
                    this._setOption('dropZone', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get inputAttr() {
                    return this._getOption('inputAttr');
                }
                set inputAttr(value) {
                    this._setOption('inputAttr', value);
                }
                get invalidFileExtensionMessage() {
                    return this._getOption('invalidFileExtensionMessage');
                }
                set invalidFileExtensionMessage(value) {
                    this._setOption('invalidFileExtensionMessage', value);
                }
                get invalidMaxFileSizeMessage() {
                    return this._getOption('invalidMaxFileSizeMessage');
                }
                set invalidMaxFileSizeMessage(value) {
                    this._setOption('invalidMaxFileSizeMessage', value);
                }
                get invalidMinFileSizeMessage() {
                    return this._getOption('invalidMinFileSizeMessage');
                }
                set invalidMinFileSizeMessage(value) {
                    this._setOption('invalidMinFileSizeMessage', value);
                }
                get isDirty() {
                    return this._getOption('isDirty');
                }
                set isDirty(value) {
                    this._setOption('isDirty', value);
                }
                get isValid() {
                    return this._getOption('isValid');
                }
                set isValid(value) {
                    this._setOption('isValid', value);
                }
                get labelText() {
                    return this._getOption('labelText');
                }
                set labelText(value) {
                    this._setOption('labelText', value);
                }
                get maxFileSize() {
                    return this._getOption('maxFileSize');
                }
                set maxFileSize(value) {
                    this._setOption('maxFileSize', value);
                }
                get minFileSize() {
                    return this._getOption('minFileSize');
                }
                set minFileSize(value) {
                    this._setOption('minFileSize', value);
                }
                get multiple() {
                    return this._getOption('multiple');
                }
                set multiple(value) {
                    this._setOption('multiple', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get onBeforeSend() {
                    return this._getOption('onBeforeSend');
                }
                set onBeforeSend(value) {
                    this._setOption('onBeforeSend', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onDropZoneEnter() {
                    return this._getOption('onDropZoneEnter');
                }
                set onDropZoneEnter(value) {
                    this._setOption('onDropZoneEnter', value);
                }
                get onDropZoneLeave() {
                    return this._getOption('onDropZoneLeave');
                }
                set onDropZoneLeave(value) {
                    this._setOption('onDropZoneLeave', value);
                }
                get onFilesUploaded() {
                    return this._getOption('onFilesUploaded');
                }
                set onFilesUploaded(value) {
                    this._setOption('onFilesUploaded', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onProgress() {
                    return this._getOption('onProgress');
                }
                set onProgress(value) {
                    this._setOption('onProgress', value);
                }
                get onUploadAborted() {
                    return this._getOption('onUploadAborted');
                }
                set onUploadAborted(value) {
                    this._setOption('onUploadAborted', value);
                }
                get onUploaded() {
                    return this._getOption('onUploaded');
                }
                set onUploaded(value) {
                    this._setOption('onUploaded', value);
                }
                get onUploadError() {
                    return this._getOption('onUploadError');
                }
                set onUploadError(value) {
                    this._setOption('onUploadError', value);
                }
                get onUploadStarted() {
                    return this._getOption('onUploadStarted');
                }
                set onUploadStarted(value) {
                    this._setOption('onUploadStarted', value);
                }
                get onValueChanged() {
                    return this._getOption('onValueChanged');
                }
                set onValueChanged(value) {
                    this._setOption('onValueChanged', value);
                }
                get progress() {
                    return this._getOption('progress');
                }
                set progress(value) {
                    this._setOption('progress', value);
                }
                get readOnly() {
                    return this._getOption('readOnly');
                }
                set readOnly(value) {
                    this._setOption('readOnly', value);
                }
                get readyToUploadMessage() {
                    return this._getOption('readyToUploadMessage');
                }
                set readyToUploadMessage(value) {
                    this._setOption('readyToUploadMessage', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get selectButtonText() {
                    return this._getOption('selectButtonText');
                }
                set selectButtonText(value) {
                    this._setOption('selectButtonText', value);
                }
                get showFileList() {
                    return this._getOption('showFileList');
                }
                set showFileList(value) {
                    this._setOption('showFileList', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get uploadAbortedMessage() {
                    return this._getOption('uploadAbortedMessage');
                }
                set uploadAbortedMessage(value) {
                    this._setOption('uploadAbortedMessage', value);
                }
                get uploadButtonText() {
                    return this._getOption('uploadButtonText');
                }
                set uploadButtonText(value) {
                    this._setOption('uploadButtonText', value);
                }
                get uploadChunk() {
                    return this._getOption('uploadChunk');
                }
                set uploadChunk(value) {
                    this._setOption('uploadChunk', value);
                }
                get uploadCustomData() {
                    return this._getOption('uploadCustomData');
                }
                set uploadCustomData(value) {
                    this._setOption('uploadCustomData', value);
                }
                get uploadedMessage() {
                    return this._getOption('uploadedMessage');
                }
                set uploadedMessage(value) {
                    this._setOption('uploadedMessage', value);
                }
                get uploadFailedMessage() {
                    return this._getOption('uploadFailedMessage');
                }
                set uploadFailedMessage(value) {
                    this._setOption('uploadFailedMessage', value);
                }
                get uploadFile() {
                    return this._getOption('uploadFile');
                }
                set uploadFile(value) {
                    this._setOption('uploadFile', value);
                }
                get uploadHeaders() {
                    return this._getOption('uploadHeaders');
                }
                set uploadHeaders(value) {
                    this._setOption('uploadHeaders', value);
                }
                get uploadMethod() {
                    return this._getOption('uploadMethod');
                }
                set uploadMethod(value) {
                    this._setOption('uploadMethod', value);
                }
                get uploadMode() {
                    return this._getOption('uploadMode');
                }
                set uploadMode(value) {
                    this._setOption('uploadMode', value);
                }
                get uploadUrl() {
                    return this._getOption('uploadUrl');
                }
                set uploadUrl(value) {
                    this._setOption('uploadUrl', value);
                }
                get validationError() {
                    return this._getOption('validationError');
                }
                set validationError(value) {
                    this._setOption('validationError', value);
                }
                get validationErrors() {
                    return this._getOption('validationErrors');
                }
                set validationErrors(value) {
                    this._setOption('validationErrors', value);
                }
                get validationStatus() {
                    return this._getOption('validationStatus');
                }
                set validationStatus(value) {
                    this._setOption('validationStatus', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFileUploaderOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFileUploaderOptionsComponent extends DxoFileUploaderOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'fileUploaderOptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFileUploaderOptionsComponent, selector: "dxo-file-uploader-options", inputs: { abortUpload: "abortUpload", accept: "accept", accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowCanceling: "allowCanceling", allowedFileExtensions: "allowedFileExtensions", chunkSize: "chunkSize", dialogTrigger: "dialogTrigger", disabled: "disabled", dropZone: "dropZone", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", invalidFileExtensionMessage: "invalidFileExtensionMessage", invalidMaxFileSizeMessage: "invalidMaxFileSizeMessage", invalidMinFileSizeMessage: "invalidMinFileSizeMessage", isDirty: "isDirty", isValid: "isValid", labelText: "labelText", maxFileSize: "maxFileSize", minFileSize: "minFileSize", multiple: "multiple", name: "name", onBeforeSend: "onBeforeSend", onContentReady: "onContentReady", onDisposing: "onDisposing", onDropZoneEnter: "onDropZoneEnter", onDropZoneLeave: "onDropZoneLeave", onFilesUploaded: "onFilesUploaded", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onProgress: "onProgress", onUploadAborted: "onUploadAborted", onUploaded: "onUploaded", onUploadError: "onUploadError", onUploadStarted: "onUploadStarted", onValueChanged: "onValueChanged", progress: "progress", readOnly: "readOnly", readyToUploadMessage: "readyToUploadMessage", rtlEnabled: "rtlEnabled", selectButtonText: "selectButtonText", showFileList: "showFileList", tabIndex: "tabIndex", uploadAbortedMessage: "uploadAbortedMessage", uploadButtonText: "uploadButtonText", uploadChunk: "uploadChunk", uploadCustomData: "uploadCustomData", uploadedMessage: "uploadedMessage", uploadFailedMessage: "uploadFailedMessage", uploadFile: "uploadFile", uploadHeaders: "uploadHeaders", uploadMethod: "uploadMethod", uploadMode: "uploadMode", uploadUrl: "uploadUrl", validationError: "validationError", validationErrors: "validationErrors", validationStatus: "validationStatus", value: "value", visible: "visible", width: "width" }, outputs: { valueChange: "valueChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-file-uploader-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'abortUpload',
                                    'accept',
                                    'accessKey',
                                    'activeStateEnabled',
                                    'allowCanceling',
                                    'allowedFileExtensions',
                                    'chunkSize',
                                    'dialogTrigger',
                                    'disabled',
                                    'dropZone',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'inputAttr',
                                    'invalidFileExtensionMessage',
                                    'invalidMaxFileSizeMessage',
                                    'invalidMinFileSizeMessage',
                                    'isDirty',
                                    'isValid',
                                    'labelText',
                                    'maxFileSize',
                                    'minFileSize',
                                    'multiple',
                                    'name',
                                    'onBeforeSend',
                                    'onContentReady',
                                    'onDisposing',
                                    'onDropZoneEnter',
                                    'onDropZoneLeave',
                                    'onFilesUploaded',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onProgress',
                                    'onUploadAborted',
                                    'onUploaded',
                                    'onUploadError',
                                    'onUploadStarted',
                                    'onValueChanged',
                                    'progress',
                                    'readOnly',
                                    'readyToUploadMessage',
                                    'rtlEnabled',
                                    'selectButtonText',
                                    'showFileList',
                                    'tabIndex',
                                    'uploadAbortedMessage',
                                    'uploadButtonText',
                                    'uploadChunk',
                                    'uploadCustomData',
                                    'uploadedMessage',
                                    'uploadFailedMessage',
                                    'uploadFile',
                                    'uploadHeaders',
                                    'uploadMethod',
                                    'uploadMode',
                                    'uploadUrl',
                                    'validationError',
                                    'validationErrors',
                                    'validationStatus',
                                    'value',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { valueChange: [{
                            type: Output
                        }] } });
            class DxoFileUploaderOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsModule, declarations: [DxoFileUploaderOptionsComponent], exports: [DxoFileUploaderOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsModule });
            } exports("c3", DxoFileUploaderOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFileUploaderOptionsComponent
                                ],
                                exports: [
                                    DxoFileUploaderOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFilterBuilderPopupComponent extends DxoPopupOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                positionChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                get _optionPath() {
                    return 'filterBuilderPopup';
                }
                get toolbarItemsChildren() {
                    return this._getOption('toolbarItems');
                }
                set toolbarItemsChildren(value) {
                    this.setChildren('toolbarItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'heightChange' },
                        { emit: 'positionChange' },
                        { emit: 'visibleChange' },
                        { emit: 'widthChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterBuilderPopupComponent, selector: "dxo-filter-builder-popup", inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "toolbarItemsChildren", predicate: i0.forwardRef(() => DxiToolbarItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-filter-builder-popup', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'animation',
                                    'closeOnOutsideClick',
                                    'container',
                                    'contentTemplate',
                                    'deferRendering',
                                    'disabled',
                                    'dragAndResizeArea',
                                    'dragEnabled',
                                    'dragOutsideBoundary',
                                    'enableBodyScroll',
                                    'focusStateEnabled',
                                    'fullScreen',
                                    'height',
                                    'hideOnOutsideClick',
                                    'hideOnParentScroll',
                                    'hint',
                                    'hoverStateEnabled',
                                    'maxHeight',
                                    'maxWidth',
                                    'minHeight',
                                    'minWidth',
                                    'onContentReady',
                                    'onDisposing',
                                    'onHidden',
                                    'onHiding',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onResize',
                                    'onResizeEnd',
                                    'onResizeStart',
                                    'onShowing',
                                    'onShown',
                                    'onTitleRendered',
                                    'position',
                                    'resizeEnabled',
                                    'restorePosition',
                                    'rtlEnabled',
                                    'shading',
                                    'shadingColor',
                                    'showCloseButton',
                                    'showTitle',
                                    'tabIndex',
                                    'title',
                                    'titleTemplate',
                                    'toolbarItems',
                                    'visible',
                                    'width',
                                    'wrapperAttr'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { heightChange: [{
                            type: Output
                        }], positionChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], toolbarItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiToolbarItemComponent)]
                        }] } });
            class DxoFilterBuilderPopupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupModule, declarations: [DxoFilterBuilderPopupComponent], exports: [DxoFilterBuilderPopupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupModule });
            } exports("c$", DxoFilterBuilderPopupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterBuilderPopupComponent
                                ],
                                exports: [
                                    DxoFilterBuilderPopupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFilterBuilderOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get allowHierarchicalFields() {
                    return this._getOption('allowHierarchicalFields');
                }
                set allowHierarchicalFields(value) {
                    this._setOption('allowHierarchicalFields', value);
                }
                get customOperations() {
                    return this._getOption('customOperations');
                }
                set customOperations(value) {
                    this._setOption('customOperations', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get fields() {
                    return this._getOption('fields');
                }
                set fields(value) {
                    this._setOption('fields', value);
                }
                get filterOperationDescriptions() {
                    return this._getOption('filterOperationDescriptions');
                }
                set filterOperationDescriptions(value) {
                    this._setOption('filterOperationDescriptions', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get groupOperationDescriptions() {
                    return this._getOption('groupOperationDescriptions');
                }
                set groupOperationDescriptions(value) {
                    this._setOption('groupOperationDescriptions', value);
                }
                get groupOperations() {
                    return this._getOption('groupOperations');
                }
                set groupOperations(value) {
                    this._setOption('groupOperations', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get maxGroupLevel() {
                    return this._getOption('maxGroupLevel');
                }
                set maxGroupLevel(value) {
                    this._setOption('maxGroupLevel', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onEditorPrepared() {
                    return this._getOption('onEditorPrepared');
                }
                set onEditorPrepared(value) {
                    this._setOption('onEditorPrepared', value);
                }
                get onEditorPreparing() {
                    return this._getOption('onEditorPreparing');
                }
                set onEditorPreparing(value) {
                    this._setOption('onEditorPreparing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onValueChanged() {
                    return this._getOption('onValueChanged');
                }
                set onValueChanged(value) {
                    this._setOption('onValueChanged', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterBuilderOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFilterBuilderComponent extends DxoFilterBuilderOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'filterBuilder';
                }
                get customOperationsChildren() {
                    return this._getOption('customOperations');
                }
                set customOperationsChildren(value) {
                    this.setChildren('customOperations', value);
                }
                get fieldsChildren() {
                    return this._getOption('fields');
                }
                set fieldsChildren(value) {
                    this.setChildren('fields', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterBuilderComponent, selector: "dxo-filter-builder", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowHierarchicalFields: "allowHierarchicalFields", customOperations: "customOperations", disabled: "disabled", elementAttr: "elementAttr", fields: "fields", filterOperationDescriptions: "filterOperationDescriptions", focusStateEnabled: "focusStateEnabled", groupOperationDescriptions: "groupOperationDescriptions", groupOperations: "groupOperations", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxGroupLevel: "maxGroupLevel", onContentReady: "onContentReady", onDisposing: "onDisposing", onEditorPrepared: "onEditorPrepared", onEditorPreparing: "onEditorPreparing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onValueChanged: "onValueChanged", rtlEnabled: "rtlEnabled", tabIndex: "tabIndex", value: "value", visible: "visible", width: "width" }, outputs: { valueChange: "valueChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "customOperationsChildren", predicate: i0.forwardRef(() => DxiCustomOperationComponent) }, { propertyName: "fieldsChildren", predicate: i0.forwardRef(() => DxiFieldComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-filter-builder', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'allowHierarchicalFields',
                                    'customOperations',
                                    'disabled',
                                    'elementAttr',
                                    'fields',
                                    'filterOperationDescriptions',
                                    'focusStateEnabled',
                                    'groupOperationDescriptions',
                                    'groupOperations',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'maxGroupLevel',
                                    'onContentReady',
                                    'onDisposing',
                                    'onEditorPrepared',
                                    'onEditorPreparing',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onValueChanged',
                                    'rtlEnabled',
                                    'tabIndex',
                                    'value',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { valueChange: [{
                            type: Output
                        }], customOperationsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCustomOperationComponent)]
                        }], fieldsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiFieldComponent)]
                        }] } });
            class DxoFilterBuilderModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderModule, declarations: [DxoFilterBuilderComponent], exports: [DxoFilterBuilderComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderModule });
            } exports("c_", DxoFilterBuilderModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterBuilderComponent
                                ],
                                exports: [
                                    DxoFilterBuilderComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFilterOperationDescriptionsComponent extends NestedOption {
                get between() {
                    return this._getOption('between');
                }
                set between(value) {
                    this._setOption('between', value);
                }
                get contains() {
                    return this._getOption('contains');
                }
                set contains(value) {
                    this._setOption('contains', value);
                }
                get endsWith() {
                    return this._getOption('endsWith');
                }
                set endsWith(value) {
                    this._setOption('endsWith', value);
                }
                get equal() {
                    return this._getOption('equal');
                }
                set equal(value) {
                    this._setOption('equal', value);
                }
                get greaterThan() {
                    return this._getOption('greaterThan');
                }
                set greaterThan(value) {
                    this._setOption('greaterThan', value);
                }
                get greaterThanOrEqual() {
                    return this._getOption('greaterThanOrEqual');
                }
                set greaterThanOrEqual(value) {
                    this._setOption('greaterThanOrEqual', value);
                }
                get isBlank() {
                    return this._getOption('isBlank');
                }
                set isBlank(value) {
                    this._setOption('isBlank', value);
                }
                get isNotBlank() {
                    return this._getOption('isNotBlank');
                }
                set isNotBlank(value) {
                    this._setOption('isNotBlank', value);
                }
                get lessThan() {
                    return this._getOption('lessThan');
                }
                set lessThan(value) {
                    this._setOption('lessThan', value);
                }
                get lessThanOrEqual() {
                    return this._getOption('lessThanOrEqual');
                }
                set lessThanOrEqual(value) {
                    this._setOption('lessThanOrEqual', value);
                }
                get notContains() {
                    return this._getOption('notContains');
                }
                set notContains(value) {
                    this._setOption('notContains', value);
                }
                get notEqual() {
                    return this._getOption('notEqual');
                }
                set notEqual(value) {
                    this._setOption('notEqual', value);
                }
                get startsWith() {
                    return this._getOption('startsWith');
                }
                set startsWith(value) {
                    this._setOption('startsWith', value);
                }
                get _optionPath() {
                    return 'filterOperationDescriptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterOperationDescriptionsComponent, selector: "dxo-filter-operation-descriptions", inputs: { between: "between", contains: "contains", endsWith: "endsWith", equal: "equal", greaterThan: "greaterThan", greaterThanOrEqual: "greaterThanOrEqual", isBlank: "isBlank", isNotBlank: "isNotBlank", lessThan: "lessThan", lessThanOrEqual: "lessThanOrEqual", notContains: "notContains", notEqual: "notEqual", startsWith: "startsWith" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-filter-operation-descriptions', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { between: [{
                            type: Input
                        }], contains: [{
                            type: Input
                        }], endsWith: [{
                            type: Input
                        }], equal: [{
                            type: Input
                        }], greaterThan: [{
                            type: Input
                        }], greaterThanOrEqual: [{
                            type: Input
                        }], isBlank: [{
                            type: Input
                        }], isNotBlank: [{
                            type: Input
                        }], lessThan: [{
                            type: Input
                        }], lessThanOrEqual: [{
                            type: Input
                        }], notContains: [{
                            type: Input
                        }], notEqual: [{
                            type: Input
                        }], startsWith: [{
                            type: Input
                        }] } });
            class DxoFilterOperationDescriptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsModule, declarations: [DxoFilterOperationDescriptionsComponent], exports: [DxoFilterOperationDescriptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsModule });
            } exports("bH", DxoFilterOperationDescriptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterOperationDescriptionsComponent
                                ],
                                exports: [
                                    DxoFilterOperationDescriptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFilterPanelComponent extends NestedOption {
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get filterEnabled() {
                    return this._getOption('filterEnabled');
                }
                set filterEnabled(value) {
                    this._setOption('filterEnabled', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterEnabledChange;
                get _optionPath() {
                    return 'filterPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'filterEnabledChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterPanelComponent, selector: "dxo-filter-panel", inputs: { customizeText: "customizeText", filterEnabled: "filterEnabled", texts: "texts", visible: "visible" }, outputs: { filterEnabledChange: "filterEnabledChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-filter-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customizeText: [{
                            type: Input
                        }], filterEnabled: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], filterEnabledChange: [{
                            type: Output
                        }] } });
            class DxoFilterPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelModule, declarations: [DxoFilterPanelComponent], exports: [DxoFilterPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelModule });
            } exports("d0", DxoFilterPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterPanelComponent
                                ],
                                exports: [
                                    DxoFilterPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttFilterRow extends NestedOption {
                get applyFilter() {
                    return this._getOption('applyFilter');
                }
                set applyFilter(value) {
                    this._setOption('applyFilter', value);
                }
                get applyFilterText() {
                    return this._getOption('applyFilterText');
                }
                set applyFilterText(value) {
                    this._setOption('applyFilterText', value);
                }
                get betweenEndText() {
                    return this._getOption('betweenEndText');
                }
                set betweenEndText(value) {
                    this._setOption('betweenEndText', value);
                }
                get betweenStartText() {
                    return this._getOption('betweenStartText');
                }
                set betweenStartText(value) {
                    this._setOption('betweenStartText', value);
                }
                get operationDescriptions() {
                    return this._getOption('operationDescriptions');
                }
                set operationDescriptions(value) {
                    this._setOption('operationDescriptions', value);
                }
                get resetOperationText() {
                    return this._getOption('resetOperationText');
                }
                set resetOperationText(value) {
                    this._setOption('resetOperationText', value);
                }
                get showAllText() {
                    return this._getOption('showAllText');
                }
                set showAllText(value) {
                    this._setOption('showAllText', value);
                }
                get showOperationChooser() {
                    return this._getOption('showOperationChooser');
                }
                set showOperationChooser(value) {
                    this._setOption('showOperationChooser', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttFilterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttFilterRow, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttFilterRow, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFilterRowComponent extends DxoGanttFilterRow {
                get _optionPath() {
                    return 'filterRow';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterRowComponent, selector: "dxo-filter-row", inputs: { applyFilter: "applyFilter", applyFilterText: "applyFilterText", betweenEndText: "betweenEndText", betweenStartText: "betweenStartText", operationDescriptions: "operationDescriptions", resetOperationText: "resetOperationText", showAllText: "showAllText", showOperationChooser: "showOperationChooser", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-filter-row', template: '', providers: [NestedOptionHost], inputs: [
                                    'applyFilter',
                                    'applyFilterText',
                                    'betweenEndText',
                                    'betweenStartText',
                                    'operationDescriptions',
                                    'resetOperationText',
                                    'showAllText',
                                    'showOperationChooser',
                                    'visible'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFilterRowModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowModule, declarations: [DxoFilterRowComponent], exports: [DxoFilterRowComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowModule });
            } exports("bT", DxoFilterRowModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterRowComponent
                                ],
                                exports: [
                                    DxoFilterRowComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoVizFont extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get family() {
                    return this._getOption('family');
                }
                set family(value) {
                    this._setOption('family', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get weight() {
                    return this._getOption('weight');
                }
                set weight(value) {
                    this._setOption('weight', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVizFont, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoVizFont, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVizFont, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFontComponent extends DxoVizFont {
                get _optionPath() {
                    return 'font';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFontComponent, selector: "dxo-font", inputs: { color: "color", family: "family", opacity: "opacity", size: "size", weight: "weight" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-font', template: '', providers: [NestedOptionHost], inputs: [
                                    'color',
                                    'family',
                                    'opacity',
                                    'size',
                                    'weight'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFontModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFontModule, declarations: [DxoFontComponent], exports: [DxoFontComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontModule });
            } exports("y", DxoFontModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFontComponent
                                ],
                                exports: [
                                    DxoFontComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFormSimpleItem extends NestedOption {
                get colSpan() {
                    return this._getOption('colSpan');
                }
                set colSpan(value) {
                    this._setOption('colSpan', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get editorType() {
                    return this._getOption('editorType');
                }
                set editorType(value) {
                    this._setOption('editorType', value);
                }
                get helpText() {
                    return this._getOption('helpText');
                }
                set helpText(value) {
                    this._setOption('helpText', value);
                }
                get isRequired() {
                    return this._getOption('isRequired');
                }
                set isRequired(value) {
                    this._setOption('isRequired', value);
                }
                get itemType() {
                    return this._getOption('itemType');
                }
                set itemType(value) {
                    this._setOption('itemType', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get validationRules() {
                    return this._getOption('validationRules');
                }
                set validationRules(value) {
                    this._setOption('validationRules', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visibleIndex() {
                    return this._getOption('visibleIndex');
                }
                set visibleIndex(value) {
                    this._setOption('visibleIndex', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormSimpleItem, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormSimpleItem, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormSimpleItem, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFormItemComponent extends DxoFormSimpleItem {
                get _optionPath() {
                    return 'formItem';
                }
                get validationRulesChildren() {
                    return this._getOption('validationRules');
                }
                set validationRulesChildren(value) {
                    this.setChildren('validationRules', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormItemComponent, selector: "dxo-form-item", inputs: { colSpan: "colSpan", cssClass: "cssClass", dataField: "dataField", editorOptions: "editorOptions", editorType: "editorType", helpText: "helpText", isRequired: "isRequired", itemType: "itemType", label: "label", name: "name", template: "template", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex" }, providers: [NestedOptionHost], queries: [{ propertyName: "validationRulesChildren", predicate: i0.forwardRef(() => DxiValidationRuleComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-form-item', template: '', providers: [NestedOptionHost], inputs: [
                                    'colSpan',
                                    'cssClass',
                                    'dataField',
                                    'editorOptions',
                                    'editorType',
                                    'helpText',
                                    'isRequired',
                                    'itemType',
                                    'label',
                                    'name',
                                    'template',
                                    'validationRules',
                                    'visible',
                                    'visibleIndex'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { validationRulesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiValidationRuleComponent)]
                        }] } });
            class DxoFormItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemModule, declarations: [DxoFormItemComponent], exports: [DxoFormItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemModule });
            } exports("cW", DxoFormItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFormItemComponent
                                ],
                                exports: [
                                    DxoFormItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFormOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get alignItemLabels() {
                    return this._getOption('alignItemLabels');
                }
                set alignItemLabels(value) {
                    this._setOption('alignItemLabels', value);
                }
                get alignItemLabelsInAllGroups() {
                    return this._getOption('alignItemLabelsInAllGroups');
                }
                set alignItemLabelsInAllGroups(value) {
                    this._setOption('alignItemLabelsInAllGroups', value);
                }
                get colCount() {
                    return this._getOption('colCount');
                }
                set colCount(value) {
                    this._setOption('colCount', value);
                }
                get colCountByScreen() {
                    return this._getOption('colCountByScreen');
                }
                set colCountByScreen(value) {
                    this._setOption('colCountByScreen', value);
                }
                get customizeItem() {
                    return this._getOption('customizeItem');
                }
                set customizeItem(value) {
                    this._setOption('customizeItem', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get formData() {
                    return this._getOption('formData');
                }
                set formData(value) {
                    this._setOption('formData', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get isDirty() {
                    return this._getOption('isDirty');
                }
                set isDirty(value) {
                    this._setOption('isDirty', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get labelLocation() {
                    return this._getOption('labelLocation');
                }
                set labelLocation(value) {
                    this._setOption('labelLocation', value);
                }
                get labelMode() {
                    return this._getOption('labelMode');
                }
                set labelMode(value) {
                    this._setOption('labelMode', value);
                }
                get minColWidth() {
                    return this._getOption('minColWidth');
                }
                set minColWidth(value) {
                    this._setOption('minColWidth', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onEditorEnterKey() {
                    return this._getOption('onEditorEnterKey');
                }
                set onEditorEnterKey(value) {
                    this._setOption('onEditorEnterKey', value);
                }
                get onFieldDataChanged() {
                    return this._getOption('onFieldDataChanged');
                }
                set onFieldDataChanged(value) {
                    this._setOption('onFieldDataChanged', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get optionalMark() {
                    return this._getOption('optionalMark');
                }
                set optionalMark(value) {
                    this._setOption('optionalMark', value);
                }
                get readOnly() {
                    return this._getOption('readOnly');
                }
                set readOnly(value) {
                    this._setOption('readOnly', value);
                }
                get requiredMark() {
                    return this._getOption('requiredMark');
                }
                set requiredMark(value) {
                    this._setOption('requiredMark', value);
                }
                get requiredMessage() {
                    return this._getOption('requiredMessage');
                }
                set requiredMessage(value) {
                    this._setOption('requiredMessage', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get screenByWidth() {
                    return this._getOption('screenByWidth');
                }
                set screenByWidth(value) {
                    this._setOption('screenByWidth', value);
                }
                get scrollingEnabled() {
                    return this._getOption('scrollingEnabled');
                }
                set scrollingEnabled(value) {
                    this._setOption('scrollingEnabled', value);
                }
                get showColonAfterLabel() {
                    return this._getOption('showColonAfterLabel');
                }
                set showColonAfterLabel(value) {
                    this._setOption('showColonAfterLabel', value);
                }
                get showOptionalMark() {
                    return this._getOption('showOptionalMark');
                }
                set showOptionalMark(value) {
                    this._setOption('showOptionalMark', value);
                }
                get showRequiredMark() {
                    return this._getOption('showRequiredMark');
                }
                set showRequiredMark(value) {
                    this._setOption('showRequiredMark', value);
                }
                get showValidationSummary() {
                    return this._getOption('showValidationSummary');
                }
                set showValidationSummary(value) {
                    this._setOption('showValidationSummary', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get validationGroup() {
                    return this._getOption('validationGroup');
                }
                set validationGroup(value) {
                    this._setOption('validationGroup', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFormComponent extends DxoFormOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                formDataChange;
                get _optionPath() {
                    return 'form';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'formDataChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormComponent, selector: "dxo-form", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", alignItemLabels: "alignItemLabels", alignItemLabelsInAllGroups: "alignItemLabelsInAllGroups", colCount: "colCount", colCountByScreen: "colCountByScreen", customizeItem: "customizeItem", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", formData: "formData", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", isDirty: "isDirty", items: "items", labelLocation: "labelLocation", labelMode: "labelMode", minColWidth: "minColWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onEditorEnterKey: "onEditorEnterKey", onFieldDataChanged: "onFieldDataChanged", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", optionalMark: "optionalMark", readOnly: "readOnly", requiredMark: "requiredMark", requiredMessage: "requiredMessage", rtlEnabled: "rtlEnabled", screenByWidth: "screenByWidth", scrollingEnabled: "scrollingEnabled", showColonAfterLabel: "showColonAfterLabel", showOptionalMark: "showOptionalMark", showRequiredMark: "showRequiredMark", showValidationSummary: "showValidationSummary", tabIndex: "tabIndex", validationGroup: "validationGroup", visible: "visible", width: "width" }, outputs: { formDataChange: "formDataChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-form', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'alignItemLabels',
                                    'alignItemLabelsInAllGroups',
                                    'colCount',
                                    'colCountByScreen',
                                    'customizeItem',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'formData',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'isDirty',
                                    'items',
                                    'labelLocation',
                                    'labelMode',
                                    'minColWidth',
                                    'onContentReady',
                                    'onDisposing',
                                    'onEditorEnterKey',
                                    'onFieldDataChanged',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'optionalMark',
                                    'readOnly',
                                    'requiredMark',
                                    'requiredMessage',
                                    'rtlEnabled',
                                    'screenByWidth',
                                    'scrollingEnabled',
                                    'showColonAfterLabel',
                                    'showOptionalMark',
                                    'showRequiredMark',
                                    'showValidationSummary',
                                    'tabIndex',
                                    'validationGroup',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { formDataChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoFormModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFormModule, declarations: [DxoFormComponent], exports: [DxoFormComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormModule });
            } exports("cY", DxoFormModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFormComponent
                                ],
                                exports: [
                                    DxoFormComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'format';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormatComponent, selector: "dxo-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatModule, declarations: [DxoFormatComponent], exports: [DxoFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatModule });
            } exports("z", DxoFormatModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFormatComponent
                                ],
                                exports: [
                                    DxoFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAnimationState extends NestedOption {
                get left() {
                    return this._getOption('left');
                }
                set left(value) {
                    this._setOption('left', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get scale() {
                    return this._getOption('scale');
                }
                set scale(value) {
                    this._setOption('scale', value);
                }
                get top() {
                    return this._getOption('top');
                }
                set top(value) {
                    this._setOption('top', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationState, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAnimationState, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationState, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFromComponent extends DxoAnimationState {
                get _optionPath() {
                    return 'from';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFromComponent, selector: "dxo-from", inputs: { left: "left", opacity: "opacity", position: "position", scale: "scale", top: "top" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-from', template: '', providers: [NestedOptionHost], inputs: [
                                    'left',
                                    'opacity',
                                    'position',
                                    'scale',
                                    'top'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFromModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFromModule, declarations: [DxoFromComponent], exports: [DxoFromComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromModule });
            } exports("l", DxoFromModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFromComponent
                                ],
                                exports: [
                                    DxoFromComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedarea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedareaComponent, selector: "dxo-fullstackedarea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-fullstackedarea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaModule, declarations: [DxoFullstackedareaComponent], exports: [DxoFullstackedareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaModule });
            } exports("au", DxoFullstackedareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedareaComponent
                                ],
                                exports: [
                                    DxoFullstackedareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedbarComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedbar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedbarComponent, selector: "dxo-fullstackedbar", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-fullstackedbar', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarModule, declarations: [DxoFullstackedbarComponent], exports: [DxoFullstackedbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarModule });
            } exports("av", DxoFullstackedbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedbarComponent
                                ],
                                exports: [
                                    DxoFullstackedbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedlineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedlineComponent, selector: "dxo-fullstackedline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-fullstackedline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedlineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineModule, declarations: [DxoFullstackedlineComponent], exports: [DxoFullstackedlineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineModule });
            } exports("aw", DxoFullstackedlineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedlineComponent
                                ],
                                exports: [
                                    DxoFullstackedlineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedsplineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedspline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedsplineComponent, selector: "dxo-fullstackedspline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-fullstackedspline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedsplineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineModule, declarations: [DxoFullstackedsplineComponent], exports: [DxoFullstackedsplineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineModule });
            } exports("ax", DxoFullstackedsplineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedsplineComponent
                                ],
                                exports: [
                                    DxoFullstackedsplineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedsplineareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedsplinearea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedsplineareaComponent, selector: "dxo-fullstackedsplinearea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-fullstackedsplinearea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedsplineareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaModule, declarations: [DxoFullstackedsplineareaComponent], exports: [DxoFullstackedsplineareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaModule });
            } exports("ay", DxoFullstackedsplineareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedsplineareaComponent
                                ],
                                exports: [
                                    DxoFullstackedsplineareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGeometryComponent extends NestedOption {
                get endAngle() {
                    return this._getOption('endAngle');
                }
                set endAngle(value) {
                    this._setOption('endAngle', value);
                }
                get startAngle() {
                    return this._getOption('startAngle');
                }
                set startAngle(value) {
                    this._setOption('startAngle', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get _optionPath() {
                    return 'geometry';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGeometryComponent, selector: "dxo-geometry", inputs: { endAngle: "endAngle", startAngle: "startAngle", orientation: "orientation" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-geometry', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { endAngle: [{
                            type: Input
                        }], startAngle: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }] } });
            class DxoGeometryModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryModule, declarations: [DxoGeometryComponent], exports: [DxoGeometryComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryModule });
            } exports("w", DxoGeometryModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGeometryComponent
                                ],
                                exports: [
                                    DxoGeometryComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGridSizeComponent extends NestedOption {
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'gridSize';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGridSizeComponent, selector: "dxo-grid-size", inputs: { items: "items", value: "value" }, outputs: { valueChange: "valueChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-grid-size', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { items: [{
                            type: Input
                        }], value: [{
                            type: Input
                        }], valueChange: [{
                            type: Output
                        }] } });
            class DxoGridSizeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeModule, declarations: [DxoGridSizeComponent], exports: [DxoGridSizeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeModule });
            } exports("bh", DxoGridSizeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGridSizeComponent
                                ],
                                exports: [
                                    DxoGridSizeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGridComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'grid';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGridComponent, selector: "dxo-grid", inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-grid', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoGridModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGridModule, declarations: [DxoGridComponent], exports: [DxoGridComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridModule });
            } exports("a0", DxoGridModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGridComponent
                                ],
                                exports: [
                                    DxoGridComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiGroupItemComponent extends CollectionNestedOption {
                get alignByColumn() {
                    return this._getOption('alignByColumn');
                }
                set alignByColumn(value) {
                    this._setOption('alignByColumn', value);
                }
                get column() {
                    return this._getOption('column');
                }
                set column(value) {
                    this._setOption('column', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get displayFormat() {
                    return this._getOption('displayFormat');
                }
                set displayFormat(value) {
                    this._setOption('displayFormat', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get showInColumn() {
                    return this._getOption('showInColumn');
                }
                set showInColumn(value) {
                    this._setOption('showInColumn', value);
                }
                get showInGroupFooter() {
                    return this._getOption('showInGroupFooter');
                }
                set showInGroupFooter(value) {
                    this._setOption('showInGroupFooter', value);
                }
                get skipEmptyValues() {
                    return this._getOption('skipEmptyValues');
                }
                set skipEmptyValues(value) {
                    this._setOption('skipEmptyValues', value);
                }
                get summaryType() {
                    return this._getOption('summaryType');
                }
                set summaryType(value) {
                    this._setOption('summaryType', value);
                }
                get valueFormat() {
                    return this._getOption('valueFormat');
                }
                set valueFormat(value) {
                    this._setOption('valueFormat', value);
                }
                get _optionPath() {
                    return 'groupItems';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiGroupItemComponent, selector: "dxi-group-item", inputs: { alignByColumn: "alignByColumn", column: "column", customizeText: "customizeText", displayFormat: "displayFormat", name: "name", showInColumn: "showInColumn", showInGroupFooter: "showInGroupFooter", skipEmptyValues: "skipEmptyValues", summaryType: "summaryType", valueFormat: "valueFormat" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-group-item', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { alignByColumn: [{
                            type: Input
                        }], column: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], displayFormat: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], showInColumn: [{
                            type: Input
                        }], showInGroupFooter: [{
                            type: Input
                        }], skipEmptyValues: [{
                            type: Input
                        }], summaryType: [{
                            type: Input
                        }], valueFormat: [{
                            type: Input
                        }] } });
            class DxiGroupItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemModule, declarations: [DxiGroupItemComponent], exports: [DxiGroupItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiGroupItemComponent
                                ],
                                exports: [
                                    DxiGroupItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGroupOperationDescriptionsComponent extends NestedOption {
                get and() {
                    return this._getOption('and');
                }
                set and(value) {
                    this._setOption('and', value);
                }
                get notAnd() {
                    return this._getOption('notAnd');
                }
                set notAnd(value) {
                    this._setOption('notAnd', value);
                }
                get notOr() {
                    return this._getOption('notOr');
                }
                set notOr(value) {
                    this._setOption('notOr', value);
                }
                get or() {
                    return this._getOption('or');
                }
                set or(value) {
                    this._setOption('or', value);
                }
                get _optionPath() {
                    return 'groupOperationDescriptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGroupOperationDescriptionsComponent, selector: "dxo-group-operation-descriptions", inputs: { and: "and", notAnd: "notAnd", notOr: "notOr", or: "or" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-group-operation-descriptions', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { and: [{
                            type: Input
                        }], notAnd: [{
                            type: Input
                        }], notOr: [{
                            type: Input
                        }], or: [{
                            type: Input
                        }] } });
            class DxoGroupOperationDescriptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsModule, declarations: [DxoGroupOperationDescriptionsComponent], exports: [DxoGroupOperationDescriptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsModule });
            } exports("bI", DxoGroupOperationDescriptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGroupOperationDescriptionsComponent
                                ],
                                exports: [
                                    DxoGroupOperationDescriptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGroupPanelComponent extends NestedOption {
                get allowColumnDragging() {
                    return this._getOption('allowColumnDragging');
                }
                set allowColumnDragging(value) {
                    this._setOption('allowColumnDragging', value);
                }
                get emptyPanelText() {
                    return this._getOption('emptyPanelText');
                }
                set emptyPanelText(value) {
                    this._setOption('emptyPanelText', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                get _optionPath() {
                    return 'groupPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'visibleChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGroupPanelComponent, selector: "dxo-group-panel", inputs: { allowColumnDragging: "allowColumnDragging", emptyPanelText: "emptyPanelText", visible: "visible" }, outputs: { visibleChange: "visibleChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-group-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowColumnDragging: [{
                            type: Input
                        }], emptyPanelText: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], visibleChange: [{
                            type: Output
                        }] } });
            class DxoGroupPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelModule, declarations: [DxoGroupPanelComponent], exports: [DxoGroupPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGroupPanelComponent
                                ],
                                exports: [
                                    DxoGroupPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGroupComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get headerHeight() {
                    return this._getOption('headerHeight');
                }
                set headerHeight(value) {
                    this._setOption('headerHeight', value);
                }
                get hoverEnabled() {
                    return this._getOption('hoverEnabled');
                }
                set hoverEnabled(value) {
                    this._setOption('hoverEnabled', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get padding() {
                    return this._getOption('padding');
                }
                set padding(value) {
                    this._setOption('padding', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get _optionPath() {
                    return 'group';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGroupComponent, selector: "dxo-group", inputs: { border: "border", color: "color", headerHeight: "headerHeight", hoverEnabled: "hoverEnabled", hoverStyle: "hoverStyle", label: "label", padding: "padding", selectionStyle: "selectionStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-group', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], headerHeight: [{
                            type: Input
                        }], hoverEnabled: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], padding: [{
                            type: Input
                        }], selectionStyle: [{
                            type: Input
                        }] } });
            class DxoGroupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupModule, declarations: [DxoGroupComponent], exports: [DxoGroupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupModule });
            } exports("d8", DxoGroupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGroupComponent
                                ],
                                exports: [
                                    DxoGroupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGroupingComponent extends NestedOption {
                get allowCollapsing() {
                    return this._getOption('allowCollapsing');
                }
                set allowCollapsing(value) {
                    this._setOption('allowCollapsing', value);
                }
                get autoExpandAll() {
                    return this._getOption('autoExpandAll');
                }
                set autoExpandAll(value) {
                    this._setOption('autoExpandAll', value);
                }
                get contextMenuEnabled() {
                    return this._getOption('contextMenuEnabled');
                }
                set contextMenuEnabled(value) {
                    this._setOption('contextMenuEnabled', value);
                }
                get expandMode() {
                    return this._getOption('expandMode');
                }
                set expandMode(value) {
                    this._setOption('expandMode', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get _optionPath() {
                    return 'grouping';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGroupingComponent, selector: "dxo-grouping", inputs: { allowCollapsing: "allowCollapsing", autoExpandAll: "autoExpandAll", contextMenuEnabled: "contextMenuEnabled", expandMode: "expandMode", texts: "texts" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-grouping', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowCollapsing: [{
                            type: Input
                        }], autoExpandAll: [{
                            type: Input
                        }], contextMenuEnabled: [{
                            type: Input
                        }], expandMode: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }] } });
            class DxoGroupingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingModule, declarations: [DxoGroupingComponent], exports: [DxoGroupingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGroupingComponent
                                ],
                                exports: [
                                    DxoGroupingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHatchingComponent extends NestedOption {
                get direction() {
                    return this._getOption('direction');
                }
                set direction(value) {
                    this._setOption('direction', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get step() {
                    return this._getOption('step');
                }
                set step(value) {
                    this._setOption('step', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'hatching';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHatchingComponent, selector: "dxo-hatching", inputs: { direction: "direction", opacity: "opacity", step: "step", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-hatching', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { direction: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], step: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoHatchingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingModule, declarations: [DxoHatchingComponent], exports: [DxoHatchingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingModule });
            } exports("ah", DxoHatchingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHatchingComponent
                                ],
                                exports: [
                                    DxoHatchingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttHeaderFilter extends NestedOption {
                get allowSearch() {
                    return this._getOption('allowSearch');
                }
                set allowSearch(value) {
                    this._setOption('allowSearch', value);
                }
                get allowSelectAll() {
                    return this._getOption('allowSelectAll');
                }
                set allowSelectAll(value) {
                    this._setOption('allowSelectAll', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get groupInterval() {
                    return this._getOption('groupInterval');
                }
                set groupInterval(value) {
                    this._setOption('groupInterval', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get search() {
                    return this._getOption('search');
                }
                set search(value) {
                    this._setOption('search', value);
                }
                get searchMode() {
                    return this._getOption('searchMode');
                }
                set searchMode(value) {
                    this._setOption('searchMode', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get searchTimeout() {
                    return this._getOption('searchTimeout');
                }
                set searchTimeout(value) {
                    this._setOption('searchTimeout', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get showRelevantValues() {
                    return this._getOption('showRelevantValues');
                }
                set showRelevantValues(value) {
                    this._setOption('showRelevantValues', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttHeaderFilter, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttHeaderFilter, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttHeaderFilter, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoHeaderFilterComponent extends DxoGanttHeaderFilter {
                get _optionPath() {
                    return 'headerFilter';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHeaderFilterComponent, selector: "dxo-header-filter", inputs: { allowSearch: "allowSearch", allowSelectAll: "allowSelectAll", dataSource: "dataSource", groupInterval: "groupInterval", height: "height", search: "search", searchMode: "searchMode", width: "width", searchTimeout: "searchTimeout", texts: "texts", visible: "visible", showRelevantValues: "showRelevantValues" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-header-filter', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowSearch',
                                    'allowSelectAll',
                                    'dataSource',
                                    'groupInterval',
                                    'height',
                                    'search',
                                    'searchMode',
                                    'width',
                                    'searchTimeout',
                                    'texts',
                                    'visible',
                                    'showRelevantValues'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoHeaderFilterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterModule, declarations: [DxoHeaderFilterComponent], exports: [DxoHeaderFilterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterModule });
            } exports("bQ", DxoHeaderFilterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHeaderFilterComponent
                                ],
                                exports: [
                                    DxoHeaderFilterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHeightComponent extends NestedOption {
                get rangeMaxPoint() {
                    return this._getOption('rangeMaxPoint');
                }
                set rangeMaxPoint(value) {
                    this._setOption('rangeMaxPoint', value);
                }
                get rangeMinPoint() {
                    return this._getOption('rangeMinPoint');
                }
                set rangeMinPoint(value) {
                    this._setOption('rangeMinPoint', value);
                }
                get _optionPath() {
                    return 'height';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHeightComponent, selector: "dxo-height", inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-height', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { rangeMaxPoint: [{
                            type: Input
                        }], rangeMinPoint: [{
                            type: Input
                        }] } });
            class DxoHeightModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightModule, declarations: [DxoHeightComponent], exports: [DxoHeightComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightModule });
            } exports("ak", DxoHeightModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHeightComponent
                                ],
                                exports: [
                                    DxoHeightComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHideEventComponent extends NestedOption {
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'hideEvent';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHideEventComponent, selector: "dxo-hide-event", inputs: { delay: "delay", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-hide-event', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { delay: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxoHideEventModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventModule, declarations: [DxoHideEventComponent], exports: [DxoHideEventComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventModule });
            } exports("cd", DxoHideEventModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHideEventComponent
                                ],
                                exports: [
                                    DxoHideEventComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoHideComponent extends DxoAnimationConfig {
                get _optionPath() {
                    return 'hide';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHideComponent, selector: "dxo-hide", inputs: { complete: "complete", delay: "delay", direction: "direction", duration: "duration", easing: "easing", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-hide', template: '', providers: [NestedOptionHost], inputs: [
                                    'complete',
                                    'delay',
                                    'direction',
                                    'duration',
                                    'easing',
                                    'from',
                                    'staggerDelay',
                                    'start',
                                    'to',
                                    'type'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoHideModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHideModule, declarations: [DxoHideComponent], exports: [DxoHideComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideModule });
            } exports("k", DxoHideModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHideComponent
                                ],
                                exports: [
                                    DxoHideComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHistoryToolbarComponent extends NestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'historyToolbar';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHistoryToolbarComponent, selector: "dxo-history-toolbar", inputs: { commands: "commands", visible: "visible" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-history-toolbar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commands: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }] } });
            class DxoHistoryToolbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarModule, declarations: [DxoHistoryToolbarComponent], exports: [DxoHistoryToolbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarModule });
            } exports("bi", DxoHistoryToolbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHistoryToolbarComponent
                                ],
                                exports: [
                                    DxoHistoryToolbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHorizontalLineComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'horizontalLine';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHorizontalLineComponent, selector: "dxo-horizontal-line", inputs: { color: "color", dashStyle: "dashStyle", label: "label", opacity: "opacity", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-horizontal-line', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoHorizontalLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineModule, declarations: [DxoHorizontalLineComponent], exports: [DxoHorizontalLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineModule });
            } exports("aP", DxoHorizontalLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHorizontalLineComponent
                                ],
                                exports: [
                                    DxoHorizontalLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHoverStyleComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get hatching() {
                    return this._getOption('hatching');
                }
                set hatching(value) {
                    this._setOption('hatching', value);
                }
                get highlight() {
                    return this._getOption('highlight');
                }
                set highlight(value) {
                    this._setOption('highlight', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'hoverStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHoverStyleComponent, selector: "dxo-hover-style", inputs: { border: "border", color: "color", dashStyle: "dashStyle", hatching: "hatching", highlight: "highlight", width: "width", size: "size", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-hover-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], hatching: [{
                            type: Input
                        }], highlight: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], size: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoHoverStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleModule, declarations: [DxoHoverStyleComponent], exports: [DxoHoverStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleModule });
            } exports("ag", DxoHoverStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHoverStyleComponent
                                ],
                                exports: [
                                    DxoHoverStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorImageUpload extends NestedOption {
                get fileUploaderOptions() {
                    return this._getOption('fileUploaderOptions');
                }
                set fileUploaderOptions(value) {
                    this._setOption('fileUploaderOptions', value);
                }
                get fileUploadMode() {
                    return this._getOption('fileUploadMode');
                }
                set fileUploadMode(value) {
                    this._setOption('fileUploadMode', value);
                }
                get tabs() {
                    return this._getOption('tabs');
                }
                set tabs(value) {
                    this._setOption('tabs', value);
                }
                get uploadDirectory() {
                    return this._getOption('uploadDirectory');
                }
                set uploadDirectory(value) {
                    this._setOption('uploadDirectory', value);
                }
                get uploadUrl() {
                    return this._getOption('uploadUrl');
                }
                set uploadUrl(value) {
                    this._setOption('uploadUrl', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorImageUpload, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorImageUpload, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorImageUpload, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoImageUploadComponent extends DxoHtmlEditorImageUpload {
                get _optionPath() {
                    return 'imageUpload';
                }
                get tabsChildren() {
                    return this._getOption('tabs');
                }
                set tabsChildren(value) {
                    this.setChildren('tabs', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoImageUploadComponent, selector: "dxo-image-upload", inputs: { fileUploaderOptions: "fileUploaderOptions", fileUploadMode: "fileUploadMode", tabs: "tabs", uploadDirectory: "uploadDirectory", uploadUrl: "uploadUrl" }, providers: [NestedOptionHost], queries: [{ propertyName: "tabsChildren", predicate: i0.forwardRef(() => DxiTabComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-image-upload', template: '', providers: [NestedOptionHost], inputs: [
                                    'fileUploaderOptions',
                                    'fileUploadMode',
                                    'tabs',
                                    'uploadDirectory',
                                    'uploadUrl'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { tabsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiTabComponent)]
                        }] } });
            class DxoImageUploadModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadModule, declarations: [DxoImageUploadComponent], exports: [DxoImageUploadComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadModule });
            } exports("c2", DxoImageUploadModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoImageUploadComponent
                                ],
                                exports: [
                                    DxoImageUploadComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoImageComponent extends NestedOption {
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get url() {
                    return this._getOption('url');
                }
                set url(value) {
                    this._setOption('url', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get _optionPath() {
                    return 'image';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoImageComponent, selector: "dxo-image", inputs: { height: "height", url: "url", width: "width", location: "location" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-image', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { height: [{
                            type: Input
                        }], url: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }] } });
            class DxoImageModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoImageModule, declarations: [DxoImageComponent], exports: [DxoImageComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageModule });
            } exports("U", DxoImageModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoImageComponent
                                ],
                                exports: [
                                    DxoImageComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoIndentComponent extends NestedOption {
                get left() {
                    return this._getOption('left');
                }
                set left(value) {
                    this._setOption('left', value);
                }
                get right() {
                    return this._getOption('right');
                }
                set right(value) {
                    this._setOption('right', value);
                }
                get _optionPath() {
                    return 'indent';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoIndentComponent, selector: "dxo-indent", inputs: { left: "left", right: "right" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-indent', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { left: [{
                            type: Input
                        }], right: [{
                            type: Input
                        }] } });
            class DxoIndentModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentModule, declarations: [DxoIndentComponent], exports: [DxoIndentComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentModule });
            } exports("cA", DxoIndentModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoIndentComponent
                                ],
                                exports: [
                                    DxoIndentComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSortableOptions extends NestedOption {
                get allowDropInsideItem() {
                    return this._getOption('allowDropInsideItem');
                }
                set allowDropInsideItem(value) {
                    this._setOption('allowDropInsideItem', value);
                }
                get allowReordering() {
                    return this._getOption('allowReordering');
                }
                set allowReordering(value) {
                    this._setOption('allowReordering', value);
                }
                get autoScroll() {
                    return this._getOption('autoScroll');
                }
                set autoScroll(value) {
                    this._setOption('autoScroll', value);
                }
                get boundary() {
                    return this._getOption('boundary');
                }
                set boundary(value) {
                    this._setOption('boundary', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get cursorOffset() {
                    return this._getOption('cursorOffset');
                }
                set cursorOffset(value) {
                    this._setOption('cursorOffset', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get dragDirection() {
                    return this._getOption('dragDirection');
                }
                set dragDirection(value) {
                    this._setOption('dragDirection', value);
                }
                get dragTemplate() {
                    return this._getOption('dragTemplate');
                }
                set dragTemplate(value) {
                    this._setOption('dragTemplate', value);
                }
                get dropFeedbackMode() {
                    return this._getOption('dropFeedbackMode');
                }
                set dropFeedbackMode(value) {
                    this._setOption('dropFeedbackMode', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get filter() {
                    return this._getOption('filter');
                }
                set filter(value) {
                    this._setOption('filter', value);
                }
                get group() {
                    return this._getOption('group');
                }
                set group(value) {
                    this._setOption('group', value);
                }
                get handle() {
                    return this._getOption('handle');
                }
                set handle(value) {
                    this._setOption('handle', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get itemOrientation() {
                    return this._getOption('itemOrientation');
                }
                set itemOrientation(value) {
                    this._setOption('itemOrientation', value);
                }
                get moveItemOnDrop() {
                    return this._getOption('moveItemOnDrop');
                }
                set moveItemOnDrop(value) {
                    this._setOption('moveItemOnDrop', value);
                }
                get onAdd() {
                    return this._getOption('onAdd');
                }
                set onAdd(value) {
                    this._setOption('onAdd', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onDragChange() {
                    return this._getOption('onDragChange');
                }
                set onDragChange(value) {
                    this._setOption('onDragChange', value);
                }
                get onDragEnd() {
                    return this._getOption('onDragEnd');
                }
                set onDragEnd(value) {
                    this._setOption('onDragEnd', value);
                }
                get onDragMove() {
                    return this._getOption('onDragMove');
                }
                set onDragMove(value) {
                    this._setOption('onDragMove', value);
                }
                get onDragStart() {
                    return this._getOption('onDragStart');
                }
                set onDragStart(value) {
                    this._setOption('onDragStart', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onRemove() {
                    return this._getOption('onRemove');
                }
                set onRemove(value) {
                    this._setOption('onRemove', value);
                }
                get onReorder() {
                    return this._getOption('onReorder');
                }
                set onReorder(value) {
                    this._setOption('onReorder', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get scrollSensitivity() {
                    return this._getOption('scrollSensitivity');
                }
                set scrollSensitivity(value) {
                    this._setOption('scrollSensitivity', value);
                }
                get scrollSpeed() {
                    return this._getOption('scrollSpeed');
                }
                set scrollSpeed(value) {
                    this._setOption('scrollSpeed', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortableOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSortableOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortableOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoItemDraggingComponent extends DxoSortableOptions {
                get _optionPath() {
                    return 'itemDragging';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoItemDraggingComponent, selector: "dxo-item-dragging", inputs: { allowDropInsideItem: "allowDropInsideItem", allowReordering: "allowReordering", autoScroll: "autoScroll", boundary: "boundary", container: "container", cursorOffset: "cursorOffset", data: "data", dragDirection: "dragDirection", dragTemplate: "dragTemplate", dropFeedbackMode: "dropFeedbackMode", elementAttr: "elementAttr", filter: "filter", group: "group", handle: "handle", height: "height", itemOrientation: "itemOrientation", moveItemOnDrop: "moveItemOnDrop", onAdd: "onAdd", onDisposing: "onDisposing", onDragChange: "onDragChange", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onRemove: "onRemove", onReorder: "onReorder", rtlEnabled: "rtlEnabled", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-item-dragging', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowDropInsideItem',
                                    'allowReordering',
                                    'autoScroll',
                                    'boundary',
                                    'container',
                                    'cursorOffset',
                                    'data',
                                    'dragDirection',
                                    'dragTemplate',
                                    'dropFeedbackMode',
                                    'elementAttr',
                                    'filter',
                                    'group',
                                    'handle',
                                    'height',
                                    'itemOrientation',
                                    'moveItemOnDrop',
                                    'onAdd',
                                    'onDisposing',
                                    'onDragChange',
                                    'onDragEnd',
                                    'onDragMove',
                                    'onDragStart',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onRemove',
                                    'onReorder',
                                    'rtlEnabled',
                                    'scrollSensitivity',
                                    'scrollSpeed',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoItemDraggingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingModule, declarations: [DxoItemDraggingComponent], exports: [DxoItemDraggingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingModule });
            } exports("ca", DxoItemDraggingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoItemDraggingComponent
                                ],
                                exports: [
                                    DxoItemDraggingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoItemTextFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'itemTextFormat';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoItemTextFormatComponent, selector: "dxo-item-text-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-item-text-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoItemTextFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatModule, declarations: [DxoItemTextFormatComponent], exports: [DxoItemTextFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatModule });
            } exports("C", DxoItemTextFormatModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoItemTextFormatComponent
                                ],
                                exports: [
                                    DxoItemTextFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoItemViewComponent extends NestedOption {
                get details() {
                    return this._getOption('details');
                }
                set details(value) {
                    this._setOption('details', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get showFolders() {
                    return this._getOption('showFolders');
                }
                set showFolders(value) {
                    this._setOption('showFolders', value);
                }
                get showParentFolder() {
                    return this._getOption('showParentFolder');
                }
                set showParentFolder(value) {
                    this._setOption('showParentFolder', value);
                }
                get _optionPath() {
                    return 'itemView';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoItemViewComponent, selector: "dxo-item-view", inputs: { details: "details", mode: "mode", showFolders: "showFolders", showParentFolder: "showParentFolder" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-item-view', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { details: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], showFolders: [{
                            type: Input
                        }], showParentFolder: [{
                            type: Input
                        }] } });
            class DxoItemViewModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewModule, declarations: [DxoItemViewComponent], exports: [DxoItemViewComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewModule });
            } exports("bu", DxoItemViewModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoItemViewComponent
                                ],
                                exports: [
                                    DxoItemViewComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoItemComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get _optionPath() {
                    return 'item';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoItemComponent, selector: "dxo-item", inputs: { border: "border", hoverStyle: "hoverStyle", selectionStyle: "selectionStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-item', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], selectionStyle: [{
                            type: Input
                        }] } });
            class DxoItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoItemModule, declarations: [DxoItemComponent], exports: [DxoItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemModule });
            } exports("bN", DxoItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoItemComponent
                                ],
                                exports: [
                                    DxoItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoKeyboardNavigationComponent extends NestedOption {
                get editOnKeyPress() {
                    return this._getOption('editOnKeyPress');
                }
                set editOnKeyPress(value) {
                    this._setOption('editOnKeyPress', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get enterKeyAction() {
                    return this._getOption('enterKeyAction');
                }
                set enterKeyAction(value) {
                    this._setOption('enterKeyAction', value);
                }
                get enterKeyDirection() {
                    return this._getOption('enterKeyDirection');
                }
                set enterKeyDirection(value) {
                    this._setOption('enterKeyDirection', value);
                }
                get _optionPath() {
                    return 'keyboardNavigation';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoKeyboardNavigationComponent, selector: "dxo-keyboard-navigation", inputs: { editOnKeyPress: "editOnKeyPress", enabled: "enabled", enterKeyAction: "enterKeyAction", enterKeyDirection: "enterKeyDirection" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-keyboard-navigation', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { editOnKeyPress: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], enterKeyAction: [{
                            type: Input
                        }], enterKeyDirection: [{
                            type: Input
                        }] } });
            class DxoKeyboardNavigationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationModule, declarations: [DxoKeyboardNavigationComponent], exports: [DxoKeyboardNavigationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationModule });
            } exports("d1", DxoKeyboardNavigationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoKeyboardNavigationComponent
                                ],
                                exports: [
                                    DxoKeyboardNavigationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLabelComponent extends NestedOption {
                get connectorColor() {
                    return this._getOption('connectorColor');
                }
                set connectorColor(value) {
                    this._setOption('connectorColor', value);
                }
                get connectorWidth() {
                    return this._getOption('connectorWidth');
                }
                set connectorWidth(value) {
                    this._setOption('connectorWidth', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get indent() {
                    return this._getOption('indent');
                }
                set indent(value) {
                    this._setOption('indent', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get alignment() {
                    return this._getOption('alignment');
                }
                set alignment(value) {
                    this._setOption('alignment', value);
                }
                get customizeHint() {
                    return this._getOption('customizeHint');
                }
                set customizeHint(value) {
                    this._setOption('customizeHint', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get indentFromAxis() {
                    return this._getOption('indentFromAxis');
                }
                set indentFromAxis(value) {
                    this._setOption('indentFromAxis', value);
                }
                get overlappingBehavior() {
                    return this._getOption('overlappingBehavior');
                }
                set overlappingBehavior(value) {
                    this._setOption('overlappingBehavior', value);
                }
                get rotationAngle() {
                    return this._getOption('rotationAngle');
                }
                set rotationAngle(value) {
                    this._setOption('rotationAngle', value);
                }
                get staggeringSpacing() {
                    return this._getOption('staggeringSpacing');
                }
                set staggeringSpacing(value) {
                    this._setOption('staggeringSpacing', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get argumentFormat() {
                    return this._getOption('argumentFormat');
                }
                set argumentFormat(value) {
                    this._setOption('argumentFormat', value);
                }
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get connector() {
                    return this._getOption('connector');
                }
                set connector(value) {
                    this._setOption('connector', value);
                }
                get displayFormat() {
                    return this._getOption('displayFormat');
                }
                set displayFormat(value) {
                    this._setOption('displayFormat', value);
                }
                get horizontalOffset() {
                    return this._getOption('horizontalOffset');
                }
                set horizontalOffset(value) {
                    this._setOption('horizontalOffset', value);
                }
                get showForZeroValues() {
                    return this._getOption('showForZeroValues');
                }
                set showForZeroValues(value) {
                    this._setOption('showForZeroValues', value);
                }
                get verticalOffset() {
                    return this._getOption('verticalOffset');
                }
                set verticalOffset(value) {
                    this._setOption('verticalOffset', value);
                }
                get hideFirstOrLast() {
                    return this._getOption('hideFirstOrLast');
                }
                set hideFirstOrLast(value) {
                    this._setOption('hideFirstOrLast', value);
                }
                get indentFromTick() {
                    return this._getOption('indentFromTick');
                }
                set indentFromTick(value) {
                    this._setOption('indentFromTick', value);
                }
                get useRangeColors() {
                    return this._getOption('useRangeColors');
                }
                set useRangeColors(value) {
                    this._setOption('useRangeColors', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get showColon() {
                    return this._getOption('showColon');
                }
                set showColon(value) {
                    this._setOption('showColon', value);
                }
                get radialOffset() {
                    return this._getOption('radialOffset');
                }
                set radialOffset(value) {
                    this._setOption('radialOffset', value);
                }
                get topIndent() {
                    return this._getOption('topIndent');
                }
                set topIndent(value) {
                    this._setOption('topIndent', value);
                }
                get shadow() {
                    return this._getOption('shadow');
                }
                set shadow(value) {
                    this._setOption('shadow', value);
                }
                get useNodeColors() {
                    return this._getOption('useNodeColors');
                }
                set useNodeColors(value) {
                    this._setOption('useNodeColors', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get _optionPath() {
                    return 'label';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLabelComponent, selector: "dxo-label", inputs: { connectorColor: "connectorColor", connectorWidth: "connectorWidth", customizeText: "customizeText", font: "font", format: "format", indent: "indent", visible: "visible", horizontalAlignment: "horizontalAlignment", position: "position", text: "text", verticalAlignment: "verticalAlignment", alignment: "alignment", customizeHint: "customizeHint", displayMode: "displayMode", indentFromAxis: "indentFromAxis", overlappingBehavior: "overlappingBehavior", rotationAngle: "rotationAngle", staggeringSpacing: "staggeringSpacing", template: "template", textOverflow: "textOverflow", wordWrap: "wordWrap", argumentFormat: "argumentFormat", backgroundColor: "backgroundColor", border: "border", connector: "connector", displayFormat: "displayFormat", horizontalOffset: "horizontalOffset", showForZeroValues: "showForZeroValues", verticalOffset: "verticalOffset", hideFirstOrLast: "hideFirstOrLast", indentFromTick: "indentFromTick", useRangeColors: "useRangeColors", location: "location", showColon: "showColon", radialOffset: "radialOffset", topIndent: "topIndent", shadow: "shadow", useNodeColors: "useNodeColors", dataField: "dataField", enabled: "enabled" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-label', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { connectorColor: [{
                            type: Input
                        }], connectorWidth: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], format: [{
                            type: Input
                        }], indent: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], alignment: [{
                            type: Input
                        }], customizeHint: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], indentFromAxis: [{
                            type: Input
                        }], overlappingBehavior: [{
                            type: Input
                        }], rotationAngle: [{
                            type: Input
                        }], staggeringSpacing: [{
                            type: Input
                        }], template: [{
                            type: Input
                        }], textOverflow: [{
                            type: Input
                        }], wordWrap: [{
                            type: Input
                        }], argumentFormat: [{
                            type: Input
                        }], backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], connector: [{
                            type: Input
                        }], displayFormat: [{
                            type: Input
                        }], horizontalOffset: [{
                            type: Input
                        }], showForZeroValues: [{
                            type: Input
                        }], verticalOffset: [{
                            type: Input
                        }], hideFirstOrLast: [{
                            type: Input
                        }], indentFromTick: [{
                            type: Input
                        }], useRangeColors: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }], showColon: [{
                            type: Input
                        }], radialOffset: [{
                            type: Input
                        }], topIndent: [{
                            type: Input
                        }], shadow: [{
                            type: Input
                        }], useNodeColors: [{
                            type: Input
                        }], dataField: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }] } });
            class DxoLabelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelModule, declarations: [DxoLabelComponent], exports: [DxoLabelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelModule });
            } exports("x", DxoLabelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLabelComponent
                                ],
                                exports: [
                                    DxoLabelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiLayerComponent extends CollectionNestedOption {
                get borderColor() {
                    return this._getOption('borderColor');
                }
                set borderColor(value) {
                    this._setOption('borderColor', value);
                }
                get borderWidth() {
                    return this._getOption('borderWidth');
                }
                set borderWidth(value) {
                    this._setOption('borderWidth', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get colorGroupingField() {
                    return this._getOption('colorGroupingField');
                }
                set colorGroupingField(value) {
                    this._setOption('colorGroupingField', value);
                }
                get colorGroups() {
                    return this._getOption('colorGroups');
                }
                set colorGroups(value) {
                    this._setOption('colorGroups', value);
                }
                get customize() {
                    return this._getOption('customize');
                }
                set customize(value) {
                    this._setOption('customize', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get elementType() {
                    return this._getOption('elementType');
                }
                set elementType(value) {
                    this._setOption('elementType', value);
                }
                get hoveredBorderColor() {
                    return this._getOption('hoveredBorderColor');
                }
                set hoveredBorderColor(value) {
                    this._setOption('hoveredBorderColor', value);
                }
                get hoveredBorderWidth() {
                    return this._getOption('hoveredBorderWidth');
                }
                set hoveredBorderWidth(value) {
                    this._setOption('hoveredBorderWidth', value);
                }
                get hoveredColor() {
                    return this._getOption('hoveredColor');
                }
                set hoveredColor(value) {
                    this._setOption('hoveredColor', value);
                }
                get hoverEnabled() {
                    return this._getOption('hoverEnabled');
                }
                set hoverEnabled(value) {
                    this._setOption('hoverEnabled', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get maxSize() {
                    return this._getOption('maxSize');
                }
                set maxSize(value) {
                    this._setOption('maxSize', value);
                }
                get minSize() {
                    return this._getOption('minSize');
                }
                set minSize(value) {
                    this._setOption('minSize', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get paletteIndex() {
                    return this._getOption('paletteIndex');
                }
                set paletteIndex(value) {
                    this._setOption('paletteIndex', value);
                }
                get paletteSize() {
                    return this._getOption('paletteSize');
                }
                set paletteSize(value) {
                    this._setOption('paletteSize', value);
                }
                get selectedBorderColor() {
                    return this._getOption('selectedBorderColor');
                }
                set selectedBorderColor(value) {
                    this._setOption('selectedBorderColor', value);
                }
                get selectedBorderWidth() {
                    return this._getOption('selectedBorderWidth');
                }
                set selectedBorderWidth(value) {
                    this._setOption('selectedBorderWidth', value);
                }
                get selectedColor() {
                    return this._getOption('selectedColor');
                }
                set selectedColor(value) {
                    this._setOption('selectedColor', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get sizeGroupingField() {
                    return this._getOption('sizeGroupingField');
                }
                set sizeGroupingField(value) {
                    this._setOption('sizeGroupingField', value);
                }
                get sizeGroups() {
                    return this._getOption('sizeGroups');
                }
                set sizeGroups(value) {
                    this._setOption('sizeGroups', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'layers';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiLayerComponent, selector: "dxi-layer", inputs: { borderColor: "borderColor", borderWidth: "borderWidth", color: "color", colorGroupingField: "colorGroupingField", colorGroups: "colorGroups", customize: "customize", dataField: "dataField", dataSource: "dataSource", elementType: "elementType", hoveredBorderColor: "hoveredBorderColor", hoveredBorderWidth: "hoveredBorderWidth", hoveredColor: "hoveredColor", hoverEnabled: "hoverEnabled", label: "label", maxSize: "maxSize", minSize: "minSize", name: "name", opacity: "opacity", palette: "palette", paletteIndex: "paletteIndex", paletteSize: "paletteSize", selectedBorderColor: "selectedBorderColor", selectedBorderWidth: "selectedBorderWidth", selectedColor: "selectedColor", selectionMode: "selectionMode", size: "size", sizeGroupingField: "sizeGroupingField", sizeGroups: "sizeGroups", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("dd", DxiLayerComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-layer', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { borderColor: [{
                            type: Input
                        }], borderWidth: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], colorGroupingField: [{
                            type: Input
                        }], colorGroups: [{
                            type: Input
                        }], customize: [{
                            type: Input
                        }], dataField: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], elementType: [{
                            type: Input
                        }], hoveredBorderColor: [{
                            type: Input
                        }], hoveredBorderWidth: [{
                            type: Input
                        }], hoveredColor: [{
                            type: Input
                        }], hoverEnabled: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], maxSize: [{
                            type: Input
                        }], minSize: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], palette: [{
                            type: Input
                        }], paletteIndex: [{
                            type: Input
                        }], paletteSize: [{
                            type: Input
                        }], selectedBorderColor: [{
                            type: Input
                        }], selectedBorderWidth: [{
                            type: Input
                        }], selectedColor: [{
                            type: Input
                        }], selectionMode: [{
                            type: Input
                        }], size: [{
                            type: Input
                        }], sizeGroupingField: [{
                            type: Input
                        }], sizeGroups: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxiLayerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerModule, declarations: [DxiLayerComponent], exports: [DxiLayerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerModule });
            } exports("dg", DxiLayerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiLayerComponent
                                ],
                                exports: [
                                    DxiLayerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiLegendComponent extends CollectionNestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get columnCount() {
                    return this._getOption('columnCount');
                }
                set columnCount(value) {
                    this._setOption('columnCount', value);
                }
                get columnItemSpacing() {
                    return this._getOption('columnItemSpacing');
                }
                set columnItemSpacing(value) {
                    this._setOption('columnItemSpacing', value);
                }
                get customizeHint() {
                    return this._getOption('customizeHint');
                }
                set customizeHint(value) {
                    this._setOption('customizeHint', value);
                }
                get customizeItems() {
                    return this._getOption('customizeItems');
                }
                set customizeItems(value) {
                    this._setOption('customizeItems', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get itemsAlignment() {
                    return this._getOption('itemsAlignment');
                }
                set itemsAlignment(value) {
                    this._setOption('itemsAlignment', value);
                }
                get itemTextPosition() {
                    return this._getOption('itemTextPosition');
                }
                set itemTextPosition(value) {
                    this._setOption('itemTextPosition', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get markerColor() {
                    return this._getOption('markerColor');
                }
                set markerColor(value) {
                    this._setOption('markerColor', value);
                }
                get markerShape() {
                    return this._getOption('markerShape');
                }
                set markerShape(value) {
                    this._setOption('markerShape', value);
                }
                get markerSize() {
                    return this._getOption('markerSize');
                }
                set markerSize(value) {
                    this._setOption('markerSize', value);
                }
                get markerTemplate() {
                    return this._getOption('markerTemplate');
                }
                set markerTemplate(value) {
                    this._setOption('markerTemplate', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get rowCount() {
                    return this._getOption('rowCount');
                }
                set rowCount(value) {
                    this._setOption('rowCount', value);
                }
                get rowItemSpacing() {
                    return this._getOption('rowItemSpacing');
                }
                set rowItemSpacing(value) {
                    this._setOption('rowItemSpacing', value);
                }
                get source() {
                    return this._getOption('source');
                }
                set source(value) {
                    this._setOption('source', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'legends';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiLegendComponent, selector: "dxi-legend", inputs: { backgroundColor: "backgroundColor", border: "border", columnCount: "columnCount", columnItemSpacing: "columnItemSpacing", customizeHint: "customizeHint", customizeItems: "customizeItems", customizeText: "customizeText", font: "font", horizontalAlignment: "horizontalAlignment", itemsAlignment: "itemsAlignment", itemTextPosition: "itemTextPosition", margin: "margin", markerColor: "markerColor", markerShape: "markerShape", markerSize: "markerSize", markerTemplate: "markerTemplate", orientation: "orientation", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", rowCount: "rowCount", rowItemSpacing: "rowItemSpacing", source: "source", title: "title", verticalAlignment: "verticalAlignment", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("de", DxiLegendComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-legend', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], columnCount: [{
                            type: Input
                        }], columnItemSpacing: [{
                            type: Input
                        }], customizeHint: [{
                            type: Input
                        }], customizeItems: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], itemsAlignment: [{
                            type: Input
                        }], itemTextPosition: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], markerColor: [{
                            type: Input
                        }], markerShape: [{
                            type: Input
                        }], markerSize: [{
                            type: Input
                        }], markerTemplate: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], rowCount: [{
                            type: Input
                        }], rowItemSpacing: [{
                            type: Input
                        }], source: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxiLegendModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendModule, declarations: [DxiLegendComponent], exports: [DxiLegendComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendModule });
            } exports("dh", DxiLegendModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiLegendComponent
                                ],
                                exports: [
                                    DxiLegendComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLegendComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get columnCount() {
                    return this._getOption('columnCount');
                }
                set columnCount(value) {
                    this._setOption('columnCount', value);
                }
                get columnItemSpacing() {
                    return this._getOption('columnItemSpacing');
                }
                set columnItemSpacing(value) {
                    this._setOption('columnItemSpacing', value);
                }
                get customizeHint() {
                    return this._getOption('customizeHint');
                }
                set customizeHint(value) {
                    this._setOption('customizeHint', value);
                }
                get customizeItems() {
                    return this._getOption('customizeItems');
                }
                set customizeItems(value) {
                    this._setOption('customizeItems', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get itemsAlignment() {
                    return this._getOption('itemsAlignment');
                }
                set itemsAlignment(value) {
                    this._setOption('itemsAlignment', value);
                }
                get itemTextFormat() {
                    return this._getOption('itemTextFormat');
                }
                set itemTextFormat(value) {
                    this._setOption('itemTextFormat', value);
                }
                get itemTextPosition() {
                    return this._getOption('itemTextPosition');
                }
                set itemTextPosition(value) {
                    this._setOption('itemTextPosition', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get markerSize() {
                    return this._getOption('markerSize');
                }
                set markerSize(value) {
                    this._setOption('markerSize', value);
                }
                get markerTemplate() {
                    return this._getOption('markerTemplate');
                }
                set markerTemplate(value) {
                    this._setOption('markerTemplate', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get rowCount() {
                    return this._getOption('rowCount');
                }
                set rowCount(value) {
                    this._setOption('rowCount', value);
                }
                get rowItemSpacing() {
                    return this._getOption('rowItemSpacing');
                }
                set rowItemSpacing(value) {
                    this._setOption('rowItemSpacing', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get _optionPath() {
                    return 'legend';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLegendComponent, selector: "dxo-legend", inputs: { backgroundColor: "backgroundColor", border: "border", columnCount: "columnCount", columnItemSpacing: "columnItemSpacing", customizeHint: "customizeHint", customizeItems: "customizeItems", customizeText: "customizeText", font: "font", horizontalAlignment: "horizontalAlignment", itemsAlignment: "itemsAlignment", itemTextFormat: "itemTextFormat", itemTextPosition: "itemTextPosition", margin: "margin", markerSize: "markerSize", markerTemplate: "markerTemplate", orientation: "orientation", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", rowCount: "rowCount", rowItemSpacing: "rowItemSpacing", title: "title", verticalAlignment: "verticalAlignment", visible: "visible", hoverMode: "hoverMode", position: "position" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-legend', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], columnCount: [{
                            type: Input
                        }], columnItemSpacing: [{
                            type: Input
                        }], customizeHint: [{
                            type: Input
                        }], customizeItems: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], itemsAlignment: [{
                            type: Input
                        }], itemTextFormat: [{
                            type: Input
                        }], itemTextPosition: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], markerSize: [{
                            type: Input
                        }], markerTemplate: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], rowCount: [{
                            type: Input
                        }], rowItemSpacing: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], hoverMode: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }] } });
            class DxoLegendModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendModule, declarations: [DxoLegendComponent], exports: [DxoLegendComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendModule });
            } exports("A", DxoLegendModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLegendComponent
                                ],
                                exports: [
                                    DxoLegendComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoLineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'line';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLineComponent, selector: "dxo-line", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-line', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLineModule, declarations: [DxoLineComponent], exports: [DxoLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineModule });
            } exports("aA", DxoLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLineComponent
                                ],
                                exports: [
                                    DxoLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLinkComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get colorMode() {
                    return this._getOption('colorMode');
                }
                set colorMode(value) {
                    this._setOption('colorMode', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'link';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLinkComponent, selector: "dxo-link", inputs: { border: "border", color: "color", colorMode: "colorMode", hoverStyle: "hoverStyle", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-link', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], colorMode: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoLinkModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkModule, declarations: [DxoLinkComponent], exports: [DxoLinkComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkModule });
            } exports("cL", DxoLinkModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLinkComponent
                                ],
                                exports: [
                                    DxoLinkComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLoadPanelComponent extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get indicatorSrc() {
                    return this._getOption('indicatorSrc');
                }
                set indicatorSrc(value) {
                    this._setOption('indicatorSrc', value);
                }
                get shading() {
                    return this._getOption('shading');
                }
                set shading(value) {
                    this._setOption('shading', value);
                }
                get shadingColor() {
                    return this._getOption('shadingColor');
                }
                set shadingColor(value) {
                    this._setOption('shadingColor', value);
                }
                get showIndicator() {
                    return this._getOption('showIndicator');
                }
                set showIndicator(value) {
                    this._setOption('showIndicator', value);
                }
                get showPane() {
                    return this._getOption('showPane');
                }
                set showPane(value) {
                    this._setOption('showPane', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'loadPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLoadPanelComponent, selector: "dxo-load-panel", inputs: { enabled: "enabled", height: "height", indicatorSrc: "indicatorSrc", shading: "shading", shadingColor: "shadingColor", showIndicator: "showIndicator", showPane: "showPane", text: "text", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-load-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { enabled: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], indicatorSrc: [{
                            type: Input
                        }], shading: [{
                            type: Input
                        }], shadingColor: [{
                            type: Input
                        }], showIndicator: [{
                            type: Input
                        }], showPane: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoLoadPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelModule, declarations: [DxoLoadPanelComponent], exports: [DxoLoadPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelModule });
            } exports("cs", DxoLoadPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLoadPanelComponent
                                ],
                                exports: [
                                    DxoLoadPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLoadingIndicatorComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get show() {
                    return this._getOption('show');
                }
                set show(value) {
                    this._setOption('show', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showChange;
                get _optionPath() {
                    return 'loadingIndicator';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'showChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLoadingIndicatorComponent, selector: "dxo-loading-indicator", inputs: { backgroundColor: "backgroundColor", font: "font", show: "show", text: "text", enabled: "enabled" }, outputs: { showChange: "showChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-loading-indicator', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], show: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], showChange: [{
                            type: Output
                        }] } });
            class DxoLoadingIndicatorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorModule, declarations: [DxoLoadingIndicatorComponent], exports: [DxoLoadingIndicatorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorModule });
            } exports("H", DxoLoadingIndicatorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLoadingIndicatorComponent
                                ],
                                exports: [
                                    DxoLoadingIndicatorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLookupComponent extends NestedOption {
                get allowClearing() {
                    return this._getOption('allowClearing');
                }
                set allowClearing(value) {
                    this._setOption('allowClearing', value);
                }
                get calculateCellValue() {
                    return this._getOption('calculateCellValue');
                }
                set calculateCellValue(value) {
                    this._setOption('calculateCellValue', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get displayExpr() {
                    return this._getOption('displayExpr');
                }
                set displayExpr(value) {
                    this._setOption('displayExpr', value);
                }
                get valueExpr() {
                    return this._getOption('valueExpr');
                }
                set valueExpr(value) {
                    this._setOption('valueExpr', value);
                }
                get _optionPath() {
                    return 'lookup';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLookupComponent, selector: "dxo-lookup", inputs: { allowClearing: "allowClearing", calculateCellValue: "calculateCellValue", dataSource: "dataSource", displayExpr: "displayExpr", valueExpr: "valueExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-lookup', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowClearing: [{
                            type: Input
                        }], calculateCellValue: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], displayExpr: [{
                            type: Input
                        }], valueExpr: [{
                            type: Input
                        }] } });
            class DxoLookupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupModule, declarations: [DxoLookupComponent], exports: [DxoLookupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupModule });
            } exports("bG", DxoLookupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLookupComponent
                                ],
                                exports: [
                                    DxoLookupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMainToolbarComponent extends NestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'mainToolbar';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMainToolbarComponent, selector: "dxo-main-toolbar", inputs: { commands: "commands", visible: "visible" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-main-toolbar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commands: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }] } });
            class DxoMainToolbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarModule, declarations: [DxoMainToolbarComponent], exports: [DxoMainToolbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarModule });
            } exports("bj", DxoMainToolbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMainToolbarComponent
                                ],
                                exports: [
                                    DxoMainToolbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMarginComponent extends NestedOption {
                get bottom() {
                    return this._getOption('bottom');
                }
                set bottom(value) {
                    this._setOption('bottom', value);
                }
                get left() {
                    return this._getOption('left');
                }
                set left(value) {
                    this._setOption('left', value);
                }
                get right() {
                    return this._getOption('right');
                }
                set right(value) {
                    this._setOption('right', value);
                }
                get top() {
                    return this._getOption('top');
                }
                set top(value) {
                    this._setOption('top', value);
                }
                get _optionPath() {
                    return 'margin';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMarginComponent, selector: "dxo-margin", inputs: { bottom: "bottom", left: "left", right: "right", top: "top" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-margin', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { bottom: [{
                            type: Input
                        }], left: [{
                            type: Input
                        }], right: [{
                            type: Input
                        }], top: [{
                            type: Input
                        }] } });
            class DxoMarginModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginModule, declarations: [DxoMarginComponent], exports: [DxoMarginComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginModule });
            } exports("E", DxoMarginModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMarginComponent
                                ],
                                exports: [
                                    DxoMarginComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiMarkerComponent extends CollectionNestedOption {
                get iconSrc() {
                    return this._getOption('iconSrc');
                }
                set iconSrc(value) {
                    this._setOption('iconSrc', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get onClick() {
                    return this._getOption('onClick');
                }
                set onClick(value) {
                    this._setOption('onClick', value);
                }
                get tooltip() {
                    return this._getOption('tooltip');
                }
                set tooltip(value) {
                    this._setOption('tooltip', value);
                }
                get _optionPath() {
                    return 'markers';
                }
                get locationChildren() {
                    return this._getOption('location');
                }
                set locationChildren(value) {
                    this.setChildren('location', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiMarkerComponent, selector: "dxi-marker", inputs: { iconSrc: "iconSrc", location: "location", onClick: "onClick", tooltip: "tooltip" }, providers: [NestedOptionHost], queries: [{ propertyName: "locationChildren", predicate: i0.forwardRef(() => DxiLocationComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cf", DxiMarkerComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-marker', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { iconSrc: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }], onClick: [{
                            type: Input
                        }], tooltip: [{
                            type: Input
                        }], locationChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiLocationComponent)]
                        }] } });
            class DxiMarkerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerModule, declarations: [DxiMarkerComponent], exports: [DxiMarkerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerModule });
            } exports("cj", DxiMarkerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiMarkerComponent
                                ],
                                exports: [
                                    DxiMarkerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMarkerComponent extends NestedOption {
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get separatorHeight() {
                    return this._getOption('separatorHeight');
                }
                set separatorHeight(value) {
                    this._setOption('separatorHeight', value);
                }
                get textLeftIndent() {
                    return this._getOption('textLeftIndent');
                }
                set textLeftIndent(value) {
                    this._setOption('textLeftIndent', value);
                }
                get textTopIndent() {
                    return this._getOption('textTopIndent');
                }
                set textTopIndent(value) {
                    this._setOption('textTopIndent', value);
                }
                get topIndent() {
                    return this._getOption('topIndent');
                }
                set topIndent(value) {
                    this._setOption('topIndent', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'marker';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMarkerComponent, selector: "dxo-marker", inputs: { label: "label", separatorHeight: "separatorHeight", textLeftIndent: "textLeftIndent", textTopIndent: "textTopIndent", topIndent: "topIndent", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-marker', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { label: [{
                            type: Input
                        }], separatorHeight: [{
                            type: Input
                        }], textLeftIndent: [{
                            type: Input
                        }], textTopIndent: [{
                            type: Input
                        }], topIndent: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoMarkerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerModule, declarations: [DxoMarkerComponent], exports: [DxoMarkerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerModule });
            } exports("cB", DxoMarkerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMarkerComponent
                                ],
                                exports: [
                                    DxoMarkerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMasterDetailComponent extends NestedOption {
                renderer;
                document;
                element;
                get autoExpandAll() {
                    return this._getOption('autoExpandAll');
                }
                set autoExpandAll(value) {
                    this._setOption('autoExpandAll', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get _optionPath() {
                    return 'masterDetail';
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMasterDetailComponent, selector: "dxo-master-detail", inputs: { autoExpandAll: "autoExpandAll", enabled: "enabled", template: "template" }, providers: [NestedOptionHost, DxTemplateHost], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-master-detail', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { autoExpandAll: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], template: [{
                            type: Input
                        }] } });
            class DxoMasterDetailModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailModule, declarations: [DxoMasterDetailComponent], exports: [DxoMasterDetailComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMasterDetailComponent
                                ],
                                exports: [
                                    DxoMasterDetailComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMaxRangeComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'maxRange';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMaxRangeComponent, selector: "dxo-max-range", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-max-range', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoMaxRangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeModule, declarations: [DxoMaxRangeComponent], exports: [DxoMaxRangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeModule });
            } exports("cC", DxoMaxRangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMaxRangeComponent
                                ],
                                exports: [
                                    DxoMaxRangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorMediaResizing extends NestedOption {
                get allowedTargets() {
                    return this._getOption('allowedTargets');
                }
                set allowedTargets(value) {
                    this._setOption('allowedTargets', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorMediaResizing, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorMediaResizing, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorMediaResizing, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoMediaResizingComponent extends DxoHtmlEditorMediaResizing {
                get _optionPath() {
                    return 'mediaResizing';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMediaResizingComponent, selector: "dxo-media-resizing", inputs: { allowedTargets: "allowedTargets", enabled: "enabled" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-media-resizing', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowedTargets',
                                    'enabled'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoMediaResizingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingModule, declarations: [DxoMediaResizingComponent], exports: [DxoMediaResizingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingModule });
            } exports("c4", DxoMediaResizingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMediaResizingComponent
                                ],
                                exports: [
                                    DxoMediaResizingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiHtmlEditorMention extends CollectionNestedOption {
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get displayExpr() {
                    return this._getOption('displayExpr');
                }
                set displayExpr(value) {
                    this._setOption('displayExpr', value);
                }
                get itemTemplate() {
                    return this._getOption('itemTemplate');
                }
                set itemTemplate(value) {
                    this._setOption('itemTemplate', value);
                }
                get marker() {
                    return this._getOption('marker');
                }
                set marker(value) {
                    this._setOption('marker', value);
                }
                get minSearchLength() {
                    return this._getOption('minSearchLength');
                }
                set minSearchLength(value) {
                    this._setOption('minSearchLength', value);
                }
                get searchExpr() {
                    return this._getOption('searchExpr');
                }
                set searchExpr(value) {
                    this._setOption('searchExpr', value);
                }
                get searchTimeout() {
                    return this._getOption('searchTimeout');
                }
                set searchTimeout(value) {
                    this._setOption('searchTimeout', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get valueExpr() {
                    return this._getOption('valueExpr');
                }
                set valueExpr(value) {
                    this._setOption('valueExpr', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiHtmlEditorMention, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiHtmlEditorMention, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiHtmlEditorMention, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiMentionComponent extends DxiHtmlEditorMention {
                get _optionPath() {
                    return 'mentions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiMentionComponent, selector: "dxi-mention", inputs: { dataSource: "dataSource", displayExpr: "displayExpr", itemTemplate: "itemTemplate", marker: "marker", minSearchLength: "minSearchLength", searchExpr: "searchExpr", searchTimeout: "searchTimeout", template: "template", valueExpr: "valueExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("c1", DxiMentionComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-mention', template: '', providers: [NestedOptionHost], inputs: [
                                    'dataSource',
                                    'displayExpr',
                                    'itemTemplate',
                                    'marker',
                                    'minSearchLength',
                                    'searchExpr',
                                    'searchTimeout',
                                    'template',
                                    'valueExpr'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiMentionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionModule, declarations: [DxiMentionComponent], exports: [DxiMentionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionModule });
            } exports("c5", DxiMentionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiMentionComponent
                                ],
                                exports: [
                                    DxiMentionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiMenuItemComponent extends CollectionNestedOption {
                get action() {
                    return this._getOption('action');
                }
                set action(value) {
                    this._setOption('action', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get _optionPath() {
                    return 'menuItems';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiMenuItemComponent, selector: "dxi-menu-item", inputs: { action: "action", text: "text" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("c9", DxiMenuItemComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-menu-item', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { action: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }] } });
            class DxiMenuItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemModule, declarations: [DxiMenuItemComponent], exports: [DxiMenuItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemModule });
            } exports("cb", DxiMenuItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiMenuItemComponent
                                ],
                                exports: [
                                    DxiMenuItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinRangeComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'minRange';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinRangeComponent, selector: "dxo-min-range", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-min-range', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoMinRangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeModule, declarations: [DxoMinRangeComponent], exports: [DxoMinRangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeModule });
            } exports("cD", DxoMinRangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinRangeComponent
                                ],
                                exports: [
                                    DxoMinRangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinVisualRangeLengthComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'minVisualRangeLength';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinVisualRangeLengthComponent, selector: "dxo-min-visual-range-length", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-min-visual-range-length', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoMinVisualRangeLengthModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthModule, declarations: [DxoMinVisualRangeLengthComponent], exports: [DxoMinVisualRangeLengthComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthModule });
            } exports("a4", DxoMinVisualRangeLengthModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinVisualRangeLengthComponent
                                ],
                                exports: [
                                    DxoMinVisualRangeLengthComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinorGridComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'minorGrid';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinorGridComponent, selector: "dxo-minor-grid", inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-minor-grid', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoMinorGridModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridModule, declarations: [DxoMinorGridComponent], exports: [DxoMinorGridComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridModule });
            } exports("a1", DxoMinorGridModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinorGridComponent
                                ],
                                exports: [
                                    DxoMinorGridComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinorTickIntervalComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'minorTickInterval';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinorTickIntervalComponent, selector: "dxo-minor-tick-interval", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-minor-tick-interval', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoMinorTickIntervalModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalModule, declarations: [DxoMinorTickIntervalComponent], exports: [DxoMinorTickIntervalComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalModule });
            } exports("a3", DxoMinorTickIntervalModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinorTickIntervalComponent
                                ],
                                exports: [
                                    DxoMinorTickIntervalComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinorTickComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get length() {
                    return this._getOption('length');
                }
                set length(value) {
                    this._setOption('length', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get shift() {
                    return this._getOption('shift');
                }
                set shift(value) {
                    this._setOption('shift', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'minorTick';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinorTickComponent, selector: "dxo-minor-tick", inputs: { color: "color", length: "length", opacity: "opacity", shift: "shift", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-minor-tick', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], length: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], shift: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoMinorTickModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickModule, declarations: [DxoMinorTickComponent], exports: [DxoMinorTickComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickModule });
            } exports("a2", DxoMinorTickModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinorTickComponent
                                ],
                                exports: [
                                    DxoMinorTickComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMyComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'my';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMyComponent, selector: "dxo-my", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-my', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoMyModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMyModule, declarations: [DxoMyComponent], exports: [DxoMyComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyModule });
            } exports("q", DxoMyModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMyComponent
                                ],
                                exports: [
                                    DxoMyComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoNodeComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get padding() {
                    return this._getOption('padding');
                }
                set padding(value) {
                    this._setOption('padding', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'node';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoNodeComponent, selector: "dxo-node", inputs: { border: "border", color: "color", hoverStyle: "hoverStyle", opacity: "opacity", padding: "padding", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-node', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], padding: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoNodeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeModule, declarations: [DxoNodeComponent], exports: [DxoNodeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeModule });
            } exports("cM", DxoNodeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoNodeComponent
                                ],
                                exports: [
                                    DxoNodeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoNodesComponent extends NestedOption {
                get autoLayout() {
                    return this._getOption('autoLayout');
                }
                set autoLayout(value) {
                    this._setOption('autoLayout', value);
                }
                get autoSizeEnabled() {
                    return this._getOption('autoSizeEnabled');
                }
                set autoSizeEnabled(value) {
                    this._setOption('autoSizeEnabled', value);
                }
                get containerChildrenExpr() {
                    return this._getOption('containerChildrenExpr');
                }
                set containerChildrenExpr(value) {
                    this._setOption('containerChildrenExpr', value);
                }
                get containerKeyExpr() {
                    return this._getOption('containerKeyExpr');
                }
                set containerKeyExpr(value) {
                    this._setOption('containerKeyExpr', value);
                }
                get customDataExpr() {
                    return this._getOption('customDataExpr');
                }
                set customDataExpr(value) {
                    this._setOption('customDataExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get heightExpr() {
                    return this._getOption('heightExpr');
                }
                set heightExpr(value) {
                    this._setOption('heightExpr', value);
                }
                get imageUrlExpr() {
                    return this._getOption('imageUrlExpr');
                }
                set imageUrlExpr(value) {
                    this._setOption('imageUrlExpr', value);
                }
                get itemsExpr() {
                    return this._getOption('itemsExpr');
                }
                set itemsExpr(value) {
                    this._setOption('itemsExpr', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get leftExpr() {
                    return this._getOption('leftExpr');
                }
                set leftExpr(value) {
                    this._setOption('leftExpr', value);
                }
                get lockedExpr() {
                    return this._getOption('lockedExpr');
                }
                set lockedExpr(value) {
                    this._setOption('lockedExpr', value);
                }
                get parentKeyExpr() {
                    return this._getOption('parentKeyExpr');
                }
                set parentKeyExpr(value) {
                    this._setOption('parentKeyExpr', value);
                }
                get styleExpr() {
                    return this._getOption('styleExpr');
                }
                set styleExpr(value) {
                    this._setOption('styleExpr', value);
                }
                get textExpr() {
                    return this._getOption('textExpr');
                }
                set textExpr(value) {
                    this._setOption('textExpr', value);
                }
                get textStyleExpr() {
                    return this._getOption('textStyleExpr');
                }
                set textStyleExpr(value) {
                    this._setOption('textStyleExpr', value);
                }
                get topExpr() {
                    return this._getOption('topExpr');
                }
                set topExpr(value) {
                    this._setOption('topExpr', value);
                }
                get typeExpr() {
                    return this._getOption('typeExpr');
                }
                set typeExpr(value) {
                    this._setOption('typeExpr', value);
                }
                get widthExpr() {
                    return this._getOption('widthExpr');
                }
                set widthExpr(value) {
                    this._setOption('widthExpr', value);
                }
                get zIndexExpr() {
                    return this._getOption('zIndexExpr');
                }
                set zIndexExpr(value) {
                    this._setOption('zIndexExpr', value);
                }
                get _optionPath() {
                    return 'nodes';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoNodesComponent, selector: "dxo-nodes", inputs: { autoLayout: "autoLayout", autoSizeEnabled: "autoSizeEnabled", containerChildrenExpr: "containerChildrenExpr", containerKeyExpr: "containerKeyExpr", customDataExpr: "customDataExpr", dataSource: "dataSource", heightExpr: "heightExpr", imageUrlExpr: "imageUrlExpr", itemsExpr: "itemsExpr", keyExpr: "keyExpr", leftExpr: "leftExpr", lockedExpr: "lockedExpr", parentKeyExpr: "parentKeyExpr", styleExpr: "styleExpr", textExpr: "textExpr", textStyleExpr: "textStyleExpr", topExpr: "topExpr", typeExpr: "typeExpr", widthExpr: "widthExpr", zIndexExpr: "zIndexExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-nodes', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { autoLayout: [{
                            type: Input
                        }], autoSizeEnabled: [{
                            type: Input
                        }], containerChildrenExpr: [{
                            type: Input
                        }], containerKeyExpr: [{
                            type: Input
                        }], customDataExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], heightExpr: [{
                            type: Input
                        }], imageUrlExpr: [{
                            type: Input
                        }], itemsExpr: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], leftExpr: [{
                            type: Input
                        }], lockedExpr: [{
                            type: Input
                        }], parentKeyExpr: [{
                            type: Input
                        }], styleExpr: [{
                            type: Input
                        }], textExpr: [{
                            type: Input
                        }], textStyleExpr: [{
                            type: Input
                        }], topExpr: [{
                            type: Input
                        }], typeExpr: [{
                            type: Input
                        }], widthExpr: [{
                            type: Input
                        }], zIndexExpr: [{
                            type: Input
                        }] } });
            class DxoNodesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesModule, declarations: [DxoNodesComponent], exports: [DxoNodesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesModule });
            } exports("bk", DxoNodesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoNodesComponent
                                ],
                                exports: [
                                    DxoNodesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoNotificationsComponent extends NestedOption {
                get showPanel() {
                    return this._getOption('showPanel');
                }
                set showPanel(value) {
                    this._setOption('showPanel', value);
                }
                get showPopup() {
                    return this._getOption('showPopup');
                }
                set showPopup(value) {
                    this._setOption('showPopup', value);
                }
                get _optionPath() {
                    return 'notifications';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoNotificationsComponent, selector: "dxo-notifications", inputs: { showPanel: "showPanel", showPopup: "showPopup" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-notifications', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { showPanel: [{
                            type: Input
                        }], showPopup: [{
                            type: Input
                        }] } });
            class DxoNotificationsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsModule, declarations: [DxoNotificationsComponent], exports: [DxoNotificationsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsModule });
            } exports("bx", DxoNotificationsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoNotificationsComponent
                                ],
                                exports: [
                                    DxoNotificationsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoOffsetComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'offset';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoOffsetComponent, selector: "dxo-offset", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-offset', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoOffsetModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetModule, declarations: [DxoOffsetComponent], exports: [DxoOffsetComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetModule });
            } exports("r", DxoOffsetModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoOffsetComponent
                                ],
                                exports: [
                                    DxoOffsetComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttFilterRowOperationDescriptions extends NestedOption {
                get between() {
                    return this._getOption('between');
                }
                set between(value) {
                    this._setOption('between', value);
                }
                get contains() {
                    return this._getOption('contains');
                }
                set contains(value) {
                    this._setOption('contains', value);
                }
                get endsWith() {
                    return this._getOption('endsWith');
                }
                set endsWith(value) {
                    this._setOption('endsWith', value);
                }
                get equal() {
                    return this._getOption('equal');
                }
                set equal(value) {
                    this._setOption('equal', value);
                }
                get greaterThan() {
                    return this._getOption('greaterThan');
                }
                set greaterThan(value) {
                    this._setOption('greaterThan', value);
                }
                get greaterThanOrEqual() {
                    return this._getOption('greaterThanOrEqual');
                }
                set greaterThanOrEqual(value) {
                    this._setOption('greaterThanOrEqual', value);
                }
                get lessThan() {
                    return this._getOption('lessThan');
                }
                set lessThan(value) {
                    this._setOption('lessThan', value);
                }
                get lessThanOrEqual() {
                    return this._getOption('lessThanOrEqual');
                }
                set lessThanOrEqual(value) {
                    this._setOption('lessThanOrEqual', value);
                }
                get notContains() {
                    return this._getOption('notContains');
                }
                set notContains(value) {
                    this._setOption('notContains', value);
                }
                get notEqual() {
                    return this._getOption('notEqual');
                }
                set notEqual(value) {
                    this._setOption('notEqual', value);
                }
                get startsWith() {
                    return this._getOption('startsWith');
                }
                set startsWith(value) {
                    this._setOption('startsWith', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttFilterRowOperationDescriptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttFilterRowOperationDescriptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttFilterRowOperationDescriptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoOperationDescriptionsComponent extends DxoGanttFilterRowOperationDescriptions {
                get _optionPath() {
                    return 'operationDescriptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoOperationDescriptionsComponent, selector: "dxo-operation-descriptions", inputs: { between: "between", contains: "contains", endsWith: "endsWith", equal: "equal", greaterThan: "greaterThan", greaterThanOrEqual: "greaterThanOrEqual", lessThan: "lessThan", lessThanOrEqual: "lessThanOrEqual", notContains: "notContains", notEqual: "notEqual", startsWith: "startsWith" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-operation-descriptions', template: '', providers: [NestedOptionHost], inputs: [
                                    'between',
                                    'contains',
                                    'endsWith',
                                    'equal',
                                    'greaterThan',
                                    'greaterThanOrEqual',
                                    'lessThan',
                                    'lessThanOrEqual',
                                    'notContains',
                                    'notEqual',
                                    'startsWith'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoOperationDescriptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsModule, declarations: [DxoOperationDescriptionsComponent], exports: [DxoOperationDescriptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsModule });
            } exports("bU", DxoOperationDescriptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoOperationDescriptionsComponent
                                ],
                                exports: [
                                    DxoOperationDescriptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoOptionsComponent extends DxoButtonOptions {
                get _optionPath() {
                    return 'options';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoOptionsComponent, selector: "dxo-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", icon: "icon", onClick: "onClick", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", stylingMode: "stylingMode", tabIndex: "tabIndex", template: "template", text: "text", type: "type", useSubmitBehavior: "useSubmitBehavior", validationGroup: "validationGroup", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'icon',
                                    'onClick',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'rtlEnabled',
                                    'stylingMode',
                                    'tabIndex',
                                    'template',
                                    'text',
                                    'type',
                                    'useSubmitBehavior',
                                    'validationGroup',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsModule, declarations: [DxoOptionsComponent], exports: [DxoOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsModule });
            } exports("h", DxoOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoOptionsComponent
                                ],
                                exports: [
                                    DxoOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPageSizeComponent extends NestedOption {
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                get _optionPath() {
                    return 'pageSize';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'heightChange' },
                        { emit: 'widthChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPageSizeComponent, selector: "dxo-page-size", inputs: { height: "height", items: "items", width: "width" }, outputs: { heightChange: "heightChange", widthChange: "widthChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-page-size', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { height: [{
                            type: Input
                        }], items: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], heightChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoPageSizeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeModule, declarations: [DxoPageSizeComponent], exports: [DxoPageSizeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeModule });
            } exports("bm", DxoPageSizeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPageSizeComponent
                                ],
                                exports: [
                                    DxoPageSizeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPagerComponent extends NestedOption {
                get allowedPageSizes() {
                    return this._getOption('allowedPageSizes');
                }
                set allowedPageSizes(value) {
                    this._setOption('allowedPageSizes', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get infoText() {
                    return this._getOption('infoText');
                }
                set infoText(value) {
                    this._setOption('infoText', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get showInfo() {
                    return this._getOption('showInfo');
                }
                set showInfo(value) {
                    this._setOption('showInfo', value);
                }
                get showNavigationButtons() {
                    return this._getOption('showNavigationButtons');
                }
                set showNavigationButtons(value) {
                    this._setOption('showNavigationButtons', value);
                }
                get showPageSizeSelector() {
                    return this._getOption('showPageSizeSelector');
                }
                set showPageSizeSelector(value) {
                    this._setOption('showPageSizeSelector', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'pager';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPagerComponent, selector: "dxo-pager", inputs: { allowedPageSizes: "allowedPageSizes", displayMode: "displayMode", infoText: "infoText", label: "label", showInfo: "showInfo", showNavigationButtons: "showNavigationButtons", showPageSizeSelector: "showPageSizeSelector", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-pager', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowedPageSizes: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], infoText: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], showInfo: [{
                            type: Input
                        }], showNavigationButtons: [{
                            type: Input
                        }], showPageSizeSelector: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoPagerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerModule, declarations: [DxoPagerComponent], exports: [DxoPagerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerModule });
            } exports("d2", DxoPagerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPagerComponent
                                ],
                                exports: [
                                    DxoPagerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPagingComponent extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get pageIndex() {
                    return this._getOption('pageIndex');
                }
                set pageIndex(value) {
                    this._setOption('pageIndex', value);
                }
                get pageSize() {
                    return this._getOption('pageSize');
                }
                set pageSize(value) {
                    this._setOption('pageSize', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                pageIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                pageSizeChange;
                get _optionPath() {
                    return 'paging';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'pageIndexChange' },
                        { emit: 'pageSizeChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPagingComponent, selector: "dxo-paging", inputs: { enabled: "enabled", pageIndex: "pageIndex", pageSize: "pageSize" }, outputs: { pageIndexChange: "pageIndexChange", pageSizeChange: "pageSizeChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-paging', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { enabled: [{
                            type: Input
                        }], pageIndex: [{
                            type: Input
                        }], pageSize: [{
                            type: Input
                        }], pageIndexChange: [{
                            type: Output
                        }], pageSizeChange: [{
                            type: Output
                        }] } });
            class DxoPagingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingModule, declarations: [DxoPagingComponent], exports: [DxoPagingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingModule });
            } exports("d3", DxoPagingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPagingComponent
                                ],
                                exports: [
                                    DxoPagingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiPaneComponent extends CollectionNestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'panes';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiPaneComponent, selector: "dxi-pane", inputs: { backgroundColor: "backgroundColor", border: "border", height: "height", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("P", DxiPaneComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-pane', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxiPaneModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneModule, declarations: [DxiPaneComponent], exports: [DxiPaneComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneModule });
            } exports("aS", DxiPaneModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiPaneComponent
                                ],
                                exports: [
                                    DxiPaneComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPermissionsComponent extends NestedOption {
                get copy() {
                    return this._getOption('copy');
                }
                set copy(value) {
                    this._setOption('copy', value);
                }
                get create() {
                    return this._getOption('create');
                }
                set create(value) {
                    this._setOption('create', value);
                }
                get delete() {
                    return this._getOption('delete');
                }
                set delete(value) {
                    this._setOption('delete', value);
                }
                get download() {
                    return this._getOption('download');
                }
                set download(value) {
                    this._setOption('download', value);
                }
                get move() {
                    return this._getOption('move');
                }
                set move(value) {
                    this._setOption('move', value);
                }
                get rename() {
                    return this._getOption('rename');
                }
                set rename(value) {
                    this._setOption('rename', value);
                }
                get upload() {
                    return this._getOption('upload');
                }
                set upload(value) {
                    this._setOption('upload', value);
                }
                get _optionPath() {
                    return 'permissions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPermissionsComponent, selector: "dxo-permissions", inputs: { copy: "copy", create: "create", delete: "delete", download: "download", move: "move", rename: "rename", upload: "upload" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-permissions', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { copy: [{
                            type: Input
                        }], create: [{
                            type: Input
                        }], delete: [{
                            type: Input
                        }], download: [{
                            type: Input
                        }], move: [{
                            type: Input
                        }], rename: [{
                            type: Input
                        }], upload: [{
                            type: Input
                        }] } });
            class DxoPermissionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsModule, declarations: [DxoPermissionsComponent], exports: [DxoPermissionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsModule });
            } exports("by", DxoPermissionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPermissionsComponent
                                ],
                                exports: [
                                    DxoPermissionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPointComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get image() {
                    return this._getOption('image');
                }
                set image(value) {
                    this._setOption('image', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get symbol() {
                    return this._getOption('symbol');
                }
                set symbol(value) {
                    this._setOption('symbol', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'point';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPointComponent, selector: "dxo-point", inputs: { border: "border", color: "color", hoverMode: "hoverMode", hoverStyle: "hoverStyle", image: "image", selectionMode: "selectionMode", selectionStyle: "selectionStyle", size: "size", symbol: "symbol", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-point', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], hoverMode: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], image: [{
                            type: Input
                        }], selectionMode: [{
                            type: Input
                        }], selectionStyle: [{
                            type: Input
                        }], size: [{
                            type: Input
                        }], symbol: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoPointModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPointModule, declarations: [DxoPointComponent], exports: [DxoPointComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointModule });
            } exports("aj", DxoPointModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPointComponent
                                ],
                                exports: [
                                    DxoPointComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoPopupComponent extends DxoPopupOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                positionChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                get _optionPath() {
                    return 'popup';
                }
                get toolbarItemsChildren() {
                    return this._getOption('toolbarItems');
                }
                set toolbarItemsChildren(value) {
                    this.setChildren('toolbarItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'heightChange' },
                        { emit: 'positionChange' },
                        { emit: 'visibleChange' },
                        { emit: 'widthChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPopupComponent, selector: "dxo-popup", inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "toolbarItemsChildren", predicate: i0.forwardRef(() => DxiToolbarItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-popup', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'animation',
                                    'closeOnOutsideClick',
                                    'container',
                                    'contentTemplate',
                                    'deferRendering',
                                    'disabled',
                                    'dragAndResizeArea',
                                    'dragEnabled',
                                    'dragOutsideBoundary',
                                    'enableBodyScroll',
                                    'focusStateEnabled',
                                    'fullScreen',
                                    'height',
                                    'hideOnOutsideClick',
                                    'hideOnParentScroll',
                                    'hint',
                                    'hoverStateEnabled',
                                    'maxHeight',
                                    'maxWidth',
                                    'minHeight',
                                    'minWidth',
                                    'onContentReady',
                                    'onDisposing',
                                    'onHidden',
                                    'onHiding',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onResize',
                                    'onResizeEnd',
                                    'onResizeStart',
                                    'onShowing',
                                    'onShown',
                                    'onTitleRendered',
                                    'position',
                                    'resizeEnabled',
                                    'restorePosition',
                                    'rtlEnabled',
                                    'shading',
                                    'shadingColor',
                                    'showCloseButton',
                                    'showTitle',
                                    'tabIndex',
                                    'title',
                                    'titleTemplate',
                                    'toolbarItems',
                                    'visible',
                                    'width',
                                    'wrapperAttr'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { heightChange: [{
                            type: Output
                        }], positionChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], toolbarItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiToolbarItemComponent)]
                        }] } });
            class DxoPopupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupModule, declarations: [DxoPopupComponent], exports: [DxoPopupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupModule });
            } exports("cZ", DxoPopupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPopupComponent
                                ],
                                exports: [
                                    DxoPopupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPositionConfig extends NestedOption {
                get at() {
                    return this._getOption('at');
                }
                set at(value) {
                    this._setOption('at', value);
                }
                get boundary() {
                    return this._getOption('boundary');
                }
                set boundary(value) {
                    this._setOption('boundary', value);
                }
                get boundaryOffset() {
                    return this._getOption('boundaryOffset');
                }
                set boundaryOffset(value) {
                    this._setOption('boundaryOffset', value);
                }
                get collision() {
                    return this._getOption('collision');
                }
                set collision(value) {
                    this._setOption('collision', value);
                }
                get my() {
                    return this._getOption('my');
                }
                set my(value) {
                    this._setOption('my', value);
                }
                get of() {
                    return this._getOption('of');
                }
                set of(value) {
                    this._setOption('of', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPositionConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionConfig, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoPositionComponent extends DxoPositionConfig {
                get _optionPath() {
                    return 'position';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPositionComponent, selector: "dxo-position", inputs: { at: "at", boundary: "boundary", boundaryOffset: "boundaryOffset", collision: "collision", my: "my", of: "of", offset: "offset" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-position', template: '', providers: [NestedOptionHost], inputs: [
                                    'at',
                                    'boundary',
                                    'boundaryOffset',
                                    'collision',
                                    'my',
                                    'of',
                                    'offset'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoPositionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionModule, declarations: [DxoPositionComponent], exports: [DxoPositionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionModule });
            } exports("m", DxoPositionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPositionComponent
                                ],
                                exports: [
                                    DxoPositionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoVectorMapProjectionConfig extends NestedOption {
                get aspectRatio() {
                    return this._getOption('aspectRatio');
                }
                set aspectRatio(value) {
                    this._setOption('aspectRatio', value);
                }
                get from() {
                    return this._getOption('from');
                }
                set from(value) {
                    this._setOption('from', value);
                }
                get to() {
                    return this._getOption('to');
                }
                set to(value) {
                    this._setOption('to', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVectorMapProjectionConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoVectorMapProjectionConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVectorMapProjectionConfig, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoProjectionComponent extends DxoVectorMapProjectionConfig {
                get _optionPath() {
                    return 'projection';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoProjectionComponent, selector: "dxo-projection", inputs: { aspectRatio: "aspectRatio", from: "from", to: "to" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-projection', template: '', providers: [NestedOptionHost], inputs: [
                                    'aspectRatio',
                                    'from',
                                    'to'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoProjectionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionModule, declarations: [DxoProjectionComponent], exports: [DxoProjectionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionModule });
            } exports("dj", DxoProjectionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoProjectionComponent
                                ],
                                exports: [
                                    DxoProjectionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPropertiesPanelComponent extends NestedOption {
                get tabs() {
                    return this._getOption('tabs');
                }
                set tabs(value) {
                    this._setOption('tabs', value);
                }
                get visibility() {
                    return this._getOption('visibility');
                }
                set visibility(value) {
                    this._setOption('visibility', value);
                }
                get _optionPath() {
                    return 'propertiesPanel';
                }
                get tabsChildren() {
                    return this._getOption('tabs');
                }
                set tabsChildren(value) {
                    this.setChildren('tabs', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPropertiesPanelComponent, selector: "dxo-properties-panel", inputs: { tabs: "tabs", visibility: "visibility" }, providers: [NestedOptionHost], queries: [{ propertyName: "tabsChildren", predicate: i0.forwardRef(() => DxiTabComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-properties-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { tabs: [{
                            type: Input
                        }], visibility: [{
                            type: Input
                        }], tabsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiTabComponent)]
                        }] } });
            class DxoPropertiesPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelModule, declarations: [DxoPropertiesPanelComponent], exports: [DxoPropertiesPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelModule });
            } exports("bn", DxoPropertiesPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPropertiesPanelComponent
                                ],
                                exports: [
                                    DxoPropertiesPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiRangeComponent extends CollectionNestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get endValue() {
                    return this._getOption('endValue');
                }
                set endValue(value) {
                    this._setOption('endValue', value);
                }
                get startValue() {
                    return this._getOption('startValue');
                }
                set startValue(value) {
                    this._setOption('startValue', value);
                }
                get _optionPath() {
                    return 'ranges';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiRangeComponent, selector: "dxi-range", inputs: { color: "color", endValue: "endValue", startValue: "startValue" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-range', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], endValue: [{
                            type: Input
                        }], startValue: [{
                            type: Input
                        }] } });
            class DxiRangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeModule, declarations: [DxiRangeComponent], exports: [DxiRangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeModule });
            } exports("a_", DxiRangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiRangeComponent
                                ],
                                exports: [
                                    DxiRangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoRangeContainerComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get paletteExtensionMode() {
                    return this._getOption('paletteExtensionMode');
                }
                set paletteExtensionMode(value) {
                    this._setOption('paletteExtensionMode', value);
                }
                get ranges() {
                    return this._getOption('ranges');
                }
                set ranges(value) {
                    this._setOption('ranges', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get horizontalOrientation() {
                    return this._getOption('horizontalOrientation');
                }
                set horizontalOrientation(value) {
                    this._setOption('horizontalOrientation', value);
                }
                get verticalOrientation() {
                    return this._getOption('verticalOrientation');
                }
                set verticalOrientation(value) {
                    this._setOption('verticalOrientation', value);
                }
                get _optionPath() {
                    return 'rangeContainer';
                }
                get rangesChildren() {
                    return this._getOption('ranges');
                }
                set rangesChildren(value) {
                    this.setChildren('ranges', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRangeContainerComponent, selector: "dxo-range-container", inputs: { backgroundColor: "backgroundColor", offset: "offset", orientation: "orientation", palette: "palette", paletteExtensionMode: "paletteExtensionMode", ranges: "ranges", width: "width", horizontalOrientation: "horizontalOrientation", verticalOrientation: "verticalOrientation" }, providers: [NestedOptionHost], queries: [{ propertyName: "rangesChildren", predicate: i0.forwardRef(() => DxiRangeComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-range-container', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }], palette: [{
                            type: Input
                        }], paletteExtensionMode: [{
                            type: Input
                        }], ranges: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], horizontalOrientation: [{
                            type: Input
                        }], verticalOrientation: [{
                            type: Input
                        }], rangesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiRangeComponent)]
                        }] } });
            class DxoRangeContainerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerModule, declarations: [DxoRangeContainerComponent], exports: [DxoRangeContainerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerModule });
            } exports("aZ", DxoRangeContainerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRangeContainerComponent
                                ],
                                exports: [
                                    DxoRangeContainerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoRangeareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'rangearea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRangeareaComponent, selector: "dxo-rangearea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-rangearea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoRangeareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaModule, declarations: [DxoRangeareaComponent], exports: [DxoRangeareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaModule });
            } exports("aB", DxoRangeareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRangeareaComponent
                                ],
                                exports: [
                                    DxoRangeareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoRangebarComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'rangebar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRangebarComponent, selector: "dxo-rangebar", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-rangebar', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoRangebarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarModule, declarations: [DxoRangebarComponent], exports: [DxoRangebarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarModule });
            } exports("aC", DxoRangebarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRangebarComponent
                                ],
                                exports: [
                                    DxoRangebarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoReductionComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get level() {
                    return this._getOption('level');
                }
                set level(value) {
                    this._setOption('level', value);
                }
                get _optionPath() {
                    return 'reduction';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoReductionComponent, selector: "dxo-reduction", inputs: { color: "color", level: "level" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-reduction', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], level: [{
                            type: Input
                        }] } });
            class DxoReductionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionModule, declarations: [DxoReductionComponent], exports: [DxoReductionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionModule });
            } exports("ao", DxoReductionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoReductionComponent
                                ],
                                exports: [
                                    DxoReductionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoRemoteOperationsComponent extends NestedOption {
                get filtering() {
                    return this._getOption('filtering');
                }
                set filtering(value) {
                    this._setOption('filtering', value);
                }
                get grouping() {
                    return this._getOption('grouping');
                }
                set grouping(value) {
                    this._setOption('grouping', value);
                }
                get groupPaging() {
                    return this._getOption('groupPaging');
                }
                set groupPaging(value) {
                    this._setOption('groupPaging', value);
                }
                get paging() {
                    return this._getOption('paging');
                }
                set paging(value) {
                    this._setOption('paging', value);
                }
                get sorting() {
                    return this._getOption('sorting');
                }
                set sorting(value) {
                    this._setOption('sorting', value);
                }
                get summary() {
                    return this._getOption('summary');
                }
                set summary(value) {
                    this._setOption('summary', value);
                }
                get _optionPath() {
                    return 'remoteOperations';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRemoteOperationsComponent, selector: "dxo-remote-operations", inputs: { filtering: "filtering", grouping: "grouping", groupPaging: "groupPaging", paging: "paging", sorting: "sorting", summary: "summary" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-remote-operations', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { filtering: [{
                            type: Input
                        }], grouping: [{
                            type: Input
                        }], groupPaging: [{
                            type: Input
                        }], paging: [{
                            type: Input
                        }], sorting: [{
                            type: Input
                        }], summary: [{
                            type: Input
                        }] } });
            class DxoRemoteOperationsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsModule, declarations: [DxoRemoteOperationsComponent], exports: [DxoRemoteOperationsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsModule });
            } exports("d4", DxoRemoteOperationsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRemoteOperationsComponent
                                ],
                                exports: [
                                    DxoRemoteOperationsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoResourceAssignmentsComponent extends NestedOption {
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get resourceIdExpr() {
                    return this._getOption('resourceIdExpr');
                }
                set resourceIdExpr(value) {
                    this._setOption('resourceIdExpr', value);
                }
                get taskIdExpr() {
                    return this._getOption('taskIdExpr');
                }
                set taskIdExpr(value) {
                    this._setOption('taskIdExpr', value);
                }
                get _optionPath() {
                    return 'resourceAssignments';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoResourceAssignmentsComponent, selector: "dxo-resource-assignments", inputs: { dataSource: "dataSource", keyExpr: "keyExpr", resourceIdExpr: "resourceIdExpr", taskIdExpr: "taskIdExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-resource-assignments', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { dataSource: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], resourceIdExpr: [{
                            type: Input
                        }], taskIdExpr: [{
                            type: Input
                        }] } });
            class DxoResourceAssignmentsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsModule, declarations: [DxoResourceAssignmentsComponent], exports: [DxoResourceAssignmentsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsModule });
            } exports("bW", DxoResourceAssignmentsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoResourceAssignmentsComponent
                                ],
                                exports: [
                                    DxoResourceAssignmentsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiResourceComponent extends CollectionNestedOption {
                get allowMultiple() {
                    return this._getOption('allowMultiple');
                }
                set allowMultiple(value) {
                    this._setOption('allowMultiple', value);
                }
                get colorExpr() {
                    return this._getOption('colorExpr');
                }
                set colorExpr(value) {
                    this._setOption('colorExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get displayExpr() {
                    return this._getOption('displayExpr');
                }
                set displayExpr(value) {
                    this._setOption('displayExpr', value);
                }
                get fieldExpr() {
                    return this._getOption('fieldExpr');
                }
                set fieldExpr(value) {
                    this._setOption('fieldExpr', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get useColorAsDefault() {
                    return this._getOption('useColorAsDefault');
                }
                set useColorAsDefault(value) {
                    this._setOption('useColorAsDefault', value);
                }
                get valueExpr() {
                    return this._getOption('valueExpr');
                }
                set valueExpr(value) {
                    this._setOption('valueExpr', value);
                }
                get _optionPath() {
                    return 'resources';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiResourceComponent, selector: "dxi-resource", inputs: { allowMultiple: "allowMultiple", colorExpr: "colorExpr", dataSource: "dataSource", displayExpr: "displayExpr", fieldExpr: "fieldExpr", label: "label", useColorAsDefault: "useColorAsDefault", valueExpr: "valueExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cN", DxiResourceComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-resource', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowMultiple: [{
                            type: Input
                        }], colorExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], displayExpr: [{
                            type: Input
                        }], fieldExpr: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], useColorAsDefault: [{
                            type: Input
                        }], valueExpr: [{
                            type: Input
                        }] } });
            class DxiResourceModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceModule, declarations: [DxiResourceComponent], exports: [DxiResourceComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceModule });
            } exports("cQ", DxiResourceModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiResourceComponent
                                ],
                                exports: [
                                    DxiResourceComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoResourcesComponent extends NestedOption {
                get colorExpr() {
                    return this._getOption('colorExpr');
                }
                set colorExpr(value) {
                    this._setOption('colorExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get textExpr() {
                    return this._getOption('textExpr');
                }
                set textExpr(value) {
                    this._setOption('textExpr', value);
                }
                get _optionPath() {
                    return 'resources';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoResourcesComponent, selector: "dxo-resources", inputs: { colorExpr: "colorExpr", dataSource: "dataSource", keyExpr: "keyExpr", textExpr: "textExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-resources', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { colorExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], textExpr: [{
                            type: Input
                        }] } });
            class DxoResourcesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesModule, declarations: [DxoResourcesComponent], exports: [DxoResourcesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesModule });
            } exports("bX", DxoResourcesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoResourcesComponent
                                ],
                                exports: [
                                    DxoResourcesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiRouteComponent extends CollectionNestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get locations() {
                    return this._getOption('locations');
                }
                set locations(value) {
                    this._setOption('locations', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get weight() {
                    return this._getOption('weight');
                }
                set weight(value) {
                    this._setOption('weight', value);
                }
                get _optionPath() {
                    return 'routes';
                }
                get locationsChildren() {
                    return this._getOption('locations');
                }
                set locationsChildren(value) {
                    this.setChildren('locations', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiRouteComponent, selector: "dxi-route", inputs: { color: "color", locations: "locations", mode: "mode", opacity: "opacity", weight: "weight" }, providers: [NestedOptionHost], queries: [{ propertyName: "locationsChildren", predicate: i0.forwardRef(() => DxiLocationComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cg", DxiRouteComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-route', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], locations: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], weight: [{
                            type: Input
                        }], locationsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiLocationComponent)]
                        }] } });
            class DxiRouteModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteModule, declarations: [DxiRouteComponent], exports: [DxiRouteComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteModule });
            } exports("cl", DxiRouteModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiRouteComponent
                                ],
                                exports: [
                                    DxiRouteComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoRowDraggingComponent extends NestedOption {
                get allowDropInsideItem() {
                    return this._getOption('allowDropInsideItem');
                }
                set allowDropInsideItem(value) {
                    this._setOption('allowDropInsideItem', value);
                }
                get allowReordering() {
                    return this._getOption('allowReordering');
                }
                set allowReordering(value) {
                    this._setOption('allowReordering', value);
                }
                get autoScroll() {
                    return this._getOption('autoScroll');
                }
                set autoScroll(value) {
                    this._setOption('autoScroll', value);
                }
                get boundary() {
                    return this._getOption('boundary');
                }
                set boundary(value) {
                    this._setOption('boundary', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get cursorOffset() {
                    return this._getOption('cursorOffset');
                }
                set cursorOffset(value) {
                    this._setOption('cursorOffset', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get dragDirection() {
                    return this._getOption('dragDirection');
                }
                set dragDirection(value) {
                    this._setOption('dragDirection', value);
                }
                get dragTemplate() {
                    return this._getOption('dragTemplate');
                }
                set dragTemplate(value) {
                    this._setOption('dragTemplate', value);
                }
                get dropFeedbackMode() {
                    return this._getOption('dropFeedbackMode');
                }
                set dropFeedbackMode(value) {
                    this._setOption('dropFeedbackMode', value);
                }
                get filter() {
                    return this._getOption('filter');
                }
                set filter(value) {
                    this._setOption('filter', value);
                }
                get group() {
                    return this._getOption('group');
                }
                set group(value) {
                    this._setOption('group', value);
                }
                get handle() {
                    return this._getOption('handle');
                }
                set handle(value) {
                    this._setOption('handle', value);
                }
                get onAdd() {
                    return this._getOption('onAdd');
                }
                set onAdd(value) {
                    this._setOption('onAdd', value);
                }
                get onDragChange() {
                    return this._getOption('onDragChange');
                }
                set onDragChange(value) {
                    this._setOption('onDragChange', value);
                }
                get onDragEnd() {
                    return this._getOption('onDragEnd');
                }
                set onDragEnd(value) {
                    this._setOption('onDragEnd', value);
                }
                get onDragMove() {
                    return this._getOption('onDragMove');
                }
                set onDragMove(value) {
                    this._setOption('onDragMove', value);
                }
                get onDragStart() {
                    return this._getOption('onDragStart');
                }
                set onDragStart(value) {
                    this._setOption('onDragStart', value);
                }
                get onRemove() {
                    return this._getOption('onRemove');
                }
                set onRemove(value) {
                    this._setOption('onRemove', value);
                }
                get onReorder() {
                    return this._getOption('onReorder');
                }
                set onReorder(value) {
                    this._setOption('onReorder', value);
                }
                get scrollSensitivity() {
                    return this._getOption('scrollSensitivity');
                }
                set scrollSensitivity(value) {
                    this._setOption('scrollSensitivity', value);
                }
                get scrollSpeed() {
                    return this._getOption('scrollSpeed');
                }
                set scrollSpeed(value) {
                    this._setOption('scrollSpeed', value);
                }
                get showDragIcons() {
                    return this._getOption('showDragIcons');
                }
                set showDragIcons(value) {
                    this._setOption('showDragIcons', value);
                }
                get _optionPath() {
                    return 'rowDragging';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRowDraggingComponent, selector: "dxo-row-dragging", inputs: { allowDropInsideItem: "allowDropInsideItem", allowReordering: "allowReordering", autoScroll: "autoScroll", boundary: "boundary", container: "container", cursorOffset: "cursorOffset", data: "data", dragDirection: "dragDirection", dragTemplate: "dragTemplate", dropFeedbackMode: "dropFeedbackMode", filter: "filter", group: "group", handle: "handle", onAdd: "onAdd", onDragChange: "onDragChange", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onRemove: "onRemove", onReorder: "onReorder", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed", showDragIcons: "showDragIcons" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-row-dragging', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowDropInsideItem: [{
                            type: Input
                        }], allowReordering: [{
                            type: Input
                        }], autoScroll: [{
                            type: Input
                        }], boundary: [{
                            type: Input
                        }], container: [{
                            type: Input
                        }], cursorOffset: [{
                            type: Input
                        }], data: [{
                            type: Input
                        }], dragDirection: [{
                            type: Input
                        }], dragTemplate: [{
                            type: Input
                        }], dropFeedbackMode: [{
                            type: Input
                        }], filter: [{
                            type: Input
                        }], group: [{
                            type: Input
                        }], handle: [{
                            type: Input
                        }], onAdd: [{
                            type: Input
                        }], onDragChange: [{
                            type: Input
                        }], onDragEnd: [{
                            type: Input
                        }], onDragMove: [{
                            type: Input
                        }], onDragStart: [{
                            type: Input
                        }], onRemove: [{
                            type: Input
                        }], onReorder: [{
                            type: Input
                        }], scrollSensitivity: [{
                            type: Input
                        }], scrollSpeed: [{
                            type: Input
                        }], showDragIcons: [{
                            type: Input
                        }] } });
            class DxoRowDraggingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingModule, declarations: [DxoRowDraggingComponent], exports: [DxoRowDraggingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingModule });
            } exports("d5", DxoRowDraggingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRowDraggingComponent
                                ],
                                exports: [
                                    DxoRowDraggingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiRowComponent extends CollectionNestedOption {
                get baseSize() {
                    return this._getOption('baseSize');
                }
                set baseSize(value) {
                    this._setOption('baseSize', value);
                }
                get ratio() {
                    return this._getOption('ratio');
                }
                set ratio(value) {
                    this._setOption('ratio', value);
                }
                get screen() {
                    return this._getOption('screen');
                }
                set screen(value) {
                    this._setOption('screen', value);
                }
                get shrink() {
                    return this._getOption('shrink');
                }
                set shrink(value) {
                    this._setOption('shrink', value);
                }
                get _optionPath() {
                    return 'rows';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiRowComponent, selector: "dxi-row", inputs: { baseSize: "baseSize", ratio: "ratio", screen: "screen", shrink: "shrink" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cI", DxiRowComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-row', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { baseSize: [{
                            type: Input
                        }], ratio: [{
                            type: Input
                        }], screen: [{
                            type: Input
                        }], shrink: [{
                            type: Input
                        }] } });
            class DxiRowModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiRowModule, declarations: [DxiRowComponent], exports: [DxiRowComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowModule });
            } exports("cK", DxiRowModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiRowComponent
                                ],
                                exports: [
                                    DxiRowComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoScaleTypeRangeComponent extends NestedOption {
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                get _optionPath() {
                    return 'scaleTypeRange';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScaleTypeRangeComponent, selector: "dxo-scale-type-range", inputs: { max: "max", min: "min" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-scale-type-range', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { max: [{
                            type: Input
                        }], min: [{
                            type: Input
                        }] } });
            class DxoScaleTypeRangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeModule, declarations: [DxoScaleTypeRangeComponent], exports: [DxoScaleTypeRangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeModule });
            } exports("bY", DxoScaleTypeRangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScaleTypeRangeComponent
                                ],
                                exports: [
                                    DxoScaleTypeRangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoScaleComponent extends NestedOption {
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get customMinorTicks() {
                    return this._getOption('customMinorTicks');
                }
                set customMinorTicks(value) {
                    this._setOption('customMinorTicks', value);
                }
                get customTicks() {
                    return this._getOption('customTicks');
                }
                set customTicks(value) {
                    this._setOption('customTicks', value);
                }
                get endValue() {
                    return this._getOption('endValue');
                }
                set endValue(value) {
                    this._setOption('endValue', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minorTickInterval() {
                    return this._getOption('minorTickInterval');
                }
                set minorTickInterval(value) {
                    this._setOption('minorTickInterval', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get scaleDivisionFactor() {
                    return this._getOption('scaleDivisionFactor');
                }
                set scaleDivisionFactor(value) {
                    this._setOption('scaleDivisionFactor', value);
                }
                get startValue() {
                    return this._getOption('startValue');
                }
                set startValue(value) {
                    this._setOption('startValue', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get tickInterval() {
                    return this._getOption('tickInterval');
                }
                set tickInterval(value) {
                    this._setOption('tickInterval', value);
                }
                get horizontalOrientation() {
                    return this._getOption('horizontalOrientation');
                }
                set horizontalOrientation(value) {
                    this._setOption('horizontalOrientation', value);
                }
                get verticalOrientation() {
                    return this._getOption('verticalOrientation');
                }
                set verticalOrientation(value) {
                    this._setOption('verticalOrientation', value);
                }
                get aggregateByCategory() {
                    return this._getOption('aggregateByCategory');
                }
                set aggregateByCategory(value) {
                    this._setOption('aggregateByCategory', value);
                }
                get aggregationGroupWidth() {
                    return this._getOption('aggregationGroupWidth');
                }
                set aggregationGroupWidth(value) {
                    this._setOption('aggregationGroupWidth', value);
                }
                get aggregationInterval() {
                    return this._getOption('aggregationInterval');
                }
                set aggregationInterval(value) {
                    this._setOption('aggregationInterval', value);
                }
                get breaks() {
                    return this._getOption('breaks');
                }
                set breaks(value) {
                    this._setOption('breaks', value);
                }
                get breakStyle() {
                    return this._getOption('breakStyle');
                }
                set breakStyle(value) {
                    this._setOption('breakStyle', value);
                }
                get categories() {
                    return this._getOption('categories');
                }
                set categories(value) {
                    this._setOption('categories', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get holidays() {
                    return this._getOption('holidays');
                }
                set holidays(value) {
                    this._setOption('holidays', value);
                }
                get linearThreshold() {
                    return this._getOption('linearThreshold');
                }
                set linearThreshold(value) {
                    this._setOption('linearThreshold', value);
                }
                get logarithmBase() {
                    return this._getOption('logarithmBase');
                }
                set logarithmBase(value) {
                    this._setOption('logarithmBase', value);
                }
                get marker() {
                    return this._getOption('marker');
                }
                set marker(value) {
                    this._setOption('marker', value);
                }
                get maxRange() {
                    return this._getOption('maxRange');
                }
                set maxRange(value) {
                    this._setOption('maxRange', value);
                }
                get minorTickCount() {
                    return this._getOption('minorTickCount');
                }
                set minorTickCount(value) {
                    this._setOption('minorTickCount', value);
                }
                get minRange() {
                    return this._getOption('minRange');
                }
                set minRange(value) {
                    this._setOption('minRange', value);
                }
                get placeholderHeight() {
                    return this._getOption('placeholderHeight');
                }
                set placeholderHeight(value) {
                    this._setOption('placeholderHeight', value);
                }
                get showCustomBoundaryTicks() {
                    return this._getOption('showCustomBoundaryTicks');
                }
                set showCustomBoundaryTicks(value) {
                    this._setOption('showCustomBoundaryTicks', value);
                }
                get singleWorkdays() {
                    return this._getOption('singleWorkdays');
                }
                set singleWorkdays(value) {
                    this._setOption('singleWorkdays', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueType() {
                    return this._getOption('valueType');
                }
                set valueType(value) {
                    this._setOption('valueType', value);
                }
                get workdaysOnly() {
                    return this._getOption('workdaysOnly');
                }
                set workdaysOnly(value) {
                    this._setOption('workdaysOnly', value);
                }
                get workWeek() {
                    return this._getOption('workWeek');
                }
                set workWeek(value) {
                    this._setOption('workWeek', value);
                }
                get _optionPath() {
                    return 'scale';
                }
                get breaksChildren() {
                    return this._getOption('breaks');
                }
                set breaksChildren(value) {
                    this.setChildren('breaks', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScaleComponent, selector: "dxo-scale", inputs: { allowDecimals: "allowDecimals", customMinorTicks: "customMinorTicks", customTicks: "customTicks", endValue: "endValue", label: "label", minorTick: "minorTick", minorTickInterval: "minorTickInterval", orientation: "orientation", scaleDivisionFactor: "scaleDivisionFactor", startValue: "startValue", tick: "tick", tickInterval: "tickInterval", horizontalOrientation: "horizontalOrientation", verticalOrientation: "verticalOrientation", aggregateByCategory: "aggregateByCategory", aggregationGroupWidth: "aggregationGroupWidth", aggregationInterval: "aggregationInterval", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", holidays: "holidays", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", marker: "marker", maxRange: "maxRange", minorTickCount: "minorTickCount", minRange: "minRange", placeholderHeight: "placeholderHeight", showCustomBoundaryTicks: "showCustomBoundaryTicks", singleWorkdays: "singleWorkdays", type: "type", valueType: "valueType", workdaysOnly: "workdaysOnly", workWeek: "workWeek" }, providers: [NestedOptionHost], queries: [{ propertyName: "breaksChildren", predicate: i0.forwardRef(() => DxiBreakComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-scale', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowDecimals: [{
                            type: Input
                        }], customMinorTicks: [{
                            type: Input
                        }], customTicks: [{
                            type: Input
                        }], endValue: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minorTickInterval: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }], scaleDivisionFactor: [{
                            type: Input
                        }], startValue: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], tickInterval: [{
                            type: Input
                        }], horizontalOrientation: [{
                            type: Input
                        }], verticalOrientation: [{
                            type: Input
                        }], aggregateByCategory: [{
                            type: Input
                        }], aggregationGroupWidth: [{
                            type: Input
                        }], aggregationInterval: [{
                            type: Input
                        }], breaks: [{
                            type: Input
                        }], breakStyle: [{
                            type: Input
                        }], categories: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], holidays: [{
                            type: Input
                        }], linearThreshold: [{
                            type: Input
                        }], logarithmBase: [{
                            type: Input
                        }], marker: [{
                            type: Input
                        }], maxRange: [{
                            type: Input
                        }], minorTickCount: [{
                            type: Input
                        }], minRange: [{
                            type: Input
                        }], placeholderHeight: [{
                            type: Input
                        }], showCustomBoundaryTicks: [{
                            type: Input
                        }], singleWorkdays: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], valueType: [{
                            type: Input
                        }], workdaysOnly: [{
                            type: Input
                        }], workWeek: [{
                            type: Input
                        }], breaksChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiBreakComponent)]
                        }] } });
            class DxoScaleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleModule, declarations: [DxoScaleComponent], exports: [DxoScaleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleModule });
            } exports("a$", DxoScaleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScaleComponent
                                ],
                                exports: [
                                    DxoScaleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoScatterComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'scatter';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScatterComponent, selector: "dxo-scatter", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-scatter', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoScatterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterModule, declarations: [DxoScatterComponent], exports: [DxoScatterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterModule });
            } exports("aD", DxoScatterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScatterComponent
                                ],
                                exports: [
                                    DxoScatterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoScrollBarComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'scrollBar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScrollBarComponent, selector: "dxo-scroll-bar", inputs: { color: "color", offset: "offset", opacity: "opacity", position: "position", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-scroll-bar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoScrollBarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarModule, declarations: [DxoScrollBarComponent], exports: [DxoScrollBarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarModule });
            } exports("aT", DxoScrollBarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScrollBarComponent
                                ],
                                exports: [
                                    DxoScrollBarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSchedulerScrolling extends NestedOption {
                get columnRenderingMode() {
                    return this._getOption('columnRenderingMode');
                }
                set columnRenderingMode(value) {
                    this._setOption('columnRenderingMode', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get preloadEnabled() {
                    return this._getOption('preloadEnabled');
                }
                set preloadEnabled(value) {
                    this._setOption('preloadEnabled', value);
                }
                get renderAsync() {
                    return this._getOption('renderAsync');
                }
                set renderAsync(value) {
                    this._setOption('renderAsync', value);
                }
                get rowRenderingMode() {
                    return this._getOption('rowRenderingMode');
                }
                set rowRenderingMode(value) {
                    this._setOption('rowRenderingMode', value);
                }
                get scrollByContent() {
                    return this._getOption('scrollByContent');
                }
                set scrollByContent(value) {
                    this._setOption('scrollByContent', value);
                }
                get scrollByThumb() {
                    return this._getOption('scrollByThumb');
                }
                set scrollByThumb(value) {
                    this._setOption('scrollByThumb', value);
                }
                get showScrollbar() {
                    return this._getOption('showScrollbar');
                }
                set showScrollbar(value) {
                    this._setOption('showScrollbar', value);
                }
                get useNative() {
                    return this._getOption('useNative');
                }
                set useNative(value) {
                    this._setOption('useNative', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSchedulerScrolling, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSchedulerScrolling, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSchedulerScrolling, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoScrollingComponent extends DxoSchedulerScrolling {
                get _optionPath() {
                    return 'scrolling';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScrollingComponent, selector: "dxo-scrolling", inputs: { columnRenderingMode: "columnRenderingMode", mode: "mode", preloadEnabled: "preloadEnabled", renderAsync: "renderAsync", rowRenderingMode: "rowRenderingMode", scrollByContent: "scrollByContent", scrollByThumb: "scrollByThumb", showScrollbar: "showScrollbar", useNative: "useNative" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-scrolling', template: '', providers: [NestedOptionHost], inputs: [
                                    'columnRenderingMode',
                                    'mode',
                                    'preloadEnabled',
                                    'renderAsync',
                                    'rowRenderingMode',
                                    'scrollByContent',
                                    'scrollByThumb',
                                    'showScrollbar',
                                    'useNative'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoScrollingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingModule, declarations: [DxoScrollingComponent], exports: [DxoScrollingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingModule });
            } exports("ct", DxoScrollingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScrollingComponent
                                ],
                                exports: [
                                    DxoScrollingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTextBoxOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get buttons() {
                    return this._getOption('buttons');
                }
                set buttons(value) {
                    this._setOption('buttons', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get inputAttr() {
                    return this._getOption('inputAttr');
                }
                set inputAttr(value) {
                    this._setOption('inputAttr', value);
                }
                get isDirty() {
                    return this._getOption('isDirty');
                }
                set isDirty(value) {
                    this._setOption('isDirty', value);
                }
                get isValid() {
                    return this._getOption('isValid');
                }
                set isValid(value) {
                    this._setOption('isValid', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get labelMode() {
                    return this._getOption('labelMode');
                }
                set labelMode(value) {
                    this._setOption('labelMode', value);
                }
                get mask() {
                    return this._getOption('mask');
                }
                set mask(value) {
                    this._setOption('mask', value);
                }
                get maskChar() {
                    return this._getOption('maskChar');
                }
                set maskChar(value) {
                    this._setOption('maskChar', value);
                }
                get maskInvalidMessage() {
                    return this._getOption('maskInvalidMessage');
                }
                set maskInvalidMessage(value) {
                    this._setOption('maskInvalidMessage', value);
                }
                get maskRules() {
                    return this._getOption('maskRules');
                }
                set maskRules(value) {
                    this._setOption('maskRules', value);
                }
                get maxLength() {
                    return this._getOption('maxLength');
                }
                set maxLength(value) {
                    this._setOption('maxLength', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get onChange() {
                    return this._getOption('onChange');
                }
                set onChange(value) {
                    this._setOption('onChange', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onCopy() {
                    return this._getOption('onCopy');
                }
                set onCopy(value) {
                    this._setOption('onCopy', value);
                }
                get onCut() {
                    return this._getOption('onCut');
                }
                set onCut(value) {
                    this._setOption('onCut', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onEnterKey() {
                    return this._getOption('onEnterKey');
                }
                set onEnterKey(value) {
                    this._setOption('onEnterKey', value);
                }
                get onFocusIn() {
                    return this._getOption('onFocusIn');
                }
                set onFocusIn(value) {
                    this._setOption('onFocusIn', value);
                }
                get onFocusOut() {
                    return this._getOption('onFocusOut');
                }
                set onFocusOut(value) {
                    this._setOption('onFocusOut', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onInput() {
                    return this._getOption('onInput');
                }
                set onInput(value) {
                    this._setOption('onInput', value);
                }
                get onKeyDown() {
                    return this._getOption('onKeyDown');
                }
                set onKeyDown(value) {
                    this._setOption('onKeyDown', value);
                }
                get onKeyUp() {
                    return this._getOption('onKeyUp');
                }
                set onKeyUp(value) {
                    this._setOption('onKeyUp', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onPaste() {
                    return this._getOption('onPaste');
                }
                set onPaste(value) {
                    this._setOption('onPaste', value);
                }
                get onValueChanged() {
                    return this._getOption('onValueChanged');
                }
                set onValueChanged(value) {
                    this._setOption('onValueChanged', value);
                }
                get placeholder() {
                    return this._getOption('placeholder');
                }
                set placeholder(value) {
                    this._setOption('placeholder', value);
                }
                get readOnly() {
                    return this._getOption('readOnly');
                }
                set readOnly(value) {
                    this._setOption('readOnly', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get showClearButton() {
                    return this._getOption('showClearButton');
                }
                set showClearButton(value) {
                    this._setOption('showClearButton', value);
                }
                get showMaskMode() {
                    return this._getOption('showMaskMode');
                }
                set showMaskMode(value) {
                    this._setOption('showMaskMode', value);
                }
                get spellcheck() {
                    return this._getOption('spellcheck');
                }
                set spellcheck(value) {
                    this._setOption('spellcheck', value);
                }
                get stylingMode() {
                    return this._getOption('stylingMode');
                }
                set stylingMode(value) {
                    this._setOption('stylingMode', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get useMaskedValue() {
                    return this._getOption('useMaskedValue');
                }
                set useMaskedValue(value) {
                    this._setOption('useMaskedValue', value);
                }
                get validationError() {
                    return this._getOption('validationError');
                }
                set validationError(value) {
                    this._setOption('validationError', value);
                }
                get validationErrors() {
                    return this._getOption('validationErrors');
                }
                set validationErrors(value) {
                    this._setOption('validationErrors', value);
                }
                get validationMessageMode() {
                    return this._getOption('validationMessageMode');
                }
                set validationMessageMode(value) {
                    this._setOption('validationMessageMode', value);
                }
                get validationMessagePosition() {
                    return this._getOption('validationMessagePosition');
                }
                set validationMessagePosition(value) {
                    this._setOption('validationMessagePosition', value);
                }
                get validationStatus() {
                    return this._getOption('validationStatus');
                }
                set validationStatus(value) {
                    this._setOption('validationStatus', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get valueChangeEvent() {
                    return this._getOption('valueChangeEvent');
                }
                set valueChangeEvent(value) {
                    this._setOption('valueChangeEvent', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextBoxOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTextBoxOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextBoxOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSearchEditorOptionsComponent extends DxoTextBoxOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                textChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'searchEditorOptions';
                }
                get buttonsChildren() {
                    return this._getOption('buttons');
                }
                set buttonsChildren(value) {
                    this.setChildren('buttons', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'textChange' },
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSearchEditorOptionsComponent, selector: "dxo-search-editor-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", buttons: "buttons", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", isDirty: "isDirty", isValid: "isValid", label: "label", labelMode: "labelMode", mask: "mask", maskChar: "maskChar", maskInvalidMessage: "maskInvalidMessage", maskRules: "maskRules", maxLength: "maxLength", mode: "mode", name: "name", onChange: "onChange", onContentReady: "onContentReady", onCopy: "onCopy", onCut: "onCut", onDisposing: "onDisposing", onEnterKey: "onEnterKey", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onInitialized: "onInitialized", onInput: "onInput", onKeyDown: "onKeyDown", onKeyUp: "onKeyUp", onOptionChanged: "onOptionChanged", onPaste: "onPaste", onValueChanged: "onValueChanged", placeholder: "placeholder", readOnly: "readOnly", rtlEnabled: "rtlEnabled", showClearButton: "showClearButton", showMaskMode: "showMaskMode", spellcheck: "spellcheck", stylingMode: "stylingMode", tabIndex: "tabIndex", text: "text", useMaskedValue: "useMaskedValue", validationError: "validationError", validationErrors: "validationErrors", validationMessageMode: "validationMessageMode", validationMessagePosition: "validationMessagePosition", validationStatus: "validationStatus", value: "value", valueChangeEvent: "valueChangeEvent", visible: "visible", width: "width" }, outputs: { textChange: "textChange", valueChange: "valueChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "buttonsChildren", predicate: i0.forwardRef(() => DxiButtonComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-search-editor-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'buttons',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'inputAttr',
                                    'isDirty',
                                    'isValid',
                                    'label',
                                    'labelMode',
                                    'mask',
                                    'maskChar',
                                    'maskInvalidMessage',
                                    'maskRules',
                                    'maxLength',
                                    'mode',
                                    'name',
                                    'onChange',
                                    'onContentReady',
                                    'onCopy',
                                    'onCut',
                                    'onDisposing',
                                    'onEnterKey',
                                    'onFocusIn',
                                    'onFocusOut',
                                    'onInitialized',
                                    'onInput',
                                    'onKeyDown',
                                    'onKeyUp',
                                    'onOptionChanged',
                                    'onPaste',
                                    'onValueChanged',
                                    'placeholder',
                                    'readOnly',
                                    'rtlEnabled',
                                    'showClearButton',
                                    'showMaskMode',
                                    'spellcheck',
                                    'stylingMode',
                                    'tabIndex',
                                    'text',
                                    'useMaskedValue',
                                    'validationError',
                                    'validationErrors',
                                    'validationMessageMode',
                                    'validationMessagePosition',
                                    'validationStatus',
                                    'value',
                                    'valueChangeEvent',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { textChange: [{
                            type: Output
                        }], valueChange: [{
                            type: Output
                        }], buttonsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiButtonComponent)]
                        }] } });
            class DxoSearchEditorOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsModule, declarations: [DxoSearchEditorOptionsComponent], exports: [DxoSearchEditorOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsModule });
            } exports("cc", DxoSearchEditorOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSearchEditorOptionsComponent
                                ],
                                exports: [
                                    DxoSearchEditorOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSearchPanelComponent extends NestedOption {
                get highlightCaseSensitive() {
                    return this._getOption('highlightCaseSensitive');
                }
                set highlightCaseSensitive(value) {
                    this._setOption('highlightCaseSensitive', value);
                }
                get highlightSearchText() {
                    return this._getOption('highlightSearchText');
                }
                set highlightSearchText(value) {
                    this._setOption('highlightSearchText', value);
                }
                get placeholder() {
                    return this._getOption('placeholder');
                }
                set placeholder(value) {
                    this._setOption('placeholder', value);
                }
                get searchVisibleColumnsOnly() {
                    return this._getOption('searchVisibleColumnsOnly');
                }
                set searchVisibleColumnsOnly(value) {
                    this._setOption('searchVisibleColumnsOnly', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                textChange;
                get _optionPath() {
                    return 'searchPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'textChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSearchPanelComponent, selector: "dxo-search-panel", inputs: { highlightCaseSensitive: "highlightCaseSensitive", highlightSearchText: "highlightSearchText", placeholder: "placeholder", searchVisibleColumnsOnly: "searchVisibleColumnsOnly", text: "text", visible: "visible", width: "width" }, outputs: { textChange: "textChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-search-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { highlightCaseSensitive: [{
                            type: Input
                        }], highlightSearchText: [{
                            type: Input
                        }], placeholder: [{
                            type: Input
                        }], searchVisibleColumnsOnly: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], textChange: [{
                            type: Output
                        }] } });
            class DxoSearchPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelModule, declarations: [DxoSearchPanelComponent], exports: [DxoSearchPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelModule });
            } exports("d6", DxoSearchPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSearchPanelComponent
                                ],
                                exports: [
                                    DxoSearchPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColumnChooserSearchConfig extends NestedOption {
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get timeout() {
                    return this._getOption('timeout');
                }
                set timeout(value) {
                    this._setOption('timeout', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get searchExpr() {
                    return this._getOption('searchExpr');
                }
                set searchExpr(value) {
                    this._setOption('searchExpr', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserSearchConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColumnChooserSearchConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserSearchConfig, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSearchComponent extends DxoColumnChooserSearchConfig {
                get _optionPath() {
                    return 'search';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSearchComponent, selector: "dxo-search", inputs: { editorOptions: "editorOptions", enabled: "enabled", timeout: "timeout", mode: "mode", searchExpr: "searchExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-search', template: '', providers: [NestedOptionHost], inputs: [
                                    'editorOptions',
                                    'enabled',
                                    'timeout',
                                    'mode',
                                    'searchExpr'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSearchModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchModule, declarations: [DxoSearchComponent], exports: [DxoSearchComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchModule });
            } exports("bR", DxoSearchModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSearchComponent
                                ],
                                exports: [
                                    DxoSearchComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSelectionStyleComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get hatching() {
                    return this._getOption('hatching');
                }
                set hatching(value) {
                    this._setOption('hatching', value);
                }
                get highlight() {
                    return this._getOption('highlight');
                }
                set highlight(value) {
                    this._setOption('highlight', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'selectionStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSelectionStyleComponent, selector: "dxo-selection-style", inputs: { border: "border", color: "color", size: "size", dashStyle: "dashStyle", hatching: "hatching", highlight: "highlight", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-selection-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], size: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], hatching: [{
                            type: Input
                        }], highlight: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoSelectionStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleModule, declarations: [DxoSelectionStyleComponent], exports: [DxoSelectionStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleModule });
            } exports("an", DxoSelectionStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSelectionStyleComponent
                                ],
                                exports: [
                                    DxoSelectionStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColumnChooserSelectionConfig extends NestedOption {
                get allowSelectAll() {
                    return this._getOption('allowSelectAll');
                }
                set allowSelectAll(value) {
                    this._setOption('allowSelectAll', value);
                }
                get recursive() {
                    return this._getOption('recursive');
                }
                set recursive(value) {
                    this._setOption('recursive', value);
                }
                get selectByClick() {
                    return this._getOption('selectByClick');
                }
                set selectByClick(value) {
                    this._setOption('selectByClick', value);
                }
                get deferred() {
                    return this._getOption('deferred');
                }
                set deferred(value) {
                    this._setOption('deferred', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get selectAllMode() {
                    return this._getOption('selectAllMode');
                }
                set selectAllMode(value) {
                    this._setOption('selectAllMode', value);
                }
                get showCheckBoxesMode() {
                    return this._getOption('showCheckBoxesMode');
                }
                set showCheckBoxesMode(value) {
                    this._setOption('showCheckBoxesMode', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserSelectionConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColumnChooserSelectionConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserSelectionConfig, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSelectionComponent extends DxoColumnChooserSelectionConfig {
                get _optionPath() {
                    return 'selection';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSelectionComponent, selector: "dxo-selection", inputs: { allowSelectAll: "allowSelectAll", recursive: "recursive", selectByClick: "selectByClick", deferred: "deferred", mode: "mode", selectAllMode: "selectAllMode", showCheckBoxesMode: "showCheckBoxesMode" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-selection', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowSelectAll',
                                    'recursive',
                                    'selectByClick',
                                    'deferred',
                                    'mode',
                                    'selectAllMode',
                                    'showCheckBoxesMode'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSelectionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionModule, declarations: [DxoSelectionComponent], exports: [DxoSelectionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionModule });
            } exports("cU", DxoSelectionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSelectionComponent
                                ],
                                exports: [
                                    DxoSelectionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSeriesTemplateComponent extends NestedOption {
                get customizeSeries() {
                    return this._getOption('customizeSeries');
                }
                set customizeSeries(value) {
                    this._setOption('customizeSeries', value);
                }
                get nameField() {
                    return this._getOption('nameField');
                }
                set nameField(value) {
                    this._setOption('nameField', value);
                }
                get _optionPath() {
                    return 'seriesTemplate';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSeriesTemplateComponent, selector: "dxo-series-template", inputs: { customizeSeries: "customizeSeries", nameField: "nameField" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-series-template', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customizeSeries: [{
                            type: Input
                        }], nameField: [{
                            type: Input
                        }] } });
            class DxoSeriesTemplateModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateModule, declarations: [DxoSeriesTemplateComponent], exports: [DxoSeriesTemplateComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateModule });
            } exports("aV", DxoSeriesTemplateModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSeriesTemplateComponent
                                ],
                                exports: [
                                    DxoSeriesTemplateComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShadowComponent extends NestedOption {
                get blur() {
                    return this._getOption('blur');
                }
                set blur(value) {
                    this._setOption('blur', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get offsetX() {
                    return this._getOption('offsetX');
                }
                set offsetX(value) {
                    this._setOption('offsetX', value);
                }
                get offsetY() {
                    return this._getOption('offsetY');
                }
                set offsetY(value) {
                    this._setOption('offsetY', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'shadow';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShadowComponent, selector: "dxo-shadow", inputs: { blur: "blur", color: "color", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-shadow', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { blur: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], offsetX: [{
                            type: Input
                        }], offsetY: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoShadowModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowModule, declarations: [DxoShadowComponent], exports: [DxoShadowComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowModule });
            } exports("L", DxoShadowModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShadowComponent
                                ],
                                exports: [
                                    DxoShadowComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShowEventComponent extends NestedOption {
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'showEvent';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShowEventComponent, selector: "dxo-show-event", inputs: { delay: "delay", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-show-event', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { delay: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxoShowEventModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventModule, declarations: [DxoShowEventComponent], exports: [DxoShowEventComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventModule });
            } exports("b3", DxoShowEventModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShowEventComponent
                                ],
                                exports: [
                                    DxoShowEventComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShowFirstSubmenuModeComponent extends NestedOption {
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'showFirstSubmenuMode';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShowFirstSubmenuModeComponent, selector: "dxo-show-first-submenu-mode", inputs: { delay: "delay", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-show-first-submenu-mode', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { delay: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxoShowFirstSubmenuModeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeModule, declarations: [DxoShowFirstSubmenuModeComponent], exports: [DxoShowFirstSubmenuModeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeModule });
            } exports("cm", DxoShowFirstSubmenuModeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShowFirstSubmenuModeComponent
                                ],
                                exports: [
                                    DxoShowFirstSubmenuModeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShowSubmenuModeComponent extends NestedOption {
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'showSubmenuMode';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShowSubmenuModeComponent, selector: "dxo-show-submenu-mode", inputs: { delay: "delay", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-show-submenu-mode', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { delay: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxoShowSubmenuModeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeModule, declarations: [DxoShowSubmenuModeComponent], exports: [DxoShowSubmenuModeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeModule });
            } exports("b4", DxoShowSubmenuModeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShowSubmenuModeComponent
                                ],
                                exports: [
                                    DxoShowSubmenuModeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoShowComponent extends DxoAnimationConfig {
                get _optionPath() {
                    return 'show';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShowComponent, selector: "dxo-show", inputs: { complete: "complete", delay: "delay", direction: "direction", duration: "duration", easing: "easing", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-show', template: '', providers: [NestedOptionHost], inputs: [
                                    'complete',
                                    'delay',
                                    'direction',
                                    'duration',
                                    'easing',
                                    'from',
                                    'staggerDelay',
                                    'start',
                                    'to',
                                    'type'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoShowModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShowModule, declarations: [DxoShowComponent], exports: [DxoShowComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowModule });
            } exports("t", DxoShowModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShowComponent
                                ],
                                exports: [
                                    DxoShowComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShutterComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'shutter';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShutterComponent, selector: "dxo-shutter", inputs: { color: "color", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-shutter', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoShutterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterModule, declarations: [DxoShutterComponent], exports: [DxoShutterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterModule });
            } exports("cE", DxoShutterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShutterComponent
                                ],
                                exports: [
                                    DxoShutterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSizeComponent extends NestedOption {
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'size';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSizeComponent, selector: "dxo-size", inputs: { height: "height", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-size', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { height: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoSizeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeModule, declarations: [DxoSizeComponent], exports: [DxoSizeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeModule });
            } exports("J", DxoSizeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSizeComponent
                                ],
                                exports: [
                                    DxoSizeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSliderHandleComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'sliderHandle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSliderHandleComponent, selector: "dxo-slider-handle", inputs: { color: "color", opacity: "opacity", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-slider-handle', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoSliderHandleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleModule, declarations: [DxoSliderHandleComponent], exports: [DxoSliderHandleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleModule });
            } exports("cF", DxoSliderHandleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSliderHandleComponent
                                ],
                                exports: [
                                    DxoSliderHandleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSliderMarkerComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get invalidRangeColor() {
                    return this._getOption('invalidRangeColor');
                }
                set invalidRangeColor(value) {
                    this._setOption('invalidRangeColor', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get placeholderHeight() {
                    return this._getOption('placeholderHeight');
                }
                set placeholderHeight(value) {
                    this._setOption('placeholderHeight', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'sliderMarker';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSliderMarkerComponent, selector: "dxo-slider-marker", inputs: { color: "color", customizeText: "customizeText", font: "font", format: "format", invalidRangeColor: "invalidRangeColor", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", placeholderHeight: "placeholderHeight", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-slider-marker', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], format: [{
                            type: Input
                        }], invalidRangeColor: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], placeholderHeight: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoSliderMarkerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerModule, declarations: [DxoSliderMarkerComponent], exports: [DxoSliderMarkerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerModule });
            } exports("cG", DxoSliderMarkerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSliderMarkerComponent
                                ],
                                exports: [
                                    DxoSliderMarkerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSmallValuesGroupingComponent extends NestedOption {
                get groupName() {
                    return this._getOption('groupName');
                }
                set groupName(value) {
                    this._setOption('groupName', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get threshold() {
                    return this._getOption('threshold');
                }
                set threshold(value) {
                    this._setOption('threshold', value);
                }
                get topCount() {
                    return this._getOption('topCount');
                }
                set topCount(value) {
                    this._setOption('topCount', value);
                }
                get _optionPath() {
                    return 'smallValuesGrouping';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSmallValuesGroupingComponent, selector: "dxo-small-values-grouping", inputs: { groupName: "groupName", mode: "mode", threshold: "threshold", topCount: "topCount" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-small-values-grouping', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { groupName: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], threshold: [{
                            type: Input
                        }], topCount: [{
                            type: Input
                        }] } });
            class DxoSmallValuesGroupingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingModule, declarations: [DxoSmallValuesGroupingComponent], exports: [DxoSmallValuesGroupingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingModule });
            } exports("cn", DxoSmallValuesGroupingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSmallValuesGroupingComponent
                                ],
                                exports: [
                                    DxoSmallValuesGroupingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiSortByGroupSummaryInfoComponent extends CollectionNestedOption {
                get groupColumn() {
                    return this._getOption('groupColumn');
                }
                set groupColumn(value) {
                    this._setOption('groupColumn', value);
                }
                get sortOrder() {
                    return this._getOption('sortOrder');
                }
                set sortOrder(value) {
                    this._setOption('sortOrder', value);
                }
                get summaryItem() {
                    return this._getOption('summaryItem');
                }
                set summaryItem(value) {
                    this._setOption('summaryItem', value);
                }
                get _optionPath() {
                    return 'sortByGroupSummaryInfo';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiSortByGroupSummaryInfoComponent, selector: "dxi-sort-by-group-summary-info", inputs: { groupColumn: "groupColumn", sortOrder: "sortOrder", summaryItem: "summaryItem" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-sort-by-group-summary-info', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { groupColumn: [{
                            type: Input
                        }], sortOrder: [{
                            type: Input
                        }], summaryItem: [{
                            type: Input
                        }] } });
            class DxiSortByGroupSummaryInfoModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoModule, declarations: [DxiSortByGroupSummaryInfoComponent], exports: [DxiSortByGroupSummaryInfoComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiSortByGroupSummaryInfoComponent
                                ],
                                exports: [
                                    DxiSortByGroupSummaryInfoComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttSorting extends NestedOption {
                get ascendingText() {
                    return this._getOption('ascendingText');
                }
                set ascendingText(value) {
                    this._setOption('ascendingText', value);
                }
                get clearText() {
                    return this._getOption('clearText');
                }
                set clearText(value) {
                    this._setOption('clearText', value);
                }
                get descendingText() {
                    return this._getOption('descendingText');
                }
                set descendingText(value) {
                    this._setOption('descendingText', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get showSortIndexes() {
                    return this._getOption('showSortIndexes');
                }
                set showSortIndexes(value) {
                    this._setOption('showSortIndexes', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttSorting, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttSorting, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttSorting, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSortingComponent extends DxoGanttSorting {
                get _optionPath() {
                    return 'sorting';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSortingComponent, selector: "dxo-sorting", inputs: { ascendingText: "ascendingText", clearText: "clearText", descendingText: "descendingText", mode: "mode", showSortIndexes: "showSortIndexes" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-sorting', template: '', providers: [NestedOptionHost], inputs: [
                                    'ascendingText',
                                    'clearText',
                                    'descendingText',
                                    'mode',
                                    'showSortIndexes'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSortingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingModule, declarations: [DxoSortingComponent], exports: [DxoSortingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingModule });
            } exports("bZ", DxoSortingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSortingComponent
                                ],
                                exports: [
                                    DxoSortingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSourceComponent extends NestedOption {
                get grouping() {
                    return this._getOption('grouping');
                }
                set grouping(value) {
                    this._setOption('grouping', value);
                }
                get layer() {
                    return this._getOption('layer');
                }
                set layer(value) {
                    this._setOption('layer', value);
                }
                get _optionPath() {
                    return 'source';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSourceComponent, selector: "dxo-source", inputs: { grouping: "grouping", layer: "layer" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-source', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { grouping: [{
                            type: Input
                        }], layer: [{
                            type: Input
                        }] } });
            class DxoSourceModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceModule, declarations: [DxoSourceComponent], exports: [DxoSourceComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceModule });
            } exports("di", DxoSourceModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSourceComponent
                                ],
                                exports: [
                                    DxoSourceComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSplineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'spline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSplineComponent, selector: "dxo-spline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-spline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSplineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineModule, declarations: [DxoSplineComponent], exports: [DxoSplineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineModule });
            } exports("aE", DxoSplineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSplineComponent
                                ],
                                exports: [
                                    DxoSplineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSplineareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'splinearea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSplineareaComponent, selector: "dxo-splinearea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-splinearea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSplineareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaModule, declarations: [DxoSplineareaComponent], exports: [DxoSplineareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaModule });
            } exports("aF", DxoSplineareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSplineareaComponent
                                ],
                                exports: [
                                    DxoSplineareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSplitterOptions extends NestedOption {
                get allowKeyboardNavigation() {
                    return this._getOption('allowKeyboardNavigation');
                }
                set allowKeyboardNavigation(value) {
                    this._setOption('allowKeyboardNavigation', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get itemTemplate() {
                    return this._getOption('itemTemplate');
                }
                set itemTemplate(value) {
                    this._setOption('itemTemplate', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onItemClick() {
                    return this._getOption('onItemClick');
                }
                set onItemClick(value) {
                    this._setOption('onItemClick', value);
                }
                get onItemCollapsed() {
                    return this._getOption('onItemCollapsed');
                }
                set onItemCollapsed(value) {
                    this._setOption('onItemCollapsed', value);
                }
                get onItemContextMenu() {
                    return this._getOption('onItemContextMenu');
                }
                set onItemContextMenu(value) {
                    this._setOption('onItemContextMenu', value);
                }
                get onItemExpanded() {
                    return this._getOption('onItemExpanded');
                }
                set onItemExpanded(value) {
                    this._setOption('onItemExpanded', value);
                }
                get onItemRendered() {
                    return this._getOption('onItemRendered');
                }
                set onItemRendered(value) {
                    this._setOption('onItemRendered', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onResize() {
                    return this._getOption('onResize');
                }
                set onResize(value) {
                    this._setOption('onResize', value);
                }
                get onResizeEnd() {
                    return this._getOption('onResizeEnd');
                }
                set onResizeEnd(value) {
                    this._setOption('onResizeEnd', value);
                }
                get onResizeStart() {
                    return this._getOption('onResizeStart');
                }
                set onResizeStart(value) {
                    this._setOption('onResizeStart', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get repaintChangesOnly() {
                    return this._getOption('repaintChangesOnly');
                }
                set repaintChangesOnly(value) {
                    this._setOption('repaintChangesOnly', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get separatorSize() {
                    return this._getOption('separatorSize');
                }
                set separatorSize(value) {
                    this._setOption('separatorSize', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSplitterOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSplitterComponent extends DxoSplitterOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                itemsChange;
                get _optionPath() {
                    return 'splitter';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'itemsChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSplitterComponent, selector: "dxo-splitter", inputs: { allowKeyboardNavigation: "allowKeyboardNavigation", dataSource: "dataSource", disabled: "disabled", elementAttr: "elementAttr", height: "height", hoverStateEnabled: "hoverStateEnabled", items: "items", itemTemplate: "itemTemplate", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemCollapsed: "onItemCollapsed", onItemContextMenu: "onItemContextMenu", onItemExpanded: "onItemExpanded", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", orientation: "orientation", repaintChangesOnly: "repaintChangesOnly", rtlEnabled: "rtlEnabled", separatorSize: "separatorSize", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-splitter', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowKeyboardNavigation',
                                    'dataSource',
                                    'disabled',
                                    'elementAttr',
                                    'height',
                                    'hoverStateEnabled',
                                    'items',
                                    'itemTemplate',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onItemClick',
                                    'onItemCollapsed',
                                    'onItemContextMenu',
                                    'onItemExpanded',
                                    'onItemRendered',
                                    'onOptionChanged',
                                    'onResize',
                                    'onResizeEnd',
                                    'onResizeStart',
                                    'orientation',
                                    'repaintChangesOnly',
                                    'rtlEnabled',
                                    'separatorSize',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoSplitterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterModule, declarations: [DxoSplitterComponent], exports: [DxoSplitterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterModule });
            } exports("cS", DxoSplitterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSplitterComponent
                                ],
                                exports: [
                                    DxoSplitterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedarea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedareaComponent, selector: "dxo-stackedarea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-stackedarea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaModule, declarations: [DxoStackedareaComponent], exports: [DxoStackedareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaModule });
            } exports("aG", DxoStackedareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedareaComponent
                                ],
                                exports: [
                                    DxoStackedareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedbarComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedbar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedbarComponent, selector: "dxo-stackedbar", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-stackedbar', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarModule, declarations: [DxoStackedbarComponent], exports: [DxoStackedbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarModule });
            } exports("aH", DxoStackedbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedbarComponent
                                ],
                                exports: [
                                    DxoStackedbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedlineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedlineComponent, selector: "dxo-stackedline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-stackedline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedlineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineModule, declarations: [DxoStackedlineComponent], exports: [DxoStackedlineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineModule });
            } exports("aI", DxoStackedlineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedlineComponent
                                ],
                                exports: [
                                    DxoStackedlineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedsplineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedspline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedsplineComponent, selector: "dxo-stackedspline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-stackedspline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedsplineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineModule, declarations: [DxoStackedsplineComponent], exports: [DxoStackedsplineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineModule });
            } exports("aJ", DxoStackedsplineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedsplineComponent
                                ],
                                exports: [
                                    DxoStackedsplineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedsplineareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedsplinearea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedsplineareaComponent, selector: "dxo-stackedsplinearea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-stackedsplinearea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedsplineareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaModule, declarations: [DxoStackedsplineareaComponent], exports: [DxoStackedsplineareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaModule });
            } exports("aK", DxoStackedsplineareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedsplineareaComponent
                                ],
                                exports: [
                                    DxoStackedsplineareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoStateStoringComponent extends NestedOption {
                get customLoad() {
                    return this._getOption('customLoad');
                }
                set customLoad(value) {
                    this._setOption('customLoad', value);
                }
                get customSave() {
                    return this._getOption('customSave');
                }
                set customSave(value) {
                    this._setOption('customSave', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get savingTimeout() {
                    return this._getOption('savingTimeout');
                }
                set savingTimeout(value) {
                    this._setOption('savingTimeout', value);
                }
                get storageKey() {
                    return this._getOption('storageKey');
                }
                set storageKey(value) {
                    this._setOption('storageKey', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'stateStoring';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStateStoringComponent, selector: "dxo-state-storing", inputs: { customLoad: "customLoad", customSave: "customSave", enabled: "enabled", savingTimeout: "savingTimeout", storageKey: "storageKey", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-state-storing', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customLoad: [{
                            type: Input
                        }], customSave: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], savingTimeout: [{
                            type: Input
                        }], storageKey: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxoStateStoringModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringModule, declarations: [DxoStateStoringComponent], exports: [DxoStateStoringComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringModule });
            } exports("cu", DxoStateStoringModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStateStoringComponent
                                ],
                                exports: [
                                    DxoStateStoringComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStepareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'steparea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStepareaComponent, selector: "dxo-steparea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-steparea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStepareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaModule, declarations: [DxoStepareaComponent], exports: [DxoStepareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaModule });
            } exports("aL", DxoStepareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStepareaComponent
                                ],
                                exports: [
                                    DxoStepareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSteplineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stepline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSteplineComponent, selector: "dxo-stepline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-stepline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSteplineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineModule, declarations: [DxoSteplineComponent], exports: [DxoSteplineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineModule });
            } exports("aM", DxoSteplineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSteplineComponent
                                ],
                                exports: [
                                    DxoSteplineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStockComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stock';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStockComponent, selector: "dxo-stock", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-stock', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStockModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStockModule, declarations: [DxoStockComponent], exports: [DxoStockComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockModule });
            } exports("aN", DxoStockModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStockComponent
                                ],
                                exports: [
                                    DxoStockComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoStoreComponent extends NestedOption {
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'store';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStoreComponent, selector: "dxo-store", inputs: { type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-store', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { type: [{
                            type: Input
                        }] } });
            class DxoStoreModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreModule, declarations: [DxoStoreComponent], exports: [DxoStoreComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreModule });
            } exports("cp", DxoStoreModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStoreComponent
                                ],
                                exports: [
                                    DxoStoreComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiGanttStripLine extends CollectionNestedOption {
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get end() {
                    return this._getOption('end');
                }
                set end(value) {
                    this._setOption('end', value);
                }
                get start() {
                    return this._getOption('start');
                }
                set start(value) {
                    this._setOption('start', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGanttStripLine, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiGanttStripLine, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGanttStripLine, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiStripLineComponent extends DxiGanttStripLine {
                get _optionPath() {
                    return 'stripLines';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiStripLineComponent, selector: "dxi-strip-line", inputs: { cssClass: "cssClass", end: "end", start: "start", title: "title" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("bP", DxiStripLineComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-strip-line', template: '', providers: [NestedOptionHost], inputs: [
                                    'cssClass',
                                    'end',
                                    'start',
                                    'title'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiStripLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineModule, declarations: [DxiStripLineComponent], exports: [DxiStripLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineModule });
            } exports("b_", DxiStripLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiStripLineComponent
                                ],
                                exports: [
                                    DxiStripLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoStripStyleComponent extends NestedOption {
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get _optionPath() {
                    return 'stripStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStripStyleComponent, selector: "dxo-strip-style", inputs: { label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-strip-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { label: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }] } });
            class DxoStripStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleModule, declarations: [DxoStripStyleComponent], exports: [DxoStripStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleModule });
            } exports("a6", DxoStripStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStripStyleComponent
                                ],
                                exports: [
                                    DxoStripStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSubtitleComponent extends NestedOption {
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get _optionPath() {
                    return 'subtitle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSubtitleComponent, selector: "dxo-subtitle", inputs: { font: "font", offset: "offset", text: "text", textOverflow: "textOverflow", wordWrap: "wordWrap" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-subtitle', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { font: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], textOverflow: [{
                            type: Input
                        }], wordWrap: [{
                            type: Input
                        }] } });
            class DxoSubtitleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleModule, declarations: [DxoSubtitleComponent], exports: [DxoSubtitleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleModule });
            } exports("G", DxoSubtitleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSubtitleComponent
                                ],
                                exports: [
                                    DxoSubtitleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGaugeIndicator extends NestedOption {
                get arrowLength() {
                    return this._getOption('arrowLength');
                }
                set arrowLength(value) {
                    this._setOption('arrowLength', value);
                }
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get baseValue() {
                    return this._getOption('baseValue');
                }
                set baseValue(value) {
                    this._setOption('baseValue', value);
                }
                get beginAdaptingAtRadius() {
                    return this._getOption('beginAdaptingAtRadius');
                }
                set beginAdaptingAtRadius(value) {
                    this._setOption('beginAdaptingAtRadius', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get horizontalOrientation() {
                    return this._getOption('horizontalOrientation');
                }
                set horizontalOrientation(value) {
                    this._setOption('horizontalOrientation', value);
                }
                get indentFromCenter() {
                    return this._getOption('indentFromCenter');
                }
                set indentFromCenter(value) {
                    this._setOption('indentFromCenter', value);
                }
                get length() {
                    return this._getOption('length');
                }
                set length(value) {
                    this._setOption('length', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get secondColor() {
                    return this._getOption('secondColor');
                }
                set secondColor(value) {
                    this._setOption('secondColor', value);
                }
                get secondFraction() {
                    return this._getOption('secondFraction');
                }
                set secondFraction(value) {
                    this._setOption('secondFraction', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get spindleGapSize() {
                    return this._getOption('spindleGapSize');
                }
                set spindleGapSize(value) {
                    this._setOption('spindleGapSize', value);
                }
                get spindleSize() {
                    return this._getOption('spindleSize');
                }
                set spindleSize(value) {
                    this._setOption('spindleSize', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get verticalOrientation() {
                    return this._getOption('verticalOrientation');
                }
                set verticalOrientation(value) {
                    this._setOption('verticalOrientation', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGaugeIndicator, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGaugeIndicator, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGaugeIndicator, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSubvalueIndicatorComponent extends DxoGaugeIndicator {
                get _optionPath() {
                    return 'subvalueIndicator';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSubvalueIndicatorComponent, selector: "dxo-subvalue-indicator", inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-subvalue-indicator', template: '', providers: [NestedOptionHost], inputs: [
                                    'arrowLength',
                                    'backgroundColor',
                                    'baseValue',
                                    'beginAdaptingAtRadius',
                                    'color',
                                    'horizontalOrientation',
                                    'indentFromCenter',
                                    'length',
                                    'offset',
                                    'palette',
                                    'secondColor',
                                    'secondFraction',
                                    'size',
                                    'spindleGapSize',
                                    'spindleSize',
                                    'text',
                                    'type',
                                    'verticalOrientation',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSubvalueIndicatorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorModule, declarations: [DxoSubvalueIndicatorComponent], exports: [DxoSubvalueIndicatorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorModule });
            } exports("b0", DxoSubvalueIndicatorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSubvalueIndicatorComponent
                                ],
                                exports: [
                                    DxoSubvalueIndicatorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiTotalItemComponent extends CollectionNestedOption {
                get alignment() {
                    return this._getOption('alignment');
                }
                set alignment(value) {
                    this._setOption('alignment', value);
                }
                get column() {
                    return this._getOption('column');
                }
                set column(value) {
                    this._setOption('column', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get displayFormat() {
                    return this._getOption('displayFormat');
                }
                set displayFormat(value) {
                    this._setOption('displayFormat', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get showInColumn() {
                    return this._getOption('showInColumn');
                }
                set showInColumn(value) {
                    this._setOption('showInColumn', value);
                }
                get skipEmptyValues() {
                    return this._getOption('skipEmptyValues');
                }
                set skipEmptyValues(value) {
                    this._setOption('skipEmptyValues', value);
                }
                get summaryType() {
                    return this._getOption('summaryType');
                }
                set summaryType(value) {
                    this._setOption('summaryType', value);
                }
                get valueFormat() {
                    return this._getOption('valueFormat');
                }
                set valueFormat(value) {
                    this._setOption('valueFormat', value);
                }
                get _optionPath() {
                    return 'totalItems';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiTotalItemComponent, selector: "dxi-total-item", inputs: { alignment: "alignment", column: "column", cssClass: "cssClass", customizeText: "customizeText", displayFormat: "displayFormat", name: "name", showInColumn: "showInColumn", skipEmptyValues: "skipEmptyValues", summaryType: "summaryType", valueFormat: "valueFormat" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-total-item', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { alignment: [{
                            type: Input
                        }], column: [{
                            type: Input
                        }], cssClass: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], displayFormat: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], showInColumn: [{
                            type: Input
                        }], skipEmptyValues: [{
                            type: Input
                        }], summaryType: [{
                            type: Input
                        }], valueFormat: [{
                            type: Input
                        }] } });
            class DxiTotalItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemModule, declarations: [DxiTotalItemComponent], exports: [DxiTotalItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiTotalItemComponent
                                ],
                                exports: [
                                    DxiTotalItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSummaryComponent extends NestedOption {
                get calculateCustomSummary() {
                    return this._getOption('calculateCustomSummary');
                }
                set calculateCustomSummary(value) {
                    this._setOption('calculateCustomSummary', value);
                }
                get groupItems() {
                    return this._getOption('groupItems');
                }
                set groupItems(value) {
                    this._setOption('groupItems', value);
                }
                get recalculateWhileEditing() {
                    return this._getOption('recalculateWhileEditing');
                }
                set recalculateWhileEditing(value) {
                    this._setOption('recalculateWhileEditing', value);
                }
                get skipEmptyValues() {
                    return this._getOption('skipEmptyValues');
                }
                set skipEmptyValues(value) {
                    this._setOption('skipEmptyValues', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get totalItems() {
                    return this._getOption('totalItems');
                }
                set totalItems(value) {
                    this._setOption('totalItems', value);
                }
                get _optionPath() {
                    return 'summary';
                }
                get groupItemsChildren() {
                    return this._getOption('groupItems');
                }
                set groupItemsChildren(value) {
                    this.setChildren('groupItems', value);
                }
                get totalItemsChildren() {
                    return this._getOption('totalItems');
                }
                set totalItemsChildren(value) {
                    this.setChildren('totalItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSummaryComponent, selector: "dxo-summary", inputs: { calculateCustomSummary: "calculateCustomSummary", groupItems: "groupItems", recalculateWhileEditing: "recalculateWhileEditing", skipEmptyValues: "skipEmptyValues", texts: "texts", totalItems: "totalItems" }, providers: [NestedOptionHost], queries: [{ propertyName: "groupItemsChildren", predicate: i0.forwardRef(() => DxiGroupItemComponent) }, { propertyName: "totalItemsChildren", predicate: i0.forwardRef(() => DxiTotalItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-summary', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { calculateCustomSummary: [{
                            type: Input
                        }], groupItems: [{
                            type: Input
                        }], recalculateWhileEditing: [{
                            type: Input
                        }], skipEmptyValues: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], totalItems: [{
                            type: Input
                        }], groupItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiGroupItemComponent)]
                        }], totalItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiTotalItemComponent)]
                        }] } });
            class DxoSummaryModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryModule, declarations: [DxoSummaryComponent], exports: [DxoSummaryComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSummaryComponent
                                ],
                                exports: [
                                    DxoSummaryComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTabPanelOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get animationEnabled() {
                    return this._getOption('animationEnabled');
                }
                set animationEnabled(value) {
                    this._setOption('animationEnabled', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get deferRendering() {
                    return this._getOption('deferRendering');
                }
                set deferRendering(value) {
                    this._setOption('deferRendering', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get iconPosition() {
                    return this._getOption('iconPosition');
                }
                set iconPosition(value) {
                    this._setOption('iconPosition', value);
                }
                get itemHoldTimeout() {
                    return this._getOption('itemHoldTimeout');
                }
                set itemHoldTimeout(value) {
                    this._setOption('itemHoldTimeout', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get itemTemplate() {
                    return this._getOption('itemTemplate');
                }
                set itemTemplate(value) {
                    this._setOption('itemTemplate', value);
                }
                get itemTitleTemplate() {
                    return this._getOption('itemTitleTemplate');
                }
                set itemTitleTemplate(value) {
                    this._setOption('itemTitleTemplate', value);
                }
                get loop() {
                    return this._getOption('loop');
                }
                set loop(value) {
                    this._setOption('loop', value);
                }
                get noDataText() {
                    return this._getOption('noDataText');
                }
                set noDataText(value) {
                    this._setOption('noDataText', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onItemClick() {
                    return this._getOption('onItemClick');
                }
                set onItemClick(value) {
                    this._setOption('onItemClick', value);
                }
                get onItemContextMenu() {
                    return this._getOption('onItemContextMenu');
                }
                set onItemContextMenu(value) {
                    this._setOption('onItemContextMenu', value);
                }
                get onItemHold() {
                    return this._getOption('onItemHold');
                }
                set onItemHold(value) {
                    this._setOption('onItemHold', value);
                }
                get onItemRendered() {
                    return this._getOption('onItemRendered');
                }
                set onItemRendered(value) {
                    this._setOption('onItemRendered', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onSelectionChanged() {
                    return this._getOption('onSelectionChanged');
                }
                set onSelectionChanged(value) {
                    this._setOption('onSelectionChanged', value);
                }
                get onTitleClick() {
                    return this._getOption('onTitleClick');
                }
                set onTitleClick(value) {
                    this._setOption('onTitleClick', value);
                }
                get onTitleHold() {
                    return this._getOption('onTitleHold');
                }
                set onTitleHold(value) {
                    this._setOption('onTitleHold', value);
                }
                get onTitleRendered() {
                    return this._getOption('onTitleRendered');
                }
                set onTitleRendered(value) {
                    this._setOption('onTitleRendered', value);
                }
                get repaintChangesOnly() {
                    return this._getOption('repaintChangesOnly');
                }
                set repaintChangesOnly(value) {
                    this._setOption('repaintChangesOnly', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get scrollByContent() {
                    return this._getOption('scrollByContent');
                }
                set scrollByContent(value) {
                    this._setOption('scrollByContent', value);
                }
                get scrollingEnabled() {
                    return this._getOption('scrollingEnabled');
                }
                set scrollingEnabled(value) {
                    this._setOption('scrollingEnabled', value);
                }
                get selectedIndex() {
                    return this._getOption('selectedIndex');
                }
                set selectedIndex(value) {
                    this._setOption('selectedIndex', value);
                }
                get selectedItem() {
                    return this._getOption('selectedItem');
                }
                set selectedItem(value) {
                    this._setOption('selectedItem', value);
                }
                get showNavButtons() {
                    return this._getOption('showNavButtons');
                }
                set showNavButtons(value) {
                    this._setOption('showNavButtons', value);
                }
                get stylingMode() {
                    return this._getOption('stylingMode');
                }
                set stylingMode(value) {
                    this._setOption('stylingMode', value);
                }
                get swipeEnabled() {
                    return this._getOption('swipeEnabled');
                }
                set swipeEnabled(value) {
                    this._setOption('swipeEnabled', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get tabsPosition() {
                    return this._getOption('tabsPosition');
                }
                set tabsPosition(value) {
                    this._setOption('tabsPosition', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTabPanelOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptions, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoTabPanelOptionsComponent extends DxoTabPanelOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                itemsChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectedIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectedItemChange;
                get _optionPath() {
                    return 'tabPanelOptions';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'itemsChange' },
                        { emit: 'selectedIndexChange' },
                        { emit: 'selectedItemChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTabPanelOptionsComponent, selector: "dxo-tab-panel-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", animationEnabled: "animationEnabled", dataSource: "dataSource", deferRendering: "deferRendering", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", iconPosition: "iconPosition", itemHoldTimeout: "itemHoldTimeout", items: "items", itemTemplate: "itemTemplate", itemTitleTemplate: "itemTitleTemplate", loop: "loop", noDataText: "noDataText", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemContextMenu: "onItemContextMenu", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", onSelectionChanged: "onSelectionChanged", onTitleClick: "onTitleClick", onTitleHold: "onTitleHold", onTitleRendered: "onTitleRendered", repaintChangesOnly: "repaintChangesOnly", rtlEnabled: "rtlEnabled", scrollByContent: "scrollByContent", scrollingEnabled: "scrollingEnabled", selectedIndex: "selectedIndex", selectedItem: "selectedItem", showNavButtons: "showNavButtons", stylingMode: "stylingMode", swipeEnabled: "swipeEnabled", tabIndex: "tabIndex", tabsPosition: "tabsPosition", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange", selectedIndexChange: "selectedIndexChange", selectedItemChange: "selectedItemChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-tab-panel-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'animationEnabled',
                                    'dataSource',
                                    'deferRendering',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'iconPosition',
                                    'itemHoldTimeout',
                                    'items',
                                    'itemTemplate',
                                    'itemTitleTemplate',
                                    'loop',
                                    'noDataText',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onItemClick',
                                    'onItemContextMenu',
                                    'onItemHold',
                                    'onItemRendered',
                                    'onOptionChanged',
                                    'onSelectionChanged',
                                    'onTitleClick',
                                    'onTitleHold',
                                    'onTitleRendered',
                                    'repaintChangesOnly',
                                    'rtlEnabled',
                                    'scrollByContent',
                                    'scrollingEnabled',
                                    'selectedIndex',
                                    'selectedItem',
                                    'showNavButtons',
                                    'stylingMode',
                                    'swipeEnabled',
                                    'tabIndex',
                                    'tabsPosition',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChange: [{
                            type: Output
                        }], selectedIndexChange: [{
                            type: Output
                        }], selectedItemChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoTabPanelOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsModule, declarations: [DxoTabPanelOptionsComponent], exports: [DxoTabPanelOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsModule });
            } exports("bL", DxoTabPanelOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTabPanelOptionsComponent
                                ],
                                exports: [
                                    DxoTabPanelOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorTableContextMenu extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorTableContextMenu, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorTableContextMenu, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorTableContextMenu, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoTableContextMenuComponent extends DxoHtmlEditorTableContextMenu {
                get _optionPath() {
                    return 'tableContextMenu';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTableContextMenuComponent, selector: "dxo-table-context-menu", inputs: { enabled: "enabled", items: "items" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-table-context-menu', template: '', providers: [NestedOptionHost], inputs: [
                                    'enabled',
                                    'items'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoTableContextMenuModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuModule, declarations: [DxoTableContextMenuComponent], exports: [DxoTableContextMenuComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuModule });
            } exports("c6", DxoTableContextMenuModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTableContextMenuComponent
                                ],
                                exports: [
                                    DxoTableContextMenuComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorTableResizing extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get minColumnWidth() {
                    return this._getOption('minColumnWidth');
                }
                set minColumnWidth(value) {
                    this._setOption('minColumnWidth', value);
                }
                get minRowHeight() {
                    return this._getOption('minRowHeight');
                }
                set minRowHeight(value) {
                    this._setOption('minRowHeight', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorTableResizing, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorTableResizing, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorTableResizing, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoTableResizingComponent extends DxoHtmlEditorTableResizing {
                get _optionPath() {
                    return 'tableResizing';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTableResizingComponent, selector: "dxo-table-resizing", inputs: { enabled: "enabled", minColumnWidth: "minColumnWidth", minRowHeight: "minRowHeight" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-table-resizing', template: '', providers: [NestedOptionHost], inputs: [
                                    'enabled',
                                    'minColumnWidth',
                                    'minRowHeight'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoTableResizingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingModule, declarations: [DxoTableResizingComponent], exports: [DxoTableResizingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingModule });
            } exports("c7", DxoTableResizingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTableResizingComponent
                                ],
                                exports: [
                                    DxoTableResizingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTasksComponent extends NestedOption {
                get colorExpr() {
                    return this._getOption('colorExpr');
                }
                set colorExpr(value) {
                    this._setOption('colorExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get endExpr() {
                    return this._getOption('endExpr');
                }
                set endExpr(value) {
                    this._setOption('endExpr', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get parentIdExpr() {
                    return this._getOption('parentIdExpr');
                }
                set parentIdExpr(value) {
                    this._setOption('parentIdExpr', value);
                }
                get progressExpr() {
                    return this._getOption('progressExpr');
                }
                set progressExpr(value) {
                    this._setOption('progressExpr', value);
                }
                get startExpr() {
                    return this._getOption('startExpr');
                }
                set startExpr(value) {
                    this._setOption('startExpr', value);
                }
                get titleExpr() {
                    return this._getOption('titleExpr');
                }
                set titleExpr(value) {
                    this._setOption('titleExpr', value);
                }
                get _optionPath() {
                    return 'tasks';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTasksComponent, selector: "dxo-tasks", inputs: { colorExpr: "colorExpr", dataSource: "dataSource", endExpr: "endExpr", keyExpr: "keyExpr", parentIdExpr: "parentIdExpr", progressExpr: "progressExpr", startExpr: "startExpr", titleExpr: "titleExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-tasks', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { colorExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], endExpr: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], parentIdExpr: [{
                            type: Input
                        }], progressExpr: [{
                            type: Input
                        }], startExpr: [{
                            type: Input
                        }], titleExpr: [{
                            type: Input
                        }] } });
            class DxoTasksModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksModule, declarations: [DxoTasksComponent], exports: [DxoTasksComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksModule });
            } exports("b$", DxoTasksModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTasksComponent
                                ],
                                exports: [
                                    DxoTasksComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTextComponent extends NestedOption {
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get indent() {
                    return this._getOption('indent');
                }
                set indent(value) {
                    this._setOption('indent', value);
                }
                get _optionPath() {
                    return 'text';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTextComponent, selector: "dxo-text", inputs: { customizeText: "customizeText", font: "font", format: "format", indent: "indent" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-text', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], format: [{
                            type: Input
                        }], indent: [{
                            type: Input
                        }] } });
            class DxoTextModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTextModule, declarations: [DxoTextComponent], exports: [DxoTextComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextModule });
            } exports("b1", DxoTextModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTextComponent
                                ],
                                exports: [
                                    DxoTextComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttHeaderFilterTexts extends NestedOption {
                get fix() {
                    return this._getOption('fix');
                }
                set fix(value) {
                    this._setOption('fix', value);
                }
                get leftPosition() {
                    return this._getOption('leftPosition');
                }
                set leftPosition(value) {
                    this._setOption('leftPosition', value);
                }
                get rightPosition() {
                    return this._getOption('rightPosition');
                }
                set rightPosition(value) {
                    this._setOption('rightPosition', value);
                }
                get unfix() {
                    return this._getOption('unfix');
                }
                set unfix(value) {
                    this._setOption('unfix', value);
                }
                get addRow() {
                    return this._getOption('addRow');
                }
                set addRow(value) {
                    this._setOption('addRow', value);
                }
                get cancelAllChanges() {
                    return this._getOption('cancelAllChanges');
                }
                set cancelAllChanges(value) {
                    this._setOption('cancelAllChanges', value);
                }
                get cancelRowChanges() {
                    return this._getOption('cancelRowChanges');
                }
                set cancelRowChanges(value) {
                    this._setOption('cancelRowChanges', value);
                }
                get confirmDeleteMessage() {
                    return this._getOption('confirmDeleteMessage');
                }
                set confirmDeleteMessage(value) {
                    this._setOption('confirmDeleteMessage', value);
                }
                get confirmDeleteTitle() {
                    return this._getOption('confirmDeleteTitle');
                }
                set confirmDeleteTitle(value) {
                    this._setOption('confirmDeleteTitle', value);
                }
                get deleteRow() {
                    return this._getOption('deleteRow');
                }
                set deleteRow(value) {
                    this._setOption('deleteRow', value);
                }
                get editRow() {
                    return this._getOption('editRow');
                }
                set editRow(value) {
                    this._setOption('editRow', value);
                }
                get saveAllChanges() {
                    return this._getOption('saveAllChanges');
                }
                set saveAllChanges(value) {
                    this._setOption('saveAllChanges', value);
                }
                get saveRowChanges() {
                    return this._getOption('saveRowChanges');
                }
                set saveRowChanges(value) {
                    this._setOption('saveRowChanges', value);
                }
                get undeleteRow() {
                    return this._getOption('undeleteRow');
                }
                set undeleteRow(value) {
                    this._setOption('undeleteRow', value);
                }
                get validationCancelChanges() {
                    return this._getOption('validationCancelChanges');
                }
                set validationCancelChanges(value) {
                    this._setOption('validationCancelChanges', value);
                }
                get exportAll() {
                    return this._getOption('exportAll');
                }
                set exportAll(value) {
                    this._setOption('exportAll', value);
                }
                get exportSelectedRows() {
                    return this._getOption('exportSelectedRows');
                }
                set exportSelectedRows(value) {
                    this._setOption('exportSelectedRows', value);
                }
                get exportTo() {
                    return this._getOption('exportTo');
                }
                set exportTo(value) {
                    this._setOption('exportTo', value);
                }
                get clearFilter() {
                    return this._getOption('clearFilter');
                }
                set clearFilter(value) {
                    this._setOption('clearFilter', value);
                }
                get createFilter() {
                    return this._getOption('createFilter');
                }
                set createFilter(value) {
                    this._setOption('createFilter', value);
                }
                get filterEnabledHint() {
                    return this._getOption('filterEnabledHint');
                }
                set filterEnabledHint(value) {
                    this._setOption('filterEnabledHint', value);
                }
                get groupByThisColumn() {
                    return this._getOption('groupByThisColumn');
                }
                set groupByThisColumn(value) {
                    this._setOption('groupByThisColumn', value);
                }
                get groupContinuedMessage() {
                    return this._getOption('groupContinuedMessage');
                }
                set groupContinuedMessage(value) {
                    this._setOption('groupContinuedMessage', value);
                }
                get groupContinuesMessage() {
                    return this._getOption('groupContinuesMessage');
                }
                set groupContinuesMessage(value) {
                    this._setOption('groupContinuesMessage', value);
                }
                get ungroup() {
                    return this._getOption('ungroup');
                }
                set ungroup(value) {
                    this._setOption('ungroup', value);
                }
                get ungroupAll() {
                    return this._getOption('ungroupAll');
                }
                set ungroupAll(value) {
                    this._setOption('ungroupAll', value);
                }
                get cancel() {
                    return this._getOption('cancel');
                }
                set cancel(value) {
                    this._setOption('cancel', value);
                }
                get emptyValue() {
                    return this._getOption('emptyValue');
                }
                set emptyValue(value) {
                    this._setOption('emptyValue', value);
                }
                get ok() {
                    return this._getOption('ok');
                }
                set ok(value) {
                    this._setOption('ok', value);
                }
                get avg() {
                    return this._getOption('avg');
                }
                set avg(value) {
                    this._setOption('avg', value);
                }
                get avgOtherColumn() {
                    return this._getOption('avgOtherColumn');
                }
                set avgOtherColumn(value) {
                    this._setOption('avgOtherColumn', value);
                }
                get count() {
                    return this._getOption('count');
                }
                set count(value) {
                    this._setOption('count', value);
                }
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get maxOtherColumn() {
                    return this._getOption('maxOtherColumn');
                }
                set maxOtherColumn(value) {
                    this._setOption('maxOtherColumn', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                get minOtherColumn() {
                    return this._getOption('minOtherColumn');
                }
                set minOtherColumn(value) {
                    this._setOption('minOtherColumn', value);
                }
                get sum() {
                    return this._getOption('sum');
                }
                set sum(value) {
                    this._setOption('sum', value);
                }
                get sumOtherColumn() {
                    return this._getOption('sumOtherColumn');
                }
                set sumOtherColumn(value) {
                    this._setOption('sumOtherColumn', value);
                }
                get allFields() {
                    return this._getOption('allFields');
                }
                set allFields(value) {
                    this._setOption('allFields', value);
                }
                get columnFields() {
                    return this._getOption('columnFields');
                }
                set columnFields(value) {
                    this._setOption('columnFields', value);
                }
                get dataFields() {
                    return this._getOption('dataFields');
                }
                set dataFields(value) {
                    this._setOption('dataFields', value);
                }
                get filterFields() {
                    return this._getOption('filterFields');
                }
                set filterFields(value) {
                    this._setOption('filterFields', value);
                }
                get rowFields() {
                    return this._getOption('rowFields');
                }
                set rowFields(value) {
                    this._setOption('rowFields', value);
                }
                get columnFieldArea() {
                    return this._getOption('columnFieldArea');
                }
                set columnFieldArea(value) {
                    this._setOption('columnFieldArea', value);
                }
                get dataFieldArea() {
                    return this._getOption('dataFieldArea');
                }
                set dataFieldArea(value) {
                    this._setOption('dataFieldArea', value);
                }
                get filterFieldArea() {
                    return this._getOption('filterFieldArea');
                }
                set filterFieldArea(value) {
                    this._setOption('filterFieldArea', value);
                }
                get rowFieldArea() {
                    return this._getOption('rowFieldArea');
                }
                set rowFieldArea(value) {
                    this._setOption('rowFieldArea', value);
                }
                get collapseAll() {
                    return this._getOption('collapseAll');
                }
                set collapseAll(value) {
                    this._setOption('collapseAll', value);
                }
                get dataNotAvailable() {
                    return this._getOption('dataNotAvailable');
                }
                set dataNotAvailable(value) {
                    this._setOption('dataNotAvailable', value);
                }
                get expandAll() {
                    return this._getOption('expandAll');
                }
                set expandAll(value) {
                    this._setOption('expandAll', value);
                }
                get exportToExcel() {
                    return this._getOption('exportToExcel');
                }
                set exportToExcel(value) {
                    this._setOption('exportToExcel', value);
                }
                get grandTotal() {
                    return this._getOption('grandTotal');
                }
                set grandTotal(value) {
                    this._setOption('grandTotal', value);
                }
                get noData() {
                    return this._getOption('noData');
                }
                set noData(value) {
                    this._setOption('noData', value);
                }
                get removeAllSorting() {
                    return this._getOption('removeAllSorting');
                }
                set removeAllSorting(value) {
                    this._setOption('removeAllSorting', value);
                }
                get showFieldChooser() {
                    return this._getOption('showFieldChooser');
                }
                set showFieldChooser(value) {
                    this._setOption('showFieldChooser', value);
                }
                get sortColumnBySummary() {
                    return this._getOption('sortColumnBySummary');
                }
                set sortColumnBySummary(value) {
                    this._setOption('sortColumnBySummary', value);
                }
                get sortRowBySummary() {
                    return this._getOption('sortRowBySummary');
                }
                set sortRowBySummary(value) {
                    this._setOption('sortRowBySummary', value);
                }
                get total() {
                    return this._getOption('total');
                }
                set total(value) {
                    this._setOption('total', value);
                }
                get addRowToNode() {
                    return this._getOption('addRowToNode');
                }
                set addRowToNode(value) {
                    this._setOption('addRowToNode', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttHeaderFilterTexts, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttHeaderFilterTexts, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttHeaderFilterTexts, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoTextsComponent extends DxoGanttHeaderFilterTexts {
                get _optionPath() {
                    return 'texts';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTextsComponent, selector: "dxo-texts", inputs: { fix: "fix", leftPosition: "leftPosition", rightPosition: "rightPosition", unfix: "unfix", addRow: "addRow", cancelAllChanges: "cancelAllChanges", cancelRowChanges: "cancelRowChanges", confirmDeleteMessage: "confirmDeleteMessage", confirmDeleteTitle: "confirmDeleteTitle", deleteRow: "deleteRow", editRow: "editRow", saveAllChanges: "saveAllChanges", saveRowChanges: "saveRowChanges", undeleteRow: "undeleteRow", validationCancelChanges: "validationCancelChanges", exportAll: "exportAll", exportSelectedRows: "exportSelectedRows", exportTo: "exportTo", clearFilter: "clearFilter", createFilter: "createFilter", filterEnabledHint: "filterEnabledHint", groupByThisColumn: "groupByThisColumn", groupContinuedMessage: "groupContinuedMessage", groupContinuesMessage: "groupContinuesMessage", ungroup: "ungroup", ungroupAll: "ungroupAll", cancel: "cancel", emptyValue: "emptyValue", ok: "ok", avg: "avg", avgOtherColumn: "avgOtherColumn", count: "count", max: "max", maxOtherColumn: "maxOtherColumn", min: "min", minOtherColumn: "minOtherColumn", sum: "sum", sumOtherColumn: "sumOtherColumn", allFields: "allFields", columnFields: "columnFields", dataFields: "dataFields", filterFields: "filterFields", rowFields: "rowFields", columnFieldArea: "columnFieldArea", dataFieldArea: "dataFieldArea", filterFieldArea: "filterFieldArea", rowFieldArea: "rowFieldArea", collapseAll: "collapseAll", dataNotAvailable: "dataNotAvailable", expandAll: "expandAll", exportToExcel: "exportToExcel", grandTotal: "grandTotal", noData: "noData", removeAllSorting: "removeAllSorting", showFieldChooser: "showFieldChooser", sortColumnBySummary: "sortColumnBySummary", sortRowBySummary: "sortRowBySummary", total: "total", addRowToNode: "addRowToNode" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-texts', template: '', providers: [NestedOptionHost], inputs: [
                                    'fix',
                                    'leftPosition',
                                    'rightPosition',
                                    'unfix',
                                    'addRow',
                                    'cancelAllChanges',
                                    'cancelRowChanges',
                                    'confirmDeleteMessage',
                                    'confirmDeleteTitle',
                                    'deleteRow',
                                    'editRow',
                                    'saveAllChanges',
                                    'saveRowChanges',
                                    'undeleteRow',
                                    'validationCancelChanges',
                                    'exportAll',
                                    'exportSelectedRows',
                                    'exportTo',
                                    'clearFilter',
                                    'createFilter',
                                    'filterEnabledHint',
                                    'groupByThisColumn',
                                    'groupContinuedMessage',
                                    'groupContinuesMessage',
                                    'ungroup',
                                    'ungroupAll',
                                    'cancel',
                                    'emptyValue',
                                    'ok',
                                    'avg',
                                    'avgOtherColumn',
                                    'count',
                                    'max',
                                    'maxOtherColumn',
                                    'min',
                                    'minOtherColumn',
                                    'sum',
                                    'sumOtherColumn',
                                    'allFields',
                                    'columnFields',
                                    'dataFields',
                                    'filterFields',
                                    'rowFields',
                                    'columnFieldArea',
                                    'dataFieldArea',
                                    'filterFieldArea',
                                    'rowFieldArea',
                                    'collapseAll',
                                    'dataNotAvailable',
                                    'expandAll',
                                    'exportToExcel',
                                    'grandTotal',
                                    'noData',
                                    'removeAllSorting',
                                    'showFieldChooser',
                                    'sortColumnBySummary',
                                    'sortRowBySummary',
                                    'total',
                                    'addRowToNode'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoTextsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsModule, declarations: [DxoTextsComponent], exports: [DxoTextsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsModule });
            } exports("bV", DxoTextsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTextsComponent
                                ],
                                exports: [
                                    DxoTextsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTickIntervalComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'tickInterval';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTickIntervalComponent, selector: "dxo-tick-interval", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-tick-interval', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoTickIntervalModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalModule, declarations: [DxoTickIntervalComponent], exports: [DxoTickIntervalComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalModule });
            } exports("a8", DxoTickIntervalModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTickIntervalComponent
                                ],
                                exports: [
                                    DxoTickIntervalComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTickComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get length() {
                    return this._getOption('length');
                }
                set length(value) {
                    this._setOption('length', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get shift() {
                    return this._getOption('shift');
                }
                set shift(value) {
                    this._setOption('shift', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'tick';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTickComponent, selector: "dxo-tick", inputs: { color: "color", length: "length", opacity: "opacity", shift: "shift", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-tick', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], length: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], shift: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoTickModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTickModule, declarations: [DxoTickComponent], exports: [DxoTickComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickModule });
            } exports("a7", DxoTickModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTickComponent
                                ],
                                exports: [
                                    DxoTickComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTileComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get _optionPath() {
                    return 'tile';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTileComponent, selector: "dxo-tile", inputs: { border: "border", color: "color", hoverStyle: "hoverStyle", label: "label", selectionStyle: "selectionStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-tile', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], selectionStyle: [{
                            type: Input
                        }] } });
            class DxoTileModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTileModule, declarations: [DxoTileComponent], exports: [DxoTileComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileModule });
            } exports("d9", DxoTileModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTileComponent
                                ],
                                exports: [
                                    DxoTileComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTitleComponent extends NestedOption {
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get placeholderSize() {
                    return this._getOption('placeholderSize');
                }
                set placeholderSize(value) {
                    this._setOption('placeholderSize', value);
                }
                get subtitle() {
                    return this._getOption('subtitle');
                }
                set subtitle(value) {
                    this._setOption('subtitle', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get alignment() {
                    return this._getOption('alignment');
                }
                set alignment(value) {
                    this._setOption('alignment', value);
                }
                get _optionPath() {
                    return 'title';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTitleComponent, selector: "dxo-title", inputs: { font: "font", horizontalAlignment: "horizontalAlignment", margin: "margin", placeholderSize: "placeholderSize", subtitle: "subtitle", text: "text", verticalAlignment: "verticalAlignment", textOverflow: "textOverflow", wordWrap: "wordWrap", alignment: "alignment" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-title', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { font: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], placeholderSize: [{
                            type: Input
                        }], subtitle: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], textOverflow: [{
                            type: Input
                        }], wordWrap: [{
                            type: Input
                        }], alignment: [{
                            type: Input
                        }] } });
            class DxoTitleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleModule, declarations: [DxoTitleComponent], exports: [DxoTitleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleModule });
            } exports("F", DxoTitleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTitleComponent
                                ],
                                exports: [
                                    DxoTitleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoToComponent extends DxoAnimationState {
                get _optionPath() {
                    return 'to';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoToComponent, selector: "dxo-to", inputs: { left: "left", opacity: "opacity", position: "position", scale: "scale", top: "top" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-to', template: '', providers: [NestedOptionHost], inputs: [
                                    'left',
                                    'opacity',
                                    'position',
                                    'scale',
                                    'top'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoToModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoToModule, declarations: [DxoToComponent], exports: [DxoToComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToModule });
            } exports("s", DxoToModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoToComponent
                                ],
                                exports: [
                                    DxoToComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDataGridToolbar extends NestedOption {
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get fileSelectionItems() {
                    return this._getOption('fileSelectionItems');
                }
                set fileSelectionItems(value) {
                    this._setOption('fileSelectionItems', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get multiline() {
                    return this._getOption('multiline');
                }
                set multiline(value) {
                    this._setOption('multiline', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataGridToolbar, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDataGridToolbar, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataGridToolbar, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoToolbarComponent extends DxoDataGridToolbar {
                get _optionPath() {
                    return 'toolbar';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                get fileSelectionItemsChildren() {
                    return this._getOption('fileSelectionItems');
                }
                set fileSelectionItemsChildren(value) {
                    this.setChildren('fileSelectionItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoToolbarComponent, selector: "dxo-toolbar", inputs: { disabled: "disabled", items: "items", visible: "visible", fileSelectionItems: "fileSelectionItems", container: "container", multiline: "multiline" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }, { propertyName: "fileSelectionItemsChildren", predicate: i0.forwardRef(() => DxiFileSelectionItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-toolbar', template: '', providers: [NestedOptionHost], inputs: [
                                    'disabled',
                                    'items',
                                    'visible',
                                    'fileSelectionItems',
                                    'container',
                                    'multiline'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }], fileSelectionItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiFileSelectionItemComponent)]
                        }] } });
            class DxoToolbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarModule, declarations: [DxoToolbarComponent], exports: [DxoToolbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarModule });
            } exports("bz", DxoToolbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoToolbarComponent
                                ],
                                exports: [
                                    DxoToolbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoToolboxComponent extends NestedOption {
                get groups() {
                    return this._getOption('groups');
                }
                set groups(value) {
                    this._setOption('groups', value);
                }
                get shapeIconsPerRow() {
                    return this._getOption('shapeIconsPerRow');
                }
                set shapeIconsPerRow(value) {
                    this._setOption('shapeIconsPerRow', value);
                }
                get showSearch() {
                    return this._getOption('showSearch');
                }
                set showSearch(value) {
                    this._setOption('showSearch', value);
                }
                get visibility() {
                    return this._getOption('visibility');
                }
                set visibility(value) {
                    this._setOption('visibility', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'toolbox';
                }
                get groupsChildren() {
                    return this._getOption('groups');
                }
                set groupsChildren(value) {
                    this.setChildren('groups', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoToolboxComponent, selector: "dxo-toolbox", inputs: { groups: "groups", shapeIconsPerRow: "shapeIconsPerRow", showSearch: "showSearch", visibility: "visibility", width: "width" }, providers: [NestedOptionHost], queries: [{ propertyName: "groupsChildren", predicate: i0.forwardRef(() => DxiGroupComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-toolbox', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { groups: [{
                            type: Input
                        }], shapeIconsPerRow: [{
                            type: Input
                        }], showSearch: [{
                            type: Input
                        }], visibility: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], groupsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiGroupComponent)]
                        }] } });
            class DxoToolboxModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxModule, declarations: [DxoToolboxComponent], exports: [DxoToolboxComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxModule });
            } exports("bq", DxoToolboxModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoToolboxComponent
                                ],
                                exports: [
                                    DxoToolboxComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTooltipComponent extends NestedOption {
                get arrowLength() {
                    return this._getOption('arrowLength');
                }
                set arrowLength(value) {
                    this._setOption('arrowLength', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get contentTemplate() {
                    return this._getOption('contentTemplate');
                }
                set contentTemplate(value) {
                    this._setOption('contentTemplate', value);
                }
                get cornerRadius() {
                    return this._getOption('cornerRadius');
                }
                set cornerRadius(value) {
                    this._setOption('cornerRadius', value);
                }
                get customizeTooltip() {
                    return this._getOption('customizeTooltip');
                }
                set customizeTooltip(value) {
                    this._setOption('customizeTooltip', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get interactive() {
                    return this._getOption('interactive');
                }
                set interactive(value) {
                    this._setOption('interactive', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get shadow() {
                    return this._getOption('shadow');
                }
                set shadow(value) {
                    this._setOption('shadow', value);
                }
                get zIndex() {
                    return this._getOption('zIndex');
                }
                set zIndex(value) {
                    this._setOption('zIndex', value);
                }
                get argumentFormat() {
                    return this._getOption('argumentFormat');
                }
                set argumentFormat(value) {
                    this._setOption('argumentFormat', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get shared() {
                    return this._getOption('shared');
                }
                set shared(value) {
                    this._setOption('shared', value);
                }
                get isShown() {
                    return this._getOption('isShown');
                }
                set isShown(value) {
                    this._setOption('isShown', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get showMode() {
                    return this._getOption('showMode');
                }
                set showMode(value) {
                    this._setOption('showMode', value);
                }
                get customizeLinkTooltip() {
                    return this._getOption('customizeLinkTooltip');
                }
                set customizeLinkTooltip(value) {
                    this._setOption('customizeLinkTooltip', value);
                }
                get customizeNodeTooltip() {
                    return this._getOption('customizeNodeTooltip');
                }
                set customizeNodeTooltip(value) {
                    this._setOption('customizeNodeTooltip', value);
                }
                get linkTooltipTemplate() {
                    return this._getOption('linkTooltipTemplate');
                }
                set linkTooltipTemplate(value) {
                    this._setOption('linkTooltipTemplate', value);
                }
                get nodeTooltipTemplate() {
                    return this._getOption('nodeTooltipTemplate');
                }
                set nodeTooltipTemplate(value) {
                    this._setOption('nodeTooltipTemplate', value);
                }
                get _optionPath() {
                    return 'tooltip';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTooltipComponent, selector: "dxo-tooltip", inputs: { arrowLength: "arrowLength", border: "border", color: "color", container: "container", contentTemplate: "contentTemplate", cornerRadius: "cornerRadius", customizeTooltip: "customizeTooltip", enabled: "enabled", font: "font", format: "format", interactive: "interactive", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", shadow: "shadow", zIndex: "zIndex", argumentFormat: "argumentFormat", location: "location", shared: "shared", isShown: "isShown", text: "text", position: "position", showMode: "showMode", customizeLinkTooltip: "customizeLinkTooltip", customizeNodeTooltip: "customizeNodeTooltip", linkTooltipTemplate: "linkTooltipTemplate", nodeTooltipTemplate: "nodeTooltipTemplate" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-tooltip', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { arrowLength: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], container: [{
                            type: Input
                        }], contentTemplate: [{
                            type: Input
                        }], cornerRadius: [{
                            type: Input
                        }], customizeTooltip: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], format: [{
                            type: Input
                        }], interactive: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], shadow: [{
                            type: Input
                        }], zIndex: [{
                            type: Input
                        }], argumentFormat: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }], shared: [{
                            type: Input
                        }], isShown: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], showMode: [{
                            type: Input
                        }], customizeLinkTooltip: [{
                            type: Input
                        }], customizeNodeTooltip: [{
                            type: Input
                        }], linkTooltipTemplate: [{
                            type: Input
                        }], nodeTooltipTemplate: [{
                            type: Input
                        }] } });
            class DxoTooltipModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipModule, declarations: [DxoTooltipComponent], exports: [DxoTooltipComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipModule });
            } exports("K", DxoTooltipModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTooltipComponent
                                ],
                                exports: [
                                    DxoTooltipComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoUploadComponent extends NestedOption {
                get chunkSize() {
                    return this._getOption('chunkSize');
                }
                set chunkSize(value) {
                    this._setOption('chunkSize', value);
                }
                get maxFileSize() {
                    return this._getOption('maxFileSize');
                }
                set maxFileSize(value) {
                    this._setOption('maxFileSize', value);
                }
                get _optionPath() {
                    return 'upload';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoUploadComponent, selector: "dxo-upload", inputs: { chunkSize: "chunkSize", maxFileSize: "maxFileSize" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-upload', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { chunkSize: [{
                            type: Input
                        }], maxFileSize: [{
                            type: Input
                        }] } });
            class DxoUploadModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadModule, declarations: [DxoUploadComponent], exports: [DxoUploadComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadModule });
            } exports("bB", DxoUploadModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoUploadComponent
                                ],
                                exports: [
                                    DxoUploadComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoUrlComponent extends NestedOption {
                get rangeMaxPoint() {
                    return this._getOption('rangeMaxPoint');
                }
                set rangeMaxPoint(value) {
                    this._setOption('rangeMaxPoint', value);
                }
                get rangeMinPoint() {
                    return this._getOption('rangeMinPoint');
                }
                set rangeMinPoint(value) {
                    this._setOption('rangeMinPoint', value);
                }
                get _optionPath() {
                    return 'url';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoUrlComponent, selector: "dxo-url", inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-url', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { rangeMaxPoint: [{
                            type: Input
                        }], rangeMinPoint: [{
                            type: Input
                        }] } });
            class DxoUrlModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlModule, declarations: [DxoUrlComponent], exports: [DxoUrlComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlModule });
            } exports("al", DxoUrlModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoUrlComponent
                                ],
                                exports: [
                                    DxoUrlComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoValidationComponent extends NestedOption {
                get autoUpdateParentTasks() {
                    return this._getOption('autoUpdateParentTasks');
                }
                set autoUpdateParentTasks(value) {
                    this._setOption('autoUpdateParentTasks', value);
                }
                get enablePredecessorGap() {
                    return this._getOption('enablePredecessorGap');
                }
                set enablePredecessorGap(value) {
                    this._setOption('enablePredecessorGap', value);
                }
                get validateDependencies() {
                    return this._getOption('validateDependencies');
                }
                set validateDependencies(value) {
                    this._setOption('validateDependencies', value);
                }
                get _optionPath() {
                    return 'validation';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValidationComponent, selector: "dxo-validation", inputs: { autoUpdateParentTasks: "autoUpdateParentTasks", enablePredecessorGap: "enablePredecessorGap", validateDependencies: "validateDependencies" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-validation', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { autoUpdateParentTasks: [{
                            type: Input
                        }], enablePredecessorGap: [{
                            type: Input
                        }], validateDependencies: [{
                            type: Input
                        }] } });
            class DxoValidationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationModule, declarations: [DxoValidationComponent], exports: [DxoValidationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationModule });
            } exports("c0", DxoValidationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValidationComponent
                                ],
                                exports: [
                                    DxoValidationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiValueAxisComponent extends CollectionNestedOption {
                get aggregatedPointsPosition() {
                    return this._getOption('aggregatedPointsPosition');
                }
                set aggregatedPointsPosition(value) {
                    this._setOption('aggregatedPointsPosition', value);
                }
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get autoBreaksEnabled() {
                    return this._getOption('autoBreaksEnabled');
                }
                set autoBreaksEnabled(value) {
                    this._setOption('autoBreaksEnabled', value);
                }
                get axisDivisionFactor() {
                    return this._getOption('axisDivisionFactor');
                }
                set axisDivisionFactor(value) {
                    this._setOption('axisDivisionFactor', value);
                }
                get breaks() {
                    return this._getOption('breaks');
                }
                set breaks(value) {
                    this._setOption('breaks', value);
                }
                get breakStyle() {
                    return this._getOption('breakStyle');
                }
                set breakStyle(value) {
                    this._setOption('breakStyle', value);
                }
                get categories() {
                    return this._getOption('categories');
                }
                set categories(value) {
                    this._setOption('categories', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get constantLines() {
                    return this._getOption('constantLines');
                }
                set constantLines(value) {
                    this._setOption('constantLines', value);
                }
                get constantLineStyle() {
                    return this._getOption('constantLineStyle');
                }
                set constantLineStyle(value) {
                    this._setOption('constantLineStyle', value);
                }
                get customPosition() {
                    return this._getOption('customPosition');
                }
                set customPosition(value) {
                    this._setOption('customPosition', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get grid() {
                    return this._getOption('grid');
                }
                set grid(value) {
                    this._setOption('grid', value);
                }
                get inverted() {
                    return this._getOption('inverted');
                }
                set inverted(value) {
                    this._setOption('inverted', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get linearThreshold() {
                    return this._getOption('linearThreshold');
                }
                set linearThreshold(value) {
                    this._setOption('linearThreshold', value);
                }
                get logarithmBase() {
                    return this._getOption('logarithmBase');
                }
                set logarithmBase(value) {
                    this._setOption('logarithmBase', value);
                }
                get maxAutoBreakCount() {
                    return this._getOption('maxAutoBreakCount');
                }
                set maxAutoBreakCount(value) {
                    this._setOption('maxAutoBreakCount', value);
                }
                get maxValueMargin() {
                    return this._getOption('maxValueMargin');
                }
                set maxValueMargin(value) {
                    this._setOption('maxValueMargin', value);
                }
                get minorGrid() {
                    return this._getOption('minorGrid');
                }
                set minorGrid(value) {
                    this._setOption('minorGrid', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minorTickCount() {
                    return this._getOption('minorTickCount');
                }
                set minorTickCount(value) {
                    this._setOption('minorTickCount', value);
                }
                get minorTickInterval() {
                    return this._getOption('minorTickInterval');
                }
                set minorTickInterval(value) {
                    this._setOption('minorTickInterval', value);
                }
                get minValueMargin() {
                    return this._getOption('minValueMargin');
                }
                set minValueMargin(value) {
                    this._setOption('minValueMargin', value);
                }
                get minVisualRangeLength() {
                    return this._getOption('minVisualRangeLength');
                }
                set minVisualRangeLength(value) {
                    this._setOption('minVisualRangeLength', value);
                }
                get multipleAxesSpacing() {
                    return this._getOption('multipleAxesSpacing');
                }
                set multipleAxesSpacing(value) {
                    this._setOption('multipleAxesSpacing', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get pane() {
                    return this._getOption('pane');
                }
                set pane(value) {
                    this._setOption('pane', value);
                }
                get placeholderSize() {
                    return this._getOption('placeholderSize');
                }
                set placeholderSize(value) {
                    this._setOption('placeholderSize', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get showZero() {
                    return this._getOption('showZero');
                }
                set showZero(value) {
                    this._setOption('showZero', value);
                }
                get strips() {
                    return this._getOption('strips');
                }
                set strips(value) {
                    this._setOption('strips', value);
                }
                get stripStyle() {
                    return this._getOption('stripStyle');
                }
                set stripStyle(value) {
                    this._setOption('stripStyle', value);
                }
                get synchronizedValue() {
                    return this._getOption('synchronizedValue');
                }
                set synchronizedValue(value) {
                    this._setOption('synchronizedValue', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get tickInterval() {
                    return this._getOption('tickInterval');
                }
                set tickInterval(value) {
                    this._setOption('tickInterval', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueMarginsEnabled() {
                    return this._getOption('valueMarginsEnabled');
                }
                set valueMarginsEnabled(value) {
                    this._setOption('valueMarginsEnabled', value);
                }
                get valueType() {
                    return this._getOption('valueType');
                }
                set valueType(value) {
                    this._setOption('valueType', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visualRange() {
                    return this._getOption('visualRange');
                }
                set visualRange(value) {
                    this._setOption('visualRange', value);
                }
                get visualRangeUpdateMode() {
                    return this._getOption('visualRangeUpdateMode');
                }
                set visualRangeUpdateMode(value) {
                    this._setOption('visualRangeUpdateMode', value);
                }
                get wholeRange() {
                    return this._getOption('wholeRange');
                }
                set wholeRange(value) {
                    this._setOption('wholeRange', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                categoriesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visualRangeChange;
                get _optionPath() {
                    return 'valueAxis';
                }
                get breaksChildren() {
                    return this._getOption('breaks');
                }
                set breaksChildren(value) {
                    this.setChildren('breaks', value);
                }
                get constantLinesChildren() {
                    return this._getOption('constantLines');
                }
                set constantLinesChildren(value) {
                    this.setChildren('constantLines', value);
                }
                get stripsChildren() {
                    return this._getOption('strips');
                }
                set stripsChildren(value) {
                    this.setChildren('strips', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'categoriesChange' },
                        { emit: 'visualRangeChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiValueAxisComponent, selector: "dxi-value-axis", inputs: { aggregatedPointsPosition: "aggregatedPointsPosition", allowDecimals: "allowDecimals", autoBreaksEnabled: "autoBreaksEnabled", axisDivisionFactor: "axisDivisionFactor", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", customPosition: "customPosition", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxAutoBreakCount: "maxAutoBreakCount", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", multipleAxesSpacing: "multipleAxesSpacing", name: "name", offset: "offset", opacity: "opacity", pane: "pane", placeholderSize: "placeholderSize", position: "position", showZero: "showZero", strips: "strips", stripStyle: "stripStyle", synchronizedValue: "synchronizedValue", tick: "tick", tickInterval: "tickInterval", title: "title", type: "type", valueMarginsEnabled: "valueMarginsEnabled", valueType: "valueType", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width" }, outputs: { categoriesChange: "categoriesChange", visualRangeChange: "visualRangeChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "breaksChildren", predicate: i0.forwardRef(() => DxiBreakComponent) }, { propertyName: "constantLinesChildren", predicate: i0.forwardRef(() => DxiConstantLineComponent) }, { propertyName: "stripsChildren", predicate: i0.forwardRef(() => DxiStripComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("R", DxiValueAxisComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-value-axis', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { aggregatedPointsPosition: [{
                            type: Input
                        }], allowDecimals: [{
                            type: Input
                        }], autoBreaksEnabled: [{
                            type: Input
                        }], axisDivisionFactor: [{
                            type: Input
                        }], breaks: [{
                            type: Input
                        }], breakStyle: [{
                            type: Input
                        }], categories: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], constantLines: [{
                            type: Input
                        }], constantLineStyle: [{
                            type: Input
                        }], customPosition: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], grid: [{
                            type: Input
                        }], inverted: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], linearThreshold: [{
                            type: Input
                        }], logarithmBase: [{
                            type: Input
                        }], maxAutoBreakCount: [{
                            type: Input
                        }], maxValueMargin: [{
                            type: Input
                        }], minorGrid: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minorTickCount: [{
                            type: Input
                        }], minorTickInterval: [{
                            type: Input
                        }], minValueMargin: [{
                            type: Input
                        }], minVisualRangeLength: [{
                            type: Input
                        }], multipleAxesSpacing: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], pane: [{
                            type: Input
                        }], placeholderSize: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], showZero: [{
                            type: Input
                        }], strips: [{
                            type: Input
                        }], stripStyle: [{
                            type: Input
                        }], synchronizedValue: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], tickInterval: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], valueMarginsEnabled: [{
                            type: Input
                        }], valueType: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], visualRange: [{
                            type: Input
                        }], visualRangeUpdateMode: [{
                            type: Input
                        }], wholeRange: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], categoriesChange: [{
                            type: Output
                        }], visualRangeChange: [{
                            type: Output
                        }], breaksChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiBreakComponent)]
                        }], constantLinesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiConstantLineComponent)]
                        }], stripsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiStripComponent)]
                        }] } });
            class DxiValueAxisModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisModule, declarations: [DxiValueAxisComponent], exports: [DxiValueAxisComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisModule });
            } exports("aW", DxiValueAxisModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiValueAxisComponent
                                ],
                                exports: [
                                    DxiValueAxisComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoValueAxisComponent extends NestedOption {
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get axisDivisionFactor() {
                    return this._getOption('axisDivisionFactor');
                }
                set axisDivisionFactor(value) {
                    this._setOption('axisDivisionFactor', value);
                }
                get categories() {
                    return this._getOption('categories');
                }
                set categories(value) {
                    this._setOption('categories', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get constantLines() {
                    return this._getOption('constantLines');
                }
                set constantLines(value) {
                    this._setOption('constantLines', value);
                }
                get constantLineStyle() {
                    return this._getOption('constantLineStyle');
                }
                set constantLineStyle(value) {
                    this._setOption('constantLineStyle', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get grid() {
                    return this._getOption('grid');
                }
                set grid(value) {
                    this._setOption('grid', value);
                }
                get inverted() {
                    return this._getOption('inverted');
                }
                set inverted(value) {
                    this._setOption('inverted', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get linearThreshold() {
                    return this._getOption('linearThreshold');
                }
                set linearThreshold(value) {
                    this._setOption('linearThreshold', value);
                }
                get logarithmBase() {
                    return this._getOption('logarithmBase');
                }
                set logarithmBase(value) {
                    this._setOption('logarithmBase', value);
                }
                get maxValueMargin() {
                    return this._getOption('maxValueMargin');
                }
                set maxValueMargin(value) {
                    this._setOption('maxValueMargin', value);
                }
                get minorGrid() {
                    return this._getOption('minorGrid');
                }
                set minorGrid(value) {
                    this._setOption('minorGrid', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minorTickCount() {
                    return this._getOption('minorTickCount');
                }
                set minorTickCount(value) {
                    this._setOption('minorTickCount', value);
                }
                get minorTickInterval() {
                    return this._getOption('minorTickInterval');
                }
                set minorTickInterval(value) {
                    this._setOption('minorTickInterval', value);
                }
                get minValueMargin() {
                    return this._getOption('minValueMargin');
                }
                set minValueMargin(value) {
                    this._setOption('minValueMargin', value);
                }
                get minVisualRangeLength() {
                    return this._getOption('minVisualRangeLength');
                }
                set minVisualRangeLength(value) {
                    this._setOption('minVisualRangeLength', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get showZero() {
                    return this._getOption('showZero');
                }
                set showZero(value) {
                    this._setOption('showZero', value);
                }
                get strips() {
                    return this._getOption('strips');
                }
                set strips(value) {
                    this._setOption('strips', value);
                }
                get stripStyle() {
                    return this._getOption('stripStyle');
                }
                set stripStyle(value) {
                    this._setOption('stripStyle', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get tickInterval() {
                    return this._getOption('tickInterval');
                }
                set tickInterval(value) {
                    this._setOption('tickInterval', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueMarginsEnabled() {
                    return this._getOption('valueMarginsEnabled');
                }
                set valueMarginsEnabled(value) {
                    this._setOption('valueMarginsEnabled', value);
                }
                get valueType() {
                    return this._getOption('valueType');
                }
                set valueType(value) {
                    this._setOption('valueType', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visualRange() {
                    return this._getOption('visualRange');
                }
                set visualRange(value) {
                    this._setOption('visualRange', value);
                }
                get visualRangeUpdateMode() {
                    return this._getOption('visualRangeUpdateMode');
                }
                set visualRangeUpdateMode(value) {
                    this._setOption('visualRangeUpdateMode', value);
                }
                get wholeRange() {
                    return this._getOption('wholeRange');
                }
                set wholeRange(value) {
                    this._setOption('wholeRange', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visualRangeChange;
                get _optionPath() {
                    return 'valueAxis';
                }
                get constantLinesChildren() {
                    return this._getOption('constantLines');
                }
                set constantLinesChildren(value) {
                    this.setChildren('constantLines', value);
                }
                get stripsChildren() {
                    return this._getOption('strips');
                }
                set stripsChildren(value) {
                    this.setChildren('strips', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'visualRangeChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValueAxisComponent, selector: "dxo-value-axis", inputs: { allowDecimals: "allowDecimals", axisDivisionFactor: "axisDivisionFactor", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", opacity: "opacity", showZero: "showZero", strips: "strips", stripStyle: "stripStyle", tick: "tick", tickInterval: "tickInterval", type: "type", valueMarginsEnabled: "valueMarginsEnabled", valueType: "valueType", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width", max: "max", min: "min" }, outputs: { visualRangeChange: "visualRangeChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "constantLinesChildren", predicate: i0.forwardRef(() => DxiConstantLineComponent) }, { propertyName: "stripsChildren", predicate: i0.forwardRef(() => DxiStripComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-value-axis', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowDecimals: [{
                            type: Input
                        }], axisDivisionFactor: [{
                            type: Input
                        }], categories: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], constantLines: [{
                            type: Input
                        }], constantLineStyle: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], grid: [{
                            type: Input
                        }], inverted: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], linearThreshold: [{
                            type: Input
                        }], logarithmBase: [{
                            type: Input
                        }], maxValueMargin: [{
                            type: Input
                        }], minorGrid: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minorTickCount: [{
                            type: Input
                        }], minorTickInterval: [{
                            type: Input
                        }], minValueMargin: [{
                            type: Input
                        }], minVisualRangeLength: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], showZero: [{
                            type: Input
                        }], strips: [{
                            type: Input
                        }], stripStyle: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], tickInterval: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], valueMarginsEnabled: [{
                            type: Input
                        }], valueType: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], visualRange: [{
                            type: Input
                        }], visualRangeUpdateMode: [{
                            type: Input
                        }], wholeRange: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], max: [{
                            type: Input
                        }], min: [{
                            type: Input
                        }], visualRangeChange: [{
                            type: Output
                        }], constantLinesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiConstantLineComponent)]
                        }], stripsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiStripComponent)]
                        }] } });
            class DxoValueAxisModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisModule, declarations: [DxoValueAxisComponent], exports: [DxoValueAxisComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisModule });
            } exports("cv", DxoValueAxisModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValueAxisComponent
                                ],
                                exports: [
                                    DxoValueAxisComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoValueErrorBarComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get edgeLength() {
                    return this._getOption('edgeLength');
                }
                set edgeLength(value) {
                    this._setOption('edgeLength', value);
                }
                get highValueField() {
                    return this._getOption('highValueField');
                }
                set highValueField(value) {
                    this._setOption('highValueField', value);
                }
                get lineWidth() {
                    return this._getOption('lineWidth');
                }
                set lineWidth(value) {
                    this._setOption('lineWidth', value);
                }
                get lowValueField() {
                    return this._getOption('lowValueField');
                }
                set lowValueField(value) {
                    this._setOption('lowValueField', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get _optionPath() {
                    return 'valueErrorBar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValueErrorBarComponent, selector: "dxo-value-error-bar", inputs: { color: "color", displayMode: "displayMode", edgeLength: "edgeLength", highValueField: "highValueField", lineWidth: "lineWidth", lowValueField: "lowValueField", opacity: "opacity", type: "type", value: "value" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-value-error-bar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], edgeLength: [{
                            type: Input
                        }], highValueField: [{
                            type: Input
                        }], lineWidth: [{
                            type: Input
                        }], lowValueField: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], value: [{
                            type: Input
                        }] } });
            class DxoValueErrorBarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarModule, declarations: [DxoValueErrorBarComponent], exports: [DxoValueErrorBarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarModule });
            } exports("ap", DxoValueErrorBarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValueErrorBarComponent
                                ],
                                exports: [
                                    DxoValueErrorBarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoValueFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'valueFormat';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValueFormatComponent, selector: "dxo-value-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-value-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoValueFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatModule, declarations: [DxoValueFormatComponent], exports: [DxoValueFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValueFormatComponent
                                ],
                                exports: [
                                    DxoValueFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoValueIndicatorComponent extends DxoGaugeIndicator {
                get _optionPath() {
                    return 'valueIndicator';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValueIndicatorComponent, selector: "dxo-value-indicator", inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-value-indicator', template: '', providers: [NestedOptionHost], inputs: [
                                    'arrowLength',
                                    'backgroundColor',
                                    'baseValue',
                                    'beginAdaptingAtRadius',
                                    'color',
                                    'horizontalOrientation',
                                    'indentFromCenter',
                                    'length',
                                    'offset',
                                    'palette',
                                    'secondColor',
                                    'secondFraction',
                                    'size',
                                    'spindleGapSize',
                                    'spindleSize',
                                    'text',
                                    'type',
                                    'verticalOrientation',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoValueIndicatorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorModule, declarations: [DxoValueIndicatorComponent], exports: [DxoValueIndicatorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorModule });
            } exports("b2", DxoValueIndicatorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValueIndicatorComponent
                                ],
                                exports: [
                                    DxoValueIndicatorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorVariables extends NestedOption {
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get escapeChar() {
                    return this._getOption('escapeChar');
                }
                set escapeChar(value) {
                    this._setOption('escapeChar', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorVariables, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorVariables, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorVariables, decorators: [{
                        type: Component,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoVariablesComponent extends DxoHtmlEditorVariables {
                get _optionPath() {
                    return 'variables';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoVariablesComponent, selector: "dxo-variables", inputs: { dataSource: "dataSource", escapeChar: "escapeChar" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-variables', template: '', providers: [NestedOptionHost], inputs: [
                                    'dataSource',
                                    'escapeChar'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoVariablesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesModule, declarations: [DxoVariablesComponent], exports: [DxoVariablesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesModule });
            } exports("c8", DxoVariablesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoVariablesComponent
                                ],
                                exports: [
                                    DxoVariablesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoVerticalLineComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'verticalLine';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoVerticalLineComponent, selector: "dxo-vertical-line", inputs: { color: "color", dashStyle: "dashStyle", label: "label", opacity: "opacity", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-vertical-line', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoVerticalLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineModule, declarations: [DxoVerticalLineComponent], exports: [DxoVerticalLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineModule });
            } exports("aQ", DxoVerticalLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoVerticalLineComponent
                                ],
                                exports: [
                                    DxoVerticalLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiViewComponent extends CollectionNestedOption {
                get agendaDuration() {
                    return this._getOption('agendaDuration');
                }
                set agendaDuration(value) {
                    this._setOption('agendaDuration', value);
                }
                get allDayPanelMode() {
                    return this._getOption('allDayPanelMode');
                }
                set allDayPanelMode(value) {
                    this._setOption('allDayPanelMode', value);
                }
                get appointmentCollectorTemplate() {
                    return this._getOption('appointmentCollectorTemplate');
                }
                set appointmentCollectorTemplate(value) {
                    this._setOption('appointmentCollectorTemplate', value);
                }
                get appointmentTemplate() {
                    return this._getOption('appointmentTemplate');
                }
                set appointmentTemplate(value) {
                    this._setOption('appointmentTemplate', value);
                }
                get appointmentTooltipTemplate() {
                    return this._getOption('appointmentTooltipTemplate');
                }
                set appointmentTooltipTemplate(value) {
                    this._setOption('appointmentTooltipTemplate', value);
                }
                get cellDuration() {
                    return this._getOption('cellDuration');
                }
                set cellDuration(value) {
                    this._setOption('cellDuration', value);
                }
                get dataCellTemplate() {
                    return this._getOption('dataCellTemplate');
                }
                set dataCellTemplate(value) {
                    this._setOption('dataCellTemplate', value);
                }
                get dateCellTemplate() {
                    return this._getOption('dateCellTemplate');
                }
                set dateCellTemplate(value) {
                    this._setOption('dateCellTemplate', value);
                }
                get dropDownAppointmentTemplate() {
                    return this._getOption('dropDownAppointmentTemplate');
                }
                set dropDownAppointmentTemplate(value) {
                    this._setOption('dropDownAppointmentTemplate', value);
                }
                get endDayHour() {
                    return this._getOption('endDayHour');
                }
                set endDayHour(value) {
                    this._setOption('endDayHour', value);
                }
                get firstDayOfWeek() {
                    return this._getOption('firstDayOfWeek');
                }
                set firstDayOfWeek(value) {
                    this._setOption('firstDayOfWeek', value);
                }
                get groupByDate() {
                    return this._getOption('groupByDate');
                }
                set groupByDate(value) {
                    this._setOption('groupByDate', value);
                }
                get groupOrientation() {
                    return this._getOption('groupOrientation');
                }
                set groupOrientation(value) {
                    this._setOption('groupOrientation', value);
                }
                get groups() {
                    return this._getOption('groups');
                }
                set groups(value) {
                    this._setOption('groups', value);
                }
                get intervalCount() {
                    return this._getOption('intervalCount');
                }
                set intervalCount(value) {
                    this._setOption('intervalCount', value);
                }
                get maxAppointmentsPerCell() {
                    return this._getOption('maxAppointmentsPerCell');
                }
                set maxAppointmentsPerCell(value) {
                    this._setOption('maxAppointmentsPerCell', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get resourceCellTemplate() {
                    return this._getOption('resourceCellTemplate');
                }
                set resourceCellTemplate(value) {
                    this._setOption('resourceCellTemplate', value);
                }
                get scrolling() {
                    return this._getOption('scrolling');
                }
                set scrolling(value) {
                    this._setOption('scrolling', value);
                }
                get startDate() {
                    return this._getOption('startDate');
                }
                set startDate(value) {
                    this._setOption('startDate', value);
                }
                get startDayHour() {
                    return this._getOption('startDayHour');
                }
                set startDayHour(value) {
                    this._setOption('startDayHour', value);
                }
                get timeCellTemplate() {
                    return this._getOption('timeCellTemplate');
                }
                set timeCellTemplate(value) {
                    this._setOption('timeCellTemplate', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'views';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiViewComponent, selector: "dxi-view", inputs: { agendaDuration: "agendaDuration", allDayPanelMode: "allDayPanelMode", appointmentCollectorTemplate: "appointmentCollectorTemplate", appointmentTemplate: "appointmentTemplate", appointmentTooltipTemplate: "appointmentTooltipTemplate", cellDuration: "cellDuration", dataCellTemplate: "dataCellTemplate", dateCellTemplate: "dateCellTemplate", dropDownAppointmentTemplate: "dropDownAppointmentTemplate", endDayHour: "endDayHour", firstDayOfWeek: "firstDayOfWeek", groupByDate: "groupByDate", groupOrientation: "groupOrientation", groups: "groups", intervalCount: "intervalCount", maxAppointmentsPerCell: "maxAppointmentsPerCell", name: "name", offset: "offset", resourceCellTemplate: "resourceCellTemplate", scrolling: "scrolling", startDate: "startDate", startDayHour: "startDayHour", timeCellTemplate: "timeCellTemplate", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cO", DxiViewComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxi-view', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { agendaDuration: [{
                            type: Input
                        }], allDayPanelMode: [{
                            type: Input
                        }], appointmentCollectorTemplate: [{
                            type: Input
                        }], appointmentTemplate: [{
                            type: Input
                        }], appointmentTooltipTemplate: [{
                            type: Input
                        }], cellDuration: [{
                            type: Input
                        }], dataCellTemplate: [{
                            type: Input
                        }], dateCellTemplate: [{
                            type: Input
                        }], dropDownAppointmentTemplate: [{
                            type: Input
                        }], endDayHour: [{
                            type: Input
                        }], firstDayOfWeek: [{
                            type: Input
                        }], groupByDate: [{
                            type: Input
                        }], groupOrientation: [{
                            type: Input
                        }], groups: [{
                            type: Input
                        }], intervalCount: [{
                            type: Input
                        }], maxAppointmentsPerCell: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], resourceCellTemplate: [{
                            type: Input
                        }], scrolling: [{
                            type: Input
                        }], startDate: [{
                            type: Input
                        }], startDayHour: [{
                            type: Input
                        }], timeCellTemplate: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxiViewModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiViewModule, declarations: [DxiViewComponent], exports: [DxiViewComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewModule });
            } exports("cR", DxiViewModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiViewComponent
                                ],
                                exports: [
                                    DxiViewComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoViewToolbarComponent extends NestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'viewToolbar';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoViewToolbarComponent, selector: "dxo-view-toolbar", inputs: { commands: "commands", visible: "visible" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-view-toolbar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commands: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }] } });
            class DxoViewToolbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarModule, declarations: [DxoViewToolbarComponent], exports: [DxoViewToolbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarModule });
            } exports("br", DxoViewToolbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoViewToolbarComponent
                                ],
                                exports: [
                                    DxoViewToolbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoWidthComponent extends NestedOption {
                get rangeMaxPoint() {
                    return this._getOption('rangeMaxPoint');
                }
                set rangeMaxPoint(value) {
                    this._setOption('rangeMaxPoint', value);
                }
                get rangeMinPoint() {
                    return this._getOption('rangeMinPoint');
                }
                set rangeMinPoint(value) {
                    this._setOption('rangeMinPoint', value);
                }
                get end() {
                    return this._getOption('end');
                }
                set end(value) {
                    this._setOption('end', value);
                }
                get start() {
                    return this._getOption('start');
                }
                set start(value) {
                    this._setOption('start', value);
                }
                get _optionPath() {
                    return 'width';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoWidthComponent, selector: "dxo-width", inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint", end: "end", start: "start" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-width', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { rangeMaxPoint: [{
                            type: Input
                        }], rangeMinPoint: [{
                            type: Input
                        }], end: [{
                            type: Input
                        }], start: [{
                            type: Input
                        }] } });
            class DxoWidthModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthModule, declarations: [DxoWidthComponent], exports: [DxoWidthComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthModule });
            } exports("am", DxoWidthModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoWidthComponent
                                ],
                                exports: [
                                    DxoWidthComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoZoomAndPanComponent extends NestedOption {
                get allowMouseWheel() {
                    return this._getOption('allowMouseWheel');
                }
                set allowMouseWheel(value) {
                    this._setOption('allowMouseWheel', value);
                }
                get allowTouchGestures() {
                    return this._getOption('allowTouchGestures');
                }
                set allowTouchGestures(value) {
                    this._setOption('allowTouchGestures', value);
                }
                get argumentAxis() {
                    return this._getOption('argumentAxis');
                }
                set argumentAxis(value) {
                    this._setOption('argumentAxis', value);
                }
                get dragBoxStyle() {
                    return this._getOption('dragBoxStyle');
                }
                set dragBoxStyle(value) {
                    this._setOption('dragBoxStyle', value);
                }
                get dragToZoom() {
                    return this._getOption('dragToZoom');
                }
                set dragToZoom(value) {
                    this._setOption('dragToZoom', value);
                }
                get panKey() {
                    return this._getOption('panKey');
                }
                set panKey(value) {
                    this._setOption('panKey', value);
                }
                get valueAxis() {
                    return this._getOption('valueAxis');
                }
                set valueAxis(value) {
                    this._setOption('valueAxis', value);
                }
                get _optionPath() {
                    return 'zoomAndPan';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoZoomAndPanComponent, selector: "dxo-zoom-and-pan", inputs: { allowMouseWheel: "allowMouseWheel", allowTouchGestures: "allowTouchGestures", argumentAxis: "argumentAxis", dragBoxStyle: "dragBoxStyle", dragToZoom: "dragToZoom", panKey: "panKey", valueAxis: "valueAxis" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-zoom-and-pan', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowMouseWheel: [{
                            type: Input
                        }], allowTouchGestures: [{
                            type: Input
                        }], argumentAxis: [{
                            type: Input
                        }], dragBoxStyle: [{
                            type: Input
                        }], dragToZoom: [{
                            type: Input
                        }], panKey: [{
                            type: Input
                        }], valueAxis: [{
                            type: Input
                        }] } });
            class DxoZoomAndPanModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanModule, declarations: [DxoZoomAndPanComponent], exports: [DxoZoomAndPanComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanModule });
            } exports("aX", DxoZoomAndPanModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoZoomAndPanComponent
                                ],
                                exports: [
                                    DxoZoomAndPanComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoZoomLevelComponent extends NestedOption {
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'zoomLevel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoZoomLevelComponent, selector: "dxo-zoom-level", inputs: { items: "items", value: "value" }, outputs: { valueChange: "valueChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelComponent, decorators: [{
                        type: Component,
                        args: [{ selector: 'dxo-zoom-level', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { items: [{
                            type: Input
                        }], value: [{
                            type: Input
                        }], valueChange: [{
                            type: Output
                        }] } });
            class DxoZoomLevelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelModule, declarations: [DxoZoomLevelComponent], exports: [DxoZoomLevelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelModule });
            } exports("bs", DxoZoomLevelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoZoomLevelComponent
                                ],
                                exports: [
                                    DxoZoomLevelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /**
             * The DataGrid is a UI component that represents data from a local or remote source in the form of a grid. This UI component offers such basic features as sorting, grouping, filtering, as well as more advanced capabilities, like state storing, client-side exporting, master-detail interface, and many others.

             */
            class DxDataGridComponent extends DxComponent {
                _watcherHelper;
                _idh;
                instance = null;
                /**
                 * Specifies the shortcut key that sets focus on the UI component.
                
                 */
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                /**
                 * Specifies whether the UI component changes its visual state as a result of user interaction.
                
                 */
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                /**
                 * Specifies whether a user can reorder columns.
                
                 */
                get allowColumnReordering() {
                    return this._getOption('allowColumnReordering');
                }
                set allowColumnReordering(value) {
                    this._setOption('allowColumnReordering', value);
                }
                /**
                 * Specifies whether a user can resize columns.
                
                 */
                get allowColumnResizing() {
                    return this._getOption('allowColumnResizing');
                }
                set allowColumnResizing(value) {
                    this._setOption('allowColumnResizing', value);
                }
                /**
                 * Automatically scrolls the component to the focused row when the focusedRowKey is changed.
                
                 */
                get autoNavigateToFocusedRow() {
                    return this._getOption('autoNavigateToFocusedRow');
                }
                set autoNavigateToFocusedRow(value) {
                    this._setOption('autoNavigateToFocusedRow', value);
                }
                /**
                 * Specifies whether data should be cached.
                
                 */
                get cacheEnabled() {
                    return this._getOption('cacheEnabled');
                }
                set cacheEnabled(value) {
                    this._setOption('cacheEnabled', value);
                }
                /**
                 * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.
                
                 */
                get cellHintEnabled() {
                    return this._getOption('cellHintEnabled');
                }
                set cellHintEnabled(value) {
                    this._setOption('cellHintEnabled', value);
                }
                /**
                 * Specifies whether columns should adjust their widths to the content.
                
                 */
                get columnAutoWidth() {
                    return this._getOption('columnAutoWidth');
                }
                set columnAutoWidth(value) {
                    this._setOption('columnAutoWidth', value);
                }
                /**
                 * Configures the column chooser.
                
                 */
                get columnChooser() {
                    return this._getOption('columnChooser');
                }
                set columnChooser(value) {
                    this._setOption('columnChooser', value);
                }
                /**
                 * Configures column fixing.
                
                 */
                get columnFixing() {
                    return this._getOption('columnFixing');
                }
                set columnFixing(value) {
                    this._setOption('columnFixing', value);
                }
                /**
                 * Specifies whether the UI component should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is &apos;widget&apos;.
                
                 */
                get columnHidingEnabled() {
                    return this._getOption('columnHidingEnabled');
                }
                set columnHidingEnabled(value) {
                    this._setOption('columnHidingEnabled', value);
                }
                /**
                 * Specifies the minimum width of columns.
                
                 */
                get columnMinWidth() {
                    return this._getOption('columnMinWidth');
                }
                set columnMinWidth(value) {
                    this._setOption('columnMinWidth', value);
                }
                /**
                 * Specifies how the UI component resizes columns. Applies only if allowColumnResizing is true.
                
                 */
                get columnResizingMode() {
                    return this._getOption('columnResizingMode');
                }
                set columnResizingMode(value) {
                    this._setOption('columnResizingMode', value);
                }
                /**
                 * An array of grid columns.
                
                 */
                get columns() {
                    return this._getOption('columns');
                }
                set columns(value) {
                    this._setOption('columns', value);
                }
                /**
                 * Specifies the width for all data columns. Has a lower priority than the column.width property.
                
                 */
                get columnWidth() {
                    return this._getOption('columnWidth');
                }
                set columnWidth(value) {
                    this._setOption('columnWidth', value);
                }
                /**
                 * Customizes columns after they are created.
                
                 */
                get customizeColumns() {
                    return this._getOption('customizeColumns');
                }
                set customizeColumns(value) {
                    this._setOption('customizeColumns', value);
                }
                /**
                 * Specifies a custom template for data rows.
                
                 */
                get dataRowTemplate() {
                    return this._getOption('dataRowTemplate');
                }
                set dataRowTemplate(value) {
                    this._setOption('dataRowTemplate', value);
                }
                /**
                 * Binds the UI component to data.
                
                 */
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                /**
                 * Specifies the format in which date-time values should be sent to the server.
                
                 */
                get dateSerializationFormat() {
                    return this._getOption('dateSerializationFormat');
                }
                set dateSerializationFormat(value) {
                    this._setOption('dateSerializationFormat', value);
                }
                /**
                 * Specifies whether the UI component responds to user interaction.
                
                 */
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                /**
                 * Configures editing.
                
                 */
                get editing() {
                    return this._getOption('editing');
                }
                set editing(value) {
                    this._setOption('editing', value);
                }
                /**
                 * Specifies the global attributes to be attached to the UI component&apos;s container element.
                
                 */
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                /**
                 * Indicates whether to show the error row.
                
                 */
                get errorRowEnabled() {
                    return this._getOption('errorRowEnabled');
                }
                set errorRowEnabled(value) {
                    this._setOption('errorRowEnabled', value);
                }
                /**
                 * Configures client-side exporting.
                
                 */
                get export() {
                    return this._getOption('export');
                }
                set export(value) {
                    this._setOption('export', value);
                }
                /**
                 * Configures the integrated filter builder.
                
                 */
                get filterBuilder() {
                    return this._getOption('filterBuilder');
                }
                set filterBuilder(value) {
                    this._setOption('filterBuilder', value);
                }
                /**
                 * Configures the popup in which the integrated filter builder is shown.
                
                 */
                get filterBuilderPopup() {
                    return this._getOption('filterBuilderPopup');
                }
                set filterBuilderPopup(value) {
                    this._setOption('filterBuilderPopup', value);
                }
                /**
                 * Configures the filter panel.
                
                 */
                get filterPanel() {
                    return this._getOption('filterPanel');
                }
                set filterPanel(value) {
                    this._setOption('filterPanel', value);
                }
                /**
                 * Configures the filter row.
                
                 */
                get filterRow() {
                    return this._getOption('filterRow');
                }
                set filterRow(value) {
                    this._setOption('filterRow', value);
                }
                /**
                 * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue property.
                
                 */
                get filterSyncEnabled() {
                    return this._getOption('filterSyncEnabled');
                }
                set filterSyncEnabled(value) {
                    this._setOption('filterSyncEnabled', value);
                }
                /**
                 * Specifies a filter expression.
                
                 */
                get filterValue() {
                    return this._getOption('filterValue');
                }
                set filterValue(value) {
                    this._setOption('filterValue', value);
                }
                /**
                 * The index of the column that contains the focused data cell. This index is taken from the columns array.
                
                 */
                get focusedColumnIndex() {
                    return this._getOption('focusedColumnIndex');
                }
                set focusedColumnIndex(value) {
                    this._setOption('focusedColumnIndex', value);
                }
                /**
                 * Specifies whether the focused row feature is enabled.
                
                 */
                get focusedRowEnabled() {
                    return this._getOption('focusedRowEnabled');
                }
                set focusedRowEnabled(value) {
                    this._setOption('focusedRowEnabled', value);
                }
                /**
                 * Specifies or indicates the focused data row&apos;s index.
                
                 */
                get focusedRowIndex() {
                    return this._getOption('focusedRowIndex');
                }
                set focusedRowIndex(value) {
                    this._setOption('focusedRowIndex', value);
                }
                /**
                 * Specifies initially or currently focused grid row&apos;s key.
                
                 */
                get focusedRowKey() {
                    return this._getOption('focusedRowKey');
                }
                set focusedRowKey(value) {
                    this._setOption('focusedRowKey', value);
                }
                /**
                 * Configures grouping.
                
                 */
                get grouping() {
                    return this._getOption('grouping');
                }
                set grouping(value) {
                    this._setOption('grouping', value);
                }
                /**
                 * Configures the group panel.
                
                 */
                get groupPanel() {
                    return this._getOption('groupPanel');
                }
                set groupPanel(value) {
                    this._setOption('groupPanel', value);
                }
                /**
                 * Configures the header filter feature.
                
                 */
                get headerFilter() {
                    return this._getOption('headerFilter');
                }
                set headerFilter(value) {
                    this._setOption('headerFilter', value);
                }
                /**
                 * Specifies the UI component&apos;s height.
                
                 */
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                /**
                 * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.
                
                 */
                get highlightChanges() {
                    return this._getOption('highlightChanges');
                }
                set highlightChanges(value) {
                    this._setOption('highlightChanges', value);
                }
                /**
                 * Specifies text for a hint that appears when a user pauses on the UI component.
                
                 */
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                /**
                 * Specifies whether the UI component changes its state when a user pauses on it.
                
                 */
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                /**
                 * Configures keyboard navigation.
                
                 */
                get keyboardNavigation() {
                    return this._getOption('keyboardNavigation');
                }
                set keyboardNavigation(value) {
                    this._setOption('keyboardNavigation', value);
                }
                /**
                 * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique. This property applies only if data is a simple array.
                
                 */
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                /**
                 * Configures the load panel.
                
                 */
                get loadPanel() {
                    return this._getOption('loadPanel');
                }
                set loadPanel(value) {
                    this._setOption('loadPanel', value);
                }
                /**
                 * Allows you to build a master-detail interface in the grid.
                
                 */
                get masterDetail() {
                    return this._getOption('masterDetail');
                }
                set masterDetail(value) {
                    this._setOption('masterDetail', value);
                }
                /**
                 * Specifies a text string shown when the widget does not display any data.
                
                 */
                get noDataText() {
                    return this._getOption('noDataText');
                }
                set noDataText(value) {
                    this._setOption('noDataText', value);
                }
                /**
                 * Configures the pager.
                
                 */
                get pager() {
                    return this._getOption('pager');
                }
                set pager(value) {
                    this._setOption('pager', value);
                }
                /**
                 * Configures paging.
                
                 */
                get paging() {
                    return this._getOption('paging');
                }
                set paging(value) {
                    this._setOption('paging', value);
                }
                /**
                 * Notifies the DataGrid of the server&apos;s data processing operations.
                
                 */
                get remoteOperations() {
                    return this._getOption('remoteOperations');
                }
                set remoteOperations(value) {
                    this._setOption('remoteOperations', value);
                }
                /**
                 * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.
                
                 */
                get renderAsync() {
                    return this._getOption('renderAsync');
                }
                set renderAsync(value) {
                    this._setOption('renderAsync', value);
                }
                /**
                 * Specifies whether to repaint only those cells whose data changed.
                
                 */
                get repaintChangesOnly() {
                    return this._getOption('repaintChangesOnly');
                }
                set repaintChangesOnly(value) {
                    this._setOption('repaintChangesOnly', value);
                }
                /**
                 * Specifies whether rows should be shaded differently.
                
                 */
                get rowAlternationEnabled() {
                    return this._getOption('rowAlternationEnabled');
                }
                set rowAlternationEnabled(value) {
                    this._setOption('rowAlternationEnabled', value);
                }
                /**
                 * Configures row reordering using drag and drop gestures.
                
                 */
                get rowDragging() {
                    return this._getOption('rowDragging');
                }
                set rowDragging(value) {
                    this._setOption('rowDragging', value);
                }
                /**
                 * Specifies a custom template for rows.
                
                 * @deprecated Use the dataRowTemplate option instead.
                
                 */
                get rowTemplate() {
                    return this._getOption('rowTemplate');
                }
                set rowTemplate(value) {
                    this._setOption('rowTemplate', value);
                }
                /**
                 * Switches the UI component to a right-to-left representation.
                
                 */
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                /**
                 * Configures scrolling.
                
                 */
                get scrolling() {
                    return this._getOption('scrolling');
                }
                set scrolling(value) {
                    this._setOption('scrolling', value);
                }
                /**
                 * Configures the search panel.
                
                 */
                get searchPanel() {
                    return this._getOption('searchPanel');
                }
                set searchPanel(value) {
                    this._setOption('searchPanel', value);
                }
                /**
                 * Allows you to select rows or determine which rows are selected.
                
                 */
                get selectedRowKeys() {
                    return this._getOption('selectedRowKeys');
                }
                set selectedRowKeys(value) {
                    this._setOption('selectedRowKeys', value);
                }
                /**
                 * Configures runtime selection.
                
                 */
                get selection() {
                    return this._getOption('selection');
                }
                set selection(value) {
                    this._setOption('selection', value);
                }
                /**
                 * Specifies filters for the rows that must be selected initially. Applies only if selection.deferred is true.
                
                 */
                get selectionFilter() {
                    return this._getOption('selectionFilter');
                }
                set selectionFilter(value) {
                    this._setOption('selectionFilter', value);
                }
                /**
                 * Specifies whether the outer borders of the UI component are visible.
                
                 */
                get showBorders() {
                    return this._getOption('showBorders');
                }
                set showBorders(value) {
                    this._setOption('showBorders', value);
                }
                /**
                 * Specifies whether column headers are visible.
                
                 */
                get showColumnHeaders() {
                    return this._getOption('showColumnHeaders');
                }
                set showColumnHeaders(value) {
                    this._setOption('showColumnHeaders', value);
                }
                /**
                 * Specifies whether vertical lines that separate one column from another are visible.
                
                 */
                get showColumnLines() {
                    return this._getOption('showColumnLines');
                }
                set showColumnLines(value) {
                    this._setOption('showColumnLines', value);
                }
                /**
                 * Specifies whether horizontal lines that separate one row from another are visible.
                
                 */
                get showRowLines() {
                    return this._getOption('showRowLines');
                }
                set showRowLines(value) {
                    this._setOption('showRowLines', value);
                }
                /**
                 * Allows you to sort groups according to the values of group summary items.
                
                 */
                get sortByGroupSummaryInfo() {
                    return this._getOption('sortByGroupSummaryInfo');
                }
                set sortByGroupSummaryInfo(value) {
                    this._setOption('sortByGroupSummaryInfo', value);
                }
                /**
                 * Configures runtime sorting.
                
                 */
                get sorting() {
                    return this._getOption('sorting');
                }
                set sorting(value) {
                    this._setOption('sorting', value);
                }
                /**
                 * Configures state storing.
                
                 */
                get stateStoring() {
                    return this._getOption('stateStoring');
                }
                set stateStoring(value) {
                    this._setOption('stateStoring', value);
                }
                /**
                 * Specifies the properties of the grid summary.
                
                 */
                get summary() {
                    return this._getOption('summary');
                }
                set summary(value) {
                    this._setOption('summary', value);
                }
                /**
                 * Specifies whether to show only relevant values in the header filter and filter row.
                
                 */
                get syncLookupFilterValues() {
                    return this._getOption('syncLookupFilterValues');
                }
                set syncLookupFilterValues(value) {
                    this._setOption('syncLookupFilterValues', value);
                }
                /**
                 * Specifies the number of the element when the Tab key is used for navigating.
                
                 */
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                /**
                 * Configures the toolbar.
                
                 */
                get toolbar() {
                    return this._getOption('toolbar');
                }
                set toolbar(value) {
                    this._setOption('toolbar', value);
                }
                /**
                 * Specifies whether to enable two-way data binding.
                
                 */
                get twoWayBindingEnabled() {
                    return this._getOption('twoWayBindingEnabled');
                }
                set twoWayBindingEnabled(value) {
                    this._setOption('twoWayBindingEnabled', value);
                }
                /**
                 * Specifies whether the UI component is visible.
                
                 */
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /**
                 * Specifies the UI component&apos;s width.
                
                 */
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /**
                 * Specifies whether text that does not fit into a column should be wrapped.
                
                 */
                get wordWrapEnabled() {
                    return this._getOption('wordWrapEnabled');
                }
                set wordWrapEnabled(value) {
                    this._setOption('wordWrapEnabled', value);
                }
                /**
                
                 * A function that is executed before an adaptive detail row is rendered.
                
                
                 */
                onAdaptiveDetailRowPreparing;
                /**
                
                 * A function that is executed when a cell is clicked or tapped. Executed before onRowClick.
                
                
                 */
                onCellClick;
                /**
                
                 * A function that is executed when a cell is double-clicked or double-tapped. Executed before onRowDblClick.
                
                
                 */
                onCellDblClick;
                /**
                
                 * A function that is executed after the pointer enters or leaves a cell.
                
                
                 */
                onCellHoverChanged;
                /**
                
                 * A function that is executed after a grid cell is created.
                
                
                 */
                onCellPrepared;
                /**
                
                 * A function that is executed when the UI component is rendered and each time the component is repainted.
                
                
                 */
                onContentReady;
                /**
                
                 * A function that is executed before the context menu is rendered.
                
                
                 */
                onContextMenuPreparing;
                /**
                
                 * A function that is executed when an error occurs in the data source.
                
                
                 */
                onDataErrorOccurred;
                /**
                
                 * A function that is executed before the UI component is disposed of.
                
                
                 */
                onDisposing;
                /**
                
                 * A function that is executed after row changes are discarded.
                
                
                 */
                onEditCanceled;
                /**
                
                 * A function that is executed when the edit operation is canceled, but row changes are not yet discarded.
                
                
                 */
                onEditCanceling;
                /**
                
                 * A function that is executed before a cell or row switches to the editing state.
                
                
                 */
                onEditingStart;
                /**
                
                 * A function that is executed after an editor is created. Not executed for cells with an editCellTemplate.
                
                
                 */
                onEditorPrepared;
                /**
                
                 * A function used to customize a cell&apos;s editor. Not executed for cells with an editCellTemplate.
                
                
                 */
                onEditorPreparing;
                /**
                
                 * A function that is executed before data is exported.
                
                
                 */
                onExporting;
                /**
                
                 * A function that is executed after the focused cell changes. Applies only to cells in data or group rows.
                
                
                 */
                onFocusedCellChanged;
                /**
                
                 * A function that is executed before the focused cell changes. Applies only to cells in data or group rows.
                
                
                 */
                onFocusedCellChanging;
                /**
                
                 * A function that is executed after the focused row changes. Applies only to data or group rows. focusedRowEnabled should be true.
                
                
                 */
                onFocusedRowChanged;
                /**
                
                 * A function that is executed before the focused row changes. Applies only to data or group rows. focusedRowEnabled should be true.
                
                
                 */
                onFocusedRowChanging;
                /**
                
                 * A function used in JavaScript frameworks to save the UI component instance.
                
                
                 */
                onInitialized;
                /**
                
                 * A function that is executed before a new row is added to the UI component.
                
                
                 */
                onInitNewRow;
                /**
                
                 * A function that is executed when the UI component is in focus and a key has been pressed down.
                
                
                 */
                onKeyDown;
                /**
                
                 * A function that is executed after a UI component property is changed.
                
                
                 */
                onOptionChanged;
                /**
                
                 * A function that is executed when a row is clicked or tapped.
                
                
                 */
                onRowClick;
                /**
                
                 * A function that is executed after a row is collapsed.
                
                
                 */
                onRowCollapsed;
                /**
                
                 * A function that is executed before a row is collapsed.
                
                
                 */
                onRowCollapsing;
                /**
                
                 * A function that is executed when a row is double-clicked or double-tapped. Executed after onCellDblClick.
                
                
                 */
                onRowDblClick;
                /**
                
                 * A function that is executed after a row is expanded.
                
                
                 */
                onRowExpanded;
                /**
                
                 * A function that is executed before a row is expanded.
                
                
                 */
                onRowExpanding;
                /**
                
                 * A function that is executed after a new row has been inserted into the data source.
                
                
                 */
                onRowInserted;
                /**
                
                 * A function that is executed before a new row is inserted into the data source.
                
                
                 */
                onRowInserting;
                /**
                
                 * A function that is executed after a row is created.
                
                
                 */
                onRowPrepared;
                /**
                
                 * A function that is executed after a row has been removed from the data source.
                
                
                 */
                onRowRemoved;
                /**
                
                 * A function that is executed before a row is removed from the data source.
                
                
                 */
                onRowRemoving;
                /**
                
                 * A function that is executed after a row has been updated in the data source.
                
                
                 */
                onRowUpdated;
                /**
                
                 * A function that is executed before a row is updated in the data source.
                
                
                 */
                onRowUpdating;
                /**
                
                 * A function that is executed after cells in a row are validated against validation rules.
                
                
                 */
                onRowValidating;
                /**
                
                 * A function that is executed after row changes are saved.
                
                
                 */
                onSaved;
                /**
                
                 * A function that is executed before pending row changes are saved.
                
                
                 */
                onSaving;
                /**
                
                 * A function that is executed after selecting a row or clearing its selection.
                
                
                 */
                onSelectionChanged;
                /**
                
                 * A function that is executed before the toolbar is created.
                
                
                 */
                onToolbarPreparing;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                accessKeyChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                activeStateEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                allowColumnReorderingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                allowColumnResizingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                autoNavigateToFocusedRowChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                cacheEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                cellHintEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnAutoWidthChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnChooserChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnFixingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnHidingEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnMinWidthChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnResizingModeChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnsChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnWidthChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                customizeColumnsChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                dataRowTemplateChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                dataSourceChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                dateSerializationFormatChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                disabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                editingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                elementAttrChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                errorRowEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                exportChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterBuilderChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterBuilderPopupChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterPanelChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterRowChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterSyncEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterValueChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                focusedColumnIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                focusedRowEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                focusedRowIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                focusedRowKeyChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                groupingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                groupPanelChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                headerFilterChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                highlightChangesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                hintChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                hoverStateEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                keyboardNavigationChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                keyExprChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                loadPanelChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                masterDetailChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                noDataTextChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                pagerChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                pagingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                remoteOperationsChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                renderAsyncChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                repaintChangesOnlyChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                rowAlternationEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                rowDraggingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                rowTemplateChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                rtlEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                scrollingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                searchPanelChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectedRowKeysChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectionChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectionFilterChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showBordersChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showColumnHeadersChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showColumnLinesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showRowLinesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                sortByGroupSummaryInfoChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                sortingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                stateStoringChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                summaryChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                syncLookupFilterValuesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                tabIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                toolbarChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                twoWayBindingEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                wordWrapEnabledChange;
                get columnsChildren() {
                    return this._getOption('columns');
                }
                set columnsChildren(value) {
                    this.setChildren('columns', value);
                }
                get sortByGroupSummaryInfoChildren() {
                    return this._getOption('sortByGroupSummaryInfo');
                }
                set sortByGroupSummaryInfoChildren(value) {
                    this.setChildren('sortByGroupSummaryInfo', value);
                }
                constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
                    super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
                    this._watcherHelper = _watcherHelper;
                    this._idh = _idh;
                    this._createEventEmitters([
                        { subscribe: 'adaptiveDetailRowPreparing', emit: 'onAdaptiveDetailRowPreparing' },
                        { subscribe: 'cellClick', emit: 'onCellClick' },
                        { subscribe: 'cellDblClick', emit: 'onCellDblClick' },
                        { subscribe: 'cellHoverChanged', emit: 'onCellHoverChanged' },
                        { subscribe: 'cellPrepared', emit: 'onCellPrepared' },
                        { subscribe: 'contentReady', emit: 'onContentReady' },
                        { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },
                        { subscribe: 'dataErrorOccurred', emit: 'onDataErrorOccurred' },
                        { subscribe: 'disposing', emit: 'onDisposing' },
                        { subscribe: 'editCanceled', emit: 'onEditCanceled' },
                        { subscribe: 'editCanceling', emit: 'onEditCanceling' },
                        { subscribe: 'editingStart', emit: 'onEditingStart' },
                        { subscribe: 'editorPrepared', emit: 'onEditorPrepared' },
                        { subscribe: 'editorPreparing', emit: 'onEditorPreparing' },
                        { subscribe: 'exporting', emit: 'onExporting' },
                        { subscribe: 'focusedCellChanged', emit: 'onFocusedCellChanged' },
                        { subscribe: 'focusedCellChanging', emit: 'onFocusedCellChanging' },
                        { subscribe: 'focusedRowChanged', emit: 'onFocusedRowChanged' },
                        { subscribe: 'focusedRowChanging', emit: 'onFocusedRowChanging' },
                        { subscribe: 'initialized', emit: 'onInitialized' },
                        { subscribe: 'initNewRow', emit: 'onInitNewRow' },
                        { subscribe: 'keyDown', emit: 'onKeyDown' },
                        { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                        { subscribe: 'rowClick', emit: 'onRowClick' },
                        { subscribe: 'rowCollapsed', emit: 'onRowCollapsed' },
                        { subscribe: 'rowCollapsing', emit: 'onRowCollapsing' },
                        { subscribe: 'rowDblClick', emit: 'onRowDblClick' },
                        { subscribe: 'rowExpanded', emit: 'onRowExpanded' },
                        { subscribe: 'rowExpanding', emit: 'onRowExpanding' },
                        { subscribe: 'rowInserted', emit: 'onRowInserted' },
                        { subscribe: 'rowInserting', emit: 'onRowInserting' },
                        { subscribe: 'rowPrepared', emit: 'onRowPrepared' },
                        { subscribe: 'rowRemoved', emit: 'onRowRemoved' },
                        { subscribe: 'rowRemoving', emit: 'onRowRemoving' },
                        { subscribe: 'rowUpdated', emit: 'onRowUpdated' },
                        { subscribe: 'rowUpdating', emit: 'onRowUpdating' },
                        { subscribe: 'rowValidating', emit: 'onRowValidating' },
                        { subscribe: 'saved', emit: 'onSaved' },
                        { subscribe: 'saving', emit: 'onSaving' },
                        { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                        { subscribe: 'toolbarPreparing', emit: 'onToolbarPreparing' },
                        { emit: 'accessKeyChange' },
                        { emit: 'activeStateEnabledChange' },
                        { emit: 'allowColumnReorderingChange' },
                        { emit: 'allowColumnResizingChange' },
                        { emit: 'autoNavigateToFocusedRowChange' },
                        { emit: 'cacheEnabledChange' },
                        { emit: 'cellHintEnabledChange' },
                        { emit: 'columnAutoWidthChange' },
                        { emit: 'columnChooserChange' },
                        { emit: 'columnFixingChange' },
                        { emit: 'columnHidingEnabledChange' },
                        { emit: 'columnMinWidthChange' },
                        { emit: 'columnResizingModeChange' },
                        { emit: 'columnsChange' },
                        { emit: 'columnWidthChange' },
                        { emit: 'customizeColumnsChange' },
                        { emit: 'dataRowTemplateChange' },
                        { emit: 'dataSourceChange' },
                        { emit: 'dateSerializationFormatChange' },
                        { emit: 'disabledChange' },
                        { emit: 'editingChange' },
                        { emit: 'elementAttrChange' },
                        { emit: 'errorRowEnabledChange' },
                        { emit: 'exportChange' },
                        { emit: 'filterBuilderChange' },
                        { emit: 'filterBuilderPopupChange' },
                        { emit: 'filterPanelChange' },
                        { emit: 'filterRowChange' },
                        { emit: 'filterSyncEnabledChange' },
                        { emit: 'filterValueChange' },
                        { emit: 'focusedColumnIndexChange' },
                        { emit: 'focusedRowEnabledChange' },
                        { emit: 'focusedRowIndexChange' },
                        { emit: 'focusedRowKeyChange' },
                        { emit: 'groupingChange' },
                        { emit: 'groupPanelChange' },
                        { emit: 'headerFilterChange' },
                        { emit: 'heightChange' },
                        { emit: 'highlightChangesChange' },
                        { emit: 'hintChange' },
                        { emit: 'hoverStateEnabledChange' },
                        { emit: 'keyboardNavigationChange' },
                        { emit: 'keyExprChange' },
                        { emit: 'loadPanelChange' },
                        { emit: 'masterDetailChange' },
                        { emit: 'noDataTextChange' },
                        { emit: 'pagerChange' },
                        { emit: 'pagingChange' },
                        { emit: 'remoteOperationsChange' },
                        { emit: 'renderAsyncChange' },
                        { emit: 'repaintChangesOnlyChange' },
                        { emit: 'rowAlternationEnabledChange' },
                        { emit: 'rowDraggingChange' },
                        { emit: 'rowTemplateChange' },
                        { emit: 'rtlEnabledChange' },
                        { emit: 'scrollingChange' },
                        { emit: 'searchPanelChange' },
                        { emit: 'selectedRowKeysChange' },
                        { emit: 'selectionChange' },
                        { emit: 'selectionFilterChange' },
                        { emit: 'showBordersChange' },
                        { emit: 'showColumnHeadersChange' },
                        { emit: 'showColumnLinesChange' },
                        { emit: 'showRowLinesChange' },
                        { emit: 'sortByGroupSummaryInfoChange' },
                        { emit: 'sortingChange' },
                        { emit: 'stateStoringChange' },
                        { emit: 'summaryChange' },
                        { emit: 'syncLookupFilterValuesChange' },
                        { emit: 'tabIndexChange' },
                        { emit: 'toolbarChange' },
                        { emit: 'twoWayBindingEnabledChange' },
                        { emit: 'visibleChange' },
                        { emit: 'widthChange' },
                        { emit: 'wordWrapEnabledChange' }
                    ]);
                    this._idh.setHost(this);
                    optionHost.setHost(this);
                }
                _createInstance(element, options) {
                    return new DxDataGrid(element, options);
                }
                ngOnDestroy() {
                    this._destroyWidget();
                }
                ngOnChanges(changes) {
                    super.ngOnChanges(changes);
                    this.setupChanges('columns', changes);
                    this.setupChanges('dataSource', changes);
                    this.setupChanges('keyExpr', changes);
                    this.setupChanges('selectedRowKeys', changes);
                    this.setupChanges('sortByGroupSummaryInfo', changes);
                }
                setupChanges(prop, changes) {
                    if (!(prop in this._optionsToUpdate)) {
                        this._idh.setup(prop, changes);
                    }
                }
                ngDoCheck() {
                    this._idh.doCheck('columns');
                    this._idh.doCheck('dataSource');
                    this._idh.doCheck('keyExpr');
                    this._idh.doCheck('selectedRowKeys');
                    this._idh.doCheck('sortByGroupSummaryInfo');
                    this._watcherHelper.checkWatchers();
                    super.ngDoCheck();
                    super.clearChangedOptions();
                }
                _setOption(name, value) {
                    let isSetup = this._idh.setupSingle(name, value);
                    let isChanged = this._idh.getChanges(name, value) !== null;
                    if (isSetup || isChanged) {
                        super._setOption(name, value);
                    }
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: DxTemplateHost }, { token: WatcherHelper }, { token: IterableDifferHelper }, { token: NestedOptionHost }, { token: i2.TransferState }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxDataGridComponent, selector: "dx-data-grid", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowColumnReordering: "allowColumnReordering", allowColumnResizing: "allowColumnResizing", autoNavigateToFocusedRow: "autoNavigateToFocusedRow", cacheEnabled: "cacheEnabled", cellHintEnabled: "cellHintEnabled", columnAutoWidth: "columnAutoWidth", columnChooser: "columnChooser", columnFixing: "columnFixing", columnHidingEnabled: "columnHidingEnabled", columnMinWidth: "columnMinWidth", columnResizingMode: "columnResizingMode", columns: "columns", columnWidth: "columnWidth", customizeColumns: "customizeColumns", dataRowTemplate: "dataRowTemplate", dataSource: "dataSource", dateSerializationFormat: "dateSerializationFormat", disabled: "disabled", editing: "editing", elementAttr: "elementAttr", errorRowEnabled: "errorRowEnabled", export: "export", filterBuilder: "filterBuilder", filterBuilderPopup: "filterBuilderPopup", filterPanel: "filterPanel", filterRow: "filterRow", filterSyncEnabled: "filterSyncEnabled", filterValue: "filterValue", focusedColumnIndex: "focusedColumnIndex", focusedRowEnabled: "focusedRowEnabled", focusedRowIndex: "focusedRowIndex", focusedRowKey: "focusedRowKey", grouping: "grouping", groupPanel: "groupPanel", headerFilter: "headerFilter", height: "height", highlightChanges: "highlightChanges", hint: "hint", hoverStateEnabled: "hoverStateEnabled", keyboardNavigation: "keyboardNavigation", keyExpr: "keyExpr", loadPanel: "loadPanel", masterDetail: "masterDetail", noDataText: "noDataText", pager: "pager", paging: "paging", remoteOperations: "remoteOperations", renderAsync: "renderAsync", repaintChangesOnly: "repaintChangesOnly", rowAlternationEnabled: "rowAlternationEnabled", rowDragging: "rowDragging", rowTemplate: "rowTemplate", rtlEnabled: "rtlEnabled", scrolling: "scrolling", searchPanel: "searchPanel", selectedRowKeys: "selectedRowKeys", selection: "selection", selectionFilter: "selectionFilter", showBorders: "showBorders", showColumnHeaders: "showColumnHeaders", showColumnLines: "showColumnLines", showRowLines: "showRowLines", sortByGroupSummaryInfo: "sortByGroupSummaryInfo", sorting: "sorting", stateStoring: "stateStoring", summary: "summary", syncLookupFilterValues: "syncLookupFilterValues", tabIndex: "tabIndex", toolbar: "toolbar", twoWayBindingEnabled: "twoWayBindingEnabled", visible: "visible", width: "width", wordWrapEnabled: "wordWrapEnabled" }, outputs: { onAdaptiveDetailRowPreparing: "onAdaptiveDetailRowPreparing", onCellClick: "onCellClick", onCellDblClick: "onCellDblClick", onCellHoverChanged: "onCellHoverChanged", onCellPrepared: "onCellPrepared", onContentReady: "onContentReady", onContextMenuPreparing: "onContextMenuPreparing", onDataErrorOccurred: "onDataErrorOccurred", onDisposing: "onDisposing", onEditCanceled: "onEditCanceled", onEditCanceling: "onEditCanceling", onEditingStart: "onEditingStart", onEditorPrepared: "onEditorPrepared", onEditorPreparing: "onEditorPreparing", onExporting: "onExporting", onFocusedCellChanged: "onFocusedCellChanged", onFocusedCellChanging: "onFocusedCellChanging", onFocusedRowChanged: "onFocusedRowChanged", onFocusedRowChanging: "onFocusedRowChanging", onInitialized: "onInitialized", onInitNewRow: "onInitNewRow", onKeyDown: "onKeyDown", onOptionChanged: "onOptionChanged", onRowClick: "onRowClick", onRowCollapsed: "onRowCollapsed", onRowCollapsing: "onRowCollapsing", onRowDblClick: "onRowDblClick", onRowExpanded: "onRowExpanded", onRowExpanding: "onRowExpanding", onRowInserted: "onRowInserted", onRowInserting: "onRowInserting", onRowPrepared: "onRowPrepared", onRowRemoved: "onRowRemoved", onRowRemoving: "onRowRemoving", onRowUpdated: "onRowUpdated", onRowUpdating: "onRowUpdating", onRowValidating: "onRowValidating", onSaved: "onSaved", onSaving: "onSaving", onSelectionChanged: "onSelectionChanged", onToolbarPreparing: "onToolbarPreparing", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowColumnReorderingChange: "allowColumnReorderingChange", allowColumnResizingChange: "allowColumnResizingChange", autoNavigateToFocusedRowChange: "autoNavigateToFocusedRowChange", cacheEnabledChange: "cacheEnabledChange", cellHintEnabledChange: "cellHintEnabledChange", columnAutoWidthChange: "columnAutoWidthChange", columnChooserChange: "columnChooserChange", columnFixingChange: "columnFixingChange", columnHidingEnabledChange: "columnHidingEnabledChange", columnMinWidthChange: "columnMinWidthChange", columnResizingModeChange: "columnResizingModeChange", columnsChange: "columnsChange", columnWidthChange: "columnWidthChange", customizeColumnsChange: "customizeColumnsChange", dataRowTemplateChange: "dataRowTemplateChange", dataSourceChange: "dataSourceChange", dateSerializationFormatChange: "dateSerializationFormatChange", disabledChange: "disabledChange", editingChange: "editingChange", elementAttrChange: "elementAttrChange", errorRowEnabledChange: "errorRowEnabledChange", exportChange: "exportChange", filterBuilderChange: "filterBuilderChange", filterBuilderPopupChange: "filterBuilderPopupChange", filterPanelChange: "filterPanelChange", filterRowChange: "filterRowChange", filterSyncEnabledChange: "filterSyncEnabledChange", filterValueChange: "filterValueChange", focusedColumnIndexChange: "focusedColumnIndexChange", focusedRowEnabledChange: "focusedRowEnabledChange", focusedRowIndexChange: "focusedRowIndexChange", focusedRowKeyChange: "focusedRowKeyChange", groupingChange: "groupingChange", groupPanelChange: "groupPanelChange", headerFilterChange: "headerFilterChange", heightChange: "heightChange", highlightChangesChange: "highlightChangesChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", keyboardNavigationChange: "keyboardNavigationChange", keyExprChange: "keyExprChange", loadPanelChange: "loadPanelChange", masterDetailChange: "masterDetailChange", noDataTextChange: "noDataTextChange", pagerChange: "pagerChange", pagingChange: "pagingChange", remoteOperationsChange: "remoteOperationsChange", renderAsyncChange: "renderAsyncChange", repaintChangesOnlyChange: "repaintChangesOnlyChange", rowAlternationEnabledChange: "rowAlternationEnabledChange", rowDraggingChange: "rowDraggingChange", rowTemplateChange: "rowTemplateChange", rtlEnabledChange: "rtlEnabledChange", scrollingChange: "scrollingChange", searchPanelChange: "searchPanelChange", selectedRowKeysChange: "selectedRowKeysChange", selectionChange: "selectionChange", selectionFilterChange: "selectionFilterChange", showBordersChange: "showBordersChange", showColumnHeadersChange: "showColumnHeadersChange", showColumnLinesChange: "showColumnLinesChange", showRowLinesChange: "showRowLinesChange", sortByGroupSummaryInfoChange: "sortByGroupSummaryInfoChange", sortingChange: "sortingChange", stateStoringChange: "stateStoringChange", summaryChange: "summaryChange", syncLookupFilterValuesChange: "syncLookupFilterValuesChange", tabIndexChange: "tabIndexChange", toolbarChange: "toolbarChange", twoWayBindingEnabledChange: "twoWayBindingEnabledChange", visibleChange: "visibleChange", widthChange: "widthChange", wordWrapEnabledChange: "wordWrapEnabledChange" }, providers: [
                        DxTemplateHost,
                        WatcherHelper,
                        NestedOptionHost,
                        IterableDifferHelper
                    ], queries: [{ propertyName: "columnsChildren", predicate: DxiColumnComponent }, { propertyName: "sortByGroupSummaryInfoChildren", predicate: DxiSortByGroupSummaryInfoComponent }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
            } exports("dl", DxDataGridComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridComponent, decorators: [{
                        type: Component,
                        args: [{
                                selector: 'dx-data-grid',
                                template: '',
                                providers: [
                                    DxTemplateHost,
                                    WatcherHelper,
                                    NestedOptionHost,
                                    IterableDifferHelper
                                ]
                            }]
                    }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: DxTemplateHost }, { type: WatcherHelper }, { type: IterableDifferHelper }, { type: NestedOptionHost }, { type: i2.TransferState }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [PLATFORM_ID]
                            }] }], propDecorators: { accessKey: [{
                            type: Input
                        }], activeStateEnabled: [{
                            type: Input
                        }], allowColumnReordering: [{
                            type: Input
                        }], allowColumnResizing: [{
                            type: Input
                        }], autoNavigateToFocusedRow: [{
                            type: Input
                        }], cacheEnabled: [{
                            type: Input
                        }], cellHintEnabled: [{
                            type: Input
                        }], columnAutoWidth: [{
                            type: Input
                        }], columnChooser: [{
                            type: Input
                        }], columnFixing: [{
                            type: Input
                        }], columnHidingEnabled: [{
                            type: Input
                        }], columnMinWidth: [{
                            type: Input
                        }], columnResizingMode: [{
                            type: Input
                        }], columns: [{
                            type: Input
                        }], columnWidth: [{
                            type: Input
                        }], customizeColumns: [{
                            type: Input
                        }], dataRowTemplate: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], dateSerializationFormat: [{
                            type: Input
                        }], disabled: [{
                            type: Input
                        }], editing: [{
                            type: Input
                        }], elementAttr: [{
                            type: Input
                        }], errorRowEnabled: [{
                            type: Input
                        }], export: [{
                            type: Input
                        }], filterBuilder: [{
                            type: Input
                        }], filterBuilderPopup: [{
                            type: Input
                        }], filterPanel: [{
                            type: Input
                        }], filterRow: [{
                            type: Input
                        }], filterSyncEnabled: [{
                            type: Input
                        }], filterValue: [{
                            type: Input
                        }], focusedColumnIndex: [{
                            type: Input
                        }], focusedRowEnabled: [{
                            type: Input
                        }], focusedRowIndex: [{
                            type: Input
                        }], focusedRowKey: [{
                            type: Input
                        }], grouping: [{
                            type: Input
                        }], groupPanel: [{
                            type: Input
                        }], headerFilter: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], highlightChanges: [{
                            type: Input
                        }], hint: [{
                            type: Input
                        }], hoverStateEnabled: [{
                            type: Input
                        }], keyboardNavigation: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], loadPanel: [{
                            type: Input
                        }], masterDetail: [{
                            type: Input
                        }], noDataText: [{
                            type: Input
                        }], pager: [{
                            type: Input
                        }], paging: [{
                            type: Input
                        }], remoteOperations: [{
                            type: Input
                        }], renderAsync: [{
                            type: Input
                        }], repaintChangesOnly: [{
                            type: Input
                        }], rowAlternationEnabled: [{
                            type: Input
                        }], rowDragging: [{
                            type: Input
                        }], rowTemplate: [{
                            type: Input
                        }], rtlEnabled: [{
                            type: Input
                        }], scrolling: [{
                            type: Input
                        }], searchPanel: [{
                            type: Input
                        }], selectedRowKeys: [{
                            type: Input
                        }], selection: [{
                            type: Input
                        }], selectionFilter: [{
                            type: Input
                        }], showBorders: [{
                            type: Input
                        }], showColumnHeaders: [{
                            type: Input
                        }], showColumnLines: [{
                            type: Input
                        }], showRowLines: [{
                            type: Input
                        }], sortByGroupSummaryInfo: [{
                            type: Input
                        }], sorting: [{
                            type: Input
                        }], stateStoring: [{
                            type: Input
                        }], summary: [{
                            type: Input
                        }], syncLookupFilterValues: [{
                            type: Input
                        }], tabIndex: [{
                            type: Input
                        }], toolbar: [{
                            type: Input
                        }], twoWayBindingEnabled: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], wordWrapEnabled: [{
                            type: Input
                        }], onAdaptiveDetailRowPreparing: [{
                            type: Output
                        }], onCellClick: [{
                            type: Output
                        }], onCellDblClick: [{
                            type: Output
                        }], onCellHoverChanged: [{
                            type: Output
                        }], onCellPrepared: [{
                            type: Output
                        }], onContentReady: [{
                            type: Output
                        }], onContextMenuPreparing: [{
                            type: Output
                        }], onDataErrorOccurred: [{
                            type: Output
                        }], onDisposing: [{
                            type: Output
                        }], onEditCanceled: [{
                            type: Output
                        }], onEditCanceling: [{
                            type: Output
                        }], onEditingStart: [{
                            type: Output
                        }], onEditorPrepared: [{
                            type: Output
                        }], onEditorPreparing: [{
                            type: Output
                        }], onExporting: [{
                            type: Output
                        }], onFocusedCellChanged: [{
                            type: Output
                        }], onFocusedCellChanging: [{
                            type: Output
                        }], onFocusedRowChanged: [{
                            type: Output
                        }], onFocusedRowChanging: [{
                            type: Output
                        }], onInitialized: [{
                            type: Output
                        }], onInitNewRow: [{
                            type: Output
                        }], onKeyDown: [{
                            type: Output
                        }], onOptionChanged: [{
                            type: Output
                        }], onRowClick: [{
                            type: Output
                        }], onRowCollapsed: [{
                            type: Output
                        }], onRowCollapsing: [{
                            type: Output
                        }], onRowDblClick: [{
                            type: Output
                        }], onRowExpanded: [{
                            type: Output
                        }], onRowExpanding: [{
                            type: Output
                        }], onRowInserted: [{
                            type: Output
                        }], onRowInserting: [{
                            type: Output
                        }], onRowPrepared: [{
                            type: Output
                        }], onRowRemoved: [{
                            type: Output
                        }], onRowRemoving: [{
                            type: Output
                        }], onRowUpdated: [{
                            type: Output
                        }], onRowUpdating: [{
                            type: Output
                        }], onRowValidating: [{
                            type: Output
                        }], onSaved: [{
                            type: Output
                        }], onSaving: [{
                            type: Output
                        }], onSelectionChanged: [{
                            type: Output
                        }], onToolbarPreparing: [{
                            type: Output
                        }], accessKeyChange: [{
                            type: Output
                        }], activeStateEnabledChange: [{
                            type: Output
                        }], allowColumnReorderingChange: [{
                            type: Output
                        }], allowColumnResizingChange: [{
                            type: Output
                        }], autoNavigateToFocusedRowChange: [{
                            type: Output
                        }], cacheEnabledChange: [{
                            type: Output
                        }], cellHintEnabledChange: [{
                            type: Output
                        }], columnAutoWidthChange: [{
                            type: Output
                        }], columnChooserChange: [{
                            type: Output
                        }], columnFixingChange: [{
                            type: Output
                        }], columnHidingEnabledChange: [{
                            type: Output
                        }], columnMinWidthChange: [{
                            type: Output
                        }], columnResizingModeChange: [{
                            type: Output
                        }], columnsChange: [{
                            type: Output
                        }], columnWidthChange: [{
                            type: Output
                        }], customizeColumnsChange: [{
                            type: Output
                        }], dataRowTemplateChange: [{
                            type: Output
                        }], dataSourceChange: [{
                            type: Output
                        }], dateSerializationFormatChange: [{
                            type: Output
                        }], disabledChange: [{
                            type: Output
                        }], editingChange: [{
                            type: Output
                        }], elementAttrChange: [{
                            type: Output
                        }], errorRowEnabledChange: [{
                            type: Output
                        }], exportChange: [{
                            type: Output
                        }], filterBuilderChange: [{
                            type: Output
                        }], filterBuilderPopupChange: [{
                            type: Output
                        }], filterPanelChange: [{
                            type: Output
                        }], filterRowChange: [{
                            type: Output
                        }], filterSyncEnabledChange: [{
                            type: Output
                        }], filterValueChange: [{
                            type: Output
                        }], focusedColumnIndexChange: [{
                            type: Output
                        }], focusedRowEnabledChange: [{
                            type: Output
                        }], focusedRowIndexChange: [{
                            type: Output
                        }], focusedRowKeyChange: [{
                            type: Output
                        }], groupingChange: [{
                            type: Output
                        }], groupPanelChange: [{
                            type: Output
                        }], headerFilterChange: [{
                            type: Output
                        }], heightChange: [{
                            type: Output
                        }], highlightChangesChange: [{
                            type: Output
                        }], hintChange: [{
                            type: Output
                        }], hoverStateEnabledChange: [{
                            type: Output
                        }], keyboardNavigationChange: [{
                            type: Output
                        }], keyExprChange: [{
                            type: Output
                        }], loadPanelChange: [{
                            type: Output
                        }], masterDetailChange: [{
                            type: Output
                        }], noDataTextChange: [{
                            type: Output
                        }], pagerChange: [{
                            type: Output
                        }], pagingChange: [{
                            type: Output
                        }], remoteOperationsChange: [{
                            type: Output
                        }], renderAsyncChange: [{
                            type: Output
                        }], repaintChangesOnlyChange: [{
                            type: Output
                        }], rowAlternationEnabledChange: [{
                            type: Output
                        }], rowDraggingChange: [{
                            type: Output
                        }], rowTemplateChange: [{
                            type: Output
                        }], rtlEnabledChange: [{
                            type: Output
                        }], scrollingChange: [{
                            type: Output
                        }], searchPanelChange: [{
                            type: Output
                        }], selectedRowKeysChange: [{
                            type: Output
                        }], selectionChange: [{
                            type: Output
                        }], selectionFilterChange: [{
                            type: Output
                        }], showBordersChange: [{
                            type: Output
                        }], showColumnHeadersChange: [{
                            type: Output
                        }], showColumnLinesChange: [{
                            type: Output
                        }], showRowLinesChange: [{
                            type: Output
                        }], sortByGroupSummaryInfoChange: [{
                            type: Output
                        }], sortingChange: [{
                            type: Output
                        }], stateStoringChange: [{
                            type: Output
                        }], summaryChange: [{
                            type: Output
                        }], syncLookupFilterValuesChange: [{
                            type: Output
                        }], tabIndexChange: [{
                            type: Output
                        }], toolbarChange: [{
                            type: Output
                        }], twoWayBindingEnabledChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], wordWrapEnabledChange: [{
                            type: Output
                        }], columnsChildren: [{
                            type: ContentChildren,
                            args: [DxiColumnComponent]
                        }], sortByGroupSummaryInfoChildren: [{
                            type: ContentChildren,
                            args: [DxiSortByGroupSummaryInfoComponent]
                        }] } });
            class DxDataGridModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridModule, declarations: [DxDataGridComponent], imports: [DxoColumnChooserModule,
                        DxoPositionModule,
                        DxoAtModule,
                        DxoBoundaryOffsetModule,
                        DxoCollisionModule,
                        DxoMyModule,
                        DxoOffsetModule,
                        DxoSearchModule,
                        DxoSelectionModule,
                        DxoColumnFixingModule,
                        DxoTextsModule,
                        DxiColumnModule,
                        DxiButtonModule,
                        DxoHeaderFilterModule,
                        DxoLookupModule,
                        DxoFormatModule,
                        DxoFormItemModule,
                        DxoLabelModule,
                        DxiValidationRuleModule,
                        DxoEditingModule,
                        DxiChangeModule,
                        DxoFormModule,
                        DxoColCountByScreenModule,
                        DxiItemModule,
                        DxoTabPanelOptionsModule,
                        DxiTabModule,
                        DxoButtonOptionsModule,
                        DxoPopupModule,
                        DxoAnimationModule,
                        DxoHideModule,
                        DxoFromModule,
                        DxoToModule,
                        DxoShowModule,
                        DxiToolbarItemModule,
                        DxoExportModule,
                        DxoFilterBuilderModule,
                        DxiCustomOperationModule,
                        DxiFieldModule,
                        DxoFilterOperationDescriptionsModule,
                        DxoGroupOperationDescriptionsModule,
                        DxoFilterBuilderPopupModule,
                        DxoFilterPanelModule,
                        DxoFilterRowModule,
                        DxoOperationDescriptionsModule,
                        DxoGroupingModule,
                        DxoGroupPanelModule,
                        DxoKeyboardNavigationModule,
                        DxoLoadPanelModule,
                        DxoMasterDetailModule,
                        DxoPagerModule,
                        DxoPagingModule,
                        DxoRemoteOperationsModule,
                        DxoRowDraggingModule,
                        DxoCursorOffsetModule,
                        DxoScrollingModule,
                        DxoSearchPanelModule,
                        DxiSortByGroupSummaryInfoModule,
                        DxoSortingModule,
                        DxoStateStoringModule,
                        DxoSummaryModule,
                        DxiGroupItemModule,
                        DxoValueFormatModule,
                        DxiTotalItemModule,
                        DxoToolbarModule,
                        DxIntegrationModule,
                        DxTemplateModule], exports: [DxDataGridComponent, DxoColumnChooserModule,
                        DxoPositionModule,
                        DxoAtModule,
                        DxoBoundaryOffsetModule,
                        DxoCollisionModule,
                        DxoMyModule,
                        DxoOffsetModule,
                        DxoSearchModule,
                        DxoSelectionModule,
                        DxoColumnFixingModule,
                        DxoTextsModule,
                        DxiColumnModule,
                        DxiButtonModule,
                        DxoHeaderFilterModule,
                        DxoLookupModule,
                        DxoFormatModule,
                        DxoFormItemModule,
                        DxoLabelModule,
                        DxiValidationRuleModule,
                        DxoEditingModule,
                        DxiChangeModule,
                        DxoFormModule,
                        DxoColCountByScreenModule,
                        DxiItemModule,
                        DxoTabPanelOptionsModule,
                        DxiTabModule,
                        DxoButtonOptionsModule,
                        DxoPopupModule,
                        DxoAnimationModule,
                        DxoHideModule,
                        DxoFromModule,
                        DxoToModule,
                        DxoShowModule,
                        DxiToolbarItemModule,
                        DxoExportModule,
                        DxoFilterBuilderModule,
                        DxiCustomOperationModule,
                        DxiFieldModule,
                        DxoFilterOperationDescriptionsModule,
                        DxoGroupOperationDescriptionsModule,
                        DxoFilterBuilderPopupModule,
                        DxoFilterPanelModule,
                        DxoFilterRowModule,
                        DxoOperationDescriptionsModule,
                        DxoGroupingModule,
                        DxoGroupPanelModule,
                        DxoKeyboardNavigationModule,
                        DxoLoadPanelModule,
                        DxoMasterDetailModule,
                        DxoPagerModule,
                        DxoPagingModule,
                        DxoRemoteOperationsModule,
                        DxoRowDraggingModule,
                        DxoCursorOffsetModule,
                        DxoScrollingModule,
                        DxoSearchPanelModule,
                        DxiSortByGroupSummaryInfoModule,
                        DxoSortingModule,
                        DxoStateStoringModule,
                        DxoSummaryModule,
                        DxiGroupItemModule,
                        DxoValueFormatModule,
                        DxiTotalItemModule,
                        DxoToolbarModule,
                        DxTemplateModule] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridModule, imports: [DxoColumnChooserModule,
                        DxoPositionModule,
                        DxoAtModule,
                        DxoBoundaryOffsetModule,
                        DxoCollisionModule,
                        DxoMyModule,
                        DxoOffsetModule,
                        DxoSearchModule,
                        DxoSelectionModule,
                        DxoColumnFixingModule,
                        DxoTextsModule,
                        DxiColumnModule,
                        DxiButtonModule,
                        DxoHeaderFilterModule,
                        DxoLookupModule,
                        DxoFormatModule,
                        DxoFormItemModule,
                        DxoLabelModule,
                        DxiValidationRuleModule,
                        DxoEditingModule,
                        DxiChangeModule,
                        DxoFormModule,
                        DxoColCountByScreenModule,
                        DxiItemModule,
                        DxoTabPanelOptionsModule,
                        DxiTabModule,
                        DxoButtonOptionsModule,
                        DxoPopupModule,
                        DxoAnimationModule,
                        DxoHideModule,
                        DxoFromModule,
                        DxoToModule,
                        DxoShowModule,
                        DxiToolbarItemModule,
                        DxoExportModule,
                        DxoFilterBuilderModule,
                        DxiCustomOperationModule,
                        DxiFieldModule,
                        DxoFilterOperationDescriptionsModule,
                        DxoGroupOperationDescriptionsModule,
                        DxoFilterBuilderPopupModule,
                        DxoFilterPanelModule,
                        DxoFilterRowModule,
                        DxoOperationDescriptionsModule,
                        DxoGroupingModule,
                        DxoGroupPanelModule,
                        DxoKeyboardNavigationModule,
                        DxoLoadPanelModule,
                        DxoMasterDetailModule,
                        DxoPagerModule,
                        DxoPagingModule,
                        DxoRemoteOperationsModule,
                        DxoRowDraggingModule,
                        DxoCursorOffsetModule,
                        DxoScrollingModule,
                        DxoSearchPanelModule,
                        DxiSortByGroupSummaryInfoModule,
                        DxoSortingModule,
                        DxoStateStoringModule,
                        DxoSummaryModule,
                        DxiGroupItemModule,
                        DxoValueFormatModule,
                        DxiTotalItemModule,
                        DxoToolbarModule,
                        DxIntegrationModule,
                        DxTemplateModule, DxoColumnChooserModule,
                        DxoPositionModule,
                        DxoAtModule,
                        DxoBoundaryOffsetModule,
                        DxoCollisionModule,
                        DxoMyModule,
                        DxoOffsetModule,
                        DxoSearchModule,
                        DxoSelectionModule,
                        DxoColumnFixingModule,
                        DxoTextsModule,
                        DxiColumnModule,
                        DxiButtonModule,
                        DxoHeaderFilterModule,
                        DxoLookupModule,
                        DxoFormatModule,
                        DxoFormItemModule,
                        DxoLabelModule,
                        DxiValidationRuleModule,
                        DxoEditingModule,
                        DxiChangeModule,
                        DxoFormModule,
                        DxoColCountByScreenModule,
                        DxiItemModule,
                        DxoTabPanelOptionsModule,
                        DxiTabModule,
                        DxoButtonOptionsModule,
                        DxoPopupModule,
                        DxoAnimationModule,
                        DxoHideModule,
                        DxoFromModule,
                        DxoToModule,
                        DxoShowModule,
                        DxiToolbarItemModule,
                        DxoExportModule,
                        DxoFilterBuilderModule,
                        DxiCustomOperationModule,
                        DxiFieldModule,
                        DxoFilterOperationDescriptionsModule,
                        DxoGroupOperationDescriptionsModule,
                        DxoFilterBuilderPopupModule,
                        DxoFilterPanelModule,
                        DxoFilterRowModule,
                        DxoOperationDescriptionsModule,
                        DxoGroupingModule,
                        DxoGroupPanelModule,
                        DxoKeyboardNavigationModule,
                        DxoLoadPanelModule,
                        DxoMasterDetailModule,
                        DxoPagerModule,
                        DxoPagingModule,
                        DxoRemoteOperationsModule,
                        DxoRowDraggingModule,
                        DxoCursorOffsetModule,
                        DxoScrollingModule,
                        DxoSearchPanelModule,
                        DxiSortByGroupSummaryInfoModule,
                        DxoSortingModule,
                        DxoStateStoringModule,
                        DxoSummaryModule,
                        DxiGroupItemModule,
                        DxoValueFormatModule,
                        DxiTotalItemModule,
                        DxoToolbarModule,
                        DxTemplateModule] });
            } exports("dk", DxDataGridModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridModule, decorators: [{
                        type: NgModule,
                        args: [{
                                imports: [
                                    DxoColumnChooserModule,
                                    DxoPositionModule,
                                    DxoAtModule,
                                    DxoBoundaryOffsetModule,
                                    DxoCollisionModule,
                                    DxoMyModule,
                                    DxoOffsetModule,
                                    DxoSearchModule,
                                    DxoSelectionModule,
                                    DxoColumnFixingModule,
                                    DxoTextsModule,
                                    DxiColumnModule,
                                    DxiButtonModule,
                                    DxoHeaderFilterModule,
                                    DxoLookupModule,
                                    DxoFormatModule,
                                    DxoFormItemModule,
                                    DxoLabelModule,
                                    DxiValidationRuleModule,
                                    DxoEditingModule,
                                    DxiChangeModule,
                                    DxoFormModule,
                                    DxoColCountByScreenModule,
                                    DxiItemModule,
                                    DxoTabPanelOptionsModule,
                                    DxiTabModule,
                                    DxoButtonOptionsModule,
                                    DxoPopupModule,
                                    DxoAnimationModule,
                                    DxoHideModule,
                                    DxoFromModule,
                                    DxoToModule,
                                    DxoShowModule,
                                    DxiToolbarItemModule,
                                    DxoExportModule,
                                    DxoFilterBuilderModule,
                                    DxiCustomOperationModule,
                                    DxiFieldModule,
                                    DxoFilterOperationDescriptionsModule,
                                    DxoGroupOperationDescriptionsModule,
                                    DxoFilterBuilderPopupModule,
                                    DxoFilterPanelModule,
                                    DxoFilterRowModule,
                                    DxoOperationDescriptionsModule,
                                    DxoGroupingModule,
                                    DxoGroupPanelModule,
                                    DxoKeyboardNavigationModule,
                                    DxoLoadPanelModule,
                                    DxoMasterDetailModule,
                                    DxoPagerModule,
                                    DxoPagingModule,
                                    DxoRemoteOperationsModule,
                                    DxoRowDraggingModule,
                                    DxoCursorOffsetModule,
                                    DxoScrollingModule,
                                    DxoSearchPanelModule,
                                    DxiSortByGroupSummaryInfoModule,
                                    DxoSortingModule,
                                    DxoStateStoringModule,
                                    DxoSummaryModule,
                                    DxiGroupItemModule,
                                    DxoValueFormatModule,
                                    DxiTotalItemModule,
                                    DxoToolbarModule,
                                    DxIntegrationModule,
                                    DxTemplateModule
                                ],
                                declarations: [
                                    DxDataGridComponent
                                ],
                                exports: [
                                    DxDataGridComponent,
                                    DxoColumnChooserModule,
                                    DxoPositionModule,
                                    DxoAtModule,
                                    DxoBoundaryOffsetModule,
                                    DxoCollisionModule,
                                    DxoMyModule,
                                    DxoOffsetModule,
                                    DxoSearchModule,
                                    DxoSelectionModule,
                                    DxoColumnFixingModule,
                                    DxoTextsModule,
                                    DxiColumnModule,
                                    DxiButtonModule,
                                    DxoHeaderFilterModule,
                                    DxoLookupModule,
                                    DxoFormatModule,
                                    DxoFormItemModule,
                                    DxoLabelModule,
                                    DxiValidationRuleModule,
                                    DxoEditingModule,
                                    DxiChangeModule,
                                    DxoFormModule,
                                    DxoColCountByScreenModule,
                                    DxiItemModule,
                                    DxoTabPanelOptionsModule,
                                    DxiTabModule,
                                    DxoButtonOptionsModule,
                                    DxoPopupModule,
                                    DxoAnimationModule,
                                    DxoHideModule,
                                    DxoFromModule,
                                    DxoToModule,
                                    DxoShowModule,
                                    DxiToolbarItemModule,
                                    DxoExportModule,
                                    DxoFilterBuilderModule,
                                    DxiCustomOperationModule,
                                    DxiFieldModule,
                                    DxoFilterOperationDescriptionsModule,
                                    DxoGroupOperationDescriptionsModule,
                                    DxoFilterBuilderPopupModule,
                                    DxoFilterPanelModule,
                                    DxoFilterRowModule,
                                    DxoOperationDescriptionsModule,
                                    DxoGroupingModule,
                                    DxoGroupPanelModule,
                                    DxoKeyboardNavigationModule,
                                    DxoLoadPanelModule,
                                    DxoMasterDetailModule,
                                    DxoPagerModule,
                                    DxoPagingModule,
                                    DxoRemoteOperationsModule,
                                    DxoRowDraggingModule,
                                    DxoCursorOffsetModule,
                                    DxoScrollingModule,
                                    DxoSearchPanelModule,
                                    DxiSortByGroupSummaryInfoModule,
                                    DxoSortingModule,
                                    DxoStateStoringModule,
                                    DxoSummaryModule,
                                    DxiGroupItemModule,
                                    DxoValueFormatModule,
                                    DxiTotalItemModule,
                                    DxoToolbarModule,
                                    DxTemplateModule
                                ]
                            }]
                    }] });

        })
    };
}));
