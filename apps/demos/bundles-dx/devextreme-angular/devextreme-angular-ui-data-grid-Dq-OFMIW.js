System.register(['@angular/platform-browser', '@angular/core', '@angular/common'], (function (exports) {
    'use strict';
    var makeStateKey, i2, EventEmitter, i0, Injectable, Directive, Input, NgModule, Component$1, PLATFORM_ID, Inject, Optional, VERSION, SkipSelf, Host, Output, ContentChildren, forwardRef, isPlatformServer, DOCUMENT, i1;
    return {
        setters: [function (module) {
            makeStateKey = module.makeStateKey;
            i2 = module;
        }, function (module) {
            EventEmitter = module.EventEmitter;
            i0 = module;
            Injectable = module.Injectable;
            Directive = module.Directive;
            Input = module.Input;
            NgModule = module.NgModule;
            Component$1 = module.Component;
            PLATFORM_ID = module.PLATFORM_ID;
            Inject = module.Inject;
            Optional = module.Optional;
            VERSION = module.VERSION;
            SkipSelf = module.SkipSelf;
            Host = module.Host;
            Output = module.Output;
            ContentChildren = module.ContentChildren;
            forwardRef = module.forwardRef;
        }, function (module) {
            isPlatformServer = module.isPlatformServer;
            DOCUMENT = module.DOCUMENT;
            i1 = module;
        }],
        execute: (function () {

            exports({
                D: Deferred,
                L: getPublicElement,
                P: when,
                _: _extends,
                a5: fromPromise,
                a7: indexByKey,
                a8: update,
                a9: insert,
                aF: cancelAnimationFrame,
                aG: requestAnimationFrame,
                aU: isMaterial,
                aV: current,
                aa: isMaterialBased,
                ax: dependencyInjector,
                ay: cleanDataRecursive,
                az: _objectWithoutPropertiesLoose,
                ba: waitWebFont,
                bd: originalViewPort,
                bf: compare,
                bi: isFluent,
                c9: adjust,
                cn: trunc,
                co: solveCubicEquation,
                cp: errorUtils,
                cq: format,
                cu: getExponent,
                cv: getPrecision,
                cw: roundFloatPart,
                e2: isCompact,
                ed: getFormat$1,
                gw: getExponentLength,
                gx: getRemainderByDivision,
                hv: extractTemplate,
                hw: getElement,
                m: data,
                q: removeData,
                w: attachInstanceToElement,
                y: getInstanceByElement
            });

            /**
             * DevExtreme (esm/core/utils/type.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var types = {
                "[object Array]": "array",
                "[object Date]": "date",
                "[object Object]": "object",
                "[object String]": "string"
            };
            var type = exports("cr", function(object) {
                if (null === object) {
                    return "null"
                }
                var typeOfObject = Object.prototype.toString.call(object);
                return "object" === typeof object ? types[typeOfObject] || "object" : typeof object
            });
            var isBoolean = exports("at", function(object) {
                return "boolean" === typeof object
            });
            var isExponential = exports("c8", function(value) {
                return isNumeric(value) && -1 !== value.toString().indexOf("e")
            });
            var isDate = exports("aw", function(object) {
                return "date" === type(object)
            });
            var isDefined = exports("I", function(object) {
                return null !== object && void 0 !== object
            });
            var isFunction = exports("H", function(object) {
                return "function" === typeof object
            });
            var isString = exports("a1", function(object) {
                return "string" === typeof object
            });
            var isNumeric = exports("av", function(object) {
                return "number" === typeof object && isFinite(object) || !isNaN(object - parseFloat(object))
            });
            var isObject = exports("X", function(object) {
                return "object" === type(object)
            });
            var isEmptyObject = exports("cb", function(object) {
                var property;
                for (property in object) {
                    return false
                }
                return true
            });
            var isPlainObject = exports("G", function(object) {
                if (!object || "object" !== type(object)) {
                    return false
                }
                var proto = Object.getPrototypeOf(object);
                if (!proto) {
                    return true
                }
                var ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
                return "function" === typeof ctor && Object.toString.call(ctor) === Object.toString.call(Object)
            });
            var isPrimitive = exports("i", function(value) {
                return -1 === ["object", "array", "function"].indexOf(type(value))
            });
            var isWindow = exports("aX", function(object) {
                return null != object && object === object.window
            });
            var isRenderer = exports("V", function(object) {
                return !!object && !!(object.jquery || object.dxRenderer)
            });
            var isPromise$1 = exports("as", function(object) {
                return !!object && isFunction(object.then)
            });
            var isDeferred = exports("gK", function(object) {
                return !!object && isFunction(object.done) && isFunction(object.fail)
            });
            var isEvent = function(object) {
                return !!(object && object.preventDefault)
            };

            /**
             * DevExtreme (esm/core/utils/extend.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var extendFromObject = exports("fp", function(target, source, overrideExistingValues) {
                target = target || {};
                for (var prop in source) {
                    if (Object.prototype.hasOwnProperty.call(source, prop)) {
                        var value = source[prop];
                        if (!(prop in target) || overrideExistingValues) {
                            target[prop] = value;
                        }
                    }
                }
                return target
            });
            var extend = exports("v", function extend(target) {
                target = target || {};
                var i = 1;
                var deep = false;
                if ("boolean" === typeof target) {
                    deep = target;
                    target = arguments[1] || {};
                    i++;
                }
                for (; i < arguments.length; i++) {
                    var source = arguments[i];
                    if (null == source) {
                        continue
                    }
                    for (var key in source) {
                        var targetValue = target[key];
                        var sourceValue = source[key];
                        var sourceValueIsArray = false;
                        var clone = void 0;
                        if ("__proto__" === key || "constructor" === key || target === sourceValue) {
                            continue
                        }
                        if (deep && sourceValue && (isPlainObject(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {
                            if (sourceValueIsArray) {
                                clone = targetValue && Array.isArray(targetValue) ? targetValue : [];
                            } else {
                                clone = targetValue && isPlainObject(targetValue) ? targetValue : {};
                            }
                            target[key] = extend(deep, clone, sourceValue);
                        } else if (void 0 !== sourceValue) {
                            target[key] = sourceValue;
                        }
                    }
                }
                return target
            });

            /**
             * DevExtreme (esm/core/utils/iterator.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var map = exports("bK", (values, callback) => {
                if (Array.isArray(values)) {
                    return values.map(callback)
                }
                var result = [];
                for (var key in values) {
                    result.push(callback(values[key], key));
                }
                return result
            });
            var each = exports("x", (values, callback) => {
                if (!values) {
                    return
                }
                if ("length" in values) {
                    for (var i = 0; i < values.length; i++) {
                        if (false === callback.call(values[i], i, values[i])) {
                            break
                        }
                    }
                } else {
                    for (var key in values) {
                        if (false === callback.call(values[key], key, values[key])) {
                            break
                        }
                    }
                }
                return values
            });
            var reverseEach = exports("ct", (array, callback) => {
                if (!array || !("length" in array) || 0 === array.length) {
                    return
                }
                for (var i = array.length - 1; i >= 0; i--) {
                    if (false === callback.call(array[i], i, array[i])) {
                        break
                    }
                }
            });

            /**
             * DevExtreme (esm/core/utils/console.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var noop$1 = function() {};
            var getConsoleMethod = function(method) {
                if ("undefined" === typeof console || !isFunction(console[method])) {
                    return noop$1
                }
                return console[method].bind(console)
            };
            var logger = exports("cg", {
                log: getConsoleMethod("log"),
                info: getConsoleMethod("info"),
                warn: getConsoleMethod("warn"),
                error: getConsoleMethod("error")
            });

            /**
             * DevExtreme (esm/core/utils/string.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var encodeHtml = exports("bs", function() {
                var encodeRegExp = [new RegExp("&", "g"), new RegExp('"', "g"), new RegExp("'", "g"), new RegExp("<", "g"), new RegExp(">", "g")];
                return function(str) {
                    return String(str).replace(encodeRegExp[0], "&amp;").replace(encodeRegExp[1], "&quot;").replace(encodeRegExp[2], "&#39;").replace(encodeRegExp[3], "&lt;").replace(encodeRegExp[4], "&gt;")
                }
            }());
            var splitQuad = function(raw) {
                switch (typeof raw) {
                    case "string":
                        return raw.split(/\s+/, 4);
                    case "object":
                        return [raw.x || raw.h || raw.left, raw.y || raw.v || raw.top, raw.x || raw.h || raw.right, raw.y || raw.v || raw.bottom];
                    case "number":
                        return [raw];
                    default:
                        return raw
                }
            };
            var quadToObject = exports("ef", function(raw) {
                var quad = splitQuad(raw);
                var left = parseInt(quad && quad[0], 10);
                var top = parseInt(quad && quad[1], 10);
                var right = parseInt(quad && quad[2], 10);
                var bottom = parseInt(quad && quad[3], 10);
                if (!isFinite(left)) {
                    left = 0;
                }
                if (!isFinite(top)) {
                    top = left;
                }
                if (!isFinite(right)) {
                    right = left;
                }
                if (!isFinite(bottom)) {
                    bottom = top;
                }
                return {
                    top: top,
                    right: right,
                    bottom: bottom,
                    left: left
                }
            });
            function format(template) {
                for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    values[_key - 1] = arguments[_key];
                }
                if (isFunction(template)) {
                    return template(...values)
                }
                values.forEach((value, index) => {
                    if (isString(value)) {
                        value = value.replace(/\$/g, "$$$$");
                    }
                    var placeholderReg = new RegExp("\\{" + index + "\\}", "gm");
                    template = template.replace(placeholderReg, value);
                });
                return template
            }
            var isEmpty = exports("bB", function() {
                var SPACE_REGEXP = /\s/g;
                return function(text) {
                    return !text || !text.replace(SPACE_REGEXP, "")
                }
            }());

            /**
             * DevExtreme (esm/core/version.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var version = exports("ci", "24.1.1");

            /**
             * DevExtreme (esm/core/utils/error.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ERROR_URL = "https://js.devexpress.com/error/" + version.split(".").slice(0, 2).join("_") + "/";
            function errorUtils(baseErrors, errors) {
                var exports$1 = {
                    ERROR_MESSAGES: extend(errors, baseErrors),
                    Error: function() {
                        return makeError([].slice.call(arguments))
                    },
                    log: function(id) {
                        var method = "log";
                        if (/^E\d+$/.test(id)) {
                            method = "error";
                        } else if (/^W\d+$/.test(id)) {
                            method = "warn";
                        }
                        logger[method]("log" === method ? id : combineMessage([].slice.call(arguments)));
                    }
                };

                function combineMessage(args) {
                    var id = args[0];
                    args = args.slice(1);
                    return formatMessage(id, formatDetails(id, args))
                }

                function formatDetails(id, args) {
                    args = [exports$1.ERROR_MESSAGES[id]].concat(args);
                    return format.apply(this, args).replace(/\.*\s*?$/, "")
                }

                function formatMessage(id, details) {
                    var kind = null !== id && void 0 !== id && id.startsWith("W") ? "warning" : "error";
                    return format.apply(this, ["{0} - {1}.\n\nFor additional information on this {2} message, see: {3}", id, details, kind, getErrorUrl(id)])
                }

                function makeError(args) {
                    var id = args[0];
                    args = args.slice(1);
                    var details = formatDetails(id, args);
                    var url = getErrorUrl(id);
                    var message = formatMessage(id, details);
                    return extend(new Error(message), {
                        __id: id,
                        __details: details,
                        url: url
                    })
                }

                function getErrorUrl(id) {
                    return ERROR_URL + id
                }
                return exports$1
            }

            /**
             * DevExtreme (esm/core/errors.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var errors$2 = exports("ar", errorUtils({
                E0001: "Method is not implemented",
                E0002: "Member name collision: {0}",
                E0003: "A class must be instantiated using the 'new' keyword",
                E0004: "The NAME property of the component is not specified",
                E0005: "Unknown device",
                E0006: "Unknown endpoint key is requested",
                E0007: "'Invalidate' method is called outside the update transaction",
                E0008: "Type of the option name is not appropriate to create an action",
                E0009: "Component '{0}' has not been initialized for an element",
                E0010: "Animation configuration with the '{0}' type requires '{1}' configuration as {2}",
                E0011: "Unknown animation type '{0}'",
                E0012: "jQuery version is too old. Please upgrade jQuery to 1.10.0 or later",
                E0013: "KnockoutJS version is too old. Please upgrade KnockoutJS to 2.3.0 or later",
                E0014: "The 'release' method shouldn't be called for an unlocked Lock object",
                E0015: "Queued task returned an unexpected result",
                E0017: "Event namespace is not defined",
                E0018: "DevExpress.ui.DevExpressPopup widget is required",
                E0020: "Template engine '{0}' is not supported",
                E0021: "Unknown theme is set: {0}",
                E0022: "LINK[rel=DevExpress-theme] tags must go before DevExpress included scripts",
                E0023: "Template name is not specified",
                E0024: "DevExtreme bundle already included",
                E0025: "Unexpected argument type",
                E0100: "Unknown validation type is detected",
                E0101: "Misconfigured range validation rule is detected",
                E0102: "Misconfigured comparison validation rule is detected",
                E0103: "validationCallback of an asynchronous rule should return a jQuery or a native promise",
                E0110: "Unknown validation group is detected",
                E0120: "Adapter for a DevExpressValidator component cannot be configured",
                E0121: "The 'customItem' parameter of the 'onCustomItemCreating' function is empty or contains invalid data. Assign a custom object or a Promise that is resolved after the item is created.",
                W0000: "'{0}' is deprecated in {1}. {2}",
                W0001: "{0} - '{1}' option is deprecated in {2}. {3}",
                W0002: "{0} - '{1}' method is deprecated in {2}. {3}",
                W0003: "{0} - '{1}' property is deprecated in {2}. {3}",
                W0004: "Timeout for theme loading is over: {0}",
                W0005: "'{0}' event is deprecated in {1}. {2}",
                W0006: "Invalid recurrence rule: '{0}'",
                W0007: "'{0}' Globalize culture is not defined",
                W0008: "Invalid view name: '{0}'",
                W0009: "Invalid time zone name: '{0}'",
                W0010: "{0} is deprecated in {1}. {2}",
                W0011: "Number parsing is invoked while the parser is not defined",
                W0012: "Date parsing is invoked while the parser is not defined",
                W0013: "'{0}' file is deprecated in {1}. {2}",
                W0014: "{0} - '{1}' type is deprecated in {2}. {3}",
                W0015: "Instead of returning a value from the '{0}' function, write it into the '{1}' field of the function's parameter.",
                W0016: 'The "{0}" option does not accept the "{1}" value since v{2}. {3}.',
                W0017: 'Setting the "{0}" property with a function is deprecated since v21.2',
                W0018: 'Setting the "position" property with a function is deprecated since v21.2',
                W0019: "DevExtreme: Unable to Locate a Valid License Key.\n\nIf you are using a 30-day trial version of DevExtreme, you must uninstall all copies of DevExtreme once your 30-day trial period expires. For terms and conditions that govern use of DevExtreme UI components/libraries, please refer to the DevExtreme End User License Agreement: https://js.devexpress.com/EULAs/DevExtremeComplete.\n\nTo use DevExtreme in a commercial project, you must purchase a license. For pricing/licensing options, please visit: https://js.devexpress.com/Buy.\n\nIf you have licensing-related questions or need help with a purchase, please email clientservices@devexpress.com.\n\n",
                W0020: "DevExtreme: License Key Has Expired.\n\nA mismatch exists between the license key used and the DevExtreme version referenced in this project.\n\nTo proceed, you can:\n\u2022 use a version of DevExtreme linked to your license key: https://www.devexpress.com/ClientCenter/DownloadManager\n\u2022 renew your DevExpress Subscription: https://www.devexpress.com/buy/renew (once you renew your subscription, you will be entitled to product updates and support service as defined in the DevExtreme End User License Agreement)\n\nIf you have licensing-related questions or need help with a renewal, please email clientservices@devexpress.com.\n\n",
                W0021: "DevExtreme: License Key Verification Has Failed.\n\nTo verify your DevExtreme license, make certain to specify a correct key in the GlobalConfig. If you continue to encounter this error, please visit https://www.devexpress.com/ClientCenter/DownloadManager to obtain a valid license key.\n\nIf you have a valid license and this problem persists, please submit a support ticket via the DevExpress Support Center. We will be happy to follow-up: https://supportcenter.devexpress.com/ticket/create.\n\n",
                W0022: "DevExtreme: Pre-release software. Not suitable for commercial use.\n\nPre-release software may contain deficiencies and as such, should not be considered for use or integrated in any mission critical application.\n\n"
            }));

            /**
             * DevExtreme (esm/core/class.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var wrapOverridden = function(baseProto, methodName, method) {
                return function() {
                    var prevCallBase = this.callBase;
                    this.callBase = baseProto[methodName];
                    try {
                        return method.apply(this, arguments)
                    } finally {
                        this.callBase = prevCallBase;
                    }
                }
            };
            var clonePrototype = function(obj) {
                var func = function() {};
                func.prototype = obj.prototype;
                return new func
            };
            var redefine = function(members) {
                var overridden;
                var memberName;
                var member;
                if (!members) {
                    return this
                }
                for (memberName in members) {
                    member = members[memberName];
                    overridden = "function" === typeof this.prototype[memberName] && "function" === typeof member;
                    this.prototype[memberName] = overridden ? wrapOverridden(this.parent.prototype, memberName, member) : member;
                }
                return this
            };
            var include = function() {
                var classObj = this;
                var argument;
                var name;
                var i;
                var hasClassObjOwnProperty = Object.prototype.hasOwnProperty.bind(classObj);
                var isES6Class = !hasClassObjOwnProperty("_includedCtors") && !hasClassObjOwnProperty("_includedPostCtors");
                if (isES6Class) {
                    classObj._includedCtors = classObj._includedCtors.slice(0);
                    classObj._includedPostCtors = classObj._includedPostCtors.slice(0);
                }
                for (i = 0; i < arguments.length; i++) {
                    argument = arguments[i];
                    if (argument.ctor) {
                        classObj._includedCtors.push(argument.ctor);
                    }
                    if (argument.postCtor) {
                        classObj._includedPostCtors.push(argument.postCtor);
                    }
                    for (name in argument) {
                        if ("ctor" === name || "postCtor" === name || "default" === name) {
                            continue
                        }
                        classObj.prototype[name] = argument[name];
                    }
                }
                return classObj
            };
            var subclassOf = function(parentClass) {
                var hasParentProperty = Object.prototype.hasOwnProperty.bind(this)("parent");
                var isES6Class = !hasParentProperty && this.parent;
                if (isES6Class) {
                    var baseClass = Object.getPrototypeOf(this);
                    return baseClass === parentClass || baseClass.subclassOf(parentClass)
                } else {
                    if (this.parent === parentClass) {
                        return true
                    }
                    if (!this.parent || !this.parent.subclassOf) {
                        return false
                    }
                    return this.parent.subclassOf(parentClass)
                }
            };
            var abstract$2 = function() {
                throw errors$2.Error("E0001")
            };
            var copyStatic = function() {
                var hasOwn = Object.prototype.hasOwnProperty;
                return function(source, destination) {
                    for (var key in source) {
                        if (!hasOwn.call(source, key)) {
                            return
                        }
                        destination[key] = source[key];
                    }
                }
            }();
            var classImpl = exports("h", function() {});
            classImpl.inherit = function(members) {
                var inheritor = function() {
                    if (!this || isWindow(this) || "function" !== typeof this.constructor) {
                        throw errors$2.Error("E0003")
                    }
                    var instance = this;
                    var ctor = instance.ctor;
                    var includedCtors = instance.constructor._includedCtors;
                    var includedPostCtors = instance.constructor._includedPostCtors;
                    var i;
                    for (i = 0; i < includedCtors.length; i++) {
                        includedCtors[i].call(instance);
                    }
                    if (ctor) {
                        ctor.apply(instance, arguments);
                    }
                    for (i = 0; i < includedPostCtors.length; i++) {
                        includedPostCtors[i].call(instance);
                    }
                };
                inheritor.prototype = clonePrototype(this);
                copyStatic(this, inheritor);
                inheritor.inherit = this.inherit;
                inheritor.abstract = abstract$2;
                inheritor.redefine = redefine;
                inheritor.include = include;
                inheritor.subclassOf = subclassOf;
                inheritor.parent = this;
                inheritor._includedCtors = this._includedCtors ? this._includedCtors.slice(0) : [];
                inheritor._includedPostCtors = this._includedPostCtors ? this._includedPostCtors.slice(0) : [];
                inheritor.prototype.constructor = inheritor;
                inheritor.redefine(members);
                return inheritor
            };
            classImpl.abstract = abstract$2;

            /**
             * DevExtreme (esm/core/utils/dependency_injector.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            function dependencyInjector(object) {
                var BaseClass = classImpl.inherit(object);
                var InjectedClass = BaseClass;
                var instance = new InjectedClass(object);
                var initialFields = {};
                var injectFields = function(injectionObject, initial) {
                    each(injectionObject, (function(key) {
                        if (isFunction(instance[key])) {
                            if (initial || !object[key]) {
                                object[key] = function() {
                                    return instance[key].apply(object, arguments)
                                };
                            }
                        } else {
                            if (initial) {
                                initialFields[key] = object[key];
                            }
                            object[key] = instance[key];
                        }
                    }));
                };
                injectFields(object, true);
                object.inject = function(injectionObject) {
                    InjectedClass = InjectedClass.inherit(injectionObject);
                    instance = new InjectedClass;
                    injectFields(injectionObject);
                };
                object.resetInjection = function() {
                    extend(object, initialFields);
                    InjectedClass = BaseClass;
                    instance = new BaseClass;
                };
                return object
            }

            function _extends() {
              exports("_", _extends = Object.assign ? Object.assign.bind() : function (target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              });
              return _extends.apply(this, arguments);
            }

            /**
             * DevExtreme (esm/core/config.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var config = {
                rtlEnabled: false,
                defaultCurrency: "USD",
                defaultUseCurrencyAccountingStyle: true,
                oDataFilterToLower: true,
                serverDecimalSeparator: ".",
                decimalSeparator: ".",
                thousandsSeparator: ",",
                forceIsoDateParsing: true,
                wrapActionsBeforeExecute: true,
                useLegacyStoreResult: false,
                useJQuery: void 0,
                editorStylingMode: void 0,
                useLegacyVisibleIndex: false,
                floatingActionButtonConfig: {
                    icon: "add",
                    closeIcon: "close",
                    label: "",
                    position: {
                        at: "right bottom",
                        my: "right bottom",
                        offset: {
                            x: -16,
                            y: -16
                        }
                    },
                    maxSpeedDialActionCount: 5,
                    shading: false,
                    direction: "auto"
                },
                optionsParser: optionsString => {
                    if ("{" !== optionsString.trim().charAt(0)) {
                        optionsString = "{" + optionsString + "}";
                    }
                    try {
                        return JSON.parse(optionsString)
                    } catch (ex) {
                        try {
                            return JSON.parse(normalizeToJSONString(optionsString))
                        } catch (exNormalize) {
                            throw errors$2.Error("E3018", ex, optionsString)
                        }
                    }
                }
            };
            var normalizeToJSONString = optionsString => optionsString.replace(/'/g, '"').replace(/,\s*([\]}])/g, "$1").replace(/([{,])\s*([^":\s]+)\s*:/g, '$1"$2":');
            var deprecatedFields = ["decimalSeparator", "thousandsSeparator"];
            var configMethod = exports("aI", function() {
                if (!arguments.length) {
                    return config
                }
                var newConfig = arguments.length <= 0 ? void 0 : arguments[0];
                deprecatedFields.forEach(deprecatedField => {
                    if (newConfig[deprecatedField]) {
                        var message = "Now, the ".concat(deprecatedField, " is selected based on the specified locale.");
                        errors$2.log("W0003", "config", deprecatedField, "19.2", message);
                    }
                });
                extend(config, newConfig);
            });
            if ("undefined" !== typeof DevExpress && DevExpress.config) {
                configMethod(DevExpress.config);
            }

            /**
             * DevExtreme (esm/core/guid.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var Guid = exports("K", classImpl.inherit({
                ctor: function(value) {
                    if (value) {
                        value = String(value);
                    }
                    this._value = this._normalize(value || this._generate());
                },
                _normalize: function(value) {
                    value = value.replace(/[^a-f0-9]/gi, "").toLowerCase();
                    while (value.length < 32) {
                        value += "0";
                    }
                    return [value.substr(0, 8), value.substr(8, 4), value.substr(12, 4), value.substr(16, 4), value.substr(20, 12)].join("-")
                },
                _generate: function() {
                    var value = "";
                    for (var i = 0; i < 32; i++) {
                        value += Math.round(15 * Math.random()).toString(16);
                    }
                    return value
                },
                toString: function() {
                    return this._value
                },
                valueOf: function() {
                    return this._value
                },
                toJSON: function() {
                    return this._value
                }
            }));

            /**
             * DevExtreme (esm/core/utils/callbacks.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var Callback = function(options) {
                this._options = options || {};
                this._list = [];
                this._queue = [];
                this._firing = false;
                this._fired = false;
                this._firingIndexes = [];
            };
            Callback.prototype._fireCore = function(context, args) {
                var firingIndexes = this._firingIndexes;
                var list = this._list;
                var stopOnFalse = this._options.stopOnFalse;
                var step = firingIndexes.length;
                for (firingIndexes[step] = 0; firingIndexes[step] < list.length; firingIndexes[step]++) {
                    var result = list[firingIndexes[step]].apply(context, args);
                    if (false === result && stopOnFalse) {
                        break
                    }
                }
                firingIndexes.pop();
            };
            Callback.prototype.add = function(fn) {
                if ("function" === typeof fn && (!this._options.unique || !this.has(fn))) {
                    this._list.push(fn);
                }
                return this
            };
            Callback.prototype.remove = function(fn) {
                var list = this._list;
                var firingIndexes = this._firingIndexes;
                var index = list.indexOf(fn);
                if (index > -1) {
                    list.splice(index, 1);
                    if (this._firing && firingIndexes.length) {
                        for (var step = 0; step < firingIndexes.length; step++) {
                            if (index <= firingIndexes[step]) {
                                firingIndexes[step]--;
                            }
                        }
                    }
                }
                return this
            };
            Callback.prototype.has = function(fn) {
                var list = this._list;
                return fn ? list.indexOf(fn) > -1 : !!list.length
            };
            Callback.prototype.empty = function(fn) {
                this._list = [];
                return this
            };
            Callback.prototype.fireWith = function(context, args) {
                var queue = this._queue;
                args = args || [];
                args = args.slice ? args.slice() : args;
                if (this._options.syncStrategy) {
                    this._firing = true;
                    this._fireCore(context, args);
                } else {
                    queue.push([context, args]);
                    if (this._firing) {
                        return
                    }
                    this._firing = true;
                    while (queue.length) {
                        var memory = queue.shift();
                        this._fireCore(memory[0], memory[1]);
                    }
                }
                this._firing = false;
                this._fired = true;
                return this
            };
            Callback.prototype.fire = function() {
                this.fireWith(this, arguments);
            };
            Callback.prototype.fired = function() {
                return this._fired
            };
            var Callbacks = exports("bu", function(options) {
                return new Callback(options)
            });

            /**
             * DevExtreme (esm/core/utils/deferred.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var deferredConfig = [{
                method: "resolve",
                handler: "done",
                state: "resolved"
            }, {
                method: "reject",
                handler: "fail",
                state: "rejected"
            }, {
                method: "notify",
                handler: "progress"
            }];
            var _DeferredObj = function() {
                var that = this;
                this._state = "pending";
                this._promise = {};
                deferredConfig.forEach(function(config) {
                    var methodName = config.method;
                    this[methodName + "Callbacks"] = Callbacks();
                    this[methodName] = function() {
                        return this[methodName + "With"](this._promise, arguments)
                    }.bind(this);
                    this._promise[config.handler] = function(handler) {
                        if (!handler) {
                            return this
                        }
                        var callbacks = that[methodName + "Callbacks"];
                        if (callbacks.fired()) {
                            handler.apply(that[methodName + "Context"], that[methodName + "Args"]);
                        } else {
                            callbacks.add(function(context, args) {
                                handler.apply(context, args);
                            }.bind(this));
                        }
                        return this
                    };
                }.bind(this));
                this._promise.always = function(handler) {
                    return this.done(handler).fail(handler)
                };
                this._promise.catch = function(handler) {
                    return this.then(null, handler)
                };
                this._promise.then = function(resolve, reject) {
                    var result = new _DeferredObj;
                    ["done", "fail"].forEach(function(method) {
                        var callback = "done" === method ? resolve : reject;
                        this[method]((function() {
                            if (!callback) {
                                result["done" === method ? "resolve" : "reject"].apply(this, arguments);
                                return
                            }
                            var callbackResult = callback && callback.apply(this, arguments);
                            if (isDeferred(callbackResult)) {
                                callbackResult.done(result.resolve).fail(result.reject);
                            } else if (isPromise$1(callbackResult)) {
                                callbackResult.then(result.resolve, result.reject);
                            } else {
                                result.resolve.apply(this, isDefined(callbackResult) ? [callbackResult] : arguments);
                            }
                        }));
                    }.bind(this));
                    return result.promise()
                };
                this._promise.state = function() {
                    return that._state
                };
                this._promise.promise = function(args) {
                    return args ? extend(args, that._promise) : that._promise
                };
                this._promise.promise(this);
            };
            deferredConfig.forEach((function(config) {
                var methodName = config.method;
                var state = config.state;
                _DeferredObj.prototype[methodName + "With"] = function(context, args) {
                    var callbacks = this[methodName + "Callbacks"];
                    if ("pending" === this.state()) {
                        this[methodName + "Args"] = args;
                        this[methodName + "Context"] = context;
                        if (state) {
                            this._state = state;
                        }
                        callbacks.fire(context, args);
                    }
                    return this
                };
            }));
            function fromPromise(promise, context) {
                if (isDeferred(promise)) {
                    return promise
                } else if (isPromise$1(promise)) {
                    var d = new _DeferredObj;
                    promise.then((function() {
                        d.resolveWith.apply(d, [context].concat([
                            [].slice.call(arguments)
                        ]));
                    }), (function() {
                        d.rejectWith.apply(d, [context].concat([
                            [].slice.call(arguments)
                        ]));
                    }));
                    return d
                }
                return (new _DeferredObj).resolveWith(context, [promise])
            }
            var whenFunc = function() {
                if (1 === arguments.length) {
                    return fromPromise(arguments[0])
                }
                var values = [].slice.call(arguments);
                var contexts = [];
                var resolvedCount = 0;
                var deferred = new _DeferredObj;
                var updateState = function(i) {
                    return function(value) {
                        contexts[i] = this;
                        values[i] = arguments.length > 1 ? [].slice.call(arguments) : value;
                        resolvedCount++;
                        if (resolvedCount === values.length) {
                            deferred.resolveWith(contexts, values);
                        }
                    }
                };
                for (var i = 0; i < values.length; i++) {
                    if (isDeferred(values[i])) {
                        values[i].promise().done(updateState(i)).fail(deferred.reject);
                    } else {
                        resolvedCount++;
                    }
                }
                if (resolvedCount === values.length) {
                    deferred.resolveWith(contexts, values);
                }
                return deferred.promise()
            };
            function Deferred() {
                return new _DeferredObj
            }
            function when() {
                return whenFunc.apply(this, arguments)
            }

            /**
             * DevExtreme (esm/core/utils/variable_wrapper.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var variableWrapper = exports("bP", dependencyInjector({
                isWrapped: function() {
                    return false
                },
                isWritableWrapped: function() {
                    return false
                },
                wrap: function(value) {
                    return value
                },
                unwrap: function(value) {
                    return value
                },
                assign: function() {
                    logger.error("Method 'assign' should not be used for not wrapped variables. Use 'isWrapped' method for ensuring.");
                }
            }));

            /**
             * DevExtreme (esm/core/utils/object.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var clone = exports("c6", function() {
                function Clone() {}
                return function(obj) {
                    Clone.prototype = obj;
                    return new Clone
                }
            }());
            var orderEach = function(map, func) {
                var keys = [];
                var key;
                var i;
                for (key in map) {
                    if (Object.prototype.hasOwnProperty.call(map, key)) {
                        keys.push(key);
                    }
                }
                keys.sort((function(x, y) {
                    var isNumberX = isNumeric(x);
                    var isNumberY = isNumeric(y);
                    if (isNumberX && isNumberY) {
                        return x - y
                    }
                    if (isNumberX && !isNumberY) {
                        return -1
                    }
                    if (!isNumberX && isNumberY) {
                        return 1
                    }
                    if (x < y) {
                        return -1
                    }
                    if (x > y) {
                        return 1
                    }
                    return 0
                }));
                for (i = 0; i < keys.length; i++) {
                    key = keys[i];
                    func(key, map[key]);
                }
            };
            var assignValueToProperty = function(target, property, value, assignByReference) {
                if (!assignByReference && variableWrapper.isWrapped(target[property])) {
                    variableWrapper.assign(target[property], value);
                } else {
                    target[property] = value;
                }
            };
            var deepExtendArraySafe = exports("gE", function deepExtendArraySafe(target, changes, extendComplexObject, assignByReference) {
                var prevValue;
                var newValue;
                for (var name in changes) {
                    prevValue = target[name];
                    newValue = changes[name];
                    if ("__proto__" === name || "constructor" === name || target === newValue) {
                        continue
                    }
                    if (isPlainObject(newValue)) {
                        var goDeeper = extendComplexObject ? isObject(prevValue) : isPlainObject(prevValue);
                        newValue = deepExtendArraySafe(goDeeper ? prevValue : {}, newValue, extendComplexObject, assignByReference);
                    }
                    if (void 0 !== newValue && prevValue !== newValue) {
                        assignValueToProperty(target, name, newValue, assignByReference);
                    }
                }
                return target
            });

            /**
             * DevExtreme (esm/core/utils/data.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var unwrapVariable = variableWrapper.unwrap;
            var isWrapped = variableWrapper.isWrapped;
            var assign = variableWrapper.assign;
            var bracketsToDots = function(expr) {
                return expr.replace(/\[/g, ".").replace(/\]/g, "")
            };
            var getPathParts = exports("aB", function(name) {
                return bracketsToDots(name).split(".")
            });
            var readPropValue = function(obj, propName, options) {
                options = options || {};
                if ("this" === propName) {
                    return unwrap(obj, options)
                }
                return unwrap(obj[propName], options)
            };
            var assignPropValue = function(obj, propName, value, options) {
                if ("this" === propName) {
                    throw new errors$2.Error("E4016")
                }
                var propValue = obj[propName];
                if (options.unwrapObservables && isWrapped(propValue)) {
                    assign(propValue, value);
                } else {
                    obj[propName] = value;
                }
            };
            var prepareOptions = function(options) {
                options = options || {};
                options.unwrapObservables = void 0 !== options.unwrapObservables ? options.unwrapObservables : true;
                return options
            };

            function unwrap(value, options) {
                return options.unwrapObservables ? unwrapVariable(value) : value
            }
            var compileGetter = exports("F", function(expr) {
                if (arguments.length > 1) {
                    expr = [].slice.call(arguments);
                }
                if (!expr || "this" === expr) {
                    return function(obj) {
                        return obj
                    }
                }
                if ("string" === typeof expr) {
                    var path = getPathParts(expr);
                    return function(obj, options) {
                        options = prepareOptions(options);
                        var functionAsIs = options.functionsAsIs;
                        var hasDefaultValue = "defaultValue" in options;
                        var current = unwrap(obj, options);
                        for (var i = 0; i < path.length; i++) {
                            if (!current) {
                                if (null == current && hasDefaultValue) {
                                    return options.defaultValue
                                }
                                break
                            }
                            var pathPart = path[i];
                            if (hasDefaultValue && isObject(current) && !(pathPart in current)) {
                                return options.defaultValue
                            }
                            var next = unwrap(current[pathPart], options);
                            if (!functionAsIs && isFunction(next)) {
                                next = next.call(current);
                            }
                            current = next;
                        }
                        return current
                    }
                }
                if (Array.isArray(expr)) {
                    return combineGetters(expr)
                }
                if (isFunction(expr)) {
                    return expr
                }
            });

            function combineGetters(getters) {
                var compiledGetters = {};
                for (var i = 0, l = getters.length; i < l; i++) {
                    var getter = getters[i];
                    compiledGetters[getter] = compileGetter(getter);
                }
                return function(obj, options) {
                    var result;
                    each(compiledGetters, (function(name) {
                        var value = this(obj, options);
                        if (void 0 === value) {
                            return
                        }
                        var current = result || (result = {});
                        var path = name.split(".");
                        var last = path.length - 1;
                        for (var _i = 0; _i < last; _i++) {
                            var pathItem = path[_i];
                            if (!(pathItem in current)) {
                                current[pathItem] = {};
                            }
                            current = current[pathItem];
                        }
                        current[path[last]] = value;
                    }));
                    return result
                }
            }
            var ensurePropValueDefined = function(obj, propName, value, options) {
                if (isDefined(value)) {
                    return value
                }
                var newValue = {};
                assignPropValue(obj, propName, newValue, options);
                return newValue
            };
            var compileSetter = exports("ej", function(expr) {
                expr = getPathParts(expr || "this");
                var lastLevelIndex = expr.length - 1;
                return function(obj, value, options) {
                    options = prepareOptions(options);
                    var currentValue = unwrap(obj, options);
                    expr.forEach((function(propertyName, levelIndex) {
                        var propertyValue = readPropValue(currentValue, propertyName, options);
                        var isPropertyFunc = !options.functionsAsIs && isFunction(propertyValue) && !isWrapped(propertyValue);
                        if (levelIndex === lastLevelIndex) {
                            if (options.merge && isPlainObject(value) && (!isDefined(propertyValue) || isPlainObject(propertyValue))) {
                                propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);
                                deepExtendArraySafe(propertyValue, value, false, true);
                            } else if (isPropertyFunc) {
                                currentValue[propertyName](value);
                            } else {
                                assignPropValue(currentValue, propertyName, value, options);
                            }
                        } else {
                            propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);
                            if (isPropertyFunc) {
                                propertyValue = propertyValue.call(currentValue);
                            }
                            currentValue = propertyValue;
                        }
                    }));
                }
            });
            var toComparable = exports("bQ", function(value, caseSensitive) {
                var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                if (value instanceof Date) {
                    return value.getTime()
                }
                if (value && value instanceof classImpl && value.valueOf) {
                    return value.valueOf()
                }
                if (!caseSensitive && "string" === typeof value) {
                    var _options$collatorOpti;
                    if ("base" === (null === options || void 0 === options ? void 0 : null === (_options$collatorOpti = options.collatorOptions) || void 0 === _options$collatorOpti ? void 0 : _options$collatorOpti.sensitivity)) {
                        var REMOVE_DIACRITICAL_MARKS_REGEXP = /[\u0300-\u036f]/g;
                        value = value.normalize("NFD").replace(REMOVE_DIACRITICAL_MARKS_REGEXP, "");
                    }
                    return null !== options && void 0 !== options && options.locale ? value.toLocaleLowerCase(options.locale) : value.toLowerCase()
                }
                return value
            });

            /**
             * DevExtreme (esm/core/utils/common.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ensureDefined = exports("k", function(value, defaultValue) {
                return isDefined(value) ? value : defaultValue
            });
            var executeAsync = exports("bL", function(action, context) {
                var deferred = new Deferred;
                var normalizedContext = context || this;
                var task = {
                    promise: deferred.promise(),
                    abort: function() {
                        clearTimeout(timerId);
                        deferred.rejectWith(normalizedContext);
                    }
                };
                var callback = function() {
                    var result = action.call(normalizedContext);
                    if (result && result.done && isFunction(result.done)) {
                        result.done((function() {
                            deferred.resolveWith(normalizedContext);
                        }));
                    } else {
                        deferred.resolveWith(normalizedContext);
                    }
                };
                var timerId = (arguments[2] || setTimeout)(callback, "number" === typeof context ? context : 0);
                return task
            });
            var delayedFuncs = [];
            var delayedNames = [];
            var delayedDeferreds = [];
            var executingName;
            var deferExecute = function(name, func, deferred) {
                if (executingName && executingName !== name) {
                    delayedFuncs.push(func);
                    delayedNames.push(name);
                    deferred = deferred || new Deferred;
                    delayedDeferreds.push(deferred);
                    return deferred
                } else {
                    var oldExecutingName = executingName;
                    var currentDelayedCount = delayedDeferreds.length;
                    executingName = name;
                    var result = func();
                    if (!result) {
                        if (delayedDeferreds.length > currentDelayedCount) {
                            result = when.apply(this, delayedDeferreds.slice(currentDelayedCount));
                        } else if (deferred) {
                            deferred.resolve();
                        }
                    }
                    executingName = oldExecutingName;
                    if (deferred && result && result.done) {
                        result.done(deferred.resolve).fail(deferred.reject);
                    }
                    if (!executingName && delayedFuncs.length) {
                        ("render" === delayedNames.shift() ? deferRender : deferUpdate)(delayedFuncs.shift(), delayedDeferreds.shift());
                    }
                    return result || when()
                }
            };
            var deferRender = exports("ab", function(func, deferred) {
                return deferExecute("render", func, deferred)
            });
            var deferUpdate = exports("bI", function(func, deferred) {
                return deferExecute("update", func, deferred)
            });
            var deferRenderer = exports("M", function(func) {
                return function() {
                    var that = this;
                    return deferExecute("render", (function() {
                        return func.call(that)
                    }))
                }
            });
            var deferUpdater = exports("bJ", function(func) {
                return function() {
                    var that = this;
                    return deferExecute("update", (function() {
                        return func.call(that)
                    }))
                }
            });
            var findBestMatches = function(targetFilter, items, mapFn) {
                var bestMatches = [];
                var maxMatchCount = 0;
                each(items, (index, itemSrc) => {
                    var matchCount = 0;
                    var item = mapFn ? mapFn(itemSrc) : itemSrc;
                    each(targetFilter, (paramName, targetValue) => {
                        var value = item[paramName];
                        if (void 0 === value) {
                            return
                        }
                        if (match(value, targetValue)) {
                            matchCount++;
                            return
                        }
                        matchCount = -1;
                        return false
                    });
                    if (matchCount < maxMatchCount) {
                        return
                    }
                    if (matchCount > maxMatchCount) {
                        bestMatches.length = 0;
                        maxMatchCount = matchCount;
                    }
                    bestMatches.push(itemSrc);
                });
                return bestMatches
            };
            var match = function(value, targetValue) {
                if (Array.isArray(value) && Array.isArray(targetValue)) {
                    var mismatch = false;
                    each(value, (index, valueItem) => {
                        if (valueItem !== targetValue[index]) {
                            mismatch = true;
                            return false
                        }
                    });
                    if (mismatch) {
                        return false
                    }
                    return true
                }
                if (value === targetValue) {
                    return true
                }
                return false
            };
            var splitPair = exports("bD", function(raw) {
                var _raw$x, _raw$y;
                switch (type(raw)) {
                    case "string":
                        return raw.split(/\s+/, 2);
                    case "object":
                        return [null !== (_raw$x = raw.x) && void 0 !== _raw$x ? _raw$x : raw.h, null !== (_raw$y = raw.y) && void 0 !== _raw$y ? _raw$y : raw.v];
                    case "number":
                        return [raw];
                    case "array":
                        return raw;
                    default:
                        return null
                }
            });
            var normalizeKey = exports("gJ", function(id) {
                var key = isString(id) ? id : id.toString();
                var arr = key.match(/[^a-zA-Z0-9_]/g);
                arr && each(arr, (_, sign) => {
                    key = key.replace(sign, "__" + sign.charCodeAt() + "__");
                });
                return key
            });
            var pairToObject = exports("b4", function(raw, preventRound) {
                var pair = splitPair(raw);
                var h = preventRound ? parseFloat(pair && pair[0]) : parseInt(pair && pair[0], 10);
                var v = preventRound ? parseFloat(pair && pair[1]) : parseInt(pair && pair[1], 10);
                if (!isFinite(h)) {
                    h = 0;
                }
                if (!isFinite(v)) {
                    v = h;
                }
                return {
                    h: h,
                    v: v
                }
            });
            var getKeyHash = exports("Z", function(key) {
                if (key instanceof Guid) {
                    return key.toString()
                } else if (isObject(key) || Array.isArray(key)) {
                    try {
                        var keyHash = JSON.stringify(key);
                        return "{}" === keyHash ? key : keyHash
                    } catch (e) {
                        return key
                    }
                }
                return key
            });
            var escapeRegExp = exports("ea", function(string) {
                return string.replace(/[[\]{}\-()*+?.\\^$|\s]/g, "\\$&")
            });
            var applyServerDecimalSeparator = exports("eb", function(value) {
                var separator = configMethod().serverDecimalSeparator;
                if (isDefined(value)) {
                    value = value.toString().replace(".", separator);
                }
                return value
            });
            var noop = exports("n", function() {});
            var asyncNoop = exports("ek", function() {
                return (new Deferred).resolve().promise()
            });
            var grep = exports("aq", function(elements, checkFunction, invert) {
                var result = [];
                var check;
                var expectedCheck = !invert;
                for (var i = 0; i < elements.length; i++) {
                    check = !!checkFunction(elements[i], i);
                    if (check === expectedCheck) {
                        result.push(elements[i]);
                    }
                }
                return result
            });
            var compareArrays = (array1, array2, depth, options) => {
                if (array1.length !== array2.length) {
                    return false
                }
                return !array1.some((item, idx) => !compareByValue(item, array2[idx], depth + 1, _extends({}, options, {
                    strict: true
                })))
            };
            var compareObjects = (object1, object2, depth, options) => {
                var keys1 = Object.keys(object1);
                var keys2 = Object.keys(object2);
                if (keys1.length !== keys2.length) {
                    return false
                }
                var keys2Set = new Set(keys2);
                return !keys1.some(key => !keys2Set.has(key) || !compareByValue(object1[key], object2[key], depth + 1, options))
            };
            var DEFAULT_EQUAL_BY_VALUE_OPTS = {
                maxDepth: 3,
                strict: true
            };
            var compareByValue = (value1, value2, depth, options) => {
                var {
                    strict: strict,
                    maxDepth: maxDepth
                } = options;
                var comparable1 = toComparable(value1, true);
                var comparable2 = toComparable(value2, true);
                var comparisonResult = strict ? comparable1 === comparable2 : comparable1 == comparable2;
                switch (true) {
                    case comparisonResult:
                    case depth >= maxDepth:
                        return true;
                    case isObject(comparable1) && isObject(comparable2):
                        return compareObjects(comparable1, comparable2, depth, options);
                    case Array.isArray(comparable1) && Array.isArray(comparable2):
                        return compareArrays(comparable1, comparable2, depth, options);
                    default:
                        return false
                }
            };
            var equalByValue = exports("U", function(value1, value2) {
                var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : DEFAULT_EQUAL_BY_VALUE_OPTS;
                var compareOptions = _extends({}, DEFAULT_EQUAL_BY_VALUE_OPTS, options);
                return compareByValue(value1, value2, 0, compareOptions)
            });

            /**
             * DevExtreme (esm/core/utils/shadow_dom.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DX_RULE_PREFIX = "dx-";
            var ownerDocumentStyleSheet = null;

            function createConstructedStyleSheet(rootNode) {
                try {
                    return new CSSStyleSheet
                } catch (err) {
                    var styleElement = rootNode.ownerDocument.createElement("style");
                    rootNode.appendChild(styleElement);
                    return styleElement.sheet
                }
            }

            function processRules(targetStyleSheet, styleSheets, needApplyAllStyles) {
                for (var i = 0; i < styleSheets.length; i++) {
                    var sheet = styleSheets[i];
                    try {
                        for (var j = 0; j < sheet.cssRules.length; j++) {
                            insertRule(targetStyleSheet, sheet.cssRules[j], needApplyAllStyles);
                        }
                    } catch (err) {}
                }
            }

            function insertRule(targetStyleSheet, rule, needApplyAllStyles) {
                var _rule$selectorText, _rule$cssRules, _rule$cssRules$, _rule$cssRules$$selec, _rule$name, _rule$style;
                var isDxRule = needApplyAllStyles || (null === (_rule$selectorText = rule.selectorText) || void 0 === _rule$selectorText ? void 0 : _rule$selectorText.includes(DX_RULE_PREFIX)) || (null === (_rule$cssRules = rule.cssRules) || void 0 === _rule$cssRules ? void 0 : null === (_rule$cssRules$ = _rule$cssRules[0]) || void 0 === _rule$cssRules$ ? void 0 : null === (_rule$cssRules$$selec = _rule$cssRules$.selectorText) || void 0 === _rule$cssRules$$selec ? void 0 : _rule$cssRules$$selec.includes(DX_RULE_PREFIX)) || (null === (_rule$name = rule.name) || void 0 === _rule$name ? void 0 : _rule$name.startsWith(DX_RULE_PREFIX)) || "DXIcons" === (null === (_rule$style = rule.style) || void 0 === _rule$style ? void 0 : _rule$style.fontFamily);
                if (isDxRule) {
                    targetStyleSheet.insertRule(rule.cssText, targetStyleSheet.cssRules.length);
                }
            }
            function addShadowDomStyles($element) {
                var _el$getRootNode;
                var el = $element.get(0);
                var root = null === (_el$getRootNode = el.getRootNode) || void 0 === _el$getRootNode ? void 0 : _el$getRootNode.call(el);
                if (!(null !== root && void 0 !== root && root.host)) {
                    return
                }
                if (!ownerDocumentStyleSheet) {
                    ownerDocumentStyleSheet = createConstructedStyleSheet(root);
                    processRules(ownerDocumentStyleSheet, el.ownerDocument.styleSheets, false);
                }
                var currentShadowDomStyleSheet = createConstructedStyleSheet(root);
                processRules(currentShadowDomStyleSheet, root.styleSheets, true);
                root.adoptedStyleSheets = [ownerDocumentStyleSheet, currentShadowDomStyleSheet];
            }

            function isPositionInElementRectangle(element, x, y) {
                var rect = element.getBoundingClientRect();
                return rect && x >= rect.left && x < rect.right && y >= rect.top && y < rect.bottom
            }

            function createQueue$1() {
                var shiftIndex = 0;
                var items = [];
                return {
                    push(item) {
                        items.push(item);
                        return this
                    },
                    shift() {
                        shiftIndex++;
                        return items[shiftIndex - 1]
                    },
                    get length() {
                        return items.length - shiftIndex
                    },
                    get items() {
                        return items
                    }
                }
            }
            function getShadowElementsFromPoint(x, y, root) {
                var elementQueue = createQueue$1().push(root);
                while (elementQueue.length) {
                    var el = elementQueue.shift();
                    for (var i = 0; i < el.childNodes.length; i++) {
                        var childNode = el.childNodes[i];
                        if (childNode.nodeType === Node.ELEMENT_NODE && isPositionInElementRectangle(childNode, x, y) && "none" !== getComputedStyle(childNode).pointerEvents) {
                            elementQueue.push(childNode);
                        }
                    }
                }
                var result = elementQueue.items.reverse();
                result.pop();
                return result
            }

            /**
             * DevExtreme (esm/core/dom_adapter.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ELEMENT_NODE = 1;
            var TEXT_NODE$1 = 3;
            var DOCUMENT_NODE = 9;
            var DOCUMENT_FRAGMENT_NODE = 11;
            var nativeDOMAdapterStrategy = {
                querySelectorAll: (element, selector) => element.querySelectorAll(selector),
                elementMatches(element, selector) {
                    var matches = element.matches || element.matchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector || (selector => {
                        var doc = element.document || element.ownerDocument;
                        if (!doc) {
                            return false
                        }
                        var items = this.querySelectorAll(doc, selector);
                        for (var i = 0; i < items.length; i++) {
                            if (items[i] === element) {
                                return true
                            }
                        }
                    });
                    return matches.call(element, selector)
                },
                createElement(tagName, context) {
                    context = context || this._document;
                    return context.createElement(tagName)
                },
                createElementNS(ns, tagName, context) {
                    context = context || this._document;
                    return context.createElementNS(ns, tagName)
                },
                createTextNode(text, context) {
                    context = context || this._document;
                    return context.createTextNode(text)
                },
                createAttribute(text, context) {
                    context = context || this._document;
                    return context.createAttribute(text)
                },
                isNode: element => element && "object" === typeof element && "nodeType" in element && "nodeName" in element,
                isElementNode: element => element && element.nodeType === ELEMENT_NODE,
                isTextNode: element => element && element.nodeType === TEXT_NODE$1,
                isDocument: element => element && element.nodeType === DOCUMENT_NODE,
                isDocumentFragment: element => element && element.nodeType === DOCUMENT_FRAGMENT_NODE,
                removeElement(element) {
                    var parentNode = element && element.parentNode;
                    if (parentNode) {
                        parentNode.removeChild(element);
                    }
                },
                insertElement(parentElement, newElement, nextSiblingElement) {
                    if (parentElement && newElement && parentElement !== newElement) {
                        if (nextSiblingElement) {
                            parentElement.insertBefore(newElement, nextSiblingElement);
                        } else {
                            parentElement.appendChild(newElement);
                        }
                    }
                },
                getAttribute: (element, name) => element.getAttribute(name),
                setAttribute(element, name, value) {
                    if ("style" === name) {
                        element.style.cssText = value;
                    } else {
                        element.setAttribute(name, value);
                    }
                },
                removeAttribute(element, name) {
                    element.removeAttribute(name);
                },
                setProperty(element, name, value) {
                    element[name] = value;
                },
                setText(element, text) {
                    if (element) {
                        element.textContent = text;
                    }
                },
                setClass(element, className, isAdd) {
                    if (1 === element.nodeType && className) {
                        isAdd ? element.classList.add(className) : element.classList.remove(className);
                    }
                },
                setStyle(element, name, value) {
                    element.style[name] = value || "";
                },
                _document: "undefined" === typeof document ? void 0 : document,
                getDocument() {
                    return this._document
                },
                getActiveElement(element) {
                    var activeElementHolder = this.getRootNode(element);
                    return activeElementHolder.activeElement
                },
                getRootNode(element) {
                    var _element$getRootNode, _element$getRootNode2;
                    return null !== (_element$getRootNode = null === element || void 0 === element ? void 0 : null === (_element$getRootNode2 = element.getRootNode) || void 0 === _element$getRootNode2 ? void 0 : _element$getRootNode2.call(element)) && void 0 !== _element$getRootNode ? _element$getRootNode : this._document
                },
                getBody() {
                    return this._document.body
                },
                createDocumentFragment() {
                    return this._document.createDocumentFragment()
                },
                getDocumentElement() {
                    return this._document.documentElement
                },
                getLocation() {
                    return this._document.location
                },
                getSelection() {
                    return this._document.selection
                },
                getReadyState() {
                    return this._document.readyState
                },
                getHead() {
                    return this._document.head
                },
                hasDocumentProperty(property) {
                    return property in this._document
                },
                listen(element, event, callback, options) {
                    if (!element || !("addEventListener" in element)) {
                        return noop
                    }
                    element.addEventListener(event, callback, options);
                    return () => {
                        element.removeEventListener(event, callback);
                    }
                },
                elementsFromPoint(x, y, element) {
                    var activeElementHolder = this.getRootNode(element);
                    if (activeElementHolder.host) {
                        return getShadowElementsFromPoint(x, y, activeElementHolder)
                    }
                    return activeElementHolder.elementsFromPoint(x, y)
                }
            };
            var domAdapter = exports("a", dependencyInjector(nativeDOMAdapterStrategy));

            /**
             * DevExtreme (esm/core/memorized_callbacks.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class MemorizedCallbacks {
                constructor() {
                    this.memory = [];
                    this.callbacks = Callbacks();
                }
                add(fn) {
                    each(this.memory, (_, item) => fn.apply(fn, item));
                    this.callbacks.add(fn);
                }
                remove(fn) {
                    this.callbacks.remove(fn);
                }
                fire() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    this.memory.push(args);
                    this.callbacks.fire.apply(this.callbacks, args);
                }
            }

            /**
             * DevExtreme (esm/events/core/event_registrator_callbacks.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var callbacks$3 = new MemorizedCallbacks;

            /**
             * DevExtreme (esm/core/utils/window.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var hasWindowValue = "undefined" !== typeof window;
            var hasWindow = exports("b7", () => hasWindowValue);
            var windowObject = hasWindow() ? window : void 0;
            if (!windowObject) {
                windowObject = {};
                windowObject.window = windowObject;
            }
            var getWindow = exports("bb", () => windowObject);
            var hasProperty = exports("cm", prop => hasWindow() && prop in windowObject);
            var defaultScreenFactorFunc = exports("ev", width => {
                if (width < 768) {
                    return "xs"
                } else if (width < 992) {
                    return "sm"
                } else if (width < 1200) {
                    return "md"
                } else {
                    return "lg"
                }
            });
            var getCurrentScreenFactor = exports("ew", screenFactorCallback => {
                var screenFactorFunc = screenFactorCallback || defaultScreenFactorFunc;
                var windowWidth = domAdapter.getDocumentElement().clientWidth;
                return screenFactorFunc(windowWidth)
            });
            var getNavigator = exports("cf", () => hasWindow() ? windowObject.navigator : {
                userAgent: ""
            });

            /**
             * DevExtreme (esm/events/core/hook_touch_props.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var touchPropsToHook = ["pageX", "pageY", "screenX", "screenY", "clientX", "clientY"];
            var touchPropHook = function(name, event) {
                if (event[name] && !event.touches || !event.touches) {
                    return event[name]
                }
                var touches = event.touches.length ? event.touches : event.changedTouches;
                if (!touches.length) {
                    return
                }
                return touches[0][name]
            };
            function hookTouchProps(callback) {
                touchPropsToHook.forEach((function(name) {
                    callback(name, (function(event) {
                        return touchPropHook(name, event)
                    }));
                }), this);
            }

            /**
             * DevExtreme (esm/core/utils/call_once.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var callOnce = exports("ce", function(handler) {
                var result;
                var _wrappedHandler = function() {
                    result = handler.apply(this, arguments);
                    _wrappedHandler = function() {
                        return result
                    };
                    return result
                };
                return function() {
                    return _wrappedHandler.apply(this, arguments)
                }
            });

            /**
             * DevExtreme (esm/events/core/events_engine.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$f = getWindow();
            var EMPTY_EVENT_NAME = "dxEmptyEventType";
            var NATIVE_EVENTS_TO_SUBSCRIBE = {
                mouseenter: "mouseover",
                mouseleave: "mouseout",
                pointerenter: "pointerover",
                pointerleave: "pointerout"
            };
            var NATIVE_EVENTS_TO_TRIGGER = {
                focusin: "focus",
                focusout: "blur"
            };
            var NO_BUBBLE_EVENTS = ["blur", "focus", "load"];
            var forcePassiveFalseEventNames = ["touchmove", "wheel", "mousewheel", "touchstart"];
            var EVENT_PROPERTIES = ["target", "relatedTarget", "delegateTarget", "altKey", "bubbles", "cancelable", "changedTouches", "ctrlKey", "detail", "eventPhase", "metaKey", "shiftKey", "view", "char", "code", "charCode", "key", "keyCode", "button", "buttons", "offsetX", "offsetY", "pointerId", "pointerType", "targetTouches", "toElement", "touches"];

            function matchesSafe(target, selector) {
                return !isWindow(target) && "#document" !== target.nodeName && domAdapter.elementMatches(target, selector)
            }
            var elementDataMap = new WeakMap;
            var guid = 0;
            var skipEvent;
            var special = function() {
                var specialData = {};
                callbacks$3.add((function(eventName, eventObject) {
                    specialData[eventName] = eventObject;
                }));
                return {
                    getField: function(eventName, field) {
                        return specialData[eventName] && specialData[eventName][field]
                    },
                    callMethod: function(eventName, methodName, context, args) {
                        return specialData[eventName] && specialData[eventName][methodName] && specialData[eventName][methodName].apply(context, args)
                    }
                }
            }();
            var eventsEngine = exports("e", dependencyInjector({
                on: getHandler(normalizeOnArguments(iterate((function(element, eventName, selector, data, handler) {
                    var handlersController = getHandlersController(element, eventName);
                    handlersController.addHandler(handler, selector, data);
                })))),
                one: getHandler(normalizeOnArguments((function(element, eventName, selector, data, handler) {
                    eventsEngine.on(element, eventName, selector, data, (function oneTimeHandler() {
                        eventsEngine.off(element, eventName, selector, oneTimeHandler);
                        handler.apply(this, arguments);
                    }));
                }))),
                off: getHandler(normalizeOffArguments(iterate((function(element, eventName, selector, handler) {
                    var handlersController = getHandlersController(element, eventName);
                    handlersController.removeHandler(handler, selector);
                })))),
                trigger: getHandler(normalizeTriggerArguments((function(element, event, extraParameters) {
                    var eventName = event.type;
                    var handlersController = getHandlersController(element, event.type);
                    special.callMethod(eventName, "trigger", element, [event, extraParameters]);
                    handlersController.callHandlers(event, extraParameters);
                    var noBubble = special.getField(eventName, "noBubble") || event.isPropagationStopped() || -1 !== NO_BUBBLE_EVENTS.indexOf(eventName);
                    if (!noBubble) {
                        var parents = [];
                        ! function getParents(element) {
                            var _element$parentNode;
                            var parent = null !== (_element$parentNode = element.parentNode) && void 0 !== _element$parentNode ? _element$parentNode : isObject(element.host) ? element.host : null;
                            if (parent) {
                                parents.push(parent);
                                getParents(parent);
                            }
                        }(element);
                        parents.push(window$f);
                        var i = 0;
                        while (parents[i] && !event.isPropagationStopped()) {
                            var parentDataByEvent = getHandlersController(parents[i], event.type);
                            parentDataByEvent.callHandlers(extend(event, {
                                currentTarget: parents[i]
                            }), extraParameters);
                            i++;
                        }
                    }
                    if (element.nodeType || isWindow(element)) {
                        special.callMethod(eventName, "_default", element, [event, extraParameters]);
                        callNativeMethod(eventName, element);
                    }
                }))),
                triggerHandler: getHandler(normalizeTriggerArguments((function(element, event, extraParameters) {
                    var handlersController = getHandlersController(element, event.type);
                    handlersController.callHandlers(event, extraParameters);
                })))
            }));

            function applyForEach(args, method) {
                var element = args[0];
                if (!element) {
                    return
                }
                if (domAdapter.isNode(element) || isWindow(element)) {
                    method.apply(eventsEngine, args);
                } else if (!isString(element) && "length" in element) {
                    var itemArgs = Array.prototype.slice.call(args, 0);
                    Array.prototype.forEach.call(element, (function(itemElement) {
                        itemArgs[0] = itemElement;
                        applyForEach(itemArgs, method);
                    }));
                } else {
                    throw errors$2.Error("E0025")
                }
            }

            function getHandler(method) {
                return function() {
                    applyForEach(arguments, method);
                }
            }

            function detectPassiveEventHandlersSupport() {
                var isSupported = false;
                try {
                    var options = Object.defineProperty({}, "passive", {
                        get: function() {
                            isSupported = true;
                            return true
                        }
                    });
                    window$f.addEventListener("test", null, options);
                } catch (e) {}
                return isSupported
            }
            var passiveEventHandlersSupported = callOnce(detectPassiveEventHandlersSupport);
            var contains$1 = (container, element) => {
                if (isWindow(container)) {
                    return contains$1(container.document, element)
                }
                return container.contains ? container.contains(element) : !!(element.compareDocumentPosition(container) & element.DOCUMENT_POSITION_CONTAINS)
            };

            function getHandlersController(element, eventName) {
                var elementData = elementDataMap.get(element);
                eventName = eventName || "";
                var eventNameParts = eventName.split(".");
                var namespaces = eventNameParts.slice(1);
                var eventNameIsDefined = !!eventNameParts[0];
                eventName = eventNameParts[0] || EMPTY_EVENT_NAME;
                if (!elementData) {
                    elementData = {};
                    elementDataMap.set(element, elementData);
                }
                if (!elementData[eventName]) {
                    elementData[eventName] = {
                        handleObjects: [],
                        nativeHandler: null
                    };
                }
                var eventData = elementData[eventName];
                return {
                    addHandler: function(handler, selector, data) {
                        var callHandler = function(e, extraParameters) {
                            var handlerArgs = [e];
                            var target = e.currentTarget;
                            var relatedTarget = e.relatedTarget;
                            var secondaryTargetIsInside;
                            var result;
                            if (eventName in NATIVE_EVENTS_TO_SUBSCRIBE) {
                                secondaryTargetIsInside = relatedTarget && target && (relatedTarget === target || contains$1(target, relatedTarget));
                            }
                            if (void 0 !== extraParameters) {
                                handlerArgs.push(extraParameters);
                            }
                            special.callMethod(eventName, "handle", element, [e, data]);
                            if (!secondaryTargetIsInside) {
                                result = handler.apply(target, handlerArgs);
                            }
                            if (false === result) {
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        };
                        var handleObject = {
                            handler: handler,
                            wrappedHandler: function(e, extraParameters) {
                                if (skipEvent && e.type === skipEvent) {
                                    return
                                }
                                e.data = data;
                                e.delegateTarget = element;
                                if (selector) {
                                    var currentTarget = e.target;
                                    while (currentTarget && currentTarget !== element) {
                                        if (matchesSafe(currentTarget, selector)) {
                                            e.currentTarget = currentTarget;
                                            callHandler(e, extraParameters);
                                        }
                                        currentTarget = currentTarget.parentNode;
                                    }
                                } else {
                                    e.currentTarget = e.delegateTarget || e.target;
                                    callHandler(e, extraParameters);
                                }
                            },
                            selector: selector,
                            type: eventName,
                            data: data,
                            namespace: namespaces.join("."),
                            namespaces: namespaces,
                            guid: ++guid
                        };
                        eventData.handleObjects.push(handleObject);
                        var firstHandlerForTheType = 1 === eventData.handleObjects.length;
                        var shouldAddNativeListener = firstHandlerForTheType && eventNameIsDefined;
                        var nativeListenerOptions;
                        if (shouldAddNativeListener) {
                            shouldAddNativeListener = !special.callMethod(eventName, "setup", element, [data, namespaces, handler]);
                        }
                        if (shouldAddNativeListener) {
                            eventData.nativeHandler = getNativeHandler(eventName);
                            if (passiveEventHandlersSupported() && forcePassiveFalseEventNames.indexOf(eventName) > -1) {
                                nativeListenerOptions = {
                                    passive: false
                                };
                            }
                            eventData.removeListener = domAdapter.listen(element, NATIVE_EVENTS_TO_SUBSCRIBE[eventName] || eventName, eventData.nativeHandler, nativeListenerOptions);
                        }
                        special.callMethod(eventName, "add", element, [handleObject]);
                    },
                    removeHandler: function(handler, selector) {
                        var removeByEventName = function(eventName) {
                            var eventData = elementData[eventName];
                            if (!eventData.handleObjects.length) {
                                delete elementData[eventName];
                                return
                            }
                            var removedHandler;
                            eventData.handleObjects = eventData.handleObjects.filter((function(handleObject) {
                                var skip = namespaces.length && !isSubset(handleObject.namespaces, namespaces) || handler && handleObject.handler !== handler || selector && handleObject.selector !== selector;
                                if (!skip) {
                                    removedHandler = handleObject.handler;
                                    special.callMethod(eventName, "remove", element, [handleObject]);
                                }
                                return skip
                            }));
                            var lastHandlerForTheType = !eventData.handleObjects.length;
                            var shouldRemoveNativeListener = lastHandlerForTheType && eventName !== EMPTY_EVENT_NAME;
                            if (shouldRemoveNativeListener) {
                                special.callMethod(eventName, "teardown", element, [namespaces, removedHandler]);
                                if (eventData.nativeHandler) {
                                    eventData.removeListener();
                                }
                                delete elementData[eventName];
                            }
                        };
                        if (eventNameIsDefined) {
                            removeByEventName(eventName);
                        } else {
                            for (var name in elementData) {
                                removeByEventName(name);
                            }
                        }
                        var elementDataIsEmpty = 0 === Object.keys(elementData).length;
                        if (elementDataIsEmpty) {
                            elementDataMap.delete(element);
                        }
                    },
                    callHandlers: function(event, extraParameters) {
                        var forceStop = false;
                        var handleCallback = function(handleObject) {
                            if (forceStop) {
                                return
                            }
                            if (!namespaces.length || isSubset(handleObject.namespaces, namespaces)) {
                                handleObject.wrappedHandler(event, extraParameters);
                                forceStop = event.isImmediatePropagationStopped();
                            }
                        };
                        eventData.handleObjects.forEach(handleCallback);
                        if (namespaces.length && elementData[EMPTY_EVENT_NAME]) {
                            elementData[EMPTY_EVENT_NAME].handleObjects.forEach(handleCallback);
                        }
                    }
                }
            }

            function getNativeHandler(subscribeName) {
                return function(event, extraParameters) {
                    var handlersController = getHandlersController(this, subscribeName);
                    event = eventsEngine.Event(event);
                    handlersController.callHandlers(event, extraParameters);
                }
            }

            function isSubset(original, checked) {
                for (var i = 0; i < checked.length; i++) {
                    if (original.indexOf(checked[i]) < 0) {
                        return false
                    }
                }
                return true
            }

            function normalizeOnArguments(callback) {
                return function(element, eventName, selector, data, handler) {
                    if (!handler) {
                        handler = data;
                        data = void 0;
                    }
                    if ("string" !== typeof selector) {
                        data = selector;
                        selector = void 0;
                    }
                    if (!handler && "string" === typeof eventName) {
                        handler = data || selector;
                        selector = void 0;
                        data = void 0;
                    }
                    callback(element, eventName, selector, data, handler);
                }
            }

            function normalizeOffArguments(callback) {
                return function(element, eventName, selector, handler) {
                    if ("function" === typeof selector) {
                        handler = selector;
                        selector = void 0;
                    }
                    callback(element, eventName, selector, handler);
                }
            }

            function normalizeTriggerArguments(callback) {
                return function(element, src, extraParameters) {
                    if ("string" === typeof src) {
                        src = {
                            type: src
                        };
                    }
                    if (!src.target) {
                        src.target = element;
                    }
                    src.currentTarget = element;
                    if (!src.delegateTarget) {
                        src.delegateTarget = element;
                    }
                    if (!src.type && src.originalEvent) {
                        src.type = src.originalEvent.type;
                    }
                    callback(element, src instanceof eventsEngine.Event ? src : eventsEngine.Event(src), extraParameters);
                }
            }

            function normalizeEventArguments(callback) {
                eventsEngine.Event = function(src, config) {
                    if (!(this instanceof eventsEngine.Event)) {
                        return new eventsEngine.Event(src, config)
                    }
                    if (!src) {
                        src = {};
                    }
                    if ("string" === typeof src) {
                        src = {
                            type: src
                        };
                    }
                    if (!config) {
                        config = {};
                    }
                    callback.call(this, src, config);
                };
                _extends(eventsEngine.Event.prototype, {
                    _propagationStopped: false,
                    _immediatePropagationStopped: false,
                    _defaultPrevented: false,
                    isPropagationStopped: function() {
                        return !!(this._propagationStopped || this.originalEvent && this.originalEvent.propagationStopped)
                    },
                    stopPropagation: function() {
                        this._propagationStopped = true;
                        this.originalEvent && this.originalEvent.stopPropagation();
                    },
                    isImmediatePropagationStopped: function() {
                        return this._immediatePropagationStopped
                    },
                    stopImmediatePropagation: function() {
                        this.stopPropagation();
                        this._immediatePropagationStopped = true;
                        this.originalEvent && this.originalEvent.stopImmediatePropagation();
                    },
                    isDefaultPrevented: function() {
                        return !!(this._defaultPrevented || this.originalEvent && this.originalEvent.defaultPrevented)
                    },
                    preventDefault: function() {
                        this._defaultPrevented = true;
                        this.originalEvent && this.originalEvent.preventDefault();
                    }
                });
                return eventsEngine.Event
            }

            function iterate(callback) {
                var iterateEventNames = function(element, eventName) {
                    if (eventName && eventName.indexOf(" ") > -1) {
                        var args = Array.prototype.slice.call(arguments, 0);
                        eventName.split(" ").forEach((function(eventName) {
                            args[1] = eventName;
                            callback.apply(this, args);
                        }));
                    } else {
                        callback.apply(this, arguments);
                    }
                };
                return function(element, eventName) {
                    if ("object" === typeof eventName) {
                        var args = Array.prototype.slice.call(arguments, 0);
                        for (var name in eventName) {
                            args[1] = name;
                            args[args.length - 1] = eventName[name];
                            iterateEventNames.apply(this, args);
                        }
                    } else {
                        iterateEventNames.apply(this, arguments);
                    }
                }
            }

            function callNativeMethod(eventName, element) {
                var nativeMethodName = NATIVE_EVENTS_TO_TRIGGER[eventName] || eventName;
                if (function(eventName, element) {
                        return "click" === eventName && "a" === element.localName
                    }(eventName, element)) {
                    return
                }
                if (isFunction(element[nativeMethodName])) {
                    skipEvent = eventName;
                    element[nativeMethodName]();
                    skipEvent = void 0;
                }
            }

            function calculateWhich(event) {
                if (function(event) {
                        return null == event.which && 0 === event.type.indexOf("key")
                    }(event)) {
                    return null != event.charCode ? event.charCode : event.keyCode
                }
                if (function(event) {
                        return !event.which && void 0 !== event.button && /^(?:mouse|pointer|contextmenu|drag|drop)|click/.test(event.type)
                    }(event)) {
                    return {
                        1: 1,
                        2: 3,
                        3: 1,
                        4: 2
                    } [event.button]
                }
                return event.which
            }

            function initEvent(EventClass) {
                if (EventClass) {
                    eventsEngine.Event = EventClass;
                    eventsEngine.Event.prototype = EventClass.prototype;
                }
            }
            initEvent(normalizeEventArguments((function(src, config) {
                var _src$view;
                var srcIsEvent = src instanceof eventsEngine.Event || hasWindow() && src instanceof window$f.Event || (null === (_src$view = src.view) || void 0 === _src$view ? void 0 : _src$view.Event) && src instanceof src.view.Event;
                if (srcIsEvent) {
                    this.originalEvent = src;
                    this.type = src.type;
                    this.currentTarget = void 0;
                    if (Object.prototype.hasOwnProperty.call(src, "isTrusted")) {
                        this.isTrusted = src.isTrusted;
                    }
                    this.timeStamp = src.timeStamp || Date.now();
                } else {
                    _extends(this, src);
                }
                addProperty("which", calculateWhich, this);
                if (0 === src.type.indexOf("touch")) {
                    delete config.pageX;
                    delete config.pageY;
                }
                _extends(this, config);
                this.guid = ++guid;
            })));

            function addProperty(propName, hook, eventInstance) {
                Object.defineProperty(eventInstance || eventsEngine.Event.prototype, propName, {
                    enumerable: true,
                    configurable: true,
                    get: function() {
                        return this.originalEvent && hook(this.originalEvent)
                    },
                    set: function(value) {
                        Object.defineProperty(this, propName, {
                            enumerable: true,
                            configurable: true,
                            writable: true,
                            value: value
                        });
                    }
                });
            }
            EVENT_PROPERTIES.forEach(prop => addProperty(prop, event => event[prop]));
            hookTouchProps(addProperty);
            var beforeSetStrategy = Callbacks();
            var afterSetStrategy = Callbacks();
            eventsEngine.set = function(engine) {
                beforeSetStrategy.fire();
                eventsEngine.inject(engine);
                initEvent(engine.Event);
                afterSetStrategy.fire();
            };
            eventsEngine.subscribeGlobal = function() {
                applyForEach(arguments, normalizeOnArguments((function() {
                    var args = arguments;
                    eventsEngine.on.apply(this, args);
                    beforeSetStrategy.add((function() {
                        var offArgs = Array.prototype.slice.call(args, 0);
                        offArgs.splice(3, 1);
                        eventsEngine.off.apply(this, offArgs);
                    }));
                    afterSetStrategy.add((function() {
                        eventsEngine.on.apply(this, args);
                    }));
                })));
            };
            eventsEngine.forcePassiveFalseEventNames = forcePassiveFalseEventNames;
            eventsEngine.passiveEventHandlersSupported = passiveEventHandlersSupported;

            /**
             * DevExtreme (esm/events/index.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            eventsEngine.on;
            var one = eventsEngine.one;
            eventsEngine.off;
            eventsEngine.trigger;
            var triggerHandler = eventsEngine.triggerHandler;
            var Event = exports("fG", eventsEngine.Event);

            /**
             * DevExtreme (esm/core/element_data.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var dataMap = new WeakMap;
            var strategy$1;
            var strategyChanging = new MemorizedCallbacks;
            var beforeCleanDataFunc = function() {};
            var setDataStrategy = function(value) {
                strategyChanging.fire(value);
                strategy$1 = value;
                var cleanData = strategy$1.cleanData;
                strategy$1.cleanData = function(nodes) {
                    beforeCleanDataFunc(nodes);
                    var result = cleanData.call(this, nodes);
                    return result
                };
            };
            setDataStrategy({
                data: function() {
                    var element = arguments[0];
                    var key = arguments[1];
                    var value = arguments[2];
                    if (!element) {
                        return
                    }
                    var elementData = dataMap.get(element);
                    if (!elementData) {
                        elementData = {};
                        dataMap.set(element, elementData);
                    }
                    if (void 0 === key) {
                        return elementData
                    }
                    if (2 === arguments.length) {
                        return elementData[key]
                    }
                    elementData[key] = value;
                    return value
                },
                removeData: function(element, key) {
                    if (!element) {
                        return
                    }
                    if (void 0 === key) {
                        dataMap.delete(element);
                    } else {
                        var elementData = dataMap.get(element);
                        if (elementData) {
                            delete elementData[key];
                        }
                    }
                },
                cleanData: function(elements) {
                    for (var i = 0; i < elements.length; i++) {
                        eventsEngine.off(elements[i]);
                        dataMap.delete(elements[i]);
                    }
                }
            });
            function data() {
                return strategy$1.data.apply(this, arguments)
            }
            function beforeCleanData(callback) {
                beforeCleanDataFunc = callback;
            }
            function removeData(element, key) {
                return strategy$1.removeData.call(this, element, key)
            }
            function cleanDataRecursive(element, cleanSelf) {
                if (!domAdapter.isElementNode(element)) {
                    return
                }
                var childElements = element.getElementsByTagName("*");
                strategy$1.cleanData(childElements);
                if (cleanSelf) {
                    strategy$1.cleanData([element]);
                }
            }

            /**
             * DevExtreme (esm/core/utils/inflector.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var _normalize = function(text) {
                if (void 0 === text || null === text) {
                    return ""
                }
                return String(text)
            };
            var _upperCaseFirst = function(text) {
                return _normalize(text).charAt(0).toUpperCase() + text.substr(1)
            };
            var _chop = function(text) {
                return _normalize(text).replace(/([a-z\d])([A-Z])/g, "$1 $2").split(/[\s_-]+/)
            };
            var dasherize = exports("cO", function(text) {
                return map(_chop(text), (function(p) {
                    return p.toLowerCase()
                })).join("-")
            });
            var camelize = exports("aR", function(text, upperFirst) {
                return map(_chop(text), (function(p, i) {
                    p = p.toLowerCase();
                    if (upperFirst || i > 0) {
                        p = _upperCaseFirst(p);
                    }
                    return p
                })).join("")
            });
            var humanize = function(text) {
                return _upperCaseFirst(dasherize(text).replace(/-/g, " "))
            };
            var titleize = exports("bG", function(text) {
                return map(_chop(text), (function(p) {
                    return _upperCaseFirst(p.toLowerCase())
                })).join(" ")
            });
            var DIGIT_CHARS = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
            var captionize = exports("ez", function(name) {
                var captionList = [];
                var i;
                var char;
                var isPrevCharNewWord = false;
                var isNewWord = false;
                for (i = 0; i < name.length; i++) {
                    char = name.charAt(i);
                    isNewWord = char === char.toUpperCase() && "-" !== char && ")" !== char && "/" !== char || char in DIGIT_CHARS;
                    if ("_" === char || "." === char) {
                        char = " ";
                        isNewWord = true;
                    } else if (0 === i) {
                        char = char.toUpperCase();
                        isNewWord = true;
                    } else if (!isPrevCharNewWord && isNewWord) {
                        if (captionList.length > 0) {
                            captionList.push(" ");
                        }
                    }
                    captionList.push(char);
                    isPrevCharNewWord = isNewWord;
                }
                return captionList.join("")
            });

            /**
             * DevExtreme (esm/core/utils/style.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var jsPrefixes = ["", "Webkit", "Moz", "O", "Ms"];
            var cssPrefixes = {
                "": "",
                Webkit: "-webkit-",
                Moz: "-moz-",
                O: "-o-",
                ms: "-ms-"
            };
            var getStyles = callOnce((function() {
                return domAdapter.createElement("dx").style
            }));
            var forEachPrefixes = function(prop, callBack) {
                prop = camelize(prop, true);
                var result;
                for (var i = 0, cssPrefixesCount = jsPrefixes.length; i < cssPrefixesCount; i++) {
                    var jsPrefix = jsPrefixes[i];
                    var prefixedProp = jsPrefix + prop;
                    var lowerPrefixedProp = camelize(prefixedProp);
                    result = callBack(lowerPrefixedProp, jsPrefix);
                    if (void 0 === result) {
                        result = callBack(prefixedProp, jsPrefix);
                    }
                    if (void 0 !== result) {
                        break
                    }
                }
                return result || ""
            };
            var styleProp = exports("cN", function(name) {
                if (name in getStyles()) {
                    return name
                }
                var originalName = name;
                name = name.charAt(0).toUpperCase() + name.substr(1);
                for (var i = 1; i < jsPrefixes.length; i++) {
                    var prefixedProp = jsPrefixes[i].toLowerCase() + name;
                    if (prefixedProp in getStyles()) {
                        return prefixedProp
                    }
                }
                return originalName
            });
            var stylePropPrefix = exports("cM", function(prop) {
                return forEachPrefixes(prop, (function(specific, jsPrefix) {
                    if (specific in getStyles()) {
                        return cssPrefixes[jsPrefix]
                    }
                }))
            });
            var pxExceptions = ["fillOpacity", "columnCount", "flexGrow", "flexShrink", "fontWeight", "lineHeight", "opacity", "zIndex", "zoom"];
            var normalizeStyleProp = exports("aO", function(prop, value) {
                if (isNumeric(value) && -1 === pxExceptions.indexOf(prop)) {
                    value += "px";
                }
                return value
            });
            var setDimensionProperty = function(elements, propertyName, value) {
                if (elements) {
                    value = isNumeric(value) ? value += "px" : value;
                    for (var i = 0; i < elements.length; ++i) {
                        elements[i].style[propertyName] = value;
                    }
                }
            };
            var setWidth$1 = exports("g9", function(elements, value) {
                setDimensionProperty(elements, "width", value);
            });
            var setHeight$1 = exports("ga", function(elements, value) {
                setDimensionProperty(elements, "height", value);
            });
            var setStyle = exports("cP", function(element, styleString) {
                var resetStyle = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : true;
                if (resetStyle) {
                    var styleList = [].slice.call(element.style);
                    styleList.forEach(propertyName => {
                        element.style.removeProperty(propertyName);
                    });
                }
                styleString.split(";").forEach(style => {
                    var parts = style.split(":").map(stylePart => stylePart.trim());
                    if (2 === parts.length) {
                        var [property, value] = parts;
                        element.style[property] = value;
                    }
                });
            });

            /**
             * DevExtreme (esm/core/utils/size.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$e = getWindow();
            var SPECIAL_HEIGHT_VALUES = ["auto", "none", "inherit", "initial"];
            var getSizeByStyles = function(elementStyles, styles) {
                var result = 0;
                styles.forEach((function(style) {
                    result += parseFloat(elementStyles[style]) || 0;
                }));
                return result
            };
            var getElementBoxParams = exports("gF", function(name, elementStyles) {
                var beforeName = "width" === name ? "Left" : "Top";
                var afterName = "width" === name ? "Right" : "Bottom";
                return {
                    padding: getSizeByStyles(elementStyles, ["padding" + beforeName, "padding" + afterName]),
                    border: getSizeByStyles(elementStyles, ["border" + beforeName + "Width", "border" + afterName + "Width"]),
                    margin: getSizeByStyles(elementStyles, ["margin" + beforeName, "margin" + afterName])
                }
            });
            var getElementComputedStyle = function(element) {
                var _element$ownerDocumen;
                var view = (null === element || void 0 === element ? void 0 : null === (_element$ownerDocumen = element.ownerDocument) || void 0 === _element$ownerDocumen ? void 0 : _element$ownerDocumen.defaultView) || window$e;
                return view.getComputedStyle && view.getComputedStyle(element)
            };
            var getCSSProperty = function(element, styles, name, defaultValue) {
                var _element$style;
                return (null === styles || void 0 === styles ? void 0 : styles[name]) || (null === (_element$style = element.style) || void 0 === _element$style ? void 0 : _element$style[name]) || defaultValue
            };
            var boxIndices = {
                content: 0,
                padding: 1,
                border: 2,
                margin: 3,
                "content-box": 0,
                "border-box": 2
            };
            var dimensionComponents = {
                width: ["left", "right"],
                height: ["top", "bottom"]
            };

            function getComponentThickness(elem, dimension, component, styles) {
                var get = (elem, styles, field) => parseFloat(getCSSProperty(elem, styles, field, "0")) || 0;
                var suffix = "border" === component ? "-width" : "";
                return get(elem, styles, "".concat(component, "-").concat(dimensionComponents[dimension][0]).concat(suffix)) + get(elem, styles, "".concat(component, "-").concat(dimensionComponents[dimension][1]).concat(suffix))
            }
            var getSize = function(element, dimension, box) {
                var offsetFieldName = "width" === dimension ? "offsetWidth" : "offsetHeight";
                var styles = getElementComputedStyle(element);
                var result = getCSSProperty(element, styles, dimension);
                if ("" === result || "auto" === result) {
                    result = element[offsetFieldName];
                }
                result = parseFloat(result) || 0;
                var currentBox = getCSSProperty(element, styles, "boxSizing", "content-box");
                var targetBox = box || currentBox;
                var targetBoxIndex = boxIndices[targetBox];
                var currentBoxIndex = boxIndices[currentBox];
                if (void 0 === targetBoxIndex || void 0 === currentBoxIndex) {
                    throw new Error
                }
                if (currentBoxIndex === targetBoxIndex) {
                    return result
                }
                var coeff = Math.sign(targetBoxIndex - currentBoxIndex);
                var padding = false;
                var border = false;
                var margin = false;
                var scrollThickness = false;
                if (1 === coeff) {
                    targetBoxIndex += 1;
                    currentBoxIndex += 1;
                }
                for (var boxPart = currentBoxIndex; boxPart !== targetBoxIndex; boxPart += coeff) {
                    switch (boxPart) {
                        case boxIndices.content:
                            break;
                        case boxIndices.padding:
                            padding = coeff * getComponentThickness(element, dimension, "padding", styles);
                            break;
                        case boxIndices.border:
                            border = coeff * getComponentThickness(element, dimension, "border", styles);
                            break;
                        case boxIndices.margin:
                            margin = coeff * getComponentThickness(element, dimension, "margin", styles);
                    }
                }
                if (padding || border) {
                    var paddingAndBorder = (false === padding ? coeff * getComponentThickness(element, dimension, "padding", styles) : padding) + (false === border ? coeff * getComponentThickness(element, dimension, "border", styles) : border);
                    scrollThickness = coeff * Math.max(0, Math.floor(element[offsetFieldName] - result - coeff * paddingAndBorder)) || 0;
                }
                return result + margin + padding + border + scrollThickness
            };
            var getContainerHeight = function(container) {
                return isWindow(container) ? container.innerHeight : container.offsetHeight
            };
            var parseHeight = exports("gG", function(value, container, element) {
                if (value.indexOf("px") > 0) {
                    value = parseInt(value.replace("px", ""));
                } else if (value.indexOf("%") > 0) {
                    value = parseInt(value.replace("%", "")) * getContainerHeight(container) / 100;
                } else if (!isNaN(value)) {
                    value = parseInt(value);
                } else if (value.indexOf("vh") > 0) {
                    value = window$e.innerHeight / 100 * parseInt(value.replace("vh", ""));
                } else if (element && value.indexOf("em") > 0) {
                    value = parseFloat(value.replace("em", "")) * parseFloat(window$e.getComputedStyle(element).fontSize);
                }
                return value
            });
            var getHeightWithOffset = function(value, offset, container) {
                if (!value) {
                    return null
                }
                if (SPECIAL_HEIGHT_VALUES.indexOf(value) > -1) {
                    return offset ? null : value
                }
                if (isString(value)) {
                    value = parseHeight(value, container);
                }
                if (isNumeric(value)) {
                    return Math.max(0, value + offset)
                }
                var operationString = offset < 0 ? " - " : " ";
                return "calc(" + value + operationString + Math.abs(offset) + "px)"
            };
            var addOffsetToMaxHeight = exports("bm", function(value, offset, container) {
                var maxHeight = getHeightWithOffset(value, offset, container);
                return null !== maxHeight ? maxHeight : "none"
            });
            var addOffsetToMinHeight = exports("bn", function(value, offset, container) {
                var minHeight = getHeightWithOffset(value, offset, container);
                return null !== minHeight ? minHeight : 0
            });
            var getVerticalOffsets = exports("bp", function(element, withMargins) {
                if (!element) {
                    return 0
                }
                var boxParams = getElementBoxParams("height", window$e.getComputedStyle(element));
                return boxParams.padding + boxParams.border + (withMargins ? boxParams.margin : 0)
            });
            var getVisibleHeight = exports("bo", function(element) {
                if (element) {
                    var boundingClientRect = element.getBoundingClientRect();
                    if (boundingClientRect.height) {
                        return boundingClientRect.height
                    }
                }
                return 0
            });
            var implementationsMap = {
                getWidth: function() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    return elementSizeHelper("width", ...args)
                },
                setWidth: function() {
                    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }
                    return elementSizeHelper("width", ...args)
                },
                getHeight: function() {
                    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                        args[_key3] = arguments[_key3];
                    }
                    return elementSizeHelper("height", ...args)
                },
                setHeight: function() {
                    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                        args[_key4] = arguments[_key4];
                    }
                    return elementSizeHelper("height", ...args)
                },
                getOuterWidth: function() {
                    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
                        args[_key5] = arguments[_key5];
                    }
                    return elementSizeHelper("outerWidth", ...args)
                },
                setOuterWidth: function() {
                    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
                        args[_key6] = arguments[_key6];
                    }
                    return elementSizeHelper("outerWidth", ...args)
                },
                getOuterHeight: function() {
                    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
                        args[_key7] = arguments[_key7];
                    }
                    return elementSizeHelper("outerHeight", ...args)
                },
                setOuterHeight: function() {
                    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
                        args[_key8] = arguments[_key8];
                    }
                    return elementSizeHelper("outerHeight", ...args)
                },
                getInnerWidth: function() {
                    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {
                        args[_key9] = arguments[_key9];
                    }
                    return elementSizeHelper("innerWidth", ...args)
                },
                setInnerWidth: function() {
                    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {
                        args[_key10] = arguments[_key10];
                    }
                    return elementSizeHelper("innerWidth", ...args)
                },
                getInnerHeight: function() {
                    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {
                        args[_key11] = arguments[_key11];
                    }
                    return elementSizeHelper("innerHeight", ...args)
                },
                setInnerHeight: function() {
                    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {
                        args[_key12] = arguments[_key12];
                    }
                    return elementSizeHelper("innerHeight", ...args)
                }
            };

            function elementSizeHelper(sizeProperty, el, value) {
                return 2 === arguments.length ? elementSize(el, sizeProperty) : elementSize(el, sizeProperty, value)
            }
            var getWidth = exports("b2", el => implementationsMap.getWidth(el));
            var setWidth = exports("br", (el, value) => implementationsMap.setWidth(el, value));
            var getHeight = exports("ae", el => implementationsMap.getHeight(el));
            var setHeight = exports("ad", (el, value) => implementationsMap.setHeight(el, value));
            var getOuterWidth = exports("Q", (el, includeMargin) => implementationsMap.getOuterWidth(el, includeMargin || false));
            var setOuterWidth = exports("fo", (el, value) => implementationsMap.setOuterWidth(el, value));
            var getOuterHeight = exports("R", (el, includeMargin) => implementationsMap.getOuterHeight(el, includeMargin || false));
            var setOuterHeight = exports("gL", (el, value) => implementationsMap.setOuterHeight(el, value));
            var getInnerWidth = exports("b5", el => implementationsMap.getInnerWidth(el));
            var getInnerHeight = exports("b6", el => implementationsMap.getInnerHeight(el));
            var elementSize = function elementSize(el, sizeProperty, value) {
                var partialName = sizeProperty.toLowerCase().indexOf("width") >= 0 ? "Width" : "Height";
                var propName = partialName.toLowerCase();
                var isOuter = 0 === sizeProperty.indexOf("outer");
                var isInner = 0 === sizeProperty.indexOf("inner");
                var isGetter = 2 === arguments.length || "boolean" === typeof value;
                if (isRenderer(el)) {
                    if (el.length > 1 && !isGetter) {
                        for (var i = 0; i < el.length; i++) {
                            elementSize(el[i], sizeProperty, value);
                        }
                        return
                    }
                    el = el[0];
                }
                if (!el) {
                    return
                }
                if (isWindow(el)) {
                    return isOuter ? el["inner" + partialName] : domAdapter.getDocumentElement()["client" + partialName]
                }
                if (domAdapter.isDocument(el)) {
                    var documentElement = domAdapter.getDocumentElement();
                    var body = domAdapter.getBody();
                    return Math.max(body["scroll" + partialName], body["offset" + partialName], documentElement["scroll" + partialName], documentElement["offset" + partialName], documentElement["client" + partialName])
                }
                if (isGetter) {
                    var box = "content";
                    if (isOuter) {
                        box = value ? "margin" : "border";
                    }
                    if (isInner) {
                        box = "padding";
                    }
                    return getSize(el, propName, box)
                }
                if (isNumeric(value)) {
                    var elementStyles = getElementComputedStyle(el);
                    var sizeAdjustment = getElementBoxParams(propName, elementStyles);
                    var isBorderBox = "border-box" === elementStyles.boxSizing;
                    value = Number(value);
                    if (isOuter) {
                        value -= isBorderBox ? 0 : sizeAdjustment.border + sizeAdjustment.padding;
                    } else if (isInner) {
                        value += isBorderBox ? sizeAdjustment.border : -sizeAdjustment.padding;
                    } else if (isBorderBox) {
                        value += sizeAdjustment.border + sizeAdjustment.padding;
                    }
                }
                value += isNumeric(value) ? "px" : "";
                domAdapter.setStyle(el, propName, value);
                return null
            };
            var getWindowByElement = el => isWindow(el) ? el : el.defaultView;
            var getOffset = exports("aY", el => {
                if (!el.getClientRects().length) {
                    return {
                        top: 0,
                        left: 0
                    }
                }
                var rect = el.getBoundingClientRect();
                var win = getWindowByElement(el.ownerDocument);
                var docElem = el.ownerDocument.documentElement;
                return {
                    top: rect.top + win.pageYOffset - docElem.clientTop,
                    left: rect.left + win.pageXOffset - docElem.clientLeft
                }
            });

            /**
             * DevExtreme (esm/core/utils/html_parser.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var isTagName = /<([a-z][^/\0>\x20\t\r\n\f]+)/i;
            var tagWrappers = {
                default: {
                    tagsCount: 0,
                    startTags: "",
                    endTags: ""
                },
                thead: {
                    tagsCount: 1,
                    startTags: "<table>",
                    endTags: "</table>"
                },
                td: {
                    tagsCount: 3,
                    startTags: "<table><tbody><tr>",
                    endTags: "</tr></tbody></table>"
                },
                col: {
                    tagsCount: 2,
                    startTags: "<table><colgroup>",
                    endTags: "</colgroup></table>"
                },
                tr: {
                    tagsCount: 2,
                    startTags: "<table><tbody>",
                    endTags: "</tbody></table>"
                }
            };
            tagWrappers.tbody = tagWrappers.colgroup = tagWrappers.caption = tagWrappers.tfoot = tagWrappers.thead;
            tagWrappers.th = tagWrappers.td;
            var parseHTML = function(html) {
                if ("string" !== typeof html) {
                    return null
                }
                var fragment = domAdapter.createDocumentFragment();
                var container = fragment.appendChild(domAdapter.createElement("div"));
                var tags = isTagName.exec(html);
                var firstRootTag = tags && tags[1].toLowerCase();
                var tagWrapper = tagWrappers[firstRootTag] || tagWrappers.default;
                container.innerHTML = tagWrapper.startTags + html + tagWrapper.endTags;
                for (var i = 0; i < tagWrapper.tagsCount; i++) {
                    container = container.lastChild;
                }
                return [...container.childNodes]
            };
            var isTablePart = function(html) {
                var tags = isTagName.exec(html);
                return tags && tags[1] in tagWrappers
            };

            /**
             * DevExtreme (esm/core/renderer_base.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$d = getWindow();
            var renderer;
            var initRender = function(selector, context) {
                if (!selector) {
                    this.length = 0;
                    return this
                }
                if ("string" === typeof selector) {
                    if ("body" === selector) {
                        this[0] = context ? context.body : domAdapter.getBody();
                        this.length = 1;
                        return this
                    }
                    context = context || domAdapter.getDocument();
                    if ("<" === selector[0]) {
                        this[0] = domAdapter.createElement(selector.slice(1, -1), context);
                        this.length = 1;
                        return this
                    } [].push.apply(this, domAdapter.querySelectorAll(context, selector));
                    return this
                } else if (domAdapter.isNode(selector) || isWindow(selector)) {
                    this[0] = selector;
                    this.length = 1;
                    return this
                } else if (Array.isArray(selector)) {
                    [].push.apply(this, selector);
                    return this
                }
                return renderer(selector.toArray ? selector.toArray() : [selector])
            };
            renderer = function(selector, context) {
                return new initRender(selector, context)
            };
            renderer.fn = {
                dxRenderer: true
            };
            initRender.prototype = renderer.fn;
            var repeatMethod = function(methodName, args) {
                for (var i = 0; i < this.length; i++) {
                    var item = renderer(this[i]);
                    item[methodName].apply(item, args);
                }
                return this
            };
            var setAttributeValue = function(element, attrName, value) {
                if (void 0 !== value && null !== value && false !== value) {
                    domAdapter.setAttribute(element, attrName, value);
                } else {
                    domAdapter.removeAttribute(element, attrName);
                }
            };
            initRender.prototype.show = function() {
                return this.toggle(true)
            };
            initRender.prototype.hide = function() {
                return this.toggle(false)
            };
            initRender.prototype.toggle = function(value) {
                if (this[0]) {
                    this.toggleClass("dx-state-invisible", !value);
                }
                return this
            };
            initRender.prototype.attr = function(attrName, value) {
                if (this.length > 1 && arguments.length > 1) {
                    return repeatMethod.call(this, "attr", arguments)
                }
                if (!this[0]) {
                    if (isObject(attrName) || void 0 !== value) {
                        return this
                    } else {
                        return
                    }
                }
                if (!this[0].getAttribute) {
                    return this.prop(attrName, value)
                }
                if ("string" === typeof attrName && 1 === arguments.length) {
                    var result = this[0].getAttribute(attrName);
                    return null == result ? void 0 : result
                } else if (isPlainObject(attrName)) {
                    for (var key in attrName) {
                        this.attr(key, attrName[key]);
                    }
                } else {
                    setAttributeValue(this[0], attrName, value);
                }
                return this
            };
            initRender.prototype.removeAttr = function(attrName) {
                this[0] && domAdapter.removeAttribute(this[0], attrName);
                return this
            };
            initRender.prototype.prop = function(propName, value) {
                if (!this[0]) {
                    return this
                }
                if ("string" === typeof propName && 1 === arguments.length) {
                    return this[0][propName]
                } else if (isPlainObject(propName)) {
                    for (var key in propName) {
                        this.prop(key, propName[key]);
                    }
                } else {
                    domAdapter.setProperty(this[0], propName, value);
                }
                return this
            };
            initRender.prototype.addClass = function(className) {
                return this.toggleClass(className, true)
            };
            initRender.prototype.removeClass = function(className) {
                return this.toggleClass(className, false)
            };
            initRender.prototype.hasClass = function(className) {
                if (!this[0] || void 0 === this[0].className) {
                    return false
                }
                var classNames = className.split(" ");
                for (var i = 0; i < classNames.length; i++) {
                    if (this[0].classList) {
                        if (this[0].classList.contains(classNames[i])) {
                            return true
                        }
                    } else {
                        var _className = isString(this[0].className) ? this[0].className : domAdapter.getAttribute(this[0], "class");
                        if ((_className || "").split(" ").indexOf(classNames[i]) >= 0) {
                            return true
                        }
                    }
                }
                return false
            };
            initRender.prototype.toggleClass = function(className, value) {
                if (this.length > 1) {
                    return repeatMethod.call(this, "toggleClass", arguments)
                }
                if (!this[0] || !className) {
                    return this
                }
                value = void 0 === value ? !this.hasClass(className) : value;
                var classNames = className.split(" ");
                for (var i = 0; i < classNames.length; i++) {
                    domAdapter.setClass(this[0], classNames[i], value);
                }
                return this
            };
            initRender.prototype.html = function(value) {
                if (!arguments.length) {
                    return this[0].innerHTML
                }
                this.empty();
                if ("string" === typeof value && !isTablePart(value) || "number" === typeof value) {
                    this[0].innerHTML = value;
                    return this
                }
                return this.append(parseHTML(value))
            };
            var appendElements = function(element, nextSibling) {
                if (!this[0] || !element) {
                    return
                }
                if ("string" === typeof element) {
                    element = parseHTML(element);
                } else if (element.nodeType) {
                    element = [element];
                } else if (isNumeric(element)) {
                    element = [domAdapter.createTextNode(element)];
                }
                for (var i = 0; i < element.length; i++) {
                    var item = element[i];
                    var container = this[0];
                    var wrapTR = "TABLE" === container.tagName && "TR" === item.tagName;
                    if (wrapTR && container.tBodies && container.tBodies.length) {
                        container = container.tBodies[0];
                    }
                    domAdapter.insertElement(container, item.nodeType ? item : item[0], nextSibling);
                }
            };
            var setCss = function(name, value) {
                if (!this[0] || !this[0].style) {
                    return
                }
                if (null === value || "number" === typeof value && isNaN(value)) {
                    return
                }
                name = styleProp(name);
                for (var i = 0; i < this.length; i++) {
                    this[i].style[name] = normalizeStyleProp(name, value);
                }
            };
            initRender.prototype.css = function(name, value) {
                if (isString(name)) {
                    if (2 === arguments.length) {
                        setCss.call(this, name, value);
                    } else {
                        if (!this[0]) {
                            return
                        }
                        name = styleProp(name);
                        var result = window$d.getComputedStyle(this[0])[name] || this[0].style[name];
                        return isNumeric(result) ? result.toString() : result
                    }
                } else if (isPlainObject(name)) {
                    for (var key in name) {
                        setCss.call(this, key, name[key]);
                    }
                }
                return this
            };
            initRender.prototype.prepend = function(element) {
                if (arguments.length > 1) {
                    for (var i = 0; i < arguments.length; i++) {
                        this.prepend(arguments[i]);
                    }
                    return this
                }
                appendElements.apply(this, [element, this[0].firstChild]);
                return this
            };
            initRender.prototype.append = function(element) {
                if (arguments.length > 1) {
                    for (var i = 0; i < arguments.length; i++) {
                        this.append(arguments[i]);
                    }
                    return this
                }
                appendElements.apply(this, [element]);
                return this
            };
            initRender.prototype.prependTo = function(element) {
                if (this.length > 1) {
                    for (var i = this.length - 1; i >= 0; i--) {
                        renderer(this[i]).prependTo(element);
                    }
                    return this
                }
                element = renderer(element);
                if (element[0]) {
                    domAdapter.insertElement(element[0], this[0], element[0].firstChild);
                }
                return this
            };
            initRender.prototype.appendTo = function(element) {
                if (this.length > 1) {
                    return repeatMethod.call(this, "appendTo", arguments)
                }
                domAdapter.insertElement(renderer(element)[0], this[0]);
                return this
            };
            initRender.prototype.insertBefore = function(element) {
                if (element && element[0]) {
                    domAdapter.insertElement(element[0].parentNode, this[0], element[0]);
                }
                return this
            };
            initRender.prototype.insertAfter = function(element) {
                if (element && element[0]) {
                    domAdapter.insertElement(element[0].parentNode, this[0], element[0].nextSibling);
                }
                return this
            };
            initRender.prototype.before = function(element) {
                if (this[0]) {
                    domAdapter.insertElement(this[0].parentNode, element[0], this[0]);
                }
                return this
            };
            initRender.prototype.after = function(element) {
                if (this[0]) {
                    domAdapter.insertElement(this[0].parentNode, element[0], this[0].nextSibling);
                }
                return this
            };
            initRender.prototype.wrap = function(wrapper) {
                if (this[0]) {
                    var wrap = renderer(wrapper);
                    wrap.insertBefore(this);
                    wrap.append(this);
                }
                return this
            };
            initRender.prototype.wrapInner = function(wrapper) {
                var contents = this.contents();
                if (contents.length) {
                    contents.wrap(wrapper);
                } else {
                    this.append(wrapper);
                }
                return this
            };
            initRender.prototype.replaceWith = function(element) {
                if (!(element && element[0])) {
                    return
                }
                if (element.is(this)) {
                    return this
                }
                element.insertBefore(this);
                this.remove();
                return element
            };
            initRender.prototype.remove = function() {
                if (this.length > 1) {
                    return repeatMethod.call(this, "remove", arguments)
                }
                cleanDataRecursive(this[0], true);
                domAdapter.removeElement(this[0]);
                return this
            };
            initRender.prototype.detach = function() {
                if (this.length > 1) {
                    return repeatMethod.call(this, "detach", arguments)
                }
                domAdapter.removeElement(this[0]);
                return this
            };
            initRender.prototype.empty = function() {
                if (this.length > 1) {
                    return repeatMethod.call(this, "empty", arguments)
                }
                cleanDataRecursive(this[0]);
                domAdapter.setText(this[0], "");
                return this
            };
            initRender.prototype.clone = function() {
                var result = [];
                for (var i = 0; i < this.length; i++) {
                    result.push(this[i].cloneNode(true));
                }
                return renderer(result)
            };
            initRender.prototype.text = function(value) {
                if (!arguments.length) {
                    var result = "";
                    for (var i = 0; i < this.length; i++) {
                        result += this[i] && this[i].textContent || "";
                    }
                    return result
                }
                var text = isFunction(value) ? value() : value;
                cleanDataRecursive(this[0], false);
                domAdapter.setText(this[0], isDefined(text) ? text : "");
                return this
            };
            initRender.prototype.val = function(value) {
                if (1 === arguments.length) {
                    return this.prop("value", isDefined(value) ? value : "")
                }
                return this.prop("value")
            };
            initRender.prototype.contents = function() {
                if (!this[0]) {
                    return renderer()
                }
                var result = [];
                result.push.apply(result, this[0].childNodes);
                return renderer(result)
            };
            initRender.prototype.find = function(selector) {
                var result = renderer();
                if (!selector) {
                    return result
                }
                var nodes = [];
                var i;
                if ("string" === typeof selector) {
                    selector = selector.trim();
                    for (i = 0; i < this.length; i++) {
                        var element = this[i];
                        if (domAdapter.isElementNode(element)) {
                            var elementId = element.getAttribute("id");
                            var queryId = elementId || "dx-query-children";
                            if (!elementId) {
                                setAttributeValue(element, "id", queryId);
                            }
                            queryId = "[id='" + queryId + "'] ";
                            var querySelector = queryId + selector.replace(/([^\\])(,)/g, "$1, " + queryId);
                            nodes.push.apply(nodes, domAdapter.querySelectorAll(element, querySelector));
                            setAttributeValue(element, "id", elementId);
                        } else if (domAdapter.isDocument(element) || domAdapter.isDocumentFragment(element)) {
                            nodes.push.apply(nodes, domAdapter.querySelectorAll(element, selector));
                        }
                    }
                } else {
                    for (i = 0; i < this.length; i++) {
                        selector = domAdapter.isNode(selector) ? selector : selector[0];
                        if (this[i] !== selector && this[i].contains(selector)) {
                            nodes.push(selector);
                        }
                    }
                }
                return result.add(nodes)
            };
            var isVisible = function(_, element) {
                var _element$host;
                element = null !== (_element$host = element.host) && void 0 !== _element$host ? _element$host : element;
                if (!element.nodeType) {
                    return true
                }
                return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length)
            };
            initRender.prototype.filter = function(selector) {
                if (!selector) {
                    return renderer()
                }
                if (":visible" === selector) {
                    return this.filter(isVisible)
                } else if (":hidden" === selector) {
                    return this.filter((function(_, element) {
                        return !isVisible(_, element)
                    }))
                }
                var result = [];
                for (var i = 0; i < this.length; i++) {
                    var item = this[i];
                    if (domAdapter.isElementNode(item) && "string" === type(selector)) {
                        domAdapter.elementMatches(item, selector) && result.push(item);
                    } else if (domAdapter.isNode(selector) || isWindow(selector)) {
                        selector === item && result.push(item);
                    } else if (isFunction(selector)) {
                        selector.call(item, i, item) && result.push(item);
                    } else {
                        for (var j = 0; j < selector.length; j++) {
                            selector[j] === item && result.push(item);
                        }
                    }
                }
                return renderer(result)
            };
            initRender.prototype.not = function(selector) {
                var result = [];
                var nodes = this.filter(selector).toArray();
                for (var i = 0; i < this.length; i++) {
                    if (-1 === nodes.indexOf(this[i])) {
                        result.push(this[i]);
                    }
                }
                return renderer(result)
            };
            initRender.prototype.is = function(selector) {
                return !!this.filter(selector).length
            };
            initRender.prototype.children = function(selector) {
                var result = [];
                for (var i = 0; i < this.length; i++) {
                    var nodes = this[i] ? this[i].childNodes : [];
                    for (var j = 0; j < nodes.length; j++) {
                        if (domAdapter.isElementNode(nodes[j])) {
                            result.push(nodes[j]);
                        }
                    }
                }
                result = renderer(result);
                return selector ? result.filter(selector) : result
            };
            initRender.prototype.siblings = function() {
                var element = this[0];
                if (!element || !element.parentNode) {
                    return renderer()
                }
                var result = [];
                var parentChildNodes = element.parentNode.childNodes || [];
                for (var i = 0; i < parentChildNodes.length; i++) {
                    var node = parentChildNodes[i];
                    if (domAdapter.isElementNode(node) && node !== element) {
                        result.push(node);
                    }
                }
                return renderer(result)
            };
            initRender.prototype.each = function(callback) {
                for (var i = 0; i < this.length; i++) {
                    if (false === callback.call(this[i], i, this[i])) {
                        break
                    }
                }
            };
            initRender.prototype.index = function(element) {
                if (!element) {
                    return this.parent().children().index(this)
                }
                element = renderer(element);
                return this.toArray().indexOf(element[0])
            };
            initRender.prototype.get = function(index) {
                return this[index < 0 ? this.length + index : index]
            };
            initRender.prototype.eq = function(index) {
                index = index < 0 ? this.length + index : index;
                return renderer(this[index])
            };
            initRender.prototype.first = function() {
                return this.eq(0)
            };
            initRender.prototype.last = function() {
                return this.eq(-1)
            };
            initRender.prototype.select = function() {
                for (var i = 0; i < this.length; i += 1) {
                    this[i].select && this[i].select();
                }
                return this
            };
            initRender.prototype.parent = function(selector) {
                if (!this[0]) {
                    return renderer()
                }
                var result = renderer(this[0].parentNode);
                return !selector || result.is(selector) ? result : renderer()
            };
            initRender.prototype.parents = function(selector) {
                var result = [];
                var parent = this.parent();
                while (parent && parent[0] && !domAdapter.isDocument(parent[0])) {
                    if (domAdapter.isElementNode(parent[0])) {
                        if (!selector || parent.is(selector)) {
                            result.push(parent.get(0));
                        }
                    }
                    parent = parent.parent();
                }
                return renderer(result)
            };
            initRender.prototype.closest = function(selector) {
                if (this.is(selector)) {
                    return this
                }
                var parent = this.parent();
                while (parent && parent.length) {
                    if (parent.is(selector)) {
                        return parent
                    }
                    parent = parent.parent();
                }
                return renderer()
            };
            initRender.prototype.next = function(selector) {
                if (!this[0]) {
                    return renderer()
                }
                var next = renderer(this[0].nextSibling);
                if (!arguments.length) {
                    return next
                }
                while (next && next.length) {
                    if (next.is(selector)) {
                        return next
                    }
                    next = next.next();
                }
                return renderer()
            };
            initRender.prototype.prev = function() {
                if (!this[0]) {
                    return renderer()
                }
                return renderer(this[0].previousSibling)
            };
            initRender.prototype.add = function(selector) {
                var targets = renderer(selector);
                var result = this.toArray();
                for (var i = 0; i < targets.length; i++) {
                    var target = targets[i];
                    if (-1 === result.indexOf(target)) {
                        result.push(target);
                    }
                }
                return renderer(result)
            };
            var emptyArray = [];
            initRender.prototype.splice = function() {
                return renderer(emptyArray.splice.apply(this, arguments))
            };
            initRender.prototype.slice = function() {
                return renderer(emptyArray.slice.apply(this, arguments))
            };
            initRender.prototype.toArray = function() {
                return emptyArray.slice.call(this)
            };
            initRender.prototype.offset = function() {
                if (!this[0]) {
                    return
                }
                return getOffset(this[0])
            };
            initRender.prototype.offsetParent = function() {
                if (!this[0]) {
                    return renderer()
                }
                var offsetParent = renderer(this[0].offsetParent);
                while (offsetParent[0] && "static" === offsetParent.css("position")) {
                    offsetParent = renderer(offsetParent[0].offsetParent);
                }
                offsetParent = offsetParent[0] ? offsetParent : renderer(domAdapter.getDocumentElement());
                return offsetParent
            };
            initRender.prototype.position = function() {
                if (!this[0]) {
                    return
                }
                var offset;
                var marginTop = parseFloat(this.css("marginTop"));
                var marginLeft = parseFloat(this.css("marginLeft"));
                if ("fixed" === this.css("position")) {
                    offset = this[0].getBoundingClientRect();
                    return {
                        top: offset.top - marginTop,
                        left: offset.left - marginLeft
                    }
                }
                offset = this.offset();
                var offsetParent = this.offsetParent();
                var parentOffset = {
                    top: 0,
                    left: 0
                };
                if ("HTML" !== offsetParent[0].nodeName) {
                    parentOffset = offsetParent.offset();
                }
                parentOffset = {
                    top: parentOffset.top + parseFloat(offsetParent.css("borderTopWidth")),
                    left: parentOffset.left + parseFloat(offsetParent.css("borderLeftWidth"))
                };
                return {
                    top: offset.top - parentOffset.top - marginTop,
                    left: offset.left - parentOffset.left - marginLeft
                }
            };
            [{
                name: "scrollLeft",
                offsetProp: "pageXOffset",
                scrollWindow: function(win, value) {
                    win.scrollTo(value, win.pageYOffset);
                }
            }, {
                name: "scrollTop",
                offsetProp: "pageYOffset",
                scrollWindow: function(win, value) {
                    win.scrollTo(win.pageXOffset, value);
                }
            }].forEach((function(directionStrategy) {
                var propName = directionStrategy.name;
                initRender.prototype[propName] = function(value) {
                    if (!this[0]) {
                        return
                    }
                    var window = getWindowByElement(this[0]);
                    if (void 0 === value) {
                        return window ? window[directionStrategy.offsetProp] : this[0][propName]
                    }
                    if (window) {
                        directionStrategy.scrollWindow(window, value);
                    } else {
                        this[0][propName] = value;
                    }
                    return this
                };
            }));
            initRender.prototype.data = function(key, value) {
                if (!this[0]) {
                    return
                }
                if (arguments.length < 2) {
                    return data.call(renderer, this[0], key)
                }
                data.call(renderer, this[0], key, value);
                return this
            };
            initRender.prototype.removeData = function(key) {
                this[0] && removeData(this[0], key);
                return this
            };
            var rendererWrapper = function() {
                return renderer.apply(this, arguments)
            };
            Object.defineProperty(rendererWrapper, "fn", {
                enumerable: true,
                configurable: true,
                get: function() {
                    return renderer.fn
                },
                set: function(value) {
                    renderer.fn = value;
                }
            });
            var rendererBase = {
                set: function(strategy) {
                    renderer = strategy;
                },
                get: function() {
                    return rendererWrapper
                }
            };

            /**
             * DevExtreme (esm/core/renderer.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var $ = exports("$", rendererBase.get());

            /**
             * DevExtreme (esm/core/http_request.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$c = getWindow();
            var nativeXMLHttpRequest = {
                getXhr: function() {
                    return new window$c.XMLHttpRequest
                }
            };
            var httpRequest = dependencyInjector(nativeXMLHttpRequest);

            /**
             * DevExtreme (esm/core/utils/ready_callbacks.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var callbacks$2 = [];
            var subscribeReady = callOnce(() => {
                var removeListener = domAdapter.listen(domAdapter.getDocument(), "DOMContentLoaded", () => {
                    readyCallbacks.fire();
                    removeListener();
                });
            });
            var readyCallbacks = {
                add: callback => {
                    var windowExists = hasWindow();
                    if (windowExists && "loading" !== domAdapter.getReadyState()) {
                        callback();
                    } else {
                        callbacks$2.push(callback);
                        windowExists && subscribeReady();
                    }
                },
                fire: () => {
                    callbacks$2.forEach(callback => callback());
                    callbacks$2 = [];
                }
            };
            var readyCallbacks$1 = exports("bF", dependencyInjector(readyCallbacks));

            /**
             * DevExtreme (esm/core/utils/ajax_utils.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$b = getWindow();
            var createScript = function(options) {
                var script = domAdapter.createElement("script");
                for (var name in options) {
                    script[name] = options[name];
                }
                return script
            };
            var appendToHead = function(element) {
                return domAdapter.getHead().appendChild(element)
            };
            var removeScript = function(scriptNode) {
                scriptNode.parentNode.removeChild(scriptNode);
            };
            var evalScript = function(code) {
                var script = createScript({
                    text: code
                });
                appendToHead(script);
                removeScript(script);
            };
            var evalCrossDomainScript = function(url) {
                var script = createScript({
                    src: url
                });
                return new Promise((function(resolve, reject) {
                    var events = {
                        load: resolve,
                        error: reject
                    };
                    var loadHandler = function(e) {
                        events[e.type]();
                        removeScript(script);
                    };
                    for (var event in events) {
                        domAdapter.listen(script, event, loadHandler);
                    }
                    appendToHead(script);
                }))
            };

            function getMethod(options) {
                return (options.method || "GET").toUpperCase()
            }
            var paramsConvert = function(params) {
                var result = [];
                for (var name in params) {
                    var value = params[name];
                    if (void 0 === value) {
                        continue
                    }
                    if (null === value) {
                        value = "";
                    }
                    if ("function" === typeof value) {
                        value = value();
                    }
                    result.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
                }
                return result.join("&")
            };
            var getContentTypeHeader = function(options) {
                var defaultContentType;
                if (options.data && !options.upload && "GET" !== getMethod(options)) {
                    defaultContentType = "application/x-www-form-urlencoded;charset=utf-8";
                }
                return options.contentType || defaultContentType
            };
            var getAcceptHeader = function(options) {
                var dataType = options.dataType || "*";
                var scriptAccept = "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript";
                var accepts = {
                    "*": "*/*",
                    text: "text/plain",
                    html: "text/html",
                    xml: "application/xml, text/xml",
                    json: "application/json, text/javascript",
                    jsonp: scriptAccept,
                    script: scriptAccept
                };
                extendFromObject(accepts, options.accepts, true);
                return accepts[dataType] ? accepts[dataType] + ("*" !== dataType ? ", */*; q=0.01" : "") : accepts["*"]
            };
            var getRequestHeaders = function(options) {
                var headers = options.headers || {};
                headers["Content-Type"] = headers["Content-Type"] || getContentTypeHeader(options);
                headers.Accept = headers.Accept || getAcceptHeader(options);
                if (!options.crossDomain && !headers["X-Requested-With"]) {
                    headers["X-Requested-With"] = "XMLHttpRequest";
                }
                return headers
            };
            var getJsonpOptions = function(options) {
                if ("jsonp" === options.dataType) {
                    var random = Math.random().toString().replace(/\D/g, "");
                    var callbackName = options.jsonpCallback || "dxCallback" + Date.now() + "_" + random;
                    var callbackParameter = options.jsonp || "callback";
                    options.data = options.data || {};
                    options.data[callbackParameter] = callbackName;
                    return callbackName
                }
            };
            var getRequestOptions = function(options, headers) {
                var params = options.data;
                var paramsAlreadyString = "string" === typeof params;
                var url = options.url || window$b.location.href;
                if (!paramsAlreadyString && !options.cache) {
                    params = params || {};
                    params._ = Date.now();
                }
                if (params && !options.upload) {
                    if (!paramsAlreadyString) {
                        params = paramsConvert(params);
                    }
                    if ("GET" === getMethod(options)) {
                        if ("" !== params) {
                            url += (url.indexOf("?") > -1 ? "&" : "?") + params;
                        }
                        params = null;
                    } else if (headers["Content-Type"] && headers["Content-Type"].indexOf("application/x-www-form-urlencoded") > -1) {
                        params = params.replace(/%20/g, "+");
                    }
                }
                return {
                    url: url,
                    parameters: params
                }
            };
            var isCrossDomain = function(url) {
                if (!hasWindow()) {
                    return true
                }
                var crossDomain = false;
                var originAnchor = domAdapter.createElement("a");
                var urlAnchor = domAdapter.createElement("a");
                originAnchor.href = window$b.location.href;
                try {
                    urlAnchor.href = url;
                    urlAnchor.href = urlAnchor.href;
                    crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
                } catch (e) {
                    crossDomain = true;
                }
                return crossDomain
            };

            /**
             * DevExtreme (esm/core/utils/ajax.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$a = getWindow();
            var SUCCESS = "success";
            var ERROR = "error";
            var TIMEOUT = "timeout";
            var NO_CONTENT = "nocontent";
            var PARSER_ERROR = "parsererror";
            var isStatusSuccess = function(status) {
                return 200 <= status && status < 300
            };
            var hasContent = function(status) {
                return 204 !== status
            };
            var getDataFromResponse = function(xhr) {
                return xhr.responseType && "text" !== xhr.responseType || "string" !== typeof xhr.responseText ? xhr.response : xhr.responseText
            };
            var postProcess = function(deferred, xhr, dataType) {
                var data = getDataFromResponse(xhr);
                switch (dataType) {
                    case "jsonp":
                        evalScript(data);
                        break;
                    case "script":
                        evalScript(data);
                        deferred.resolve(data, SUCCESS, xhr);
                        break;
                    case "json":
                        try {
                            deferred.resolve(JSON.parse(data), SUCCESS, xhr);
                        } catch (e) {
                            deferred.reject(xhr, PARSER_ERROR, e);
                        }
                        break;
                    default:
                        deferred.resolve(data, SUCCESS, xhr);
                }
            };
            var setHttpTimeout = function(timeout, xhr) {
                return timeout && setTimeout((function() {
                    xhr.customStatus = TIMEOUT;
                    xhr.abort();
                }), timeout)
            };
            var sendRequest = function(options) {
                var xhr = httpRequest.getXhr();
                var d = new Deferred;
                var result = d.promise();
                var async = isDefined(options.async) ? options.async : true;
                var dataType = options.dataType;
                var timeout = options.timeout || 0;
                var timeoutId;
                options.crossDomain = isCrossDomain(options.url);
                var needScriptEvaluation = "jsonp" === dataType || "script" === dataType;
                if (void 0 === options.cache) {
                    options.cache = !needScriptEvaluation;
                }
                var callbackName = getJsonpOptions(options);
                var headers = getRequestHeaders(options);
                var requestOptions = getRequestOptions(options, headers);
                var url = requestOptions.url;
                var parameters = requestOptions.parameters;
                if (callbackName) {
                    window$a[callbackName] = function(data) {
                        d.resolve(data, SUCCESS, xhr);
                    };
                }
                if (options.crossDomain && needScriptEvaluation) {
                    evalCrossDomainScript(url).then((function() {
                        if ("jsonp" === dataType) {
                            return
                        }
                        d.resolve(null, SUCCESS, xhr);
                    }), (function() {
                        d.reject(xhr, ERROR);
                    }));
                    return result
                }
                if (options.crossDomain && !("withCredentials" in xhr)) {
                    d.reject(xhr, ERROR);
                    return result
                }
                xhr.open(getMethod(options), url, async, options.username, options.password);
                if (async) {
                    xhr.timeout = timeout;
                    timeoutId = setHttpTimeout(timeout, xhr);
                }
                xhr.onreadystatechange = function(e) {
                    if (4 === xhr.readyState) {
                        clearTimeout(timeoutId);
                        if (isStatusSuccess(xhr.status)) {
                            if (hasContent(xhr.status)) {
                                postProcess(d, xhr, dataType);
                            } else {
                                d.resolve(null, NO_CONTENT, xhr);
                            }
                        } else {
                            d.reject(xhr, xhr.customStatus || ERROR);
                        }
                    }
                };
                if (options.upload) {
                    xhr.upload.onprogress = options.upload.onprogress;
                    xhr.upload.onloadstart = options.upload.onloadstart;
                    xhr.upload.onabort = options.upload.onabort;
                }
                if (options.xhrFields) {
                    for (var field in options.xhrFields) {
                        xhr[field] = options.xhrFields[field];
                    }
                }
                if ("arraybuffer" === options.responseType) {
                    xhr.responseType = options.responseType;
                }
                for (var name in headers) {
                    if (Object.prototype.hasOwnProperty.call(headers, name) && isDefined(headers[name])) {
                        xhr.setRequestHeader(name, headers[name]);
                    }
                }
                if (options.beforeSend) {
                    options.beforeSend(xhr);
                }
                xhr.send(parameters);
                result.abort = function() {
                    xhr.abort();
                };
                return result
            };
            var ajax = exports("ch", dependencyInjector({
                sendRequest: sendRequest
            }));

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            class DxTemplateHost {
                host;
                setHost(host) {
                    this.host = host;
                }
                setTemplate(template) {
                    this.host.setTemplate(template);
                }
            } exports("ah", DxTemplateHost);

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            class NgEventsStrategy {
                instance;
                zone;
                subscriptions = {};
                events = {};
                constructor(instance, zone) {
                    this.instance = instance;
                    this.zone = zone;
                }
                hasEvent(name) {
                    return this.getEmitter(name).observers.length !== 0;
                }
                fireEvent(name, args) {
                    const emitter = this.getEmitter(name);
                    if (emitter.observers.length) {
                        const internalSubs = this.subscriptions[name] || [];
                        if (internalSubs.length === emitter.observers.length) {
                            emitter.next(args && args[0]);
                        }
                        else {
                            this.zone.run(() => emitter.next(args && args[0]));
                        }
                    }
                }
                on(name, handler) {
                    if (typeof name === 'string') {
                        const eventSubscriptions = this.subscriptions[name] || [];
                        const subcription = this.getEmitter(name).subscribe(handler?.bind(this.instance));
                        const unsubscribe = subcription.unsubscribe.bind(subcription);
                        eventSubscriptions.push({ handler, unsubscribe });
                        this.subscriptions[name] = eventSubscriptions;
                    }
                    else {
                        const handlersObj = name;
                        Object.keys(handlersObj).forEach((event) => this.on(event, handlersObj[event]));
                    }
                }
                off(name, handler) {
                    const eventSubscriptions = this.subscriptions[name] || [];
                    if (handler) {
                        eventSubscriptions.some((subscription, i) => {
                            if (subscription.handler === handler) {
                                subscription.unsubscribe();
                                eventSubscriptions.splice(i, 1);
                                return true;
                            }
                            return false;
                        });
                    }
                    else {
                        eventSubscriptions.forEach((subscription) => {
                            subscription.unsubscribe();
                        });
                        eventSubscriptions.splice(0, eventSubscriptions.length);
                    }
                }
                dispose() { }
                addEmitter(eventName, emitter) {
                    this.events[eventName] = emitter;
                }
                getEmitter(eventName) {
                    if (!this.events[eventName]) {
                        this.events[eventName] = new EventEmitter();
                    }
                    return this.events[eventName];
                }
            } exports("ht", NgEventsStrategy);
            class EmitterHelper {
                zone;
                component;
                lockedValueChangeEvent = false;
                constructor(zone, component) {
                    this.zone = zone;
                    this.component = component;
                }
                fireNgEvent(eventName, eventArgs) {
                    if (this.lockedValueChangeEvent && eventName === 'valueChange') {
                        return;
                    }
                    const emitter = this.component[eventName];
                    if (emitter && emitter.observers.length) {
                        this.zone.run(() => {
                            emitter.next(eventArgs && eventArgs[0]);
                        });
                    }
                }
                createEmitters(events) {
                    events.forEach((event) => {
                        this.component[event.emit] = new EventEmitter();
                    });
                }
            } exports("hr", EmitterHelper);

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            class WatcherHelper {
                _watchers = [];
                getWatchMethod() {
                    const watchMethod = (valueGetter, valueChangeCallback, options) => {
                        let oldValue = valueGetter();
                        options = options || {};
                        if (!options.skipImmediate) {
                            valueChangeCallback(oldValue);
                        }
                        const watcher = () => {
                            const newValue = valueGetter();
                            if (this._isDifferentValues(oldValue, newValue, options.deep)) {
                                valueChangeCallback(newValue);
                                oldValue = newValue;
                            }
                        };
                        this._watchers.push(watcher);
                        return () => {
                            const index = this._watchers.indexOf(watcher);
                            if (index !== -1) {
                                this._watchers.splice(index, 1);
                            }
                        };
                    };
                    return watchMethod;
                }
                _isDifferentValues(oldValue, newValue, deepCheck) {
                    const comparableNewValue = this._toComparable(newValue);
                    const comparableOldValue = this._toComparable(oldValue);
                    const isObjectValues = comparableNewValue instanceof Object && comparableOldValue instanceof Object;
                    if (deepCheck && isObjectValues) {
                        return this._checkObjectsFields(newValue, oldValue);
                    }
                    return comparableNewValue !== comparableOldValue;
                }
                _toComparable(value) {
                    if (value instanceof Date) {
                        return value.getTime();
                    }
                    return value;
                }
                _checkObjectsFields(checkingFromObject, checkingToObject) {
                    for (const field in checkingFromObject) {
                        const oldValue = this._toComparable(checkingFromObject[field]);
                        const newValue = this._toComparable(checkingToObject[field]);
                        let isEqualObjects = false;
                        if (typeof oldValue === 'object' && typeof newValue === 'object') {
                            isEqualObjects = equalByValue(oldValue, newValue);
                        }
                        if (oldValue !== newValue && !isEqualObjects) {
                            return true;
                        }
                    }
                }
                checkWatchers() {
                    for (const watcher of this._watchers) {
                        watcher();
                    }
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: WatcherHelper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
                /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: WatcherHelper });
            } exports("ai", WatcherHelper);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: WatcherHelper, decorators: [{
                        type: Injectable
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            function getElement(element) {
                return element.get ? element.get(0) : element;
            }

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:use-input-property-decorator */
            const DX_TEMPLATE_WRAPPER_CLASS = exports("ho", 'dx-template-wrapper');
            class RenderData {
                model;
                index;
                container;
            } exports("hu", RenderData);
            class DxTemplateDirective {
                templateRef;
                viewContainerRef;
                renderer;
                zone;
                set dxTemplateOf(value) {
                    this.name = value;
                }
                name;
                constructor(templateRef, viewContainerRef, templateHost, renderer, zone) {
                    this.templateRef = templateRef;
                    this.viewContainerRef = viewContainerRef;
                    this.renderer = renderer;
                    this.zone = zone;
                    templateHost.setTemplate(this);
                }
                renderTemplate(renderData) {
                    const childView = this.viewContainerRef.createEmbeddedView(this.templateRef, {
                        $implicit: renderData.model,
                        index: renderData.index,
                    });
                    const container = getElement(renderData.container);
                    if (renderData.container) {
                        childView.rootNodes.forEach((element) => {
                            this.renderer.appendChild(container, element);
                        });
                    }
                    return childView;
                }
                render(renderData) {
                    let childView;
                    if (this.zone.isStable) {
                        childView = this.zone.run(() => this.renderTemplate(renderData));
                    }
                    else {
                        childView = this.renderTemplate(renderData);
                    }
                    // =========== WORKAROUND =============
                    // https://github.com/angular/angular/issues/12243
                    childView.detectChanges();
                    // =========== /WORKAROUND =============
                    childView.rootNodes.forEach((element) => {
                        if (element.nodeType === 1) {
                            domAdapter.setClass(element, DX_TEMPLATE_WRAPPER_CLASS, true);
                        }
                        one(element, 'dxremove', ({}, params) => {
                            if (!params || !params._angularIntegration) {
                                childView.destroy();
                            }
                        });
                    });
                    return childView.rootNodes;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: DxTemplateHost }, { token: i0.Renderer2 }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
                /** @nocollapse */ static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.0", type: DxTemplateDirective, selector: "[dxTemplate]", inputs: { dxTemplateOf: "dxTemplateOf" }, ngImport: i0 });
            } exports("hq", DxTemplateDirective);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateDirective, decorators: [{
                        type: Directive,
                        args: [{
                                selector: '[dxTemplate]',
                            }]
                    }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: DxTemplateHost }, { type: i0.Renderer2 }, { type: i0.NgZone }], propDecorators: { dxTemplateOf: [{
                            type: Input
                        }] } });
            class DxTemplateModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateModule, declarations: [DxTemplateDirective], exports: [DxTemplateDirective] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateModule });
            } exports("ao", DxTemplateModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxTemplateModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [DxTemplateDirective],
                                exports: [DxTemplateDirective],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            const VISIBILITY_CHANGE_SELECTOR = 'dx-visibility-change-handler';
            class BaseNestedOption {
                _host;
                _hostOptionPath;
                _collectionContainerImpl;
                _initialOptions = {};
                constructor() {
                    this._collectionContainerImpl = new CollectionNestedOptionContainerImpl(this._setOption.bind(this), this._filterItems.bind(this));
                }
                _optionChangedHandler(e) {
                    const fullOptionPath = this._fullOptionPath();
                    if (e.fullName.indexOf(fullOptionPath) === 0) {
                        const optionName = e.fullName.slice(fullOptionPath.length);
                        const emitter = this[`${optionName}Change`];
                        if (emitter) {
                            emitter.next(e.value);
                        }
                    }
                }
                _createEventEmitters(events) {
                    events.forEach((event) => {
                        this[event.emit] = new EventEmitter();
                    });
                }
                _getOption(name) {
                    if (this.isLinked) {
                        return this.instance.option(this._fullOptionPath() + name);
                    }
                    return this._initialOptions[name];
                }
                _setOption(name, value) {
                    if (this.isLinked) {
                        const fullPath = this._fullOptionPath() + name;
                        this.instance.option(fullPath, value);
                    }
                    else {
                        this._initialOptions[name] = value;
                    }
                }
                _addRemovedOption(name) {
                    if (this.instance && this.removedNestedComponents) {
                        this.removedNestedComponents.push(name);
                    }
                }
                _deleteRemovedOptions(name) {
                    if (this.instance && this.removedNestedComponents) {
                        this.removedNestedComponents = this.removedNestedComponents.filter((x) => !x.startsWith(name));
                    }
                }
                _addRecreatedComponent() {
                    if (this.instance && this.recreatedNestedComponents) {
                        this.recreatedNestedComponents.push({ getOptionPath: () => this._getOptionPath() });
                    }
                }
                _getOptionPath() {
                    return this._hostOptionPath() + this._optionPath;
                }
                setHost(host, optionPath) {
                    this._host = host;
                    this._hostOptionPath = optionPath;
                    this.optionChangedHandlers.subscribe(this._optionChangedHandler.bind(this));
                }
                setChildren(propertyName, items) {
                    this.resetOptions(propertyName);
                    return this._collectionContainerImpl.setChildren(propertyName, items);
                }
                _filterItems(items) {
                    return items.filter((item) => item !== this);
                }
                get instance() {
                    return this._host && this._host.instance;
                }
                get resetOptions() {
                    return this._host && this._host.resetOptions;
                }
                get isRecreated() {
                    return this._host && this._host.isRecreated;
                }
                get removedNestedComponents() {
                    return this._host && this._host.removedNestedComponents;
                }
                set removedNestedComponents(value) {
                    this._host.removedNestedComponents = value;
                }
                get recreatedNestedComponents() {
                    return this._host && this._host.recreatedNestedComponents;
                }
                set recreatedNestedComponents(value) {
                    this._host.recreatedNestedComponents = value;
                }
                get isLinked() {
                    return !!this.instance && this._host.isLinked;
                }
                get optionChangedHandlers() {
                    return this._host && this._host.optionChangedHandlers;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: BaseNestedOption, deps: [], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: BaseNestedOption, selector: "ng-component", ngImport: i0, template: '', isInline: true });
            } exports("hl", BaseNestedOption);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: BaseNestedOption, decorators: [{
                        type: Component$1,
                        args: [{
                                template: '',
                            }]
                    }], ctorParameters: () => [] });
            class CollectionNestedOptionContainerImpl {
                _setOption;
                _filterItems;
                _activatedQueries = {};
                constructor(_setOption, _filterItems) {
                    this._setOption = _setOption;
                    this._filterItems = _filterItems;
                }
                setChildren(propertyName, items) {
                    if (this._filterItems) {
                        items = this._filterItems(items);
                    }
                    if (items.length) {
                        this._activatedQueries[propertyName] = true;
                    }
                    if (this._activatedQueries[propertyName]) {
                        const widgetItems = items.map((item, index) => {
                            item._index = index;
                            return item._value;
                        });
                        this._setOption(propertyName, widgetItems);
                    }
                }
            } exports("hn", CollectionNestedOptionContainerImpl);
            class NestedOption extends BaseNestedOption {
                setHost(host, optionPath) {
                    super.setHost(host, optionPath);
                    this._host[this._optionPath] = this._initialOptions;
                }
                _fullOptionPath() {
                    return `${this._getOptionPath()}.`;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: NestedOption, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: NestedOption, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            } exports("hs", NestedOption);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: NestedOption, decorators: [{
                        type: Component$1,
                        args: [{
                                template: '',
                            }]
                    }] });
            class CollectionNestedOption extends BaseNestedOption {
                _index;
                _fullOptionPath() {
                    return `${this._getOptionPath()}[${this._index}].`;
                }
                get _value() {
                    return this._initialOptions;
                }
                get isLinked() {
                    return this._index !== undefined && !!this.instance && this._host.isLinked;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CollectionNestedOption, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: CollectionNestedOption, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            } exports("hm", CollectionNestedOption);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: CollectionNestedOption, decorators: [{
                        type: Component$1,
                        args: [{
                                template: '',
                            }]
                    }] });
            const triggerShownEvent$1 = function (element) {
                const changeHandlers = [];
                if (!$(element).hasClass(VISIBILITY_CHANGE_SELECTOR)) {
                    changeHandlers.push(element);
                }
                changeHandlers.push.apply(changeHandlers, element.querySelectorAll(`.${VISIBILITY_CHANGE_SELECTOR}`));
                for (let i = 0; i < changeHandlers.length; i++) {
                    triggerHandler(changeHandlers[i], 'dxshown');
                }
            };
            function extractTemplate(option, element, renderer, document) {
                if (!option.template === undefined || !element.nativeElement.hasChildNodes()) {
                    return;
                }
                const childNodes = [].slice.call(element.nativeElement.childNodes);
                const userContent = childNodes.filter((n) => {
                    if (n.tagName) {
                        const tagNamePrefix = n.tagName.toLowerCase().substr(0, 3);
                        return !(tagNamePrefix === 'dxi' || tagNamePrefix === 'dxo');
                    }
                    return n.nodeName !== '#comment' && n.textContent.replace(/\s/g, '').length;
                });
                if (!userContent.length) {
                    return;
                }
                option.template = {
                    render: (renderData) => {
                        const result = element.nativeElement;
                        domAdapter.setClass(result, DX_TEMPLATE_WRAPPER_CLASS, true);
                        if (renderData.container) {
                            const container = getElement(renderData.container);
                            const resultInContainer = container.contains(element.nativeElement);
                            renderer.appendChild(container, element.nativeElement);
                            if (!resultInContainer) {
                                const resultInBody = document.body.contains(container);
                                if (resultInBody) {
                                    triggerShownEvent$1(result);
                                }
                            }
                        }
                        return result;
                    },
                };
            }
            class NestedOptionHost {
                _host;
                _optionPath;
                getHost() {
                    return this._host;
                }
                setHost(host, optionPath) {
                    this._host = host;
                    this._optionPath = optionPath || (() => '');
                }
                setNestedOption(nestedOption) {
                    nestedOption.setHost(this._host, this._optionPath);
                }
            } exports("ak", NestedOptionHost);

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            let serverStateKey;
            const getServerStateKey = exports("hx", () => {
                if (!serverStateKey) {
                    serverStateKey = makeStateKey('DX_isPlatformServer');
                }
                return serverStateKey;
            });
            class DxComponent {
                element;
                ngZone;
                watcherHelper;
                transferState;
                platformId;
                _initialOptions = {};
                _optionsToUpdate = {};
                _collectionContainerImpl;
                eventHelper;
                optionChangedHandlers = new EventEmitter();
                templates;
                instance;
                isLinked = true;
                changedOptions = {};
                removedNestedComponents = [];
                recreatedNestedComponents;
                widgetUpdateLocked = false;
                templateUpdateRequired = false;
                _updateTemplates() {
                    if (this.templates.length && this.templateUpdateRequired) {
                        const updatedTemplates = {};
                        this.templates.forEach((template) => {
                            updatedTemplates[template.name] = template;
                        });
                        this.instance.option('integrationOptions.templates', updatedTemplates);
                        this.templates = Object.values(updatedTemplates);
                        this.templateUpdateRequired = false;
                    }
                }
                _initEvents() {
                    this.instance.on('optionChanged', (e) => {
                        this.changedOptions[e.name] = e.value;
                        const value = e.name === e.fullName ? e.value : e.component.option(e.name);
                        this.eventHelper.fireNgEvent(`${e.name}Change`, [value]);
                        this.optionChangedHandlers.emit(e);
                    });
                }
                _initOptions() {
                    this._initialOptions.integrationOptions.watchMethod = this.watcherHelper.getWatchMethod();
                }
                _initPlatform() {
                    if (this.transferState.hasKey(getServerStateKey())) {
                        this._initialOptions.integrationOptions.renderedOnServer = this.transferState.get(getServerStateKey(), null);
                    }
                    else if (isPlatformServer(this.platformId)) {
                        this.transferState.set(getServerStateKey(), true);
                    }
                }
                _createEventEmitters(events) {
                    const zone = this.ngZone;
                    this.eventHelper.createEmitters(events);
                    this._initialOptions.eventsStrategy = (instance) => {
                        const strategy = new NgEventsStrategy(instance, zone);
                        events.filter((event) => event.subscribe).forEach((event) => {
                            strategy.addEmitter(event.subscribe, this[event.emit]);
                        });
                        return strategy;
                    };
                    this._initialOptions.nestedComponentOptions = function (component) {
                        return {
                            eventsStrategy: (instance) => new NgEventsStrategy(instance, zone),
                            nestedComponentOptions: component.option('nestedComponentOptions'),
                        };
                    };
                }
                _shouldOptionChange(name, value) {
                    if (this.changedOptions.hasOwnProperty(name)) {
                        const prevValue = this.changedOptions[name];
                        delete this.changedOptions[name];
                        return value !== prevValue;
                    }
                    return true;
                }
                clearChangedOptions() {
                    this.changedOptions = {};
                }
                _getOption(name) {
                    return this.instance
                        ? this.instance.option(name)
                        : this._initialOptions[name];
                }
                lockWidgetUpdate() {
                    if (!this.widgetUpdateLocked && this.instance) {
                        this.instance.beginUpdate();
                        this.widgetUpdateLocked = true;
                    }
                }
                unlockWidgetUpdate() {
                    if (this.widgetUpdateLocked) {
                        this.widgetUpdateLocked = false;
                        this.instance.endUpdate();
                    }
                }
                _setOption(name, value) {
                    this.lockWidgetUpdate();
                    if (!this._shouldOptionChange(name, value)) {
                        return;
                    }
                    if (this.instance) {
                        this.instance.option(name, value);
                    }
                    else {
                        this._initialOptions[name] = value;
                    }
                }
                _createWidget(element) {
                    this._initialOptions.integrationOptions = {};
                    this._initPlatform();
                    this._initOptions();
                    this._initialOptions.onInitializing = function () {
                        this.beginUpdate();
                    };
                    this.instance = this._createInstance(element, this._initialOptions);
                    this._initEvents();
                    this._initialOptions = {};
                }
                _destroyWidget() {
                    this.removedNestedComponents = [];
                    if (this.instance) {
                        const element = this.instance.element();
                        triggerHandler(element, 'dxremove', { _angularIntegration: true });
                        this.instance.dispose();
                        domAdapter.removeElement(element);
                    }
                }
                constructor(element, ngZone, templateHost, watcherHelper, transferState, platformId) {
                    this.element = element;
                    this.ngZone = ngZone;
                    this.watcherHelper = watcherHelper;
                    this.transferState = transferState;
                    this.platformId = platformId;
                    this.templates = [];
                    templateHost.setHost(this);
                    this._collectionContainerImpl = new CollectionNestedOptionContainerImpl(this._setOption.bind(this));
                    this.eventHelper = new EmitterHelper(ngZone, this);
                }
                ngOnChanges(changes) {
                    for (const key in changes) {
                        const change = changes[key];
                        if (change.currentValue !== this[key]) {
                            this._optionsToUpdate[key] = changes[key].currentValue;
                        }
                    }
                }
                ngOnInit() {
                    this._createWidget(this.element.nativeElement);
                }
                ngDoCheck() {
                    this.applyOptions();
                }
                ngAfterContentChecked() {
                    this.applyOptions();
                    this.resetOptions();
                    this.unlockWidgetUpdate();
                }
                ngAfterViewInit() {
                    this._updateTemplates();
                    this.instance.endUpdate();
                    this.recreatedNestedComponents = [];
                }
                ngAfterViewChecked() {
                    this._updateTemplates();
                }
                applyOptions() {
                    if (Object.keys(this._optionsToUpdate).length) {
                        if (this.instance) {
                            this.instance.option(this._optionsToUpdate);
                        }
                        this._optionsToUpdate = {};
                    }
                }
                resetOptions(collectionName) {
                    if (this.instance) {
                        this.removedNestedComponents.filter((option) => (option
                            && !this.isRecreated(option)
                            && collectionName ? option.startsWith(collectionName) : true))
                            .forEach((option) => {
                            this.instance.resetOption(option);
                        });
                        this.removedNestedComponents = [];
                        this.recreatedNestedComponents = [];
                    }
                }
                isRecreated(name) {
                    return this.recreatedNestedComponents
                        && this.recreatedNestedComponents.some((nestedComponent) => nestedComponent.getOptionPath() === name);
                }
                setTemplate(template) {
                    this.templates.push(template);
                    this.templateUpdateRequired = true;
                }
                setChildren(propertyName, items) {
                    this.resetOptions(propertyName);
                    return this._collectionContainerImpl.setChildren(propertyName, items);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: DxTemplateHost }, { token: WatcherHelper }, { token: i2.TransferState }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxComponent, selector: "ng-component", usesOnChanges: true, ngImport: i0, template: '', isInline: true });
            } exports("ag", DxComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxComponent, decorators: [{
                        type: Component$1,
                        args: [{
                                template: '',
                            }]
                    }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: DxTemplateHost }, { type: WatcherHelper }, { type: i2.TransferState }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [PLATFORM_ID]
                            }] }] });
            class DxComponentExtension extends DxComponent {
                createInstance(element) {
                    this._createWidget(element);
                }
                ngOnInit() {
                }
                ngAfterViewInit() {
                    this._createWidget(this.element.nativeElement);
                    this.instance.endUpdate();
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxComponentExtension, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxComponentExtension, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            } exports("h9", DxComponentExtension);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxComponentExtension, decorators: [{
                        type: Component$1,
                        args: [{
                                template: '',
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            const outsideZoneEvents = ['mousemove', 'mouseover', 'mouseout'];
            const insideZoneEvents = ['mouseup', 'click', 'mousedown', 'transitionend', 'wheel'];
            let originalAdd;
            let callbacks$1 = [];
            let readyCallbackAdd = function (callback) {
                if (!originalAdd) {
                    originalAdd = this.callBase.bind(this);
                }
                callbacks$1.push(callback);
            };
            readyCallbacks$1.inject({
                add(callback) {
                    return readyCallbackAdd.call(this, callback);
                },
            });
            let doInjections = (document, ngZone, xhrFactory) => {
                if (Number(VERSION.major) < 12) {
                    console.warn('Your version of Angular is not supported. Please update your project to version 12 or later.'
                        + ' Please refer to the Angular Update Guide for more information: https://update.angular.io');
                }
                domAdapter.inject({
                    _document: document,
                    listen(...args) {
                        const eventName = args[1];
                        if (outsideZoneEvents.includes(eventName)) {
                            return ngZone.runOutsideAngular(() => this.callBase.apply(this, args));
                        }
                        if (ngZone.isStable && insideZoneEvents.includes(eventName)) {
                            return ngZone.run(() => this.callBase.apply(this, args));
                        }
                        return this.callBase.apply(this, args);
                    },
                    isElementNode(element) {
                        return element && element.nodeType === 1;
                    },
                    isTextNode(element) {
                        return element && element.nodeType === 3;
                    },
                    isDocument(element) {
                        return element && element.nodeType === 9;
                    },
                });
                httpRequest.inject({
                    getXhr() {
                        if (!xhrFactory) {
                            return this.callBase.apply(this);
                        }
                        const _xhr = xhrFactory.build();
                        if (!('withCredentials' in _xhr)) {
                            _xhr.withCredentials = false;
                        }
                        return _xhr;
                    },
                });
                const runReadyCallbacksInZone = () => {
                    ngZone.run(() => {
                        eventsEngine.set({});
                        callbacks$1.forEach((callback) => originalAdd.call(null, callback));
                        callbacks$1 = [];
                        readyCallbacks$1.fire();
                    });
                };
                runReadyCallbacksInZone();
                readyCallbackAdd = (callback) => ngZone.run(() => callback());
                doInjections = runReadyCallbacksInZone;
            };
            class DxIntegrationModule {
                constructor(document, ngZone, xhrFactory) {
                    doInjections(document, ngZone, xhrFactory);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxIntegrationModule, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.XhrFactory, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxIntegrationModule });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxIntegrationModule });
            } exports("an", DxIntegrationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxIntegrationModule, decorators: [{
                        type: NgModule,
                        args: [{}]
                    }], ctorParameters: () => [{ type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: i0.NgZone }, { type: i1.XhrFactory, decorators: [{
                                type: Optional
                            }] }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            function isIterable(value) {
                return value && (typeof value[Symbol.iterator] === 'function');
            }
            class IterableDifferHelper {
                _differs;
                _host;
                _propertyDiffers = {};
                constructor(_differs) {
                    this._differs = _differs;
                }
                setHost(host) {
                    this._host = host;
                }
                setup(prop, changes) {
                    if (prop in changes) {
                        const value = changes[prop].currentValue;
                        this.setupSingle(prop, value);
                    }
                }
                setupSingle(prop, value) {
                    if (value && Array.isArray(value)) {
                        if (!this._propertyDiffers[prop]) {
                            try {
                                this._propertyDiffers[prop] = this._differs.find(value).create(null);
                                return true;
                            }
                            catch (e) { }
                        }
                    }
                    else {
                        delete this._propertyDiffers[prop];
                    }
                    return false;
                }
                getChanges(prop, value) {
                    if (this._propertyDiffers[prop]) {
                        return this._propertyDiffers[prop].diff(value);
                    }
                }
                checkChangedOptions(propName, hostValue) {
                    return this._host.changedOptions[propName] === hostValue;
                }
                doCheck(prop) {
                    if (this._propertyDiffers[prop] && this._host.instance) {
                        const hostValue = this._host[prop];
                        const changes = isIterable(hostValue) && this.getChanges(prop, hostValue);
                        if (changes && !this.checkChangedOptions(prop, hostValue)) {
                            this._host.lockWidgetUpdate();
                            this._host.instance.option(prop, hostValue);
                        }
                    }
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IterableDifferHelper, deps: [{ token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Injectable });
                /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IterableDifferHelper });
            } exports("aj", IterableDifferHelper);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: IterableDifferHelper, decorators: [{
                        type: Injectable
                    }], ctorParameters: () => [{ type: i0.IterableDiffers }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            class DxServerTransferStateModule {
                state;
                platformId;
                constructor(state, platformId) {
                    this.state = state;
                    this.platformId = platformId;
                    const that = this;
                    ajax.inject({
                        sendRequest(...args) {
                            const key = makeStateKey(that.generateKey(args));
                            const cachedData = that.state.get(key, null);
                            if (isPlatformServer(that.platformId)) {
                                const result = this.callBase.apply(this, args);
                                result.always((data, status) => {
                                    const dataForCache = {
                                        data,
                                        status,
                                    };
                                    that.state.set(key, dataForCache);
                                });
                                return result;
                            }
                            if (cachedData) {
                                const d = Deferred();
                                d.resolve(cachedData.data, cachedData.status);
                                that.state.set(key, null);
                                return d.promise();
                            }
                            return this.callBase.apply(this, args);
                        },
                    });
                }
                generateKey(args) {
                    let keyValue = '';
                    for (const key in args) {
                        if (typeof args[key] === 'object') {
                            const objKey = this.generateKey(args[key]);
                            keyValue += key + objKey;
                        }
                        else {
                            keyValue += key + args[key];
                        }
                    }
                    return keyValue;
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxServerTransferStateModule, deps: [{ token: i2.TransferState }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxServerTransferStateModule });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxServerTransferStateModule });
            } exports("hp", DxServerTransferStateModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxServerTransferStateModule, decorators: [{
                        type: NgModule,
                        args: [{}]
                    }], ctorParameters: () => [{ type: i2.TransferState }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [PLATFORM_ID]
                            }] }] });

            /**
             * DevExtreme (esm/core/element.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var strategy = function(element) {
                return element && element.get(0)
            };
            function getPublicElement(element) {
                return strategy(element)
            }

            /**
             * DevExtreme (esm/animation/translator.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var TRANSLATOR_DATA_KEY = "dxTranslator";
            var TRANSFORM_MATRIX_REGEX = /matrix(3d)?\((.+?)\)/;
            var TRANSLATE_REGEX = /translate(?:3d)?\((.+?)\)/;
            var locate = exports("aZ", function($element) {
                $element = $($element);
                var translate = getTranslate($element);
                return {
                    left: translate.x,
                    top: translate.y
                }
            });

            function isPercentValue(value) {
                return "string" === type(value) && "%" === value[value.length - 1]
            }

            function cacheTranslate($element, translate) {
                if ($element.length) {
                    data($element.get(0), TRANSLATOR_DATA_KEY, translate);
                }
            }
            var clearCache = function($element) {
                if ($element.length) {
                    removeData($element.get(0), TRANSLATOR_DATA_KEY);
                }
            };
            var getTranslateCss = function(translate) {
                translate.x = translate.x || 0;
                translate.y = translate.y || 0;
                var xValueString = isPercentValue(translate.x) ? translate.x : translate.x + "px";
                var yValueString = isPercentValue(translate.y) ? translate.y : translate.y + "px";
                return "translate(" + xValueString + ", " + yValueString + ")"
            };
            var getTranslate = function($element) {
                var result = $element.length ? data($element.get(0), TRANSLATOR_DATA_KEY) : null;
                if (!result) {
                    var transformValue = $element.css("transform") || getTranslateCss({
                        x: 0,
                        y: 0
                    });
                    var matrix = transformValue.match(TRANSFORM_MATRIX_REGEX);
                    var is3D = matrix && matrix[1];
                    if (matrix) {
                        matrix = matrix[2].split(",");
                        if ("3d" === is3D) {
                            matrix = matrix.slice(12, 15);
                        } else {
                            matrix.push(0);
                            matrix = matrix.slice(4, 7);
                        }
                    } else {
                        matrix = [0, 0, 0];
                    }
                    result = {
                        x: parseFloat(matrix[0]),
                        y: parseFloat(matrix[1]),
                        z: parseFloat(matrix[2])
                    };
                    cacheTranslate($element, result);
                }
                return result
            };
            var move = exports("a_", function($element, position) {
                $element = $($element);
                var left = position.left;
                var top = position.top;
                var translate;
                if (void 0 === left) {
                    translate = getTranslate($element);
                    translate.y = top || 0;
                } else if (void 0 === top) {
                    translate = getTranslate($element);
                    translate.x = left || 0;
                } else {
                    translate = {
                        x: left || 0,
                        y: top || 0,
                        z: 0
                    };
                    cacheTranslate($element, translate);
                }
                $element.css({
                    transform: getTranslateCss(translate)
                });
                if (isPercentValue(left) || isPercentValue(top)) {
                    clearCache($element);
                }
            });
            var resetPosition = exports("bH", function($element, finishTransition) {
                $element = $($element);
                var originalTransition;
                var stylesConfig = {
                    left: 0,
                    top: 0,
                    transform: "none"
                };
                if (finishTransition) {
                    originalTransition = $element.css("transition");
                    stylesConfig.transition = "none";
                }
                $element.css(stylesConfig);
                clearCache($element);
                if (finishTransition) {
                    $element.get(0).offsetHeight;
                    $element.css("transition", originalTransition);
                }
            });
            var parseTranslate = function(translateString) {
                var result = translateString.match(TRANSLATE_REGEX);
                if (!result || !result[1]) {
                    return
                }
                result = result[1].split(",");
                result = {
                    x: parseFloat(result[0]),
                    y: parseFloat(result[1]),
                    z: parseFloat(result[2])
                };
                return result
            };

            /**
             * DevExtreme (esm/animation/easing.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var CSS_TRANSITION_EASING_REGEX = /cubic-bezier\((\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\)/;
            var TransitionTimingFuncMap = {
                linear: "cubic-bezier(0, 0, 1, 1)",
                swing: "cubic-bezier(0.445, 0.05, 0.55, 0.95)",
                ease: "cubic-bezier(0.25, 0.1, 0.25, 1)",
                "ease-in": "cubic-bezier(0.42, 0, 1, 1)",
                "ease-out": "cubic-bezier(0, 0, 0.58, 1)",
                "ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)"
            };
            var polynomBezier = function(x1, y1, x2, y2) {
                var Cx = 3 * x1;
                var Bx = 3 * (x2 - x1) - Cx;
                var Ax = 1 - Cx - Bx;
                var Cy = 3 * y1;
                var By = 3 * (y2 - y1) - Cy;
                var Ay = 1 - Cy - By;
                var bezierX = function(t) {
                    return t * (Cx + t * (Bx + t * Ax))
                };
                var derivativeX = function(t) {
                    return Cx + t * (2 * Bx + 3 * t * Ax)
                };
                return function(t) {
                    return function(t) {
                        return t * (Cy + t * (By + t * Ay))
                    }(function(t) {
                        var x = t;
                        var i = 0;
                        var z;
                        while (i < 14) {
                            z = bezierX(x) - t;
                            if (Math.abs(z) < .001) {
                                break
                            }
                            x -= z / derivativeX(x);
                            i++;
                        }
                        return x
                    }(t))
                }
            };
            var easing = {};
            var convertTransitionTimingFuncToEasing = function(cssTransitionEasing) {
                cssTransitionEasing = TransitionTimingFuncMap[cssTransitionEasing] || cssTransitionEasing;
                var coeffs = cssTransitionEasing.match(CSS_TRANSITION_EASING_REGEX);
                var forceName;
                if (!coeffs) {
                    forceName = "linear";
                    coeffs = TransitionTimingFuncMap[forceName].match(CSS_TRANSITION_EASING_REGEX);
                }
                coeffs = coeffs.slice(1, 5);
                for (var i = 0; i < coeffs.length; i++) {
                    coeffs[i] = parseFloat(coeffs[i]);
                }
                var easingName = forceName || "cubicbezier_" + coeffs.join("_").replace(/\./g, "p");
                if (!isFunction(easing[easingName])) {
                    easing[easingName] = function(x, t, b, c, d) {
                        return c * polynomBezier(coeffs[0], coeffs[1], coeffs[2], coeffs[3])(t / d) + b
                    };
                }
                return easingName
            };
            function getEasing(name) {
                return easing[name]
            }

            /**
             * DevExtreme (esm/animation/frame.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$9 = hasWindow() ? getWindow() : {};
            var FRAME_ANIMATION_STEP_TIME = 1e3 / 60;
            var request = function(callback) {
                return setTimeout(callback, FRAME_ANIMATION_STEP_TIME)
            };
            var cancel = function(requestID) {
                clearTimeout(requestID);
            };
            var setAnimationFrameMethods = callOnce((function() {
                var nativeRequest = window$9.requestAnimationFrame || window$9.webkitRequestAnimationFrame || window$9.mozRequestAnimationFrame || window$9.oRequestAnimationFrame || window$9.msRequestAnimationFrame;
                var nativeCancel = window$9.cancelAnimationFrame || window$9.webkitCancelAnimationFrame || window$9.mozCancelAnimationFrame || window$9.oCancelAnimationFrame || window$9.msCancelAnimationFrame;
                if (nativeRequest && nativeCancel) {
                    request = nativeRequest;
                    cancel = nativeCancel;
                }
            }));
            function requestAnimationFrame() {
                setAnimationFrameMethods();
                return request.apply(window$9, arguments)
            }
            function cancelAnimationFrame() {
                setAnimationFrameMethods();
                cancel.apply(window$9, arguments);
            }

            /**
             * DevExtreme (esm/core/utils/resize_callbacks.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var resizeCallbacks = exports("aM", function() {
                var prevSize;
                var callbacks = Callbacks();
                var originalCallbacksAdd = callbacks.add;
                var originalCallbacksRemove = callbacks.remove;
                if (!hasWindow()) {
                    return callbacks
                }
                var formatSize = function() {
                    var window = getWindow();
                    return {
                        width: window.innerWidth,
                        height: window.innerHeight
                    }
                };
                var handleResize = function() {
                    var now = formatSize();
                    if (now.width === prevSize.width && now.height === prevSize.height) {
                        return
                    }
                    var changedDimension;
                    if (now.width === prevSize.width) {
                        changedDimension = "height";
                    }
                    if (now.height === prevSize.height) {
                        changedDimension = "width";
                    }
                    prevSize = now;
                    callbacks.fire(changedDimension);
                };
                var setPrevSize = callOnce((function() {
                    prevSize = formatSize();
                }));
                var removeListener;
                callbacks.add = function() {
                    var result = originalCallbacksAdd.apply(callbacks, arguments);
                    setPrevSize();
                    readyCallbacks$1.add((function() {
                        if (!removeListener && callbacks.has()) {
                            removeListener = domAdapter.listen(getWindow(), "resize", handleResize);
                        }
                    }));
                    return result
                };
                callbacks.remove = function() {
                    var result = originalCallbacksRemove.apply(callbacks, arguments);
                    if (!callbacks.has() && removeListener) {
                        removeListener();
                        removeListener = void 0;
                    }
                    return result
                };
                return callbacks
            }());

            /**
             * DevExtreme (esm/core/events_strategy.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class EventsStrategy {
                constructor(owner) {
                    var options = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    this._events = {};
                    this._owner = owner;
                    this._options = options;
                }
                static create(owner, strategy) {
                    if (strategy) {
                        return isFunction(strategy) ? strategy(owner) : strategy
                    } else {
                        return new EventsStrategy(owner)
                    }
                }
                hasEvent(eventName) {
                    var callbacks = this._events[eventName];
                    return callbacks ? callbacks.has() : false
                }
                fireEvent(eventName, eventArgs) {
                    var callbacks = this._events[eventName];
                    if (callbacks) {
                        callbacks.fireWith(this._owner, eventArgs);
                    }
                    return this._owner
                }
                on(eventName, eventHandler) {
                    if (isPlainObject(eventName)) {
                        each(eventName, (e, h) => {
                            this.on(e, h);
                        });
                    } else {
                        var callbacks = this._events[eventName];
                        if (!callbacks) {
                            callbacks = Callbacks({
                                syncStrategy: this._options.syncStrategy
                            });
                            this._events[eventName] = callbacks;
                        }
                        var addFn = callbacks.originalAdd || callbacks.add;
                        addFn.call(callbacks, eventHandler);
                    }
                }
                off(eventName, eventHandler) {
                    var callbacks = this._events[eventName];
                    if (callbacks) {
                        if (isFunction(eventHandler)) {
                            callbacks.remove(eventHandler);
                        } else {
                            callbacks.empty();
                        }
                    }
                }
                dispose() {
                    each(this._events, (eventName, event) => {
                        event.empty();
                    });
                }
            } exports("ap", EventsStrategy);

            /**
             * DevExtreme (esm/core/utils/storage.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$8 = getWindow();
            var getSessionStorage = exports("ep", function() {
                var sessionStorage;
                try {
                    sessionStorage = window$8.sessionStorage;
                } catch (e) {}
                return sessionStorage
            });

            /**
             * DevExtreme (esm/core/utils/view_port.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ready$4 = readyCallbacks$1.add;
            var changeCallback = Callbacks();
            var $originalViewPort = $();
            var value = exports("eg", function() {
                var $current;
                return function(element) {
                    if (!arguments.length) {
                        return $current
                    }
                    var $element = $(element);
                    $originalViewPort = $element;
                    var isNewViewportFound = !!$element.length;
                    var prevViewPort = value();
                    $current = isNewViewportFound ? $element : $("body");
                    changeCallback.fire(isNewViewportFound ? value() : $(), prevViewPort);
                }
            }());
            ready$4((function() {
                value(".dx-viewport");
            }));
            function originalViewPort() {
                return $originalViewPort
            }

            /**
             * DevExtreme (esm/core/devices.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$7 = getWindow();
            var KNOWN_UA_TABLE = {
                iPhone: "iPhone",
                iPhone5: "iPhone",
                iPhone6: "iPhone",
                iPhone6plus: "iPhone",
                iPad: "iPad",
                iPadMini: "iPad Mini",
                androidPhone: "Android Mobile",
                androidTablet: "Android",
                msSurface: "Windows ARM Tablet PC",
                desktop: "desktop"
            };
            var DEFAULT_DEVICE = {
                deviceType: "desktop",
                platform: "generic",
                version: [],
                phone: false,
                tablet: false,
                android: false,
                ios: false,
                generic: true,
                grade: "A",
                mac: false
            };
            var UA_PARSERS = {
                generic(userAgent) {
                    var isPhone = /windows phone/i.test(userAgent) || userAgent.match(/WPDesktop/);
                    var isTablet = !isPhone && /Windows(.*)arm(.*)Tablet PC/i.test(userAgent);
                    var isDesktop = !isPhone && !isTablet && /msapphost/i.test(userAgent);
                    var isMac = /((intel|ppc) mac os x)/.test(userAgent.toLowerCase());
                    if (!(isPhone || isTablet || isDesktop || isMac)) {
                        return null
                    }
                    return {
                        deviceType: isPhone ? "phone" : isTablet ? "tablet" : "desktop",
                        platform: "generic",
                        version: [],
                        grade: "A",
                        mac: isMac
                    }
                },
                appleTouchDevice(userAgent) {
                    var navigator = getNavigator();
                    var isIpadOs = /Macintosh/i.test(userAgent) && (null === navigator || void 0 === navigator ? void 0 : navigator.maxTouchPoints) > 2;
                    var isAppleDevice = /ip(hone|od|ad)/i.test(userAgent);
                    if (!isAppleDevice && !isIpadOs) {
                        return null
                    }
                    var isPhone = /ip(hone|od)/i.test(userAgent);
                    var matches = userAgent.match(/os\s{0,}X? (\d+)_(\d+)_?(\d+)?/i);
                    var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3] || 0, 10)] : [];
                    var isIPhone4 = 480 === window$7.screen.height;
                    var grade = isIPhone4 ? "B" : "A";
                    return {
                        deviceType: isPhone ? "phone" : "tablet",
                        platform: "ios",
                        version: version,
                        grade: grade
                    }
                },
                android(userAgent) {
                    var isAndroid = /android|htc_|silk/i.test(userAgent);
                    var isWinPhone = /windows phone/i.test(userAgent);
                    if (!isAndroid || isWinPhone) {
                        return null
                    }
                    var isPhone = /mobile/i.test(userAgent);
                    var matches = userAgent.match(/android (\d+)\.?(\d+)?\.?(\d+)?/i);
                    var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2] || 0, 10), parseInt(matches[3] || 0, 10)] : [];
                    var worseThan4_4 = version.length > 1 && (version[0] < 4 || 4 === version[0] && version[1] < 4);
                    var grade = worseThan4_4 ? "B" : "A";
                    return {
                        deviceType: isPhone ? "phone" : "tablet",
                        platform: "android",
                        version: version,
                        grade: grade
                    }
                }
            };
            var UA_PARSERS_ARRAY = [UA_PARSERS.appleTouchDevice, UA_PARSERS.android, UA_PARSERS.generic];
            class Devices {
                constructor(options) {
                    this._window = (null === options || void 0 === options ? void 0 : options.window) || window$7;
                    this._realDevice = this._getDevice();
                    this._currentDevice = void 0;
                    this._currentOrientation = void 0;
                    this._eventsStrategy = new EventsStrategy(this);
                    this.changed = Callbacks();
                    if (hasWindow()) {
                        readyCallbacks$1.add(this._recalculateOrientation.bind(this));
                        resizeCallbacks.add(this._recalculateOrientation.bind(this));
                    }
                }
                current(deviceOrName) {
                    if (deviceOrName) {
                        this._currentDevice = this._getDevice(deviceOrName);
                        this._forced = true;
                        this.changed.fire();
                        return
                    }
                    if (!this._currentDevice) {
                        deviceOrName = void 0;
                        try {
                            deviceOrName = this._getDeviceOrNameFromWindowScope();
                        } catch (e) {
                            deviceOrName = this._getDeviceNameFromSessionStorage();
                        } finally {
                            if (!deviceOrName) {
                                deviceOrName = this._getDeviceNameFromSessionStorage();
                            }
                            if (deviceOrName) {
                                this._forced = true;
                            }
                        }
                        this._currentDevice = this._getDevice(deviceOrName);
                    }
                    return this._currentDevice
                }
                real(forceDevice) {
                    return extend({}, this._realDevice)
                }
                orientation() {
                    return this._currentOrientation
                }
                isForced() {
                    return this._forced
                }
                isRippleEmulator() {
                    return !!this._window.tinyHippos
                }
                _getCssClasses(device) {
                    var result = [];
                    var realDevice = this._realDevice;
                    device = device || this.current();
                    if (device.deviceType) {
                        result.push("dx-device-".concat(device.deviceType));
                        if ("desktop" !== device.deviceType) {
                            result.push("dx-device-mobile");
                        }
                    }
                    result.push("dx-device-".concat(realDevice.platform));
                    if (realDevice.version && realDevice.version.length) {
                        result.push("dx-device-".concat(realDevice.platform, "-").concat(realDevice.version[0]));
                    }
                    if (this.isSimulator()) {
                        result.push("dx-simulator");
                    }
                    if (configMethod().rtlEnabled) {
                        result.push("dx-rtl");
                    }
                    return result
                }
                attachCssClasses(element, device) {
                    this._deviceClasses = this._getCssClasses(device).join(" ");
                    $(element).addClass(this._deviceClasses);
                }
                detachCssClasses(element) {
                    $(element).removeClass(this._deviceClasses);
                }
                isSimulator() {
                    try {
                        return this._isSimulator || hasWindow() && this._window.top !== this._window.self && this._window.top["dx-force-device"] || this.isRippleEmulator()
                    } catch (e) {
                        return false
                    }
                }
                forceSimulator() {
                    this._isSimulator = true;
                }
                _getDevice(deviceName) {
                    if ("genericPhone" === deviceName) {
                        deviceName = {
                            deviceType: "phone",
                            platform: "generic",
                            generic: true
                        };
                    }
                    if (isPlainObject(deviceName)) {
                        return this._fromConfig(deviceName)
                    } else {
                        var ua;
                        if (deviceName) {
                            ua = KNOWN_UA_TABLE[deviceName];
                            if (!ua) {
                                throw errors$2.Error("E0005")
                            }
                        } else {
                            var navigator = getNavigator();
                            ua = navigator.userAgent;
                        }
                        return this._fromUA(ua)
                    }
                }
                _getDeviceOrNameFromWindowScope() {
                    var result;
                    if (hasWindow() && (this._window.top["dx-force-device-object"] || this._window.top["dx-force-device"])) {
                        result = this._window.top["dx-force-device-object"] || this._window.top["dx-force-device"];
                    }
                    return result
                }
                _getDeviceNameFromSessionStorage() {
                    var sessionStorage = getSessionStorage();
                    if (!sessionStorage) {
                        return
                    }
                    var deviceOrName = sessionStorage.getItem("dx-force-device");
                    try {
                        return JSON.parse(deviceOrName)
                    } catch (ex) {
                        return deviceOrName
                    }
                }
                _fromConfig(config) {
                    var result = extend({}, DEFAULT_DEVICE, this._currentDevice, config);
                    var shortcuts = {
                        phone: "phone" === result.deviceType,
                        tablet: "tablet" === result.deviceType,
                        android: "android" === result.platform,
                        ios: "ios" === result.platform,
                        generic: "generic" === result.platform
                    };
                    return extend(result, shortcuts)
                }
                _fromUA(ua) {
                    for (var idx = 0; idx < UA_PARSERS_ARRAY.length; idx += 1) {
                        var parser = UA_PARSERS_ARRAY[idx];
                        var config = parser(ua);
                        if (config) {
                            return this._fromConfig(config)
                        }
                    }
                    return DEFAULT_DEVICE
                }
                _changeOrientation() {
                    var $window = $(this._window);
                    var orientation = getHeight($window) > getWidth($window) ? "portrait" : "landscape";
                    if (this._currentOrientation === orientation) {
                        return
                    }
                    this._currentOrientation = orientation;
                    this._eventsStrategy.fireEvent("orientationChanged", [{
                        orientation: orientation
                    }]);
                }
                _recalculateOrientation() {
                    var windowWidth = getWidth(this._window);
                    if (this._currentWidth === windowWidth) {
                        return
                    }
                    this._currentWidth = windowWidth;
                    this._changeOrientation();
                }
                on(eventName, eventHandler) {
                    this._eventsStrategy.on(eventName, eventHandler);
                    return this
                }
                off(eventName, eventHandler) {
                    this._eventsStrategy.off(eventName, eventHandler);
                    return this
                }
            }
            var devices = exports("d", new Devices);
            var viewPortElement = value();
            if (viewPortElement) {
                devices.attachCssClasses(viewPortElement);
            }
            changeCallback.add((viewPort, prevViewport) => {
                devices.detachCssClasses(prevViewport);
                devices.attachCssClasses(viewPort);
            });

            /**
             * DevExtreme (esm/core/utils/support.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var {
                maxTouchPoints: maxTouchPoints
            } = getNavigator();
            var transitionEndEventNames = {
                webkitTransition: "webkitTransitionEnd",
                MozTransition: "transitionend",
                OTransition: "oTransitionEnd",
                transition: "transitionend"
            };
            var supportProp = function(prop) {
                return !!styleProp(prop)
            };
            var isNativeScrollingSupported = function() {
                var {
                    platform: platform,
                    mac: isMac
                } = devices.real();
                var isNativeScrollDevice = "ios" === platform || "android" === platform || isMac;
                return isNativeScrollDevice
            };
            var inputType = exports("er", function(type) {
                if ("text" === type) {
                    return true
                }
                var input = domAdapter.createElement("input");
                try {
                    input.setAttribute("type", type);
                    input.value = "wrongValue";
                    return !input.value
                } catch (e) {
                    return false
                }
            });
            var detectTouchEvents = function(hasWindowProperty, maxTouchPoints) {
                return (hasWindowProperty("ontouchstart") || !!maxTouchPoints) && !hasWindowProperty("callPhantom")
            };
            var detectPointerEvent = function(hasWindowProperty) {
                return hasWindowProperty("PointerEvent")
            };
            var touchEvents = exports("gk", detectTouchEvents(hasProperty, maxTouchPoints));
            var pointerEvents = exports("gl", detectPointerEvent(hasProperty));
            var touchPointersPresent = !!maxTouchPoints;
            var touch = exports("B", touchEvents || pointerEvents && touchPointersPresent);
            var transition = callOnce((function() {
                return supportProp("transition")
            }));
            var transitionEndEventName = callOnce((function() {
                return transitionEndEventNames[styleProp("transition")]
            }));
            var animation = callOnce((function() {
                return supportProp("animation")
            }));
            var nativeScrolling = exports("bM", isNativeScrollingSupported());

            var support = /*#__PURE__*/Object.freeze({
                __proto__: null,
                animation: animation,
                inputType: inputType,
                nativeScrolling: nativeScrolling,
                pointerEvents: pointerEvents,
                styleProp: styleProp,
                stylePropPrefix: stylePropPrefix,
                supportProp: supportProp,
                touch: touch,
                touchEvents: touchEvents,
                transition: transition,
                transitionEndEventName: transitionEndEventName
            });

            /**
             * DevExtreme (esm/core/utils/position.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var getDefaultAlignment = exports("bt", isRtlEnabled => {
                var rtlEnabled = null !== isRtlEnabled && void 0 !== isRtlEnabled ? isRtlEnabled : configMethod().rtlEnabled;
                return rtlEnabled ? "right" : "left"
            });
            var getBoundingRect = exports("b9", element => {
                if (isWindow(element)) {
                    return {
                        width: element.outerWidth,
                        height: element.outerHeight
                    }
                }
                return element.getBoundingClientRect()
            });

            /**
             * DevExtreme (esm/core/utils/browser.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var navigator$1 = getNavigator();
            var webkitRegExp = /(webkit)[ /]([\w.]+)/;
            var mozillaRegExp = /(mozilla)(?:.*? rv:([\w.]+))/;
            var browserFromUA = ua => {
                ua = ua.toLowerCase();
                var result = {};
                var matches = webkitRegExp.exec(ua) || ua.indexOf("compatible") < 0 && mozillaRegExp.exec(ua) || [];
                var browserName = matches[1];
                var browserVersion = matches[2];
                if ("webkit" === browserName) {
                    result.webkit = true;
                    if (ua.indexOf("chrome") >= 0 || ua.indexOf("crios") >= 0) {
                        browserName = "chrome";
                        browserVersion = /(?:chrome|crios)\/(\d+\.\d+)/.exec(ua);
                        browserVersion = browserVersion && browserVersion[1];
                    } else if (ua.indexOf("fxios") >= 0) {
                        browserName = "mozilla";
                        browserVersion = /fxios\/(\d+\.\d+)/.exec(ua);
                        browserVersion = browserVersion && browserVersion[1];
                    } else if (ua.indexOf("safari") >= 0 && /version|phantomjs/.test(ua)) {
                        browserName = "safari";
                        browserVersion = /(?:version|phantomjs)\/([0-9.]+)/.exec(ua);
                        browserVersion = browserVersion && browserVersion[1];
                    } else {
                        browserName = "unknown";
                        browserVersion = /applewebkit\/([0-9.]+)/.exec(ua);
                        browserVersion = browserVersion && browserVersion[1];
                    }
                }
                if (browserName) {
                    result[browserName] = true;
                    result.version = browserVersion;
                }
                return result
            };
            var browser = exports("be", extend({
                _fromUA: browserFromUA
            }, browserFromUA(navigator$1.userAgent)));

            /**
             * DevExtreme (esm/animation/position.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$6 = getWindow();
            var horzRe = /left|right/;
            var vertRe = /top|bottom/;
            var collisionRe = /fit|flip|none/;
            var scaleRe = /scale\(.+?\)/;
            var IS_SAFARI = browser.safari;
            var normalizeAlign = function(raw) {
                var result = {
                    h: "center",
                    v: "center"
                };
                var pair = splitPair(raw);
                if (pair) {
                    each(pair, (function() {
                        var w = String(this).toLowerCase();
                        if (horzRe.test(w)) {
                            result.h = w;
                        } else if (vertRe.test(w)) {
                            result.v = w;
                        }
                    }));
                }
                return result
            };
            var normalizeOffset = function(raw, preventRound) {
                return pairToObject(raw, preventRound)
            };
            var normalizeCollision = function(raw) {
                var pair = splitPair(raw);
                var h = String(pair && pair[0]).toLowerCase();
                var v = String(pair && pair[1]).toLowerCase();
                if (!collisionRe.test(h)) {
                    h = "none";
                }
                if (!collisionRe.test(v)) {
                    v = h;
                }
                return {
                    h: h,
                    v: v
                }
            };
            var getAlignFactor = function(align) {
                switch (align) {
                    case "center":
                        return .5;
                    case "right":
                    case "bottom":
                        return 1;
                    default:
                        return 0
                }
            };
            var inverseAlign = function(align) {
                switch (align) {
                    case "left":
                        return "right";
                    case "right":
                        return "left";
                    case "top":
                        return "bottom";
                    case "bottom":
                        return "top";
                    default:
                        return align
                }
            };
            var calculateOversize = function(data, bounds) {
                var oversize = 0;
                if (data.myLocation < bounds.min) {
                    oversize += bounds.min - data.myLocation;
                }
                if (data.myLocation > bounds.max) {
                    oversize += data.myLocation - bounds.max;
                }
                return oversize
            };
            var collisionSide = function(direction, data, bounds) {
                if (data.myLocation < bounds.min) {
                    return "h" === direction ? "left" : "top"
                }
                if (data.myLocation > bounds.max) {
                    return "h" === direction ? "right" : "bottom"
                }
                return "none"
            };
            var initMyLocation = function(data) {
                data.myLocation = data.atLocation + getAlignFactor(data.atAlign) * data.atSize - getAlignFactor(data.myAlign) * data.mySize + data.offset;
            };
            var collisionResolvers = {
                fit: function(data, bounds) {
                    var result = false;
                    if (data.myLocation > bounds.max) {
                        data.myLocation = bounds.max;
                        result = true;
                    }
                    if (data.myLocation < bounds.min) {
                        data.myLocation = bounds.min;
                        result = true;
                    }
                    data.fit = result;
                },
                flip: function(data, bounds) {
                    data.flip = false;
                    if ("center" === data.myAlign && "center" === data.atAlign) {
                        return
                    }
                    if (data.myLocation < bounds.min || data.myLocation > bounds.max) {
                        var inverseData = extend({}, data, {
                            myAlign: inverseAlign(data.myAlign),
                            atAlign: inverseAlign(data.atAlign),
                            offset: -data.offset
                        });
                        initMyLocation(inverseData);
                        inverseData.oversize = calculateOversize(inverseData, bounds);
                        if (inverseData.myLocation >= bounds.min && inverseData.myLocation <= bounds.max || data.oversize > inverseData.oversize) {
                            data.myLocation = inverseData.myLocation;
                            data.oversize = inverseData.oversize;
                            data.flip = true;
                        }
                    }
                },
                flipfit: function(data, bounds) {
                    this.flip(data, bounds);
                    this.fit(data, bounds);
                },
                none: function(data) {
                    data.oversize = 0;
                }
            };
            var scrollbarWidth;
            var calculateScrollbarWidth = function() {
                var $scrollDiv = $("<div>").css({
                    width: 100,
                    height: 100,
                    overflow: "scroll",
                    position: "absolute",
                    top: -9999
                }).appendTo($("body"));
                var result = $scrollDiv.get(0).offsetWidth - $scrollDiv.get(0).clientWidth;
                $scrollDiv.remove();
                scrollbarWidth = result;
            };
            var defaultPositionResult = {
                h: {
                    location: 0,
                    flip: false,
                    fit: false,
                    oversize: 0
                },
                v: {
                    location: 0,
                    flip: false,
                    fit: false,
                    oversize: 0
                }
            };
            var calculatePosition = function(what, options) {
                var $what = $(what);
                var currentOffset = $what.offset();
                var result = extend(true, {}, defaultPositionResult, {
                    h: {
                        location: currentOffset.left
                    },
                    v: {
                        location: currentOffset.top
                    }
                });
                if (!options) {
                    return result
                }
                var my = normalizeAlign(options.my);
                var at = normalizeAlign(options.at);
                var of = $(options.of).length && options.of || window$6;
                var offset = normalizeOffset(options.offset, options.precise);
                var collision = normalizeCollision(options.collision);
                var boundary = options.boundary;
                var boundaryOffset = normalizeOffset(options.boundaryOffset, options.precise);
                var h = {
                    mySize: getOuterWidth($what),
                    myAlign: my.h,
                    atAlign: at.h,
                    offset: offset.h,
                    collision: collision.h,
                    boundaryOffset: boundaryOffset.h
                };
                var v = {
                    mySize: getOuterHeight($what),
                    myAlign: my.v,
                    atAlign: at.v,
                    offset: offset.v,
                    collision: collision.v,
                    boundaryOffset: boundaryOffset.v
                };
                if (of.preventDefault) {
                    h.atLocation = of.pageX;
                    v.atLocation = of.pageY;
                    h.atSize = 0;
                    v.atSize = 0;
                } else {
                    of = $(of);
                    if (isWindow(of [0])) {
                        h.atLocation = of.scrollLeft();
                        v.atLocation = of.scrollTop();
                        if ("phone" === devices.real().deviceType && of [0].visualViewport) {
                            h.atLocation = Math.max(h.atLocation, of [0].visualViewport.offsetLeft);
                            v.atLocation = Math.max(v.atLocation, of [0].visualViewport.offsetTop);
                            h.atSize = of [0].visualViewport.width;
                            v.atSize = of [0].visualViewport.height;
                        } else {
                            h.atSize = of [0].innerWidth > of [0].outerWidth ? of [0].innerWidth : getWidth(of);
                            v.atSize = of [0].innerHeight > of [0].outerHeight || IS_SAFARI ? of [0].innerHeight : getHeight(of);
                        }
                    } else if (9 === of [0].nodeType) {
                        h.atLocation = 0;
                        v.atLocation = 0;
                        h.atSize = getWidth(of);
                        v.atSize = getHeight(of);
                    } else {
                        var ofRect = getBoundingRect(of.get(0));
                        var o = getOffsetWithoutScale(of);
                        h.atLocation = o.left;
                        v.atLocation = o.top;
                        h.atSize = Math.max(ofRect.width, getOuterWidth(of));
                        v.atSize = Math.max(ofRect.height, getOuterHeight(of));
                    }
                }
                initMyLocation(h);
                initMyLocation(v);
                var bounds = function() {
                    var win = $(window$6);
                    var windowWidth = getWidth(win);
                    var windowHeight = getHeight(win);
                    var left = win.scrollLeft();
                    var top = win.scrollTop();
                    var documentElement = domAdapter.getDocumentElement();
                    var hZoomLevel = touch ? documentElement.clientWidth / windowWidth : 1;
                    var vZoomLevel = touch ? documentElement.clientHeight / windowHeight : 1;
                    if (void 0 === scrollbarWidth) {
                        calculateScrollbarWidth();
                    }
                    var boundaryWidth = windowWidth;
                    var boundaryHeight = windowHeight;
                    if (boundary && !isWindow(boundary)) {
                        var $boundary = $(boundary);
                        var boundaryPosition = $boundary.offset();
                        left = boundaryPosition.left;
                        top = boundaryPosition.top;
                        boundaryWidth = getWidth($boundary);
                        boundaryHeight = getHeight($boundary);
                    }
                    return {
                        h: {
                            min: left + h.boundaryOffset,
                            max: left + boundaryWidth / hZoomLevel - h.mySize - h.boundaryOffset
                        },
                        v: {
                            min: top + v.boundaryOffset,
                            max: top + boundaryHeight / vZoomLevel - v.mySize - v.boundaryOffset
                        }
                    }
                }();
                h.oversize = calculateOversize(h, bounds.h);
                v.oversize = calculateOversize(v, bounds.v);
                h.collisionSide = collisionSide("h", h, bounds.h);
                v.collisionSide = collisionSide("v", v, bounds.v);
                if (collisionResolvers[h.collision]) {
                    collisionResolvers[h.collision](h, bounds.h);
                }
                if (collisionResolvers[v.collision]) {
                    collisionResolvers[v.collision](v, bounds.v);
                }
                var preciser = function(number) {
                    return options.precise ? number : Math.round(number)
                };
                extend(true, result, {
                    h: {
                        location: preciser(h.myLocation),
                        oversize: preciser(h.oversize),
                        fit: h.fit,
                        flip: h.flip,
                        collisionSide: h.collisionSide
                    },
                    v: {
                        location: preciser(v.myLocation),
                        oversize: preciser(v.oversize),
                        fit: v.fit,
                        flip: v.flip,
                        collisionSide: v.collisionSide
                    },
                    precise: options.precise
                });
                return result
            };
            var setScaleProperty = function(element, scale, styleAttr, isEmpty) {
                var stylePropIsValid = isDefined(element.style) && !domAdapter.isNode(element.style);
                var newStyleValue = isEmpty ? styleAttr.replace(scale, "") : styleAttr;
                if (stylePropIsValid) {
                    setStyle(element, newStyleValue, false);
                } else {
                    var styleAttributeNode = domAdapter.createAttribute("style");
                    styleAttributeNode.value = newStyleValue;
                    element.setAttributeNode(styleAttributeNode);
                }
            };
            var getOffsetWithoutScale = function getOffsetWithoutScale($startElement) {
                var _currentElement$getAt, _style$match;
                var $currentElement = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : $startElement;
                var currentElement = $currentElement.get(0);
                if (!currentElement) {
                    return $startElement.offset()
                }
                var style = (null === (_currentElement$getAt = currentElement.getAttribute) || void 0 === _currentElement$getAt ? void 0 : _currentElement$getAt.call(currentElement, "style")) || "";
                var scale = null === (_style$match = style.match(scaleRe)) || void 0 === _style$match ? void 0 : _style$match[0];
                var offset;
                if (scale) {
                    setScaleProperty(currentElement, scale, style, true);
                    offset = getOffsetWithoutScale($startElement, $currentElement.parent());
                    setScaleProperty(currentElement, scale, style, false);
                } else {
                    offset = getOffsetWithoutScale($startElement, $currentElement.parent());
                }
                return offset
            };
            var position = function(what, options) {
                var $what = $(what);
                if (!options) {
                    return $what.offset()
                }
                resetPosition($what, true);
                var offset = getOffsetWithoutScale($what);
                var targetPosition = options.h && options.v ? options : calculatePosition($what, options);
                var preciser = function(number) {
                    return options.precise ? number : Math.round(number)
                };
                move($what, {
                    left: targetPosition.h.location - preciser(offset.left),
                    top: targetPosition.v.location - preciser(offset.top)
                });
                return targetPosition
            };
            var offset = function(element) {
                element = $(element).get(0);
                if (isWindow(element)) {
                    return null
                } else if (element && "pageY" in element && "pageX" in element) {
                    return {
                        top: element.pageY,
                        left: element.pageX
                    }
                }
                return $(element).offset()
            };
            if (!position.inverseAlign) {
                position.inverseAlign = inverseAlign;
            }
            if (!position.normalizeAlign) {
                position.normalizeAlign = normalizeAlign;
            }
            var positionUtils = exports("bq", {
                calculateScrollbarWidth: calculateScrollbarWidth,
                calculate: calculatePosition,
                setup: position,
                offset: offset
            });

            /**
             * DevExtreme (esm/events/core/event_registrator.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var registerEvent = function(name, eventObject) {
                var strategy = {};
                if ("noBubble" in eventObject) {
                    strategy.noBubble = eventObject.noBubble;
                }
                if ("bindType" in eventObject) {
                    strategy.bindType = eventObject.bindType;
                }
                if ("delegateType" in eventObject) {
                    strategy.delegateType = eventObject.delegateType;
                }
                each(["setup", "teardown", "add", "remove", "trigger", "handle", "_default", "dispose"], (function(_, methodName) {
                    if (!eventObject[methodName]) {
                        return
                    }
                    strategy[methodName] = function() {
                        var args = [].slice.call(arguments);
                        args.unshift(this);
                        return eventObject[methodName].apply(eventObject, args)
                    };
                }));
                callbacks$3.fire(name, strategy);
            };
            registerEvent.callbacks = callbacks$3;
            var registerEvent$1 = exports("s", registerEvent);

            /**
             * DevExtreme (esm/events/remove.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var removeEvent = exports("r", "dxremove");
            var eventPropName = "dxRemoveEvent";
            beforeCleanData((function(elements) {
                elements = [].slice.call(elements);
                for (var i = 0; i < elements.length; i++) {
                    var $element = $(elements[i]);
                    if ($element.prop(eventPropName)) {
                        $element[0][eventPropName] = null;
                        eventsEngine.triggerHandler($element, removeEvent);
                    }
                }
            }));
            registerEvent$1(removeEvent, {
                noBubble: true,
                setup: function(element) {
                    $(element).prop(eventPropName, true);
                }
            });

            /**
             * DevExtreme (esm/events/utils/add_namespace.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var addNamespace$2 = (eventNames, namespace) => {
                if (!namespace) {
                    throw errors$2.Error("E0017")
                }
                if (Array.isArray(eventNames)) {
                    return eventNames.map(eventName => addNamespace$2(eventName, namespace)).join(" ")
                }
                if (-1 !== eventNames.indexOf(" ")) {
                    return addNamespace$2(eventNames.split(/\s+/g), namespace)
                }
                return "".concat(eventNames, ".").concat(namespace)
            };

            /**
             * DevExtreme (esm/ui/widget/selectors.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var focusableFn = function(element, tabIndex) {
                if (!visible(element)) {
                    return false
                }
                var nodeName = element.nodeName.toLowerCase();
                var isTabIndexNotNaN = !isNaN(tabIndex);
                var isDisabled = element.disabled;
                var isDefaultFocus = /^(input|select|textarea|button|object|iframe)$/.test(nodeName);
                var isHyperlink = "a" === nodeName;
                var isFocusable;
                var isContentEditable = element.isContentEditable;
                if (isDefaultFocus || isContentEditable) {
                    isFocusable = !isDisabled;
                } else if (isHyperlink) {
                    isFocusable = element.href || isTabIndexNotNaN;
                } else {
                    isFocusable = isTabIndexNotNaN;
                }
                return isFocusable
            };

            function visible(element) {
                var $element = $(element);
                return $element.is(":visible") && "hidden" !== $element.css("visibility") && "hidden" !== $element.parents().css("visibility")
            }
            var focusable = exports("O", function(index, element) {
                return focusableFn(element, $(element).attr("tabIndex"))
            });
            var tabbable = exports("e$", function(index, element) {
                var tabIndex = $(element).attr("tabIndex");
                return (isNaN(tabIndex) || tabIndex >= 0) && focusableFn(element, tabIndex)
            });
            var focused = exports("bw", function($element) {
                var element = $($element).get(0);
                return domAdapter.getActiveElement(element) === element
            });

            /**
             * DevExtreme (esm/events/utils/index.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var KEY_MAP = {
                backspace: "backspace",
                tab: "tab",
                enter: "enter",
                escape: "escape",
                pageup: "pageUp",
                pagedown: "pageDown",
                end: "end",
                home: "home",
                arrowleft: "leftArrow",
                arrowup: "upArrow",
                arrowright: "rightArrow",
                arrowdown: "downArrow",
                delete: "del",
                " ": "space",
                f: "F",
                a: "A",
                "*": "asterisk",
                "-": "minus",
                alt: "alt",
                control: "control",
                shift: "shift"
            };
            var LEGACY_KEY_CODES = {
                8: "backspace",
                9: "tab",
                13: "enter",
                27: "escape",
                33: "pageUp",
                34: "pageDown",
                35: "end",
                36: "home",
                37: "leftArrow",
                38: "upArrow",
                39: "rightArrow",
                40: "downArrow",
                46: "del",
                32: "space",
                70: "F",
                65: "A",
                106: "asterisk",
                109: "minus",
                189: "minus",
                173: "minus",
                16: "shift",
                17: "control",
                18: "alt"
            };
            var EVENT_SOURCES_REGEX = {
                dx: /^dx/i,
                mouse: /(mouse|wheel)/i,
                touch: /^touch/i,
                keyboard: /^key/i,
                pointer: /^(ms)?pointer/i
            };
            var fixMethod = e => e;
            var copyEvent = originalEvent => fixMethod(eventsEngine.Event(originalEvent, originalEvent));
            var isDxEvent = e => "dx" === eventSource(e);
            var isNativeMouseEvent = e => "mouse" === eventSource(e);
            var isNativeTouchEvent = e => "touch" === eventSource(e);
            var eventSource = _ref => {
                var {
                    type: type
                } = _ref;
                var result = "other";
                each(EVENT_SOURCES_REGEX, (function(key) {
                    if (this.test(type)) {
                        result = key;
                        return false
                    }
                }));
                return result
            };
            var isPointerEvent = exports("cs", e => "pointer" === eventSource(e));
            var isMouseEvent = exports("j", e => isNativeMouseEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && "mouse" === e.pointerType);
            var isDxMouseWheelEvent = exports("aE", e => e && "dxmousewheel" === e.type);
            var isTouchEvent = exports("o", e => isNativeTouchEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && "touch" === e.pointerType);
            var isFakeClickEvent = exports("gH", _ref2 => {
                var {
                    screenX: screenX,
                    offsetX: offsetX,
                    pageX: pageX
                } = _ref2;
                return 0 === screenX && !offsetX && 0 === pageX
            });
            var eventData = exports("z", _ref3 => {
                var {
                    pageX: pageX,
                    pageY: pageY,
                    timeStamp: timeStamp
                } = _ref3;
                return {
                    x: pageX,
                    y: pageY,
                    time: timeStamp
                }
            });
            var eventDelta = exports("A", (from, to) => ({
                x: to.x - from.x,
                y: to.y - from.y,
                time: to.time - from.time || 1
            }));
            var hasTouches = exports("cS", e => {
                var {
                    originalEvent: originalEvent,
                    pointers: pointers
                } = e;
                if (isNativeTouchEvent(e)) {
                    return (originalEvent.touches || []).length
                }
                if (isDxEvent(e)) {
                    return (pointers || []).length
                }
                return 0
            });
            var skipEvents = false;
            var needSkipEvent = exports("ee", e => {
                if (skipEvents) {
                    return true
                }
                var {
                    target: target
                } = e;
                var $target = $(target);
                var isContentEditable = (null === target || void 0 === target ? void 0 : target.isContentEditable) || (null === target || void 0 === target ? void 0 : target.hasAttribute("contenteditable"));
                var touchInEditable = $target.is("input, textarea, select") || isContentEditable;
                if (isDxMouseWheelEvent(e)) {
                    var isTextArea = $target.is("textarea") && $target.hasClass("dx-texteditor-input");
                    if (isTextArea || isContentEditable) {
                        return false
                    }
                    var isInputFocused = $target.is("input[type='number'], textarea, select") && $target.is(":focus");
                    return isInputFocused
                }
                if (isMouseEvent(e)) {
                    return touchInEditable || e.which > 1
                }
                if (isTouchEvent(e)) {
                    return touchInEditable && focused($target)
                }
            });
            var createEvent = exports("bA", (originalEvent, args) => {
                var event = copyEvent(originalEvent);
                args && extend(event, args);
                return event
            });
            var fireEvent = exports("g", props => {
                var {
                    originalEvent: originalEvent,
                    delegateTarget: delegateTarget
                } = props;
                var event = createEvent(originalEvent, props);
                eventsEngine.trigger(delegateTarget || event.target, event);
                return event
            });
            var normalizeKeyName = exports("bv", _ref4 => {
                var {
                    key: key,
                    which: which
                } = _ref4;
                var normalizedKey = KEY_MAP[null === key || void 0 === key ? void 0 : key.toLowerCase()] || key;
                var normalizedKeyFromWhich = LEGACY_KEY_CODES[which];
                if (normalizedKeyFromWhich && normalizedKey === key) {
                    return normalizedKeyFromWhich
                } else if (!normalizedKey && which) {
                    return String.fromCharCode(which)
                }
                return normalizedKey
            });
            var getChar = exports("ec", _ref5 => {
                var {
                    key: key,
                    which: which
                } = _ref5;
                return key || String.fromCharCode(which)
            });
            var addNamespace$1 = exports("b", addNamespace$2);
            var isCommandKeyPressed = exports("S", _ref6 => {
                var {
                    ctrlKey: ctrlKey,
                    metaKey: metaKey
                } = _ref6;
                return ctrlKey || metaKey
            });

            /**
             * DevExtreme (esm/animation/fx.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$5 = getWindow();
            var removeEventName = addNamespace$1(removeEvent, "dxFX");
            var RELATIVE_VALUE_REGEX = /^([+-])=(.*)/i;
            var ANIM_DATA_KEY = "dxAnimData";
            var ANIM_QUEUE_KEY = "dxAnimQueue";
            var TRANSFORM_PROP = "transform";
            var TransitionAnimationStrategy = {
                initAnimation: function($element, config) {
                    $element.css({
                        transitionProperty: "none"
                    });
                    if ("string" === typeof config.from) {
                        $element.addClass(config.from);
                    } else {
                        setProps($element, config.from);
                    }
                    var that = this;
                    var deferred = new Deferred;
                    var cleanupWhen = config.cleanupWhen;
                    config.transitionAnimation = {
                        deferred: deferred,
                        finish: function() {
                            that._finishTransition($element);
                            if (cleanupWhen) {
                                when(deferred, cleanupWhen).always((function() {
                                    that._cleanup($element, config);
                                }));
                            } else {
                                that._cleanup($element, config);
                            }
                            deferred.resolveWith($element, [config, $element]);
                        }
                    };
                    this._completeAnimationCallback($element, config).done((function() {
                        config.transitionAnimation.finish();
                    })).fail((function() {
                        deferred.rejectWith($element, [config, $element]);
                    }));
                    if (!config.duration) {
                        config.transitionAnimation.finish();
                    }
                    $element.css("transform");
                },
                animate: function($element, config) {
                    this._startAnimation($element, config);
                    return config.transitionAnimation.deferred.promise()
                },
                _completeAnimationCallback: function($element, config) {
                    var that = this;
                    var startTime = Date.now() + config.delay;
                    var deferred = new Deferred;
                    var transitionEndFired = new Deferred;
                    var simulatedTransitionEndFired = new Deferred;
                    var simulatedEndEventTimer;
                    var transitionEndEventFullName = transitionEndEventName() + ".dxFX";
                    config.transitionAnimation.cleanup = function() {
                        clearTimeout(simulatedEndEventTimer);
                        clearTimeout(waitForJSCompleteTimer);
                        eventsEngine.off($element, transitionEndEventFullName);
                        eventsEngine.off($element, removeEventName);
                    };
                    eventsEngine.one($element, transitionEndEventFullName, (function() {
                        if (Date.now() - startTime >= config.duration) {
                            transitionEndFired.reject();
                        }
                    }));
                    eventsEngine.off($element, removeEventName);
                    eventsEngine.on($element, removeEventName, (function() {
                        that.stop($element, config);
                        deferred.reject();
                    }));
                    var waitForJSCompleteTimer = setTimeout((function() {
                        simulatedEndEventTimer = setTimeout((function() {
                            simulatedTransitionEndFired.reject();
                        }), config.duration + config.delay + fx._simulatedTransitionEndDelay);
                        when(transitionEndFired, simulatedTransitionEndFired).fail(function() {
                            deferred.resolve();
                        }.bind(this));
                    }));
                    return deferred.promise()
                },
                _startAnimation: function($element, config) {
                    $element.css({
                        transitionProperty: "all",
                        transitionDelay: config.delay + "ms",
                        transitionDuration: config.duration + "ms",
                        transitionTimingFunction: config.easing
                    });
                    if ("string" === typeof config.to) {
                        $element[0].className += " " + config.to;
                    } else if (config.to) {
                        setProps($element, config.to);
                    }
                },
                _finishTransition: function($element) {
                    $element.css("transition", "none");
                },
                _cleanup: function($element, config) {
                    config.transitionAnimation.cleanup();
                    if ("string" === typeof config.from) {
                        $element.removeClass(config.from);
                        $element.removeClass(config.to);
                    }
                },
                stop: function($element, config, jumpToEnd) {
                    if (!config) {
                        return
                    }
                    if (jumpToEnd) {
                        config.transitionAnimation.finish();
                    } else {
                        if (isPlainObject(config.to)) {
                            each(config.to, (function(key) {
                                $element.css(key, $element.css(key));
                            }));
                        }
                        this._finishTransition($element);
                        this._cleanup($element, config);
                    }
                }
            };
            var FrameAnimationStrategy = {
                initAnimation: function($element, config) {
                    setProps($element, config.from);
                },
                animate: function($element, config) {
                    var deferred = new Deferred;
                    var that = this;
                    if (!config) {
                        return deferred.reject().promise()
                    }
                    each(config.to, (function(prop) {
                        if (void 0 === config.from[prop]) {
                            config.from[prop] = that._normalizeValue($element.css(prop));
                        }
                    }));
                    if (config.to[TRANSFORM_PROP]) {
                        config.from[TRANSFORM_PROP] = that._parseTransform(config.from[TRANSFORM_PROP]);
                        config.to[TRANSFORM_PROP] = that._parseTransform(config.to[TRANSFORM_PROP]);
                    }
                    config.frameAnimation = {
                        to: config.to,
                        from: config.from,
                        currentValue: config.from,
                        easing: convertTransitionTimingFuncToEasing(config.easing),
                        duration: config.duration,
                        startTime: (new Date).valueOf(),
                        finish: function() {
                            this.currentValue = this.to;
                            this.draw();
                            cancelAnimationFrame(config.frameAnimation.animationFrameId);
                            deferred.resolve();
                        },
                        draw: function() {
                            if (config.draw) {
                                config.draw(this.currentValue);
                                return
                            }
                            var currentValue = extend({}, this.currentValue);
                            if (currentValue[TRANSFORM_PROP]) {
                                currentValue[TRANSFORM_PROP] = map(currentValue[TRANSFORM_PROP], (function(value, prop) {
                                    if ("translate" === prop) {
                                        return getTranslateCss(value)
                                    } else if ("scale" === prop) {
                                        return "scale(" + value + ")"
                                    } else if ("rotate" === prop.substr(0, prop.length - 1)) {
                                        return prop + "(" + value + "deg)"
                                    }
                                })).join(" ");
                            }
                            $element.css(currentValue);
                        }
                    };
                    if (config.delay) {
                        config.frameAnimation.startTime += config.delay;
                        config.frameAnimation.delayTimeout = setTimeout((function() {
                            that._startAnimation($element, config);
                        }), config.delay);
                    } else {
                        that._startAnimation($element, config);
                    }
                    return deferred.promise()
                },
                _startAnimation: function($element, config) {
                    eventsEngine.off($element, removeEventName);
                    eventsEngine.on($element, removeEventName, (function() {
                        if (config.frameAnimation) {
                            cancelAnimationFrame(config.frameAnimation.animationFrameId);
                        }
                    }));
                    this._animationStep($element, config);
                },
                _parseTransform: function(transformString) {
                    var result = {};
                    each(transformString.match(/\w+\d*\w*\([^)]*\)\s*/g), (function(i, part) {
                        var translateData = parseTranslate(part);
                        var scaleData = part.match(/scale\((.+?)\)/);
                        var rotateData = part.match(/(rotate.)\((.+)deg\)/);
                        if (translateData) {
                            result.translate = translateData;
                        }
                        if (scaleData && scaleData[1]) {
                            result.scale = parseFloat(scaleData[1]);
                        }
                        if (rotateData && rotateData[1]) {
                            result[rotateData[1]] = parseFloat(rotateData[2]);
                        }
                    }));
                    return result
                },
                stop: function($element, config, jumpToEnd) {
                    var frameAnimation = config && config.frameAnimation;
                    if (!frameAnimation) {
                        return
                    }
                    cancelAnimationFrame(frameAnimation.animationFrameId);
                    clearTimeout(frameAnimation.delayTimeout);
                    if (jumpToEnd) {
                        frameAnimation.finish();
                    }
                    delete config.frameAnimation;
                },
                _animationStep: function($element, config) {
                    var frameAnimation = config && config.frameAnimation;
                    if (!frameAnimation) {
                        return
                    }
                    var now = (new Date).valueOf();
                    if (now >= frameAnimation.startTime + frameAnimation.duration) {
                        frameAnimation.finish();
                        return
                    }
                    frameAnimation.currentValue = this._calcStepValue(frameAnimation, now - frameAnimation.startTime);
                    frameAnimation.draw();
                    var that = this;
                    frameAnimation.animationFrameId = requestAnimationFrame((function() {
                        that._animationStep($element, config);
                    }));
                },
                _calcStepValue: function(frameAnimation, currentDuration) {
                    return function calcValueRecursively(from, to) {
                        var result = Array.isArray(to) ? [] : {};
                        each(to, (function(propName, endPropValue) {
                            if ("string" === typeof endPropValue && false === parseFloat(endPropValue)) {
                                return true
                            }
                            result[propName] = "object" === typeof endPropValue ? calcValueRecursively(from[propName], endPropValue) : function(propName) {
                                var x = currentDuration / frameAnimation.duration;
                                var t = currentDuration;
                                var b = 1 * from[propName];
                                var c = to[propName] - from[propName];
                                var d = frameAnimation.duration;
                                return getEasing(frameAnimation.easing)(x, t, b, c, d)
                            }(propName);
                        }));
                        return result
                    }(frameAnimation.from, frameAnimation.to)
                },
                _normalizeValue: function(value) {
                    var numericValue = parseFloat(value);
                    if (false === numericValue) {
                        return value
                    }
                    return numericValue
                }
            };
            var FallbackToNoAnimationStrategy = {
                initAnimation: function() {},
                animate: function() {
                    return (new Deferred).resolve().promise()
                },
                stop: noop,
                isSynchronous: true
            };
            var getAnimationStrategy = function(config) {
                config = config || {};
                var animationStrategies = {
                    transition: transition() ? TransitionAnimationStrategy : FrameAnimationStrategy,
                    frame: FrameAnimationStrategy,
                    noAnimation: FallbackToNoAnimationStrategy
                };
                var strategy = config.strategy || "transition";
                if ("css" === config.type && !transition()) {
                    strategy = "noAnimation";
                }
                return animationStrategies[strategy]
            };
            var baseConfigValidator = function(config, animationType, validate, typeMessage) {
                each(["from", "to"], (function() {
                    if (!validate(config[this])) {
                        throw errors$2.Error("E0010", animationType, this, typeMessage)
                    }
                }));
            };
            var isObjectConfigValidator = function(config, animationType) {
                return baseConfigValidator(config, animationType, (function(target) {
                    return isPlainObject(target)
                }), "a plain object")
            };
            var isStringConfigValidator = function(config, animationType) {
                return baseConfigValidator(config, animationType, (function(target) {
                    return "string" === typeof target
                }), "a string")
            };
            var CustomAnimationConfigurator = {
                setup: function() {}
            };
            var CssAnimationConfigurator = {
                validateConfig: function(config) {
                    isStringConfigValidator(config, "css");
                },
                setup: function() {}
            };
            var positionAliases = {
                top: {
                    my: "bottom center",
                    at: "top center"
                },
                bottom: {
                    my: "top center",
                    at: "bottom center"
                },
                right: {
                    my: "left center",
                    at: "right center"
                },
                left: {
                    my: "right center",
                    at: "left center"
                }
            };
            var SlideAnimationConfigurator = {
                validateConfig: function(config) {
                    isObjectConfigValidator(config, "slide");
                },
                setup: function($element, config) {
                    var location = locate($element);
                    if ("slide" !== config.type) {
                        var positioningConfig = "slideIn" === config.type ? config.from : config.to;
                        positioningConfig.position = extend({
                            of: window$5
                        }, positionAliases[config.direction]);
                        setupPosition($element, positioningConfig);
                    }
                    this._setUpConfig(location, config.from);
                    this._setUpConfig(location, config.to);
                    clearCache($element);
                },
                _setUpConfig: function(location, config) {
                    config.left = "left" in config ? config.left : "+=0";
                    config.top = "top" in config ? config.top : "+=0";
                    this._initNewPosition(location, config);
                },
                _initNewPosition: function(location, config) {
                    var position = {
                        left: config.left,
                        top: config.top
                    };
                    delete config.left;
                    delete config.top;
                    var relativeValue = this._getRelativeValue(position.left);
                    if (void 0 !== relativeValue) {
                        position.left = relativeValue + location.left;
                    } else {
                        config.left = 0;
                    }
                    relativeValue = this._getRelativeValue(position.top);
                    if (void 0 !== relativeValue) {
                        position.top = relativeValue + location.top;
                    } else {
                        config.top = 0;
                    }
                    config[TRANSFORM_PROP] = getTranslateCss({
                        x: position.left,
                        y: position.top
                    });
                },
                _getRelativeValue: function(value) {
                    var relativeValue;
                    if ("string" === typeof value && (relativeValue = RELATIVE_VALUE_REGEX.exec(value))) {
                        return parseInt(relativeValue[1] + "1") * relativeValue[2]
                    }
                }
            };
            var FadeAnimationConfigurator = {
                setup: function($element, config) {
                    var _from$opacity, _to$opacity;
                    var from = config.from;
                    var to = config.to;
                    var defaultFromOpacity = "fadeOut" === config.type ? 1 : 0;
                    var defaultToOpacity = "fadeOut" === config.type ? 0 : 1;
                    var fromOpacity = isPlainObject(from) ? String(null !== (_from$opacity = from.opacity) && void 0 !== _from$opacity ? _from$opacity : defaultFromOpacity) : String(from);
                    var toOpacity = isPlainObject(to) ? String(null !== (_to$opacity = to.opacity) && void 0 !== _to$opacity ? _to$opacity : defaultToOpacity) : String(to);
                    if (!config.skipElementInitialStyles) {
                        fromOpacity = $element.css("opacity");
                    }
                    switch (config.type) {
                        case "fadeIn":
                            toOpacity = 1;
                            break;
                        case "fadeOut":
                            toOpacity = 0;
                    }
                    config.from = {
                        visibility: "visible",
                        opacity: fromOpacity
                    };
                    config.to = {
                        opacity: toOpacity
                    };
                }
            };
            var PopAnimationConfigurator = {
                validateConfig: function(config) {
                    isObjectConfigValidator(config, "pop");
                },
                setup: function($element, config) {
                    var from = config.from;
                    var to = config.to;
                    var fromOpacity = "opacity" in from ? from.opacity : $element.css("opacity");
                    var toOpacity = "opacity" in to ? to.opacity : 1;
                    var fromScale = "scale" in from ? from.scale : 0;
                    var toScale = "scale" in to ? to.scale : 1;
                    config.from = {
                        opacity: fromOpacity
                    };
                    var translate = getTranslate($element);
                    config.from[TRANSFORM_PROP] = this._getCssTransform(translate, fromScale);
                    config.to = {
                        opacity: toOpacity
                    };
                    config.to[TRANSFORM_PROP] = this._getCssTransform(translate, toScale);
                },
                _getCssTransform: function(translate, scale) {
                    return getTranslateCss(translate) + "scale(" + scale + ")"
                }
            };
            var animationConfigurators = {
                custom: CustomAnimationConfigurator,
                slide: SlideAnimationConfigurator,
                slideIn: SlideAnimationConfigurator,
                slideOut: SlideAnimationConfigurator,
                fade: FadeAnimationConfigurator,
                fadeIn: FadeAnimationConfigurator,
                fadeOut: FadeAnimationConfigurator,
                pop: PopAnimationConfigurator,
                css: CssAnimationConfigurator
            };
            var getAnimationConfigurator = function(config) {
                var result = animationConfigurators[config.type];
                if (!result) {
                    throw errors$2.Error("E0011", config.type)
                }
                return result
            };
            var defaultJSConfig = {
                type: "custom",
                from: {},
                to: {},
                duration: 400,
                start: noop,
                complete: noop,
                easing: "ease",
                delay: 0
            };
            var defaultCssConfig = {
                duration: 400,
                easing: "ease",
                delay: 0
            };

            function setupAnimationOnElement() {
                var $element = this.element;
                var config = this.config;
                setupPosition($element, config.from);
                setupPosition($element, config.to);
                this.configurator.setup($element, config);
                $element.data(ANIM_DATA_KEY, this);
                this.strategy.initAnimation($element, config);
                if (config.start) {
                    var element = getPublicElement($element);
                    config.start.apply(this, [element, config]);
                }
            }
            var onElementAnimationComplete = function(animation) {
                var $element = animation.element;
                var config = animation.config;
                $element.removeData(ANIM_DATA_KEY);
                if (config.complete) {
                    var element = getPublicElement($element);
                    config.complete.apply(this, [element, config]);
                }
                animation.deferred.resolveWith(this, [$element, config]);
            };
            var startAnimationOnElement = function() {
                var animation = this;
                var $element = animation.element;
                var config = animation.config;
                animation.isStarted = true;
                return animation.strategy.animate($element, config).done((function() {
                    onElementAnimationComplete(animation);
                })).fail((function() {
                    animation.deferred.rejectWith(this, [$element, config]);
                }))
            };
            var stopAnimationOnElement = function(jumpToEnd) {
                var $element = this.element;
                var config = this.config;
                clearTimeout(this.startTimeout);
                if (!this.isStarted) {
                    this.start();
                }
                this.strategy.stop($element, config, jumpToEnd);
            };
            var scopedRemoveEvent = addNamespace$1(removeEvent, "dxFXStartAnimation");
            var subscribeToRemoveEvent = function(animation) {
                eventsEngine.off(animation.element, scopedRemoveEvent);
                eventsEngine.on(animation.element, scopedRemoveEvent, (function() {
                    fx.stop(animation.element);
                }));
                animation.deferred.always((function() {
                    eventsEngine.off(animation.element, scopedRemoveEvent);
                }));
            };
            var createAnimation = function(element, initialConfig) {
                var defaultConfig = "css" === initialConfig.type ? defaultCssConfig : defaultJSConfig;
                var config = extend(true, {}, defaultConfig, initialConfig);
                var configurator = getAnimationConfigurator(config);
                var strategy = getAnimationStrategy(config);
                var animation = {
                    element: $(element),
                    config: config,
                    configurator: configurator,
                    strategy: strategy,
                    isSynchronous: strategy.isSynchronous,
                    setup: setupAnimationOnElement,
                    start: startAnimationOnElement,
                    stop: stopAnimationOnElement,
                    deferred: new Deferred
                };
                if (isFunction(configurator.validateConfig)) {
                    configurator.validateConfig(config);
                }
                subscribeToRemoveEvent(animation);
                return animation
            };
            var animate = function(element, config) {
                var $element = $(element);
                if (!$element.length) {
                    return (new Deferred).resolve().promise()
                }
                var animation = createAnimation($element, config);
                pushInAnimationQueue($element, animation);
                return animation.deferred.promise()
            };

            function pushInAnimationQueue($element, animation) {
                var queueData = getAnimQueueData($element);
                writeAnimQueueData($element, queueData);
                queueData.push(animation);
                if (!isAnimating($element)) {
                    shiftFromAnimationQueue($element, queueData);
                }
            }

            function getAnimQueueData($element) {
                return $element.data(ANIM_QUEUE_KEY) || []
            }

            function writeAnimQueueData($element, queueData) {
                $element.data(ANIM_QUEUE_KEY, queueData);
            }
            var destroyAnimQueueData = function($element) {
                $element.removeData(ANIM_QUEUE_KEY);
            };

            function isAnimating($element) {
                return !!$element.data(ANIM_DATA_KEY)
            }

            function shiftFromAnimationQueue($element, queueData) {
                queueData = getAnimQueueData($element);
                if (!queueData.length) {
                    return
                }
                var animation = queueData.shift();
                if (0 === queueData.length) {
                    destroyAnimQueueData($element);
                }
                executeAnimation(animation).done((function() {
                    if (!isAnimating($element)) {
                        shiftFromAnimationQueue($element);
                    }
                }));
            }

            function executeAnimation(animation) {
                animation.setup();
                if (animation.isSynchronous) {
                    animation.start();
                } else {
                    animation.startTimeout = setTimeout((function() {
                        animation.start();
                    }));
                }
                return animation.deferred.promise()
            }

            function setupPosition($element, config) {
                if (!config || !config.position) {
                    return
                }
                var win = $(window$5);
                var left = 0;
                var top = 0;
                var position = positionUtils.calculate($element, config.position);
                var offset = $element.offset();
                var currentPosition = $element.position();
                if (currentPosition.top > offset.top) {
                    top = win.scrollTop();
                }
                if (currentPosition.left > offset.left) {
                    left = win.scrollLeft();
                }
                extend(config, {
                    left: position.h.location - offset.left + currentPosition.left - left,
                    top: position.v.location - offset.top + currentPosition.top - top
                });
                delete config.position;
            }

            function setProps($element, props) {
                each(props, (function(key, value) {
                    try {
                        $element.css(key, isFunction(value) ? value() : value);
                    } catch (e) {}
                }));
            }
            var stop = function(element, jumpToEnd) {
                var $element = $(element);
                var queueData = getAnimQueueData($element);
                each(queueData, (function(_, animation) {
                    animation.config.delay = 0;
                    animation.config.duration = 0;
                    animation.isSynchronous = true;
                }));
                if (!isAnimating($element)) {
                    shiftFromAnimationQueue($element, queueData);
                }
                var animation = $element.data(ANIM_DATA_KEY);
                if (animation) {
                    animation.stop(jumpToEnd);
                }
                $element.removeData(ANIM_DATA_KEY);
                destroyAnimQueueData($element);
            };
            var fx = exports("ac", {
                off: false,
                animationTypes: animationConfigurators,
                animate: animate,
                createAnimation: createAnimation,
                isAnimating: isAnimating,
                stop: stop,
                _simulatedTransitionEndDelay: 100
            });

            /**
             * DevExtreme (esm/core/component_registrator_callbacks.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var callbacks = new MemorizedCallbacks;

            /**
             * DevExtreme (esm/core/utils/public_component.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var COMPONENT_NAMES_DATA_KEY = "dxComponents";
            var ANONYMOUS_COMPONENT_DATA_KEY = "dxPrivateComponent";
            var componentNames = new WeakMap;
            var nextAnonymousComponent = 0;
            var getName = exports("cR", function(componentClass, newName) {
                if (isDefined(newName)) {
                    componentNames.set(componentClass, newName);
                    return
                }
                if (!componentNames.has(componentClass)) {
                    var generatedName = ANONYMOUS_COMPONENT_DATA_KEY + nextAnonymousComponent++;
                    componentNames.set(componentClass, generatedName);
                    return generatedName
                }
                return componentNames.get(componentClass)
            });
            function attachInstanceToElement($element, componentInstance, disposeFn) {
                var data$1 = data($element.get(0));
                var name = getName(componentInstance.constructor);
                data$1[name] = componentInstance;
                if (disposeFn) {
                    eventsEngine.one($element, removeEvent, (function() {
                        disposeFn.call(componentInstance);
                    }));
                }
                if (!data$1[COMPONENT_NAMES_DATA_KEY]) {
                    data$1[COMPONENT_NAMES_DATA_KEY] = [];
                }
                data$1[COMPONENT_NAMES_DATA_KEY].push(name);
            }
            function getInstanceByElement($element, componentClass) {
                var name = getName(componentClass);
                return data($element.get(0), name)
            }

            /**
             * DevExtreme (esm/core/component_registrator.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var registerComponent = exports("af", function(name, namespace, componentClass) {
                if (!componentClass) {
                    componentClass = namespace;
                } else {
                    namespace[name] = componentClass;
                }
                getName(componentClass, name);
                callbacks.fire(name, componentClass);
            });
            var registerRendererComponent = function(name, componentClass) {
                $.fn[name] = function(options) {
                    var isMemberInvoke = "string" === typeof options;
                    var result;
                    if (isMemberInvoke) {
                        var memberName = options;
                        var memberArgs = [].slice.call(arguments).slice(1);
                        this.each((function() {
                            var instance = componentClass.getInstance(this);
                            if (!instance) {
                                throw errors$2.Error("E0009", name)
                            }
                            var member = instance[memberName];
                            var memberValue = member.apply(instance, memberArgs);
                            if (void 0 === result) {
                                result = memberValue;
                            }
                        }));
                    } else {
                        this.each((function() {
                            var instance = componentClass.getInstance(this);
                            if (instance) {
                                instance.option(options);
                            } else {
                                new componentClass(this, options);
                            }
                        }));
                        result = this;
                    }
                    return result
                };
            };
            callbacks.add(registerRendererComponent);

            /**
             * DevExtreme (esm/core/utils/dom.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$4 = getWindow();
            var getRootNodeHost = element => {
                if (!element.getRootNode) {
                    return
                }
                var host = element.getRootNode().host;
                if (isString(host)) {
                    return
                }
                return host
            };
            var resetActiveElement = exports("c", () => {
                var activeElement = domAdapter.getActiveElement();
                if (activeElement && activeElement !== domAdapter.getBody()) {
                    var _activeElement$blur;
                    null === (_activeElement$blur = activeElement.blur) || void 0 === _activeElement$blur ? void 0 : _activeElement$blur.call(activeElement);
                }
            });
            var clearSelection = () => {
                var selection = window$4.getSelection();
                if (!selection) {
                    return
                }
                if ("Caret" === selection.type) {
                    return
                }
                if (selection.empty) {
                    selection.empty();
                } else if (selection.removeAllRanges) {
                    try {
                        selection.removeAllRanges();
                    } catch (e) {}
                }
            };
            var closestCommonParent = exports("e9", (startTarget, endTarget) => {
                var $startTarget = $(startTarget);
                var $endTarget = $(endTarget);
                if ($startTarget[0] === $endTarget[0]) {
                    return $startTarget[0]
                }
                var $startParents = $startTarget.parents();
                var $endParents = $endTarget.parents();
                var startingParent = Math.min($startParents.length, $endParents.length);
                for (var i = -startingParent; i < 0; i++) {
                    if ($startParents.get(i) === $endParents.get(i)) {
                        return $startParents.get(i)
                    }
                }
            });
            var normalizeTemplateElement = element => {
                var $element = isDefined(element) && (element.nodeType || isRenderer(element)) ? $(element) : $("<div>").html(element).contents();
                if (1 === $element.length) {
                    if ($element.is("script")) {
                        $element = normalizeTemplateElement($element.html().trim());
                    } else if ($element.is("table")) {
                        $element = $element.children("tbody").contents();
                    }
                }
                return $element
            };
            var clipboardText = exports("by", (event, text) => {
                var clipboard = event.originalEvent && event.originalEvent.clipboardData || window$4.clipboardData;
                if (!text) {
                    return clipboard && clipboard.getData("Text")
                }
                clipboard && clipboard.setData("Text", text);
            });
            var contains = exports("l", (container, element) => {
                if (!element) {
                    return false
                }
                if (isWindow(container)) {
                    return contains(container.document, element)
                }
                return container.contains(element) || contains(container, getRootNodeHost(element))
            });
            var createTextElementHiddenCopy = exports("es", (element, text, options) => {
                var elementStyles = window$4.getComputedStyle($(element).get(0));
                var includePaddings = options && options.includePaddings;
                return $("<div>").text(text).css({
                    fontStyle: elementStyles.fontStyle,
                    fontVariant: elementStyles.fontVariant,
                    fontWeight: elementStyles.fontWeight,
                    fontSize: elementStyles.fontSize,
                    fontFamily: elementStyles.fontFamily,
                    letterSpacing: elementStyles.letterSpacing,
                    border: elementStyles.border,
                    paddingTop: includePaddings ? elementStyles.paddingTop : "",
                    paddingRight: includePaddings ? elementStyles.paddingRight : "",
                    paddingBottom: includePaddings ? elementStyles.paddingBottom : "",
                    paddingLeft: includePaddings ? elementStyles.paddingLeft : "",
                    visibility: "hidden",
                    whiteSpace: "pre",
                    position: "absolute",
                    float: "left"
                })
            });
            var insertBefore = (element, newElement) => {
                if (newElement) {
                    domAdapter.insertElement(element.parentNode, newElement, element);
                }
                return element
            };
            var replaceWith = exports("aA", (element, newElement) => {
                if (!(newElement && newElement[0])) {
                    return
                }
                if (newElement.is(element)) {
                    return element
                }
                each(newElement, (_, currentElement) => {
                    insertBefore(element[0], currentElement);
                });
                element.remove();
                return newElement
            });
            var isElementInDom = exports("gI", $element => {
                var element = null === $element || void 0 === $element ? void 0 : $element.get(0);
                var shadowHost = null === element || void 0 === element ? void 0 : element.getRootNode().host;
                return !!$(shadowHost || element).closest(getWindow().document).length
            });

            /**
             * DevExtreme (esm/events/visibility_change.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var triggerVisibilityChangeEvent = function(eventName) {
                return function(element) {
                    var $element = $(element || "body");
                    var changeHandlers = $element.filter(".dx-visibility-change-handler").add($element.find(".dx-visibility-change-handler"));
                    for (var i = 0; i < changeHandlers.length; i++) {
                        eventsEngine.triggerHandler(changeHandlers[i], eventName);
                    }
                }
            };
            var triggerShownEvent = exports("ex", triggerVisibilityChangeEvent("dxshown"));
            var triggerHidingEvent = triggerVisibilityChangeEvent("dxhiding");
            var triggerResizeEvent = exports("b3", triggerVisibilityChangeEvent("dxresize"));

            /**
             * DevExtreme (esm/core/templates/template_base.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var renderedCallbacks = Callbacks({
                syncStrategy: true
            });
            class TemplateBase {
                render(options) {
                    options = options || {};
                    var onRendered = options.onRendered;
                    delete options.onRendered;
                    var $result;
                    if (options.renovated && options.transclude && this._element) {
                        $result = $("<div>").append(this._element).contents();
                    } else {
                        $result = this._renderCore(options);
                    }
                    this._ensureResultInContainer($result, options.container);
                    renderedCallbacks.fire($result, options.container);
                    onRendered && onRendered();
                    return $result
                }
                _ensureResultInContainer($result, container) {
                    if (!container) {
                        return
                    }
                    var $container = $(container);
                    var resultInContainer = contains($container.get(0), $result.get(0));
                    $container.append($result);
                    if (resultInContainer) {
                        return
                    }
                    var resultInBody = contains(domAdapter.getBody(), $container.get(0));
                    if (!resultInBody) {
                        return
                    }
                    triggerShownEvent($result);
                }
                _renderCore() {
                    throw errors$2.Error("E0001")
                }
            } exports("T", TemplateBase);

            /**
             * DevExtreme (esm/events/pointer/base.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var POINTER_EVENTS_NAMESPACE = "dxPointerEvents";
            var BaseStrategy = classImpl.inherit({
                ctor: function(eventName, originalEvents) {
                    this._eventName = eventName;
                    this._originalEvents = addNamespace$1(originalEvents, POINTER_EVENTS_NAMESPACE);
                    this._handlerCount = 0;
                    this.noBubble = this._isNoBubble();
                },
                _isNoBubble: function() {
                    var eventName = this._eventName;
                    return "dxpointerenter" === eventName || "dxpointerleave" === eventName
                },
                _handler: function(e) {
                    var _originalEvent$target;
                    var delegateTarget = this._getDelegateTarget(e);
                    var event = {
                        type: this._eventName,
                        pointerType: e.pointerType || eventSource(e),
                        originalEvent: e,
                        delegateTarget: delegateTarget,
                        timeStamp: browser.mozilla ? (new Date).getTime() : e.timeStamp
                    };
                    var originalEvent = e.originalEvent;
                    if (null !== originalEvent && void 0 !== originalEvent && null !== (_originalEvent$target = originalEvent.target) && void 0 !== _originalEvent$target && _originalEvent$target.shadowRoot) {
                        var _originalEvent$path, _originalEvent$compos;
                        var path = null !== (_originalEvent$path = originalEvent.path) && void 0 !== _originalEvent$path ? _originalEvent$path : null === (_originalEvent$compos = originalEvent.composedPath) || void 0 === _originalEvent$compos ? void 0 : _originalEvent$compos.call(originalEvent);
                        event.target = path[0];
                    }
                    return this._fireEvent(event)
                },
                _getDelegateTarget: function(e) {
                    var delegateTarget;
                    if (this.noBubble) {
                        delegateTarget = e.delegateTarget;
                    }
                    return delegateTarget
                },
                _fireEvent: function(args) {
                    return fireEvent(args)
                },
                _setSelector: function(handleObj) {
                    this._selector = this.noBubble && handleObj ? handleObj.selector : null;
                },
                _getSelector: function() {
                    return this._selector
                },
                setup: function() {
                    return true
                },
                add: function(element, handleObj) {
                    if (this._handlerCount <= 0 || this.noBubble) {
                        element = this.noBubble ? element : domAdapter.getDocument();
                        this._setSelector(handleObj);
                        var that = this;
                        eventsEngine.on(element, this._originalEvents, this._getSelector(), (function(e) {
                            that._handler(e);
                        }));
                    }
                    if (!this.noBubble) {
                        this._handlerCount++;
                    }
                },
                remove: function(handleObj) {
                    this._setSelector(handleObj);
                    if (!this.noBubble) {
                        this._handlerCount--;
                    }
                },
                teardown: function(element) {
                    if (this._handlerCount && !this.noBubble) {
                        return
                    }
                    element = this.noBubble ? element : domAdapter.getDocument();
                    if (this._originalEvents !== "." + POINTER_EVENTS_NAMESPACE) {
                        eventsEngine.off(element, this._originalEvents, this._getSelector());
                    }
                },
                dispose: function(element) {
                    element = this.noBubble ? element : domAdapter.getDocument();
                    eventsEngine.off(element, this._originalEvents);
                }
            });

            /**
             * DevExtreme (esm/events/pointer/touch.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var eventMap$2 = {
                dxpointerdown: "touchstart",
                dxpointermove: "touchmove",
                dxpointerup: "touchend",
                dxpointercancel: "touchcancel",
                dxpointerover: "",
                dxpointerout: "",
                dxpointerenter: "",
                dxpointerleave: ""
            };
            var normalizeTouchEvent = function(e) {
                var pointers = [];
                each(e.touches, (function(_, touch) {
                    pointers.push(extend({
                        pointerId: touch.identifier
                    }, touch));
                }));
                return {
                    pointers: pointers,
                    pointerId: e.changedTouches[0].identifier
                }
            };
            var skipTouchWithSameIdentifier = function(pointerEvent) {
                return "ios" === devices.real().platform && ("dxpointerdown" === pointerEvent || "dxpointerup" === pointerEvent)
            };
            var TouchStrategy = BaseStrategy.inherit({
                ctor: function() {
                    this.callBase.apply(this, arguments);
                    this._pointerId = 0;
                },
                _handler: function(e) {
                    if (skipTouchWithSameIdentifier(this._eventName)) {
                        var touch = e.changedTouches[0];
                        if (this._pointerId === touch.identifier && 0 !== this._pointerId) {
                            return
                        }
                        this._pointerId = touch.identifier;
                    }
                    return this.callBase.apply(this, arguments)
                },
                _fireEvent: function(args) {
                    return this.callBase(extend(normalizeTouchEvent(args.originalEvent), args))
                }
            });
            TouchStrategy.map = eventMap$2;
            TouchStrategy.normalize = normalizeTouchEvent;
            var TouchStrategy$1 = TouchStrategy;

            /**
             * DevExtreme (esm/events/pointer/observer.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var addEventsListener = function(events, handler) {
                readyCallbacks$1.add((function() {
                    events.split(" ").forEach((function(event) {
                        domAdapter.listen(domAdapter.getDocument(), event, handler, true);
                    }));
                }));
            };
            var Observer = function(eventMap, pointerEquals, onPointerAdding) {
                onPointerAdding = onPointerAdding || function() {};
                var pointers = [];
                var getPointerIndex = function(e) {
                    var index = -1;
                    each(pointers, (function(i, pointer) {
                        if (!pointerEquals(e, pointer)) {
                            return true
                        }
                        index = i;
                        return false
                    }));
                    return index
                };
                var removePointer = function(e) {
                    var index = getPointerIndex(e);
                    if (index > -1) {
                        pointers.splice(index, 1);
                    }
                };
                addEventsListener(eventMap.dxpointerdown, (function(e) {
                    if (-1 === getPointerIndex(e)) {
                        onPointerAdding(e);
                        pointers.push(e);
                    }
                }));
                addEventsListener(eventMap.dxpointermove, (function(e) {
                    pointers[getPointerIndex(e)] = e;
                }));
                addEventsListener(eventMap.dxpointerup, removePointer);
                addEventsListener(eventMap.dxpointercancel, removePointer);
                this.pointers = function() {
                    return pointers
                };
                this.reset = function() {
                    pointers = [];
                };
            };

            /**
             * DevExtreme (esm/events/pointer/mouse.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var eventMap$1 = {
                dxpointerdown: "mousedown",
                dxpointermove: "mousemove",
                dxpointerup: "mouseup",
                dxpointercancel: "",
                dxpointerover: "mouseover",
                dxpointerout: "mouseout",
                dxpointerenter: "mouseenter",
                dxpointerleave: "mouseleave"
            };
            var normalizeMouseEvent = function(e) {
                e.pointerId = 1;
                return {
                    pointers: observer.pointers(),
                    pointerId: 1
                }
            };
            var observer;
            var activated$1 = false;
            var activateStrategy$1 = function() {
                if (activated$1) {
                    return
                }
                observer = new Observer(eventMap$1, (function() {
                    return true
                }));
                activated$1 = true;
            };
            var MouseStrategy = BaseStrategy.inherit({
                ctor: function() {
                    this.callBase.apply(this, arguments);
                    activateStrategy$1();
                },
                _fireEvent: function(args) {
                    return this.callBase(extend(normalizeMouseEvent(args.originalEvent), args))
                }
            });
            MouseStrategy.map = eventMap$1;
            MouseStrategy.normalize = normalizeMouseEvent;
            MouseStrategy.activate = activateStrategy$1;
            MouseStrategy.resetObserver = function() {
                observer.reset();
            };
            var MouseStrategy$1 = MouseStrategy;

            /**
             * DevExtreme (esm/events/pointer/mouse_and_touch.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var eventMap = {
                dxpointerdown: "touchstart mousedown",
                dxpointermove: "touchmove mousemove",
                dxpointerup: "touchend mouseup",
                dxpointercancel: "touchcancel",
                dxpointerover: "mouseover",
                dxpointerout: "mouseout",
                dxpointerenter: "mouseenter",
                dxpointerleave: "mouseleave"
            };
            var activated = false;
            var activateStrategy = function() {
                if (activated) {
                    return
                }
                MouseStrategy$1.activate();
                activated = true;
            };
            var MouseAndTouchStrategy = BaseStrategy.inherit({
                EVENT_LOCK_TIMEOUT: 100,
                ctor: function() {
                    this.callBase.apply(this, arguments);
                    activateStrategy();
                },
                _handler: function(e) {
                    var isMouse = isMouseEvent(e);
                    if (!isMouse) {
                        this._skipNextEvents = true;
                    }
                    if (isMouse && this._mouseLocked) {
                        return
                    }
                    if (isMouse && this._skipNextEvents) {
                        this._skipNextEvents = false;
                        this._mouseLocked = true;
                        clearTimeout(this._unlockMouseTimer);
                        var that = this;
                        this._unlockMouseTimer = setTimeout((function() {
                            that._mouseLocked = false;
                        }), this.EVENT_LOCK_TIMEOUT);
                        return
                    }
                    return this.callBase(e)
                },
                _fireEvent: function(args) {
                    var normalizer = isMouseEvent(args.originalEvent) ? MouseStrategy$1.normalize : TouchStrategy$1.normalize;
                    return this.callBase(extend(normalizer(args.originalEvent), args))
                },
                dispose: function() {
                    this.callBase();
                    this._skipNextEvents = false;
                    this._mouseLocked = false;
                    clearTimeout(this._unlockMouseTimer);
                }
            });
            MouseAndTouchStrategy.map = eventMap;
            MouseAndTouchStrategy.resetObserver = MouseStrategy$1.resetObserver;
            var MouseAndTouchStrategy$1 = MouseAndTouchStrategy;

            /**
             * DevExtreme (esm/events/pointer.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var getStrategy = (support, _ref) => {
                var {
                    tablet: tablet,
                    phone: phone
                } = _ref;
                var pointerEventStrategy = getStrategyFromGlobalConfig();
                if (pointerEventStrategy) {
                    return pointerEventStrategy
                }
                if (support.touch && !(tablet || phone)) {
                    return MouseAndTouchStrategy$1
                }
                if (support.touch) {
                    return TouchStrategy$1
                }
                return MouseStrategy$1
            };
            var EventStrategy = getStrategy(support, devices.real());
            each(EventStrategy.map, (pointerEvent, originalEvents) => {
                registerEvent$1(pointerEvent, new EventStrategy(pointerEvent, originalEvents));
            });
            var pointer = exports("p", {
                down: "dxpointerdown",
                up: "dxpointerup",
                move: "dxpointermove",
                cancel: "dxpointercancel",
                enter: "dxpointerenter",
                leave: "dxpointerleave",
                over: "dxpointerover",
                out: "dxpointerout"
            });

            function getStrategyFromGlobalConfig() {
                var eventStrategyName = configMethod().pointerEventStrategy;
                return {
                    "mouse-and-touch": MouseAndTouchStrategy$1,
                    touch: TouchStrategy$1,
                    mouse: MouseStrategy$1
                } [eventStrategyName]
            }

            /**
             * DevExtreme (esm/events/core/emitter.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var Emitter = exports("E", classImpl.inherit({
                ctor: function(element) {
                    this._$element = $(element);
                    this._cancelCallback = Callbacks();
                    this._acceptCallback = Callbacks();
                },
                getElement: function() {
                    return this._$element
                },
                validate: function(e) {
                    return !isDxMouseWheelEvent(e)
                },
                validatePointers: function(e) {
                    return 1 === hasTouches(e)
                },
                allowInterruptionByMouseWheel: function() {
                    return true
                },
                configure: function(data) {
                    extend(this, data);
                },
                addCancelCallback: function(callback) {
                    this._cancelCallback.add(callback);
                },
                removeCancelCallback: function() {
                    this._cancelCallback.empty();
                },
                _cancel: function(e) {
                    this._cancelCallback.fire(this, e);
                },
                addAcceptCallback: function(callback) {
                    this._acceptCallback.add(callback);
                },
                removeAcceptCallback: function() {
                    this._acceptCallback.empty();
                },
                _accept: function(e) {
                    this._acceptCallback.fire(this, e);
                },
                _requestAccept: function(e) {
                    this._acceptRequestEvent = e;
                },
                _forgetAccept: function() {
                    this._accept(this._acceptRequestEvent);
                    this._acceptRequestEvent = null;
                },
                start: noop,
                move: noop,
                end: noop,
                cancel: noop,
                reset: function() {
                    if (this._acceptRequestEvent) {
                        this._accept(this._acceptRequestEvent);
                    }
                },
                _fireEvent: function(eventName, e, params) {
                    var eventData = extend({
                        type: eventName,
                        originalEvent: e,
                        target: this._getEmitterTarget(e),
                        delegateTarget: this.getElement().get(0)
                    }, params);
                    e = fireEvent(eventData);
                    if (e.cancel) {
                        this._cancel(e);
                    }
                    return e
                },
                _getEmitterTarget: function(e) {
                    return (this.delegateSelector ? $(e.target).closest(this.delegateSelector) : this.getElement()).get(0)
                },
                dispose: noop
            }));

            /**
             * DevExtreme (esm/events/core/wheel.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var EVENT_NAME = exports("bz", "dxmousewheel");
            var EVENT_NAMESPACE = "dxWheel";
            var NATIVE_EVENT_NAME = "wheel";
            var PIXEL_MODE = 0;
            var DELTA_MUTLIPLIER = 30;
            var wheel = {
                setup: function(element) {
                    var $element = $(element);
                    eventsEngine.on($element, addNamespace$1(NATIVE_EVENT_NAME, EVENT_NAMESPACE), wheel._wheelHandler.bind(wheel));
                },
                teardown: function(element) {
                    eventsEngine.off(element, ".".concat(EVENT_NAMESPACE));
                },
                _wheelHandler: function(e) {
                    var {
                        deltaMode: deltaMode,
                        deltaY: deltaY,
                        deltaX: deltaX,
                        deltaZ: deltaZ
                    } = e.originalEvent;
                    fireEvent({
                        type: EVENT_NAME,
                        originalEvent: e,
                        delta: this._normalizeDelta(deltaY, deltaMode),
                        deltaX: deltaX,
                        deltaY: deltaY,
                        deltaZ: deltaZ,
                        deltaMode: deltaMode,
                        pointerType: "mouse"
                    });
                    e.stopPropagation();
                },
                _normalizeDelta(delta) {
                    var deltaMode = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : PIXEL_MODE;
                    if (deltaMode === PIXEL_MODE) {
                        return -delta
                    } else {
                        return -DELTA_MUTLIPLIER * delta
                    }
                }
            };
            registerEvent$1(EVENT_NAME, wheel);

            /**
             * DevExtreme (esm/events/core/emitter_registrator.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var MANAGER_EVENT = "dxEventManager";
            var EMITTER_DATA = "dxEmitter";
            var EventManager = classImpl.inherit({
                ctor: function() {
                    this._attachHandlers();
                    this.reset();
                    this._proxiedCancelHandler = this._cancelHandler.bind(this);
                    this._proxiedAcceptHandler = this._acceptHandler.bind(this);
                },
                _attachHandlers: function() {
                    readyCallbacks$1.add(function() {
                        var document = domAdapter.getDocument();
                        eventsEngine.subscribeGlobal(document, addNamespace$1(pointer.down, MANAGER_EVENT), this._pointerDownHandler.bind(this));
                        eventsEngine.subscribeGlobal(document, addNamespace$1(pointer.move, MANAGER_EVENT), this._pointerMoveHandler.bind(this));
                        eventsEngine.subscribeGlobal(document, addNamespace$1([pointer.up, pointer.cancel].join(" "), MANAGER_EVENT), this._pointerUpHandler.bind(this));
                        eventsEngine.subscribeGlobal(document, addNamespace$1(EVENT_NAME, MANAGER_EVENT), this._mouseWheelHandler.bind(this));
                    }.bind(this));
                },
                _eachEmitter: function(callback) {
                    var activeEmitters = this._activeEmitters || [];
                    var i = 0;
                    while (activeEmitters.length > i) {
                        var emitter = activeEmitters[i];
                        if (false === callback(emitter)) {
                            break
                        }
                        if (activeEmitters[i] === emitter) {
                            i++;
                        }
                    }
                },
                _applyToEmitters: function(method, arg) {
                    this._eachEmitter((function(emitter) {
                        emitter[method].call(emitter, arg);
                    }));
                },
                reset: function() {
                    this._eachEmitter(this._proxiedCancelHandler);
                    this._activeEmitters = [];
                },
                resetEmitter: function(emitter) {
                    this._proxiedCancelHandler(emitter);
                },
                _pointerDownHandler: function(e) {
                    if (isMouseEvent(e) && e.which > 1) {
                        return
                    }
                    this._updateEmitters(e);
                },
                _updateEmitters: function(e) {
                    if (!this._isSetChanged(e)) {
                        return
                    }
                    this._cleanEmitters(e);
                    this._fetchEmitters(e);
                },
                _isSetChanged: function(e) {
                    var currentSet = this._closestEmitter(e);
                    var previousSet = this._emittersSet || [];
                    var setChanged = currentSet.length !== previousSet.length;
                    each(currentSet, (function(index, emitter) {
                        setChanged = setChanged || previousSet[index] !== emitter;
                        return !setChanged
                    }));
                    this._emittersSet = currentSet;
                    return setChanged
                },
                _closestEmitter: function(e) {
                    var that = this;
                    var result = [];
                    var $element = $(e.target);

                    function handleEmitter(_, emitter) {
                        if (!!emitter && emitter.validatePointers(e) && emitter.validate(e)) {
                            emitter.addCancelCallback(that._proxiedCancelHandler);
                            emitter.addAcceptCallback(that._proxiedAcceptHandler);
                            result.push(emitter);
                        }
                    }
                    while ($element.length) {
                        var emitters = data($element.get(0), EMITTER_DATA) || [];
                        each(emitters, handleEmitter);
                        $element = $element.parent();
                    }
                    return result
                },
                _acceptHandler: function(acceptedEmitter, e) {
                    var that = this;
                    this._eachEmitter((function(emitter) {
                        if (emitter !== acceptedEmitter) {
                            that._cancelEmitter(emitter, e);
                        }
                    }));
                },
                _cancelHandler: function(canceledEmitter, e) {
                    this._cancelEmitter(canceledEmitter, e);
                },
                _cancelEmitter: function(emitter, e) {
                    var activeEmitters = this._activeEmitters;
                    if (e) {
                        emitter.cancel(e);
                    } else {
                        emitter.reset();
                    }
                    emitter.removeCancelCallback();
                    emitter.removeAcceptCallback();
                    var emitterIndex = activeEmitters.indexOf(emitter);
                    if (emitterIndex > -1) {
                        activeEmitters.splice(emitterIndex, 1);
                    }
                },
                _cleanEmitters: function(e) {
                    this._applyToEmitters("end", e);
                    this.reset(e);
                },
                _fetchEmitters: function(e) {
                    this._activeEmitters = this._emittersSet.slice();
                    this._applyToEmitters("start", e);
                },
                _pointerMoveHandler: function(e) {
                    this._applyToEmitters("move", e);
                },
                _pointerUpHandler: function(e) {
                    this._updateEmitters(e);
                },
                _mouseWheelHandler: function(e) {
                    if (!this._allowInterruptionByMouseWheel()) {
                        return
                    }
                    e.pointers = [null];
                    this._pointerDownHandler(e);
                    this._adjustWheelEvent(e);
                    this._pointerMoveHandler(e);
                    e.pointers = [];
                    this._pointerUpHandler(e);
                },
                _allowInterruptionByMouseWheel: function() {
                    var allowInterruption = true;
                    this._eachEmitter((function(emitter) {
                        allowInterruption = emitter.allowInterruptionByMouseWheel() && allowInterruption;
                        return allowInterruption
                    }));
                    return allowInterruption
                },
                _adjustWheelEvent: function(e) {
                    var closestGestureEmitter = null;
                    this._eachEmitter((function(emitter) {
                        if (!emitter.gesture) {
                            return
                        }
                        var direction = emitter.getDirection(e);
                        if ("horizontal" !== direction && !e.shiftKey || "vertical" !== direction && e.shiftKey) {
                            closestGestureEmitter = emitter;
                            return false
                        }
                    }));
                    if (!closestGestureEmitter) {
                        return
                    }
                    var direction = closestGestureEmitter.getDirection(e);
                    var verticalGestureDirection = "both" === direction && !e.shiftKey || "vertical" === direction;
                    var prop = verticalGestureDirection ? "pageY" : "pageX";
                    e[prop] += e.delta;
                },
                isActive: function(element) {
                    var result = false;
                    this._eachEmitter((function(emitter) {
                        result = result || emitter.getElement().is(element);
                    }));
                    return result
                }
            });
            var eventManager = new EventManager;
            var EMITTER_SUBSCRIPTION_DATA = "dxEmitterSubscription";
            var registerEmitter = exports("f", function(emitterConfig) {
                var emitterClass = emitterConfig.emitter;
                var emitterName = emitterConfig.events[0];
                var emitterEvents = emitterConfig.events;
                each(emitterEvents, (function(_, eventName) {
                    registerEvent$1(eventName, {
                        noBubble: !emitterConfig.bubble,
                        setup: function(element) {
                            var subscriptions = data(element, EMITTER_SUBSCRIPTION_DATA) || {};
                            var emitters = data(element, EMITTER_DATA) || {};
                            var emitter = emitters[emitterName] || new emitterClass(element);
                            subscriptions[eventName] = true;
                            emitters[emitterName] = emitter;
                            data(element, EMITTER_DATA, emitters);
                            data(element, EMITTER_SUBSCRIPTION_DATA, subscriptions);
                        },
                        add: function(element, handleObj) {
                            var emitters = data(element, EMITTER_DATA);
                            var emitter = emitters[emitterName];
                            emitter.configure(extend({
                                delegateSelector: handleObj.selector
                            }, handleObj.data), handleObj.type);
                        },
                        teardown: function(element) {
                            var subscriptions = data(element, EMITTER_SUBSCRIPTION_DATA);
                            var emitters = data(element, EMITTER_DATA);
                            var emitter = emitters[emitterName];
                            delete subscriptions[eventName];
                            var disposeEmitter = true;
                            each(emitterEvents, (function(_, eventName) {
                                disposeEmitter = disposeEmitter && !subscriptions[eventName];
                                return disposeEmitter
                            }));
                            if (disposeEmitter) {
                                if (eventManager.isActive(element)) {
                                    eventManager.resetEmitter(emitter);
                                }
                                emitter && emitter.dispose();
                                delete emitters[emitterName];
                            }
                        }
                    });
                }));
            });

            /**
             * DevExtreme (esm/core/templates/child_default_template.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class ChildDefaultTemplate extends TemplateBase {
                constructor(name) {
                    super();
                    this.name = name;
                }
            } exports("bR", ChildDefaultTemplate);

            /**
             * DevExtreme (esm/core/templates/empty_template.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class EmptyTemplate extends TemplateBase {
                _renderCore() {
                    return $()
                }
            } exports("bh", EmptyTemplate);

            /**
             * DevExtreme (esm/core/templates/template_engine_registry.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var templateEngines = {};
            var currentTemplateEngine;
            function registerTemplateEngine(name, templateEngine) {
                templateEngines[name] = templateEngine;
            }
            function setTemplateEngine(templateEngine) {
                if (isString(templateEngine)) {
                    currentTemplateEngine = templateEngines[templateEngine];
                    if (!currentTemplateEngine) {
                        throw errors$2.Error("E0020", templateEngine)
                    }
                } else {
                    currentTemplateEngine = templateEngine;
                }
            }
            function getCurrentTemplateEngine() {
                return currentTemplateEngine
            }

            /**
             * DevExtreme (esm/core/templates/template.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            registerTemplateEngine("default", {
                compile: element => normalizeTemplateElement(element),
                render: (template, model, index) => template.clone()
            });
            setTemplateEngine("default");
            class Template extends TemplateBase {
                constructor(element) {
                    super();
                    this._element = element;
                }
                _renderCore(options) {
                    var transclude = options.transclude;
                    if (!transclude && !this._compiledTemplate) {
                        this._compiledTemplate = getCurrentTemplateEngine().compile(this._element);
                    }
                    return $("<div>").append(transclude ? this._element : getCurrentTemplateEngine().render(this._compiledTemplate, options.model, options.index)).contents()
                }
                source() {
                    return $(this._element).clone()
                }
            }

            /**
             * DevExtreme (esm/core/utils/array.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */

            function createOccurrenceMap(array) {
                return array.reduce((map, value) => {
                    var _map$get;
                    var count = (null !== (_map$get = map.get(value)) && void 0 !== _map$get ? _map$get : 0) + 1;
                    map.set(value, count);
                    return map
                }, new Map)
            }
            var wrapToArray = exports("fV", function(item) {
                return Array.isArray(item) ? item : [item]
            });
            var getUniqueValues = exports("a3", function(values) {
                return [...new Set(values)]
            });
            var getIntersection = exports("fq", function(firstArray, secondArray) {
                var toRemoveMap = createOccurrenceMap(secondArray);
                return firstArray.filter(value => {
                    var occurrencesCount = toRemoveMap.get(value);
                    occurrencesCount && toRemoveMap.set(value, occurrencesCount - 1);
                    return occurrencesCount
                })
            });
            var removeDuplicates = exports("a2", function() {
                var from = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                var toRemove = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
                var toRemoveMap = createOccurrenceMap(toRemove);
                return from.filter(value => {
                    var occurrencesCount = toRemoveMap.get(value);
                    occurrencesCount && toRemoveMap.set(value, occurrencesCount - 1);
                    return !occurrencesCount
                })
            });
            var normalizeIndexes = exports("g6", function(items, indexPropName, currentItem, needIndexCallback) {
                var indexedItems = {};
                var {
                    useLegacyVisibleIndex: useLegacyVisibleIndex
                } = configMethod();
                var currentIndex = 0;
                var shouldUpdateIndex = item => !isDefined(item[indexPropName]) && (!needIndexCallback || needIndexCallback(item));
                items.forEach(item => {
                    var index = item[indexPropName];
                    if (index >= 0) {
                        indexedItems[index] = indexedItems[index] || [];
                        if (item === currentItem) {
                            indexedItems[index].unshift(item);
                        } else {
                            indexedItems[index].push(item);
                        }
                    } else {
                        item[indexPropName] = void 0;
                    }
                });
                if (!useLegacyVisibleIndex) {
                    items.forEach(item => {
                        if (shouldUpdateIndex(item)) {
                            while (indexedItems[currentIndex]) {
                                currentIndex++;
                            }
                            indexedItems[currentIndex] = [item];
                            currentIndex++;
                        }
                    });
                }
                currentIndex = 0;
                orderEach(indexedItems, (function(index, items) {
                    items.forEach(item => {
                        if (index >= 0) {
                            item[indexPropName] = currentIndex++;
                        }
                    });
                }));
                if (useLegacyVisibleIndex) {
                    items.forEach(item => {
                        if (shouldUpdateIndex(item)) {
                            item[indexPropName] = currentIndex++;
                        }
                    });
                }
            });
            var groupBy = (array, getGroupName) => array.reduce((groupedResult, item) => {
                var _groupedResult$groupN;
                var groupName = getGroupName(item);
                groupedResult[groupName] = null !== (_groupedResult$groupN = groupedResult[groupName]) && void 0 !== _groupedResult$groupN ? _groupedResult$groupN : [];
                groupedResult[groupName].push(item);
                return groupedResult
            }, {});

            /**
             * DevExtreme (esm/core/utils/template_manager.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var findTemplates = exports("J", (element, name) => {
                var templates = $(element).contents().filter("[".concat("data-options", '*="').concat(name, '"]'));
                return [].slice.call(templates).map(element => {
                    var optionsString = $(element).attr("data-options") || "";
                    return {
                        element: element,
                        options: configMethod().optionsParser(optionsString)[name]
                    }
                }).filter(template => !!template.options)
            });
            var suitableTemplatesByName = rawTemplates => {
                var templatesMap = groupBy(rawTemplates, template => template.options.name);
                if (templatesMap[void 0]) {
                    throw errors$2.Error("E0023")
                }
                var result = {};
                Object.keys(templatesMap).forEach(name => {
                    var _findBestMatches$;
                    var suitableTemplate = null === (_findBestMatches$ = findBestMatches(devices.current(), templatesMap[name], template => template.options)[0]) || void 0 === _findBestMatches$ ? void 0 : _findBestMatches$.element;
                    if (suitableTemplate) {
                        result[name] = suitableTemplate;
                    }
                });
                return result
            };
            var addOneRenderedCall = template => {
                var render = template.render.bind(template);
                return extend({}, template, {
                    render(options) {
                        var templateResult = render(options);
                        options && options.onRendered && options.onRendered();
                        return templateResult
                    }
                })
            };
            var addPublicElementNormalization = template => {
                var render = template.render.bind(template);
                return extend({}, template, {
                    render(options) {
                        var $container = $(options.container);
                        return render(_extends({}, options, {
                            container: getPublicElement($container)
                        }))
                    }
                })
            };
            var getNormalizedTemplateArgs = options => {
                var args = [];
                if ("model" in options) {
                    args.push(options.model);
                }
                if ("index" in options) {
                    args.push(options.index);
                }
                args.push(options.container);
                return args
            };
            var validateTemplateSource = templateSource => "string" === typeof templateSource ? normalizeTemplateElement(templateSource) : templateSource;
            var templateKey = templateSource => isRenderer(templateSource) && templateSource[0] || templateSource;
            var defaultCreateElement = element => new Template(element);
            var acquireIntegrationTemplate = (templateSource, templates, isAsyncTemplate, skipTemplates) => {
                var integrationTemplate = null;
                if (!skipTemplates || -1 === skipTemplates.indexOf(templateSource)) {
                    integrationTemplate = templates[templateSource];
                    if (integrationTemplate && !(integrationTemplate instanceof TemplateBase)) {
                        if (isFunction(integrationTemplate.render)) {
                            integrationTemplate = addPublicElementNormalization(integrationTemplate);
                        }
                        if (!isAsyncTemplate) {
                            integrationTemplate = addOneRenderedCall(integrationTemplate);
                        }
                    }
                }
                return integrationTemplate
            };
            var acquireTemplate = (templateSource, createTemplate, templates, isAsyncTemplate, skipTemplates, defaultTemplates) => {
                if (null == templateSource) {
                    return new EmptyTemplate
                }
                if (templateSource instanceof ChildDefaultTemplate) {
                    return defaultTemplates[templateSource.name]
                }
                if (templateSource instanceof TemplateBase) {
                    return templateSource
                }
                if (isFunction(templateSource.render) && !isRenderer(templateSource)) {
                    return isAsyncTemplate ? templateSource : addOneRenderedCall(templateSource)
                }
                if (templateSource.nodeType || isRenderer(templateSource)) {
                    return createTemplate($(templateSource))
                }
                return acquireIntegrationTemplate(templateSource, templates, isAsyncTemplate, skipTemplates) || defaultTemplates[templateSource] || createTemplate(templateSource)
            };

            /**
             * DevExtreme (esm/core/action.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class Action {
                constructor(action, config) {
                    config = config || {};
                    this._action = action;
                    this._context = config.context || getWindow();
                    this._beforeExecute = config.beforeExecute;
                    this._afterExecute = config.afterExecute;
                    this._component = config.component;
                    this._validatingTargetName = config.validatingTargetName;
                    var excludeValidators = this._excludeValidators = {};
                    if (config.excludeValidators) {
                        for (var i = 0; i < config.excludeValidators.length; i++) {
                            excludeValidators[config.excludeValidators[i]] = true;
                        }
                    }
                }
                execute() {
                    var e = {
                        action: this._action,
                        args: Array.prototype.slice.call(arguments),
                        context: this._context,
                        component: this._component,
                        validatingTargetName: this._validatingTargetName,
                        cancel: false,
                        handled: false
                    };
                    var beforeExecute = this._beforeExecute;
                    var afterExecute = this._afterExecute;
                    var argsBag = e.args[0] || {};
                    if (!this._validateAction(e)) {
                        return
                    }
                    null === beforeExecute || void 0 === beforeExecute ? void 0 : beforeExecute.call(this._context, e);
                    if (e.cancel) {
                        return
                    }
                    var result = this._executeAction(e);
                    if (argsBag.cancel) {
                        return
                    }
                    null === afterExecute || void 0 === afterExecute ? void 0 : afterExecute.call(this._context, e);
                    return result
                }
                _validateAction(e) {
                    var excludeValidators = this._excludeValidators;
                    var {
                        executors: executors
                    } = Action;
                    for (var name in executors) {
                        if (!excludeValidators[name]) {
                            var _executor$validate;
                            var executor = executors[name];
                            null === (_executor$validate = executor.validate) || void 0 === _executor$validate ? void 0 : _executor$validate.call(executor, e);
                            if (e.cancel) {
                                return false
                            }
                        }
                    }
                    return true
                }
                _executeAction(e) {
                    var result;
                    var {
                        executors: executors
                    } = Action;
                    for (var name in executors) {
                        var _executor$execute;
                        var executor = executors[name];
                        null === (_executor$execute = executor.execute) || void 0 === _executor$execute ? void 0 : _executor$execute.call(executor, e);
                        if (e.handled) {
                            result = e.result;
                            break
                        }
                    }
                    return result
                }
                static registerExecutor(name, executor) {
                    if (isPlainObject(name)) {
                        each(name, Action.registerExecutor);
                        return
                    }
                    Action.executors[name] = executor;
                }
                static unregisterExecutor() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    each(args, (function() {
                        delete Action.executors[this];
                    }));
                }
            } exports("N", Action);
            Action.executors = {};
            var createValidatorByTargetElement = condition => e => {
                if (!e.args.length) {
                    return
                }
                var args = e.args[0];
                var element = args[e.validatingTargetName] || args.element;
                if (element && condition($(element))) {
                    e.cancel = true;
                }
            };
            Action.registerExecutor({
                disabled: {
                    validate: createValidatorByTargetElement($target => $target.is(".dx-state-disabled, .dx-state-disabled *"))
                },
                readOnly: {
                    validate: createValidatorByTargetElement($target => $target.is(".dx-state-readonly, .dx-state-readonly *:not(.dx-state-independent)"))
                },
                undefined: {
                    execute: e => {
                        if (!e.action) {
                            e.result = void 0;
                            e.handled = true;
                        }
                    }
                },
                func: {
                    execute: e => {
                        if (isFunction(e.action)) {
                            e.result = e.action.call(e.context, e.args[0]);
                            e.handled = true;
                        }
                    }
                }
            });

            /**
             * DevExtreme (esm/core/utils/comparator.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var hasNegation = function(oldValue, newValue) {
                return 1 / oldValue === 1 / newValue
            };
            var equals = exports("f2", function(oldValue, newValue) {
                oldValue = toComparable(oldValue, true);
                newValue = toComparable(newValue, true);
                if (oldValue && newValue && isRenderer(oldValue) && isRenderer(newValue)) {
                    return newValue.is(oldValue)
                }
                var oldValueIsNaN = oldValue !== oldValue;
                var newValueIsNaN = newValue !== newValue;
                if (oldValueIsNaN && newValueIsNaN) {
                    return true
                }
                if (0 === oldValue && 0 === newValue) {
                    return hasNegation(oldValue, newValue)
                }
                if (null === oldValue || "object" !== typeof oldValue || domAdapter.isElementNode(oldValue)) {
                    return oldValue === newValue
                }
                return false
            });

            /**
             * DevExtreme (esm/core/options/utils.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var cachedGetters$1 = {};
            var convertRulesToOptions = exports("aS", rules => {
                var currentDevice = devices.current();
                return rules.reduce((options, _ref) => {
                    var {
                        device: device,
                        options: ruleOptions
                    } = _ref;
                    var deviceFilter = device || {};
                    var match = isFunction(deviceFilter) ? deviceFilter(currentDevice) : deviceMatch(currentDevice, deviceFilter);
                    if (match) {
                        extend(true, options, ruleOptions);
                    }
                    return options
                }, {})
            });
            var normalizeOptions = exports("f3", (options, value) => "string" !== typeof options ? options : {
                [options]: value
            });
            var deviceMatch = (device, filter) => isEmptyObject(filter) || findBestMatches(device, [filter]).length > 0;
            var getFieldName = exports("fT", fullName => fullName.substr(fullName.lastIndexOf(".") + 1));
            var getParentName = fullName => fullName.substr(0, fullName.lastIndexOf("."));
            var getNestedOptionValue = function(optionsObject, name) {
                cachedGetters$1[name] = cachedGetters$1[name] || compileGetter(name);
                return cachedGetters$1[name](optionsObject, {
                    functionsAsIs: true
                })
            };
            var createDefaultOptionRules = exports("aT", function() {
                var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
                return options
            });

            /**
             * DevExtreme (esm/core/options/option_manager.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var cachedGetters = {};
            var cachedSetters = {};
            class OptionManager {
                constructor(options, optionsByReference) {
                    this._options = options;
                    this._optionsByReference = optionsByReference;
                    this._changingCallback;
                    this._changedCallback;
                    this._namePreparedCallbacks;
                }
                _setByReference(options, rulesOptions) {
                    extend(true, options, rulesOptions);
                    for (var fieldName in this._optionsByReference) {
                        if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {
                            options[fieldName] = rulesOptions[fieldName];
                        }
                    }
                }
                _setPreparedValue(name, value, merge, silent) {
                    var previousValue = this.get(this._options, name, false);
                    if (!equals(previousValue, value)) {
                        var path = getPathParts(name);
                        !silent && this._changingCallback(name, previousValue, value);
                        cachedSetters[name] = cachedSetters[name] || compileSetter(name);
                        cachedSetters[name](this._options, value, {
                            functionsAsIs: true,
                            merge: isDefined(merge) ? merge : !this._optionsByReference[name],
                            unwrapObservables: path.length > 1 && !!this._optionsByReference[path[0]]
                        });
                        !silent && this._changedCallback(name, value, previousValue);
                    }
                }
                _prepareRelevantNames(options, name, value, silent) {
                    if (isPlainObject(value)) {
                        for (var valueName in value) {
                            this._prepareRelevantNames(options, "".concat(name, ".").concat(valueName), value[valueName]);
                        }
                    }
                    this._namePreparedCallbacks(options, name, value, silent);
                }
                get() {
                    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._options;
                    var name = arguments.length > 1 ? arguments[1] : void 0;
                    var unwrapObservables = arguments.length > 2 ? arguments[2] : void 0;
                    cachedGetters[name] = cachedGetters[name] || compileGetter(name);
                    return cachedGetters[name](options, {
                        functionsAsIs: true,
                        unwrapObservables: unwrapObservables
                    })
                }
                set(options, value, merge, silent) {
                    options = normalizeOptions(options, value);
                    for (var name in options) {
                        this._prepareRelevantNames(options, name, options[name], silent);
                    }
                    for (var _name in options) {
                        this._setPreparedValue(_name, options[_name], merge, silent);
                    }
                }
                onRelevantNamesPrepared(callBack) {
                    this._namePreparedCallbacks = callBack;
                }
                onChanging(callBack) {
                    this._changingCallback = callBack;
                }
                onChanged(callBack) {
                    this._changedCallback = callBack;
                }
                dispose() {
                    this._changingCallback = noop;
                    this._changedCallback = noop;
                }
            }

            /**
             * DevExtreme (esm/core/options/index.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class Options {
                constructor(options, defaultOptions, optionsByReference, deprecatedOptions) {
                    this._deprecatedCallback;
                    this._startChangeCallback;
                    this._endChangeCallback;
                    this._default = defaultOptions;
                    this._deprecated = deprecatedOptions;
                    this._deprecatedNames = [];
                    this._initDeprecatedNames();
                    this._optionManager = new OptionManager(options, optionsByReference);
                    this._optionManager.onRelevantNamesPrepared((options, name, value, silent) => this._setRelevantNames(options, name, value, silent));
                    this._cachedOptions = {};
                    this._rules = [];
                }
                set _initial(value) {
                    this._initialOptions = value;
                }
                get _initial() {
                    if (!this._initialOptions) {
                        var rulesOptions = this._getByRules(this.silent("defaultOptionsRules"));
                        this._initialOptions = this._default;
                        this._optionManager._setByReference(this._initialOptions, rulesOptions);
                    }
                    return this._initialOptions
                }
                _initDeprecatedNames() {
                    for (var optionName in this._deprecated) {
                        this._deprecatedNames.push(optionName);
                    }
                }
                _getByRules(rules) {
                    rules = Array.isArray(rules) ? this._rules.concat(rules) : this._rules;
                    return convertRulesToOptions(rules)
                }
                _notifyDeprecated(option) {
                    var info = this._deprecated[option];
                    if (info) {
                        this._deprecatedCallback(option, info);
                    }
                }
                _setRelevantNames(options, name, value, silent) {
                    if (name) {
                        var normalizedName = this._normalizeName(name, silent);
                        if (normalizedName && normalizedName !== name) {
                            this._setField(options, normalizedName, value);
                            this._clearField(options, name);
                        }
                    }
                }
                _setField(options, fullName, value) {
                    var fieldName = "";
                    var fieldObject = null;
                    do {
                        fieldName = fieldName ? ".".concat(fieldName) : "";
                        fieldName = getFieldName(fullName) + fieldName;
                        fullName = getParentName(fullName);
                        fieldObject = fullName ? this._optionManager.get(options, fullName, false) : options;
                    } while (!fieldObject);
                    fieldObject[fieldName] = value;
                }
                _clearField(options, name) {
                    delete options[name];
                    var previousFieldName = getParentName(name);
                    var fieldObject = previousFieldName ? this._optionManager.get(options, previousFieldName, false) : options;
                    if (fieldObject) {
                        delete fieldObject[getFieldName(name)];
                    }
                }
                _normalizeName(name, silent) {
                    if (this._deprecatedNames.length && name) {
                        for (var i = 0; i < this._deprecatedNames.length; i++) {
                            if (this._deprecatedNames[i] === name) {
                                var deprecate = this._deprecated[name];
                                if (deprecate) {
                                    !silent && this._notifyDeprecated(name);
                                    return deprecate.alias || name
                                }
                            }
                        }
                    }
                    return name
                }
                addRules(rules) {
                    this._rules = rules.concat(this._rules);
                }
                applyRules(rules) {
                    var options = this._getByRules(rules);
                    this.silent(options);
                }
                dispose() {
                    this._deprecatedCallback = noop;
                    this._startChangeCallback = noop;
                    this._endChangeCallback = noop;
                    this._optionManager.dispose();
                }
                onChanging(callBack) {
                    this._optionManager.onChanging(callBack);
                }
                onChanged(callBack) {
                    this._optionManager.onChanged(callBack);
                }
                onDeprecated(callBack) {
                    this._deprecatedCallback = callBack;
                }
                onStartChange(callBack) {
                    this._startChangeCallback = callBack;
                }
                onEndChange(callBack) {
                    this._endChangeCallback = callBack;
                }
                isInitial(name) {
                    var value = this.silent(name);
                    var initialValue = this.initial(name);
                    var areFunctions = isFunction(value) && isFunction(initialValue);
                    return areFunctions ? value.toString() === initialValue.toString() : equalByValue(value, initialValue)
                }
                initial(name) {
                    return getNestedOptionValue(this._initial, name)
                }
                option(options, value) {
                    var isGetter = arguments.length < 2 && "object" !== type(options);
                    if (isGetter) {
                        return this._optionManager.get(void 0, this._normalizeName(options))
                    } else {
                        this._startChangeCallback();
                        try {
                            this._optionManager.set(options, value);
                        } finally {
                            this._endChangeCallback();
                        }
                    }
                }
                silent(options, value) {
                    var isGetter = arguments.length < 2 && "object" !== type(options);
                    if (isGetter) {
                        return this._optionManager.get(void 0, options, void 0, true)
                    } else {
                        this._optionManager.set(options, value, void 0, true);
                    }
                }
                reset(name) {
                    if (name) {
                        var fullPath = getPathParts(name);
                        var value = fullPath.reduce((value, field) => value ? value[field] : this.initial(field), null);
                        var defaultValue = isObject(value) ? _extends({}, value) : value;
                        this._optionManager.set(name, defaultValue, false);
                    }
                }
                getAliasesByName(name) {
                    return Object.keys(this._deprecated).filter(aliasName => name === this._deprecated[aliasName].alias)
                }
                isDeprecated(name) {
                    return Object.prototype.hasOwnProperty.call(this._deprecated, name)
                }
                cache(name, options) {
                    var isGetter = arguments.length < 2;
                    if (isGetter) {
                        return this._cachedOptions[name]
                    } else {
                        this._cachedOptions[name] = extend(this._cachedOptions[name], options);
                    }
                }
            }

            /**
             * DevExtreme (esm/core/postponed_operations.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class PostponedOperations {
                constructor() {
                    this._postponedOperations = {};
                }
                add(key, fn, postponedPromise) {
                    if (key in this._postponedOperations) {
                        postponedPromise && this._postponedOperations[key].promises.push(postponedPromise);
                    } else {
                        var completePromise = new Deferred;
                        this._postponedOperations[key] = {
                            fn: fn,
                            completePromise: completePromise,
                            promises: postponedPromise ? [postponedPromise] : []
                        };
                    }
                    return this._postponedOperations[key].completePromise.promise()
                }
                callPostponedOperations() {
                    for (var key in this._postponedOperations) {
                        var operation = this._postponedOperations[key];
                        if (isDefined(operation)) {
                            if (operation.promises && operation.promises.length) {
                                when(...operation.promises).done(operation.fn).then(operation.completePromise.resolve);
                            } else {
                                operation.fn().done(operation.completePromise.resolve);
                            }
                        }
                    }
                    this._postponedOperations = {};
                }
            }

            /**
             * DevExtreme (esm/core/component.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var getEventName = actionName => actionName.charAt(2).toLowerCase() + actionName.substr(3);
            var isInnerOption = optionName => 0 === optionName.indexOf("_", 0);
            var Component = exports("eE", classImpl.inherit({
                _setDeprecatedOptions() {
                    this._deprecatedOptions = {};
                },
                _getDeprecatedOptions() {
                    return this._deprecatedOptions
                },
                _getDefaultOptions: () => ({
                    onInitialized: null,
                    onOptionChanged: null,
                    onDisposing: null,
                    defaultOptionsRules: null
                }),
                _defaultOptionsRules: () => [],
                _setOptionsByDevice(rules) {
                    this._options.applyRules(rules);
                },
                _convertRulesToOptions: rules => convertRulesToOptions(rules),
                _isInitialOptionValue(name) {
                    return this._options.isInitial(name)
                },
                _setOptionsByReference() {
                    this._optionsByReference = {};
                },
                _getOptionsByReference() {
                    return this._optionsByReference
                },
                ctor() {
                    var options = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
                    var {
                        _optionChangedCallbacks: _optionChangedCallbacks,
                        _disposingCallbacks: _disposingCallbacks
                    } = options;
                    this.NAME = getName(this.constructor);
                    this._eventsStrategy = EventsStrategy.create(this, options.eventsStrategy);
                    this._updateLockCount = 0;
                    this._optionChangedCallbacks = _optionChangedCallbacks || Callbacks();
                    this._disposingCallbacks = _disposingCallbacks || Callbacks();
                    this.postponedOperations = new PostponedOperations;
                    this._createOptions(options);
                },
                _createOptions(options) {
                    this.beginUpdate();
                    try {
                        this._setOptionsByReference();
                        this._setDeprecatedOptions();
                        this._options = new Options(this._getDefaultOptions(), this._getDefaultOptions(), this._getOptionsByReference(), this._getDeprecatedOptions());
                        this._options.onChanging((name, previousValue, value) => this._initialized && this._optionChanging(name, previousValue, value));
                        this._options.onDeprecated((option, info) => this._logDeprecatedOptionWarning(option, info));
                        this._options.onChanged((name, value, previousValue) => this._notifyOptionChanged(name, value, previousValue));
                        this._options.onStartChange(() => this.beginUpdate());
                        this._options.onEndChange(() => this.endUpdate());
                        this._options.addRules(this._defaultOptionsRules());
                        if (options && options.onInitializing) {
                            options.onInitializing.apply(this, [options]);
                        }
                        this._setOptionsByDevice(options.defaultOptionsRules);
                        this._initOptions(options);
                    } finally {
                        this.endUpdate();
                    }
                },
                _initOptions(options) {
                    this.option(options);
                },
                _init() {
                    this._createOptionChangedAction();
                    this.on("disposing", args => {
                        this._disposingCallbacks.fireWith(this, [args]);
                    });
                },
                _logDeprecatedOptionWarning(option, info) {
                    var message = info.message || "Use the '".concat(info.alias, "' option instead");
                    errors$2.log("W0001", this.NAME, option, info.since, message);
                },
                _logDeprecatedComponentWarning(since, alias) {
                    errors$2.log("W0000", this.NAME, since, "Use the '".concat(alias, "' widget instead"));
                },
                _createOptionChangedAction() {
                    this._optionChangedAction = this._createActionByOption("onOptionChanged", {
                        excludeValidators: ["disabled", "readOnly"]
                    });
                },
                _createDisposingAction() {
                    this._disposingAction = this._createActionByOption("onDisposing", {
                        excludeValidators: ["disabled", "readOnly"]
                    });
                },
                _optionChanged(args) {
                    switch (args.name) {
                        case "onDisposing":
                        case "onInitialized":
                            break;
                        case "onOptionChanged":
                            this._createOptionChangedAction();
                    }
                },
                _dispose() {
                    this._optionChangedCallbacks.empty();
                    this._createDisposingAction();
                    this._disposingAction();
                    this._eventsStrategy.dispose();
                    this._options.dispose();
                    this._disposed = true;
                },
                _lockUpdate() {
                    this._updateLockCount++;
                },
                _unlockUpdate() {
                    this._updateLockCount = Math.max(this._updateLockCount - 1, 0);
                },
                _isUpdateAllowed() {
                    return 0 === this._updateLockCount
                },
                _isInitializingRequired() {
                    return !this._initializing && !this._initialized
                },
                isInitialized() {
                    return this._initialized
                },
                _commitUpdate() {
                    this.postponedOperations.callPostponedOperations();
                    this._isInitializingRequired() && this._initializeComponent();
                },
                _initializeComponent() {
                    this._initializing = true;
                    try {
                        this._init();
                    } finally {
                        this._initializing = false;
                        this._lockUpdate();
                        this._createActionByOption("onInitialized", {
                            excludeValidators: ["disabled", "readOnly"]
                        })();
                        this._unlockUpdate();
                        this._initialized = true;
                    }
                },
                instance() {
                    return this
                },
                beginUpdate: function() {
                    this._lockUpdate();
                },
                endUpdate: function() {
                    this._unlockUpdate();
                    this._isUpdateAllowed() && this._commitUpdate();
                },
                _optionChanging: noop,
                _notifyOptionChanged(option, value, previousValue) {
                    if (this._initialized) {
                        var optionNames = [option].concat(this._options.getAliasesByName(option));
                        for (var i = 0; i < optionNames.length; i++) {
                            var name = optionNames[i];
                            var args = {
                                name: getPathParts(name)[0],
                                fullName: name,
                                value: value,
                                previousValue: previousValue
                            };
                            if (!isInnerOption(name)) {
                                this._optionChangedCallbacks.fireWith(this, [extend(this._defaultActionArgs(), args)]);
                                this._optionChangedAction(extend({}, args));
                            }
                            if (!this._disposed && this._cancelOptionChange !== name) {
                                this._optionChanged(args);
                            }
                        }
                    }
                },
                initialOption(name) {
                    return this._options.initial(name)
                },
                _defaultActionConfig() {
                    return {
                        context: this,
                        component: this
                    }
                },
                _defaultActionArgs() {
                    return {
                        component: this
                    }
                },
                _createAction(actionSource, config) {
                    var action;
                    return e => {
                        if (!isDefined(e)) {
                            e = {};
                        }
                        if (!isPlainObject(e)) {
                            e = {
                                actionValue: e
                            };
                        }
                        action = action || new Action(actionSource, extend({}, config, this._defaultActionConfig()));
                        return action.execute.call(action, extend(e, this._defaultActionArgs()))
                    }
                },
                _createActionByOption(optionName, config) {
                    var _this = this;
                    var action;
                    var eventName;
                    var actionFunc;
                    config = extend({}, config);
                    var result = function() {
                        if (!eventName) {
                            config = config || {};
                            if ("string" !== typeof optionName) {
                                throw errors$2.Error("E0008")
                            }
                            if (0 === optionName.indexOf("on")) {
                                eventName = getEventName(optionName);
                            }
                            actionFunc = _this.option(optionName);
                        }
                        if (!action && !actionFunc && !config.beforeExecute && !config.afterExecute && !_this._eventsStrategy.hasEvent(eventName)) {
                            return
                        }
                        if (!action) {
                            var beforeExecute = config.beforeExecute;
                            config.beforeExecute = function() {
                                for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                                    props[_key2] = arguments[_key2];
                                }
                                beforeExecute && beforeExecute.apply(_this, props);
                                _this._eventsStrategy.fireEvent(eventName, props[0].args);
                            };
                            action = _this._createAction(actionFunc, config);
                        }
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        if (configMethod().wrapActionsBeforeExecute) {
                            var beforeActionExecute = _this.option("beforeActionExecute") || noop;
                            var wrappedAction = beforeActionExecute(_this, action, config) || action;
                            return wrappedAction.apply(_this, args)
                        }
                        return action.apply(_this, args)
                    };
                    if (configMethod().wrapActionsBeforeExecute) {
                        return result
                    }
                    var onActionCreated = this.option("onActionCreated") || noop;
                    return onActionCreated(this, result, config) || result
                },
                on(eventName, eventHandler) {
                    this._eventsStrategy.on(eventName, eventHandler);
                    return this
                },
                off(eventName, eventHandler) {
                    this._eventsStrategy.off(eventName, eventHandler);
                    return this
                },
                hasActionSubscription: function(actionName) {
                    return !!this._options.silent(actionName) || this._eventsStrategy.hasEvent(getEventName(actionName))
                },
                isOptionDeprecated(name) {
                    return this._options.isDeprecated(name)
                },
                _setOptionWithoutOptionChange(name, value) {
                    this._cancelOptionChange = name;
                    this.option(name, value);
                    this._cancelOptionChange = false;
                },
                _getOptionValue(name, context) {
                    var value = this.option(name);
                    if (isFunction(value)) {
                        return value.bind(context)()
                    }
                    return value
                },
                option() {
                    return this._options.option(...arguments)
                },
                resetOption(name) {
                    this.beginUpdate();
                    this._options.reset(name);
                    this.endUpdate();
                }
            }));

            /**
             * DevExtreme (esm/core/templates/function_template.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class FunctionTemplate extends TemplateBase {
                constructor(render) {
                    super();
                    this._render = render;
                }
                _renderCore(options) {
                    return normalizeTemplateElement(this._render(options))
                }
            } exports("bC", FunctionTemplate);

            /**
             * DevExtreme (esm/core/template_manager.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var TEXT_NODE = 3;
            var ANONYMOUS_TEMPLATE_NAME$1 = "template";
            var TEMPLATE_OPTIONS_NAME = "dxTemplate";
            var TEMPLATE_WRAPPER_CLASS = "dx-template-wrapper";
            var DX_POLYMORPH_WIDGET_TEMPLATE = new FunctionTemplate(_ref => {
                var {
                    model: model,
                    parent: parent
                } = _ref;
                var widgetName = model.widget;
                if (!widgetName) {
                    return $()
                }
                var widgetElement = $("<div>");
                var widgetOptions = model.options || {};
                if (parent) {
                    parent._createComponent(widgetElement, widgetName, widgetOptions);
                } else {
                    widgetElement[widgetName](widgetOptions);
                }
                return widgetElement
            });
            class TemplateManager {
                constructor(createElement, anonymousTemplateName) {
                    this._tempTemplates = [];
                    this._defaultTemplates = {};
                    this._anonymousTemplateName = anonymousTemplateName || ANONYMOUS_TEMPLATE_NAME$1;
                    this._createElement = createElement || defaultCreateElement;
                    this._createTemplateIfNeeded = this._createTemplateIfNeeded.bind(this);
                }
                static createDefaultOptions() {
                    return {
                        integrationOptions: {
                            watchMethod: function(fn, callback) {
                                var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                                if (!options.skipImmediate) {
                                    callback(fn());
                                }
                                return noop
                            },
                            templates: {
                                "dx-polymorph-widget": DX_POLYMORPH_WIDGET_TEMPLATE
                            },
                            useDeferUpdateForTemplates: true
                        }
                    }
                }
                get anonymousTemplateName() {
                    return this._anonymousTemplateName
                }
                addDefaultTemplates(templates) {
                    this._defaultTemplates = extend({}, this._defaultTemplates, templates);
                }
                dispose() {
                    this._tempTemplates.forEach(tempTemplate => {
                        tempTemplate.template.dispose && tempTemplate.template.dispose();
                    });
                    this._tempTemplates = [];
                }
                extractTemplates($el) {
                    var templates = this._extractTemplates($el);
                    var anonymousTemplateMeta = this._extractAnonymousTemplate($el);
                    return {
                        templates: templates,
                        anonymousTemplateMeta: anonymousTemplateMeta
                    }
                }
                _extractTemplates($el) {
                    var templates = findTemplates($el, TEMPLATE_OPTIONS_NAME);
                    var suitableTemplates = suitableTemplatesByName(templates);
                    templates.forEach(_ref2 => {
                        var {
                            element: element,
                            options: {
                                name: name
                            }
                        } = _ref2;
                        if (element === suitableTemplates[name]) {
                            $(element).addClass(TEMPLATE_WRAPPER_CLASS).detach();
                        } else {
                            $(element).remove();
                        }
                    });
                    return Object.keys(suitableTemplates).map(name => ({
                        name: name,
                        template: this._createTemplate(suitableTemplates[name])
                    }))
                }
                _extractAnonymousTemplate($el) {
                    var $anonymousTemplate = $el.contents().detach();
                    var $notJunkTemplateContent = $anonymousTemplate.filter((_, element) => {
                        var isTextNode = element.nodeType === TEXT_NODE;
                        var isEmptyText = $(element).text().trim().length < 1;
                        return !(isTextNode && isEmptyText)
                    });
                    return $notJunkTemplateContent.length > 0 ? {
                        template: this._createTemplate($anonymousTemplate),
                        name: this._anonymousTemplateName
                    } : {}
                }
                _createTemplateIfNeeded(templateSource) {
                    var cachedTemplate = this._tempTemplates.filter(tempTemplate => tempTemplate.source === templateKey(templateSource))[0];
                    if (cachedTemplate) {
                        return cachedTemplate.template
                    }
                    var template = this._createTemplate(templateSource);
                    this._tempTemplates.push({
                        template: template,
                        source: templateKey(templateSource)
                    });
                    return template
                }
                _createTemplate(templateSource) {
                    return this._createElement(validateTemplateSource(templateSource))
                }
                getTemplate(templateSource, templates, _ref3, context) {
                    var {
                        isAsyncTemplate: isAsyncTemplate,
                        skipTemplates: skipTemplates
                    } = _ref3;
                    if (!isFunction(templateSource)) {
                        return acquireTemplate(templateSource, this._createTemplateIfNeeded, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates)
                    }
                    return new FunctionTemplate(options => {
                        var templateSourceResult = templateSource.apply(context, getNormalizedTemplateArgs(options));
                        if (!isDefined(templateSourceResult)) {
                            return new EmptyTemplate
                        }
                        var dispose = false;
                        var template = acquireTemplate(templateSourceResult, templateSource => {
                            if (templateSource.nodeType || isRenderer(templateSource) && !$(templateSource).is("script")) {
                                return new FunctionTemplate(() => templateSource)
                            }
                            dispose = true;
                            return this._createTemplate(templateSource)
                        }, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates);
                        var result = template.render(options);
                        dispose && template.dispose && template.dispose();
                        return result
                    })
                }
            }

            /**
             * DevExtreme (esm/events/core/keyboard_processor.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var COMPOSITION_START_EVENT = "compositionstart";
            var COMPOSITION_END_EVENT = "compositionend";
            var KEYDOWN_EVENT = "keydown";
            var NAMESPACE = "KeyboardProcessor";
            var createKeyDownOptions = e => ({
                keyName: normalizeKeyName(e),
                key: e.key,
                code: e.code,
                ctrl: e.ctrlKey,
                location: e.location,
                metaKey: e.metaKey,
                shift: e.shiftKey,
                alt: e.altKey,
                which: e.which,
                originalEvent: e
            });
            var KeyboardProcessor = exports("aD", classImpl.inherit({
                _keydown: addNamespace$1(KEYDOWN_EVENT, NAMESPACE),
                _compositionStart: addNamespace$1(COMPOSITION_START_EVENT, NAMESPACE),
                _compositionEnd: addNamespace$1(COMPOSITION_END_EVENT, NAMESPACE),
                ctor: function(options) {
                    options = options || {};
                    if (options.element) {
                        this._element = $(options.element);
                    }
                    if (options.focusTarget) {
                        this._focusTarget = options.focusTarget;
                    }
                    this._handler = options.handler;
                    if (this._element) {
                        this._processFunction = e => {
                            var focusTargets = $(this._focusTarget).toArray();
                            var isNotFocusTarget = this._focusTarget && this._focusTarget !== e.target && !focusTargets.includes(e.target);
                            var shouldSkipProcessing = this._isComposingJustFinished && 229 === e.which || this._isComposing || isNotFocusTarget;
                            this._isComposingJustFinished = false;
                            if (!shouldSkipProcessing) {
                                this.process(e);
                            }
                        };
                        this._toggleProcessingWithContext = this.toggleProcessing.bind(this);
                        eventsEngine.on(this._element, this._keydown, this._processFunction);
                        eventsEngine.on(this._element, this._compositionStart, this._toggleProcessingWithContext);
                        eventsEngine.on(this._element, this._compositionEnd, this._toggleProcessingWithContext);
                    }
                },
                dispose: function() {
                    if (this._element) {
                        eventsEngine.off(this._element, this._keydown, this._processFunction);
                        eventsEngine.off(this._element, this._compositionStart, this._toggleProcessingWithContext);
                        eventsEngine.off(this._element, this._compositionEnd, this._toggleProcessingWithContext);
                    }
                    this._element = void 0;
                    this._handler = void 0;
                },
                process: function(e) {
                    this._handler(createKeyDownOptions(e));
                },
                toggleProcessing: function(_ref) {
                    var {
                        type: type
                    } = _ref;
                    this._isComposing = type === COMPOSITION_START_EVENT;
                    this._isComposingJustFinished = !this._isComposing;
                }
            }));
            KeyboardProcessor.createKeyDownOptions = createKeyDownOptions;

            /**
             * DevExtreme (esm/events/short.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */

            function addNamespace(event, namespace) {
                return namespace ? addNamespace$1(event, namespace) : event
            }

            function executeAction(action, args) {
                return "function" === typeof action ? action(args) : action.execute(args)
            }
            var active = {
                on: ($el, active, inactive, opts) => {
                    var {
                        selector: selector,
                        showTimeout: showTimeout,
                        hideTimeout: hideTimeout,
                        namespace: namespace
                    } = opts;
                    eventsEngine.on($el, addNamespace("dxactive", namespace), selector, {
                        timeout: showTimeout
                    }, event => executeAction(active, {
                        event: event,
                        element: event.currentTarget
                    }));
                    eventsEngine.on($el, addNamespace("dxinactive", namespace), selector, {
                        timeout: hideTimeout
                    }, event => executeAction(inactive, {
                        event: event,
                        element: event.currentTarget
                    }));
                },
                off: ($el, _ref) => {
                    var {
                        namespace: namespace,
                        selector: selector
                    } = _ref;
                    eventsEngine.off($el, addNamespace("dxactive", namespace), selector);
                    eventsEngine.off($el, addNamespace("dxinactive", namespace), selector);
                }
            };
            var resize = exports("aL", {
                on: function($el, resize) {
                    var {
                        namespace: namespace
                    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    eventsEngine.on($el, addNamespace("dxresize", namespace), resize);
                },
                off: function($el) {
                    var {
                        namespace: namespace
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    eventsEngine.off($el, addNamespace("dxresize", namespace));
                }
            });
            var hover = {
                on: ($el, start, end, _ref2) => {
                    var {
                        selector: selector,
                        namespace: namespace
                    } = _ref2;
                    eventsEngine.on($el, addNamespace("dxhoverend", namespace), selector, event => end(event));
                    eventsEngine.on($el, addNamespace("dxhoverstart", namespace), selector, event => executeAction(start, {
                        element: event.target,
                        event: event
                    }));
                },
                off: ($el, _ref3) => {
                    var {
                        selector: selector,
                        namespace: namespace
                    } = _ref3;
                    eventsEngine.off($el, addNamespace("dxhoverstart", namespace), selector);
                    eventsEngine.off($el, addNamespace("dxhoverend", namespace), selector);
                }
            };
            var visibility = exports("aN", {
                on: ($el, shown, hiding, _ref4) => {
                    var {
                        namespace: namespace
                    } = _ref4;
                    eventsEngine.on($el, addNamespace("dxhiding", namespace), hiding);
                    eventsEngine.on($el, addNamespace("dxshown", namespace), shown);
                },
                off: ($el, _ref5) => {
                    var {
                        namespace: namespace
                    } = _ref5;
                    eventsEngine.off($el, addNamespace("dxhiding", namespace));
                    eventsEngine.off($el, addNamespace("dxshown", namespace));
                }
            });
            var focus = exports("aP", {
                on: ($el, focusIn, focusOut, _ref6) => {
                    var {
                        namespace: namespace
                    } = _ref6;
                    eventsEngine.on($el, addNamespace("focusin", namespace), focusIn);
                    eventsEngine.on($el, addNamespace("focusout", namespace), focusOut);
                },
                off: ($el, _ref7) => {
                    var {
                        namespace: namespace
                    } = _ref7;
                    eventsEngine.off($el, addNamespace("focusin", namespace));
                    eventsEngine.off($el, addNamespace("focusout", namespace));
                },
                trigger: $el => eventsEngine.trigger($el, "focus")
            });
            var dxClick = exports("aJ", {
                on: function($el, click) {
                    var {
                        namespace: namespace
                    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    eventsEngine.on($el, addNamespace("dxclick", namespace), click);
                },
                off: function($el) {
                    var {
                        namespace: namespace
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    eventsEngine.off($el, addNamespace("dxclick", namespace));
                }
            });
            var click = exports("aQ", {
                on: function($el, click) {
                    var {
                        namespace: namespace
                    } = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    eventsEngine.on($el, addNamespace("click", namespace), click);
                },
                off: function($el) {
                    var {
                        namespace: namespace
                    } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                    eventsEngine.off($el, addNamespace("click", namespace));
                }
            });
            var index = 0;
            var keyboardProcessors = {};
            var generateListenerId = () => "keyboardProcessorId".concat(index++);
            var keyboard = exports("aK", {
                on: (element, focusTarget, handler) => {
                    var listenerId = generateListenerId();
                    keyboardProcessors[listenerId] = new KeyboardProcessor({
                        element: element,
                        focusTarget: focusTarget,
                        handler: handler
                    });
                    return listenerId
                },
                off: listenerId => {
                    if (listenerId && keyboardProcessors[listenerId]) {
                        keyboardProcessors[listenerId].dispose();
                        delete keyboardProcessors[listenerId];
                    }
                },
                _getProcessor: listenerId => keyboardProcessors[listenerId]
            });

            /**
             * DevExtreme (esm/__internal/core/license/byte_utils.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            function base64ToBytes(base64) {
                return new Uint8Array(atob(base64).split("").map(s => s.charCodeAt(0)))
            }
            function hexToBytes(string) {
                var _a, _b;
                return new Uint8Array(null !== (_b = null === (_a = string.match(/.{1,2}/g)) || void 0 === _a ? void 0 : _a.map(byte => parseInt(byte, 16))) && void 0 !== _b ? _b : [])
            }
            function stringToBytes(string) {
                var bytes = new Uint8Array(string.length);
                for (var k = 0; k < string.length; k += 1) {
                    bytes[k] = 255 & string.charCodeAt(k);
                }
                return bytes
            }
            function wordsToBytes(words) {
                var bytes = new Uint8Array(4 * words.length);
                for (var k = 0; k < bytes.length; k += 1) {
                    bytes[k] = words[k >> 2] >>> 8 * (3 - k % 4);
                }
                return bytes
            }
            function bytesToWords(bytes) {
                var words = new Uint32Array(1 + (bytes.length - 1 >> 2));
                for (var k = 0; k < bytes.length; k += 1) {
                    words[k >> 2] |= bytes[k] << 8 * (3 - k % 4);
                }
                return words
            }
            function leftRotate(x, n) {
                return (x << n | x >>> 32 - n) >>> 0
            }
            function concatBytes(a, b) {
                var result = new Uint8Array(a.length + b.length);
                result.set(a, 0);
                result.set(b, a.length);
                return result
            }

            /**
             * DevExtreme (esm/__internal/core/license/key.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var PUBLIC_KEY = {
                e: 65537,
                n: new Uint8Array([200, 219, 153, 203, 140, 7, 228, 253, 193, 243, 62, 137, 139, 60, 68, 242, 48, 142, 113, 88, 185, 235, 253, 105, 80, 74, 32, 170, 96, 74, 111, 250, 7, 205, 154, 3, 146, 115, 153, 53, 45, 132, 123, 56, 61, 208, 184, 201, 63, 24, 109, 223, 0, 179, 169, 102, 139, 224, 73, 233, 45, 173, 138, 66, 98, 88, 69, 76, 177, 111, 113, 218, 192, 33, 101, 152, 25, 134, 34, 173, 32, 82, 230, 44, 247, 200, 253, 170, 192, 246, 30, 12, 96, 205, 100, 249, 181, 93, 0, 231])
            };
            var INTERNAL_USAGE_ID = "5rAVv9FUI0-DvPTlA2YOQA";

            /**
             * DevExtreme (esm/__internal/core/license/pkcs1.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ASN1_SHA1 = "3021300906052b0e03021a05000414";
            function pad(hash) {
                var dataLength = (8 * PUBLIC_KEY.n.length + 6) / 8;
                var data = concatBytes(hexToBytes(ASN1_SHA1), hash);
                if (data.length + 10 > dataLength) {
                    throw Error("Key is too short for SHA1 signing algorithm")
                }
                var padding = new Uint8Array(dataLength - data.length);
                padding.fill(255, 0, padding.length - 1);
                padding[0] = 0;
                padding[1] = 1;
                padding[padding.length - 1] = 0;
                return concatBytes(padding, data)
            }

            /**
             * DevExtreme (esm/__internal/core/license/rsa_bigint.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            function compareSignatures(args) {
                try {
                    var zero = BigInt(0);
                    var one = BigInt(1);
                    var eight = BigInt(8);
                    var bigIntFromBytes = bytes => bytes.reduce((acc, cur) => (acc << eight) + BigInt(cur), zero);
                    var actual = bigIntFromBytes(args.actual);
                    var signature = bigIntFromBytes(args.signature);
                    var exponent = BigInt(args.key.e);
                    var modulus = bigIntFromBytes(args.key.n);
                    var expected = ((base, exponent, modulus) => {
                        var result = one;
                        var b = base;
                        var e = exponent;
                        while (e) {
                            if (e & one) {
                                result = result * b % modulus;
                            }
                            b = b * b % modulus;
                            e >>= one;
                        }
                        return result
                    })(signature, exponent, modulus);
                    return expected === actual
                } catch (_a) {
                    return true
                }
            }

            /**
             * DevExtreme (esm/__internal/core/license/sha1.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            function preprocess(text) {
                var bytes = new Uint8Array(text.length + 1);
                bytes.set(stringToBytes(text));
                bytes[bytes.length - 1] = 128;
                var words = bytesToWords(new Uint8Array(bytes));
                var result = new Uint32Array(16 * Math.ceil((words.length + 2) / 16));
                result.set(words, 0);
                result[result.length - 1] = 8 * (bytes.length - 1);
                return result
            }
            function sha1(text) {
                var message = preprocess(text);
                var h = new Uint32Array([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
                for (var i = 0; i < message.length; i += 16) {
                    var w = new Uint32Array(80);
                    for (var j = 0; j < 16; j += 1) {
                        w[j] = message[i + j];
                    }
                    for (var _j = 16; _j < 80; _j += 1) {
                        var n = w[_j - 3] ^ w[_j - 8] ^ w[_j - 14] ^ w[_j - 16];
                        w[_j] = n << 1 | n >>> 31;
                    }
                    var a = h[0];
                    var b = h[1];
                    var c = h[2];
                    var d = h[3];
                    var e = h[4];
                    for (var _j2 = 0; _j2 < 80; _j2 += 1) {
                        var [f, k] = _j2 < 20 ? [b & c | ~b & d, 1518500249] : _j2 < 40 ? [b ^ c ^ d, 1859775393] : _j2 < 60 ? [b & c | b & d | c & d, 2400959708] : [b ^ c ^ d, 3395469782];
                        var temp = leftRotate(a, 5) + f + e + k + w[_j2];
                        e = d;
                        d = c;
                        c = leftRotate(b, 30);
                        b = a;
                        a = temp;
                    }
                    h[0] += a;
                    h[1] += b;
                    h[2] += c;
                    h[3] += d;
                    h[4] += e;
                }
                return wordsToBytes(h)
            }

            /**
             * DevExtreme (esm/__internal/core/license/types.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var TokenKind;
            ! function(TokenKind) {
                TokenKind.corrupted = "corrupted";
                TokenKind.verified = "verified";
                TokenKind.internal = "internal";
            }(TokenKind || (TokenKind = {}));

            /**
             * DevExtreme (esm/__internal/core/license/license_validation.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var __rest$1 = window && window.__rest || function(s, e) {
                var t = {};
                for (var p in s) {
                    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) {
                        t[p] = s[p];
                    }
                }
                if (null != s && "function" === typeof Object.getOwnPropertySymbols) {
                    var i = 0;
                    for (p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) {
                            t[p[i]] = s[p[i]];
                        }
                    }
                }
                return t
            };
            var SPLITTER = ".";
            var FORMAT = 1;
            var RTM_MIN_PATCH_VERSION = 3;
            var GENERAL_ERROR = {
                kind: TokenKind.corrupted,
                error: "general"
            };
            var VERIFICATION_ERROR = {
                kind: TokenKind.corrupted,
                error: "verification"
            };
            var DECODING_ERROR = {
                kind: TokenKind.corrupted,
                error: "decoding"
            };
            var DESERIALIZATION_ERROR = {
                kind: TokenKind.corrupted,
                error: "deserialization"
            };
            var PAYLOAD_ERROR = {
                kind: TokenKind.corrupted,
                error: "payload"
            };
            var VERSION_ERROR = {
                kind: TokenKind.corrupted,
                error: "version"
            };
            var validationPerformed = false;

            function verifySignature(_ref) {
                var {
                    text: text,
                    signature: encodedSignature
                } = _ref;
                return compareSignatures({
                    key: PUBLIC_KEY,
                    signature: base64ToBytes(encodedSignature),
                    actual: pad(sha1(text))
                })
            }
            function parseLicenseKey(encodedKey) {
                if (void 0 === encodedKey) {
                    return GENERAL_ERROR
                }
                var parts = encodedKey.split(SPLITTER);
                if (2 !== parts.length || 0 === parts[0].length || 0 === parts[1].length) {
                    return GENERAL_ERROR
                }
                if (!verifySignature({
                        text: parts[0],
                        signature: parts[1]
                    })) {
                    return VERIFICATION_ERROR
                }
                var decodedPayload = "";
                try {
                    decodedPayload = atob(parts[0]);
                } catch (_a) {
                    return DECODING_ERROR
                }
                var payload = {};
                try {
                    payload = JSON.parse(decodedPayload);
                } catch (_b) {
                    return DESERIALIZATION_ERROR
                }
                var {
                    customerId: customerId,
                    maxVersionAllowed: maxVersionAllowed,
                    format: format,
                    internalUsageId: internalUsageId
                } = payload, rest = __rest$1(payload, ["customerId", "maxVersionAllowed", "format", "internalUsageId"]);
                if (void 0 !== internalUsageId) {
                    return {
                        kind: TokenKind.internal,
                        internalUsageId: internalUsageId
                    }
                }
                if (void 0 === customerId || void 0 === maxVersionAllowed || void 0 === format) {
                    return PAYLOAD_ERROR
                }
                if (format !== FORMAT) {
                    return VERSION_ERROR
                }
                return {
                    kind: TokenKind.verified,
                    payload: _extends({
                        customerId: customerId,
                        maxVersionAllowed: maxVersionAllowed
                    }, rest)
                }
            }

            function getLicenseCheckParams(_ref2) {
                var {
                    licenseKey: licenseKey,
                    version: version
                } = _ref2;
                var preview = false;
                try {
                    var [major, minor, patch] = version.split(".").map(Number);
                    preview = isNaN(patch) || patch < RTM_MIN_PATCH_VERSION;
                    if (!licenseKey) {
                        return {
                            preview: preview,
                            error: "W0019"
                        }
                    }
                    var license = parseLicenseKey(licenseKey);
                    if (license.kind === TokenKind.corrupted) {
                        return {
                            preview: preview,
                            error: "W0021"
                        }
                    }
                    if (license.kind === TokenKind.internal) {
                        return {
                            preview: preview,
                            internal: true,
                            error: license.internalUsageId === INTERNAL_USAGE_ID ? void 0 : "W0020"
                        }
                    }
                    if (!(major && minor)) {
                        return {
                            preview: preview,
                            error: "W0021"
                        }
                    }
                    if (10 * major + minor > license.payload.maxVersionAllowed) {
                        return {
                            preview: preview,
                            error: "W0020"
                        }
                    }
                    return {
                        preview: preview,
                        error: void 0
                    }
                } catch (_a) {
                    return {
                        preview: preview,
                        error: "W0021"
                    }
                }
            }
            function validateLicense(licenseKey) {
                var version$1 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : version;
                if (validationPerformed) {
                    return
                }
                validationPerformed = true;
                var {
                    preview: preview,
                    internal: internal,
                    error: error
                } = getLicenseCheckParams({
                    licenseKey: licenseKey,
                    version: version$1
                });
                if (error) {
                    errors$2.log(preview ? "W0022" : error);
                    return
                }
                if (preview && !internal) {
                    errors$2.log("W0022");
                }
            }
            function peekValidationPerformed() {
                return validationPerformed
            }
            var license = {
                validateLicense: validateLicense
            };

            /**
             * DevExtreme (esm/core/dom_component.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var {
                abstract: abstract$1
            } = Component;
            var DOMComponent = exports("aC", Component.inherit({
                _getDefaultOptions() {
                    return extend(this.callBase(), {
                        width: void 0,
                        height: void 0,
                        rtlEnabled: configMethod().rtlEnabled,
                        elementAttr: {},
                        disabled: false,
                        integrationOptions: {}
                    }, this._useTemplates() ? TemplateManager.createDefaultOptions() : {})
                },
                ctor(element, options) {
                    this._customClass = null;
                    this._createElement(element);
                    attachInstanceToElement(this._$element, this, this._dispose);
                    this.callBase(options);
                    var validationAlreadyPerformed = peekValidationPerformed();
                    license.validateLicense(configMethod().licenseKey);
                    if (!validationAlreadyPerformed && peekValidationPerformed()) {
                        configMethod({
                            licenseKey: ""
                        });
                    }
                },
                _createElement(element) {
                    this._$element = $(element);
                },
                _getSynchronizableOptionsForCreateComponent: () => ["rtlEnabled", "disabled", "templatesRenderAsynchronously"],
                _checkFunctionValueDeprecation: function(optionNames) {
                    if (!this.option("_ignoreFunctionValueDeprecation")) {
                        optionNames.forEach(optionName => {
                            if (isFunction(this.option(optionName))) {
                                errors$2.log("W0017", optionName);
                            }
                        });
                    }
                },
                _visibilityChanged: abstract$1,
                _dimensionChanged: abstract$1,
                _init() {
                    this.callBase();
                    this._checkFunctionValueDeprecation(["width", "height", "maxHeight", "maxWidth", "minHeight", "minWidth", "popupHeight", "popupWidth"]);
                    this._attachWindowResizeCallback();
                    this._initTemplateManager();
                },
                _setOptionsByDevice(instanceCustomRules) {
                    this.callBase([].concat(this.constructor._classCustomRules || [], instanceCustomRules || []));
                },
                _isInitialOptionValue(name) {
                    var isCustomOption = this.constructor._classCustomRules && Object.prototype.hasOwnProperty.call(this._convertRulesToOptions(this.constructor._classCustomRules), name);
                    return !isCustomOption && this.callBase(name)
                },
                _attachWindowResizeCallback() {
                    if (this._isDimensionChangeSupported()) {
                        var windowResizeCallBack = this._windowResizeCallBack = this._dimensionChanged.bind(this);
                        resizeCallbacks.add(windowResizeCallBack);
                    }
                },
                _isDimensionChangeSupported() {
                    return this._dimensionChanged !== abstract$1
                },
                _renderComponent() {
                    addShadowDomStyles(this.$element());
                    this._initMarkup();
                    hasWindow() && this._render();
                },
                _initMarkup() {
                    var {
                        rtlEnabled: rtlEnabled
                    } = this.option() || {};
                    this._renderElementAttributes();
                    this._toggleRTLDirection(rtlEnabled);
                    this._renderVisibilityChange();
                    this._renderDimensions();
                },
                _render() {
                    this._attachVisibilityChangeHandlers();
                },
                _renderElementAttributes() {
                    var {
                        elementAttr: elementAttr
                    } = this.option() || {};
                    var attributes = extend({}, elementAttr);
                    var classNames = attributes.class;
                    delete attributes.class;
                    this.$element().attr(attributes).removeClass(this._customClass).addClass(classNames);
                    this._customClass = classNames;
                },
                _renderVisibilityChange() {
                    if (this._isDimensionChangeSupported()) {
                        this._attachDimensionChangeHandlers();
                    }
                    if (this._isVisibilityChangeSupported()) {
                        var $element = this.$element();
                        $element.addClass("dx-visibility-change-handler");
                    }
                },
                _renderDimensions() {
                    var $element = this.$element();
                    var element = $element.get(0);
                    var width = this._getOptionValue("width", element);
                    var height = this._getOptionValue("height", element);
                    if (this._isCssUpdateRequired(element, height, width)) {
                        $element.css({
                            width: null === width ? "" : width,
                            height: null === height ? "" : height
                        });
                    }
                },
                _isCssUpdateRequired: (element, height, width) => !!(isDefined(width) || isDefined(height) || element.style.width || element.style.height),
                _attachDimensionChangeHandlers() {
                    var $el = this.$element();
                    var namespace = "".concat(this.NAME, "VisibilityChange");
                    resize.off($el, {
                        namespace: namespace
                    });
                    resize.on($el, () => this._dimensionChanged(), {
                        namespace: namespace
                    });
                },
                _attachVisibilityChangeHandlers() {
                    if (this._isVisibilityChangeSupported()) {
                        var $el = this.$element();
                        var namespace = "".concat(this.NAME, "VisibilityChange");
                        this._isHidden = !this._isVisible();
                        visibility.off($el, {
                            namespace: namespace
                        });
                        visibility.on($el, () => this._checkVisibilityChanged("shown"), () => this._checkVisibilityChanged("hiding"), {
                            namespace: namespace
                        });
                    }
                },
                _isVisible() {
                    var $element = this.$element();
                    return $element.is(":visible")
                },
                _checkVisibilityChanged(action) {
                    var isVisible = this._isVisible();
                    if (isVisible) {
                        if ("hiding" === action && !this._isHidden) {
                            this._visibilityChanged(false);
                            this._isHidden = true;
                        } else if ("shown" === action && this._isHidden) {
                            this._isHidden = false;
                            this._visibilityChanged(true);
                        }
                    }
                },
                _isVisibilityChangeSupported() {
                    return this._visibilityChanged !== abstract$1 && hasWindow()
                },
                _clean: noop,
                _modelByElement() {
                    var {
                        modelByElement: modelByElement
                    } = this.option();
                    var $element = this.$element();
                    return modelByElement ? modelByElement($element) : void 0
                },
                _invalidate() {
                    if (this._isUpdateAllowed()) {
                        throw errors$2.Error("E0007")
                    }
                    this._requireRefresh = true;
                },
                _refresh() {
                    this._clean();
                    this._renderComponent();
                },
                _dispose() {
                    this._templateManager && this._templateManager.dispose();
                    this.callBase();
                    this._clean();
                    this._detachWindowResizeCallback();
                },
                _detachWindowResizeCallback() {
                    if (this._isDimensionChangeSupported()) {
                        resizeCallbacks.remove(this._windowResizeCallBack);
                    }
                },
                _toggleRTLDirection(rtl) {
                    var $element = this.$element();
                    $element.toggleClass("dx-rtl", rtl);
                },
                _createComponent(element, component) {
                    var config = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
                    var synchronizableOptions = grep(this._getSynchronizableOptionsForCreateComponent(), value => !(value in config));
                    var {
                        integrationOptions: integrationOptions
                    } = this.option();
                    var {
                        nestedComponentOptions: nestedComponentOptions
                    } = this.option();
                    nestedComponentOptions = nestedComponentOptions || noop;
                    var nestedComponentConfig = extend({
                        integrationOptions: integrationOptions
                    }, nestedComponentOptions(this));
                    synchronizableOptions.forEach(optionName => nestedComponentConfig[optionName] = this.option(optionName));
                    this._extendConfig(config, nestedComponentConfig);
                    var instance = void 0;
                    if (isString(component)) {
                        var $element = $(element)[component](config);
                        instance = $element[component]("instance");
                    } else if (element) {
                        instance = component.getInstance(element);
                        if (instance) {
                            instance.option(config);
                        } else {
                            instance = new component(element, config);
                        }
                    }
                    if (instance) {
                        var optionChangedHandler = _ref => {
                            var {
                                name: name,
                                value: value
                            } = _ref;
                            if (synchronizableOptions.includes(name)) {
                                instance.option(name, value);
                            }
                        };
                        this.on("optionChanged", optionChangedHandler);
                        instance.on("disposing", () => this.off("optionChanged", optionChangedHandler));
                    }
                    return instance
                },
                _extendConfig(config, extendConfig) {
                    each(extendConfig, (key, value) => {
                        !Object.prototype.hasOwnProperty.call(config, key) && (config[key] = value);
                    });
                },
                _defaultActionConfig() {
                    var $element = this.$element();
                    var context = this._modelByElement($element);
                    return extend(this.callBase(), {
                        context: context
                    })
                },
                _defaultActionArgs() {
                    var $element = this.$element();
                    var model = this._modelByElement($element);
                    var element = this.element();
                    return extend(this.callBase(), {
                        element: element,
                        model: model
                    })
                },
                _optionChanged(args) {
                    switch (args.name) {
                        case "width":
                        case "height":
                            this._renderDimensions();
                            break;
                        case "rtlEnabled":
                            this._invalidate();
                            break;
                        case "elementAttr":
                            this._renderElementAttributes();
                            break;
                        case "disabled":
                        case "integrationOptions":
                            break;
                        default:
                            this.callBase(args);
                    }
                },
                _removeAttributes(element) {
                    var attrs = element.attributes;
                    for (var i = attrs.length - 1; i >= 0; i--) {
                        var attr = attrs[i];
                        if (attr) {
                            var {
                                name: name
                            } = attr;
                            if (!name.indexOf("aria-") || -1 !== name.indexOf("dx-") || "role" === name || "style" === name || "tabindex" === name) {
                                element.removeAttribute(name);
                            }
                        }
                    }
                },
                _removeClasses(element) {
                    element.className = element.className.split(" ").filter(cssClass => 0 !== cssClass.lastIndexOf("dx-", 0)).join(" ");
                },
                _updateDOMComponent(renderRequired) {
                    if (renderRequired) {
                        this._renderComponent();
                    } else if (this._requireRefresh) {
                        this._requireRefresh = false;
                        this._refresh();
                    }
                },
                endUpdate() {
                    var renderRequired = this._isInitializingRequired();
                    this.callBase();
                    this._isUpdateAllowed() && this._updateDOMComponent(renderRequired);
                },
                $element() {
                    return this._$element
                },
                element() {
                    var $element = this.$element();
                    return getPublicElement($element)
                },
                dispose() {
                    var element = this.$element().get(0);
                    cleanDataRecursive(element, true);
                    element.textContent = "";
                    this._removeAttributes(element);
                    this._removeClasses(element);
                },
                resetOption(optionName) {
                    this.callBase(optionName);
                    if ("width" === optionName || "height" === optionName) {
                        var initialOption = this.initialOption(optionName);
                        !isDefined(initialOption) && this.$element().css(optionName, "");
                    }
                },
                _getAnonymousTemplateName() {
                    return
                },
                _initTemplateManager() {
                    if (this._templateManager || !this._useTemplates()) {
                        return
                    }
                    var {
                        integrationOptions: integrationOptions = {}
                    } = this.option();
                    var {
                        createTemplate: createTemplate
                    } = integrationOptions;
                    this._templateManager = new TemplateManager(createTemplate, this._getAnonymousTemplateName());
                    this._initTemplates();
                },
                _initTemplates() {
                    var {
                        templates: templates,
                        anonymousTemplateMeta: anonymousTemplateMeta
                    } = this._templateManager.extractTemplates(this.$element());
                    var anonymousTemplate = this.option("integrationOptions.templates.".concat(anonymousTemplateMeta.name));
                    templates.forEach(_ref2 => {
                        var {
                            name: name,
                            template: template
                        } = _ref2;
                        this._options.silent("integrationOptions.templates.".concat(name), template);
                    });
                    if (anonymousTemplateMeta.name && !anonymousTemplate) {
                        this._options.silent("integrationOptions.templates.".concat(anonymousTemplateMeta.name), anonymousTemplateMeta.template);
                        this._options.silent("_hasAnonymousTemplateContent", true);
                    }
                },
                _getTemplateByOption(optionName) {
                    return this._getTemplate(this.option(optionName))
                },
                _getTemplate(templateSource) {
                    var templates = this.option("integrationOptions.templates");
                    var isAsyncTemplate = this.option("templatesRenderAsynchronously");
                    var skipTemplates = this.option("integrationOptions.skipTemplates");
                    return this._templateManager.getTemplate(templateSource, templates, {
                        isAsyncTemplate: isAsyncTemplate,
                        skipTemplates: skipTemplates
                    }, this)
                },
                _saveTemplate(name, template) {
                    this._setOptionWithoutOptionChange("integrationOptions.templates." + name, this._templateManager._createTemplate(template));
                },
                _useTemplates: () => true
            }));
            DOMComponent.getInstance = function(element) {
                return getInstanceByElement($(element), this)
            };
            DOMComponent.defaultOptions = function(rule) {
                this._classCustomRules = this._classCustomRules || [];
                this._classCustomRules.push(rule);
            };

            /**
             * DevExtreme (esm/core/utils/version.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            function compare(x, y, maxLevel) {
                function normalizeArg(value) {
                    if ("string" === typeof value) {
                        return value.split(".")
                    }
                    if ("number" === typeof value) {
                        return [value]
                    }
                    return value
                }
                x = normalizeArg(x);
                y = normalizeArg(y);
                var length = Math.max(x.length, y.length);
                if (isFinite(maxLevel)) {
                    length = Math.min(length, maxLevel);
                }
                for (var i = 0; i < length; i++) {
                    var xItem = parseInt(x[i] || 0, 10);
                    var yItem = parseInt(y[i] || 0, 10);
                    if (xItem < yItem) {
                        return -1
                    }
                    if (xItem > yItem) {
                        return 1
                    }
                }
                return 0
            }

            /**
             * DevExtreme (esm/ui/widget/ui.widget.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */

            function setAttribute(name, value, target) {
                name = "role" === name || "id" === name ? name : "aria-".concat(name);
                value = isDefined(value) ? value.toString() : null;
                target.attr(name, value);
            }
            var Widget = exports("W", DOMComponent.inherit({
                _feedbackHideTimeout: 400,
                _feedbackShowTimeout: 30,
                _supportedKeys: () => ({}),
                _getDefaultOptions() {
                    return extend(this.callBase(), {
                        hoveredElement: null,
                        isActive: false,
                        disabled: false,
                        visible: true,
                        hint: void 0,
                        activeStateEnabled: false,
                        onContentReady: null,
                        hoverStateEnabled: false,
                        focusStateEnabled: false,
                        tabIndex: 0,
                        accessKey: void 0,
                        onFocusIn: null,
                        onFocusOut: null,
                        onKeyboardHandled: null,
                        ignoreParentReadOnly: false,
                        useResizeObserver: true
                    })
                },
                _defaultOptionsRules: function() {
                    return this.callBase().concat([{
                        device: function() {
                            var device = devices.real();
                            var platform = device.platform;
                            var version = device.version;
                            return "ios" === platform && compare(version, "13.3") <= 0
                        },
                        options: {
                            useResizeObserver: false
                        }
                    }])
                },
                _init() {
                    this.callBase();
                    this._initContentReadyAction();
                },
                _innerWidgetOptionChanged: function(innerWidget, args) {
                    var options = Widget.getOptionsFromContainer(args);
                    innerWidget && innerWidget.option(options);
                    this._options.cache(args.name, options);
                },
                _bindInnerWidgetOptions(innerWidget, optionsContainer) {
                    var syncOptions = () => this._options.silent(optionsContainer, extend({}, innerWidget.option()));
                    syncOptions();
                    innerWidget.on("optionChanged", syncOptions);
                },
                _getAriaTarget() {
                    return this._focusTarget()
                },
                _initContentReadyAction() {
                    this._contentReadyAction = this._createActionByOption("onContentReady", {
                        excludeValidators: ["disabled", "readOnly"]
                    });
                },
                _initMarkup() {
                    var {
                        disabled: disabled,
                        visible: visible
                    } = this.option();
                    this.$element().addClass("dx-widget");
                    this._toggleDisabledState(disabled);
                    this._toggleVisibility(visible);
                    this._renderHint();
                    this._isFocusable() && this._renderFocusTarget();
                    this.callBase();
                },
                _render() {
                    this.callBase();
                    this._renderContent();
                    this._renderFocusState();
                    this._attachFeedbackEvents();
                    this._attachHoverEvents();
                    this._toggleIndependentState();
                },
                _renderHint() {
                    var {
                        hint: hint
                    } = this.option();
                    this.$element().attr("title", hint || null);
                },
                _renderContent() {
                    deferRender(() => !this._disposed ? this._renderContentImpl() : void 0).done(() => !this._disposed ? this._fireContentReadyAction() : void 0);
                },
                _renderContentImpl: noop,
                _fireContentReadyAction: deferRenderer((function() {
                    return this._contentReadyAction()
                })),
                _dispose() {
                    this._contentReadyAction = null;
                    this._detachKeyboardEvents();
                    this.callBase();
                },
                _resetActiveState() {
                    this._toggleActiveState(this._eventBindingTarget(), false);
                },
                _clean() {
                    this._cleanFocusState();
                    this._resetActiveState();
                    this.callBase();
                    this.$element().empty();
                },
                _toggleVisibility(visible) {
                    this.$element().toggleClass("dx-state-invisible", !visible);
                },
                _renderFocusState() {
                    this._attachKeyboardEvents();
                    if (this._isFocusable()) {
                        this._renderFocusTarget();
                        this._attachFocusEvents();
                        this._renderAccessKey();
                    }
                },
                _renderAccessKey() {
                    var $el = this._focusTarget();
                    var {
                        accessKey: accessKey
                    } = this.option();
                    $el.attr("accesskey", accessKey);
                },
                _isFocusable() {
                    var {
                        focusStateEnabled: focusStateEnabled,
                        disabled: disabled
                    } = this.option();
                    return focusStateEnabled && !disabled
                },
                _eventBindingTarget() {
                    return this.$element()
                },
                _focusTarget() {
                    return this._getActiveElement()
                },
                _isFocusTarget: function(element) {
                    var focusTargets = $(this._focusTarget()).toArray();
                    return focusTargets.includes(element)
                },
                _findActiveTarget($element) {
                    return $element.find(this._activeStateUnit).not(".dx-state-disabled")
                },
                _getActiveElement() {
                    var activeElement = this._eventBindingTarget();
                    if (this._activeStateUnit) {
                        return this._findActiveTarget(activeElement)
                    }
                    return activeElement
                },
                _renderFocusTarget() {
                    var {
                        tabIndex: tabIndex
                    } = this.option();
                    this._focusTarget().attr("tabIndex", tabIndex);
                },
                _keyboardEventBindingTarget() {
                    return this._eventBindingTarget()
                },
                _refreshFocusEvent() {
                    this._detachFocusEvents();
                    this._attachFocusEvents();
                },
                _focusEventTarget() {
                    return this._focusTarget()
                },
                _focusInHandler(event) {
                    if (!event.isDefaultPrevented()) {
                        this._createActionByOption("onFocusIn", {
                            beforeExecute: () => this._updateFocusState(event, true),
                            excludeValidators: ["readOnly"]
                        })({
                            event: event
                        });
                    }
                },
                _focusOutHandler(event) {
                    if (!event.isDefaultPrevented()) {
                        this._createActionByOption("onFocusOut", {
                            beforeExecute: () => this._updateFocusState(event, false),
                            excludeValidators: ["readOnly", "disabled"]
                        })({
                            event: event
                        });
                    }
                },
                _updateFocusState(_ref, isFocused) {
                    var {
                        target: target
                    } = _ref;
                    if (this._isFocusTarget(target)) {
                        this._toggleFocusClass(isFocused, $(target));
                    }
                },
                _toggleFocusClass(isFocused, $element) {
                    var $focusTarget = $element && $element.length ? $element : this._focusTarget();
                    $focusTarget.toggleClass("dx-state-focused", isFocused);
                },
                _hasFocusClass(element) {
                    var $focusTarget = $(element || this._focusTarget());
                    return $focusTarget.hasClass("dx-state-focused")
                },
                _isFocused() {
                    return this._hasFocusClass()
                },
                _getKeyboardListeners: () => [],
                _attachKeyboardEvents() {
                    this._detachKeyboardEvents();
                    var {
                        focusStateEnabled: focusStateEnabled,
                        onKeyboardHandled: onKeyboardHandled
                    } = this.option();
                    var hasChildListeners = this._getKeyboardListeners().length;
                    var hasKeyboardEventHandler = !!onKeyboardHandled;
                    var shouldAttach = focusStateEnabled || hasChildListeners || hasKeyboardEventHandler;
                    if (shouldAttach) {
                        this._keyboardListenerId = keyboard.on(this._keyboardEventBindingTarget(), this._focusTarget(), opts => this._keyboardHandler(opts));
                    }
                },
                _keyboardHandler(options, onlyChildProcessing) {
                    if (!onlyChildProcessing) {
                        var {
                            originalEvent: originalEvent,
                            keyName: keyName,
                            which: which
                        } = options;
                        var keys = this._supportedKeys(originalEvent);
                        var func = keys[keyName] || keys[which];
                        if (void 0 !== func) {
                            var handler = func.bind(this);
                            var result = handler(originalEvent, options);
                            if (!result) {
                                return false
                            }
                        }
                    }
                    var keyboardListeners = this._getKeyboardListeners();
                    var {
                        onKeyboardHandled: onKeyboardHandled
                    } = this.option();
                    keyboardListeners.forEach(listener => listener && listener._keyboardHandler(options));
                    onKeyboardHandled && onKeyboardHandled(options);
                    return true
                },
                _refreshFocusState() {
                    this._cleanFocusState();
                    this._renderFocusState();
                },
                _cleanFocusState() {
                    var $element = this._focusTarget();
                    $element.removeAttr("tabIndex");
                    this._toggleFocusClass(false);
                    this._detachFocusEvents();
                    this._detachKeyboardEvents();
                },
                _detachKeyboardEvents() {
                    keyboard.off(this._keyboardListenerId);
                    this._keyboardListenerId = null;
                },
                _attachHoverEvents() {
                    var {
                        hoverStateEnabled: hoverStateEnabled
                    } = this.option();
                    var selector = this._activeStateUnit;
                    var $el = this._eventBindingTarget();
                    hover.off($el, {
                        selector: selector,
                        namespace: "UIFeedback"
                    });
                    if (hoverStateEnabled) {
                        hover.on($el, new Action(_ref2 => {
                            var {
                                event: event,
                                element: element
                            } = _ref2;
                            this._hoverStartHandler(event);
                            this.option("hoveredElement", $(element));
                        }, {
                            excludeValidators: ["readOnly"]
                        }), event => {
                            this.option("hoveredElement", null);
                            this._hoverEndHandler(event);
                        }, {
                            selector: selector,
                            namespace: "UIFeedback"
                        });
                    }
                },
                _attachFeedbackEvents() {
                    var {
                        activeStateEnabled: activeStateEnabled
                    } = this.option();
                    var selector = this._activeStateUnit;
                    var $el = this._eventBindingTarget();
                    active.off($el, {
                        namespace: "UIFeedback",
                        selector: selector
                    });
                    if (activeStateEnabled) {
                        active.on($el, new Action(_ref3 => {
                            var {
                                event: event,
                                element: element
                            } = _ref3;
                            return this._toggleActiveState($(element), true, event)
                        }), new Action(_ref4 => {
                            var {
                                event: event,
                                element: element
                            } = _ref4;
                            return this._toggleActiveState($(element), false, event)
                        }, {
                            excludeValidators: ["disabled", "readOnly"]
                        }), {
                            showTimeout: this._feedbackShowTimeout,
                            hideTimeout: this._feedbackHideTimeout,
                            selector: selector,
                            namespace: "UIFeedback"
                        });
                    }
                },
                _detachFocusEvents() {
                    var $el = this._focusEventTarget();
                    focus.off($el, {
                        namespace: "".concat(this.NAME, "Focus")
                    });
                },
                _attachFocusEvents() {
                    var $el = this._focusEventTarget();
                    focus.on($el, e => this._focusInHandler(e), e => this._focusOutHandler(e), {
                        namespace: "".concat(this.NAME, "Focus"),
                        isFocusable: (index, el) => $(el).is(focusable)
                    });
                },
                _hoverStartHandler: noop,
                _hoverEndHandler: noop,
                _toggleActiveState($element, value) {
                    this.option("isActive", value);
                    $element.toggleClass("dx-state-active", value);
                },
                _updatedHover() {
                    var hoveredElement = this._options.silent("hoveredElement");
                    this._hover(hoveredElement, hoveredElement);
                },
                _findHoverTarget($el) {
                    return $el && $el.closest(this._activeStateUnit || this._eventBindingTarget())
                },
                _hover($el, $previous) {
                    var {
                        hoverStateEnabled: hoverStateEnabled,
                        disabled: disabled,
                        isActive: isActive
                    } = this.option();
                    $previous = this._findHoverTarget($previous);
                    $previous && $previous.toggleClass("dx-state-hover", false);
                    if ($el && hoverStateEnabled && !disabled && !isActive) {
                        var newHoveredElement = this._findHoverTarget($el);
                        newHoveredElement && newHoveredElement.toggleClass("dx-state-hover", true);
                    }
                },
                _toggleDisabledState(value) {
                    this.$element().toggleClass("dx-state-disabled", Boolean(value));
                    this.setAria("disabled", value || void 0);
                },
                _toggleIndependentState() {
                    this.$element().toggleClass("dx-state-independent", this.option("ignoreParentReadOnly"));
                },
                _setWidgetOption(widgetName, args) {
                    if (!this[widgetName]) {
                        return
                    }
                    if (isPlainObject(args[0])) {
                        each(args[0], (option, value) => this._setWidgetOption(widgetName, [option, value]));
                        return
                    }
                    var optionName = args[0];
                    var value = args[1];
                    if (1 === args.length) {
                        value = this.option(optionName);
                    }
                    var widgetOptionMap = this["".concat(widgetName, "OptionMap")];
                    this[widgetName].option(widgetOptionMap ? widgetOptionMap(optionName) : optionName, value);
                },
                _optionChanged(args) {
                    var {
                        name: name,
                        value: value,
                        previousValue: previousValue
                    } = args;
                    switch (name) {
                        case "disabled":
                            this._toggleDisabledState(value);
                            this._updatedHover();
                            this._refreshFocusState();
                            break;
                        case "hint":
                            this._renderHint();
                            break;
                        case "ignoreParentReadOnly":
                            this._toggleIndependentState();
                            break;
                        case "activeStateEnabled":
                            this._attachFeedbackEvents();
                            break;
                        case "hoverStateEnabled":
                            this._attachHoverEvents();
                            this._updatedHover();
                            break;
                        case "tabIndex":
                        case "focusStateEnabled":
                            this._refreshFocusState();
                            break;
                        case "onFocusIn":
                        case "onFocusOut":
                        case "useResizeObserver":
                            break;
                        case "accessKey":
                            this._renderAccessKey();
                            break;
                        case "hoveredElement":
                            this._hover(value, previousValue);
                            break;
                        case "isActive":
                            this._updatedHover();
                            break;
                        case "visible":
                            this._toggleVisibility(value);
                            if (this._isVisibilityChangeSupported()) {
                                this._checkVisibilityChanged(value ? "shown" : "hiding");
                            }
                            break;
                        case "onKeyboardHandled":
                            this._attachKeyboardEvents();
                            break;
                        case "onContentReady":
                            this._initContentReadyAction();
                            break;
                        default:
                            this.callBase(args);
                    }
                },
                _isVisible() {
                    var {
                        visible: visible
                    } = this.option();
                    return this.callBase() && visible
                },
                beginUpdate() {
                    this._ready(false);
                    this.callBase();
                },
                endUpdate() {
                    this.callBase();
                    if (this._initialized) {
                        this._ready(true);
                    }
                },
                _ready(value) {
                    if (0 === arguments.length) {
                        return this._isReady
                    }
                    this._isReady = value;
                },
                setAria() {
                    if (!isPlainObject(arguments.length <= 0 ? void 0 : arguments[0])) {
                        setAttribute(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], (arguments.length <= 2 ? void 0 : arguments[2]) || this._getAriaTarget());
                    } else {
                        var target = (arguments.length <= 1 ? void 0 : arguments[1]) || this._getAriaTarget();
                        each(arguments.length <= 0 ? void 0 : arguments[0], (name, value) => setAttribute(name, value, target));
                    }
                },
                isReady() {
                    return this._ready()
                },
                repaint() {
                    this._refresh();
                },
                focus() {
                    focus.trigger(this._focusTarget());
                },
                registerKeyHandler(key, handler) {
                    var currentKeys = this._supportedKeys();
                    this._supportedKeys = () => extend(currentKeys, {
                        [key]: handler
                    });
                }
            }));
            Widget.getOptionsFromContainer = _ref5 => {
                var {
                    name: name,
                    fullName: fullName,
                    value: value
                } = _ref5;
                var options = {};
                if (name === fullName) {
                    options = value;
                } else {
                    var option = fullName.split(".").pop();
                    options[option] = value;
                }
                return options
            };

            /**
             * DevExtreme (esm/data/utils.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ready$3 = readyCallbacks$1.add;
            var XHR_ERROR_UNLOAD = "DEVEXTREME_XHR_ERROR_UNLOAD";
            var normalizeBinaryCriterion = function(crit) {
                return [crit[0], crit.length < 3 ? "=" : String(crit[1]).toLowerCase(), crit.length < 2 ? true : crit[crit.length - 1]]
            };
            var normalizeSortingInfo$1 = function(info) {
                if (!Array.isArray(info)) {
                    info = [info];
                }
                return map(info, (function(i) {
                    var result = {
                        selector: isFunction(i) || "string" === typeof i ? i : i.getter || i.field || i.selector,
                        desc: !!(i.desc || "d" === String(i.dir).charAt(0).toLowerCase())
                    };
                    if (i.compare) {
                        result.compare = i.compare;
                    }
                    return result
                }))
            };
            var errorMessageFromXhr = function() {
                var textStatusMessages = {
                    timeout: "Network connection timeout",
                    error: "Unspecified network error",
                    parsererror: "Unexpected server response"
                };
                var unloading;
                ready$3((function() {
                    var window = getWindow();
                    domAdapter.listen(window, "beforeunload", (function() {
                        unloading = true;
                    }));
                }));
                return function(xhr, textStatus) {
                    if (unloading) {
                        return XHR_ERROR_UNLOAD
                    }
                    if (xhr.status < 400) {
                        return function(textStatus) {
                            var result = textStatusMessages[textStatus];
                            if (!result) {
                                return textStatus
                            }
                            return result
                        }(textStatus)
                    }
                    return xhr.statusText
                }
            }();
            var aggregators = exports("g4", {
                count: {
                    seed: 0,
                    step: function(count) {
                        return 1 + count
                    }
                },
                sum: {
                    seed: 0,
                    step: function(sum, item) {
                        return sum + item
                    }
                },
                min: {
                    step: function(min, item) {
                        return item < min ? item : min
                    }
                },
                max: {
                    step: function(max, item) {
                        return item > max ? item : max
                    }
                },
                avg: {
                    seed: [0, 0],
                    step: function(pair, value) {
                        return [pair[0] + value, pair[1] + 1]
                    },
                    finalize: function(pair) {
                        return pair[1] ? pair[0] / pair[1] : NaN
                    }
                }
            });
            var processRequestResultLock = function() {
                var lockCount = 0;
                var lockDeferred;
                return {
                    obtain: function() {
                        if (0 === lockCount) {
                            lockDeferred = new Deferred;
                        }
                        lockCount++;
                    },
                    release: function() {
                        lockCount--;
                        if (lockCount < 1) {
                            lockDeferred.resolve();
                        }
                    },
                    promise: function() {
                        var deferred = 0 === lockCount ? (new Deferred).resolve() : lockDeferred;
                        return deferred.promise()
                    },
                    reset: function() {
                        lockCount = 0;
                        if (lockDeferred) {
                            lockDeferred.resolve();
                        }
                    }
                }
            }();
            function isConjunctiveOperator(condition) {
                return /^(and|&&|&)$/i.test(condition)
            }
            var keysEqual = exports("a6", function(keyExpr, key1, key2) {
                if (Array.isArray(keyExpr)) {
                    var names = map(key1, (function(v, k) {
                        return k
                    }));
                    var name;
                    for (var i = 0; i < names.length; i++) {
                        name = names[i];
                        if (!equalByValue(key1[name], key2[name], {
                                strict: false
                            })) {
                            return false
                        }
                    }
                    return true
                }
                return equalByValue(key1, key2, {
                    strict: false
                })
            });
            var isUnaryOperation = function(crit) {
                return "!" === crit[0] && Array.isArray(crit[1])
            };
            var isGroupOperator = function(value) {
                return "and" === value || "or" === value
            };
            var isUniformEqualsByOr = function(crit) {
                if (crit.length > 2 && Array.isArray(crit[0]) && "or" === crit[1] && "string" === typeof crit[0][0] && "=" === crit[0][1]) {
                    var [prop] = crit[0];
                    return !crit.find((el, i) => i % 2 !== 0 ? "or" !== el : !Array.isArray(el) || 3 !== el.length || el[0] !== prop || "=" !== el[1])
                }
                return false
            };
            var isGroupCriterion = function(crit) {
                var first = crit[0];
                var second = crit[1];
                if (Array.isArray(first)) {
                    return true
                }
                if (isFunction(first)) {
                    if (Array.isArray(second) || isFunction(second) || isGroupOperator(second)) {
                        return true
                    }
                }
                return false
            };
            var trivialPromise$1 = function() {
                var d = new Deferred;
                return d.resolve.apply(d, arguments).promise()
            };
            var rejectedPromise = function() {
                var d = new Deferred;
                return d.reject.apply(d, arguments).promise()
            };

            function throttle(func, timeout) {
                var timeoutId;
                return function() {
                    if (!timeoutId) {
                        timeoutId = setTimeout(() => {
                            timeoutId = void 0;
                            func.call(this);
                        }, isFunction(timeout) ? timeout() : timeout);
                    }
                    return timeoutId
                }
            }
            function throttleChanges(func, timeout) {
                var cache = [];
                var throttled = throttle((function() {
                    func.call(this, cache);
                    cache = [];
                }), timeout);
                return function(changes) {
                    if (Array.isArray(changes)) {
                        cache.push(...changes);
                    }
                    return throttled.call(this, cache)
                }
            }

            /**
             * DevExtreme (esm/data/errors.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var errors$1 = exports("eB", errorUtils(errors$2.ERROR_MESSAGES, {
                E4000: "[DevExpress.data]: {0}",
                E4001: "Unknown aggregating function is detected: '{0}'",
                E4002: "Unsupported OData protocol version is used",
                E4003: "Unknown filter operation is used: {0}",
                E4004: "The thenby() method is called before the sortby() method",
                E4005: "Store requires a key expression for this operation",
                E4006: "ArrayStore 'data' option must be an array",
                E4007: "Compound keys cannot be auto-generated",
                E4008: "Attempt to insert an item with a duplicated key",
                E4009: "Data item cannot be found",
                E4010: "CustomStore does not support creating queries",
                E4011: "Custom Store method is not implemented or is not a function: {0}",
                E4012: "Custom Store method returns an invalid value: {0}",
                E4013: "Local Store requires the 'name' configuration option is specified",
                E4014: "Unknown data type is specified for ODataStore: {0}",
                E4015: "Unknown entity name or alias is used: {0}",
                E4016: "The compileSetter(expr) method is called with 'self' passed as a parameter",
                E4017: "Keys cannot be modified",
                E4018: "The server has returned a non-numeric value in a response to an item count request",
                E4019: "Mixing of group operators inside a single group of filter expression is not allowed",
                E4020: "Unknown store type is detected: {0}",
                E4021: "The server response does not provide the totalCount value",
                E4022: "The server response does not provide the groupCount value",
                E4023: "Could not parse the following XML: {0}",
                E4024: "String function {0} cannot be used with the data field {1} of type {2}.",
                W4000: "Data returned from the server has an incorrect structure",
                W4001: 'The {0} field is listed in both "keyType" and "fieldTypes". The value of "fieldTypes" is used.',
                W4002: "Data loading has failed for some cells due to the following error: {0}"
            }));
            var errorHandler = null;
            var handleError = function(error) {
                var _errorHandler;
                null === (_errorHandler = errorHandler) || void 0 === _errorHandler ? void 0 : _errorHandler(error);
            };

            /**
             * DevExtreme (esm/data/array_utils.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */

            function hasKey(target, keyOrKeys) {
                var key;
                var keys = "string" === typeof keyOrKeys ? keyOrKeys.split() : keyOrKeys.slice();
                while (keys.length) {
                    key = keys.shift();
                    if (key in target) {
                        return true
                    }
                }
                return false
            }

            function findItems(keyInfo, items, key, groupCount) {
                var childItems;
                var result;
                if (groupCount) {
                    for (var i = 0; i < items.length; i++) {
                        childItems = items[i].items || items[i].collapsedItems || [];
                        result = findItems(keyInfo, childItems || [], key, groupCount - 1);
                        if (result) {
                            return result
                        }
                    }
                } else if (indexByKey(keyInfo, items, key) >= 0) {
                    return items
                }
            }

            function getItems(keyInfo, items, key, groupCount) {
                if (groupCount) {
                    return findItems(keyInfo, items, key, groupCount) || []
                }
                return items
            }

            function generateDataByKeyMap(keyInfo, array) {
                if (keyInfo.key() && (!array._dataByKeyMap || array._dataByKeyMapLength !== array.length)) {
                    var dataByKeyMap = {};
                    var arrayLength = array.length;
                    for (var i = 0; i < arrayLength; i++) {
                        dataByKeyMap[JSON.stringify(keyInfo.keyOf(array[i]))] = array[i];
                    }
                    array._dataByKeyMap = dataByKeyMap;
                    array._dataByKeyMapLength = arrayLength;
                }
            }

            function getCacheValue(array, key) {
                if (array._dataByKeyMap) {
                    return array._dataByKeyMap[JSON.stringify(key)]
                }
            }

            function getHasKeyCacheValue(array, key) {
                if (array._dataByKeyMap) {
                    return array._dataByKeyMap[JSON.stringify(key)]
                }
                return true
            }

            function setDataByKeyMapValue(array, key, data) {
                if (array._dataByKeyMap) {
                    array._dataByKeyMap[JSON.stringify(key)] = data;
                    array._dataByKeyMapLength += data ? 1 : -1;
                }
            }

            function cloneInstanceWithChangedPaths(instance, changes, clonedInstances) {
                clonedInstances = clonedInstances || new WeakMap;
                var result = instance ? Object.create(Object.getPrototypeOf(instance)) : {};
                if (instance) {
                    clonedInstances.set(instance, result);
                }
                var instanceWithoutPrototype = _extends({}, instance);
                deepExtendArraySafe(result, instanceWithoutPrototype, true, true);
                for (var name in instanceWithoutPrototype) {
                    var value = instanceWithoutPrototype[name];
                    var change = null === changes || void 0 === changes ? void 0 : changes[name];
                    if (isObject(value) && !isPlainObject(value) && isObject(change) && !clonedInstances.has(value)) {
                        result[name] = cloneInstanceWithChangedPaths(value, change, clonedInstances);
                    }
                }
                for (var _name in result) {
                    var prop = result[_name];
                    if (isObject(prop) && clonedInstances.has(prop)) {
                        result[_name] = clonedInstances.get(prop);
                    }
                }
                return result
            }

            function createObjectWithChanges(target, changes) {
                var result = cloneInstanceWithChangedPaths(target, changes);
                return deepExtendArraySafe(result, changes, true, true)
            }

            function applyBatch(_ref) {
                var {
                    keyInfo: keyInfo,
                    data: data,
                    changes: changes,
                    groupCount: groupCount,
                    useInsertIndex: useInsertIndex,
                    immutable: immutable,
                    disableCache: disableCache,
                    logError: logError,
                    skipCopying: skipCopying
                } = _ref;
                var resultItems = true === immutable ? [...data] : data;
                changes.forEach(item => {
                    var items = "insert" === item.type ? resultItems : getItems(keyInfo, resultItems, item.key, groupCount);
                    !disableCache && generateDataByKeyMap(keyInfo, items);
                    switch (item.type) {
                        case "update":
                            update(keyInfo, items, item.key, item.data, true, immutable, logError);
                            break;
                        case "insert":
                            insert(keyInfo, items, item.data, useInsertIndex && isDefined(item.index) ? item.index : -1, true, logError, skipCopying);
                            break;
                        case "remove":
                            remove$1(keyInfo, items, item.key, true, logError);
                    }
                });
                return resultItems
            }

            function getErrorResult(isBatch, logError, errorCode) {
                return !isBatch ? rejectedPromise(errors$1.Error(errorCode)) : logError && errors$1.log(errorCode)
            }

            function update(keyInfo, array, key, data, isBatch, immutable, logError) {
                var target;
                var keyExpr = keyInfo.key();
                if (keyExpr) {
                    if (hasKey(data, keyExpr) && !keysEqual(keyExpr, key, keyInfo.keyOf(data))) {
                        return getErrorResult(isBatch, logError, "E4017")
                    }
                    target = getCacheValue(array, key);
                    if (!target) {
                        var index = indexByKey(keyInfo, array, key);
                        if (index < 0) {
                            return getErrorResult(isBatch, logError, "E4009")
                        }
                        target = array[index];
                        if (true === immutable && isDefined(target)) {
                            var newTarget = createObjectWithChanges(target, data);
                            array[index] = newTarget;
                            return !isBatch && trivialPromise$1(newTarget, key)
                        }
                    }
                } else {
                    target = key;
                }
                deepExtendArraySafe(target, data, true);
                if (!isBatch) {
                    if (configMethod().useLegacyStoreResult) {
                        return trivialPromise$1(key, data)
                    } else {
                        return trivialPromise$1(target, key)
                    }
                }
            }

            function insert(keyInfo, array, data, index, isBatch, logError, skipCopying) {
                var keyValue;
                var keyExpr = keyInfo.key();
                var obj = isPlainObject(data) && !skipCopying ? extend({}, data) : data;
                if (keyExpr) {
                    keyValue = keyInfo.keyOf(obj);
                    if (void 0 === keyValue || "object" === typeof keyValue && isEmptyObject(keyValue)) {
                        if (Array.isArray(keyExpr)) {
                            throw errors$1.Error("E4007")
                        }
                        keyValue = obj[keyExpr] = String(new Guid);
                    } else if (void 0 !== array[indexByKey(keyInfo, array, keyValue)]) {
                        return getErrorResult(isBatch, logError, "E4008")
                    }
                } else {
                    keyValue = obj;
                }
                if (index >= 0) {
                    array.splice(index, 0, obj);
                } else {
                    array.push(obj);
                }
                setDataByKeyMapValue(array, keyValue, obj);
                if (!isBatch) {
                    return trivialPromise$1(configMethod().useLegacyStoreResult ? data : obj, keyValue)
                }
            }

            function remove$1(keyInfo, array, key, isBatch, logError) {
                var index = indexByKey(keyInfo, array, key);
                if (index > -1) {
                    array.splice(index, 1);
                    setDataByKeyMapValue(array, key, null);
                }
                if (!isBatch) {
                    return trivialPromise$1(key)
                } else if (index < 0) {
                    return getErrorResult(isBatch, logError, "E4009")
                }
            }

            function indexByKey(keyInfo, array, key) {
                var keyExpr = keyInfo.key();
                if (!getHasKeyCacheValue(array, key)) {
                    return -1
                }
                for (var i = 0, arrayLength = array.length; i < arrayLength; i++) {
                    if (keysEqual(keyExpr, keyInfo.keyOf(array[i]), key)) {
                        return i
                    }
                }
                return -1
            }

            /**
             * DevExtreme (esm/data/array_query.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var Iterator = classImpl.inherit({
                toArray: function() {
                    var result = [];
                    this.reset();
                    while (this.next()) {
                        result.push(this.current());
                    }
                    return result
                },
                countable: function() {
                    return false
                }
            });
            var ArrayIterator = Iterator.inherit({
                ctor: function(array) {
                    this.array = array;
                    this.index = -1;
                },
                next: function() {
                    if (this.index + 1 < this.array.length) {
                        this.index++;
                        return true
                    }
                    return false
                },
                current: function() {
                    return this.array[this.index]
                },
                reset: function() {
                    this.index = -1;
                },
                toArray: function() {
                    return this.array.slice(0)
                },
                countable: function() {
                    return true
                },
                count: function() {
                    return this.array.length
                }
            });
            var WrappedIterator = Iterator.inherit({
                ctor: function(iter) {
                    this.iter = iter;
                },
                next: function() {
                    return this.iter.next()
                },
                current: function() {
                    return this.iter.current()
                },
                reset: function() {
                    return this.iter.reset()
                }
            });
            var MapIterator = WrappedIterator.inherit({
                ctor: function(iter, mapper) {
                    this.callBase(iter);
                    this.index = -1;
                    this.mapper = mapper;
                },
                current: function() {
                    return this.mapper(this.callBase(), this.index)
                },
                next: function() {
                    var hasNext = this.callBase();
                    if (hasNext) {
                        this.index++;
                    }
                    return hasNext
                }
            });
            var defaultCompare = function(xValue, yValue, options) {
                if (isString(xValue) && isString(yValue) && (null !== options && void 0 !== options && options.locale || null !== options && void 0 !== options && options.collatorOptions)) {
                    return new Intl.Collator((null === options || void 0 === options ? void 0 : options.locale) || void 0, (null === options || void 0 === options ? void 0 : options.collatorOptions) || void 0).compare(xValue, yValue)
                }
                xValue = toComparable(xValue, false, options);
                yValue = toComparable(yValue, false, options);
                if (null === xValue && null !== yValue) {
                    return -1
                }
                if (null !== xValue && null === yValue) {
                    return 1
                }
                if (void 0 === xValue && void 0 !== yValue) {
                    return 1
                }
                if (void 0 !== xValue && void 0 === yValue) {
                    return -1
                }
                if (xValue < yValue) {
                    return -1
                }
                if (xValue > yValue) {
                    return 1
                }
                return 0
            };
            var SortIterator = Iterator.inherit({
                ctor: function(iter, getter, desc, compare) {
                    this.langParams = iter.langParams;
                    if (!(iter instanceof MapIterator)) {
                        iter = new MapIterator(iter, this._wrap);
                        iter.langParams = this.langParams;
                    }
                    this.iter = iter;
                    this.rules = [{
                        getter: getter,
                        desc: desc,
                        compare: compare,
                        langParams: this.langParams
                    }];
                },
                thenBy: function(getter, desc, compare) {
                    var result = new SortIterator(this.sortedIter || this.iter, getter, desc, compare);
                    if (!this.sortedIter) {
                        result.rules = this.rules.concat(result.rules);
                    }
                    return result
                },
                next: function() {
                    this._ensureSorted();
                    return this.sortedIter.next()
                },
                current: function() {
                    this._ensureSorted();
                    return this.sortedIter.current()
                },
                reset: function() {
                    delete this.sortedIter;
                },
                countable: function() {
                    return this.sortedIter || this.iter.countable()
                },
                count: function() {
                    if (this.sortedIter) {
                        return this.sortedIter.count()
                    }
                    return this.iter.count()
                },
                _ensureSorted: function() {
                    var that = this;
                    if (that.sortedIter) {
                        return
                    }
                    each(that.rules, (function() {
                        this.getter = compileGetter(this.getter);
                    }));
                    that.sortedIter = new MapIterator(new ArrayIterator(this.iter.toArray().sort((function(x, y) {
                        return that._compare(x, y)
                    }))), that._unwrap);
                },
                _wrap: function(record, index) {
                    return {
                        index: index,
                        value: record
                    }
                },
                _unwrap: function(wrappedItem) {
                    return wrappedItem.value
                },
                _getDefaultCompare: langParams => (xValue, yValue) => defaultCompare(xValue, yValue, langParams),
                _compare: function(x, y) {
                    var xIndex = x.index;
                    var yIndex = y.index;
                    x = x.value;
                    y = y.value;
                    if (x === y) {
                        return xIndex - yIndex
                    }
                    for (var i = 0, rulesCount = this.rules.length; i < rulesCount; i++) {
                        var rule = this.rules[i];
                        var xValue = rule.getter(x);
                        var yValue = rule.getter(y);
                        var compare = rule.compare || this._getDefaultCompare(rule.langParams);
                        var compareResult = compare(xValue, yValue);
                        if (compareResult) {
                            return rule.desc ? -compareResult : compareResult
                        }
                    }
                    return xIndex - yIndex
                }
            });
            var compileCriteria = function() {
                var langParams = {};
                var _toComparable = value => toComparable(value, false, langParams);
                var compileGroup = function(crit) {
                    if (isUniformEqualsByOr(crit)) {
                        return (crit => {
                            var getter = compileGetter(crit[0][0]);
                            var filterValues = crit.reduce((acc, item, i) => {
                                if (i % 2 === 0) {
                                    acc.push(_toComparable(item[2]));
                                }
                                return acc
                            }, []);
                            return obj => {
                                var value = _toComparable(getter(obj));
                                return filterValues.some(filterValue => useStrictComparison(filterValue) ? value === filterValue : value == filterValue)
                            }
                        })(crit)
                    }
                    var ops = [];
                    var isConjunctiveOperator$1 = false;
                    var isConjunctiveNextOperator = false;
                    each(crit, (function() {
                        if (Array.isArray(this) || isFunction(this)) {
                            if (ops.length > 1 && isConjunctiveOperator$1 !== isConjunctiveNextOperator) {
                                throw new errors$1.Error("E4019")
                            }
                            ops.push(compileCriteria(this, langParams));
                            isConjunctiveOperator$1 = isConjunctiveNextOperator;
                            isConjunctiveNextOperator = true;
                        } else {
                            isConjunctiveNextOperator = isConjunctiveOperator(this);
                        }
                    }));
                    return function(d) {
                        var result = isConjunctiveOperator$1;
                        for (var i = 0; i < ops.length; i++) {
                            if (ops[i](d) !== isConjunctiveOperator$1) {
                                result = !isConjunctiveOperator$1;
                                break
                            }
                        }
                        return result
                    }
                };
                var toString = function(value) {
                    var _langParams;
                    return isDefined(value) ? null !== (_langParams = langParams) && void 0 !== _langParams && _langParams.locale ? value.toLocaleString(langParams.locale) : value.toString() : ""
                };

                function compileEquals(getter, value, negate) {
                    return function(obj) {
                        obj = _toComparable(getter(obj));
                        var result = useStrictComparison(value) ? obj === value : obj == value;
                        if (negate) {
                            result = !result;
                        }
                        return result
                    }
                }

                function useStrictComparison(value) {
                    return "" === value || 0 === value || false === value
                }
                return function(crit, options) {
                    langParams = options || {};
                    if (isFunction(crit)) {
                        return crit
                    }
                    if (isGroupCriterion(crit)) {
                        return compileGroup(crit)
                    }
                    if (isUnaryOperation(crit)) {
                        return function(crit) {
                            var op = crit[0];
                            var criteria = compileCriteria(crit[1], langParams);
                            if ("!" === op) {
                                return function(obj) {
                                    return !criteria(obj)
                                }
                            }
                            throw errors$1.Error("E4003", op)
                        }(crit)
                    }
                    return function(crit) {
                        crit = normalizeBinaryCriterion(crit);
                        var getter = compileGetter(crit[0]);
                        var op = crit[1];
                        var value = crit[2];
                        value = _toComparable(value);
                        var compare = (obj, operatorFn) => {
                            obj = _toComparable(getter(obj));
                            return (null == value || null == obj) && value !== obj ? false : operatorFn(obj, value)
                        };
                        switch (op.toLowerCase()) {
                            case "=":
                                return compileEquals(getter, value);
                            case "<>":
                                return compileEquals(getter, value, true);
                            case ">":
                                return obj => compare(obj, (a, b) => a > b);
                            case "<":
                                return obj => compare(obj, (a, b) => a < b);
                            case ">=":
                                return obj => compare(obj, (a, b) => a >= b);
                            case "<=":
                                return obj => compare(obj, (a, b) => a <= b);
                            case "startswith":
                                return function(obj) {
                                    return 0 === _toComparable(toString(getter(obj))).indexOf(value)
                                };
                            case "endswith":
                                return function(obj) {
                                    var getterValue = _toComparable(toString(getter(obj)));
                                    var searchValue = toString(value);
                                    if (getterValue.length < searchValue.length) {
                                        return false
                                    }
                                    var index = getterValue.lastIndexOf(value);
                                    return -1 !== index && index === getterValue.length - value.length
                                };
                            case "contains":
                                return function(obj) {
                                    return _toComparable(toString(getter(obj))).indexOf(value) > -1
                                };
                            case "notcontains":
                                return function(obj) {
                                    return -1 === _toComparable(toString(getter(obj))).indexOf(value)
                                }
                        }
                        throw errors$1.Error("E4003", op)
                    }(crit)
                }
            }();
            var FilterIterator = WrappedIterator.inherit({
                ctor: function(iter, criteria) {
                    this.callBase(iter);
                    this.langParams = iter.langParams;
                    this.criteria = compileCriteria(criteria, this.langParams);
                },
                next: function() {
                    while (this.iter.next()) {
                        if (this.criteria(this.current())) {
                            return true
                        }
                    }
                    return false
                }
            });
            var GroupIterator = Iterator.inherit({
                ctor: function(iter, getter) {
                    this.iter = iter;
                    this.getter = getter;
                },
                next: function() {
                    this._ensureGrouped();
                    return this.groupedIter.next()
                },
                current: function() {
                    this._ensureGrouped();
                    return this.groupedIter.current()
                },
                reset: function() {
                    delete this.groupedIter;
                },
                countable: function() {
                    return !!this.groupedIter
                },
                count: function() {
                    return this.groupedIter.count()
                },
                _ensureGrouped: function() {
                    if (this.groupedIter) {
                        return
                    }
                    var hash = {};
                    var keys = [];
                    var iter = this.iter;
                    var getter = compileGetter(this.getter);
                    iter.reset();
                    while (iter.next()) {
                        var current = iter.current();
                        var key = getter(current);
                        if (key in hash) {
                            hash[key].push(current);
                        } else {
                            hash[key] = [current];
                            keys.push(key);
                        }
                    }
                    this.groupedIter = new ArrayIterator(map(keys, (function(key) {
                        return {
                            key: key,
                            items: hash[key]
                        }
                    })));
                }
            });
            var SelectIterator = WrappedIterator.inherit({
                ctor: function(iter, getter) {
                    this.callBase(iter);
                    this.getter = compileGetter(getter);
                },
                current: function() {
                    return this.getter(this.callBase())
                },
                countable: function() {
                    return this.iter.countable()
                },
                count: function() {
                    return this.iter.count()
                }
            });
            var SliceIterator = WrappedIterator.inherit({
                ctor: function(iter, skip, take) {
                    this.callBase(iter);
                    this.skip = Math.max(0, skip);
                    this.take = Math.max(0, take);
                    this.pos = 0;
                },
                next: function() {
                    if (this.pos >= this.skip + this.take) {
                        return false
                    }
                    while (this.pos < this.skip && this.iter.next()) {
                        this.pos++;
                    }
                    this.pos++;
                    return this.iter.next()
                },
                reset: function() {
                    this.callBase();
                    this.pos = 0;
                },
                countable: function() {
                    return this.iter.countable()
                },
                count: function() {
                    return Math.min(this.iter.count() - this.skip, this.take)
                }
            });
            var arrayQueryImpl = function arrayQueryImpl(iter, queryOptions) {
                queryOptions = queryOptions || {};
                if (!(iter instanceof Iterator)) {
                    iter = new ArrayIterator(iter);
                }
                if (queryOptions.langParams) {
                    iter.langParams = queryOptions.langParams;
                }
                var handleError$1 = function(error) {
                    var handler = queryOptions.errorHandler;
                    if (handler) {
                        handler(error);
                    }
                    handleError(error);
                };
                var aggregateCore = function(aggregator) {
                    var d = (new Deferred).fail(handleError$1);
                    var seed;
                    var step = aggregator.step;
                    var finalize = aggregator.finalize;
                    try {
                        iter.reset();
                        if ("seed" in aggregator) {
                            seed = aggregator.seed;
                        } else {
                            seed = iter.next() ? iter.current() : NaN;
                        }
                        var accumulator = seed;
                        while (iter.next()) {
                            accumulator = step(accumulator, iter.current());
                        }
                        d.resolve(finalize ? finalize(accumulator) : accumulator);
                    } catch (x) {
                        d.reject(x);
                    }
                    return d.promise()
                };
                var standardAggregate = function(name) {
                    return aggregateCore(aggregators[name])
                };
                var select = function(getter) {
                    if (!isFunction(getter) && !Array.isArray(getter)) {
                        getter = [].slice.call(arguments);
                    }
                    return chainQuery(new SelectIterator(iter, getter))
                };
                var selectProp = function(name) {
                    return select(compileGetter(name))
                };

                function chainQuery(iter) {
                    return arrayQueryImpl(iter, queryOptions)
                }
                return {
                    toArray: function() {
                        return iter.toArray()
                    },
                    enumerate: function() {
                        var d = (new Deferred).fail(handleError$1);
                        try {
                            d.resolve(iter.toArray());
                        } catch (x) {
                            d.reject(x);
                        }
                        return d.promise()
                    },
                    setLangParams(options) {
                        iter.langParams = options;
                    },
                    sortBy: function(getter, desc, compare) {
                        return chainQuery(new SortIterator(iter, getter, desc, compare))
                    },
                    thenBy: function(getter, desc, compare) {
                        if (iter instanceof SortIterator) {
                            return chainQuery(iter.thenBy(getter, desc, compare))
                        }
                        throw errors$1.Error("E4004")
                    },
                    filter: function(criteria) {
                        if (!Array.isArray(criteria)) {
                            criteria = [].slice.call(arguments);
                        }
                        return chainQuery(new FilterIterator(iter, criteria))
                    },
                    slice: function(skip, take) {
                        if (void 0 === take) {
                            take = Number.MAX_VALUE;
                        }
                        return chainQuery(new SliceIterator(iter, skip, take))
                    },
                    select: select,
                    groupBy: function(getter) {
                        return chainQuery(new GroupIterator(iter, getter))
                    },
                    aggregate: function(seed, step, finalize) {
                        if (arguments.length < 2) {
                            return aggregateCore({
                                step: arguments[0]
                            })
                        }
                        return aggregateCore({
                            seed: seed,
                            step: step,
                            finalize: finalize
                        })
                    },
                    count: function() {
                        if (iter.countable()) {
                            var d = (new Deferred).fail(handleError$1);
                            try {
                                d.resolve(iter.count());
                            } catch (x) {
                                d.reject(x);
                            }
                            return d.promise()
                        }
                        return standardAggregate("count")
                    },
                    sum: function(getter) {
                        if (getter) {
                            return selectProp(getter).sum()
                        }
                        return standardAggregate("sum")
                    },
                    min: function(getter) {
                        if (getter) {
                            return selectProp(getter).min()
                        }
                        return standardAggregate("min")
                    },
                    max: function(getter) {
                        if (getter) {
                            return selectProp(getter).max()
                        }
                        return standardAggregate("max")
                    },
                    avg: function(getter) {
                        if (getter) {
                            return selectProp(getter).avg()
                        }
                        return standardAggregate("avg")
                    }
                }
            };

            /**
             * DevExtreme (esm/data/store_helper.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */

            function multiLevelGroup(query, groupInfo) {
                query = query.groupBy(groupInfo[0].selector);
                if (groupInfo.length > 1) {
                    query = query.select((function(g) {
                        return extend({}, g, {
                            items: multiLevelGroup(arrayQueryImpl(g.items), groupInfo.slice(1)).toArray()
                        })
                    }));
                }
                return query
            }

            function arrangeSortingInfo(groupInfo, sortInfo) {
                var filteredGroup = [];
                each(groupInfo, (function(_, group) {
                    var collision = grep(sortInfo, (function(sort) {
                        return group.selector === sort.selector
                    }));
                    if (collision.length < 1) {
                        filteredGroup.push(group);
                    }
                }));
                return filteredGroup.concat(sortInfo)
            }

            function queryByOptions$1(query, options, isCountQuery) {
                var _options;
                options = options || {};
                var filter = options.filter;
                if (null !== (_options = options) && void 0 !== _options && _options.langParams) {
                    var _query$setLangParams, _query;
                    null === (_query$setLangParams = (_query = query).setLangParams) || void 0 === _query$setLangParams ? void 0 : _query$setLangParams.call(_query, options.langParams);
                }
                if (filter) {
                    query = query.filter(filter);
                }
                if (isCountQuery) {
                    return query
                }
                var sort = options.sort;
                var select = options.select;
                var group = options.group;
                var skip = options.skip;
                var take = options.take;
                if (group) {
                    group = normalizeSortingInfo$1(group);
                    group.keepInitialKeyOrder = !!options.group.keepInitialKeyOrder;
                }
                if (sort || group) {
                    sort = normalizeSortingInfo$1(sort || []);
                    if (group && !group.keepInitialKeyOrder) {
                        sort = arrangeSortingInfo(group, sort);
                    }
                    each(sort, (function(index) {
                        query = query[index ? "thenBy" : "sortBy"](this.selector, this.desc, this.compare);
                    }));
                }
                if (select) {
                    query = query.select(select);
                }
                if (group) {
                    query = multiLevelGroup(query, group);
                }
                if (take || skip) {
                    query = query.slice(skip || 0, take);
                }
                return query
            }
            var storeHelper = exports("bE", {
                multiLevelGroup: multiLevelGroup,
                arrangeSortingInfo: arrangeSortingInfo,
                queryByOptions: queryByOptions$1
            });

            /**
             * DevExtreme (esm/data/abstract_store.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var abstract = classImpl.abstract;
            var queryByOptions = storeHelper.queryByOptions;
            var storeImpl = {};
            var Store = exports("g5", classImpl.inherit({
                _langParams: {},
                ctor: function(options) {
                    var that = this;
                    options = options || {};
                    this._eventsStrategy = new EventsStrategy(this);
                    each(["onLoaded", "onLoading", "onInserted", "onInserting", "onUpdated", "onUpdating", "onPush", "onRemoved", "onRemoving", "onModified", "onModifying"], (function(_, optionName) {
                        if (optionName in options) {
                            that.on(optionName.slice(2).toLowerCase(), options[optionName]);
                        }
                    }));
                    this._key = options.key;
                    this._errorHandler = options.errorHandler;
                    this._useDefaultSearch = true;
                },
                _clearCache: noop,
                _customLoadOptions: function() {
                    return null
                },
                key: function() {
                    return this._key
                },
                keyOf: function(obj) {
                    if (!this._keyGetter) {
                        this._keyGetter = compileGetter(this.key());
                    }
                    return this._keyGetter(obj)
                },
                _requireKey: function() {
                    if (!this.key()) {
                        throw errors$1.Error("E4005")
                    }
                },
                load: function(options) {
                    var that = this;
                    options = options || {};
                    this._eventsStrategy.fireEvent("loading", [options]);
                    return this._withLock(this._loadImpl(options)).done((function(result) {
                        that._eventsStrategy.fireEvent("loaded", [result, options]);
                    }))
                },
                _loadImpl: function(options) {
                    if (!isEmptyObject(this._langParams)) {
                        options = options || {};
                        options._langParams = _extends({}, this._langParams, options._langParams);
                    }
                    return queryByOptions(this.createQuery(options), options).enumerate()
                },
                _withLock: function(task) {
                    var result = new Deferred;
                    task.done((function() {
                        var that = this;
                        var args = arguments;
                        processRequestResultLock.promise().done((function() {
                            result.resolveWith(that, args);
                        }));
                    })).fail((function() {
                        result.rejectWith(this, arguments);
                    }));
                    return result
                },
                createQuery: abstract,
                totalCount: function(options) {
                    return this._totalCountImpl(options)
                },
                _totalCountImpl: function(options) {
                    return queryByOptions(this.createQuery(options), options, true).count()
                },
                byKey: function(key, extraOptions) {
                    return this._addFailHandlers(this._withLock(this._byKeyImpl(key, extraOptions)))
                },
                _byKeyImpl: abstract,
                insert: function(values) {
                    var that = this;
                    that._eventsStrategy.fireEvent("modifying");
                    that._eventsStrategy.fireEvent("inserting", [values]);
                    return that._addFailHandlers(that._insertImpl(values).done((function(callbackValues, callbackKey) {
                        that._eventsStrategy.fireEvent("inserted", [callbackValues, callbackKey]);
                        that._eventsStrategy.fireEvent("modified");
                    })))
                },
                _insertImpl: abstract,
                update: function(key, values) {
                    var that = this;
                    that._eventsStrategy.fireEvent("modifying");
                    that._eventsStrategy.fireEvent("updating", [key, values]);
                    return that._addFailHandlers(that._updateImpl(key, values).done((function() {
                        that._eventsStrategy.fireEvent("updated", [key, values]);
                        that._eventsStrategy.fireEvent("modified");
                    })))
                },
                _updateImpl: abstract,
                push: function(changes) {
                    var beforePushArgs = {
                        changes: changes,
                        waitFor: []
                    };
                    this._eventsStrategy.fireEvent("beforePushAggregation", [beforePushArgs]);
                    when(...beforePushArgs.waitFor).done(() => {
                        this._pushImpl(changes);
                        this._eventsStrategy.fireEvent("beforePush", [{
                            changes: changes
                        }]);
                        this._eventsStrategy.fireEvent("push", [changes]);
                    });
                },
                _pushImpl: noop,
                remove: function(key) {
                    var that = this;
                    that._eventsStrategy.fireEvent("modifying");
                    that._eventsStrategy.fireEvent("removing", [key]);
                    return that._addFailHandlers(that._removeImpl(key).done((function(callbackKey) {
                        that._eventsStrategy.fireEvent("removed", [callbackKey]);
                        that._eventsStrategy.fireEvent("modified");
                    })))
                },
                _removeImpl: abstract,
                _addFailHandlers: function(deferred) {
                    return deferred.fail(this._errorHandler).fail(handleError)
                },
                on(eventName, eventHandler) {
                    this._eventsStrategy.on(eventName, eventHandler);
                    return this
                },
                off(eventName, eventHandler) {
                    this._eventsStrategy.off(eventName, eventHandler);
                    return this
                }
            }));
            Store.create = function(alias, options) {
                if (!(alias in storeImpl)) {
                    throw errors$1.Error("E4020", alias)
                }
                return new storeImpl[alias](options)
            };
            Store.registerClass = function(type, alias) {
                if (alias) {
                    storeImpl[alias] = type;
                }
                return type
            };
            Store.inherit = function(inheritor) {
                return function(members, alias) {
                    var type = inheritor.apply(this, [members]);
                    Store.registerClass(type, alias);
                    return type
                }
            }(Store.inherit);

            /**
             * DevExtreme (esm/data/custom_store.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var TOTAL_COUNT = "totalCount";
            var LOAD = "load";
            var BY_KEY = "byKey";
            var INSERT = "insert";
            var UPDATE = "update";
            var REMOVE = "remove";

            function isPromise(obj) {
                return obj && isFunction(obj.then)
            }

            function trivialPromise(value) {
                return (new Deferred).resolve(value).promise()
            }

            function ensureRequiredFuncOption(name, obj) {
                if (!isFunction(obj)) {
                    throw errors$1.Error("E4011", name)
                }
            }

            function throwInvalidUserFuncResult(name) {
                throw errors$1.Error("E4012", name)
            }

            function createUserFuncFailureHandler(pendingDeferred) {
                function errorMessageFromXhr$1(promiseArguments) {
                    var xhr = promiseArguments[0];
                    var textStatus = promiseArguments[1];
                    if (!xhr || !xhr.getResponseHeader) {
                        return null
                    }
                    return errorMessageFromXhr(xhr, textStatus)
                }
                return function(arg) {
                    var error;
                    if (arg instanceof Error) {
                        error = arg;
                    } else {
                        error = new Error(errorMessageFromXhr$1(arguments) || arg && String(arg) || "Unknown error");
                    }
                    if (error.message !== XHR_ERROR_UNLOAD) {
                        pendingDeferred.reject(error);
                    }
                }
            }

            function invokeUserLoad(store, options) {
                var userFunc = store._loadFunc;
                var userResult;
                ensureRequiredFuncOption(LOAD, userFunc);
                userResult = userFunc.apply(store, [options]);
                if (Array.isArray(userResult)) {
                    userResult = trivialPromise(userResult);
                } else if (null === userResult || void 0 === userResult) {
                    userResult = trivialPromise([]);
                } else if (!isPromise(userResult)) {
                    throwInvalidUserFuncResult(LOAD);
                }
                return fromPromise(userResult)
            }

            function invokeUserTotalCountFunc(store, options) {
                var userFunc = store._totalCountFunc;
                var userResult;
                if (!isFunction(userFunc)) {
                    throw errors$1.Error("E4021")
                }
                userResult = userFunc.apply(store, [options]);
                if (!isPromise(userResult)) {
                    userResult = Number(userResult);
                    if (!isFinite(userResult)) {
                        throwInvalidUserFuncResult(TOTAL_COUNT);
                    }
                    userResult = trivialPromise(userResult);
                }
                return fromPromise(userResult)
            }

            function invokeUserByKeyFunc(store, key, extraOptions) {
                var userFunc = store._byKeyFunc;
                var userResult;
                ensureRequiredFuncOption(BY_KEY, userFunc);
                userResult = userFunc.apply(store, [key, extraOptions]);
                if (!isPromise(userResult)) {
                    userResult = trivialPromise(userResult);
                }
                return fromPromise(userResult)
            }

            function runRawLoad(pendingDeferred, store, userFuncOptions, continuation) {
                if (store.__rawData) {
                    continuation(store.__rawData);
                } else {
                    var loadPromise = store.__rawDataPromise || invokeUserLoad(store, userFuncOptions);
                    if (store._cacheRawData) {
                        store.__rawDataPromise = loadPromise;
                    }
                    loadPromise.always((function() {
                        delete store.__rawDataPromise;
                    })).done((function(rawData) {
                        if (store._cacheRawData) {
                            store.__rawData = rawData;
                        }
                        continuation(rawData);
                    })).fail(createUserFuncFailureHandler(pendingDeferred));
                }
            }

            function runRawLoadWithQuery(pendingDeferred, store, options, countOnly) {
                options = options || {};
                var userFuncOptions = {};
                if ("userData" in options) {
                    userFuncOptions.userData = options.userData;
                }
                runRawLoad(pendingDeferred, store, userFuncOptions, (function(rawData) {
                    var rawDataQuery = arrayQueryImpl(rawData, {
                        errorHandler: store._errorHandler
                    });
                    var itemsQuery;
                    var totalCountQuery;
                    var waitList = [];
                    var items;
                    var totalCount;
                    if (!countOnly) {
                        itemsQuery = storeHelper.queryByOptions(rawDataQuery, options);
                        if (itemsQuery === rawDataQuery) {
                            items = rawData.slice(0);
                        } else {
                            waitList.push(itemsQuery.enumerate().done((function(asyncResult) {
                                items = asyncResult;
                            })));
                        }
                    }
                    if (options.requireTotalCount || countOnly) {
                        totalCountQuery = storeHelper.queryByOptions(rawDataQuery, options, true);
                        if (totalCountQuery === rawDataQuery) {
                            totalCount = rawData.length;
                        } else {
                            waitList.push(totalCountQuery.count().done((function(asyncResult) {
                                totalCount = asyncResult;
                            })));
                        }
                    }
                    when.apply($, waitList).done((function() {
                        if (countOnly) {
                            pendingDeferred.resolve(totalCount);
                        } else if (options.requireTotalCount) {
                            pendingDeferred.resolve(items, {
                                totalCount: totalCount
                            });
                        } else {
                            pendingDeferred.resolve(items);
                        }
                    })).fail((function(x) {
                        pendingDeferred.reject(x);
                    }));
                }));
            }

            function runRawLoadWithKey(pendingDeferred, store, key) {
                runRawLoad(pendingDeferred, store, {}, (function(rawData) {
                    var keyExpr = store.key();
                    var item;
                    for (var i = 0, len = rawData.length; i < len; i++) {
                        item = rawData[i];
                        if (keysEqual(keyExpr, store.keyOf(rawData[i]), key)) {
                            pendingDeferred.resolve(item);
                            return
                        }
                    }
                    pendingDeferred.reject(errors$1.Error("E4009"));
                }));
            }
            var CustomStore = Store.inherit({
                ctor: function(options) {
                    options = options || {};
                    this.callBase(options);
                    this._useDefaultSearch = !!options.useDefaultSearch || "raw" === options.loadMode;
                    this._loadMode = options.loadMode;
                    this._cacheRawData = false !== options.cacheRawData;
                    this._loadFunc = options[LOAD];
                    this._totalCountFunc = options[TOTAL_COUNT];
                    this._byKeyFunc = options[BY_KEY];
                    this._insertFunc = options[INSERT];
                    this._updateFunc = options[UPDATE];
                    this._removeFunc = options[REMOVE];
                },
                _clearCache() {
                    delete this.__rawData;
                },
                createQuery: function() {
                    throw errors$1.Error("E4010")
                },
                clearRawDataCache: function() {
                    this._clearCache();
                },
                _totalCountImpl: function(options) {
                    var d = new Deferred;
                    if ("raw" === this._loadMode && !this._totalCountFunc) {
                        runRawLoadWithQuery(d, this, options, true);
                    } else {
                        invokeUserTotalCountFunc(this, options).done((function(count) {
                            d.resolve(Number(count));
                        })).fail(createUserFuncFailureHandler(d));
                        d = this._addFailHandlers(d);
                    }
                    return d.promise()
                },
                _pushImpl: function(changes) {
                    if (this.__rawData) {
                        applyBatch({
                            keyInfo: this,
                            data: this.__rawData,
                            changes: changes
                        });
                    }
                },
                _loadImpl: function(options) {
                    var d = new Deferred;
                    if ("raw" === this._loadMode) {
                        runRawLoadWithQuery(d, this, options, false);
                    } else {
                        invokeUserLoad(this, options).done((function(data, extra) {
                            d.resolve(data, extra);
                        })).fail(createUserFuncFailureHandler(d));
                        d = this._addFailHandlers(d);
                    }
                    return d.promise()
                },
                _byKeyImpl: function(key, extraOptions) {
                    var d = new Deferred;
                    if (this._byKeyViaLoad()) {
                        this._requireKey();
                        runRawLoadWithKey(d, this, key);
                    } else {
                        invokeUserByKeyFunc(this, key, extraOptions).done((function(obj) {
                            d.resolve(obj);
                        })).fail(createUserFuncFailureHandler(d));
                    }
                    return d.promise()
                },
                _byKeyViaLoad: function() {
                    return "raw" === this._loadMode && !this._byKeyFunc
                },
                _insertImpl: function(values) {
                    var that = this;
                    var userFunc = that._insertFunc;
                    var userResult;
                    var d = new Deferred;
                    ensureRequiredFuncOption(INSERT, userFunc);
                    userResult = userFunc.apply(that, [values]);
                    if (!isPromise(userResult)) {
                        userResult = trivialPromise(userResult);
                    }
                    fromPromise(userResult).done((function(serverResponse) {
                        if (configMethod().useLegacyStoreResult) {
                            d.resolve(values, serverResponse);
                        } else {
                            d.resolve(serverResponse || values, that.keyOf(serverResponse));
                        }
                    })).fail(createUserFuncFailureHandler(d));
                    return d.promise()
                },
                _updateImpl: function(key, values) {
                    var userFunc = this._updateFunc;
                    var userResult;
                    var d = new Deferred;
                    ensureRequiredFuncOption(UPDATE, userFunc);
                    userResult = userFunc.apply(this, [key, values]);
                    if (!isPromise(userResult)) {
                        userResult = trivialPromise(userResult);
                    }
                    fromPromise(userResult).done((function(serverResponse) {
                        if (configMethod().useLegacyStoreResult) {
                            d.resolve(key, values);
                        } else {
                            d.resolve(serverResponse || values, key);
                        }
                    })).fail(createUserFuncFailureHandler(d));
                    return d.promise()
                },
                _removeImpl: function(key) {
                    var userFunc = this._removeFunc;
                    var userResult;
                    var d = new Deferred;
                    ensureRequiredFuncOption(REMOVE, userFunc);
                    userResult = userFunc.apply(this, [key]);
                    if (!isPromise(userResult)) {
                        userResult = trivialPromise();
                    }
                    fromPromise(userResult).done((function() {
                        d.resolve(key);
                    })).fail(createUserFuncFailureHandler(d));
                    return d.promise()
                }
            });
            var CustomStore$1 = exports("f0", CustomStore);

            /**
             * DevExtreme (esm/core/utils/queue.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */

            function createQueue(discardPendingTasks) {
                var _tasks = [];
                var _busy = false;

                function exec() {
                    while (_tasks.length) {
                        _busy = true;
                        var task = _tasks.shift();
                        var result = task();
                        if (void 0 === result) {
                            continue
                        }
                        if (result.then) {
                            when(result).always(exec);
                            return
                        }
                        throw errors$2.Error("E0015")
                    }
                    _busy = false;
                }
                return {
                    add: function(task, removeTaskCallback) {
                        if (!discardPendingTasks) {
                            _tasks.push(task);
                        } else {
                            if (_tasks[0] && removeTaskCallback) {
                                removeTaskCallback(_tasks[0]);
                            }
                            _tasks = [task];
                        }
                        if (!_busy) {
                            exec();
                        }
                    },
                    busy: function() {
                        return _busy
                    }
                }
            }

            function _objectWithoutPropertiesLoose(source, excluded) {
              if (source == null) return {};
              var target = {};
              var sourceKeys = Object.keys(source);
              var key, i;
              for (i = 0; i < sourceKeys.length; i++) {
                key = sourceKeys[i];
                if (excluded.indexOf(key) >= 0) continue;
                target[key] = source[key];
              }
              return target;
            }

            /**
             * DevExtreme (esm/data/query_adapters.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var queryAdapters = {};

            /**
             * DevExtreme (esm/data/remote_query.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var remoteQueryImpl = function remoteQueryImpl(url, queryOptions, tasks) {
                tasks = tasks || [];
                queryOptions = queryOptions || {};
                var createTask = function(name, args) {
                    return {
                        name: name,
                        args: args
                    }
                };
                var exec = function(executorTask) {
                    var d = new Deferred;
                    var _adapterFactory;
                    var _adapter;
                    var _taskQueue;
                    var _currentTask;
                    var _mergedSortArgs;
                    var rejectWithNotify = function(error) {
                        var handler = queryOptions.errorHandler;
                        if (handler) {
                            handler(error);
                        }
                        handleError(error);
                        d.reject(error);
                    };

                    function mergeSortTask(task) {
                        switch (task.name) {
                            case "sortBy":
                                _mergedSortArgs = [task.args];
                                return true;
                            case "thenBy":
                                if (!_mergedSortArgs) {
                                    throw errors$1.Error("E4004")
                                }
                                _mergedSortArgs.push(task.args);
                                return true
                        }
                        return false
                    }
                    try {
                        _adapterFactory = queryOptions.adapter;
                        if (!isFunction(_adapterFactory)) {
                            _adapterFactory = queryAdapters[_adapterFactory];
                        }
                        _adapter = _adapterFactory(queryOptions);
                        _taskQueue = [].concat(tasks).concat(executorTask);
                        var optimize = _adapter.optimize;
                        if (optimize) {
                            optimize(_taskQueue);
                        }
                        while (_taskQueue.length) {
                            _currentTask = _taskQueue[0];
                            if (!mergeSortTask(_currentTask)) {
                                if (_mergedSortArgs) {
                                    _taskQueue.unshift(createTask("multiSort", [_mergedSortArgs]));
                                    _mergedSortArgs = null;
                                    continue
                                }
                                if ("enumerate" !== String(_currentTask.name)) {
                                    if (!_adapter[_currentTask.name] || false === _adapter[_currentTask.name].apply(_adapter, _currentTask.args)) {
                                        break
                                    }
                                }
                            }
                            _taskQueue.shift();
                        }! function() {
                            var head = _taskQueue[0];
                            var unmergedTasks = [];
                            if (head && "multiSort" === head.name) {
                                _taskQueue.shift();
                                each(head.args[0], (function() {
                                    unmergedTasks.push(createTask(unmergedTasks.length ? "thenBy" : "sortBy", this));
                                }));
                            }
                            _taskQueue = unmergedTasks.concat(_taskQueue);
                        }();
                        _adapter.exec(url).done((function(result, extra) {
                            if (!_taskQueue.length) {
                                d.resolve(result, extra);
                            } else {
                                var clientChain = arrayQueryImpl(result, {
                                    errorHandler: queryOptions.errorHandler
                                });
                                each(_taskQueue, (function() {
                                    clientChain = clientChain[this.name].apply(clientChain, this.args);
                                }));
                                clientChain.done(d.resolve).fail(d.reject);
                            }
                        })).fail(rejectWithNotify);
                    } catch (x) {
                        rejectWithNotify(x);
                    }
                    return d.promise()
                };
                var query = {};
                each(["sortBy", "thenBy", "filter", "slice", "select", "groupBy"], (function() {
                    var name = String(this);
                    query[name] = function() {
                        return remoteQueryImpl(url, queryOptions, tasks.concat(createTask(name, arguments)))
                    };
                }));
                each(["count", "min", "max", "sum", "avg", "aggregate", "enumerate"], (function() {
                    var name = String(this);
                    query[name] = function() {
                        return exec.call(this, createTask(name, arguments))
                    };
                }));
                return query
            };
            var remoteQueryImpl$1 = remoteQueryImpl;

            /**
             * DevExtreme (esm/data/query_implementation.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var queryImpl = {
                array: arrayQueryImpl,
                remote: remoteQueryImpl$1
            };

            /**
             * DevExtreme (esm/data/query.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var query = exports("Y", function() {
                var impl = Array.isArray(arguments[0]) ? "array" : "remote";
                return queryImpl[impl].apply(this, arguments)
            });

            /**
             * DevExtreme (esm/data/array_store.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ArrayStore = exports("bO", Store.inherit({
                ctor: function(options) {
                    if (Array.isArray(options)) {
                        options = {
                            data: options
                        };
                    } else {
                        options = options || {};
                    }
                    this.callBase(options);
                    var initialArray = options.data;
                    if (initialArray && !Array.isArray(initialArray)) {
                        throw errors$1.Error("E4006")
                    }
                    this._array = initialArray || [];
                },
                createQuery: function() {
                    return query(this._array, {
                        errorHandler: this._errorHandler
                    })
                },
                _byKeyImpl: function(key) {
                    var index = indexByKey(this, this._array, key);
                    if (-1 === index) {
                        return rejectedPromise(errors$1.Error("E4009"))
                    }
                    return trivialPromise$1(this._array[index])
                },
                _insertImpl: function(values) {
                    return insert(this, this._array, values)
                },
                _pushImpl: function(changes) {
                    applyBatch({
                        keyInfo: this,
                        data: this._array,
                        changes: changes
                    });
                },
                _updateImpl: function(key, values) {
                    return update(this, this._array, key, values)
                },
                _removeImpl: function(key) {
                    return remove$1(this, this._array, key)
                },
                clear: function() {
                    this._eventsStrategy.fireEvent("modifying");
                    this._array = [];
                    this._eventsStrategy.fireEvent("modified");
                }
            }, "array"));

            /**
             * DevExtreme (esm/data/data_source/utils.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var _excluded = ["items"];
            var CANCELED_TOKEN = "canceled";
            var isPending = deferred => "pending" === deferred.state();
            var normalizeStoreLoadOptionAccessorArguments = originalArguments => {
                switch (originalArguments.length) {
                    case 0:
                        return;
                    case 1:
                        return originalArguments[0]
                }
                return [].slice.call(originalArguments)
            };
            var mapGroup = (group, level, mapper) => map(group, item => {
                var restItem = _objectWithoutPropertiesLoose(item, _excluded);
                return _extends({}, restItem, {
                    items: mapRecursive(item.items, level - 1, mapper)
                })
            });
            var mapRecursive = (items, level, mapper) => {
                if (!Array.isArray(items)) {
                    return items
                }
                return level ? mapGroup(items, level, mapper) : map(items, mapper)
            };
            var mapDataRespectingGrouping = (items, mapper, groupInfo) => {
                var level = groupInfo ? normalizeSortingInfo$1(groupInfo).length : 0;
                return mapRecursive(items, level, mapper)
            };
            var normalizeLoadResult = exports("a4", (data, extra) => {
                var _data;
                if (null !== (_data = data) && void 0 !== _data && _data.data) {
                    extra = data;
                    data = data.data;
                }
                if (!Array.isArray(data)) {
                    data = [data];
                }
                return {
                    data: data,
                    extra: extra
                }
            });
            var createCustomStoreFromLoadFunc = options => {
                var storeConfig = {};
                each(["useDefaultSearch", "key", "load", "loadMode", "cacheRawData", "byKey", "lookup", "totalCount", "insert", "update", "remove"], (function() {
                    storeConfig[this] = options[this];
                    delete options[this];
                }));
                return new CustomStore$1(storeConfig)
            };
            var createStoreFromConfig = storeConfig => {
                var alias = storeConfig.type;
                delete storeConfig.type;
                return Store.create(alias, storeConfig)
            };
            var createCustomStoreFromUrl = (url, normalizationOptions) => new CustomStore$1({
                load: () => ajax.sendRequest({
                    url: url,
                    dataType: "json"
                }),
                loadMode: null === normalizationOptions || void 0 === normalizationOptions ? void 0 : normalizationOptions.fromUrlLoadMode
            });
            var normalizeDataSourceOptions = exports("u", (options, normalizationOptions) => {
                var store;
                if ("string" === typeof options) {
                    options = {
                        paginate: false,
                        store: createCustomStoreFromUrl(options, normalizationOptions)
                    };
                }
                if (void 0 === options) {
                    options = [];
                }
                if (Array.isArray(options) || options instanceof Store) {
                    options = {
                        store: options
                    };
                } else {
                    options = extend({}, options);
                }
                if (void 0 === options.store) {
                    options.store = [];
                }
                store = options.store;
                if ("load" in options) {
                    store = createCustomStoreFromLoadFunc(options);
                } else if (Array.isArray(store)) {
                    store = new ArrayStore(store);
                } else if (isPlainObject(store)) {
                    store = createStoreFromConfig(extend({}, store));
                }
                options.store = store;
                return options
            });

            /**
             * DevExtreme (esm/data/data_source/operation_manager.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            class OperationManager {
                constructor() {
                    this._counter = -1;
                    this._deferreds = {};
                }
                add(deferred) {
                    this._counter++;
                    this._deferreds[this._counter] = deferred;
                    return this._counter
                }
                remove(operationId) {
                    return delete this._deferreds[operationId]
                }
                cancel(operationId) {
                    if (operationId in this._deferreds) {
                        this._deferreds[operationId].reject(CANCELED_TOKEN);
                        return true
                    }
                    return false
                }
                cancelAll() {
                    while (this._counter > -1) {
                        this.cancel(this._counter);
                        this._counter--;
                    }
                }
            }

            /**
             * DevExtreme (esm/data/data_source/data_source.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DataSource = exports("t", classImpl.inherit({
                ctor(options) {
                    var _options$reshapeOnPus;
                    options = normalizeDataSourceOptions(options);
                    this._eventsStrategy = new EventsStrategy(this, {
                        syncStrategy: true
                    });
                    this._store = options.store;
                    this._changedTime = 0;
                    var needThrottling = 0 !== options.pushAggregationTimeout;
                    if (needThrottling) {
                        var throttlingTimeout = void 0 === options.pushAggregationTimeout ? () => 5 * this._changedTime : options.pushAggregationTimeout;
                        var pushDeferred;
                        var lastPushWaiters;
                        var throttlingPushHandler = throttleChanges(changes => {
                            pushDeferred.resolve();
                            var storePushPending = when(...lastPushWaiters);
                            storePushPending.done(() => this._onPush(changes));
                            lastPushWaiters = void 0;
                            pushDeferred = void 0;
                        }, throttlingTimeout);
                        this._onPushHandler = args => {
                            this._aggregationTimeoutId = throttlingPushHandler(args.changes);
                            if (!pushDeferred) {
                                pushDeferred = new Deferred;
                            }
                            lastPushWaiters = args.waitFor;
                            args.waitFor.push(pushDeferred.promise());
                        };
                        this._store.on("beforePushAggregation", this._onPushHandler);
                    } else {
                        this._onPushHandler = changes => this._onPush(changes);
                        this._store.on("push", this._onPushHandler);
                    }
                    this._storeLoadOptions = this._extractLoadOptions(options);
                    this._mapFunc = options.map;
                    this._postProcessFunc = options.postProcess;
                    this._pageIndex = void 0 !== options.pageIndex ? options.pageIndex : 0;
                    this._pageSize = void 0 !== options.pageSize ? options.pageSize : 20;
                    this._loadingCount = 0;
                    this._loadQueue = this._createLoadQueue();
                    this._searchValue = "searchValue" in options ? options.searchValue : null;
                    this._searchOperation = options.searchOperation || "contains";
                    this._searchExpr = options.searchExpr;
                    this._paginate = options.paginate;
                    this._reshapeOnPush = null !== (_options$reshapeOnPus = options.reshapeOnPush) && void 0 !== _options$reshapeOnPus ? _options$reshapeOnPus : false;
                    each(["onChanged", "onLoadError", "onLoadingChanged", "onCustomizeLoadResult", "onCustomizeStoreLoadOptions"], (_, optionName) => {
                        if (optionName in options) {
                            this.on(optionName.substr(2, 1).toLowerCase() + optionName.substr(3), options[optionName]);
                        }
                    });
                    this._operationManager = new OperationManager;
                    this._init();
                },
                _init() {
                    this._items = [];
                    this._userData = {};
                    this._totalCount = -1;
                    this._isLoaded = false;
                    if (!isDefined(this._paginate)) {
                        this._paginate = !this.group();
                    }
                    this._isLastPage = !this._paginate;
                },
                dispose() {
                    var _this$_delayedLoadTas;
                    this._store.off("beforePushAggregation", this._onPushHandler);
                    this._store.off("push", this._onPushHandler);
                    this._eventsStrategy.dispose();
                    clearTimeout(this._aggregationTimeoutId);
                    null === (_this$_delayedLoadTas = this._delayedLoadTask) || void 0 === _this$_delayedLoadTas ? void 0 : _this$_delayedLoadTas.abort();
                    this._operationManager.cancelAll();
                    delete this._store;
                    delete this._items;
                    delete this._delayedLoadTask;
                    this._disposed = true;
                },
                _extractLoadOptions(options) {
                    var result = {};
                    var names = ["sort", "filter", "langParams", "select", "group", "requireTotalCount"];
                    var customNames = this._store._customLoadOptions();
                    if (customNames) {
                        names = names.concat(customNames);
                    }
                    each(names, (function() {
                        result[this] = options[this];
                    }));
                    return result
                },
                loadOptions() {
                    return this._storeLoadOptions
                },
                items() {
                    return this._items
                },
                pageIndex(newIndex) {
                    if (!isNumeric(newIndex)) {
                        return this._pageIndex
                    }
                    this._pageIndex = newIndex;
                    this._isLastPage = !this._paginate;
                },
                paginate(value) {
                    if (!isBoolean(value)) {
                        return this._paginate
                    }
                    if (this._paginate !== value) {
                        this._paginate = value;
                        this.pageIndex(0);
                    }
                },
                pageSize(value) {
                    if (!isNumeric(value)) {
                        return this._pageSize
                    }
                    this._pageSize = value;
                },
                isLastPage() {
                    return this._isLastPage
                },
                generateStoreLoadOptionAccessor(optionName) {
                    return args => {
                        var normalizedArgs = normalizeStoreLoadOptionAccessorArguments(args);
                        if (void 0 === normalizedArgs) {
                            return this._storeLoadOptions[optionName]
                        }
                        this._storeLoadOptions[optionName] = normalizedArgs;
                    }
                },
                sort() {
                    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }
                    return this.generateStoreLoadOptionAccessor("sort")(args)
                },
                filter() {
                    var newFilter = normalizeStoreLoadOptionAccessorArguments(arguments);
                    if (void 0 === newFilter) {
                        return this._storeLoadOptions.filter
                    }
                    this._storeLoadOptions.filter = newFilter;
                    this.pageIndex(0);
                },
                group() {
                    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                        args[_key2] = arguments[_key2];
                    }
                    return this.generateStoreLoadOptionAccessor("group")(args)
                },
                select() {
                    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                        args[_key3] = arguments[_key3];
                    }
                    return this.generateStoreLoadOptionAccessor("select")(args)
                },
                requireTotalCount(value) {
                    if (!isBoolean(value)) {
                        return this._storeLoadOptions.requireTotalCount
                    }
                    this._storeLoadOptions.requireTotalCount = value;
                },
                searchValue(value) {
                    if (arguments.length < 1) {
                        return this._searchValue
                    }
                    this._searchValue = value;
                    this.pageIndex(0);
                },
                searchOperation(op) {
                    if (!isString(op)) {
                        return this._searchOperation
                    }
                    this._searchOperation = op;
                    this.pageIndex(0);
                },
                searchExpr(expr) {
                    var argc = arguments.length;
                    if (0 === argc) {
                        return this._searchExpr
                    }
                    if (argc > 1) {
                        expr = [].slice.call(arguments);
                    }
                    this._searchExpr = expr;
                    this.pageIndex(0);
                },
                store() {
                    return this._store
                },
                key() {
                    var _this$_store;
                    return null === (_this$_store = this._store) || void 0 === _this$_store ? void 0 : _this$_store.key()
                },
                totalCount() {
                    return this._totalCount
                },
                isLoaded() {
                    return this._isLoaded
                },
                isLoading() {
                    return this._loadingCount > 0
                },
                beginLoading() {
                    this._changeLoadingCount(1);
                },
                endLoading() {
                    this._changeLoadingCount(-1);
                },
                _createLoadQueue: () => createQueue(),
                _changeLoadingCount(increment) {
                    var oldLoading = this.isLoading();
                    this._loadingCount += increment;
                    var newLoading = this.isLoading();
                    if (oldLoading ^ newLoading) {
                        this._eventsStrategy.fireEvent("loadingChanged", [newLoading]);
                    }
                },
                _scheduleLoadCallbacks(deferred) {
                    this.beginLoading();
                    deferred.always(() => {
                        this.endLoading();
                    });
                },
                _scheduleFailCallbacks(deferred) {
                    var _this = this;
                    deferred.fail((function() {
                        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                            args[_key4] = arguments[_key4];
                        }
                        if (args[0] === CANCELED_TOKEN) {
                            return
                        }
                        _this._eventsStrategy.fireEvent("loadError", args);
                    }));
                },
                _fireChanged(args) {
                    var date = new Date;
                    this._eventsStrategy.fireEvent("changed", args);
                    this._changedTime = new Date - date;
                },
                _scheduleChangedCallbacks(deferred) {
                    deferred.done(() => this._fireChanged());
                },
                loadSingle(propName, propValue) {
                    var d = new Deferred;
                    var key = this.key();
                    var store = this._store;
                    var options = this._createStoreLoadOptions();
                    this._scheduleFailCallbacks(d);
                    if (arguments.length < 2) {
                        propValue = propName;
                        propName = key;
                    }
                    delete options.skip;
                    delete options.group;
                    delete options.refresh;
                    delete options.pageIndex;
                    delete options.searchString;
                    (() => {
                        if (propName === key || store instanceof CustomStore$1 && !store._byKeyViaLoad()) {
                            return store.byKey(propValue, options)
                        }
                        options.take = 1;
                        options.filter = options.filter ? [options.filter, [propName, propValue]] : [propName, propValue];
                        return store.load(options)
                    })().fail(d.reject).done(data => {
                        var isEmptyArray = Array.isArray(data) && !data.length;
                        if (!isDefined(data) || isEmptyArray) {
                            d.reject(new errors$1.Error("E4009"));
                        } else {
                            if (!Array.isArray(data)) {
                                data = [data];
                            }
                            d.resolve(this._applyMapFunction(data)[0]);
                        }
                    });
                    return d.promise()
                },
                load() {
                    var d = new Deferred;
                    var loadTask = () => {
                        if (this._disposed) {
                            return
                        }
                        if (!isPending(d)) {
                            return
                        }
                        return this._loadFromStore(loadOperation, d)
                    };
                    this._scheduleLoadCallbacks(d);
                    this._scheduleFailCallbacks(d);
                    this._scheduleChangedCallbacks(d);
                    var loadOperation = this._createLoadOperation(d);
                    this._eventsStrategy.fireEvent("customizeStoreLoadOptions", [loadOperation]);
                    this._loadQueue.add(() => {
                        if ("number" === typeof loadOperation.delay) {
                            this._delayedLoadTask = executeAsync(loadTask, loadOperation.delay);
                        } else {
                            loadTask();
                        }
                        return d.promise()
                    });
                    return d.promise({
                        operationId: loadOperation.operationId
                    })
                },
                _onPush(changes) {
                    if (this._reshapeOnPush) {
                        this.load();
                    } else {
                        var changingArgs = {
                            changes: changes
                        };
                        this._eventsStrategy.fireEvent("changing", [changingArgs]);
                        var group = this.group();
                        var items = this.items();
                        var groupLevel = 0;
                        var dataSourceChanges = this.paginate() || group ? changes.filter(item => "update" === item.type) : changes;
                        if (group) {
                            groupLevel = Array.isArray(group) ? group.length : 1;
                        }
                        if (this._mapFunc) {
                            dataSourceChanges.forEach(item => {
                                if ("insert" === item.type) {
                                    item.data = this._mapFunc(item.data);
                                }
                            });
                        }
                        if (changingArgs.postProcessChanges) {
                            dataSourceChanges = changingArgs.postProcessChanges(dataSourceChanges);
                        }
                        applyBatch({
                            keyInfo: this.store(),
                            data: items,
                            changes: dataSourceChanges,
                            groupCount: groupLevel,
                            useInsertIndex: true
                        });
                        this._fireChanged([{
                            changes: changes
                        }]);
                    }
                },
                _createLoadOperation(deferred) {
                    var operationId = this._operationManager.add(deferred);
                    var storeLoadOptions = this._createStoreLoadOptions();
                    if (this._store && !isEmptyObject(null === storeLoadOptions || void 0 === storeLoadOptions ? void 0 : storeLoadOptions.langParams)) {
                        this._store._langParams = _extends({}, this._store._langParams, storeLoadOptions.langParams);
                    }
                    deferred.always(() => this._operationManager.remove(operationId));
                    return {
                        operationId: operationId,
                        storeLoadOptions: storeLoadOptions
                    }
                },
                reload() {
                    var store = this.store();
                    store._clearCache();
                    this._init();
                    return this.load()
                },
                cancel(operationId) {
                    return this._operationManager.cancel(operationId)
                },
                cancelAll() {
                    return this._operationManager.cancelAll()
                },
                _addSearchOptions(storeLoadOptions) {
                    if (this._disposed) {
                        return
                    }
                    if (this.store()._useDefaultSearch) {
                        this._addSearchFilter(storeLoadOptions);
                    } else {
                        storeLoadOptions.searchOperation = this._searchOperation;
                        storeLoadOptions.searchValue = this._searchValue;
                        storeLoadOptions.searchExpr = this._searchExpr;
                    }
                },
                _createStoreLoadOptions() {
                    var result = extend({}, this._storeLoadOptions);
                    this._addSearchOptions(result);
                    if (this._paginate) {
                        if (this._pageSize) {
                            result.skip = this._pageIndex * this._pageSize;
                            result.take = this._pageSize;
                        }
                    }
                    result.userData = this._userData;
                    return result
                },
                _addSearchFilter(storeLoadOptions) {
                    var value = this._searchValue;
                    var op = this._searchOperation;
                    var selector = this._searchExpr;
                    var searchFilter = [];
                    if (!value) {
                        return
                    }
                    if (!selector) {
                        selector = "this";
                    }
                    if (!Array.isArray(selector)) {
                        selector = [selector];
                    }
                    each(selector, (function(i, item) {
                        if (searchFilter.length) {
                            searchFilter.push("or");
                        }
                        searchFilter.push([item, op, value]);
                    }));
                    if (storeLoadOptions.filter) {
                        storeLoadOptions.filter = [searchFilter, storeLoadOptions.filter];
                    } else {
                        storeLoadOptions.filter = searchFilter;
                    }
                },
                _loadFromStore(loadOptions, pendingDeferred) {
                    var handleSuccess = (data, extra) => {
                        if (this._disposed) {
                            return
                        }
                        if (!isPending(pendingDeferred)) {
                            return
                        }
                        var loadResult = extend(normalizeLoadResult(data, extra), loadOptions);
                        this._eventsStrategy.fireEvent("customizeLoadResult", [loadResult]);
                        when(loadResult.data).done(data => {
                            loadResult.data = data;
                            this._processStoreLoadResult(loadResult, pendingDeferred);
                        }).fail(pendingDeferred.reject);
                    };
                    if (loadOptions.data) {
                        return (new Deferred).resolve(loadOptions.data).done(handleSuccess)
                    }
                    return this.store().load(loadOptions.storeLoadOptions).done(handleSuccess).fail(pendingDeferred.reject)
                },
                _processStoreLoadResult(loadResult, pendingDeferred) {
                    var data = loadResult.data;
                    var extra = loadResult.extra;
                    var storeLoadOptions = loadResult.storeLoadOptions;
                    var resolvePendingDeferred = () => {
                        this._isLoaded = true;
                        this._totalCount = isFinite(extra.totalCount) ? extra.totalCount : -1;
                        return pendingDeferred.resolve(data, extra)
                    };
                    if (this._disposed) {
                        return
                    }
                    data = this._applyPostProcessFunction(this._applyMapFunction(data));
                    if (!isObject(extra)) {
                        extra = {};
                    }
                    this._items = data;
                    if (!data.length || !this._paginate || this._pageSize && data.length < this._pageSize) {
                        this._isLastPage = true;
                    }
                    if (storeLoadOptions.requireTotalCount && !isFinite(extra.totalCount)) {
                        (() => {
                            this.store().totalCount(storeLoadOptions).done((function(count) {
                                extra.totalCount = count;
                                resolvePendingDeferred();
                            })).fail(pendingDeferred.reject);
                        })();
                    } else {
                        resolvePendingDeferred();
                    }
                },
                _applyMapFunction(data) {
                    if (this._mapFunc) {
                        return mapDataRespectingGrouping(data, this._mapFunc, this.group())
                    }
                    return data
                },
                _applyPostProcessFunction(data) {
                    if (this._postProcessFunc) {
                        return this._postProcessFunc(data)
                    }
                    return data
                },
                on(eventName, eventHandler) {
                    this._eventsStrategy.on(eventName, eventHandler);
                    return this
                },
                off(eventName, eventHandler) {
                    this._eventsStrategy.off(eventName, eventHandler);
                    return this
                }
            }));

            /**
             * DevExtreme (esm/localization/cldr-data/parent_locales.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            // !!! AUTO-GENERATED FILE, DO NOT EDIT
            var parentLocales = {
                "en-150": "en-001",
                "en-AG": "en-001",
                "en-AI": "en-001",
                "en-AU": "en-001",
                "en-BB": "en-001",
                "en-BM": "en-001",
                "en-BS": "en-001",
                "en-BW": "en-001",
                "en-BZ": "en-001",
                "en-CC": "en-001",
                "en-CK": "en-001",
                "en-CM": "en-001",
                "en-CX": "en-001",
                "en-CY": "en-001",
                "en-DG": "en-001",
                "en-DM": "en-001",
                "en-ER": "en-001",
                "en-FJ": "en-001",
                "en-FK": "en-001",
                "en-FM": "en-001",
                "en-GB": "en-001",
                "en-GD": "en-001",
                "en-GG": "en-001",
                "en-GH": "en-001",
                "en-GI": "en-001",
                "en-GM": "en-001",
                "en-GY": "en-001",
                "en-HK": "en-001",
                "en-IE": "en-001",
                "en-IL": "en-001",
                "en-IM": "en-001",
                "en-IN": "en-001",
                "en-IO": "en-001",
                "en-JE": "en-001",
                "en-JM": "en-001",
                "en-KE": "en-001",
                "en-KI": "en-001",
                "en-KN": "en-001",
                "en-KY": "en-001",
                "en-LC": "en-001",
                "en-LR": "en-001",
                "en-LS": "en-001",
                "en-MG": "en-001",
                "en-MO": "en-001",
                "en-MS": "en-001",
                "en-MT": "en-001",
                "en-MU": "en-001",
                "en-MV": "en-001",
                "en-MW": "en-001",
                "en-MY": "en-001",
                "en-NA": "en-001",
                "en-NF": "en-001",
                "en-NG": "en-001",
                "en-NR": "en-001",
                "en-NU": "en-001",
                "en-NZ": "en-001",
                "en-PG": "en-001",
                "en-PK": "en-001",
                "en-PN": "en-001",
                "en-PW": "en-001",
                "en-RW": "en-001",
                "en-SB": "en-001",
                "en-SC": "en-001",
                "en-SD": "en-001",
                "en-SG": "en-001",
                "en-SH": "en-001",
                "en-SL": "en-001",
                "en-SS": "en-001",
                "en-SX": "en-001",
                "en-SZ": "en-001",
                "en-TC": "en-001",
                "en-TK": "en-001",
                "en-TO": "en-001",
                "en-TT": "en-001",
                "en-TV": "en-001",
                "en-TZ": "en-001",
                "en-UG": "en-001",
                "en-VC": "en-001",
                "en-VG": "en-001",
                "en-VU": "en-001",
                "en-WS": "en-001",
                "en-ZA": "en-001",
                "en-ZM": "en-001",
                "en-ZW": "en-001",
                "en-AT": "en-150",
                "en-BE": "en-150",
                "en-CH": "en-150",
                "en-DE": "en-150",
                "en-DK": "en-150",
                "en-FI": "en-150",
                "en-NL": "en-150",
                "en-SE": "en-150",
                "en-SI": "en-150",
                "hi-Latn": "en-IN",
                "es-AR": "es-419",
                "es-BO": "es-419",
                "es-BR": "es-419",
                "es-BZ": "es-419",
                "es-CL": "es-419",
                "es-CO": "es-419",
                "es-CR": "es-419",
                "es-CU": "es-419",
                "es-DO": "es-419",
                "es-EC": "es-419",
                "es-GT": "es-419",
                "es-HN": "es-419",
                "es-MX": "es-419",
                "es-NI": "es-419",
                "es-PA": "es-419",
                "es-PE": "es-419",
                "es-PR": "es-419",
                "es-PY": "es-419",
                "es-SV": "es-419",
                "es-US": "es-419",
                "es-UY": "es-419",
                "es-VE": "es-419",
                nb: "no",
                nn: "no",
                "pt-AO": "pt-PT",
                "pt-CH": "pt-PT",
                "pt-CV": "pt-PT",
                "pt-FR": "pt-PT",
                "pt-GQ": "pt-PT",
                "pt-GW": "pt-PT",
                "pt-LU": "pt-PT",
                "pt-MO": "pt-PT",
                "pt-MZ": "pt-PT",
                "pt-ST": "pt-PT",
                "pt-TL": "pt-PT",
                "az-Arab": "und",
                "az-Cyrl": "und",
                "bal-Latn": "und",
                "blt-Latn": "und",
                "bm-Nkoo": "und",
                "bs-Cyrl": "und",
                "byn-Latn": "und",
                "cu-Glag": "und",
                "dje-Arab": "und",
                "dyo-Arab": "und",
                "en-Dsrt": "und",
                "en-Shaw": "und",
                "ff-Adlm": "und",
                "ff-Arab": "und",
                "ha-Arab": "und",
                "iu-Latn": "und",
                "kk-Arab": "und",
                "ks-Deva": "und",
                "ku-Arab": "und",
                "ky-Arab": "und",
                "ky-Latn": "und",
                "ml-Arab": "und",
                "mn-Mong": "und",
                "mni-Mtei": "und",
                "ms-Arab": "und",
                "pa-Arab": "und",
                "sat-Deva": "und",
                "sd-Deva": "und",
                "sd-Khoj": "und",
                "sd-Sind": "und",
                "shi-Latn": "und",
                "so-Arab": "und",
                "sr-Latn": "und",
                "sw-Arab": "und",
                "tg-Arab": "und",
                "ug-Cyrl": "und",
                "uz-Arab": "und",
                "uz-Cyrl": "und",
                "vai-Latn": "und",
                "wo-Arab": "und",
                "yo-Arab": "und",
                "yue-Hans": "und",
                "zh-Hant": "und",
                "zh-Hant-MO": "zh-Hant-HK"
            };

            /**
             * DevExtreme (esm/localization/parentLocale.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var PARENT_LOCALE_SEPARATOR = "-";
            var getParentLocale = (parentLocales, locale) => {
                var parentLocale = parentLocales[locale];
                if (parentLocale) {
                    return "root" !== parentLocale && parentLocale
                }
                return locale.substr(0, locale.lastIndexOf(PARENT_LOCALE_SEPARATOR))
            };

            /**
             * DevExtreme (esm/localization/core.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DEFAULT_LOCALE = "en";
            var localizationCoreUtils = exports("ck", dependencyInjector({
                locale: (() => {
                    var currentLocale = DEFAULT_LOCALE;
                    return locale => {
                        if (!locale) {
                            return currentLocale
                        }
                        currentLocale = locale;
                    }
                })(),
                getValueByClosestLocale: function(getter) {
                    var locale = this.locale();
                    var value = getter(locale);
                    var isRootLocale;
                    while (!value && !isRootLocale) {
                        locale = getParentLocale(parentLocales, locale);
                        if (locale) {
                            value = getter(locale);
                        } else {
                            isRootLocale = true;
                        }
                    }
                    if (void 0 === value && locale !== DEFAULT_LOCALE) {
                        return getter(DEFAULT_LOCALE)
                    }
                    return value
                }
            }));

            /**
             * DevExtreme (esm/localization/default_messages.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            // !!! AUTO-GENERATED FILE, DO NOT EDIT
            var defaultMessages = {
                en: {
                    Yes: "Yes",
                    No: "No",
                    Cancel: "Cancel",
                    Close: "Close",
                    Clear: "Clear",
                    Done: "Done",
                    Loading: "Loading...",
                    Select: "Select...",
                    Search: "Search",
                    Back: "Back",
                    OK: "OK",
                    "dxCollectionWidget-noDataText": "No data to display",
                    "dxDropDownEditor-selectLabel": "Select",
                    "validation-required": "Required",
                    "validation-required-formatted": "{0} is required",
                    "validation-numeric": "Value must be a number",
                    "validation-numeric-formatted": "{0} must be a number",
                    "validation-range": "Value is out of range",
                    "validation-range-formatted": "{0} is out of range",
                    "validation-stringLength": "The length of the value is not correct",
                    "validation-stringLength-formatted": "The length of {0} is not correct",
                    "validation-custom": "Value is invalid",
                    "validation-custom-formatted": "{0} is invalid",
                    "validation-async": "Value is invalid",
                    "validation-async-formatted": "{0} is invalid",
                    "validation-compare": "Values do not match",
                    "validation-compare-formatted": "{0} does not match",
                    "validation-pattern": "Value does not match pattern",
                    "validation-pattern-formatted": "{0} does not match pattern",
                    "validation-email": "Email is invalid",
                    "validation-email-formatted": "{0} is invalid",
                    "validation-mask": "Value is invalid",
                    "dxLookup-searchPlaceholder": "Minimum character number: {0}",
                    "dxList-pullingDownText": "Pull down to refresh...",
                    "dxList-pulledDownText": "Release to refresh...",
                    "dxList-refreshingText": "Refreshing...",
                    "dxList-pageLoadingText": "Loading...",
                    "dxList-nextButtonText": "More",
                    "dxList-selectAll": "Select All",
                    "dxList-listAriaLabel": "Items",
                    "dxList-listAriaLabel-deletable": "Deletable items",
                    "dxListEditDecorator-delete": "Delete",
                    "dxListEditDecorator-more": "More",
                    "dxScrollView-pullingDownText": "Pull down to refresh...",
                    "dxScrollView-pulledDownText": "Release to refresh...",
                    "dxScrollView-refreshingText": "Refreshing...",
                    "dxScrollView-reachBottomText": "Loading...",
                    "dxDateBox-simulatedDataPickerTitleTime": "Select time",
                    "dxDateBox-simulatedDataPickerTitleDate": "Select date",
                    "dxDateBox-simulatedDataPickerTitleDateTime": "Select date and time",
                    "dxDateBox-validation-datetime": "Value must be a date or time",
                    "dxDateRangeBox-invalidStartDateMessage": "Start value must be a date",
                    "dxDateRangeBox-invalidEndDateMessage": "End value must be a date",
                    "dxDateRangeBox-startDateOutOfRangeMessage": "Start date is out of range",
                    "dxDateRangeBox-endDateOutOfRangeMessage": "End date is out of range",
                    "dxDateRangeBox-startDateLabel": "Start Date",
                    "dxDateRangeBox-endDateLabel": "End Date",
                    "dxFileUploader-selectFile": "Select a file",
                    "dxFileUploader-dropFile": "or Drop a file here",
                    "dxFileUploader-bytes": "bytes",
                    "dxFileUploader-kb": "KB",
                    "dxFileUploader-Mb": "MB",
                    "dxFileUploader-Gb": "GB",
                    "dxFileUploader-upload": "Upload",
                    "dxFileUploader-uploaded": "Uploaded",
                    "dxFileUploader-readyToUpload": "Ready to upload",
                    "dxFileUploader-uploadAbortedMessage": "Upload cancelled",
                    "dxFileUploader-uploadFailedMessage": "Upload failed",
                    "dxFileUploader-invalidFileExtension": "File type is not allowed",
                    "dxFileUploader-invalidMaxFileSize": "File is too large",
                    "dxFileUploader-invalidMinFileSize": "File is too small",
                    "dxRangeSlider-ariaFrom": "From",
                    "dxRangeSlider-ariaTill": "Till",
                    "dxSwitch-switchedOnText": "ON",
                    "dxSwitch-switchedOffText": "OFF",
                    "dxForm-optionalMark": "optional",
                    "dxForm-requiredMessage": "{0} is required",
                    "dxNumberBox-invalidValueMessage": "Value must be a number",
                    "dxNumberBox-noDataText": "No data",
                    "dxDataGrid-emptyHeaderWithColumnChooserText": "Use {0} to display columns",
                    "dxDataGrid-emptyHeaderWithGroupPanelText": "Drag a column from the group panel here",
                    "dxDataGrid-emptyHeaderWithColumnChooserAndGroupPanelText": "Use {0} or drag a column from the group panel",
                    "dxDataGrid-emptyHeaderColumnChooserText": "column chooser",
                    "dxDataGrid-columnChooserTitle": "Column Chooser",
                    "dxDataGrid-columnChooserEmptyText": "Drag a column here to hide it",
                    "dxDataGrid-groupContinuesMessage": "Continues on the next page",
                    "dxDataGrid-groupContinuedMessage": "Continued from the previous page",
                    "dxDataGrid-groupHeaderText": "Group by This Column",
                    "dxDataGrid-ungroupHeaderText": "Ungroup",
                    "dxDataGrid-ungroupAllText": "Ungroup All",
                    "dxDataGrid-editingEditRow": "Edit",
                    "dxDataGrid-editingSaveRowChanges": "Save",
                    "dxDataGrid-editingCancelRowChanges": "Cancel",
                    "dxDataGrid-editingDeleteRow": "Delete",
                    "dxDataGrid-editingUndeleteRow": "Undelete",
                    "dxDataGrid-editingConfirmDeleteMessage": "Are you sure you want to delete this record?",
                    "dxDataGrid-validationCancelChanges": "Cancel changes",
                    "dxDataGrid-groupPanelEmptyText": "Drag a column header here to group by that column",
                    "dxDataGrid-noDataText": "No data",
                    "dxDataGrid-searchPanelPlaceholder": "Search...",
                    "dxDataGrid-filterRowShowAllText": "(All)",
                    "dxDataGrid-filterRowResetOperationText": "Reset",
                    "dxDataGrid-filterRowOperationEquals": "Equals",
                    "dxDataGrid-filterRowOperationNotEquals": "Does not equal",
                    "dxDataGrid-filterRowOperationLess": "Less than",
                    "dxDataGrid-filterRowOperationLessOrEquals": "Less than or equal to",
                    "dxDataGrid-filterRowOperationGreater": "Greater than",
                    "dxDataGrid-filterRowOperationGreaterOrEquals": "Greater than or equal to",
                    "dxDataGrid-filterRowOperationStartsWith": "Starts with",
                    "dxDataGrid-filterRowOperationContains": "Contains",
                    "dxDataGrid-filterRowOperationNotContains": "Does not contain",
                    "dxDataGrid-filterRowOperationEndsWith": "Ends with",
                    "dxDataGrid-filterRowOperationBetween": "Between",
                    "dxDataGrid-filterRowOperationBetweenStartText": "Start",
                    "dxDataGrid-filterRowOperationBetweenEndText": "End",
                    "dxDataGrid-ariaSearchBox": "Search box",
                    "dxDataGrid-applyFilterText": "Apply filter",
                    "dxDataGrid-trueText": "true",
                    "dxDataGrid-falseText": "false",
                    "dxDataGrid-sortingAscendingText": "Sort Ascending",
                    "dxDataGrid-sortingDescendingText": "Sort Descending",
                    "dxDataGrid-sortingClearText": "Clear Sorting",
                    "dxDataGrid-ariaNotSortedColumn": "Not sorted column",
                    "dxDataGrid-ariaSortedAscendingColumn": "Column sorted in ascending order",
                    "dxDataGrid-ariaSortedDescendingColumn": "Column sorted in descending order",
                    "dxDataGrid-ariaSortIndex": "Sort index {0}",
                    "dxDataGrid-editingSaveAllChanges": "Save changes",
                    "dxDataGrid-editingCancelAllChanges": "Discard changes",
                    "dxDataGrid-editingAddRow": "Add a row",
                    "dxDataGrid-summaryMin": "Min: {0}",
                    "dxDataGrid-summaryMinOtherColumn": "Min of {1} is {0}",
                    "dxDataGrid-summaryMax": "Max: {0}",
                    "dxDataGrid-summaryMaxOtherColumn": "Max of {1} is {0}",
                    "dxDataGrid-summaryAvg": "Avg: {0}",
                    "dxDataGrid-summaryAvgOtherColumn": "Avg of {1} is {0}",
                    "dxDataGrid-summarySum": "Sum: {0}",
                    "dxDataGrid-summarySumOtherColumn": "Sum of {1} is {0}",
                    "dxDataGrid-summaryCount": "Count: {0}",
                    "dxDataGrid-columnFixingFix": "Fix",
                    "dxDataGrid-columnFixingUnfix": "Unfix",
                    "dxDataGrid-columnFixingLeftPosition": "To the left",
                    "dxDataGrid-columnFixingRightPosition": "To the right",
                    "dxDataGrid-exportTo": "Export",
                    "dxDataGrid-exportToExcel": "Export to Excel file",
                    "dxDataGrid-exporting": "Exporting...",
                    "dxDataGrid-excelFormat": "Excel file",
                    "dxDataGrid-selectedRows": "Selected rows",
                    "dxDataGrid-exportSelectedRows": "Export selected rows to {0}",
                    "dxDataGrid-exportAll": "Export all data to {0}",
                    "dxDataGrid-headerFilterLabel": "Filter options",
                    "dxDataGrid-headerFilterIndicatorLabel": "Show filter options for column '{0}'",
                    "dxDataGrid-headerFilterEmptyValue": "(Blanks)",
                    "dxDataGrid-headerFilterOK": "OK",
                    "dxDataGrid-headerFilterCancel": "Cancel",
                    "dxDataGrid-ariaAdaptiveCollapse": "Hide additional data",
                    "dxDataGrid-ariaAdaptiveExpand": "Display additional data",
                    "dxDataGrid-ariaColumn": "Column",
                    "dxDataGrid-ariaColumnHeader": "Column header",
                    "dxDataGrid-ariaValue": "Value",
                    "dxDataGrid-ariaError": "Error",
                    "dxDataGrid-ariaRevertButton": "Press Escape to discard the changes",
                    "dxDataGrid-ariaFilterCell": "Filter cell",
                    "dxDataGrid-ariaCollapse": "Collapse",
                    "dxDataGrid-ariaModifiedCell": "Modified",
                    "dxDataGrid-ariaDeletedCell": "Deleted",
                    "dxDataGrid-ariaEditableCell": "Editable",
                    "dxDataGrid-ariaExpand": "Expand",
                    "dxDataGrid-ariaCollapsedRow": "Collapsed row",
                    "dxDataGrid-ariaExpandedRow": "Expanded row",
                    "dxDataGrid-ariaDataGrid": "Data grid with {0} rows and {1} columns",
                    "dxDataGrid-ariaSearchInGrid": "Search in the data grid",
                    "dxDataGrid-ariaSelectAll": "Select all",
                    "dxDataGrid-ariaSelectRow": "Select row",
                    "dxDataGrid-ariaToolbar": "Data grid toolbar",
                    "dxDataGrid-ariaEditForm": "Edit form",
                    "dxDataGrid-filterBuilderPopupTitle": "Filter Builder",
                    "dxDataGrid-filterPanelCreateFilter": "Create Filter",
                    "dxDataGrid-filterPanelClearFilter": "Clear",
                    "dxDataGrid-filterPanelFilterEnabledHint": "Enable the filter",
                    "dxDataGrid-masterDetail": "Cell with details",
                    "dxTreeList-ariaTreeList": "Tree list with {0} rows and {1} columns",
                    "dxTreeList-ariaSearchInGrid": "Search in the tree list",
                    "dxTreeList-ariaToolbar": "Tree list toolbar",
                    "dxTreeList-editingAddRowToNode": "Add",
                    "dxPager-infoText": "Page {0} of {1} ({2} items)",
                    "dxPager-pagesCountText": "of",
                    "dxPager-pageSize": "Items per page: {0}",
                    "dxPager-pageSizesAllText": "All",
                    "dxPager-page": "Page {0}",
                    "dxPager-prevPage": "Previous Page",
                    "dxPager-nextPage": "Next Page",
                    "dxPager-ariaLabel": "Page Navigation",
                    "dxPager-ariaPageSize": "Page size",
                    "dxPager-ariaPageNumber": "Page number",
                    "dxPivotGrid-grandTotal": "Grand Total",
                    "dxPivotGrid-total": "{0} Total",
                    "dxPivotGrid-fieldChooserTitle": "Field Chooser",
                    "dxPivotGrid-showFieldChooser": "Show Field Chooser",
                    "dxPivotGrid-expandAll": "Expand All",
                    "dxPivotGrid-collapseAll": "Collapse All",
                    "dxPivotGrid-sortColumnBySummary": 'Sort "{0}" by This Column',
                    "dxPivotGrid-sortRowBySummary": 'Sort "{0}" by This Row',
                    "dxPivotGrid-removeAllSorting": "Remove All Sorting",
                    "dxPivotGrid-dataNotAvailable": "N/A",
                    "dxPivotGrid-rowFields": "Row Fields",
                    "dxPivotGrid-columnFields": "Column Fields",
                    "dxPivotGrid-dataFields": "Data Fields",
                    "dxPivotGrid-filterFields": "Filter Fields",
                    "dxPivotGrid-allFields": "All Fields",
                    "dxPivotGrid-columnFieldArea": "Drop Column Fields Here",
                    "dxPivotGrid-dataFieldArea": "Drop Data Fields Here",
                    "dxPivotGrid-rowFieldArea": "Drop Row Fields Here",
                    "dxPivotGrid-filterFieldArea": "Drop Filter Fields Here",
                    "dxScheduler-editorLabelTitle": "Subject",
                    "dxScheduler-editorLabelStartDate": "Start Date",
                    "dxScheduler-editorLabelEndDate": "End Date",
                    "dxScheduler-editorLabelDescription": "Description",
                    "dxScheduler-editorLabelRecurrence": "Repeat",
                    "dxScheduler-openAppointment": "Open appointment",
                    "dxScheduler-recurrenceNever": "Never",
                    "dxScheduler-recurrenceMinutely": "Every minute",
                    "dxScheduler-recurrenceHourly": "Hourly",
                    "dxScheduler-recurrenceDaily": "Daily",
                    "dxScheduler-recurrenceWeekly": "Weekly",
                    "dxScheduler-recurrenceMonthly": "Monthly",
                    "dxScheduler-recurrenceYearly": "Yearly",
                    "dxScheduler-recurrenceRepeatEvery": "Repeat Every",
                    "dxScheduler-recurrenceRepeatOn": "Repeat On",
                    "dxScheduler-recurrenceEnd": "End repeat",
                    "dxScheduler-recurrenceAfter": "After",
                    "dxScheduler-recurrenceOn": "On",
                    "dxScheduler-recurrenceRepeatMinutely": "minute(s)",
                    "dxScheduler-recurrenceRepeatHourly": "hour(s)",
                    "dxScheduler-recurrenceRepeatDaily": "day(s)",
                    "dxScheduler-recurrenceRepeatWeekly": "week(s)",
                    "dxScheduler-recurrenceRepeatMonthly": "month(s)",
                    "dxScheduler-recurrenceRepeatYearly": "year(s)",
                    "dxScheduler-switcherDay": "Day",
                    "dxScheduler-switcherWeek": "Week",
                    "dxScheduler-switcherWorkWeek": "Work Week",
                    "dxScheduler-switcherMonth": "Month",
                    "dxScheduler-switcherAgenda": "Agenda",
                    "dxScheduler-switcherTimelineDay": "Timeline Day",
                    "dxScheduler-switcherTimelineWeek": "Timeline Week",
                    "dxScheduler-switcherTimelineWorkWeek": "Timeline Work Week",
                    "dxScheduler-switcherTimelineMonth": "Timeline Month",
                    "dxScheduler-recurrenceRepeatOnDate": "on date",
                    "dxScheduler-recurrenceRepeatCount": "occurrence(s)",
                    "dxScheduler-allDay": "All day",
                    "dxScheduler-confirmRecurrenceEditTitle": "Edit Recurring Appointment",
                    "dxScheduler-confirmRecurrenceDeleteTitle": "Delete Recurring Appointment",
                    "dxScheduler-confirmRecurrenceEditMessage": "Do you want to edit only this appointment or the whole series?",
                    "dxScheduler-confirmRecurrenceDeleteMessage": "Do you want to delete only this appointment or the whole series?",
                    "dxScheduler-confirmRecurrenceEditSeries": "Edit series",
                    "dxScheduler-confirmRecurrenceDeleteSeries": "Delete series",
                    "dxScheduler-confirmRecurrenceEditOccurrence": "Edit appointment",
                    "dxScheduler-confirmRecurrenceDeleteOccurrence": "Delete appointment",
                    "dxScheduler-noTimezoneTitle": "No timezone",
                    "dxScheduler-moreAppointments": "{0} more",
                    "dxCalendar-currentDay": "Today",
                    "dxCalendar-currentMonth": "Current month",
                    "dxCalendar-currentYear": "Current year",
                    "dxCalendar-currentYearRange": "Current year range",
                    "dxCalendar-todayButtonText": "Today",
                    "dxCalendar-ariaWidgetName": "Calendar",
                    "dxCalendar-previousMonthButtonLabel": "Previous month",
                    "dxCalendar-previousYearButtonLabel": "Previous year",
                    "dxCalendar-previousDecadeButtonLabel": "Previous decade",
                    "dxCalendar-previousCenturyButtonLabel": "Previous century",
                    "dxCalendar-nextMonthButtonLabel": "Next month",
                    "dxCalendar-nextYearButtonLabel": "Next year",
                    "dxCalendar-nextDecadeButtonLabel": "Next decade",
                    "dxCalendar-nextCenturyButtonLabel": "Next century",
                    "dxCalendar-captionMonthLabel": "Month selection",
                    "dxCalendar-captionYearLabel": "Year selection",
                    "dxCalendar-captionDecadeLabel": "Decade selection",
                    "dxCalendar-captionCenturyLabel": "Century selection",
                    "dxCalendar-selectedDate": "The selected date is {0}",
                    "dxCalendar-selectedDateRange": "The selected date range is from {0} to {1}",
                    "dxColorView-ariaRed": "Red",
                    "dxColorView-ariaGreen": "Green",
                    "dxColorView-ariaBlue": "Blue",
                    "dxColorView-ariaAlpha": "Transparency",
                    "dxColorView-ariaHex": "Color code",
                    "dxTagBox-selected": "{0} selected",
                    "dxTagBox-allSelected": "All selected ({0})",
                    "dxTagBox-moreSelected": "{0} more",
                    "dxTagBox-tagRoleDescription": "Tag. Press the delete button to remove this tag",
                    "vizExport-printingButtonText": "Print",
                    "vizExport-titleMenuText": "Exporting/Printing",
                    "vizExport-exportButtonText": "{0} file",
                    "dxFilterBuilder-and": "And",
                    "dxFilterBuilder-or": "Or",
                    "dxFilterBuilder-notAnd": "Not And",
                    "dxFilterBuilder-notOr": "Not Or",
                    "dxFilterBuilder-addCondition": "Add Condition",
                    "dxFilterBuilder-addGroup": "Add Group",
                    "dxFilterBuilder-enterValueText": "<enter a value>",
                    "dxFilterBuilder-filterOperationEquals": "Equals",
                    "dxFilterBuilder-filterOperationNotEquals": "Does not equal",
                    "dxFilterBuilder-filterOperationLess": "Is less than",
                    "dxFilterBuilder-filterOperationLessOrEquals": "Is less than or equal to",
                    "dxFilterBuilder-filterOperationGreater": "Is greater than",
                    "dxFilterBuilder-filterOperationGreaterOrEquals": "Is greater than or equal to",
                    "dxFilterBuilder-filterOperationStartsWith": "Starts with",
                    "dxFilterBuilder-filterOperationContains": "Contains",
                    "dxFilterBuilder-filterOperationNotContains": "Does not contain",
                    "dxFilterBuilder-filterOperationEndsWith": "Ends with",
                    "dxFilterBuilder-filterOperationIsBlank": "Is blank",
                    "dxFilterBuilder-filterOperationIsNotBlank": "Is not blank",
                    "dxFilterBuilder-filterOperationBetween": "Is between",
                    "dxFilterBuilder-filterOperationAnyOf": "Is any of",
                    "dxFilterBuilder-filterOperationNoneOf": "Is none of",
                    "dxHtmlEditor-dialogColorCaption": "Change Font Color",
                    "dxHtmlEditor-dialogBackgroundCaption": "Change Background Color",
                    "dxHtmlEditor-dialogLinkCaption": "Add Link",
                    "dxHtmlEditor-dialogLinkUrlField": "URL",
                    "dxHtmlEditor-dialogLinkTextField": "Text",
                    "dxHtmlEditor-dialogLinkTargetField": "Open link in new window",
                    "dxHtmlEditor-dialogImageCaption": "Add Image",
                    "dxHtmlEditor-dialogImageUrlField": "URL",
                    "dxHtmlEditor-dialogImageAltField": "Alternate text",
                    "dxHtmlEditor-dialogImageWidthField": "Width (px)",
                    "dxHtmlEditor-dialogImageHeightField": "Height (px)",
                    "dxHtmlEditor-dialogInsertTableRowsField": "Rows",
                    "dxHtmlEditor-dialogInsertTableColumnsField": "Columns",
                    "dxHtmlEditor-dialogInsertTableCaption": "Insert Table",
                    "dxHtmlEditor-dialogUpdateImageCaption": "Update Image",
                    "dxHtmlEditor-dialogImageUpdateButton": "Update",
                    "dxHtmlEditor-dialogImageAddButton": "Add",
                    "dxHtmlEditor-dialogImageSpecifyUrl": "From the Web",
                    "dxHtmlEditor-dialogImageSelectFile": "From This Device",
                    "dxHtmlEditor-dialogImageKeepAspectRatio": "Keep Aspect Ratio",
                    "dxHtmlEditor-dialogImageEncodeToBase64": "Encode to Base64",
                    "dxHtmlEditor-heading": "Heading",
                    "dxHtmlEditor-normalText": "Normal text",
                    "dxHtmlEditor-background": "Background Color",
                    "dxHtmlEditor-bold": "Bold",
                    "dxHtmlEditor-color": "Font Color",
                    "dxHtmlEditor-font": "Font",
                    "dxHtmlEditor-italic": "Italic",
                    "dxHtmlEditor-link": "Add Link",
                    "dxHtmlEditor-image": "Add Image",
                    "dxHtmlEditor-size": "Size",
                    "dxHtmlEditor-strike": "Strikethrough",
                    "dxHtmlEditor-subscript": "Subscript",
                    "dxHtmlEditor-superscript": "Superscript",
                    "dxHtmlEditor-underline": "Underline",
                    "dxHtmlEditor-blockquote": "Blockquote",
                    "dxHtmlEditor-header": "Header",
                    "dxHtmlEditor-increaseIndent": "Increase Indent",
                    "dxHtmlEditor-decreaseIndent": "Decrease Indent",
                    "dxHtmlEditor-orderedList": "Ordered List",
                    "dxHtmlEditor-bulletList": "Bullet List",
                    "dxHtmlEditor-alignLeft": "Align Left",
                    "dxHtmlEditor-alignCenter": "Align Center",
                    "dxHtmlEditor-alignRight": "Align Right",
                    "dxHtmlEditor-alignJustify": "Align Justify",
                    "dxHtmlEditor-codeBlock": "Code Block",
                    "dxHtmlEditor-variable": "Add Variable",
                    "dxHtmlEditor-undo": "Undo",
                    "dxHtmlEditor-redo": "Redo",
                    "dxHtmlEditor-clear": "Clear Formatting",
                    "dxHtmlEditor-insertTable": "Insert Table",
                    "dxHtmlEditor-insertHeaderRow": "Insert Header Row",
                    "dxHtmlEditor-insertRowAbove": "Insert Row Above",
                    "dxHtmlEditor-insertRowBelow": "Insert Row Below",
                    "dxHtmlEditor-insertColumnLeft": "Insert Column Left",
                    "dxHtmlEditor-insertColumnRight": "Insert Column Right",
                    "dxHtmlEditor-deleteColumn": "Delete Column",
                    "dxHtmlEditor-deleteRow": "Delete Row",
                    "dxHtmlEditor-deleteTable": "Delete Table",
                    "dxHtmlEditor-cellProperties": "Cell Properties",
                    "dxHtmlEditor-tableProperties": "Table Properties",
                    "dxHtmlEditor-insert": "Insert",
                    "dxHtmlEditor-delete": "Delete",
                    "dxHtmlEditor-border": "Border",
                    "dxHtmlEditor-style": "Style",
                    "dxHtmlEditor-width": "Width",
                    "dxHtmlEditor-height": "Height",
                    "dxHtmlEditor-borderColor": "Color",
                    "dxHtmlEditor-tableBackground": "Background",
                    "dxHtmlEditor-dimensions": "Dimensions",
                    "dxHtmlEditor-alignment": "Alignment",
                    "dxHtmlEditor-horizontal": "Horizontal",
                    "dxHtmlEditor-vertical": "Vertical",
                    "dxHtmlEditor-paddingVertical": "Vertical Padding",
                    "dxHtmlEditor-paddingHorizontal": "Horizontal Padding",
                    "dxHtmlEditor-pixels": "Pixels",
                    "dxHtmlEditor-list": "List",
                    "dxHtmlEditor-ordered": "Ordered",
                    "dxHtmlEditor-bullet": "Bullet",
                    "dxHtmlEditor-align": "Align",
                    "dxHtmlEditor-center": "Center",
                    "dxHtmlEditor-left": "Left",
                    "dxHtmlEditor-right": "Right",
                    "dxHtmlEditor-indent": "Indent",
                    "dxHtmlEditor-justify": "Justify",
                    "dxHtmlEditor-borderStyleNone": "none",
                    "dxHtmlEditor-borderStyleHidden": "hidden",
                    "dxHtmlEditor-borderStyleDotted": "dotted",
                    "dxHtmlEditor-borderStyleDashed": "dashed",
                    "dxHtmlEditor-borderStyleSolid": "solid",
                    "dxHtmlEditor-borderStyleDouble": "double",
                    "dxHtmlEditor-borderStyleGroove": "groove",
                    "dxHtmlEditor-borderStyleRidge": "ridge",
                    "dxHtmlEditor-borderStyleInset": "inset",
                    "dxHtmlEditor-borderStyleOutset": "outset",
                    "dxFileManager-newDirectoryName": "Untitled directory",
                    "dxFileManager-rootDirectoryName": "Files",
                    "dxFileManager-errorNoAccess": "Access Denied. Operation could not be completed.",
                    "dxFileManager-errorDirectoryExistsFormat": "Directory '{0}' already exists.",
                    "dxFileManager-errorFileExistsFormat": "File '{0}' already exists.",
                    "dxFileManager-errorFileNotFoundFormat": "File '{0}' not found.",
                    "dxFileManager-errorDirectoryNotFoundFormat": "Directory '{0}' not found.",
                    "dxFileManager-errorWrongFileExtension": "File extension is not allowed.",
                    "dxFileManager-errorMaxFileSizeExceeded": "File size exceeds the maximum allowed size.",
                    "dxFileManager-errorInvalidSymbols": "This name contains invalid characters.",
                    "dxFileManager-errorDefault": "Unspecified error.",
                    "dxFileManager-errorDirectoryOpenFailed": "The directory cannot be opened",
                    "dxFileManager-commandCreate": "New directory",
                    "dxFileManager-commandRename": "Rename",
                    "dxFileManager-commandMove": "Move to",
                    "dxFileManager-commandCopy": "Copy to",
                    "dxFileManager-commandDelete": "Delete",
                    "dxFileManager-commandDownload": "Download",
                    "dxFileManager-commandUpload": "Upload files",
                    "dxFileManager-commandRefresh": "Refresh",
                    "dxFileManager-commandThumbnails": "Thumbnails View",
                    "dxFileManager-commandDetails": "Details View",
                    "dxFileManager-commandClearSelection": "Clear selection",
                    "dxFileManager-commandShowNavPane": "Toggle navigation pane",
                    "dxFileManager-dialogDirectoryChooserMoveTitle": "Move to",
                    "dxFileManager-dialogDirectoryChooserMoveButtonText": "Move",
                    "dxFileManager-dialogDirectoryChooserCopyTitle": "Copy to",
                    "dxFileManager-dialogDirectoryChooserCopyButtonText": "Copy",
                    "dxFileManager-dialogRenameItemTitle": "Rename",
                    "dxFileManager-dialogRenameItemButtonText": "Save",
                    "dxFileManager-dialogCreateDirectoryTitle": "New directory",
                    "dxFileManager-dialogCreateDirectoryButtonText": "Create",
                    "dxFileManager-dialogDeleteItemTitle": "Delete",
                    "dxFileManager-dialogDeleteItemButtonText": "Delete",
                    "dxFileManager-dialogDeleteItemSingleItemConfirmation": "Are you sure you want to delete {0}?",
                    "dxFileManager-dialogDeleteItemMultipleItemsConfirmation": "Are you sure you want to delete {0} items?",
                    "dxFileManager-dialogButtonCancel": "Cancel",
                    "dxFileManager-editingCreateSingleItemProcessingMessage": "Creating a directory inside {0}",
                    "dxFileManager-editingCreateSingleItemSuccessMessage": "Created a directory inside {0}",
                    "dxFileManager-editingCreateSingleItemErrorMessage": "Directory was not created",
                    "dxFileManager-editingCreateCommonErrorMessage": "Directory was not created",
                    "dxFileManager-editingRenameSingleItemProcessingMessage": "Renaming an item inside {0}",
                    "dxFileManager-editingRenameSingleItemSuccessMessage": "Renamed an item inside {0}",
                    "dxFileManager-editingRenameSingleItemErrorMessage": "Item was not renamed",
                    "dxFileManager-editingRenameCommonErrorMessage": "Item was not renamed",
                    "dxFileManager-editingDeleteSingleItemProcessingMessage": "Deleting an item from {0}",
                    "dxFileManager-editingDeleteMultipleItemsProcessingMessage": "Deleting {0} items from {1}",
                    "dxFileManager-editingDeleteSingleItemSuccessMessage": "Deleted an item from {0}",
                    "dxFileManager-editingDeleteMultipleItemsSuccessMessage": "Deleted {0} items from {1}",
                    "dxFileManager-editingDeleteSingleItemErrorMessage": "Item was not deleted",
                    "dxFileManager-editingDeleteMultipleItemsErrorMessage": "{0} items were not deleted",
                    "dxFileManager-editingDeleteCommonErrorMessage": "Some items were not deleted",
                    "dxFileManager-editingMoveSingleItemProcessingMessage": "Moving an item to {0}",
                    "dxFileManager-editingMoveMultipleItemsProcessingMessage": "Moving {0} items to {1}",
                    "dxFileManager-editingMoveSingleItemSuccessMessage": "Moved an item to {0}",
                    "dxFileManager-editingMoveMultipleItemsSuccessMessage": "Moved {0} items to {1}",
                    "dxFileManager-editingMoveSingleItemErrorMessage": "Item was not moved",
                    "dxFileManager-editingMoveMultipleItemsErrorMessage": "{0} items were not moved",
                    "dxFileManager-editingMoveCommonErrorMessage": "Some items were not moved",
                    "dxFileManager-editingCopySingleItemProcessingMessage": "Copying an item to {0}",
                    "dxFileManager-editingCopyMultipleItemsProcessingMessage": "Copying {0} items to {1}",
                    "dxFileManager-editingCopySingleItemSuccessMessage": "Copied an item to {0}",
                    "dxFileManager-editingCopyMultipleItemsSuccessMessage": "Copied {0} items to {1}",
                    "dxFileManager-editingCopySingleItemErrorMessage": "Item was not copied",
                    "dxFileManager-editingCopyMultipleItemsErrorMessage": "{0} items were not copied",
                    "dxFileManager-editingCopyCommonErrorMessage": "Some items were not copied",
                    "dxFileManager-editingUploadSingleItemProcessingMessage": "Uploading an item to {0}",
                    "dxFileManager-editingUploadMultipleItemsProcessingMessage": "Uploading {0} items to {1}",
                    "dxFileManager-editingUploadSingleItemSuccessMessage": "Uploaded an item to {0}",
                    "dxFileManager-editingUploadMultipleItemsSuccessMessage": "Uploaded {0} items to {1}",
                    "dxFileManager-editingUploadSingleItemErrorMessage": "Item was not uploaded",
                    "dxFileManager-editingUploadMultipleItemsErrorMessage": "{0} items were not uploaded",
                    "dxFileManager-editingUploadCanceledMessage": "Canceled",
                    "dxFileManager-editingDownloadSingleItemErrorMessage": "Item was not downloaded",
                    "dxFileManager-editingDownloadMultipleItemsErrorMessage": "{0} items were not downloaded",
                    "dxFileManager-listDetailsColumnCaptionName": "Name",
                    "dxFileManager-listDetailsColumnCaptionDateModified": "Date Modified",
                    "dxFileManager-listDetailsColumnCaptionFileSize": "File Size",
                    "dxFileManager-listThumbnailsTooltipTextSize": "Size",
                    "dxFileManager-listThumbnailsTooltipTextDateModified": "Date Modified",
                    "dxFileManager-notificationProgressPanelTitle": "Progress",
                    "dxFileManager-notificationProgressPanelEmptyListText": "No operations",
                    "dxFileManager-notificationProgressPanelOperationCanceled": "Canceled",
                    "dxDiagram-categoryGeneral": "General",
                    "dxDiagram-categoryFlowchart": "Flowchart",
                    "dxDiagram-categoryOrgChart": "Org Chart",
                    "dxDiagram-categoryContainers": "Containers",
                    "dxDiagram-categoryCustom": "Custom",
                    "dxDiagram-commandExportToSvg": "Export to SVG",
                    "dxDiagram-commandExportToPng": "Export to PNG",
                    "dxDiagram-commandExportToJpg": "Export to JPEG",
                    "dxDiagram-commandUndo": "Undo",
                    "dxDiagram-commandRedo": "Redo",
                    "dxDiagram-commandFontName": "Font Name",
                    "dxDiagram-commandFontSize": "Font Size",
                    "dxDiagram-commandBold": "Bold",
                    "dxDiagram-commandItalic": "Italic",
                    "dxDiagram-commandUnderline": "Underline",
                    "dxDiagram-commandTextColor": "Font Color",
                    "dxDiagram-commandLineColor": "Line Color",
                    "dxDiagram-commandLineWidth": "Line Width",
                    "dxDiagram-commandLineStyle": "Line Style",
                    "dxDiagram-commandLineStyleSolid": "Solid",
                    "dxDiagram-commandLineStyleDotted": "Dotted",
                    "dxDiagram-commandLineStyleDashed": "Dashed",
                    "dxDiagram-commandFillColor": "Fill Color",
                    "dxDiagram-commandAlignLeft": "Align Left",
                    "dxDiagram-commandAlignCenter": "Align Center",
                    "dxDiagram-commandAlignRight": "Align Right",
                    "dxDiagram-commandConnectorLineType": "Connector Line Type",
                    "dxDiagram-commandConnectorLineStraight": "Straight",
                    "dxDiagram-commandConnectorLineOrthogonal": "Orthogonal",
                    "dxDiagram-commandConnectorLineStart": "Connector Line Start",
                    "dxDiagram-commandConnectorLineEnd": "Connector Line End",
                    "dxDiagram-commandConnectorLineNone": "None",
                    "dxDiagram-commandConnectorLineArrow": "Arrow",
                    "dxDiagram-commandFullscreen": "Full Screen",
                    "dxDiagram-commandUnits": "Units",
                    "dxDiagram-commandPageSize": "Page Size",
                    "dxDiagram-commandPageOrientation": "Page Orientation",
                    "dxDiagram-commandPageOrientationLandscape": "Landscape",
                    "dxDiagram-commandPageOrientationPortrait": "Portrait",
                    "dxDiagram-commandPageColor": "Page Color",
                    "dxDiagram-commandShowGrid": "Show Grid",
                    "dxDiagram-commandSnapToGrid": "Snap to Grid",
                    "dxDiagram-commandGridSize": "Grid Size",
                    "dxDiagram-commandZoomLevel": "Zoom Level",
                    "dxDiagram-commandAutoZoom": "Auto Zoom",
                    "dxDiagram-commandFitToContent": "Fit to Content",
                    "dxDiagram-commandFitToWidth": "Fit to Width",
                    "dxDiagram-commandAutoZoomByContent": "Auto Zoom by Content",
                    "dxDiagram-commandAutoZoomByWidth": "Auto Zoom by Width",
                    "dxDiagram-commandSimpleView": "Simple View",
                    "dxDiagram-commandCut": "Cut",
                    "dxDiagram-commandCopy": "Copy",
                    "dxDiagram-commandPaste": "Paste",
                    "dxDiagram-commandSelectAll": "Select All",
                    "dxDiagram-commandDelete": "Delete",
                    "dxDiagram-commandBringToFront": "Bring to Front",
                    "dxDiagram-commandSendToBack": "Send to Back",
                    "dxDiagram-commandLock": "Lock",
                    "dxDiagram-commandUnlock": "Unlock",
                    "dxDiagram-commandInsertShapeImage": "Insert Image...",
                    "dxDiagram-commandEditShapeImage": "Change Image...",
                    "dxDiagram-commandDeleteShapeImage": "Delete Image",
                    "dxDiagram-commandLayoutLeftToRight": "Left-to-right",
                    "dxDiagram-commandLayoutRightToLeft": "Right-to-left",
                    "dxDiagram-commandLayoutTopToBottom": "Top-to-bottom",
                    "dxDiagram-commandLayoutBottomToTop": "Bottom-to-top",
                    "dxDiagram-unitIn": "in",
                    "dxDiagram-unitCm": "cm",
                    "dxDiagram-unitPx": "px",
                    "dxDiagram-dialogButtonOK": "OK",
                    "dxDiagram-dialogButtonCancel": "Cancel",
                    "dxDiagram-dialogInsertShapeImageTitle": "Insert Image",
                    "dxDiagram-dialogEditShapeImageTitle": "Change Image",
                    "dxDiagram-dialogEditShapeImageSelectButton": "Select image",
                    "dxDiagram-dialogEditShapeImageLabelText": "or drop a file here",
                    "dxDiagram-uiExport": "Export",
                    "dxDiagram-uiProperties": "Properties",
                    "dxDiagram-uiSettings": "Settings",
                    "dxDiagram-uiShowToolbox": "Show Toolbox",
                    "dxDiagram-uiSearch": "Search",
                    "dxDiagram-uiStyle": "Style",
                    "dxDiagram-uiLayout": "Layout",
                    "dxDiagram-uiLayoutTree": "Tree",
                    "dxDiagram-uiLayoutLayered": "Layered",
                    "dxDiagram-uiDiagram": "Diagram",
                    "dxDiagram-uiText": "Text",
                    "dxDiagram-uiObject": "Object",
                    "dxDiagram-uiConnector": "Connector",
                    "dxDiagram-uiPage": "Page",
                    "dxDiagram-shapeText": "Text",
                    "dxDiagram-shapeRectangle": "Rectangle",
                    "dxDiagram-shapeEllipse": "Ellipse",
                    "dxDiagram-shapeCross": "Cross",
                    "dxDiagram-shapeTriangle": "Triangle",
                    "dxDiagram-shapeDiamond": "Diamond",
                    "dxDiagram-shapeHeart": "Heart",
                    "dxDiagram-shapePentagon": "Pentagon",
                    "dxDiagram-shapeHexagon": "Hexagon",
                    "dxDiagram-shapeOctagon": "Octagon",
                    "dxDiagram-shapeStar": "Star",
                    "dxDiagram-shapeArrowLeft": "Left Arrow",
                    "dxDiagram-shapeArrowUp": "Up Arrow",
                    "dxDiagram-shapeArrowRight": "Right Arrow",
                    "dxDiagram-shapeArrowDown": "Down Arrow",
                    "dxDiagram-shapeArrowUpDown": "Up Down Arrow",
                    "dxDiagram-shapeArrowLeftRight": "Left Right Arrow",
                    "dxDiagram-shapeProcess": "Process",
                    "dxDiagram-shapeDecision": "Decision",
                    "dxDiagram-shapeTerminator": "Terminator",
                    "dxDiagram-shapePredefinedProcess": "Predefined Process",
                    "dxDiagram-shapeDocument": "Document",
                    "dxDiagram-shapeMultipleDocuments": "Multiple Documents",
                    "dxDiagram-shapeManualInput": "Manual Input",
                    "dxDiagram-shapePreparation": "Preparation",
                    "dxDiagram-shapeData": "Data",
                    "dxDiagram-shapeDatabase": "Database",
                    "dxDiagram-shapeHardDisk": "Hard Disk",
                    "dxDiagram-shapeInternalStorage": "Internal Storage",
                    "dxDiagram-shapePaperTape": "Paper Tape",
                    "dxDiagram-shapeManualOperation": "Manual Operation",
                    "dxDiagram-shapeDelay": "Delay",
                    "dxDiagram-shapeStoredData": "Stored Data",
                    "dxDiagram-shapeDisplay": "Display",
                    "dxDiagram-shapeMerge": "Merge",
                    "dxDiagram-shapeConnector": "Connector",
                    "dxDiagram-shapeOr": "Or",
                    "dxDiagram-shapeSummingJunction": "Summing Junction",
                    "dxDiagram-shapeContainerDefaultText": "Container",
                    "dxDiagram-shapeVerticalContainer": "Vertical Container",
                    "dxDiagram-shapeHorizontalContainer": "Horizontal Container",
                    "dxDiagram-shapeCardDefaultText": "Person's Name",
                    "dxDiagram-shapeCardWithImageOnLeft": "Card with Image on the Left",
                    "dxDiagram-shapeCardWithImageOnTop": "Card with Image on the Top",
                    "dxDiagram-shapeCardWithImageOnRight": "Card with Image on the Right",
                    "dxGantt-dialogTitle": "Title",
                    "dxGantt-dialogStartTitle": "Start",
                    "dxGantt-dialogEndTitle": "End",
                    "dxGantt-dialogProgressTitle": "Progress",
                    "dxGantt-dialogResourcesTitle": "Resources",
                    "dxGantt-dialogResourceManagerTitle": "Resource Manager",
                    "dxGantt-dialogTaskDetailsTitle": "Task Details",
                    "dxGantt-dialogEditResourceListHint": "Edit Resource List",
                    "dxGantt-dialogEditNoResources": "No resources",
                    "dxGantt-dialogButtonAdd": "Add",
                    "dxGantt-contextMenuNewTask": "New Task",
                    "dxGantt-contextMenuNewSubtask": "New Subtask",
                    "dxGantt-contextMenuDeleteTask": "Delete Task",
                    "dxGantt-contextMenuDeleteDependency": "Delete Dependency",
                    "dxGantt-dialogTaskDeleteConfirmation": "Deleting a task also deletes all its dependencies and subtasks. Are you sure you want to delete this task?",
                    "dxGantt-dialogDependencyDeleteConfirmation": "Are you sure you want to delete the dependency from the task?",
                    "dxGantt-dialogResourcesDeleteConfirmation": "Deleting a resource also deletes it from tasks to which this resource is assigned. Are you sure you want to delete these resources? Resources: {0}",
                    "dxGantt-dialogConstraintCriticalViolationMessage": "The task you are attempting to move is linked to a second task by a dependency relation. This change would conflict with dependency rules. How would you like to proceed?",
                    "dxGantt-dialogConstraintViolationMessage": "The task you are attempting to move is linked to a second task by a dependency relation. How would you like to proceed?",
                    "dxGantt-dialogCancelOperationMessage": "Cancel the operation",
                    "dxGantt-dialogDeleteDependencyMessage": "Delete the dependency",
                    "dxGantt-dialogMoveTaskAndKeepDependencyMessage": "Move the task and keep the dependency",
                    "dxGantt-dialogConstraintCriticalViolationSeveralTasksMessage": "The task you are attempting to move is linked to another tasks by dependency relations. This change would conflict with dependency rules. How would you like to proceed?",
                    "dxGantt-dialogConstraintViolationSeveralTasksMessage": "The task you are attempting to move is linked to another tasks by dependency relations. How would you like to proceed?",
                    "dxGantt-dialogDeleteDependenciesMessage": "Delete the dependency relations",
                    "dxGantt-dialogMoveTaskAndKeepDependenciesMessage": "Move the task and keep the dependencies",
                    "dxGantt-undo": "Undo",
                    "dxGantt-redo": "Redo",
                    "dxGantt-expandAll": "Expand All",
                    "dxGantt-collapseAll": "Collapse All",
                    "dxGantt-addNewTask": "Add New Task",
                    "dxGantt-deleteSelectedTask": "Delete Selected Task",
                    "dxGantt-zoomIn": "Zoom In",
                    "dxGantt-zoomOut": "Zoom Out",
                    "dxGantt-fullScreen": "Full Screen",
                    "dxGantt-quarter": "Q{0}",
                    "dxGantt-sortingAscendingText": "Sort Ascending",
                    "dxGantt-sortingDescendingText": "Sort Descending",
                    "dxGantt-sortingClearText": "Clear Sorting",
                    "dxGantt-showResources": "Show Resources",
                    "dxGantt-showDependencies": "Show Dependencies",
                    "dxGantt-dialogStartDateValidation": "Start date must be after {0}",
                    "dxGantt-dialogEndDateValidation": "End date must be after {0}",
                    "dxGallery-itemName": "Gallery item",
                    "dxMultiView-elementAriaRoleDescription": "MultiView",
                    "dxMultiView-elementAriaLabel": "Use the arrow keys or swipe to navigate between views",
                    "dxMultiView-itemAriaRoleDescription": "View",
                    "dxMultiView-itemAriaLabel": "{0} of {1}",
                    "dxSplitter-resizeHandleAriaLabel": "Split bar"
                }
            };

            /**
             * DevExtreme (esm/localization/message.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var baseDictionary = extend(true, {}, defaultMessages);
            var getDataByLocale = (localeData, locale) => {
                var _Object$entries$find;
                return localeData[locale] || (null === locale || void 0 === locale ? void 0 : locale.toLowerCase) && (null === (_Object$entries$find = Object.entries(localeData).find(_ref => {
                    var [key] = _ref;
                    return key.toLowerCase() === locale.toLowerCase()
                })) || void 0 === _Object$entries$find ? void 0 : _Object$entries$find[1]) || {}
            };
            var newMessages = {};
            var messageLocalization = exports("C", dependencyInjector({
                engine: function() {
                    return "base"
                },
                _dictionary: baseDictionary,
                load: function(messages) {
                    extend(true, this._dictionary, messages);
                },
                _localizablePrefix: "@",
                setup: function(localizablePrefix) {
                    this._localizablePrefix = localizablePrefix;
                },
                localizeString: function(text) {
                    var that = this;
                    var regex = new RegExp("(^|[^a-zA-Z_0-9" + that._localizablePrefix + "-]+)(" + that._localizablePrefix + "{1,2})([a-zA-Z_0-9-]+)", "g");
                    var escapeString = that._localizablePrefix + that._localizablePrefix;
                    return text.replace(regex, (str, prefix, escape, localizationKey) => {
                        var defaultResult = that._localizablePrefix + localizationKey;
                        var result;
                        if (escape !== escapeString) {
                            result = that.format(localizationKey);
                        }
                        if (!result) {
                            newMessages[localizationKey] = humanize(localizationKey);
                        }
                        return prefix + (result || defaultResult)
                    })
                },
                getMessagesByLocales: function() {
                    return this._dictionary
                },
                getDictionary: function(onlyNew) {
                    if (onlyNew) {
                        return newMessages
                    }
                    return extend({}, newMessages, this.getMessagesByLocales()[localizationCoreUtils.locale()])
                },
                getFormatter: function(key) {
                    return this._getFormatterBase(key) || this._getFormatterBase(key, "en")
                },
                _getFormatterBase: function(key, locale) {
                    var message = localizationCoreUtils.getValueByClosestLocale(locale => getDataByLocale(this._dictionary, locale)[key]);
                    if (message) {
                        return function() {
                            var args = 1 === arguments.length && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);
                            args.unshift(message);
                            return format.apply(this, args)
                        }
                    }
                },
                format: function(key) {
                    var formatter = this.getFormatter(key);
                    var values = Array.prototype.slice.call(arguments, 1);
                    return formatter && formatter.apply(this, values) || ""
                }
            }));

            /**
             * DevExtreme (esm/ui/widget/ui.errors.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var errors = exports("a0", errorUtils(errors$2.ERROR_MESSAGES, {
                E1001: "Module '{0}'. Controller '{1}' is already registered",
                E1002: "Module '{0}'. Controller '{1}' does not inherit from DevExpress.ui.dxDataGrid.Controller",
                E1003: "Module '{0}'. View '{1}' is already registered",
                E1004: "Module '{0}'. View '{1}' does not inherit from DevExpress.ui.dxDataGrid.View",
                E1005: "Public method '{0}' is already registered",
                E1006: "Public method '{0}.{1}' does not exist",
                E1007: "State storing cannot be provided due to the restrictions of the browser",
                E1010: "The template does not contain the TextBox widget",
                E1011: 'Items cannot be deleted from the List. Implement the "remove" function in the data store',
                E1012: "Editing type '{0}' with the name '{1}' is unsupported",
                E1016: "Unexpected type of data source is provided for a lookup column",
                E1018: "The 'collapseAll' method cannot be called if you use a remote data source",
                E1019: "Search mode '{0}' is unavailable",
                E1020: "The type cannot be changed after initialization",
                E1021: "{0} '{1}' you are trying to remove does not exist",
                E1022: 'The "markers" option is given an invalid value. Assign an array instead',
                E1023: 'The "routes" option is given an invalid value. Assign an array instead',
                E1025: "This layout is too complex to render",
                E1026: 'The "calculateCustomSummary" function is missing from a field whose "summaryType" option is set to "custom"',
                E1031: "Unknown subscription in the Scheduler widget: '{0}'",
                E1032: "Unknown start date in an appointment: '{0}'",
                E1033: "Unknown step in the date navigator: '{0}'",
                E1034: "The browser does not implement an API for saving files",
                E1035: "The editor cannot be created: {0}",
                E1037: "Invalid structure of grouped data",
                E1038: "The browser does not support local storages for local web pages",
                E1039: "A cell's position cannot be calculated",
                E1040: "The '{0}' key value is not unique within the data array",
                E1041: "The '{0}' script is referenced after the DevExtreme scripts or not referenced at all",
                E1042: "{0} requires the key field to be specified",
                E1043: "Changes cannot be processed due to the incorrectly set key",
                E1044: "The key field specified by the keyExpr option does not match the key field specified in the data store",
                E1045: "Editing requires the key field to be specified in the data store",
                E1046: "The '{0}' key field is not found in data objects",
                E1047: 'The "{0}" field is not found in the fields array',
                E1048: 'The "{0}" operation is not found in the filterOperations array',
                E1049: "Column '{0}': filtering is allowed but the 'dataField' or 'name' option is not specified",
                E1050: "The validationRules option does not apply to third-party editors defined in the editCellTemplate",
                E1051: 'HtmlEditor\'s valueType is "{0}", but the {0} converter was not imported.',
                E1052: '{0} should have the "dataSource" option specified',
                E1053: 'The "buttons" option accepts an array that contains only objects or string values',
                E1054: "All text editor buttons must have names",
                E1055: 'One or several text editor buttons have invalid or non-unique "name" values',
                E1056: 'The {0} widget does not support buttons of the "{1}" type',
                E1058: 'The "startDayHour" and "endDayHour" options must be integers in the [0, 24] range, with "endDayHour" being greater than "startDayHour".',
                E1059: "The following column names are not unique: {0}",
                E1060: "All editable columns must have names",
                E1061: 'The "offset" option must be an integer in the [-1440, 1440] range, divisible by 5 without a remainder.',
                E1062: 'The "cellDuration" must be a positive integer, evenly dividing the ("endDayHour" - "startDayHour") interval into minutes.',
                W1001: 'The "key" option cannot be modified after initialization',
                W1002: "An item with the key '{0}' does not exist",
                W1003: "A group with the key '{0}' in which you are trying to select items does not exist",
                W1004: "The item '{0}' you are trying to select in the group '{1}' does not exist",
                W1005: "Due to column data types being unspecified, data has been loaded twice in order to apply initial filter settings. To resolve this issue, specify data types for all grid columns.",
                W1006: "The map service returned the following error: '{0}'",
                W1007: "No item with key {0} was found in the data source, but this key was used as the parent key for item {1}",
                W1008: "Cannot scroll to the '{0}' date because it does not exist on the current view",
                W1009: "Searching works only if data is specified using the dataSource option",
                W1010: "The capability to select all items works with source data of plain structure only",
                W1011: 'The "keyExpr" option is not applied when dataSource is not an array',
                W1012: "The '{0}' key field is not found in data objects",
                W1013: 'The "message" field in the dialog component was renamed to "messageHtml". Change your code correspondingly. In addition, if you used HTML code in the message, make sure that it is secure',
                W1014: "The Floating Action Button exceeds the recommended speed dial action count. If you need to display more speed dial actions, increase the maxSpeedDialActionCount option value in the global config.",
                W1016: "The '{0}' field in the HTML Editor toolbar item configuration was renamed to '{1}'. Please make a corresponding change in your code.",
                W1017: "The 'key' property is not specified for a lookup data source. Please specify it to prevent requests for the entire dataset when users filter data.",
                W1018: "Infinite scrolling may not work properly with multiple selection. To use these features together, set 'selection.deferred' to true or set 'selection.selectAllMode' to 'page'.",
                W1019: "Filter query string exceeds maximum length limit of {0} characters.",
                W1020: "hideEvent is ignored when the shading property is true",
                W1021: "The '{0}' is not rendered because none of the DOM elements match the value of the \"container\" property.",
                W1022: "{0} JSON parsing error: '{1}'",
                W1023: "Appointments require unique keys. Otherwise, the agenda view may not work correctly.",
                W1024: "The client-side export is enabled. Implement the 'onExporting' function.",
                W1025: "'scrolling.mode' is set to 'virtual' or 'infinite'. Specify the height of the component."
            }));

            /**
             * DevExtreme (esm/ui/themes_callback.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var themeReadyCallback = Callbacks();

            /**
             * DevExtreme (esm/ui/themes.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$3 = getWindow();
            var ready$2 = readyCallbacks$1.add;
            var viewPort = value;
            var viewPortChanged$1 = changeCallback;
            var initDeferred = new Deferred;
            var DX_LINK_SELECTOR = "link[rel=dx-theme]";
            var THEME_ATTR = "data-theme";
            var ACTIVE_ATTR = "data-active";
            var DX_HAIRLINES_CLASS = "dx-hairlines";
            var ANY_THEME = "any";
            var context;
            var $activeThemeLink;
            var knownThemes;
            var currentThemeName;
            var pendingThemeName;
            var defaultTimeout = 15e3;
            var THEME_MARKER_PREFIX = "dx.";

            function readThemeMarker() {
                if (!hasWindow()) {
                    return null
                }
                var element = $("<div>", context).addClass("dx-theme-marker").appendTo(context.documentElement);
                var result;
                try {
                    result = window$3.getComputedStyle(element.get(0)).fontFamily;
                    if (!result) {
                        return null
                    }
                    result = result.replace(/["']/g, "");
                    if (result.substr(0, THEME_MARKER_PREFIX.length) !== THEME_MARKER_PREFIX) {
                        return null
                    }
                    return result.substr(THEME_MARKER_PREFIX.length)
                } finally {
                    element.remove();
                }
            }
            function waitForThemeLoad(themeName) {
                var waitStartTime;
                var timerId;
                var intervalCleared = true;
                pendingThemeName = themeName;

                function handleLoaded() {
                    pendingThemeName = null;
                    clearInterval(timerId);
                    intervalCleared = true;
                    themeReadyCallback.fire();
                    themeReadyCallback.empty();
                    initDeferred.resolve();
                }
                if (isPendingThemeLoaded() || !defaultTimeout) {
                    handleLoaded();
                } else {
                    if (!intervalCleared) {
                        if (pendingThemeName) {
                            pendingThemeName = themeName;
                        }
                        return
                    }
                    waitStartTime = Date.now();
                    intervalCleared = false;
                    timerId = setInterval((function() {
                        var isLoaded = isPendingThemeLoaded();
                        var isTimeout = !isLoaded && Date.now() - waitStartTime > defaultTimeout;
                        if (isTimeout) {
                            errors.log("W0004", pendingThemeName);
                        }
                        if (isLoaded || isTimeout) {
                            handleLoaded();
                        }
                    }), 10);
                }
            }
            function isPendingThemeLoaded() {
                if (!pendingThemeName) {
                    return true
                }
                var anyThemePending = pendingThemeName === ANY_THEME;
                if ("resolved" === initDeferred.state() && anyThemePending) {
                    return true
                }
                var themeMarker = readThemeMarker();
                if (themeMarker && anyThemePending) {
                    return true
                }
                return themeMarker === pendingThemeName
            }

            function processMarkup() {
                var $allThemeLinks = $(DX_LINK_SELECTOR, context);
                if (!$allThemeLinks.length) {
                    return
                }
                knownThemes = {};
                $activeThemeLink = $(parseHTML("<link rel=stylesheet>"), context);
                $allThemeLinks.each((function() {
                    var link = $(this, context);
                    var fullThemeName = link.attr(THEME_ATTR);
                    var url = link.attr("href");
                    var isActive = "true" === link.attr(ACTIVE_ATTR);
                    knownThemes[fullThemeName] = {
                        url: url,
                        isActive: isActive
                    };
                }));
                $allThemeLinks.last().after($activeThemeLink);
                $allThemeLinks.remove();
            }

            function resolveFullThemeName(desiredThemeName) {
                var desiredThemeParts = desiredThemeName ? desiredThemeName.split(".") : [];
                var result = null;
                if (knownThemes) {
                    if (desiredThemeName in knownThemes) {
                        return desiredThemeName
                    }
                    each(knownThemes, (function(knownThemeName, themeData) {
                        var knownThemeParts = knownThemeName.split(".");
                        if (desiredThemeParts[0] && knownThemeParts[0] !== desiredThemeParts[0]) {
                            return
                        }
                        if (desiredThemeParts[1] && desiredThemeParts[1] !== knownThemeParts[1]) {
                            return
                        }
                        if (desiredThemeParts[2] && desiredThemeParts[2] !== knownThemeParts[2]) {
                            return
                        }
                        if (!result || themeData.isActive) {
                            result = knownThemeName;
                        }
                        if (themeData.isActive) {
                            return false
                        }
                    }));
                }
                return result
            }

            function initContext(newContext) {
                try {
                    if (newContext !== context) {
                        knownThemes = null;
                    }
                } catch (x) {
                    knownThemes = null;
                }
                context = newContext;
            }
            function init(options) {
                options = options || {};
                initContext(options.context || domAdapter.getDocument());
                if (!context) {
                    return
                }
                processMarkup();
                currentThemeName = void 0;
                current(options);
            }
            function current(options) {
                if (!arguments.length) {
                    currentThemeName = currentThemeName || readThemeMarker();
                    return currentThemeName
                }
                detachCssClasses(viewPort());
                options = options || {};
                if ("string" === typeof options) {
                    options = {
                        theme: options
                    };
                }
                var isAutoInit = options._autoInit;
                var loadCallback = options.loadCallback;
                var currentThemeData;
                currentThemeName = resolveFullThemeName(options.theme || currentThemeName);
                if (currentThemeName) {
                    currentThemeData = knownThemes[currentThemeName];
                }
                if (loadCallback) {
                    themeReadyCallback.add(loadCallback);
                }
                if (currentThemeData) {
                    $activeThemeLink.attr("href", knownThemes[currentThemeName].url);
                    if (themeReadyCallback.has() || "resolved" !== initDeferred.state() || options._forceTimeout) {
                        waitForThemeLoad(currentThemeName);
                    }
                } else if (isAutoInit) {
                    if (hasWindow()) {
                        waitForThemeLoad(ANY_THEME);
                    }
                    themeReadyCallback.fire();
                    themeReadyCallback.empty();
                } else {
                    throw errors.Error("E0021", currentThemeName)
                }
                initDeferred.done(() => attachCssClasses(originalViewPort(), currentThemeName));
            }

            function getCssClasses(themeName) {
                themeName = themeName || current();
                var result = [];
                var themeNameParts = themeName && themeName.split(".");
                if (themeNameParts) {
                    result.push("dx-theme-" + themeNameParts[0], "dx-theme-" + themeNameParts[0] + "-typography");
                    if (themeNameParts.length > 1) {
                        result.push("dx-color-scheme-" + themeNameParts[1] + (isMaterialBased(themeName) ? "-" + themeNameParts[2] : ""));
                    }
                }
                return result
            }
            var themeClasses;
            function attachCssClasses(element, themeName) {
                themeClasses = getCssClasses(themeName).join(" ");
                $(element).addClass(themeClasses);
                ! function() {
                    var pixelRatio = hasWindow() && window$3.devicePixelRatio;
                    if (!pixelRatio || pixelRatio < 2) {
                        return
                    }
                    var $tester = $("<div>");
                    $tester.css("border", ".5px solid transparent");
                    $("body").append($tester);
                    if (1 === getOuterHeight($tester)) {
                        $(element).addClass(DX_HAIRLINES_CLASS);
                        themeClasses += " " + DX_HAIRLINES_CLASS;
                    }
                    $tester.remove();
                }();
            }
            function detachCssClasses(element) {
                $(element).removeClass(themeClasses);
            }

            function isTheme(themeRegExp, themeName) {
                if (!themeName) {
                    themeName = currentThemeName || readThemeMarker();
                }
                return new RegExp(themeRegExp).test(themeName)
            }
            function isMaterialBased(themeName) {
                return isMaterial(themeName) || isFluent(themeName)
            }
            function isMaterial(themeName) {
                return isTheme("material", themeName)
            }
            function isFluent(themeName) {
                return isTheme("fluent", themeName)
            }
            function isGeneric(themeName) {
                return isTheme("generic", themeName)
            }
            function isCompact(themeName) {
                return isTheme("compact", themeName)
            }
            function isWebFontLoaded(text, fontWeight) {
                var document = domAdapter.getDocument();
                var testElement = document.createElement("span");
                testElement.style.position = "absolute";
                testElement.style.top = "-9999px";
                testElement.style.left = "-9999px";
                testElement.style.visibility = "hidden";
                testElement.style.fontFamily = "Arial";
                testElement.style.fontSize = "250px";
                testElement.style.fontWeight = fontWeight;
                testElement.innerHTML = text;
                document.body.appendChild(testElement);
                var etalonFontWidth = testElement.offsetWidth;
                testElement.style.fontFamily = "Roboto, RobotoFallback, Arial";
                var testedFontWidth = testElement.offsetWidth;
                testElement.parentNode.removeChild(testElement);
                return etalonFontWidth !== testedFontWidth
            }
            function waitWebFont(text, fontWeight) {
                return new Promise(resolve => {
                    var clear = () => {
                        clearInterval(intervalId);
                        clearTimeout(timeoutId);
                        resolve();
                    };
                    var intervalId = setInterval(() => {
                        if (isWebFontLoaded(text, fontWeight)) {
                            clear();
                        }
                    }, 15);
                    var timeoutId = setTimeout(clear, 2e3);
                })
            }

            function autoInit() {
                init({
                    _autoInit: true,
                    _forceTimeout: true
                });
                if ($(DX_LINK_SELECTOR, context).length) {
                    throw errors.Error("E0022")
                }
            }
            if (hasWindow()) {
                autoInit();
            } else {
                ready$2(autoInit);
            }
            viewPortChanged$1.add((function(viewPort, prevViewPort) {
                initDeferred.done((function() {
                    detachCssClasses(prevViewPort);
                    attachCssClasses(viewPort);
                }));
            }));
            devices.changed.add((function() {
                init({
                    _autoInit: true
                });
            }));

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAdapterComponent extends NestedOption {
                get applyValidationResults() {
                    return this._getOption('applyValidationResults');
                }
                set applyValidationResults(value) {
                    this._setOption('applyValidationResults', value);
                }
                get bypass() {
                    return this._getOption('bypass');
                }
                set bypass(value) {
                    this._setOption('bypass', value);
                }
                get focus() {
                    return this._getOption('focus');
                }
                set focus(value) {
                    this._setOption('focus', value);
                }
                get getValue() {
                    return this._getOption('getValue');
                }
                set getValue(value) {
                    this._setOption('getValue', value);
                }
                get reset() {
                    return this._getOption('reset');
                }
                set reset(value) {
                    this._setOption('reset', value);
                }
                get validationRequestsCallbacks() {
                    return this._getOption('validationRequestsCallbacks');
                }
                set validationRequestsCallbacks(value) {
                    this._setOption('validationRequestsCallbacks', value);
                }
                get _optionPath() {
                    return 'adapter';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAdapterComponent, selector: "dxo-adapter", inputs: { applyValidationResults: "applyValidationResults", bypass: "bypass", focus: "focus", getValue: "getValue", reset: "reset", validationRequestsCallbacks: "validationRequestsCallbacks" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-adapter', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { applyValidationResults: [{
                            type: Input
                        }], bypass: [{
                            type: Input
                        }], focus: [{
                            type: Input
                        }], getValue: [{
                            type: Input
                        }], reset: [{
                            type: Input
                        }], validationRequestsCallbacks: [{
                            type: Input
                        }] } });
            class DxoAdapterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterModule, declarations: [DxoAdapterComponent], exports: [DxoAdapterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterModule });
            } exports("hb", DxoAdapterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdapterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAdapterComponent
                                ],
                                exports: [
                                    DxoAdapterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAdaptiveLayoutComponent extends NestedOption {
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get keepLabels() {
                    return this._getOption('keepLabels');
                }
                set keepLabels(value) {
                    this._setOption('keepLabels', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'adaptiveLayout';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAdaptiveLayoutComponent, selector: "dxo-adaptive-layout", inputs: { height: "height", keepLabels: "keepLabels", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-adaptive-layout', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { height: [{
                            type: Input
                        }], keepLabels: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoAdaptiveLayoutModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutModule, declarations: [DxoAdaptiveLayoutComponent], exports: [DxoAdaptiveLayoutComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutModule });
            } exports("cX", DxoAdaptiveLayoutModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAdaptiveLayoutModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAdaptiveLayoutComponent
                                ],
                                exports: [
                                    DxoAdaptiveLayoutComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAggregationIntervalComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'aggregationInterval';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAggregationIntervalComponent, selector: "dxo-aggregation-interval", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-aggregation-interval', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoAggregationIntervalModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalModule, declarations: [DxoAggregationIntervalComponent], exports: [DxoAggregationIntervalComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalModule });
            } exports("c$", DxoAggregationIntervalModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationIntervalModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAggregationIntervalComponent
                                ],
                                exports: [
                                    DxoAggregationIntervalComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAggregationComponent extends NestedOption {
                get calculate() {
                    return this._getOption('calculate');
                }
                set calculate(value) {
                    this._setOption('calculate', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get method() {
                    return this._getOption('method');
                }
                set method(value) {
                    this._setOption('method', value);
                }
                get _optionPath() {
                    return 'aggregation';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAggregationComponent, selector: "dxo-aggregation", inputs: { calculate: "calculate", enabled: "enabled", method: "method" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-aggregation', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { calculate: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], method: [{
                            type: Input
                        }] } });
            class DxoAggregationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationModule, declarations: [DxoAggregationComponent], exports: [DxoAggregationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationModule });
            } exports("di", DxoAggregationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAggregationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAggregationComponent
                                ],
                                exports: [
                                    DxoAggregationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAnimationConfig extends NestedOption {
                get hide() {
                    return this._getOption('hide');
                }
                set hide(value) {
                    this._setOption('hide', value);
                }
                get show() {
                    return this._getOption('show');
                }
                set show(value) {
                    this._setOption('show', value);
                }
                get duration() {
                    return this._getOption('duration');
                }
                set duration(value) {
                    this._setOption('duration', value);
                }
                get easing() {
                    return this._getOption('easing');
                }
                set easing(value) {
                    this._setOption('easing', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get maxPointCountSupported() {
                    return this._getOption('maxPointCountSupported');
                }
                set maxPointCountSupported(value) {
                    this._setOption('maxPointCountSupported', value);
                }
                get complete() {
                    return this._getOption('complete');
                }
                set complete(value) {
                    this._setOption('complete', value);
                }
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get direction() {
                    return this._getOption('direction');
                }
                set direction(value) {
                    this._setOption('direction', value);
                }
                get from() {
                    return this._getOption('from');
                }
                set from(value) {
                    this._setOption('from', value);
                }
                get staggerDelay() {
                    return this._getOption('staggerDelay');
                }
                set staggerDelay(value) {
                    this._setOption('staggerDelay', value);
                }
                get start() {
                    return this._getOption('start');
                }
                set start(value) {
                    this._setOption('start', value);
                }
                get to() {
                    return this._getOption('to');
                }
                set to(value) {
                    this._setOption('to', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAnimationConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationConfig, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoAnimationComponent extends DxoAnimationConfig {
                get _optionPath() {
                    return 'animation';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAnimationComponent, selector: "dxo-animation", inputs: { hide: "hide", show: "show", duration: "duration", easing: "easing", enabled: "enabled", maxPointCountSupported: "maxPointCountSupported", complete: "complete", delay: "delay", direction: "direction", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-animation', template: '', providers: [NestedOptionHost], inputs: [
                                    'hide',
                                    'show',
                                    'duration',
                                    'easing',
                                    'enabled',
                                    'maxPointCountSupported',
                                    'complete',
                                    'delay',
                                    'direction',
                                    'from',
                                    'staggerDelay',
                                    'start',
                                    'to',
                                    'type'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoAnimationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationModule, declarations: [DxoAnimationComponent], exports: [DxoAnimationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationModule });
            } exports("bW", DxoAnimationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAnimationComponent
                                ],
                                exports: [
                                    DxoAnimationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiChartAnnotationConfig extends CollectionNestedOption {
                get allowDragging() {
                    return this._getOption('allowDragging');
                }
                set allowDragging(value) {
                    this._setOption('allowDragging', value);
                }
                get argument() {
                    return this._getOption('argument');
                }
                set argument(value) {
                    this._setOption('argument', value);
                }
                get arrowLength() {
                    return this._getOption('arrowLength');
                }
                set arrowLength(value) {
                    this._setOption('arrowLength', value);
                }
                get arrowWidth() {
                    return this._getOption('arrowWidth');
                }
                set arrowWidth(value) {
                    this._setOption('arrowWidth', value);
                }
                get axis() {
                    return this._getOption('axis');
                }
                set axis(value) {
                    this._setOption('axis', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get customizeTooltip() {
                    return this._getOption('customizeTooltip');
                }
                set customizeTooltip(value) {
                    this._setOption('customizeTooltip', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get description() {
                    return this._getOption('description');
                }
                set description(value) {
                    this._setOption('description', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get image() {
                    return this._getOption('image');
                }
                set image(value) {
                    this._setOption('image', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get offsetX() {
                    return this._getOption('offsetX');
                }
                set offsetX(value) {
                    this._setOption('offsetX', value);
                }
                get offsetY() {
                    return this._getOption('offsetY');
                }
                set offsetY(value) {
                    this._setOption('offsetY', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get series() {
                    return this._getOption('series');
                }
                set series(value) {
                    this._setOption('series', value);
                }
                get shadow() {
                    return this._getOption('shadow');
                }
                set shadow(value) {
                    this._setOption('shadow', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get tooltipEnabled() {
                    return this._getOption('tooltipEnabled');
                }
                set tooltipEnabled(value) {
                    this._setOption('tooltipEnabled', value);
                }
                get tooltipTemplate() {
                    return this._getOption('tooltipTemplate');
                }
                set tooltipTemplate(value) {
                    this._setOption('tooltipTemplate', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get angle() {
                    return this._getOption('angle');
                }
                set angle(value) {
                    this._setOption('angle', value);
                }
                get radius() {
                    return this._getOption('radius');
                }
                set radius(value) {
                    this._setOption('radius', value);
                }
                get coordinates() {
                    return this._getOption('coordinates');
                }
                set coordinates(value) {
                    this._setOption('coordinates', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChartAnnotationConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiChartAnnotationConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChartAnnotationConfig, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiAnnotationComponent extends DxiChartAnnotationConfig {
                get _optionPath() {
                    return 'annotations';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiAnnotationComponent, selector: "dxi-annotation", inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", name: "name", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y", location: "location", angle: "angle", radius: "radius", coordinates: "coordinates" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cT", DxiAnnotationComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-annotation', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowDragging',
                                    'argument',
                                    'arrowLength',
                                    'arrowWidth',
                                    'axis',
                                    'border',
                                    'color',
                                    'customizeTooltip',
                                    'data',
                                    'description',
                                    'font',
                                    'height',
                                    'image',
                                    'name',
                                    'offsetX',
                                    'offsetY',
                                    'opacity',
                                    'paddingLeftRight',
                                    'paddingTopBottom',
                                    'series',
                                    'shadow',
                                    'template',
                                    'text',
                                    'textOverflow',
                                    'tooltipEnabled',
                                    'tooltipTemplate',
                                    'type',
                                    'value',
                                    'width',
                                    'wordWrap',
                                    'x',
                                    'y',
                                    'location',
                                    'angle',
                                    'radius',
                                    'coordinates'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiAnnotationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationModule, declarations: [DxiAnnotationComponent], exports: [DxiAnnotationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationModule });
            } exports("cY", DxiAnnotationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiAnnotationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiAnnotationComponent
                                ],
                                exports: [
                                    DxiAnnotationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoApiKeyComponent extends NestedOption {
                get bing() {
                    return this._getOption('bing');
                }
                set bing(value) {
                    this._setOption('bing', value);
                }
                get google() {
                    return this._getOption('google');
                }
                set google(value) {
                    this._setOption('google', value);
                }
                get googleStatic() {
                    return this._getOption('googleStatic');
                }
                set googleStatic(value) {
                    this._setOption('googleStatic', value);
                }
                get _optionPath() {
                    return 'apiKey';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoApiKeyComponent, selector: "dxo-api-key", inputs: { bing: "bing", google: "google", googleStatic: "googleStatic" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-api-key', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { bing: [{
                            type: Input
                        }], google: [{
                            type: Input
                        }], googleStatic: [{
                            type: Input
                        }] } });
            class DxoApiKeyModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyModule, declarations: [DxoApiKeyComponent], exports: [DxoApiKeyComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyModule });
            } exports("fZ", DxoApiKeyModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoApiKeyModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoApiKeyComponent
                                ],
                                exports: [
                                    DxoApiKeyComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAppointmentDraggingComponent extends NestedOption {
                get autoScroll() {
                    return this._getOption('autoScroll');
                }
                set autoScroll(value) {
                    this._setOption('autoScroll', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get group() {
                    return this._getOption('group');
                }
                set group(value) {
                    this._setOption('group', value);
                }
                get onAdd() {
                    return this._getOption('onAdd');
                }
                set onAdd(value) {
                    this._setOption('onAdd', value);
                }
                get onDragEnd() {
                    return this._getOption('onDragEnd');
                }
                set onDragEnd(value) {
                    this._setOption('onDragEnd', value);
                }
                get onDragMove() {
                    return this._getOption('onDragMove');
                }
                set onDragMove(value) {
                    this._setOption('onDragMove', value);
                }
                get onDragStart() {
                    return this._getOption('onDragStart');
                }
                set onDragStart(value) {
                    this._setOption('onDragStart', value);
                }
                get onRemove() {
                    return this._getOption('onRemove');
                }
                set onRemove(value) {
                    this._setOption('onRemove', value);
                }
                get scrollSensitivity() {
                    return this._getOption('scrollSensitivity');
                }
                set scrollSensitivity(value) {
                    this._setOption('scrollSensitivity', value);
                }
                get scrollSpeed() {
                    return this._getOption('scrollSpeed');
                }
                set scrollSpeed(value) {
                    this._setOption('scrollSpeed', value);
                }
                get _optionPath() {
                    return 'appointmentDragging';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAppointmentDraggingComponent, selector: "dxo-appointment-dragging", inputs: { autoScroll: "autoScroll", data: "data", group: "group", onAdd: "onAdd", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onRemove: "onRemove", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-appointment-dragging', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { autoScroll: [{
                            type: Input
                        }], data: [{
                            type: Input
                        }], group: [{
                            type: Input
                        }], onAdd: [{
                            type: Input
                        }], onDragEnd: [{
                            type: Input
                        }], onDragMove: [{
                            type: Input
                        }], onDragStart: [{
                            type: Input
                        }], onRemove: [{
                            type: Input
                        }], scrollSensitivity: [{
                            type: Input
                        }], scrollSpeed: [{
                            type: Input
                        }] } });
            class DxoAppointmentDraggingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingModule, declarations: [DxoAppointmentDraggingComponent], exports: [DxoAppointmentDraggingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingModule });
            } exports("gO", DxoAppointmentDraggingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAppointmentDraggingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAppointmentDraggingComponent
                                ],
                                exports: [
                                    DxoAppointmentDraggingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoChartCommonSeriesSettings extends NestedOption {
                get aggregation() {
                    return this._getOption('aggregation');
                }
                set aggregation(value) {
                    this._setOption('aggregation', value);
                }
                get area() {
                    return this._getOption('area');
                }
                set area(value) {
                    this._setOption('area', value);
                }
                get argumentField() {
                    return this._getOption('argumentField');
                }
                set argumentField(value) {
                    this._setOption('argumentField', value);
                }
                get axis() {
                    return this._getOption('axis');
                }
                set axis(value) {
                    this._setOption('axis', value);
                }
                get bar() {
                    return this._getOption('bar');
                }
                set bar(value) {
                    this._setOption('bar', value);
                }
                get barOverlapGroup() {
                    return this._getOption('barOverlapGroup');
                }
                set barOverlapGroup(value) {
                    this._setOption('barOverlapGroup', value);
                }
                get barPadding() {
                    return this._getOption('barPadding');
                }
                set barPadding(value) {
                    this._setOption('barPadding', value);
                }
                get barWidth() {
                    return this._getOption('barWidth');
                }
                set barWidth(value) {
                    this._setOption('barWidth', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get bubble() {
                    return this._getOption('bubble');
                }
                set bubble(value) {
                    this._setOption('bubble', value);
                }
                get candlestick() {
                    return this._getOption('candlestick');
                }
                set candlestick(value) {
                    this._setOption('candlestick', value);
                }
                get closeValueField() {
                    return this._getOption('closeValueField');
                }
                set closeValueField(value) {
                    this._setOption('closeValueField', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get cornerRadius() {
                    return this._getOption('cornerRadius');
                }
                set cornerRadius(value) {
                    this._setOption('cornerRadius', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get fullstackedarea() {
                    return this._getOption('fullstackedarea');
                }
                set fullstackedarea(value) {
                    this._setOption('fullstackedarea', value);
                }
                get fullstackedbar() {
                    return this._getOption('fullstackedbar');
                }
                set fullstackedbar(value) {
                    this._setOption('fullstackedbar', value);
                }
                get fullstackedline() {
                    return this._getOption('fullstackedline');
                }
                set fullstackedline(value) {
                    this._setOption('fullstackedline', value);
                }
                get fullstackedspline() {
                    return this._getOption('fullstackedspline');
                }
                set fullstackedspline(value) {
                    this._setOption('fullstackedspline', value);
                }
                get fullstackedsplinearea() {
                    return this._getOption('fullstackedsplinearea');
                }
                set fullstackedsplinearea(value) {
                    this._setOption('fullstackedsplinearea', value);
                }
                get highValueField() {
                    return this._getOption('highValueField');
                }
                set highValueField(value) {
                    this._setOption('highValueField', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get ignoreEmptyPoints() {
                    return this._getOption('ignoreEmptyPoints');
                }
                set ignoreEmptyPoints(value) {
                    this._setOption('ignoreEmptyPoints', value);
                }
                get innerColor() {
                    return this._getOption('innerColor');
                }
                set innerColor(value) {
                    this._setOption('innerColor', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get line() {
                    return this._getOption('line');
                }
                set line(value) {
                    this._setOption('line', value);
                }
                get lowValueField() {
                    return this._getOption('lowValueField');
                }
                set lowValueField(value) {
                    this._setOption('lowValueField', value);
                }
                get maxLabelCount() {
                    return this._getOption('maxLabelCount');
                }
                set maxLabelCount(value) {
                    this._setOption('maxLabelCount', value);
                }
                get minBarSize() {
                    return this._getOption('minBarSize');
                }
                set minBarSize(value) {
                    this._setOption('minBarSize', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get openValueField() {
                    return this._getOption('openValueField');
                }
                set openValueField(value) {
                    this._setOption('openValueField', value);
                }
                get pane() {
                    return this._getOption('pane');
                }
                set pane(value) {
                    this._setOption('pane', value);
                }
                get point() {
                    return this._getOption('point');
                }
                set point(value) {
                    this._setOption('point', value);
                }
                get rangearea() {
                    return this._getOption('rangearea');
                }
                set rangearea(value) {
                    this._setOption('rangearea', value);
                }
                get rangebar() {
                    return this._getOption('rangebar');
                }
                set rangebar(value) {
                    this._setOption('rangebar', value);
                }
                get rangeValue1Field() {
                    return this._getOption('rangeValue1Field');
                }
                set rangeValue1Field(value) {
                    this._setOption('rangeValue1Field', value);
                }
                get rangeValue2Field() {
                    return this._getOption('rangeValue2Field');
                }
                set rangeValue2Field(value) {
                    this._setOption('rangeValue2Field', value);
                }
                get reduction() {
                    return this._getOption('reduction');
                }
                set reduction(value) {
                    this._setOption('reduction', value);
                }
                get scatter() {
                    return this._getOption('scatter');
                }
                set scatter(value) {
                    this._setOption('scatter', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get showInLegend() {
                    return this._getOption('showInLegend');
                }
                set showInLegend(value) {
                    this._setOption('showInLegend', value);
                }
                get sizeField() {
                    return this._getOption('sizeField');
                }
                set sizeField(value) {
                    this._setOption('sizeField', value);
                }
                get spline() {
                    return this._getOption('spline');
                }
                set spline(value) {
                    this._setOption('spline', value);
                }
                get splinearea() {
                    return this._getOption('splinearea');
                }
                set splinearea(value) {
                    this._setOption('splinearea', value);
                }
                get stack() {
                    return this._getOption('stack');
                }
                set stack(value) {
                    this._setOption('stack', value);
                }
                get stackedarea() {
                    return this._getOption('stackedarea');
                }
                set stackedarea(value) {
                    this._setOption('stackedarea', value);
                }
                get stackedbar() {
                    return this._getOption('stackedbar');
                }
                set stackedbar(value) {
                    this._setOption('stackedbar', value);
                }
                get stackedline() {
                    return this._getOption('stackedline');
                }
                set stackedline(value) {
                    this._setOption('stackedline', value);
                }
                get stackedspline() {
                    return this._getOption('stackedspline');
                }
                set stackedspline(value) {
                    this._setOption('stackedspline', value);
                }
                get stackedsplinearea() {
                    return this._getOption('stackedsplinearea');
                }
                set stackedsplinearea(value) {
                    this._setOption('stackedsplinearea', value);
                }
                get steparea() {
                    return this._getOption('steparea');
                }
                set steparea(value) {
                    this._setOption('steparea', value);
                }
                get stepline() {
                    return this._getOption('stepline');
                }
                set stepline(value) {
                    this._setOption('stepline', value);
                }
                get stock() {
                    return this._getOption('stock');
                }
                set stock(value) {
                    this._setOption('stock', value);
                }
                get tagField() {
                    return this._getOption('tagField');
                }
                set tagField(value) {
                    this._setOption('tagField', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueErrorBar() {
                    return this._getOption('valueErrorBar');
                }
                set valueErrorBar(value) {
                    this._setOption('valueErrorBar', value);
                }
                get valueField() {
                    return this._getOption('valueField');
                }
                set valueField(value) {
                    this._setOption('valueField', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get argumentType() {
                    return this._getOption('argumentType');
                }
                set argumentType(value) {
                    this._setOption('argumentType', value);
                }
                get minSegmentSize() {
                    return this._getOption('minSegmentSize');
                }
                set minSegmentSize(value) {
                    this._setOption('minSegmentSize', value);
                }
                get smallValuesGrouping() {
                    return this._getOption('smallValuesGrouping');
                }
                set smallValuesGrouping(value) {
                    this._setOption('smallValuesGrouping', value);
                }
                get closed() {
                    return this._getOption('closed');
                }
                set closed(value) {
                    this._setOption('closed', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartCommonSeriesSettings, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoChartCommonSeriesSettings, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartCommonSeriesSettings, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoAreaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'area';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAreaComponent, selector: "dxo-area", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-area', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoAreaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaModule, declarations: [DxoAreaComponent], exports: [DxoAreaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaModule });
            } exports("dj", DxoAreaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAreaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAreaComponent
                                ],
                                exports: [
                                    DxoAreaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiVizScaleBreak extends CollectionNestedOption {
                get endValue() {
                    return this._getOption('endValue');
                }
                set endValue(value) {
                    this._setOption('endValue', value);
                }
                get startValue() {
                    return this._getOption('startValue');
                }
                set startValue(value) {
                    this._setOption('startValue', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiVizScaleBreak, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiVizScaleBreak, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiVizScaleBreak, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiBreakComponent extends DxiVizScaleBreak {
                get _optionPath() {
                    return 'breaks';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiBreakComponent, selector: "dxi-break", inputs: { endValue: "endValue", startValue: "startValue" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-break', template: '', providers: [NestedOptionHost], inputs: [
                                    'endValue',
                                    'startValue'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiBreakModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakModule, declarations: [DxiBreakComponent], exports: [DxiBreakComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakModule });
            } exports("d0", DxiBreakModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiBreakModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiBreakComponent
                                ],
                                exports: [
                                    DxiBreakComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiConstantLineComponent extends CollectionNestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get displayBehindSeries() {
                    return this._getOption('displayBehindSeries');
                }
                set displayBehindSeries(value) {
                    this._setOption('displayBehindSeries', value);
                }
                get extendAxis() {
                    return this._getOption('extendAxis');
                }
                set extendAxis(value) {
                    this._setOption('extendAxis', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'constantLines';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiConstantLineComponent, selector: "dxi-constant-line", inputs: { color: "color", dashStyle: "dashStyle", displayBehindSeries: "displayBehindSeries", extendAxis: "extendAxis", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", value: "value", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-constant-line', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], displayBehindSeries: [{
                            type: Input
                        }], extendAxis: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], value: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxiConstantLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineModule, declarations: [DxiConstantLineComponent], exports: [DxiConstantLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineModule });
            } exports("d2", DxiConstantLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConstantLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiConstantLineComponent
                                ],
                                exports: [
                                    DxiConstantLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiStripComponent extends CollectionNestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get endValue() {
                    return this._getOption('endValue');
                }
                set endValue(value) {
                    this._setOption('endValue', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get startValue() {
                    return this._getOption('startValue');
                }
                set startValue(value) {
                    this._setOption('startValue', value);
                }
                get _optionPath() {
                    return 'strips';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiStripComponent, selector: "dxi-strip", inputs: { color: "color", endValue: "endValue", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", startValue: "startValue" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-strip', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], endValue: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], startValue: [{
                            type: Input
                        }] } });
            class DxiStripModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiStripModule, declarations: [DxiStripComponent], exports: [DxiStripComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripModule });
            } exports("d9", DxiStripModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiStripComponent
                                ],
                                exports: [
                                    DxiStripComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoArgumentAxisComponent extends NestedOption {
                get aggregateByCategory() {
                    return this._getOption('aggregateByCategory');
                }
                set aggregateByCategory(value) {
                    this._setOption('aggregateByCategory', value);
                }
                get aggregatedPointsPosition() {
                    return this._getOption('aggregatedPointsPosition');
                }
                set aggregatedPointsPosition(value) {
                    this._setOption('aggregatedPointsPosition', value);
                }
                get aggregationGroupWidth() {
                    return this._getOption('aggregationGroupWidth');
                }
                set aggregationGroupWidth(value) {
                    this._setOption('aggregationGroupWidth', value);
                }
                get aggregationInterval() {
                    return this._getOption('aggregationInterval');
                }
                set aggregationInterval(value) {
                    this._setOption('aggregationInterval', value);
                }
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get argumentType() {
                    return this._getOption('argumentType');
                }
                set argumentType(value) {
                    this._setOption('argumentType', value);
                }
                get axisDivisionFactor() {
                    return this._getOption('axisDivisionFactor');
                }
                set axisDivisionFactor(value) {
                    this._setOption('axisDivisionFactor', value);
                }
                get breaks() {
                    return this._getOption('breaks');
                }
                set breaks(value) {
                    this._setOption('breaks', value);
                }
                get breakStyle() {
                    return this._getOption('breakStyle');
                }
                set breakStyle(value) {
                    this._setOption('breakStyle', value);
                }
                get categories() {
                    return this._getOption('categories');
                }
                set categories(value) {
                    this._setOption('categories', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get constantLines() {
                    return this._getOption('constantLines');
                }
                set constantLines(value) {
                    this._setOption('constantLines', value);
                }
                get constantLineStyle() {
                    return this._getOption('constantLineStyle');
                }
                set constantLineStyle(value) {
                    this._setOption('constantLineStyle', value);
                }
                get customPosition() {
                    return this._getOption('customPosition');
                }
                set customPosition(value) {
                    this._setOption('customPosition', value);
                }
                get customPositionAxis() {
                    return this._getOption('customPositionAxis');
                }
                set customPositionAxis(value) {
                    this._setOption('customPositionAxis', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get grid() {
                    return this._getOption('grid');
                }
                set grid(value) {
                    this._setOption('grid', value);
                }
                get holidays() {
                    return this._getOption('holidays');
                }
                set holidays(value) {
                    this._setOption('holidays', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get inverted() {
                    return this._getOption('inverted');
                }
                set inverted(value) {
                    this._setOption('inverted', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get linearThreshold() {
                    return this._getOption('linearThreshold');
                }
                set linearThreshold(value) {
                    this._setOption('linearThreshold', value);
                }
                get logarithmBase() {
                    return this._getOption('logarithmBase');
                }
                set logarithmBase(value) {
                    this._setOption('logarithmBase', value);
                }
                get maxValueMargin() {
                    return this._getOption('maxValueMargin');
                }
                set maxValueMargin(value) {
                    this._setOption('maxValueMargin', value);
                }
                get minorGrid() {
                    return this._getOption('minorGrid');
                }
                set minorGrid(value) {
                    this._setOption('minorGrid', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minorTickCount() {
                    return this._getOption('minorTickCount');
                }
                set minorTickCount(value) {
                    this._setOption('minorTickCount', value);
                }
                get minorTickInterval() {
                    return this._getOption('minorTickInterval');
                }
                set minorTickInterval(value) {
                    this._setOption('minorTickInterval', value);
                }
                get minValueMargin() {
                    return this._getOption('minValueMargin');
                }
                set minValueMargin(value) {
                    this._setOption('minValueMargin', value);
                }
                get minVisualRangeLength() {
                    return this._getOption('minVisualRangeLength');
                }
                set minVisualRangeLength(value) {
                    this._setOption('minVisualRangeLength', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get placeholderSize() {
                    return this._getOption('placeholderSize');
                }
                set placeholderSize(value) {
                    this._setOption('placeholderSize', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get singleWorkdays() {
                    return this._getOption('singleWorkdays');
                }
                set singleWorkdays(value) {
                    this._setOption('singleWorkdays', value);
                }
                get strips() {
                    return this._getOption('strips');
                }
                set strips(value) {
                    this._setOption('strips', value);
                }
                get stripStyle() {
                    return this._getOption('stripStyle');
                }
                set stripStyle(value) {
                    this._setOption('stripStyle', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get tickInterval() {
                    return this._getOption('tickInterval');
                }
                set tickInterval(value) {
                    this._setOption('tickInterval', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueMarginsEnabled() {
                    return this._getOption('valueMarginsEnabled');
                }
                set valueMarginsEnabled(value) {
                    this._setOption('valueMarginsEnabled', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visualRange() {
                    return this._getOption('visualRange');
                }
                set visualRange(value) {
                    this._setOption('visualRange', value);
                }
                get visualRangeUpdateMode() {
                    return this._getOption('visualRangeUpdateMode');
                }
                set visualRangeUpdateMode(value) {
                    this._setOption('visualRangeUpdateMode', value);
                }
                get wholeRange() {
                    return this._getOption('wholeRange');
                }
                set wholeRange(value) {
                    this._setOption('wholeRange', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get workdaysOnly() {
                    return this._getOption('workdaysOnly');
                }
                set workdaysOnly(value) {
                    this._setOption('workdaysOnly', value);
                }
                get workWeek() {
                    return this._getOption('workWeek');
                }
                set workWeek(value) {
                    this._setOption('workWeek', value);
                }
                get firstPointOnStartAngle() {
                    return this._getOption('firstPointOnStartAngle');
                }
                set firstPointOnStartAngle(value) {
                    this._setOption('firstPointOnStartAngle', value);
                }
                get originValue() {
                    return this._getOption('originValue');
                }
                set originValue(value) {
                    this._setOption('originValue', value);
                }
                get period() {
                    return this._getOption('period');
                }
                set period(value) {
                    this._setOption('period', value);
                }
                get startAngle() {
                    return this._getOption('startAngle');
                }
                set startAngle(value) {
                    this._setOption('startAngle', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                categoriesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visualRangeChange;
                get _optionPath() {
                    return 'argumentAxis';
                }
                get breaksChildren() {
                    return this._getOption('breaks');
                }
                set breaksChildren(value) {
                    this.setChildren('breaks', value);
                }
                get constantLinesChildren() {
                    return this._getOption('constantLines');
                }
                set constantLinesChildren(value) {
                    this.setChildren('constantLines', value);
                }
                get stripsChildren() {
                    return this._getOption('strips');
                }
                set stripsChildren(value) {
                    this.setChildren('strips', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'categoriesChange' },
                        { emit: 'visualRangeChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoArgumentAxisComponent, selector: "dxo-argument-axis", inputs: { aggregateByCategory: "aggregateByCategory", aggregatedPointsPosition: "aggregatedPointsPosition", aggregationGroupWidth: "aggregationGroupWidth", aggregationInterval: "aggregationInterval", allowDecimals: "allowDecimals", argumentType: "argumentType", axisDivisionFactor: "axisDivisionFactor", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", customPosition: "customPosition", customPositionAxis: "customPositionAxis", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", holidays: "holidays", hoverMode: "hoverMode", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", offset: "offset", opacity: "opacity", placeholderSize: "placeholderSize", position: "position", singleWorkdays: "singleWorkdays", strips: "strips", stripStyle: "stripStyle", tick: "tick", tickInterval: "tickInterval", title: "title", type: "type", valueMarginsEnabled: "valueMarginsEnabled", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width", workdaysOnly: "workdaysOnly", workWeek: "workWeek", firstPointOnStartAngle: "firstPointOnStartAngle", originValue: "originValue", period: "period", startAngle: "startAngle" }, outputs: { categoriesChange: "categoriesChange", visualRangeChange: "visualRangeChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "breaksChildren", predicate: i0.forwardRef(() => DxiBreakComponent) }, { propertyName: "constantLinesChildren", predicate: i0.forwardRef(() => DxiConstantLineComponent) }, { propertyName: "stripsChildren", predicate: i0.forwardRef(() => DxiStripComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-argument-axis', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { aggregateByCategory: [{
                            type: Input
                        }], aggregatedPointsPosition: [{
                            type: Input
                        }], aggregationGroupWidth: [{
                            type: Input
                        }], aggregationInterval: [{
                            type: Input
                        }], allowDecimals: [{
                            type: Input
                        }], argumentType: [{
                            type: Input
                        }], axisDivisionFactor: [{
                            type: Input
                        }], breaks: [{
                            type: Input
                        }], breakStyle: [{
                            type: Input
                        }], categories: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], constantLines: [{
                            type: Input
                        }], constantLineStyle: [{
                            type: Input
                        }], customPosition: [{
                            type: Input
                        }], customPositionAxis: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], grid: [{
                            type: Input
                        }], holidays: [{
                            type: Input
                        }], hoverMode: [{
                            type: Input
                        }], inverted: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], linearThreshold: [{
                            type: Input
                        }], logarithmBase: [{
                            type: Input
                        }], maxValueMargin: [{
                            type: Input
                        }], minorGrid: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minorTickCount: [{
                            type: Input
                        }], minorTickInterval: [{
                            type: Input
                        }], minValueMargin: [{
                            type: Input
                        }], minVisualRangeLength: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], placeholderSize: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], singleWorkdays: [{
                            type: Input
                        }], strips: [{
                            type: Input
                        }], stripStyle: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], tickInterval: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], valueMarginsEnabled: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], visualRange: [{
                            type: Input
                        }], visualRangeUpdateMode: [{
                            type: Input
                        }], wholeRange: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], workdaysOnly: [{
                            type: Input
                        }], workWeek: [{
                            type: Input
                        }], firstPointOnStartAngle: [{
                            type: Input
                        }], originValue: [{
                            type: Input
                        }], period: [{
                            type: Input
                        }], startAngle: [{
                            type: Input
                        }], categoriesChange: [{
                            type: Output
                        }], visualRangeChange: [{
                            type: Output
                        }], breaksChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiBreakComponent)]
                        }], constantLinesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiConstantLineComponent)]
                        }], stripsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiStripComponent)]
                        }] } });
            class DxoArgumentAxisModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisModule, declarations: [DxoArgumentAxisComponent], exports: [DxoArgumentAxisComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisModule });
            } exports("c_", DxoArgumentAxisModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentAxisModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoArgumentAxisComponent
                                ],
                                exports: [
                                    DxoArgumentAxisComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFormat extends NestedOption {
                get currency() {
                    return this._getOption('currency');
                }
                set currency(value) {
                    this._setOption('currency', value);
                }
                get formatter() {
                    return this._getOption('formatter');
                }
                set formatter(value) {
                    this._setOption('formatter', value);
                }
                get parser() {
                    return this._getOption('parser');
                }
                set parser(value) {
                    this._setOption('parser', value);
                }
                get precision() {
                    return this._getOption('precision');
                }
                set precision(value) {
                    this._setOption('precision', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get useCurrencyAccountingStyle() {
                    return this._getOption('useCurrencyAccountingStyle');
                }
                set useCurrencyAccountingStyle(value) {
                    this._setOption('useCurrencyAccountingStyle', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormat, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormat, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormat, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoArgumentFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'argumentFormat';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoArgumentFormatComponent, selector: "dxo-argument-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-argument-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoArgumentFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatModule, declarations: [DxoArgumentFormatComponent], exports: [DxoArgumentFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatModule });
            } exports("dE", DxoArgumentFormatModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoArgumentFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoArgumentFormatComponent
                                ],
                                exports: [
                                    DxoArgumentFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAtComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'at';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAtComponent, selector: "dxo-at", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-at', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoAtModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAtModule, declarations: [DxoAtComponent], exports: [DxoAtComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtModule });
            } exports("b_", DxoAtModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAtModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAtComponent
                                ],
                                exports: [
                                    DxoAtComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAutoLayoutComponent extends NestedOption {
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'autoLayout';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAutoLayoutComponent, selector: "dxo-auto-layout", inputs: { orientation: "orientation", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-auto-layout', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { orientation: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxoAutoLayoutModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutModule, declarations: [DxoAutoLayoutComponent], exports: [DxoAutoLayoutComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutModule });
            } exports("eS", DxoAutoLayoutModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAutoLayoutModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoAutoLayoutComponent
                                ],
                                exports: [
                                    DxoAutoLayoutComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoChartsColor extends NestedOption {
                get base() {
                    return this._getOption('base');
                }
                set base(value) {
                    this._setOption('base', value);
                }
                get fillId() {
                    return this._getOption('fillId');
                }
                set fillId(value) {
                    this._setOption('fillId', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartsColor, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoChartsColor, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartsColor, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoBackgroundColorComponent extends DxoChartsColor {
                get _optionPath() {
                    return 'backgroundColor';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBackgroundColorComponent, selector: "dxo-background-color", inputs: { base: "base", fillId: "fillId" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-background-color', template: '', providers: [NestedOptionHost], inputs: [
                                    'base',
                                    'fillId'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoBackgroundColorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorModule, declarations: [DxoBackgroundColorComponent], exports: [DxoBackgroundColorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorModule });
            } exports("dg", DxoBackgroundColorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundColorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBackgroundColorComponent
                                ],
                                exports: [
                                    DxoBackgroundColorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBackgroundComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get image() {
                    return this._getOption('image');
                }
                set image(value) {
                    this._setOption('image', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get borderColor() {
                    return this._getOption('borderColor');
                }
                set borderColor(value) {
                    this._setOption('borderColor', value);
                }
                get _optionPath() {
                    return 'background';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBackgroundComponent, selector: "dxo-background", inputs: { color: "color", image: "image", visible: "visible", borderColor: "borderColor" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-background', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], image: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], borderColor: [{
                            type: Input
                        }] } });
            class DxoBackgroundModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundModule, declarations: [DxoBackgroundComponent], exports: [DxoBackgroundComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundModule });
            } exports("gm", DxoBackgroundModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBackgroundModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBackgroundComponent
                                ],
                                exports: [
                                    DxoBackgroundComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoBarComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'bar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBarComponent, selector: "dxo-bar", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-bar', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoBarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBarModule, declarations: [DxoBarComponent], exports: [DxoBarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarModule });
            } exports("dv", DxoBarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBarComponent
                                ],
                                exports: [
                                    DxoBarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBehaviorComponent extends NestedOption {
                get allowSlidersSwap() {
                    return this._getOption('allowSlidersSwap');
                }
                set allowSlidersSwap(value) {
                    this._setOption('allowSlidersSwap', value);
                }
                get animationEnabled() {
                    return this._getOption('animationEnabled');
                }
                set animationEnabled(value) {
                    this._setOption('animationEnabled', value);
                }
                get callValueChanged() {
                    return this._getOption('callValueChanged');
                }
                set callValueChanged(value) {
                    this._setOption('callValueChanged', value);
                }
                get manualRangeSelectionEnabled() {
                    return this._getOption('manualRangeSelectionEnabled');
                }
                set manualRangeSelectionEnabled(value) {
                    this._setOption('manualRangeSelectionEnabled', value);
                }
                get moveSelectedRangeByClick() {
                    return this._getOption('moveSelectedRangeByClick');
                }
                set moveSelectedRangeByClick(value) {
                    this._setOption('moveSelectedRangeByClick', value);
                }
                get snapToTicks() {
                    return this._getOption('snapToTicks');
                }
                set snapToTicks(value) {
                    this._setOption('snapToTicks', value);
                }
                get valueChangeMode() {
                    return this._getOption('valueChangeMode');
                }
                set valueChangeMode(value) {
                    this._setOption('valueChangeMode', value);
                }
                get _optionPath() {
                    return 'behavior';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBehaviorComponent, selector: "dxo-behavior", inputs: { allowSlidersSwap: "allowSlidersSwap", animationEnabled: "animationEnabled", callValueChanged: "callValueChanged", manualRangeSelectionEnabled: "manualRangeSelectionEnabled", moveSelectedRangeByClick: "moveSelectedRangeByClick", snapToTicks: "snapToTicks", valueChangeMode: "valueChangeMode" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-behavior', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowSlidersSwap: [{
                            type: Input
                        }], animationEnabled: [{
                            type: Input
                        }], callValueChanged: [{
                            type: Input
                        }], manualRangeSelectionEnabled: [{
                            type: Input
                        }], moveSelectedRangeByClick: [{
                            type: Input
                        }], snapToTicks: [{
                            type: Input
                        }], valueChangeMode: [{
                            type: Input
                        }] } });
            class DxoBehaviorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorModule, declarations: [DxoBehaviorComponent], exports: [DxoBehaviorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorModule });
            } exports("gn", DxoBehaviorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBehaviorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBehaviorComponent
                                ],
                                exports: [
                                    DxoBehaviorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBorderComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get cornerRadius() {
                    return this._getOption('cornerRadius');
                }
                set cornerRadius(value) {
                    this._setOption('cornerRadius', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get bottom() {
                    return this._getOption('bottom');
                }
                set bottom(value) {
                    this._setOption('bottom', value);
                }
                get left() {
                    return this._getOption('left');
                }
                set left(value) {
                    this._setOption('left', value);
                }
                get right() {
                    return this._getOption('right');
                }
                set right(value) {
                    this._setOption('right', value);
                }
                get top() {
                    return this._getOption('top');
                }
                set top(value) {
                    this._setOption('top', value);
                }
                get _optionPath() {
                    return 'border';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBorderComponent, selector: "dxo-border", inputs: { color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", opacity: "opacity", visible: "visible", width: "width", bottom: "bottom", left: "left", right: "right", top: "top" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-border', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], cornerRadius: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], bottom: [{
                            type: Input
                        }], left: [{
                            type: Input
                        }], right: [{
                            type: Input
                        }], top: [{
                            type: Input
                        }] } });
            class DxoBorderModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderModule, declarations: [DxoBorderComponent], exports: [DxoBorderComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderModule });
            } exports("cD", DxoBorderModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBorderModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBorderComponent
                                ],
                                exports: [
                                    DxoBorderComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBoundaryOffsetComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'boundaryOffset';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBoundaryOffsetComponent, selector: "dxo-boundary-offset", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-boundary-offset', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoBoundaryOffsetModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetModule, declarations: [DxoBoundaryOffsetComponent], exports: [DxoBoundaryOffsetComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetModule });
            } exports("b$", DxoBoundaryOffsetModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoundaryOffsetModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBoundaryOffsetComponent
                                ],
                                exports: [
                                    DxoBoundaryOffsetComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBoxOptions extends NestedOption {
                get align() {
                    return this._getOption('align');
                }
                set align(value) {
                    this._setOption('align', value);
                }
                get crossAlign() {
                    return this._getOption('crossAlign');
                }
                set crossAlign(value) {
                    this._setOption('crossAlign', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get direction() {
                    return this._getOption('direction');
                }
                set direction(value) {
                    this._setOption('direction', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get itemHoldTimeout() {
                    return this._getOption('itemHoldTimeout');
                }
                set itemHoldTimeout(value) {
                    this._setOption('itemHoldTimeout', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get itemTemplate() {
                    return this._getOption('itemTemplate');
                }
                set itemTemplate(value) {
                    this._setOption('itemTemplate', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onItemClick() {
                    return this._getOption('onItemClick');
                }
                set onItemClick(value) {
                    this._setOption('onItemClick', value);
                }
                get onItemContextMenu() {
                    return this._getOption('onItemContextMenu');
                }
                set onItemContextMenu(value) {
                    this._setOption('onItemContextMenu', value);
                }
                get onItemHold() {
                    return this._getOption('onItemHold');
                }
                set onItemHold(value) {
                    this._setOption('onItemHold', value);
                }
                get onItemRendered() {
                    return this._getOption('onItemRendered');
                }
                set onItemRendered(value) {
                    this._setOption('onItemRendered', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBoxOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiButtonGroupItem extends CollectionNestedOption {
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get html() {
                    return this._getOption('html');
                }
                set html(value) {
                    this._setOption('html', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get titleTemplate() {
                    return this._getOption('titleTemplate');
                }
                set titleTemplate(value) {
                    this._setOption('titleTemplate', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get onClick() {
                    return this._getOption('onClick');
                }
                set onClick(value) {
                    this._setOption('onClick', value);
                }
                get stylingMode() {
                    return this._getOption('stylingMode');
                }
                set stylingMode(value) {
                    this._setOption('stylingMode', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get baseSize() {
                    return this._getOption('baseSize');
                }
                set baseSize(value) {
                    this._setOption('baseSize', value);
                }
                get box() {
                    return this._getOption('box');
                }
                set box(value) {
                    this._setOption('box', value);
                }
                get ratio() {
                    return this._getOption('ratio');
                }
                set ratio(value) {
                    this._setOption('ratio', value);
                }
                get shrink() {
                    return this._getOption('shrink');
                }
                set shrink(value) {
                    this._setOption('shrink', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get beginGroup() {
                    return this._getOption('beginGroup');
                }
                set beginGroup(value) {
                    this._setOption('beginGroup', value);
                }
                get closeMenuOnClick() {
                    return this._getOption('closeMenuOnClick');
                }
                set closeMenuOnClick(value) {
                    this._setOption('closeMenuOnClick', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get selectable() {
                    return this._getOption('selectable');
                }
                set selectable(value) {
                    this._setOption('selectable', value);
                }
                get selected() {
                    return this._getOption('selected');
                }
                set selected(value) {
                    this._setOption('selected', value);
                }
                get colSpan() {
                    return this._getOption('colSpan');
                }
                set colSpan(value) {
                    this._setOption('colSpan', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get editorType() {
                    return this._getOption('editorType');
                }
                set editorType(value) {
                    this._setOption('editorType', value);
                }
                get helpText() {
                    return this._getOption('helpText');
                }
                set helpText(value) {
                    this._setOption('helpText', value);
                }
                get isRequired() {
                    return this._getOption('isRequired');
                }
                set isRequired(value) {
                    this._setOption('isRequired', value);
                }
                get itemType() {
                    return this._getOption('itemType');
                }
                set itemType(value) {
                    this._setOption('itemType', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get validationRules() {
                    return this._getOption('validationRules');
                }
                set validationRules(value) {
                    this._setOption('validationRules', value);
                }
                get visibleIndex() {
                    return this._getOption('visibleIndex');
                }
                set visibleIndex(value) {
                    this._setOption('visibleIndex', value);
                }
                get alignItemLabels() {
                    return this._getOption('alignItemLabels');
                }
                set alignItemLabels(value) {
                    this._setOption('alignItemLabels', value);
                }
                get caption() {
                    return this._getOption('caption');
                }
                set caption(value) {
                    this._setOption('caption', value);
                }
                get captionTemplate() {
                    return this._getOption('captionTemplate');
                }
                set captionTemplate(value) {
                    this._setOption('captionTemplate', value);
                }
                get colCount() {
                    return this._getOption('colCount');
                }
                set colCount(value) {
                    this._setOption('colCount', value);
                }
                get colCountByScreen() {
                    return this._getOption('colCountByScreen');
                }
                set colCountByScreen(value) {
                    this._setOption('colCountByScreen', value);
                }
                get tabPanelOptions() {
                    return this._getOption('tabPanelOptions');
                }
                set tabPanelOptions(value) {
                    this._setOption('tabPanelOptions', value);
                }
                get tabs() {
                    return this._getOption('tabs');
                }
                set tabs(value) {
                    this._setOption('tabs', value);
                }
                get badge() {
                    return this._getOption('badge');
                }
                set badge(value) {
                    this._setOption('badge', value);
                }
                get tabTemplate() {
                    return this._getOption('tabTemplate');
                }
                set tabTemplate(value) {
                    this._setOption('tabTemplate', value);
                }
                get buttonOptions() {
                    return this._getOption('buttonOptions');
                }
                set buttonOptions(value) {
                    this._setOption('buttonOptions', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get locateInMenu() {
                    return this._getOption('locateInMenu');
                }
                set locateInMenu(value) {
                    this._setOption('locateInMenu', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get menuItemTemplate() {
                    return this._getOption('menuItemTemplate');
                }
                set menuItemTemplate(value) {
                    this._setOption('menuItemTemplate', value);
                }
                get options() {
                    return this._getOption('options');
                }
                set options(value) {
                    this._setOption('options', value);
                }
                get showText() {
                    return this._getOption('showText');
                }
                set showText(value) {
                    this._setOption('showText', value);
                }
                get widget() {
                    return this._getOption('widget');
                }
                set widget(value) {
                    this._setOption('widget', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get imageAlt() {
                    return this._getOption('imageAlt');
                }
                set imageAlt(value) {
                    this._setOption('imageAlt', value);
                }
                get imageSrc() {
                    return this._getOption('imageSrc');
                }
                set imageSrc(value) {
                    this._setOption('imageSrc', value);
                }
                get acceptedValues() {
                    return this._getOption('acceptedValues');
                }
                set acceptedValues(value) {
                    this._setOption('acceptedValues', value);
                }
                get formatName() {
                    return this._getOption('formatName');
                }
                set formatName(value) {
                    this._setOption('formatName', value);
                }
                get formatValues() {
                    return this._getOption('formatValues');
                }
                set formatValues(value) {
                    this._setOption('formatValues', value);
                }
                get key() {
                    return this._getOption('key');
                }
                set key(value) {
                    this._setOption('key', value);
                }
                get showChevron() {
                    return this._getOption('showChevron');
                }
                set showChevron(value) {
                    this._setOption('showChevron', value);
                }
                get linkAttr() {
                    return this._getOption('linkAttr');
                }
                set linkAttr(value) {
                    this._setOption('linkAttr', value);
                }
                get url() {
                    return this._getOption('url');
                }
                set url(value) {
                    this._setOption('url', value);
                }
                get collapsed() {
                    return this._getOption('collapsed');
                }
                set collapsed(value) {
                    this._setOption('collapsed', value);
                }
                get collapsedSize() {
                    return this._getOption('collapsedSize');
                }
                set collapsedSize(value) {
                    this._setOption('collapsedSize', value);
                }
                get collapsible() {
                    return this._getOption('collapsible');
                }
                set collapsible(value) {
                    this._setOption('collapsible', value);
                }
                get maxSize() {
                    return this._getOption('maxSize');
                }
                set maxSize(value) {
                    this._setOption('maxSize', value);
                }
                get minSize() {
                    return this._getOption('minSize');
                }
                set minSize(value) {
                    this._setOption('minSize', value);
                }
                get resizable() {
                    return this._getOption('resizable');
                }
                set resizable(value) {
                    this._setOption('resizable', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get splitter() {
                    return this._getOption('splitter');
                }
                set splitter(value) {
                    this._setOption('splitter', value);
                }
                get heightRatio() {
                    return this._getOption('heightRatio');
                }
                set heightRatio(value) {
                    this._setOption('heightRatio', value);
                }
                get widthRatio() {
                    return this._getOption('widthRatio');
                }
                set widthRatio(value) {
                    this._setOption('widthRatio', value);
                }
                get expanded() {
                    return this._getOption('expanded');
                }
                set expanded(value) {
                    this._setOption('expanded', value);
                }
                get hasItems() {
                    return this._getOption('hasItems');
                }
                set hasItems(value) {
                    this._setOption('hasItems', value);
                }
                get id() {
                    return this._getOption('id');
                }
                set id(value) {
                    this._setOption('id', value);
                }
                get parentId() {
                    return this._getOption('parentId');
                }
                set parentId(value) {
                    this._setOption('parentId', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonGroupItem, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiButtonGroupItem, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonGroupItem, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiValidationRuleComponent extends CollectionNestedOption {
                get message() {
                    return this._getOption('message');
                }
                set message(value) {
                    this._setOption('message', value);
                }
                get trim() {
                    return this._getOption('trim');
                }
                set trim(value) {
                    this._setOption('trim', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get ignoreEmptyValue() {
                    return this._getOption('ignoreEmptyValue');
                }
                set ignoreEmptyValue(value) {
                    this._setOption('ignoreEmptyValue', value);
                }
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                get reevaluate() {
                    return this._getOption('reevaluate');
                }
                set reevaluate(value) {
                    this._setOption('reevaluate', value);
                }
                get validationCallback() {
                    return this._getOption('validationCallback');
                }
                set validationCallback(value) {
                    this._setOption('validationCallback', value);
                }
                get comparisonTarget() {
                    return this._getOption('comparisonTarget');
                }
                set comparisonTarget(value) {
                    this._setOption('comparisonTarget', value);
                }
                get comparisonType() {
                    return this._getOption('comparisonType');
                }
                set comparisonType(value) {
                    this._setOption('comparisonType', value);
                }
                get pattern() {
                    return this._getOption('pattern');
                }
                set pattern(value) {
                    this._setOption('pattern', value);
                }
                get _optionPath() {
                    return 'validationRules';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiValidationRuleComponent, selector: "dxi-validation-rule", inputs: { message: "message", trim: "trim", type: "type", ignoreEmptyValue: "ignoreEmptyValue", max: "max", min: "min", reevaluate: "reevaluate", validationCallback: "validationCallback", comparisonTarget: "comparisonTarget", comparisonType: "comparisonType", pattern: "pattern" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("ha", DxiValidationRuleComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-validation-rule', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { message: [{
                            type: Input
                        }], trim: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], ignoreEmptyValue: [{
                            type: Input
                        }], max: [{
                            type: Input
                        }], min: [{
                            type: Input
                        }], reevaluate: [{
                            type: Input
                        }], validationCallback: [{
                            type: Input
                        }], comparisonTarget: [{
                            type: Input
                        }], comparisonType: [{
                            type: Input
                        }], pattern: [{
                            type: Input
                        }] } });
            class DxiValidationRuleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleModule, declarations: [DxiValidationRuleComponent], exports: [DxiValidationRuleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleModule });
            } exports("fk", DxiValidationRuleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValidationRuleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiValidationRuleComponent
                                ],
                                exports: [
                                    DxiValidationRuleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiHtmlEditorImageUploadTabItem extends CollectionNestedOption {
                get alignItemLabels() {
                    return this._getOption('alignItemLabels');
                }
                set alignItemLabels(value) {
                    this._setOption('alignItemLabels', value);
                }
                get badge() {
                    return this._getOption('badge');
                }
                set badge(value) {
                    this._setOption('badge', value);
                }
                get colCount() {
                    return this._getOption('colCount');
                }
                set colCount(value) {
                    this._setOption('colCount', value);
                }
                get colCountByScreen() {
                    return this._getOption('colCountByScreen');
                }
                set colCountByScreen(value) {
                    this._setOption('colCountByScreen', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get tabTemplate() {
                    return this._getOption('tabTemplate');
                }
                set tabTemplate(value) {
                    this._setOption('tabTemplate', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get groups() {
                    return this._getOption('groups');
                }
                set groups(value) {
                    this._setOption('groups', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiHtmlEditorImageUploadTabItem, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiHtmlEditorImageUploadTabItem, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiHtmlEditorImageUploadTabItem, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiDiagramCustomCommand extends CollectionNestedOption {
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDiagramCustomCommand, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiDiagramCustomCommand, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDiagramCustomCommand, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiCommandComponent extends DxiDiagramCustomCommand {
                get _optionPath() {
                    return 'commands';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiCommandComponent, selector: "dxi-command", inputs: { icon: "icon", items: "items", location: "location", name: "name", text: "text" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-command', template: '', providers: [NestedOptionHost], inputs: [
                                    'icon',
                                    'items',
                                    'location',
                                    'name',
                                    'text'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxiCommandModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandModule, declarations: [DxiCommandComponent], exports: [DxiCommandComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandModule });
            } exports("eH", DxiCommandModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCommandModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiCommandComponent
                                ],
                                exports: [
                                    DxiCommandComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiGroupComponent extends CollectionNestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get category() {
                    return this._getOption('category');
                }
                set category(value) {
                    this._setOption('category', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get expanded() {
                    return this._getOption('expanded');
                }
                set expanded(value) {
                    this._setOption('expanded', value);
                }
                get shapes() {
                    return this._getOption('shapes');
                }
                set shapes(value) {
                    this._setOption('shapes', value);
                }
                get _optionPath() {
                    return 'groups';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiGroupComponent, selector: "dxi-group", inputs: { commands: "commands", title: "title", category: "category", displayMode: "displayMode", expanded: "expanded", shapes: "shapes" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-group', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commands: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], category: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], expanded: [{
                            type: Input
                        }], shapes: [{
                            type: Input
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }] } });
            class DxiGroupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupModule, declarations: [DxiGroupComponent], exports: [DxiGroupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupModule });
            } exports("eW", DxiGroupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiGroupComponent
                                ],
                                exports: [
                                    DxiGroupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiTabComponent extends DxiHtmlEditorImageUploadTabItem {
                renderer;
                document;
                element;
                get _optionPath() {
                    return 'tabs';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                get groupsChildren() {
                    return this._getOption('groups');
                }
                set groupsChildren(value) {
                    this.setChildren('groups', value);
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiTabComponent, selector: "dxi-tab", inputs: { alignItemLabels: "alignItemLabels", badge: "badge", colCount: "colCount", colCountByScreen: "colCountByScreen", disabled: "disabled", icon: "icon", items: "items", tabTemplate: "tabTemplate", template: "template", title: "title", commands: "commands", groups: "groups", name: "name" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }, { propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }, { propertyName: "groupsChildren", predicate: i0.forwardRef(() => DxiGroupComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-tab', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], inputs: [
                                    'alignItemLabels',
                                    'badge',
                                    'colCount',
                                    'colCountByScreen',
                                    'disabled',
                                    'icon',
                                    'items',
                                    'tabTemplate',
                                    'template',
                                    'title',
                                    'commands',
                                    'groups',
                                    'name'
                                ], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }], groupsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiGroupComponent)]
                        }] } });
            class DxiTabModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiTabModule, declarations: [DxiTabComponent], exports: [DxiTabComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabModule });
            } exports("eV", DxiTabModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTabModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiTabComponent
                                ],
                                exports: [
                                    DxiTabComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiLocationComponent extends CollectionNestedOption {
                get lat() {
                    return this._getOption('lat');
                }
                set lat(value) {
                    this._setOption('lat', value);
                }
                get lng() {
                    return this._getOption('lng');
                }
                set lng(value) {
                    this._setOption('lng', value);
                }
                get col() {
                    return this._getOption('col');
                }
                set col(value) {
                    this._setOption('col', value);
                }
                get colspan() {
                    return this._getOption('colspan');
                }
                set colspan(value) {
                    this._setOption('colspan', value);
                }
                get row() {
                    return this._getOption('row');
                }
                set row(value) {
                    this._setOption('row', value);
                }
                get rowspan() {
                    return this._getOption('rowspan');
                }
                set rowspan(value) {
                    this._setOption('rowspan', value);
                }
                get screen() {
                    return this._getOption('screen');
                }
                set screen(value) {
                    this._setOption('screen', value);
                }
                get _optionPath() {
                    return 'location';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiLocationComponent, selector: "dxi-location", inputs: { lat: "lat", lng: "lng", col: "col", colspan: "colspan", row: "row", rowspan: "rowspan", screen: "screen" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-location', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { lat: [{
                            type: Input
                        }], lng: [{
                            type: Input
                        }], col: [{
                            type: Input
                        }], colspan: [{
                            type: Input
                        }], row: [{
                            type: Input
                        }], rowspan: [{
                            type: Input
                        }], screen: [{
                            type: Input
                        }] } });
            class DxiLocationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationModule, declarations: [DxiLocationComponent], exports: [DxiLocationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationModule });
            } exports("g0", DxiLocationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLocationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiLocationComponent
                                ],
                                exports: [
                                    DxiLocationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiItemComponent extends DxiButtonGroupItem {
                renderer;
                document;
                element;
                get _optionPath() {
                    return 'items';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                get validationRulesChildren() {
                    return this._getOption('validationRules');
                }
                set validationRulesChildren(value) {
                    this.setChildren('validationRules', value);
                }
                get tabsChildren() {
                    return this._getOption('tabs');
                }
                set tabsChildren(value) {
                    this.setChildren('tabs', value);
                }
                get locationChildren() {
                    return this._getOption('location');
                }
                set locationChildren(value) {
                    this.setChildren('location', value);
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiItemComponent, selector: "dxi-item", inputs: { disabled: "disabled", html: "html", icon: "icon", template: "template", text: "text", title: "title", titleTemplate: "titleTemplate", visible: "visible", onClick: "onClick", stylingMode: "stylingMode", type: "type", baseSize: "baseSize", box: "box", ratio: "ratio", shrink: "shrink", elementAttr: "elementAttr", hint: "hint", beginGroup: "beginGroup", closeMenuOnClick: "closeMenuOnClick", items: "items", selectable: "selectable", selected: "selected", colSpan: "colSpan", cssClass: "cssClass", dataField: "dataField", editorOptions: "editorOptions", editorType: "editorType", helpText: "helpText", isRequired: "isRequired", itemType: "itemType", label: "label", name: "name", validationRules: "validationRules", visibleIndex: "visibleIndex", alignItemLabels: "alignItemLabels", caption: "caption", captionTemplate: "captionTemplate", colCount: "colCount", colCountByScreen: "colCountByScreen", tabPanelOptions: "tabPanelOptions", tabs: "tabs", badge: "badge", tabTemplate: "tabTemplate", buttonOptions: "buttonOptions", horizontalAlignment: "horizontalAlignment", verticalAlignment: "verticalAlignment", locateInMenu: "locateInMenu", location: "location", menuItemTemplate: "menuItemTemplate", options: "options", showText: "showText", widget: "widget", height: "height", width: "width", imageAlt: "imageAlt", imageSrc: "imageSrc", acceptedValues: "acceptedValues", formatName: "formatName", formatValues: "formatValues", key: "key", showChevron: "showChevron", linkAttr: "linkAttr", url: "url", collapsed: "collapsed", collapsedSize: "collapsedSize", collapsible: "collapsible", maxSize: "maxSize", minSize: "minSize", resizable: "resizable", size: "size", splitter: "splitter", heightRatio: "heightRatio", widthRatio: "widthRatio", expanded: "expanded", hasItems: "hasItems", id: "id", parentId: "parentId" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }, { propertyName: "validationRulesChildren", predicate: i0.forwardRef(() => DxiValidationRuleComponent) }, { propertyName: "tabsChildren", predicate: i0.forwardRef(() => DxiTabComponent) }, { propertyName: "locationChildren", predicate: i0.forwardRef(() => DxiLocationComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            } exports("al", DxiItemComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-item', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], inputs: [
                                    'disabled',
                                    'html',
                                    'icon',
                                    'template',
                                    'text',
                                    'title',
                                    'titleTemplate',
                                    'visible',
                                    'onClick',
                                    'stylingMode',
                                    'type',
                                    'baseSize',
                                    'box',
                                    'ratio',
                                    'shrink',
                                    'elementAttr',
                                    'hint',
                                    'beginGroup',
                                    'closeMenuOnClick',
                                    'items',
                                    'selectable',
                                    'selected',
                                    'colSpan',
                                    'cssClass',
                                    'dataField',
                                    'editorOptions',
                                    'editorType',
                                    'helpText',
                                    'isRequired',
                                    'itemType',
                                    'label',
                                    'name',
                                    'validationRules',
                                    'visibleIndex',
                                    'alignItemLabels',
                                    'caption',
                                    'captionTemplate',
                                    'colCount',
                                    'colCountByScreen',
                                    'tabPanelOptions',
                                    'tabs',
                                    'badge',
                                    'tabTemplate',
                                    'buttonOptions',
                                    'horizontalAlignment',
                                    'verticalAlignment',
                                    'locateInMenu',
                                    'location',
                                    'menuItemTemplate',
                                    'options',
                                    'showText',
                                    'widget',
                                    'height',
                                    'width',
                                    'imageAlt',
                                    'imageSrc',
                                    'acceptedValues',
                                    'formatName',
                                    'formatValues',
                                    'key',
                                    'showChevron',
                                    'linkAttr',
                                    'url',
                                    'collapsed',
                                    'collapsedSize',
                                    'collapsible',
                                    'maxSize',
                                    'minSize',
                                    'resizable',
                                    'size',
                                    'splitter',
                                    'heightRatio',
                                    'widthRatio',
                                    'expanded',
                                    'hasItems',
                                    'id',
                                    'parentId'
                                ], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }], validationRulesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiValidationRuleComponent)]
                        }], tabsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiTabComponent)]
                        }], locationChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiLocationComponent)]
                        }] } });
            class DxiItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiItemModule, declarations: [DxiItemComponent], exports: [DxiItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemModule });
            } exports("am", DxiItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiItemComponent
                                ],
                                exports: [
                                    DxiItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoBoxComponent extends DxoBoxOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                itemsChange;
                get _optionPath() {
                    return 'box';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'itemsChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBoxComponent, selector: "dxo-box", inputs: { align: "align", crossAlign: "crossAlign", dataSource: "dataSource", direction: "direction", disabled: "disabled", elementAttr: "elementAttr", height: "height", hoverStateEnabled: "hoverStateEnabled", itemHoldTimeout: "itemHoldTimeout", items: "items", itemTemplate: "itemTemplate", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemContextMenu: "onItemContextMenu", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-box', template: '', providers: [NestedOptionHost], inputs: [
                                    'align',
                                    'crossAlign',
                                    'dataSource',
                                    'direction',
                                    'disabled',
                                    'elementAttr',
                                    'height',
                                    'hoverStateEnabled',
                                    'itemHoldTimeout',
                                    'items',
                                    'itemTemplate',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onItemClick',
                                    'onItemContextMenu',
                                    'onItemHold',
                                    'onItemRendered',
                                    'onOptionChanged',
                                    'rtlEnabled',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoBoxModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxModule, declarations: [DxoBoxComponent], exports: [DxoBoxComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxModule });
            } exports("cQ", DxoBoxModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBoxModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBoxComponent
                                ],
                                exports: [
                                    DxoBoxComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoBreakStyleComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get line() {
                    return this._getOption('line');
                }
                set line(value) {
                    this._setOption('line', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'breakStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBreakStyleComponent, selector: "dxo-break-style", inputs: { color: "color", line: "line", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-break-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], line: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoBreakStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleModule, declarations: [DxoBreakStyleComponent], exports: [DxoBreakStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleModule });
            } exports("d1", DxoBreakStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBreakStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBreakStyleComponent
                                ],
                                exports: [
                                    DxoBreakStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoBubbleComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'bubble';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoBubbleComponent, selector: "dxo-bubble", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-bubble', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoBubbleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleModule, declarations: [DxoBubbleComponent], exports: [DxoBubbleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleModule });
            } exports("dw", DxoBubbleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoBubbleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoBubbleComponent
                                ],
                                exports: [
                                    DxoBubbleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiTextEditorButton extends CollectionNestedOption {
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get options() {
                    return this._getOption('options');
                }
                set options(value) {
                    this._setOption('options', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get onClick() {
                    return this._getOption('onClick');
                }
                set onClick(value) {
                    this._setOption('onClick', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTextEditorButton, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiTextEditorButton, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTextEditorButton, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiButtonComponent extends DxiTextEditorButton {
                get _optionPath() {
                    return 'buttons';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiButtonComponent, selector: "dxi-button", inputs: { location: "location", name: "name", options: "options", cssClass: "cssClass", disabled: "disabled", hint: "hint", icon: "icon", onClick: "onClick", template: "template", text: "text", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("bS", DxiButtonComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-button', template: '', providers: [NestedOptionHost], inputs: [
                                    'location',
                                    'name',
                                    'options',
                                    'cssClass',
                                    'disabled',
                                    'hint',
                                    'icon',
                                    'onClick',
                                    'template',
                                    'text',
                                    'visible'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiButtonModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonModule, declarations: [DxiButtonComponent], exports: [DxiButtonComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonModule });
            } exports("bT", DxiButtonModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiButtonModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiButtonComponent
                                ],
                                exports: [
                                    DxiButtonComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoButtonOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get onClick() {
                    return this._getOption('onClick');
                }
                set onClick(value) {
                    this._setOption('onClick', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get stylingMode() {
                    return this._getOption('stylingMode');
                }
                set stylingMode(value) {
                    this._setOption('stylingMode', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get useSubmitBehavior() {
                    return this._getOption('useSubmitBehavior');
                }
                set useSubmitBehavior(value) {
                    this._setOption('useSubmitBehavior', value);
                }
                get validationGroup() {
                    return this._getOption('validationGroup');
                }
                set validationGroup(value) {
                    this._setOption('validationGroup', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoButtonOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoButtonOptionsComponent extends DxoButtonOptions {
                get _optionPath() {
                    return 'buttonOptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoButtonOptionsComponent, selector: "dxo-button-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", icon: "icon", onClick: "onClick", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", stylingMode: "stylingMode", tabIndex: "tabIndex", template: "template", text: "text", type: "type", useSubmitBehavior: "useSubmitBehavior", validationGroup: "validationGroup", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-button-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'icon',
                                    'onClick',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'rtlEnabled',
                                    'stylingMode',
                                    'tabIndex',
                                    'template',
                                    'text',
                                    'type',
                                    'useSubmitBehavior',
                                    'validationGroup',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoButtonOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsModule, declarations: [DxoButtonOptionsComponent], exports: [DxoButtonOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsModule });
            } exports("fm", DxoButtonOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoButtonOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoButtonOptionsComponent
                                ],
                                exports: [
                                    DxoButtonOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCalendarOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get cellTemplate() {
                    return this._getOption('cellTemplate');
                }
                set cellTemplate(value) {
                    this._setOption('cellTemplate', value);
                }
                get dateSerializationFormat() {
                    return this._getOption('dateSerializationFormat');
                }
                set dateSerializationFormat(value) {
                    this._setOption('dateSerializationFormat', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get disabledDates() {
                    return this._getOption('disabledDates');
                }
                set disabledDates(value) {
                    this._setOption('disabledDates', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get firstDayOfWeek() {
                    return this._getOption('firstDayOfWeek');
                }
                set firstDayOfWeek(value) {
                    this._setOption('firstDayOfWeek', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get isDirty() {
                    return this._getOption('isDirty');
                }
                set isDirty(value) {
                    this._setOption('isDirty', value);
                }
                get isValid() {
                    return this._getOption('isValid');
                }
                set isValid(value) {
                    this._setOption('isValid', value);
                }
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get maxZoomLevel() {
                    return this._getOption('maxZoomLevel');
                }
                set maxZoomLevel(value) {
                    this._setOption('maxZoomLevel', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                get minZoomLevel() {
                    return this._getOption('minZoomLevel');
                }
                set minZoomLevel(value) {
                    this._setOption('minZoomLevel', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onValueChanged() {
                    return this._getOption('onValueChanged');
                }
                set onValueChanged(value) {
                    this._setOption('onValueChanged', value);
                }
                get readOnly() {
                    return this._getOption('readOnly');
                }
                set readOnly(value) {
                    this._setOption('readOnly', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get selectWeekOnClick() {
                    return this._getOption('selectWeekOnClick');
                }
                set selectWeekOnClick(value) {
                    this._setOption('selectWeekOnClick', value);
                }
                get showTodayButton() {
                    return this._getOption('showTodayButton');
                }
                set showTodayButton(value) {
                    this._setOption('showTodayButton', value);
                }
                get showWeekNumbers() {
                    return this._getOption('showWeekNumbers');
                }
                set showWeekNumbers(value) {
                    this._setOption('showWeekNumbers', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get validationError() {
                    return this._getOption('validationError');
                }
                set validationError(value) {
                    this._setOption('validationError', value);
                }
                get validationErrors() {
                    return this._getOption('validationErrors');
                }
                set validationErrors(value) {
                    this._setOption('validationErrors', value);
                }
                get validationMessageMode() {
                    return this._getOption('validationMessageMode');
                }
                set validationMessageMode(value) {
                    this._setOption('validationMessageMode', value);
                }
                get validationMessagePosition() {
                    return this._getOption('validationMessagePosition');
                }
                set validationMessagePosition(value) {
                    this._setOption('validationMessagePosition', value);
                }
                get validationStatus() {
                    return this._getOption('validationStatus');
                }
                set validationStatus(value) {
                    this._setOption('validationStatus', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get weekNumberRule() {
                    return this._getOption('weekNumberRule');
                }
                set weekNumberRule(value) {
                    this._setOption('weekNumberRule', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get zoomLevel() {
                    return this._getOption('zoomLevel');
                }
                set zoomLevel(value) {
                    this._setOption('zoomLevel', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCalendarOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoCalendarOptionsComponent extends DxoCalendarOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                zoomLevelChange;
                get _optionPath() {
                    return 'calendarOptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' },
                        { emit: 'zoomLevelChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCalendarOptionsComponent, selector: "dxo-calendar-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", cellTemplate: "cellTemplate", dateSerializationFormat: "dateSerializationFormat", disabled: "disabled", disabledDates: "disabledDates", elementAttr: "elementAttr", firstDayOfWeek: "firstDayOfWeek", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", isDirty: "isDirty", isValid: "isValid", max: "max", maxZoomLevel: "maxZoomLevel", min: "min", minZoomLevel: "minZoomLevel", name: "name", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onValueChanged: "onValueChanged", readOnly: "readOnly", rtlEnabled: "rtlEnabled", selectionMode: "selectionMode", selectWeekOnClick: "selectWeekOnClick", showTodayButton: "showTodayButton", showWeekNumbers: "showWeekNumbers", tabIndex: "tabIndex", validationError: "validationError", validationErrors: "validationErrors", validationMessageMode: "validationMessageMode", validationMessagePosition: "validationMessagePosition", validationStatus: "validationStatus", value: "value", visible: "visible", weekNumberRule: "weekNumberRule", width: "width", zoomLevel: "zoomLevel" }, outputs: { valueChange: "valueChange", zoomLevelChange: "zoomLevelChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-calendar-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'cellTemplate',
                                    'dateSerializationFormat',
                                    'disabled',
                                    'disabledDates',
                                    'elementAttr',
                                    'firstDayOfWeek',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'isDirty',
                                    'isValid',
                                    'max',
                                    'maxZoomLevel',
                                    'min',
                                    'minZoomLevel',
                                    'name',
                                    'onDisposing',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onValueChanged',
                                    'readOnly',
                                    'rtlEnabled',
                                    'selectionMode',
                                    'selectWeekOnClick',
                                    'showTodayButton',
                                    'showWeekNumbers',
                                    'tabIndex',
                                    'validationError',
                                    'validationErrors',
                                    'validationMessageMode',
                                    'validationMessagePosition',
                                    'validationStatus',
                                    'value',
                                    'visible',
                                    'weekNumberRule',
                                    'width',
                                    'zoomLevel'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { valueChange: [{
                            type: Output
                        }], zoomLevelChange: [{
                            type: Output
                        }] } });
            class DxoCalendarOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsModule, declarations: [DxoCalendarOptionsComponent], exports: [DxoCalendarOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsModule });
            } exports("eC", DxoCalendarOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCalendarOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCalendarOptionsComponent
                                ],
                                exports: [
                                    DxoCalendarOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoCandlestickComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'candlestick';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCandlestickComponent, selector: "dxo-candlestick", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-candlestick', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoCandlestickModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickModule, declarations: [DxoCandlestickComponent], exports: [DxoCandlestickComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickModule });
            } exports("dx", DxoCandlestickModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCandlestickModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCandlestickComponent
                                ],
                                exports: [
                                    DxoCandlestickComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiCenterComponent extends CollectionNestedOption {
                get lat() {
                    return this._getOption('lat');
                }
                set lat(value) {
                    this._setOption('lat', value);
                }
                get lng() {
                    return this._getOption('lng');
                }
                set lng(value) {
                    this._setOption('lng', value);
                }
                get _optionPath() {
                    return 'center';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiCenterComponent, selector: "dxi-center", inputs: { lat: "lat", lng: "lng" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fW", DxiCenterComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-center', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { lat: [{
                            type: Input
                        }], lng: [{
                            type: Input
                        }] } });
            class DxiCenterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterModule, declarations: [DxiCenterComponent], exports: [DxiCenterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterModule });
            } exports("f_", DxiCenterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCenterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiCenterComponent
                                ],
                                exports: [
                                    DxiCenterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiDataChange extends CollectionNestedOption {
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get insertAfterKey() {
                    return this._getOption('insertAfterKey');
                }
                set insertAfterKey(value) {
                    this._setOption('insertAfterKey', value);
                }
                get insertBeforeKey() {
                    return this._getOption('insertBeforeKey');
                }
                set insertBeforeKey(value) {
                    this._setOption('insertBeforeKey', value);
                }
                get key() {
                    return this._getOption('key');
                }
                set key(value) {
                    this._setOption('key', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDataChange, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiDataChange, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDataChange, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiChangeComponent extends DxiDataChange {
                get _optionPath() {
                    return 'changes';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiChangeComponent, selector: "dxi-change", inputs: { data: "data", insertAfterKey: "insertAfterKey", insertBeforeKey: "insertBeforeKey", key: "key", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-change', template: '', providers: [NestedOptionHost], inputs: [
                                    'data',
                                    'insertAfterKey',
                                    'insertBeforeKey',
                                    'key',
                                    'type'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiChangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeModule, declarations: [DxiChangeComponent], exports: [DxiChangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeModule });
            } exports("gW", DxiChangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiChangeComponent
                                ],
                                exports: [
                                    DxiChangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiChartSeries extends CollectionNestedOption {
                get aggregation() {
                    return this._getOption('aggregation');
                }
                set aggregation(value) {
                    this._setOption('aggregation', value);
                }
                get argumentField() {
                    return this._getOption('argumentField');
                }
                set argumentField(value) {
                    this._setOption('argumentField', value);
                }
                get axis() {
                    return this._getOption('axis');
                }
                set axis(value) {
                    this._setOption('axis', value);
                }
                get barOverlapGroup() {
                    return this._getOption('barOverlapGroup');
                }
                set barOverlapGroup(value) {
                    this._setOption('barOverlapGroup', value);
                }
                get barPadding() {
                    return this._getOption('barPadding');
                }
                set barPadding(value) {
                    this._setOption('barPadding', value);
                }
                get barWidth() {
                    return this._getOption('barWidth');
                }
                set barWidth(value) {
                    this._setOption('barWidth', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get closeValueField() {
                    return this._getOption('closeValueField');
                }
                set closeValueField(value) {
                    this._setOption('closeValueField', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get cornerRadius() {
                    return this._getOption('cornerRadius');
                }
                set cornerRadius(value) {
                    this._setOption('cornerRadius', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get highValueField() {
                    return this._getOption('highValueField');
                }
                set highValueField(value) {
                    this._setOption('highValueField', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get ignoreEmptyPoints() {
                    return this._getOption('ignoreEmptyPoints');
                }
                set ignoreEmptyPoints(value) {
                    this._setOption('ignoreEmptyPoints', value);
                }
                get innerColor() {
                    return this._getOption('innerColor');
                }
                set innerColor(value) {
                    this._setOption('innerColor', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get lowValueField() {
                    return this._getOption('lowValueField');
                }
                set lowValueField(value) {
                    this._setOption('lowValueField', value);
                }
                get maxLabelCount() {
                    return this._getOption('maxLabelCount');
                }
                set maxLabelCount(value) {
                    this._setOption('maxLabelCount', value);
                }
                get minBarSize() {
                    return this._getOption('minBarSize');
                }
                set minBarSize(value) {
                    this._setOption('minBarSize', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get openValueField() {
                    return this._getOption('openValueField');
                }
                set openValueField(value) {
                    this._setOption('openValueField', value);
                }
                get pane() {
                    return this._getOption('pane');
                }
                set pane(value) {
                    this._setOption('pane', value);
                }
                get point() {
                    return this._getOption('point');
                }
                set point(value) {
                    this._setOption('point', value);
                }
                get rangeValue1Field() {
                    return this._getOption('rangeValue1Field');
                }
                set rangeValue1Field(value) {
                    this._setOption('rangeValue1Field', value);
                }
                get rangeValue2Field() {
                    return this._getOption('rangeValue2Field');
                }
                set rangeValue2Field(value) {
                    this._setOption('rangeValue2Field', value);
                }
                get reduction() {
                    return this._getOption('reduction');
                }
                set reduction(value) {
                    this._setOption('reduction', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get showInLegend() {
                    return this._getOption('showInLegend');
                }
                set showInLegend(value) {
                    this._setOption('showInLegend', value);
                }
                get sizeField() {
                    return this._getOption('sizeField');
                }
                set sizeField(value) {
                    this._setOption('sizeField', value);
                }
                get stack() {
                    return this._getOption('stack');
                }
                set stack(value) {
                    this._setOption('stack', value);
                }
                get tag() {
                    return this._getOption('tag');
                }
                set tag(value) {
                    this._setOption('tag', value);
                }
                get tagField() {
                    return this._getOption('tagField');
                }
                set tagField(value) {
                    this._setOption('tagField', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueErrorBar() {
                    return this._getOption('valueErrorBar');
                }
                set valueErrorBar(value) {
                    this._setOption('valueErrorBar', value);
                }
                get valueField() {
                    return this._getOption('valueField');
                }
                set valueField(value) {
                    this._setOption('valueField', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get argumentType() {
                    return this._getOption('argumentType');
                }
                set argumentType(value) {
                    this._setOption('argumentType', value);
                }
                get minSegmentSize() {
                    return this._getOption('minSegmentSize');
                }
                set minSegmentSize(value) {
                    this._setOption('minSegmentSize', value);
                }
                get smallValuesGrouping() {
                    return this._getOption('smallValuesGrouping');
                }
                set smallValuesGrouping(value) {
                    this._setOption('smallValuesGrouping', value);
                }
                get closed() {
                    return this._getOption('closed');
                }
                set closed(value) {
                    this._setOption('closed', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChartSeries, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiChartSeries, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiChartSeries, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiSeriesComponent extends DxiChartSeries {
                get _optionPath() {
                    return 'series';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiSeriesComponent, selector: "dxi-series", inputs: { aggregation: "aggregation", argumentField: "argumentField", axis: "axis", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", name: "name", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", stack: "stack", tag: "tag", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", argumentType: "argumentType", minSegmentSize: "minSegmentSize", smallValuesGrouping: "smallValuesGrouping", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cV", DxiSeriesComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-series', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'argumentField',
                                    'axis',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'name',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'stack',
                                    'tag',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'argumentType',
                                    'minSegmentSize',
                                    'smallValuesGrouping',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiSeriesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesModule, declarations: [DxiSeriesComponent], exports: [DxiSeriesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesModule });
            } exports("dZ", DxiSeriesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSeriesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiSeriesComponent
                                ],
                                exports: [
                                    DxiSeriesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoChartComponent extends NestedOption {
                get barGroupPadding() {
                    return this._getOption('barGroupPadding');
                }
                set barGroupPadding(value) {
                    this._setOption('barGroupPadding', value);
                }
                get barGroupWidth() {
                    return this._getOption('barGroupWidth');
                }
                set barGroupWidth(value) {
                    this._setOption('barGroupWidth', value);
                }
                get bottomIndent() {
                    return this._getOption('bottomIndent');
                }
                set bottomIndent(value) {
                    this._setOption('bottomIndent', value);
                }
                get commonSeriesSettings() {
                    return this._getOption('commonSeriesSettings');
                }
                set commonSeriesSettings(value) {
                    this._setOption('commonSeriesSettings', value);
                }
                get dataPrepareSettings() {
                    return this._getOption('dataPrepareSettings');
                }
                set dataPrepareSettings(value) {
                    this._setOption('dataPrepareSettings', value);
                }
                get maxBubbleSize() {
                    return this._getOption('maxBubbleSize');
                }
                set maxBubbleSize(value) {
                    this._setOption('maxBubbleSize', value);
                }
                get minBubbleSize() {
                    return this._getOption('minBubbleSize');
                }
                set minBubbleSize(value) {
                    this._setOption('minBubbleSize', value);
                }
                get negativesAsZeroes() {
                    return this._getOption('negativesAsZeroes');
                }
                set negativesAsZeroes(value) {
                    this._setOption('negativesAsZeroes', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get paletteExtensionMode() {
                    return this._getOption('paletteExtensionMode');
                }
                set paletteExtensionMode(value) {
                    this._setOption('paletteExtensionMode', value);
                }
                get series() {
                    return this._getOption('series');
                }
                set series(value) {
                    this._setOption('series', value);
                }
                get seriesTemplate() {
                    return this._getOption('seriesTemplate');
                }
                set seriesTemplate(value) {
                    this._setOption('seriesTemplate', value);
                }
                get topIndent() {
                    return this._getOption('topIndent');
                }
                set topIndent(value) {
                    this._setOption('topIndent', value);
                }
                get valueAxis() {
                    return this._getOption('valueAxis');
                }
                set valueAxis(value) {
                    this._setOption('valueAxis', value);
                }
                get _optionPath() {
                    return 'chart';
                }
                get seriesChildren() {
                    return this._getOption('series');
                }
                set seriesChildren(value) {
                    this.setChildren('series', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoChartComponent, selector: "dxo-chart", inputs: { barGroupPadding: "barGroupPadding", barGroupWidth: "barGroupWidth", bottomIndent: "bottomIndent", commonSeriesSettings: "commonSeriesSettings", dataPrepareSettings: "dataPrepareSettings", maxBubbleSize: "maxBubbleSize", minBubbleSize: "minBubbleSize", negativesAsZeroes: "negativesAsZeroes", palette: "palette", paletteExtensionMode: "paletteExtensionMode", series: "series", seriesTemplate: "seriesTemplate", topIndent: "topIndent", valueAxis: "valueAxis" }, providers: [NestedOptionHost], queries: [{ propertyName: "seriesChildren", predicate: i0.forwardRef(() => DxiSeriesComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-chart', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { barGroupPadding: [{
                            type: Input
                        }], barGroupWidth: [{
                            type: Input
                        }], bottomIndent: [{
                            type: Input
                        }], commonSeriesSettings: [{
                            type: Input
                        }], dataPrepareSettings: [{
                            type: Input
                        }], maxBubbleSize: [{
                            type: Input
                        }], minBubbleSize: [{
                            type: Input
                        }], negativesAsZeroes: [{
                            type: Input
                        }], palette: [{
                            type: Input
                        }], paletteExtensionMode: [{
                            type: Input
                        }], series: [{
                            type: Input
                        }], seriesTemplate: [{
                            type: Input
                        }], topIndent: [{
                            type: Input
                        }], valueAxis: [{
                            type: Input
                        }], seriesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiSeriesComponent)]
                        }] } });
            class DxoChartModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoChartModule, declarations: [DxoChartComponent], exports: [DxoChartComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartModule });
            } exports("go", DxoChartModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoChartComponent
                                ],
                                exports: [
                                    DxoChartComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColCountByScreenComponent extends NestedOption {
                get lg() {
                    return this._getOption('lg');
                }
                set lg(value) {
                    this._setOption('lg', value);
                }
                get md() {
                    return this._getOption('md');
                }
                set md(value) {
                    this._setOption('md', value);
                }
                get sm() {
                    return this._getOption('sm');
                }
                set sm(value) {
                    this._setOption('sm', value);
                }
                get xs() {
                    return this._getOption('xs');
                }
                set xs(value) {
                    this._setOption('xs', value);
                }
                get _optionPath() {
                    return 'colCountByScreen';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColCountByScreenComponent, selector: "dxo-col-count-by-screen", inputs: { lg: "lg", md: "md", sm: "sm", xs: "xs" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-col-count-by-screen', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { lg: [{
                            type: Input
                        }], md: [{
                            type: Input
                        }], sm: [{
                            type: Input
                        }], xs: [{
                            type: Input
                        }] } });
            class DxoColCountByScreenModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenModule, declarations: [DxoColCountByScreenComponent], exports: [DxoColCountByScreenComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenModule });
            } exports("fj", DxoColCountByScreenModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColCountByScreenModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColCountByScreenComponent
                                ],
                                exports: [
                                    DxoColCountByScreenComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiColComponent extends CollectionNestedOption {
                get baseSize() {
                    return this._getOption('baseSize');
                }
                set baseSize(value) {
                    this._setOption('baseSize', value);
                }
                get ratio() {
                    return this._getOption('ratio');
                }
                set ratio(value) {
                    this._setOption('ratio', value);
                }
                get screen() {
                    return this._getOption('screen');
                }
                set screen(value) {
                    this._setOption('screen', value);
                }
                get shrink() {
                    return this._getOption('shrink');
                }
                set shrink(value) {
                    this._setOption('shrink', value);
                }
                get _optionPath() {
                    return 'cols';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiColComponent, selector: "dxi-col", inputs: { baseSize: "baseSize", ratio: "ratio", screen: "screen", shrink: "shrink" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("gy", DxiColComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-col', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { baseSize: [{
                            type: Input
                        }], ratio: [{
                            type: Input
                        }], screen: [{
                            type: Input
                        }], shrink: [{
                            type: Input
                        }] } });
            class DxiColModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiColModule, declarations: [DxiColComponent], exports: [DxiColComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColModule });
            } exports("gA", DxiColModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiColComponent
                                ],
                                exports: [
                                    DxiColComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCollisionComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'collision';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCollisionComponent, selector: "dxo-collision", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-collision', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoCollisionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionModule, declarations: [DxoCollisionComponent], exports: [DxoCollisionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionModule });
            } exports("c0", DxoCollisionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCollisionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCollisionComponent
                                ],
                                exports: [
                                    DxoCollisionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoColorComponent extends DxoChartsColor {
                get _optionPath() {
                    return 'color';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColorComponent, selector: "dxo-color", inputs: { base: "base", fillId: "fillId" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-color', template: '', providers: [NestedOptionHost], inputs: [
                                    'base',
                                    'fillId'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoColorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColorModule, declarations: [DxoColorComponent], exports: [DxoColorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorModule });
            } exports("dy", DxoColorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColorComponent
                                ],
                                exports: [
                                    DxoColorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColorizerComponent extends NestedOption {
                get colorCodeField() {
                    return this._getOption('colorCodeField');
                }
                set colorCodeField(value) {
                    this._setOption('colorCodeField', value);
                }
                get colorizeGroups() {
                    return this._getOption('colorizeGroups');
                }
                set colorizeGroups(value) {
                    this._setOption('colorizeGroups', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get paletteExtensionMode() {
                    return this._getOption('paletteExtensionMode');
                }
                set paletteExtensionMode(value) {
                    this._setOption('paletteExtensionMode', value);
                }
                get range() {
                    return this._getOption('range');
                }
                set range(value) {
                    this._setOption('range', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'colorizer';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColorizerComponent, selector: "dxo-colorizer", inputs: { colorCodeField: "colorCodeField", colorizeGroups: "colorizeGroups", palette: "palette", paletteExtensionMode: "paletteExtensionMode", range: "range", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-colorizer', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { colorCodeField: [{
                            type: Input
                        }], colorizeGroups: [{
                            type: Input
                        }], palette: [{
                            type: Input
                        }], paletteExtensionMode: [{
                            type: Input
                        }], range: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxoColorizerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerModule, declarations: [DxoColorizerComponent], exports: [DxoColorizerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerModule });
            } exports("h6", DxoColorizerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColorizerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColorizerComponent
                                ],
                                exports: [
                                    DxoColorizerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColumnChooserComponent extends NestedOption {
                get allowSearch() {
                    return this._getOption('allowSearch');
                }
                set allowSearch(value) {
                    this._setOption('allowSearch', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get emptyPanelText() {
                    return this._getOption('emptyPanelText');
                }
                set emptyPanelText(value) {
                    this._setOption('emptyPanelText', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get search() {
                    return this._getOption('search');
                }
                set search(value) {
                    this._setOption('search', value);
                }
                get searchTimeout() {
                    return this._getOption('searchTimeout');
                }
                set searchTimeout(value) {
                    this._setOption('searchTimeout', value);
                }
                get selection() {
                    return this._getOption('selection');
                }
                set selection(value) {
                    this._setOption('selection', value);
                }
                get sortOrder() {
                    return this._getOption('sortOrder');
                }
                set sortOrder(value) {
                    this._setOption('sortOrder', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'columnChooser';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColumnChooserComponent, selector: "dxo-column-chooser", inputs: { allowSearch: "allowSearch", container: "container", emptyPanelText: "emptyPanelText", enabled: "enabled", height: "height", mode: "mode", position: "position", search: "search", searchTimeout: "searchTimeout", selection: "selection", sortOrder: "sortOrder", title: "title", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-column-chooser', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowSearch: [{
                            type: Input
                        }], container: [{
                            type: Input
                        }], emptyPanelText: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], search: [{
                            type: Input
                        }], searchTimeout: [{
                            type: Input
                        }], selection: [{
                            type: Input
                        }], sortOrder: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoColumnChooserModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserModule, declarations: [DxoColumnChooserComponent], exports: [DxoColumnChooserComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserModule });
            } exports("gS", DxoColumnChooserModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColumnChooserComponent
                                ],
                                exports: [
                                    DxoColumnChooserComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiDataGridColumn extends CollectionNestedOption {
                get alignment() {
                    return this._getOption('alignment');
                }
                set alignment(value) {
                    this._setOption('alignment', value);
                }
                get allowEditing() {
                    return this._getOption('allowEditing');
                }
                set allowEditing(value) {
                    this._setOption('allowEditing', value);
                }
                get allowExporting() {
                    return this._getOption('allowExporting');
                }
                set allowExporting(value) {
                    this._setOption('allowExporting', value);
                }
                get allowFiltering() {
                    return this._getOption('allowFiltering');
                }
                set allowFiltering(value) {
                    this._setOption('allowFiltering', value);
                }
                get allowFixing() {
                    return this._getOption('allowFixing');
                }
                set allowFixing(value) {
                    this._setOption('allowFixing', value);
                }
                get allowGrouping() {
                    return this._getOption('allowGrouping');
                }
                set allowGrouping(value) {
                    this._setOption('allowGrouping', value);
                }
                get allowHeaderFiltering() {
                    return this._getOption('allowHeaderFiltering');
                }
                set allowHeaderFiltering(value) {
                    this._setOption('allowHeaderFiltering', value);
                }
                get allowHiding() {
                    return this._getOption('allowHiding');
                }
                set allowHiding(value) {
                    this._setOption('allowHiding', value);
                }
                get allowReordering() {
                    return this._getOption('allowReordering');
                }
                set allowReordering(value) {
                    this._setOption('allowReordering', value);
                }
                get allowResizing() {
                    return this._getOption('allowResizing');
                }
                set allowResizing(value) {
                    this._setOption('allowResizing', value);
                }
                get allowSearch() {
                    return this._getOption('allowSearch');
                }
                set allowSearch(value) {
                    this._setOption('allowSearch', value);
                }
                get allowSorting() {
                    return this._getOption('allowSorting');
                }
                set allowSorting(value) {
                    this._setOption('allowSorting', value);
                }
                get autoExpandGroup() {
                    return this._getOption('autoExpandGroup');
                }
                set autoExpandGroup(value) {
                    this._setOption('autoExpandGroup', value);
                }
                get buttons() {
                    return this._getOption('buttons');
                }
                set buttons(value) {
                    this._setOption('buttons', value);
                }
                get calculateCellValue() {
                    return this._getOption('calculateCellValue');
                }
                set calculateCellValue(value) {
                    this._setOption('calculateCellValue', value);
                }
                get calculateDisplayValue() {
                    return this._getOption('calculateDisplayValue');
                }
                set calculateDisplayValue(value) {
                    this._setOption('calculateDisplayValue', value);
                }
                get calculateFilterExpression() {
                    return this._getOption('calculateFilterExpression');
                }
                set calculateFilterExpression(value) {
                    this._setOption('calculateFilterExpression', value);
                }
                get calculateGroupValue() {
                    return this._getOption('calculateGroupValue');
                }
                set calculateGroupValue(value) {
                    this._setOption('calculateGroupValue', value);
                }
                get calculateSortValue() {
                    return this._getOption('calculateSortValue');
                }
                set calculateSortValue(value) {
                    this._setOption('calculateSortValue', value);
                }
                get caption() {
                    return this._getOption('caption');
                }
                set caption(value) {
                    this._setOption('caption', value);
                }
                get cellTemplate() {
                    return this._getOption('cellTemplate');
                }
                set cellTemplate(value) {
                    this._setOption('cellTemplate', value);
                }
                get columns() {
                    return this._getOption('columns');
                }
                set columns(value) {
                    this._setOption('columns', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get dataType() {
                    return this._getOption('dataType');
                }
                set dataType(value) {
                    this._setOption('dataType', value);
                }
                get editCellTemplate() {
                    return this._getOption('editCellTemplate');
                }
                set editCellTemplate(value) {
                    this._setOption('editCellTemplate', value);
                }
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get encodeHtml() {
                    return this._getOption('encodeHtml');
                }
                set encodeHtml(value) {
                    this._setOption('encodeHtml', value);
                }
                get falseText() {
                    return this._getOption('falseText');
                }
                set falseText(value) {
                    this._setOption('falseText', value);
                }
                get filterOperations() {
                    return this._getOption('filterOperations');
                }
                set filterOperations(value) {
                    this._setOption('filterOperations', value);
                }
                get filterType() {
                    return this._getOption('filterType');
                }
                set filterType(value) {
                    this._setOption('filterType', value);
                }
                get filterValue() {
                    return this._getOption('filterValue');
                }
                set filterValue(value) {
                    this._setOption('filterValue', value);
                }
                get filterValues() {
                    return this._getOption('filterValues');
                }
                set filterValues(value) {
                    this._setOption('filterValues', value);
                }
                get fixed() {
                    return this._getOption('fixed');
                }
                set fixed(value) {
                    this._setOption('fixed', value);
                }
                get fixedPosition() {
                    return this._getOption('fixedPosition');
                }
                set fixedPosition(value) {
                    this._setOption('fixedPosition', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get formItem() {
                    return this._getOption('formItem');
                }
                set formItem(value) {
                    this._setOption('formItem', value);
                }
                get groupCellTemplate() {
                    return this._getOption('groupCellTemplate');
                }
                set groupCellTemplate(value) {
                    this._setOption('groupCellTemplate', value);
                }
                get groupIndex() {
                    return this._getOption('groupIndex');
                }
                set groupIndex(value) {
                    this._setOption('groupIndex', value);
                }
                get headerCellTemplate() {
                    return this._getOption('headerCellTemplate');
                }
                set headerCellTemplate(value) {
                    this._setOption('headerCellTemplate', value);
                }
                get headerFilter() {
                    return this._getOption('headerFilter');
                }
                set headerFilter(value) {
                    this._setOption('headerFilter', value);
                }
                get hidingPriority() {
                    return this._getOption('hidingPriority');
                }
                set hidingPriority(value) {
                    this._setOption('hidingPriority', value);
                }
                get isBand() {
                    return this._getOption('isBand');
                }
                set isBand(value) {
                    this._setOption('isBand', value);
                }
                get lookup() {
                    return this._getOption('lookup');
                }
                set lookup(value) {
                    this._setOption('lookup', value);
                }
                get minWidth() {
                    return this._getOption('minWidth');
                }
                set minWidth(value) {
                    this._setOption('minWidth', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get ownerBand() {
                    return this._getOption('ownerBand');
                }
                set ownerBand(value) {
                    this._setOption('ownerBand', value);
                }
                get renderAsync() {
                    return this._getOption('renderAsync');
                }
                set renderAsync(value) {
                    this._setOption('renderAsync', value);
                }
                get selectedFilterOperation() {
                    return this._getOption('selectedFilterOperation');
                }
                set selectedFilterOperation(value) {
                    this._setOption('selectedFilterOperation', value);
                }
                get setCellValue() {
                    return this._getOption('setCellValue');
                }
                set setCellValue(value) {
                    this._setOption('setCellValue', value);
                }
                get showEditorAlways() {
                    return this._getOption('showEditorAlways');
                }
                set showEditorAlways(value) {
                    this._setOption('showEditorAlways', value);
                }
                get showInColumnChooser() {
                    return this._getOption('showInColumnChooser');
                }
                set showInColumnChooser(value) {
                    this._setOption('showInColumnChooser', value);
                }
                get showWhenGrouped() {
                    return this._getOption('showWhenGrouped');
                }
                set showWhenGrouped(value) {
                    this._setOption('showWhenGrouped', value);
                }
                get sortIndex() {
                    return this._getOption('sortIndex');
                }
                set sortIndex(value) {
                    this._setOption('sortIndex', value);
                }
                get sortingMethod() {
                    return this._getOption('sortingMethod');
                }
                set sortingMethod(value) {
                    this._setOption('sortingMethod', value);
                }
                get sortOrder() {
                    return this._getOption('sortOrder');
                }
                set sortOrder(value) {
                    this._setOption('sortOrder', value);
                }
                get trueText() {
                    return this._getOption('trueText');
                }
                set trueText(value) {
                    this._setOption('trueText', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get validationRules() {
                    return this._getOption('validationRules');
                }
                set validationRules(value) {
                    this._setOption('validationRules', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visibleIndex() {
                    return this._getOption('visibleIndex');
                }
                set visibleIndex(value) {
                    this._setOption('visibleIndex', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDataGridColumn, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiDataGridColumn, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiDataGridColumn, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiColumnComponent extends DxiDataGridColumn {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterValueChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterValuesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                groupIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectedFilterOperationChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                sortIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                sortOrderChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleIndexChange;
                get _optionPath() {
                    return 'columns';
                }
                get buttonsChildren() {
                    return this._getOption('buttons');
                }
                set buttonsChildren(value) {
                    this.setChildren('buttons', value);
                }
                get columnsChildren() {
                    return this._getOption('columns');
                }
                set columnsChildren(value) {
                    this.setChildren('columns', value);
                }
                get validationRulesChildren() {
                    return this._getOption('validationRules');
                }
                set validationRulesChildren(value) {
                    this.setChildren('validationRules', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'filterValueChange' },
                        { emit: 'filterValuesChange' },
                        { emit: 'groupIndexChange' },
                        { emit: 'selectedFilterOperationChange' },
                        { emit: 'sortIndexChange' },
                        { emit: 'sortOrderChange' },
                        { emit: 'visibleChange' },
                        { emit: 'visibleIndexChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiColumnComponent, selector: "dxi-column", inputs: { alignment: "alignment", allowEditing: "allowEditing", allowExporting: "allowExporting", allowFiltering: "allowFiltering", allowFixing: "allowFixing", allowGrouping: "allowGrouping", allowHeaderFiltering: "allowHeaderFiltering", allowHiding: "allowHiding", allowReordering: "allowReordering", allowResizing: "allowResizing", allowSearch: "allowSearch", allowSorting: "allowSorting", autoExpandGroup: "autoExpandGroup", buttons: "buttons", calculateCellValue: "calculateCellValue", calculateDisplayValue: "calculateDisplayValue", calculateFilterExpression: "calculateFilterExpression", calculateGroupValue: "calculateGroupValue", calculateSortValue: "calculateSortValue", caption: "caption", cellTemplate: "cellTemplate", columns: "columns", cssClass: "cssClass", customizeText: "customizeText", dataField: "dataField", dataType: "dataType", editCellTemplate: "editCellTemplate", editorOptions: "editorOptions", encodeHtml: "encodeHtml", falseText: "falseText", filterOperations: "filterOperations", filterType: "filterType", filterValue: "filterValue", filterValues: "filterValues", fixed: "fixed", fixedPosition: "fixedPosition", format: "format", formItem: "formItem", groupCellTemplate: "groupCellTemplate", groupIndex: "groupIndex", headerCellTemplate: "headerCellTemplate", headerFilter: "headerFilter", hidingPriority: "hidingPriority", isBand: "isBand", lookup: "lookup", minWidth: "minWidth", name: "name", ownerBand: "ownerBand", renderAsync: "renderAsync", selectedFilterOperation: "selectedFilterOperation", setCellValue: "setCellValue", showEditorAlways: "showEditorAlways", showInColumnChooser: "showInColumnChooser", showWhenGrouped: "showWhenGrouped", sortIndex: "sortIndex", sortingMethod: "sortingMethod", sortOrder: "sortOrder", trueText: "trueText", type: "type", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex", width: "width" }, outputs: { filterValueChange: "filterValueChange", filterValuesChange: "filterValuesChange", groupIndexChange: "groupIndexChange", selectedFilterOperationChange: "selectedFilterOperationChange", sortIndexChange: "sortIndexChange", sortOrderChange: "sortOrderChange", visibleChange: "visibleChange", visibleIndexChange: "visibleIndexChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "buttonsChildren", predicate: i0.forwardRef(() => DxiButtonComponent) }, { propertyName: "columnsChildren", predicate: i0.forwardRef(() => DxiColumnComponent) }, { propertyName: "validationRulesChildren", predicate: i0.forwardRef(() => DxiValidationRuleComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fr", DxiColumnComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-column', template: '', providers: [NestedOptionHost], inputs: [
                                    'alignment',
                                    'allowEditing',
                                    'allowExporting',
                                    'allowFiltering',
                                    'allowFixing',
                                    'allowGrouping',
                                    'allowHeaderFiltering',
                                    'allowHiding',
                                    'allowReordering',
                                    'allowResizing',
                                    'allowSearch',
                                    'allowSorting',
                                    'autoExpandGroup',
                                    'buttons',
                                    'calculateCellValue',
                                    'calculateDisplayValue',
                                    'calculateFilterExpression',
                                    'calculateGroupValue',
                                    'calculateSortValue',
                                    'caption',
                                    'cellTemplate',
                                    'columns',
                                    'cssClass',
                                    'customizeText',
                                    'dataField',
                                    'dataType',
                                    'editCellTemplate',
                                    'editorOptions',
                                    'encodeHtml',
                                    'falseText',
                                    'filterOperations',
                                    'filterType',
                                    'filterValue',
                                    'filterValues',
                                    'fixed',
                                    'fixedPosition',
                                    'format',
                                    'formItem',
                                    'groupCellTemplate',
                                    'groupIndex',
                                    'headerCellTemplate',
                                    'headerFilter',
                                    'hidingPriority',
                                    'isBand',
                                    'lookup',
                                    'minWidth',
                                    'name',
                                    'ownerBand',
                                    'renderAsync',
                                    'selectedFilterOperation',
                                    'setCellValue',
                                    'showEditorAlways',
                                    'showInColumnChooser',
                                    'showWhenGrouped',
                                    'sortIndex',
                                    'sortingMethod',
                                    'sortOrder',
                                    'trueText',
                                    'type',
                                    'validationRules',
                                    'visible',
                                    'visibleIndex',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { filterValueChange: [{
                            type: Output
                        }], filterValuesChange: [{
                            type: Output
                        }], groupIndexChange: [{
                            type: Output
                        }], selectedFilterOperationChange: [{
                            type: Output
                        }], sortIndexChange: [{
                            type: Output
                        }], sortOrderChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], visibleIndexChange: [{
                            type: Output
                        }], buttonsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiButtonComponent)]
                        }], columnsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiColumnComponent)]
                        }], validationRulesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiValidationRuleComponent)]
                        }] } });
            class DxiColumnModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnModule, declarations: [DxiColumnComponent], exports: [DxiColumnComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnModule });
            } exports("f6", DxiColumnModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiColumnModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiColumnComponent
                                ],
                                exports: [
                                    DxiColumnComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColumnFixingComponent extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get _optionPath() {
                    return 'columnFixing';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColumnFixingComponent, selector: "dxo-column-fixing", inputs: { enabled: "enabled", texts: "texts" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-column-fixing', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { enabled: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }] } });
            class DxoColumnFixingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingModule, declarations: [DxoColumnFixingComponent], exports: [DxoColumnFixingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingModule });
            } exports("gU", DxoColumnFixingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnFixingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoColumnFixingComponent
                                ],
                                exports: [
                                    DxoColumnFixingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoChartCommonAnnotationConfig extends NestedOption {
                get allowDragging() {
                    return this._getOption('allowDragging');
                }
                set allowDragging(value) {
                    this._setOption('allowDragging', value);
                }
                get argument() {
                    return this._getOption('argument');
                }
                set argument(value) {
                    this._setOption('argument', value);
                }
                get arrowLength() {
                    return this._getOption('arrowLength');
                }
                set arrowLength(value) {
                    this._setOption('arrowLength', value);
                }
                get arrowWidth() {
                    return this._getOption('arrowWidth');
                }
                set arrowWidth(value) {
                    this._setOption('arrowWidth', value);
                }
                get axis() {
                    return this._getOption('axis');
                }
                set axis(value) {
                    this._setOption('axis', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get customizeTooltip() {
                    return this._getOption('customizeTooltip');
                }
                set customizeTooltip(value) {
                    this._setOption('customizeTooltip', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get description() {
                    return this._getOption('description');
                }
                set description(value) {
                    this._setOption('description', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get image() {
                    return this._getOption('image');
                }
                set image(value) {
                    this._setOption('image', value);
                }
                get offsetX() {
                    return this._getOption('offsetX');
                }
                set offsetX(value) {
                    this._setOption('offsetX', value);
                }
                get offsetY() {
                    return this._getOption('offsetY');
                }
                set offsetY(value) {
                    this._setOption('offsetY', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get series() {
                    return this._getOption('series');
                }
                set series(value) {
                    this._setOption('series', value);
                }
                get shadow() {
                    return this._getOption('shadow');
                }
                set shadow(value) {
                    this._setOption('shadow', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get tooltipEnabled() {
                    return this._getOption('tooltipEnabled');
                }
                set tooltipEnabled(value) {
                    this._setOption('tooltipEnabled', value);
                }
                get tooltipTemplate() {
                    return this._getOption('tooltipTemplate');
                }
                set tooltipTemplate(value) {
                    this._setOption('tooltipTemplate', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get angle() {
                    return this._getOption('angle');
                }
                set angle(value) {
                    this._setOption('angle', value);
                }
                get radius() {
                    return this._getOption('radius');
                }
                set radius(value) {
                    this._setOption('radius', value);
                }
                get coordinates() {
                    return this._getOption('coordinates');
                }
                set coordinates(value) {
                    this._setOption('coordinates', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartCommonAnnotationConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoChartCommonAnnotationConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoChartCommonAnnotationConfig, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoCommonAnnotationSettingsComponent extends DxoChartCommonAnnotationConfig {
                get _optionPath() {
                    return 'commonAnnotationSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCommonAnnotationSettingsComponent, selector: "dxo-common-annotation-settings", inputs: { allowDragging: "allowDragging", argument: "argument", arrowLength: "arrowLength", arrowWidth: "arrowWidth", axis: "axis", border: "border", color: "color", customizeTooltip: "customizeTooltip", data: "data", description: "description", font: "font", height: "height", image: "image", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", series: "series", shadow: "shadow", template: "template", text: "text", textOverflow: "textOverflow", tooltipEnabled: "tooltipEnabled", tooltipTemplate: "tooltipTemplate", type: "type", value: "value", width: "width", wordWrap: "wordWrap", x: "x", y: "y", location: "location", angle: "angle", radius: "radius", coordinates: "coordinates" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-common-annotation-settings', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowDragging',
                                    'argument',
                                    'arrowLength',
                                    'arrowWidth',
                                    'axis',
                                    'border',
                                    'color',
                                    'customizeTooltip',
                                    'data',
                                    'description',
                                    'font',
                                    'height',
                                    'image',
                                    'offsetX',
                                    'offsetY',
                                    'opacity',
                                    'paddingLeftRight',
                                    'paddingTopBottom',
                                    'series',
                                    'shadow',
                                    'template',
                                    'text',
                                    'textOverflow',
                                    'tooltipEnabled',
                                    'tooltipTemplate',
                                    'type',
                                    'value',
                                    'width',
                                    'wordWrap',
                                    'x',
                                    'y',
                                    'location',
                                    'angle',
                                    'radius',
                                    'coordinates'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoCommonAnnotationSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsModule, declarations: [DxoCommonAnnotationSettingsComponent], exports: [DxoCommonAnnotationSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsModule });
            } exports("dd", DxoCommonAnnotationSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAnnotationSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCommonAnnotationSettingsComponent
                                ],
                                exports: [
                                    DxoCommonAnnotationSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCommonAxisSettingsComponent extends NestedOption {
                get aggregatedPointsPosition() {
                    return this._getOption('aggregatedPointsPosition');
                }
                set aggregatedPointsPosition(value) {
                    this._setOption('aggregatedPointsPosition', value);
                }
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get breakStyle() {
                    return this._getOption('breakStyle');
                }
                set breakStyle(value) {
                    this._setOption('breakStyle', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get constantLineStyle() {
                    return this._getOption('constantLineStyle');
                }
                set constantLineStyle(value) {
                    this._setOption('constantLineStyle', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get grid() {
                    return this._getOption('grid');
                }
                set grid(value) {
                    this._setOption('grid', value);
                }
                get inverted() {
                    return this._getOption('inverted');
                }
                set inverted(value) {
                    this._setOption('inverted', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get maxValueMargin() {
                    return this._getOption('maxValueMargin');
                }
                set maxValueMargin(value) {
                    this._setOption('maxValueMargin', value);
                }
                get minorGrid() {
                    return this._getOption('minorGrid');
                }
                set minorGrid(value) {
                    this._setOption('minorGrid', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minValueMargin() {
                    return this._getOption('minValueMargin');
                }
                set minValueMargin(value) {
                    this._setOption('minValueMargin', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get placeholderSize() {
                    return this._getOption('placeholderSize');
                }
                set placeholderSize(value) {
                    this._setOption('placeholderSize', value);
                }
                get stripStyle() {
                    return this._getOption('stripStyle');
                }
                set stripStyle(value) {
                    this._setOption('stripStyle', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get valueMarginsEnabled() {
                    return this._getOption('valueMarginsEnabled');
                }
                set valueMarginsEnabled(value) {
                    this._setOption('valueMarginsEnabled', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'commonAxisSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCommonAxisSettingsComponent, selector: "dxo-common-axis-settings", inputs: { aggregatedPointsPosition: "aggregatedPointsPosition", allowDecimals: "allowDecimals", breakStyle: "breakStyle", color: "color", constantLineStyle: "constantLineStyle", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minValueMargin: "minValueMargin", opacity: "opacity", placeholderSize: "placeholderSize", stripStyle: "stripStyle", tick: "tick", title: "title", valueMarginsEnabled: "valueMarginsEnabled", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-common-axis-settings', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { aggregatedPointsPosition: [{
                            type: Input
                        }], allowDecimals: [{
                            type: Input
                        }], breakStyle: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], constantLineStyle: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], grid: [{
                            type: Input
                        }], inverted: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], maxValueMargin: [{
                            type: Input
                        }], minorGrid: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minValueMargin: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], placeholderSize: [{
                            type: Input
                        }], stripStyle: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], valueMarginsEnabled: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoCommonAxisSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsModule, declarations: [DxoCommonAxisSettingsComponent], exports: [DxoCommonAxisSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsModule });
            } exports("de", DxoCommonAxisSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonAxisSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCommonAxisSettingsComponent
                                ],
                                exports: [
                                    DxoCommonAxisSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCommonPaneSettingsComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get _optionPath() {
                    return 'commonPaneSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCommonPaneSettingsComponent, selector: "dxo-common-pane-settings", inputs: { backgroundColor: "backgroundColor", border: "border" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-common-pane-settings', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }] } });
            class DxoCommonPaneSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsModule, declarations: [DxoCommonPaneSettingsComponent], exports: [DxoCommonPaneSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsModule });
            } exports("df", DxoCommonPaneSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonPaneSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCommonPaneSettingsComponent
                                ],
                                exports: [
                                    DxoCommonPaneSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoCommonSeriesSettingsComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'commonSeriesSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCommonSeriesSettingsComponent, selector: "dxo-common-series-settings", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", argumentType: "argumentType", minSegmentSize: "minSegmentSize", smallValuesGrouping: "smallValuesGrouping", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-common-series-settings', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'argumentType',
                                    'minSegmentSize',
                                    'smallValuesGrouping',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoCommonSeriesSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsModule, declarations: [DxoCommonSeriesSettingsComponent], exports: [DxoCommonSeriesSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsModule });
            } exports("dh", DxoCommonSeriesSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCommonSeriesSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCommonSeriesSettingsComponent
                                ],
                                exports: [
                                    DxoCommonSeriesSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiConnectionPointComponent extends CollectionNestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'connectionPoints';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiConnectionPointComponent, selector: "dxi-connection-point", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-connection-point', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxiConnectionPointModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointModule, declarations: [DxiConnectionPointComponent], exports: [DxiConnectionPointComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointModule });
            } exports("eK", DxiConnectionPointModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiConnectionPointModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiConnectionPointComponent
                                ],
                                exports: [
                                    DxiConnectionPointComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoConnectorComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'connector';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoConnectorComponent, selector: "dxo-connector", inputs: { color: "color", visible: "visible", width: "width", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-connector', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoConnectorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorModule, declarations: [DxoConnectorComponent], exports: [DxoConnectorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorModule });
            } exports("dm", DxoConnectorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConnectorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoConnectorComponent
                                ],
                                exports: [
                                    DxoConnectorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoConstantLineStyleComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'constantLineStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoConstantLineStyleComponent, selector: "dxo-constant-line-style", inputs: { color: "color", dashStyle: "dashStyle", label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-constant-line-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoConstantLineStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleModule, declarations: [DxoConstantLineStyleComponent], exports: [DxoConstantLineStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleModule });
            } exports("d3", DxoConstantLineStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoConstantLineStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoConstantLineStyleComponent
                                ],
                                exports: [
                                    DxoConstantLineStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFileManagerContextMenu extends NestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileManagerContextMenu, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFileManagerContextMenu, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileManagerContextMenu, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoContextMenuComponent extends DxoFileManagerContextMenu {
                get _optionPath() {
                    return 'contextMenu';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoContextMenuComponent, selector: "dxo-context-menu", inputs: { commands: "commands", enabled: "enabled", items: "items" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }, { propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-context-menu', template: '', providers: [NestedOptionHost], inputs: [
                                    'commands',
                                    'enabled',
                                    'items'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoContextMenuModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuModule, declarations: [DxoContextMenuComponent], exports: [DxoContextMenuComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuModule });
            } exports("eG", DxoContextMenuModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextMenuModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoContextMenuComponent
                                ],
                                exports: [
                                    DxoContextMenuComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoContextToolboxComponent extends NestedOption {
                get category() {
                    return this._getOption('category');
                }
                set category(value) {
                    this._setOption('category', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get shapeIconsPerRow() {
                    return this._getOption('shapeIconsPerRow');
                }
                set shapeIconsPerRow(value) {
                    this._setOption('shapeIconsPerRow', value);
                }
                get shapes() {
                    return this._getOption('shapes');
                }
                set shapes(value) {
                    this._setOption('shapes', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'contextToolbox';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoContextToolboxComponent, selector: "dxo-context-toolbox", inputs: { category: "category", displayMode: "displayMode", enabled: "enabled", shapeIconsPerRow: "shapeIconsPerRow", shapes: "shapes", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-context-toolbox', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { category: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], shapeIconsPerRow: [{
                            type: Input
                        }], shapes: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoContextToolboxModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxModule, declarations: [DxoContextToolboxComponent], exports: [DxoContextToolboxComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxModule });
            } exports("eI", DxoContextToolboxModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoContextToolboxModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoContextToolboxComponent
                                ],
                                exports: [
                                    DxoContextToolboxComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoControlBarComponent extends NestedOption {
                get borderColor() {
                    return this._getOption('borderColor');
                }
                set borderColor(value) {
                    this._setOption('borderColor', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get panVisible() {
                    return this._getOption('panVisible');
                }
                set panVisible(value) {
                    this._setOption('panVisible', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get zoomVisible() {
                    return this._getOption('zoomVisible');
                }
                set zoomVisible(value) {
                    this._setOption('zoomVisible', value);
                }
                get _optionPath() {
                    return 'controlBar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoControlBarComponent, selector: "dxo-control-bar", inputs: { borderColor: "borderColor", color: "color", enabled: "enabled", horizontalAlignment: "horizontalAlignment", margin: "margin", opacity: "opacity", panVisible: "panVisible", verticalAlignment: "verticalAlignment", zoomVisible: "zoomVisible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-control-bar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { borderColor: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], panVisible: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], zoomVisible: [{
                            type: Input
                        }] } });
            class DxoControlBarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarModule, declarations: [DxoControlBarComponent], exports: [DxoControlBarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarModule });
            } exports("he", DxoControlBarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoControlBarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoControlBarComponent
                                ],
                                exports: [
                                    DxoControlBarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCrosshairComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get horizontalLine() {
                    return this._getOption('horizontalLine');
                }
                set horizontalLine(value) {
                    this._setOption('horizontalLine', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get verticalLine() {
                    return this._getOption('verticalLine');
                }
                set verticalLine(value) {
                    this._setOption('verticalLine', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'crosshair';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCrosshairComponent, selector: "dxo-crosshair", inputs: { color: "color", dashStyle: "dashStyle", enabled: "enabled", horizontalLine: "horizontalLine", label: "label", opacity: "opacity", verticalLine: "verticalLine", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-crosshair', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], horizontalLine: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], verticalLine: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoCrosshairModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairModule, declarations: [DxoCrosshairComponent], exports: [DxoCrosshairComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairModule });
            } exports("dT", DxoCrosshairModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCrosshairModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCrosshairComponent
                                ],
                                exports: [
                                    DxoCrosshairComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoCursorOffsetComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'cursorOffset';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoCursorOffsetComponent, selector: "dxo-cursor-offset", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-cursor-offset', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoCursorOffsetModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetModule, declarations: [DxoCursorOffsetComponent], exports: [DxoCursorOffsetComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetModule });
            } exports("e_", DxoCursorOffsetModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoCursorOffsetModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoCursorOffsetComponent
                                ],
                                exports: [
                                    DxoCursorOffsetComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiFilterBuilderCustomOperation extends CollectionNestedOption {
                get calculateFilterExpression() {
                    return this._getOption('calculateFilterExpression');
                }
                set calculateFilterExpression(value) {
                    this._setOption('calculateFilterExpression', value);
                }
                get caption() {
                    return this._getOption('caption');
                }
                set caption(value) {
                    this._setOption('caption', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get dataTypes() {
                    return this._getOption('dataTypes');
                }
                set dataTypes(value) {
                    this._setOption('dataTypes', value);
                }
                get editorTemplate() {
                    return this._getOption('editorTemplate');
                }
                set editorTemplate(value) {
                    this._setOption('editorTemplate', value);
                }
                get hasValue() {
                    return this._getOption('hasValue');
                }
                set hasValue(value) {
                    this._setOption('hasValue', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFilterBuilderCustomOperation, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFilterBuilderCustomOperation, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFilterBuilderCustomOperation, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiCustomOperationComponent extends DxiFilterBuilderCustomOperation {
                get _optionPath() {
                    return 'customOperations';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiCustomOperationComponent, selector: "dxi-custom-operation", inputs: { calculateFilterExpression: "calculateFilterExpression", caption: "caption", customizeText: "customizeText", dataTypes: "dataTypes", editorTemplate: "editorTemplate", hasValue: "hasValue", icon: "icon", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fc", DxiCustomOperationComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-custom-operation', template: '', providers: [NestedOptionHost], inputs: [
                                    'calculateFilterExpression',
                                    'caption',
                                    'customizeText',
                                    'dataTypes',
                                    'editorTemplate',
                                    'hasValue',
                                    'icon',
                                    'name'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiCustomOperationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationModule, declarations: [DxiCustomOperationComponent], exports: [DxiCustomOperationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationModule });
            } exports("fe", DxiCustomOperationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomOperationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiCustomOperationComponent
                                ],
                                exports: [
                                    DxiCustomOperationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiCustomShapeComponent extends CollectionNestedOption {
                renderer;
                document;
                element;
                get allowEditImage() {
                    return this._getOption('allowEditImage');
                }
                set allowEditImage(value) {
                    this._setOption('allowEditImage', value);
                }
                get allowEditText() {
                    return this._getOption('allowEditText');
                }
                set allowEditText(value) {
                    this._setOption('allowEditText', value);
                }
                get allowResize() {
                    return this._getOption('allowResize');
                }
                set allowResize(value) {
                    this._setOption('allowResize', value);
                }
                get backgroundImageHeight() {
                    return this._getOption('backgroundImageHeight');
                }
                set backgroundImageHeight(value) {
                    this._setOption('backgroundImageHeight', value);
                }
                get backgroundImageLeft() {
                    return this._getOption('backgroundImageLeft');
                }
                set backgroundImageLeft(value) {
                    this._setOption('backgroundImageLeft', value);
                }
                get backgroundImageToolboxUrl() {
                    return this._getOption('backgroundImageToolboxUrl');
                }
                set backgroundImageToolboxUrl(value) {
                    this._setOption('backgroundImageToolboxUrl', value);
                }
                get backgroundImageTop() {
                    return this._getOption('backgroundImageTop');
                }
                set backgroundImageTop(value) {
                    this._setOption('backgroundImageTop', value);
                }
                get backgroundImageUrl() {
                    return this._getOption('backgroundImageUrl');
                }
                set backgroundImageUrl(value) {
                    this._setOption('backgroundImageUrl', value);
                }
                get backgroundImageWidth() {
                    return this._getOption('backgroundImageWidth');
                }
                set backgroundImageWidth(value) {
                    this._setOption('backgroundImageWidth', value);
                }
                get baseType() {
                    return this._getOption('baseType');
                }
                set baseType(value) {
                    this._setOption('baseType', value);
                }
                get category() {
                    return this._getOption('category');
                }
                set category(value) {
                    this._setOption('category', value);
                }
                get connectionPoints() {
                    return this._getOption('connectionPoints');
                }
                set connectionPoints(value) {
                    this._setOption('connectionPoints', value);
                }
                get defaultHeight() {
                    return this._getOption('defaultHeight');
                }
                set defaultHeight(value) {
                    this._setOption('defaultHeight', value);
                }
                get defaultImageUrl() {
                    return this._getOption('defaultImageUrl');
                }
                set defaultImageUrl(value) {
                    this._setOption('defaultImageUrl', value);
                }
                get defaultText() {
                    return this._getOption('defaultText');
                }
                set defaultText(value) {
                    this._setOption('defaultText', value);
                }
                get defaultWidth() {
                    return this._getOption('defaultWidth');
                }
                set defaultWidth(value) {
                    this._setOption('defaultWidth', value);
                }
                get imageHeight() {
                    return this._getOption('imageHeight');
                }
                set imageHeight(value) {
                    this._setOption('imageHeight', value);
                }
                get imageLeft() {
                    return this._getOption('imageLeft');
                }
                set imageLeft(value) {
                    this._setOption('imageLeft', value);
                }
                get imageTop() {
                    return this._getOption('imageTop');
                }
                set imageTop(value) {
                    this._setOption('imageTop', value);
                }
                get imageWidth() {
                    return this._getOption('imageWidth');
                }
                set imageWidth(value) {
                    this._setOption('imageWidth', value);
                }
                get keepRatioOnAutoSize() {
                    return this._getOption('keepRatioOnAutoSize');
                }
                set keepRatioOnAutoSize(value) {
                    this._setOption('keepRatioOnAutoSize', value);
                }
                get maxHeight() {
                    return this._getOption('maxHeight');
                }
                set maxHeight(value) {
                    this._setOption('maxHeight', value);
                }
                get maxWidth() {
                    return this._getOption('maxWidth');
                }
                set maxWidth(value) {
                    this._setOption('maxWidth', value);
                }
                get minHeight() {
                    return this._getOption('minHeight');
                }
                set minHeight(value) {
                    this._setOption('minHeight', value);
                }
                get minWidth() {
                    return this._getOption('minWidth');
                }
                set minWidth(value) {
                    this._setOption('minWidth', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get templateHeight() {
                    return this._getOption('templateHeight');
                }
                set templateHeight(value) {
                    this._setOption('templateHeight', value);
                }
                get templateLeft() {
                    return this._getOption('templateLeft');
                }
                set templateLeft(value) {
                    this._setOption('templateLeft', value);
                }
                get templateTop() {
                    return this._getOption('templateTop');
                }
                set templateTop(value) {
                    this._setOption('templateTop', value);
                }
                get templateWidth() {
                    return this._getOption('templateWidth');
                }
                set templateWidth(value) {
                    this._setOption('templateWidth', value);
                }
                get textHeight() {
                    return this._getOption('textHeight');
                }
                set textHeight(value) {
                    this._setOption('textHeight', value);
                }
                get textLeft() {
                    return this._getOption('textLeft');
                }
                set textLeft(value) {
                    this._setOption('textLeft', value);
                }
                get textTop() {
                    return this._getOption('textTop');
                }
                set textTop(value) {
                    this._setOption('textTop', value);
                }
                get textWidth() {
                    return this._getOption('textWidth');
                }
                set textWidth(value) {
                    this._setOption('textWidth', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get toolboxTemplate() {
                    return this._getOption('toolboxTemplate');
                }
                set toolboxTemplate(value) {
                    this._setOption('toolboxTemplate', value);
                }
                get toolboxWidthToHeightRatio() {
                    return this._getOption('toolboxWidthToHeightRatio');
                }
                set toolboxWidthToHeightRatio(value) {
                    this._setOption('toolboxWidthToHeightRatio', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'customShapes';
                }
                get connectionPointsChildren() {
                    return this._getOption('connectionPoints');
                }
                set connectionPointsChildren(value) {
                    this.setChildren('connectionPoints', value);
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiCustomShapeComponent, selector: "dxi-custom-shape", inputs: { allowEditImage: "allowEditImage", allowEditText: "allowEditText", allowResize: "allowResize", backgroundImageHeight: "backgroundImageHeight", backgroundImageLeft: "backgroundImageLeft", backgroundImageToolboxUrl: "backgroundImageToolboxUrl", backgroundImageTop: "backgroundImageTop", backgroundImageUrl: "backgroundImageUrl", backgroundImageWidth: "backgroundImageWidth", baseType: "baseType", category: "category", connectionPoints: "connectionPoints", defaultHeight: "defaultHeight", defaultImageUrl: "defaultImageUrl", defaultText: "defaultText", defaultWidth: "defaultWidth", imageHeight: "imageHeight", imageLeft: "imageLeft", imageTop: "imageTop", imageWidth: "imageWidth", keepRatioOnAutoSize: "keepRatioOnAutoSize", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", template: "template", templateHeight: "templateHeight", templateLeft: "templateLeft", templateTop: "templateTop", templateWidth: "templateWidth", textHeight: "textHeight", textLeft: "textLeft", textTop: "textTop", textWidth: "textWidth", title: "title", toolboxTemplate: "toolboxTemplate", toolboxWidthToHeightRatio: "toolboxWidthToHeightRatio", type: "type" }, providers: [NestedOptionHost, DxTemplateHost], queries: [{ propertyName: "connectionPointsChildren", predicate: i0.forwardRef(() => DxiConnectionPointComponent) }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            } exports("eF", DxiCustomShapeComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-custom-shape', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { allowEditImage: [{
                            type: Input
                        }], allowEditText: [{
                            type: Input
                        }], allowResize: [{
                            type: Input
                        }], backgroundImageHeight: [{
                            type: Input
                        }], backgroundImageLeft: [{
                            type: Input
                        }], backgroundImageToolboxUrl: [{
                            type: Input
                        }], backgroundImageTop: [{
                            type: Input
                        }], backgroundImageUrl: [{
                            type: Input
                        }], backgroundImageWidth: [{
                            type: Input
                        }], baseType: [{
                            type: Input
                        }], category: [{
                            type: Input
                        }], connectionPoints: [{
                            type: Input
                        }], defaultHeight: [{
                            type: Input
                        }], defaultImageUrl: [{
                            type: Input
                        }], defaultText: [{
                            type: Input
                        }], defaultWidth: [{
                            type: Input
                        }], imageHeight: [{
                            type: Input
                        }], imageLeft: [{
                            type: Input
                        }], imageTop: [{
                            type: Input
                        }], imageWidth: [{
                            type: Input
                        }], keepRatioOnAutoSize: [{
                            type: Input
                        }], maxHeight: [{
                            type: Input
                        }], maxWidth: [{
                            type: Input
                        }], minHeight: [{
                            type: Input
                        }], minWidth: [{
                            type: Input
                        }], template: [{
                            type: Input
                        }], templateHeight: [{
                            type: Input
                        }], templateLeft: [{
                            type: Input
                        }], templateTop: [{
                            type: Input
                        }], templateWidth: [{
                            type: Input
                        }], textHeight: [{
                            type: Input
                        }], textLeft: [{
                            type: Input
                        }], textTop: [{
                            type: Input
                        }], textWidth: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], toolboxTemplate: [{
                            type: Input
                        }], toolboxWidthToHeightRatio: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], connectionPointsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiConnectionPointComponent)]
                        }] } });
            class DxiCustomShapeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeModule, declarations: [DxiCustomShapeComponent], exports: [DxiCustomShapeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeModule });
            } exports("eJ", DxiCustomShapeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiCustomShapeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiCustomShapeComponent
                                ],
                                exports: [
                                    DxiCustomShapeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDataPrepareSettingsComponent extends NestedOption {
                get checkTypeForAllData() {
                    return this._getOption('checkTypeForAllData');
                }
                set checkTypeForAllData(value) {
                    this._setOption('checkTypeForAllData', value);
                }
                get convertToAxisDataType() {
                    return this._getOption('convertToAxisDataType');
                }
                set convertToAxisDataType(value) {
                    this._setOption('convertToAxisDataType', value);
                }
                get sortingMethod() {
                    return this._getOption('sortingMethod');
                }
                set sortingMethod(value) {
                    this._setOption('sortingMethod', value);
                }
                get _optionPath() {
                    return 'dataPrepareSettings';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDataPrepareSettingsComponent, selector: "dxo-data-prepare-settings", inputs: { checkTypeForAllData: "checkTypeForAllData", convertToAxisDataType: "convertToAxisDataType", sortingMethod: "sortingMethod" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-data-prepare-settings', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { checkTypeForAllData: [{
                            type: Input
                        }], convertToAxisDataType: [{
                            type: Input
                        }], sortingMethod: [{
                            type: Input
                        }] } });
            class DxoDataPrepareSettingsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsModule, declarations: [DxoDataPrepareSettingsComponent], exports: [DxoDataPrepareSettingsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsModule });
            } exports("dW", DxoDataPrepareSettingsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataPrepareSettingsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDataPrepareSettingsComponent
                                ],
                                exports: [
                                    DxoDataPrepareSettingsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPivotGridDataSource extends NestedOption {
                get fields() {
                    return this._getOption('fields');
                }
                set fields(value) {
                    this._setOption('fields', value);
                }
                get filter() {
                    return this._getOption('filter');
                }
                set filter(value) {
                    this._setOption('filter', value);
                }
                get onChanged() {
                    return this._getOption('onChanged');
                }
                set onChanged(value) {
                    this._setOption('onChanged', value);
                }
                get onFieldsPrepared() {
                    return this._getOption('onFieldsPrepared');
                }
                set onFieldsPrepared(value) {
                    this._setOption('onFieldsPrepared', value);
                }
                get onLoadError() {
                    return this._getOption('onLoadError');
                }
                set onLoadError(value) {
                    this._setOption('onLoadError', value);
                }
                get onLoadingChanged() {
                    return this._getOption('onLoadingChanged');
                }
                set onLoadingChanged(value) {
                    this._setOption('onLoadingChanged', value);
                }
                get remoteOperations() {
                    return this._getOption('remoteOperations');
                }
                set remoteOperations(value) {
                    this._setOption('remoteOperations', value);
                }
                get retrieveFields() {
                    return this._getOption('retrieveFields');
                }
                set retrieveFields(value) {
                    this._setOption('retrieveFields', value);
                }
                get store() {
                    return this._getOption('store');
                }
                set store(value) {
                    this._setOption('store', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPivotGridDataSource, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPivotGridDataSource, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPivotGridDataSource, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiFilterBuilderField extends CollectionNestedOption {
                get calculateFilterExpression() {
                    return this._getOption('calculateFilterExpression');
                }
                set calculateFilterExpression(value) {
                    this._setOption('calculateFilterExpression', value);
                }
                get caption() {
                    return this._getOption('caption');
                }
                set caption(value) {
                    this._setOption('caption', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get dataType() {
                    return this._getOption('dataType');
                }
                set dataType(value) {
                    this._setOption('dataType', value);
                }
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get editorTemplate() {
                    return this._getOption('editorTemplate');
                }
                set editorTemplate(value) {
                    this._setOption('editorTemplate', value);
                }
                get falseText() {
                    return this._getOption('falseText');
                }
                set falseText(value) {
                    this._setOption('falseText', value);
                }
                get filterOperations() {
                    return this._getOption('filterOperations');
                }
                set filterOperations(value) {
                    this._setOption('filterOperations', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get lookup() {
                    return this._getOption('lookup');
                }
                set lookup(value) {
                    this._setOption('lookup', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get trueText() {
                    return this._getOption('trueText');
                }
                set trueText(value) {
                    this._setOption('trueText', value);
                }
                get allowCrossGroupCalculation() {
                    return this._getOption('allowCrossGroupCalculation');
                }
                set allowCrossGroupCalculation(value) {
                    this._setOption('allowCrossGroupCalculation', value);
                }
                get allowExpandAll() {
                    return this._getOption('allowExpandAll');
                }
                set allowExpandAll(value) {
                    this._setOption('allowExpandAll', value);
                }
                get allowFiltering() {
                    return this._getOption('allowFiltering');
                }
                set allowFiltering(value) {
                    this._setOption('allowFiltering', value);
                }
                get allowSorting() {
                    return this._getOption('allowSorting');
                }
                set allowSorting(value) {
                    this._setOption('allowSorting', value);
                }
                get allowSortingBySummary() {
                    return this._getOption('allowSortingBySummary');
                }
                set allowSortingBySummary(value) {
                    this._setOption('allowSortingBySummary', value);
                }
                get area() {
                    return this._getOption('area');
                }
                set area(value) {
                    this._setOption('area', value);
                }
                get areaIndex() {
                    return this._getOption('areaIndex');
                }
                set areaIndex(value) {
                    this._setOption('areaIndex', value);
                }
                get calculateCustomSummary() {
                    return this._getOption('calculateCustomSummary');
                }
                set calculateCustomSummary(value) {
                    this._setOption('calculateCustomSummary', value);
                }
                get calculateSummaryValue() {
                    return this._getOption('calculateSummaryValue');
                }
                set calculateSummaryValue(value) {
                    this._setOption('calculateSummaryValue', value);
                }
                get displayFolder() {
                    return this._getOption('displayFolder');
                }
                set displayFolder(value) {
                    this._setOption('displayFolder', value);
                }
                get expanded() {
                    return this._getOption('expanded');
                }
                set expanded(value) {
                    this._setOption('expanded', value);
                }
                get filterType() {
                    return this._getOption('filterType');
                }
                set filterType(value) {
                    this._setOption('filterType', value);
                }
                get filterValues() {
                    return this._getOption('filterValues');
                }
                set filterValues(value) {
                    this._setOption('filterValues', value);
                }
                get groupIndex() {
                    return this._getOption('groupIndex');
                }
                set groupIndex(value) {
                    this._setOption('groupIndex', value);
                }
                get groupInterval() {
                    return this._getOption('groupInterval');
                }
                set groupInterval(value) {
                    this._setOption('groupInterval', value);
                }
                get groupName() {
                    return this._getOption('groupName');
                }
                set groupName(value) {
                    this._setOption('groupName', value);
                }
                get headerFilter() {
                    return this._getOption('headerFilter');
                }
                set headerFilter(value) {
                    this._setOption('headerFilter', value);
                }
                get isMeasure() {
                    return this._getOption('isMeasure');
                }
                set isMeasure(value) {
                    this._setOption('isMeasure', value);
                }
                get precision() {
                    return this._getOption('precision');
                }
                set precision(value) {
                    this._setOption('precision', value);
                }
                get runningTotal() {
                    return this._getOption('runningTotal');
                }
                set runningTotal(value) {
                    this._setOption('runningTotal', value);
                }
                get selector() {
                    return this._getOption('selector');
                }
                set selector(value) {
                    this._setOption('selector', value);
                }
                get showGrandTotals() {
                    return this._getOption('showGrandTotals');
                }
                set showGrandTotals(value) {
                    this._setOption('showGrandTotals', value);
                }
                get showTotals() {
                    return this._getOption('showTotals');
                }
                set showTotals(value) {
                    this._setOption('showTotals', value);
                }
                get showValues() {
                    return this._getOption('showValues');
                }
                set showValues(value) {
                    this._setOption('showValues', value);
                }
                get sortBy() {
                    return this._getOption('sortBy');
                }
                set sortBy(value) {
                    this._setOption('sortBy', value);
                }
                get sortBySummaryField() {
                    return this._getOption('sortBySummaryField');
                }
                set sortBySummaryField(value) {
                    this._setOption('sortBySummaryField', value);
                }
                get sortBySummaryPath() {
                    return this._getOption('sortBySummaryPath');
                }
                set sortBySummaryPath(value) {
                    this._setOption('sortBySummaryPath', value);
                }
                get sortingMethod() {
                    return this._getOption('sortingMethod');
                }
                set sortingMethod(value) {
                    this._setOption('sortingMethod', value);
                }
                get sortOrder() {
                    return this._getOption('sortOrder');
                }
                set sortOrder(value) {
                    this._setOption('sortOrder', value);
                }
                get summaryDisplayMode() {
                    return this._getOption('summaryDisplayMode');
                }
                set summaryDisplayMode(value) {
                    this._setOption('summaryDisplayMode', value);
                }
                get summaryType() {
                    return this._getOption('summaryType');
                }
                set summaryType(value) {
                    this._setOption('summaryType', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get wordWrapEnabled() {
                    return this._getOption('wordWrapEnabled');
                }
                set wordWrapEnabled(value) {
                    this._setOption('wordWrapEnabled', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFilterBuilderField, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFilterBuilderField, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFilterBuilderField, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiFieldComponent extends DxiFilterBuilderField {
                get _optionPath() {
                    return 'fields';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFieldComponent, selector: "dxi-field", inputs: { calculateFilterExpression: "calculateFilterExpression", caption: "caption", customizeText: "customizeText", dataField: "dataField", dataType: "dataType", editorOptions: "editorOptions", editorTemplate: "editorTemplate", falseText: "falseText", filterOperations: "filterOperations", format: "format", lookup: "lookup", name: "name", trueText: "trueText", allowCrossGroupCalculation: "allowCrossGroupCalculation", allowExpandAll: "allowExpandAll", allowFiltering: "allowFiltering", allowSorting: "allowSorting", allowSortingBySummary: "allowSortingBySummary", area: "area", areaIndex: "areaIndex", calculateCustomSummary: "calculateCustomSummary", calculateSummaryValue: "calculateSummaryValue", displayFolder: "displayFolder", expanded: "expanded", filterType: "filterType", filterValues: "filterValues", groupIndex: "groupIndex", groupInterval: "groupInterval", groupName: "groupName", headerFilter: "headerFilter", isMeasure: "isMeasure", precision: "precision", runningTotal: "runningTotal", selector: "selector", showGrandTotals: "showGrandTotals", showTotals: "showTotals", showValues: "showValues", sortBy: "sortBy", sortBySummaryField: "sortBySummaryField", sortBySummaryPath: "sortBySummaryPath", sortingMethod: "sortingMethod", sortOrder: "sortOrder", summaryDisplayMode: "summaryDisplayMode", summaryType: "summaryType", visible: "visible", width: "width", wordWrapEnabled: "wordWrapEnabled" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fd", DxiFieldComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-field', template: '', providers: [NestedOptionHost], inputs: [
                                    'calculateFilterExpression',
                                    'caption',
                                    'customizeText',
                                    'dataField',
                                    'dataType',
                                    'editorOptions',
                                    'editorTemplate',
                                    'falseText',
                                    'filterOperations',
                                    'format',
                                    'lookup',
                                    'name',
                                    'trueText',
                                    'allowCrossGroupCalculation',
                                    'allowExpandAll',
                                    'allowFiltering',
                                    'allowSorting',
                                    'allowSortingBySummary',
                                    'area',
                                    'areaIndex',
                                    'calculateCustomSummary',
                                    'calculateSummaryValue',
                                    'displayFolder',
                                    'expanded',
                                    'filterType',
                                    'filterValues',
                                    'groupIndex',
                                    'groupInterval',
                                    'groupName',
                                    'headerFilter',
                                    'isMeasure',
                                    'precision',
                                    'runningTotal',
                                    'selector',
                                    'showGrandTotals',
                                    'showTotals',
                                    'showValues',
                                    'sortBy',
                                    'sortBySummaryField',
                                    'sortBySummaryPath',
                                    'sortingMethod',
                                    'sortOrder',
                                    'summaryDisplayMode',
                                    'summaryType',
                                    'visible',
                                    'width',
                                    'wordWrapEnabled'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiFieldModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldModule, declarations: [DxiFieldComponent], exports: [DxiFieldComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldModule });
            } exports("ff", DxiFieldModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFieldModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiFieldComponent
                                ],
                                exports: [
                                    DxiFieldComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoDataSourceComponent extends DxoPivotGridDataSource {
                get _optionPath() {
                    return 'dataSource';
                }
                get fieldsChildren() {
                    return this._getOption('fields');
                }
                set fieldsChildren(value) {
                    this.setChildren('fields', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    if ((console) && (console.warn)) {
                        console.warn('The nested \'dxo-data-source\' component is deprecated in 17.2. ' +
                            'Use the \'dataSource\' option instead. ' +
                            'See:\nhttps://github.com/DevExpress/devextreme-angular/blob/master/CHANGELOG.md#17.2.3');
                    }
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDataSourceComponent, selector: "dxo-data-source", inputs: { fields: "fields", filter: "filter", onChanged: "onChanged", onFieldsPrepared: "onFieldsPrepared", onLoadError: "onLoadError", onLoadingChanged: "onLoadingChanged", remoteOperations: "remoteOperations", retrieveFields: "retrieveFields", store: "store" }, providers: [NestedOptionHost], queries: [{ propertyName: "fieldsChildren", predicate: i0.forwardRef(() => DxiFieldComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-data-source', template: '', providers: [NestedOptionHost], inputs: [
                                    'fields',
                                    'filter',
                                    'onChanged',
                                    'onFieldsPrepared',
                                    'onLoadError',
                                    'onLoadingChanged',
                                    'remoteOperations',
                                    'retrieveFields',
                                    'store'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { fieldsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiFieldComponent)]
                        }] } });
            class DxoDataSourceModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceModule, declarations: [DxoDataSourceComponent], exports: [DxoDataSourceComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceModule });
            } exports("gb", DxoDataSourceModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataSourceModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDataSourceComponent
                                ],
                                exports: [
                                    DxoDataSourceComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDefaultItemPropertiesComponent extends NestedOption {
                get connectorLineEnd() {
                    return this._getOption('connectorLineEnd');
                }
                set connectorLineEnd(value) {
                    this._setOption('connectorLineEnd', value);
                }
                get connectorLineStart() {
                    return this._getOption('connectorLineStart');
                }
                set connectorLineStart(value) {
                    this._setOption('connectorLineStart', value);
                }
                get connectorLineType() {
                    return this._getOption('connectorLineType');
                }
                set connectorLineType(value) {
                    this._setOption('connectorLineType', value);
                }
                get shapeMaxHeight() {
                    return this._getOption('shapeMaxHeight');
                }
                set shapeMaxHeight(value) {
                    this._setOption('shapeMaxHeight', value);
                }
                get shapeMaxWidth() {
                    return this._getOption('shapeMaxWidth');
                }
                set shapeMaxWidth(value) {
                    this._setOption('shapeMaxWidth', value);
                }
                get shapeMinHeight() {
                    return this._getOption('shapeMinHeight');
                }
                set shapeMinHeight(value) {
                    this._setOption('shapeMinHeight', value);
                }
                get shapeMinWidth() {
                    return this._getOption('shapeMinWidth');
                }
                set shapeMinWidth(value) {
                    this._setOption('shapeMinWidth', value);
                }
                get style() {
                    return this._getOption('style');
                }
                set style(value) {
                    this._setOption('style', value);
                }
                get textStyle() {
                    return this._getOption('textStyle');
                }
                set textStyle(value) {
                    this._setOption('textStyle', value);
                }
                get _optionPath() {
                    return 'defaultItemProperties';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDefaultItemPropertiesComponent, selector: "dxo-default-item-properties", inputs: { connectorLineEnd: "connectorLineEnd", connectorLineStart: "connectorLineStart", connectorLineType: "connectorLineType", shapeMaxHeight: "shapeMaxHeight", shapeMaxWidth: "shapeMaxWidth", shapeMinHeight: "shapeMinHeight", shapeMinWidth: "shapeMinWidth", style: "style", textStyle: "textStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-default-item-properties', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { connectorLineEnd: [{
                            type: Input
                        }], connectorLineStart: [{
                            type: Input
                        }], connectorLineType: [{
                            type: Input
                        }], shapeMaxHeight: [{
                            type: Input
                        }], shapeMaxWidth: [{
                            type: Input
                        }], shapeMinHeight: [{
                            type: Input
                        }], shapeMinWidth: [{
                            type: Input
                        }], style: [{
                            type: Input
                        }], textStyle: [{
                            type: Input
                        }] } });
            class DxoDefaultItemPropertiesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesModule, declarations: [DxoDefaultItemPropertiesComponent], exports: [DxoDefaultItemPropertiesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesModule });
            } exports("eL", DxoDefaultItemPropertiesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDefaultItemPropertiesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDefaultItemPropertiesComponent
                                ],
                                exports: [
                                    DxoDefaultItemPropertiesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDelayComponent extends NestedOption {
                get hide() {
                    return this._getOption('hide');
                }
                set hide(value) {
                    this._setOption('hide', value);
                }
                get show() {
                    return this._getOption('show');
                }
                set show(value) {
                    this._setOption('show', value);
                }
                get _optionPath() {
                    return 'delay';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDelayComponent, selector: "dxo-delay", inputs: { hide: "hide", show: "show" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-delay', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { hide: [{
                            type: Input
                        }], show: [{
                            type: Input
                        }] } });
            class DxoDelayModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayModule, declarations: [DxoDelayComponent], exports: [DxoDelayComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayModule });
            } exports("en", DxoDelayModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDelayModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDelayComponent
                                ],
                                exports: [
                                    DxoDelayComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDependenciesComponent extends NestedOption {
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get predecessorIdExpr() {
                    return this._getOption('predecessorIdExpr');
                }
                set predecessorIdExpr(value) {
                    this._setOption('predecessorIdExpr', value);
                }
                get successorIdExpr() {
                    return this._getOption('successorIdExpr');
                }
                set successorIdExpr(value) {
                    this._setOption('successorIdExpr', value);
                }
                get typeExpr() {
                    return this._getOption('typeExpr');
                }
                set typeExpr(value) {
                    this._setOption('typeExpr', value);
                }
                get _optionPath() {
                    return 'dependencies';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDependenciesComponent, selector: "dxo-dependencies", inputs: { dataSource: "dataSource", keyExpr: "keyExpr", predecessorIdExpr: "predecessorIdExpr", successorIdExpr: "successorIdExpr", typeExpr: "typeExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-dependencies', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { dataSource: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], predecessorIdExpr: [{
                            type: Input
                        }], successorIdExpr: [{
                            type: Input
                        }], typeExpr: [{
                            type: Input
                        }] } });
            class DxoDependenciesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesModule, declarations: [DxoDependenciesComponent], exports: [DxoDependenciesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesModule });
            } exports("fv", DxoDependenciesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDependenciesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDependenciesComponent
                                ],
                                exports: [
                                    DxoDependenciesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDetailsComponent extends NestedOption {
                get columns() {
                    return this._getOption('columns');
                }
                set columns(value) {
                    this._setOption('columns', value);
                }
                get _optionPath() {
                    return 'details';
                }
                get columnsChildren() {
                    return this._getOption('columns');
                }
                set columnsChildren(value) {
                    this.setChildren('columns', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDetailsComponent, selector: "dxo-details", inputs: { columns: "columns" }, providers: [NestedOptionHost], queries: [{ propertyName: "columnsChildren", predicate: i0.forwardRef(() => DxiColumnComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-details', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { columns: [{
                            type: Input
                        }], columnsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiColumnComponent)]
                        }] } });
            class DxoDetailsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsModule, declarations: [DxoDetailsComponent], exports: [DxoDetailsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsModule });
            } exports("f5", DxoDetailsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDetailsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDetailsComponent
                                ],
                                exports: [
                                    DxoDetailsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoDisplayFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'displayFormat';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDisplayFormatComponent, selector: "dxo-display-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-display-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoDisplayFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatModule, declarations: [DxoDisplayFormatComponent], exports: [DxoDisplayFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatModule });
            } exports("eD", DxoDisplayFormatModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDisplayFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDisplayFormatComponent
                                ],
                                exports: [
                                    DxoDisplayFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDragBoxStyleComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'dragBoxStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDragBoxStyleComponent, selector: "dxo-drag-box-style", inputs: { color: "color", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-drag-box-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoDragBoxStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleModule, declarations: [DxoDragBoxStyleComponent], exports: [DxoDragBoxStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleModule });
            } exports("e1", DxoDragBoxStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDragBoxStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDragBoxStyleComponent
                                ],
                                exports: [
                                    DxoDragBoxStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPopupOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get animation() {
                    return this._getOption('animation');
                }
                set animation(value) {
                    this._setOption('animation', value);
                }
                get closeOnOutsideClick() {
                    return this._getOption('closeOnOutsideClick');
                }
                set closeOnOutsideClick(value) {
                    this._setOption('closeOnOutsideClick', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get contentTemplate() {
                    return this._getOption('contentTemplate');
                }
                set contentTemplate(value) {
                    this._setOption('contentTemplate', value);
                }
                get deferRendering() {
                    return this._getOption('deferRendering');
                }
                set deferRendering(value) {
                    this._setOption('deferRendering', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get dragAndResizeArea() {
                    return this._getOption('dragAndResizeArea');
                }
                set dragAndResizeArea(value) {
                    this._setOption('dragAndResizeArea', value);
                }
                get dragEnabled() {
                    return this._getOption('dragEnabled');
                }
                set dragEnabled(value) {
                    this._setOption('dragEnabled', value);
                }
                get dragOutsideBoundary() {
                    return this._getOption('dragOutsideBoundary');
                }
                set dragOutsideBoundary(value) {
                    this._setOption('dragOutsideBoundary', value);
                }
                get enableBodyScroll() {
                    return this._getOption('enableBodyScroll');
                }
                set enableBodyScroll(value) {
                    this._setOption('enableBodyScroll', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get fullScreen() {
                    return this._getOption('fullScreen');
                }
                set fullScreen(value) {
                    this._setOption('fullScreen', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hideOnOutsideClick() {
                    return this._getOption('hideOnOutsideClick');
                }
                set hideOnOutsideClick(value) {
                    this._setOption('hideOnOutsideClick', value);
                }
                get hideOnParentScroll() {
                    return this._getOption('hideOnParentScroll');
                }
                set hideOnParentScroll(value) {
                    this._setOption('hideOnParentScroll', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get maxHeight() {
                    return this._getOption('maxHeight');
                }
                set maxHeight(value) {
                    this._setOption('maxHeight', value);
                }
                get maxWidth() {
                    return this._getOption('maxWidth');
                }
                set maxWidth(value) {
                    this._setOption('maxWidth', value);
                }
                get minHeight() {
                    return this._getOption('minHeight');
                }
                set minHeight(value) {
                    this._setOption('minHeight', value);
                }
                get minWidth() {
                    return this._getOption('minWidth');
                }
                set minWidth(value) {
                    this._setOption('minWidth', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onHidden() {
                    return this._getOption('onHidden');
                }
                set onHidden(value) {
                    this._setOption('onHidden', value);
                }
                get onHiding() {
                    return this._getOption('onHiding');
                }
                set onHiding(value) {
                    this._setOption('onHiding', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onResize() {
                    return this._getOption('onResize');
                }
                set onResize(value) {
                    this._setOption('onResize', value);
                }
                get onResizeEnd() {
                    return this._getOption('onResizeEnd');
                }
                set onResizeEnd(value) {
                    this._setOption('onResizeEnd', value);
                }
                get onResizeStart() {
                    return this._getOption('onResizeStart');
                }
                set onResizeStart(value) {
                    this._setOption('onResizeStart', value);
                }
                get onShowing() {
                    return this._getOption('onShowing');
                }
                set onShowing(value) {
                    this._setOption('onShowing', value);
                }
                get onShown() {
                    return this._getOption('onShown');
                }
                set onShown(value) {
                    this._setOption('onShown', value);
                }
                get onTitleRendered() {
                    return this._getOption('onTitleRendered');
                }
                set onTitleRendered(value) {
                    this._setOption('onTitleRendered', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get resizeEnabled() {
                    return this._getOption('resizeEnabled');
                }
                set resizeEnabled(value) {
                    this._setOption('resizeEnabled', value);
                }
                get restorePosition() {
                    return this._getOption('restorePosition');
                }
                set restorePosition(value) {
                    this._setOption('restorePosition', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get shading() {
                    return this._getOption('shading');
                }
                set shading(value) {
                    this._setOption('shading', value);
                }
                get shadingColor() {
                    return this._getOption('shadingColor');
                }
                set shadingColor(value) {
                    this._setOption('shadingColor', value);
                }
                get showCloseButton() {
                    return this._getOption('showCloseButton');
                }
                set showCloseButton(value) {
                    this._setOption('showCloseButton', value);
                }
                get showTitle() {
                    return this._getOption('showTitle');
                }
                set showTitle(value) {
                    this._setOption('showTitle', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get titleTemplate() {
                    return this._getOption('titleTemplate');
                }
                set titleTemplate(value) {
                    this._setOption('titleTemplate', value);
                }
                get toolbarItems() {
                    return this._getOption('toolbarItems');
                }
                set toolbarItems(value) {
                    this._setOption('toolbarItems', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get wrapperAttr() {
                    return this._getOption('wrapperAttr');
                }
                set wrapperAttr(value) {
                    this._setOption('wrapperAttr', value);
                }
                get hideEvent() {
                    return this._getOption('hideEvent');
                }
                set hideEvent(value) {
                    this._setOption('hideEvent', value);
                }
                get showEvent() {
                    return this._getOption('showEvent');
                }
                set showEvent(value) {
                    this._setOption('showEvent', value);
                }
                get target() {
                    return this._getOption('target');
                }
                set target(value) {
                    this._setOption('target', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPopupOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiToolbarItemComponent extends CollectionNestedOption {
                renderer;
                document;
                element;
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get html() {
                    return this._getOption('html');
                }
                set html(value) {
                    this._setOption('html', value);
                }
                get locateInMenu() {
                    return this._getOption('locateInMenu');
                }
                set locateInMenu(value) {
                    this._setOption('locateInMenu', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get menuItemTemplate() {
                    return this._getOption('menuItemTemplate');
                }
                set menuItemTemplate(value) {
                    this._setOption('menuItemTemplate', value);
                }
                get options() {
                    return this._getOption('options');
                }
                set options(value) {
                    this._setOption('options', value);
                }
                get showText() {
                    return this._getOption('showText');
                }
                set showText(value) {
                    this._setOption('showText', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get toolbar() {
                    return this._getOption('toolbar');
                }
                set toolbar(value) {
                    this._setOption('toolbar', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get widget() {
                    return this._getOption('widget');
                }
                set widget(value) {
                    this._setOption('widget', value);
                }
                get _optionPath() {
                    return 'toolbarItems';
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiToolbarItemComponent, selector: "dxi-toolbar-item", inputs: { cssClass: "cssClass", disabled: "disabled", html: "html", locateInMenu: "locateInMenu", location: "location", menuItemTemplate: "menuItemTemplate", options: "options", showText: "showText", template: "template", text: "text", toolbar: "toolbar", visible: "visible", widget: "widget" }, providers: [NestedOptionHost, DxTemplateHost], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            } exports("gj", DxiToolbarItemComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-toolbar-item', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { cssClass: [{
                            type: Input
                        }], disabled: [{
                            type: Input
                        }], html: [{
                            type: Input
                        }], locateInMenu: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }], menuItemTemplate: [{
                            type: Input
                        }], options: [{
                            type: Input
                        }], showText: [{
                            type: Input
                        }], template: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], toolbar: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], widget: [{
                            type: Input
                        }] } });
            class DxiToolbarItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemModule, declarations: [DxiToolbarItemComponent], exports: [DxiToolbarItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemModule });
            } exports("c5", DxiToolbarItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiToolbarItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiToolbarItemComponent
                                ],
                                exports: [
                                    DxiToolbarItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoDropDownOptionsComponent extends DxoPopupOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                positionChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                get _optionPath() {
                    return 'dropDownOptions';
                }
                get toolbarItemsChildren() {
                    return this._getOption('toolbarItems');
                }
                set toolbarItemsChildren(value) {
                    this.setChildren('toolbarItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'heightChange' },
                        { emit: 'positionChange' },
                        { emit: 'visibleChange' },
                        { emit: 'widthChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDropDownOptionsComponent, selector: "dxo-drop-down-options", inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr", hideEvent: "hideEvent", showEvent: "showEvent", target: "target" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "toolbarItemsChildren", predicate: i0.forwardRef(() => DxiToolbarItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-drop-down-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'animation',
                                    'closeOnOutsideClick',
                                    'container',
                                    'contentTemplate',
                                    'deferRendering',
                                    'disabled',
                                    'dragAndResizeArea',
                                    'dragEnabled',
                                    'dragOutsideBoundary',
                                    'enableBodyScroll',
                                    'focusStateEnabled',
                                    'fullScreen',
                                    'height',
                                    'hideOnOutsideClick',
                                    'hideOnParentScroll',
                                    'hint',
                                    'hoverStateEnabled',
                                    'maxHeight',
                                    'maxWidth',
                                    'minHeight',
                                    'minWidth',
                                    'onContentReady',
                                    'onDisposing',
                                    'onHidden',
                                    'onHiding',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onResize',
                                    'onResizeEnd',
                                    'onResizeStart',
                                    'onShowing',
                                    'onShown',
                                    'onTitleRendered',
                                    'position',
                                    'resizeEnabled',
                                    'restorePosition',
                                    'rtlEnabled',
                                    'shading',
                                    'shadingColor',
                                    'showCloseButton',
                                    'showTitle',
                                    'tabIndex',
                                    'title',
                                    'titleTemplate',
                                    'toolbarItems',
                                    'visible',
                                    'width',
                                    'wrapperAttr',
                                    'hideEvent',
                                    'showEvent',
                                    'target'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { heightChange: [{
                            type: Output
                        }], positionChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], toolbarItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiToolbarItemComponent)]
                        }] } });
            class DxoDropDownOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsModule, declarations: [DxoDropDownOptionsComponent], exports: [DxoDropDownOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsModule });
            } exports("bV", DxoDropDownOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDropDownOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoDropDownOptionsComponent
                                ],
                                exports: [
                                    DxoDropDownOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoEdgesComponent extends NestedOption {
                get customDataExpr() {
                    return this._getOption('customDataExpr');
                }
                set customDataExpr(value) {
                    this._setOption('customDataExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get fromExpr() {
                    return this._getOption('fromExpr');
                }
                set fromExpr(value) {
                    this._setOption('fromExpr', value);
                }
                get fromLineEndExpr() {
                    return this._getOption('fromLineEndExpr');
                }
                set fromLineEndExpr(value) {
                    this._setOption('fromLineEndExpr', value);
                }
                get fromPointIndexExpr() {
                    return this._getOption('fromPointIndexExpr');
                }
                set fromPointIndexExpr(value) {
                    this._setOption('fromPointIndexExpr', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get lineTypeExpr() {
                    return this._getOption('lineTypeExpr');
                }
                set lineTypeExpr(value) {
                    this._setOption('lineTypeExpr', value);
                }
                get lockedExpr() {
                    return this._getOption('lockedExpr');
                }
                set lockedExpr(value) {
                    this._setOption('lockedExpr', value);
                }
                get pointsExpr() {
                    return this._getOption('pointsExpr');
                }
                set pointsExpr(value) {
                    this._setOption('pointsExpr', value);
                }
                get styleExpr() {
                    return this._getOption('styleExpr');
                }
                set styleExpr(value) {
                    this._setOption('styleExpr', value);
                }
                get textExpr() {
                    return this._getOption('textExpr');
                }
                set textExpr(value) {
                    this._setOption('textExpr', value);
                }
                get textStyleExpr() {
                    return this._getOption('textStyleExpr');
                }
                set textStyleExpr(value) {
                    this._setOption('textStyleExpr', value);
                }
                get toExpr() {
                    return this._getOption('toExpr');
                }
                set toExpr(value) {
                    this._setOption('toExpr', value);
                }
                get toLineEndExpr() {
                    return this._getOption('toLineEndExpr');
                }
                set toLineEndExpr(value) {
                    this._setOption('toLineEndExpr', value);
                }
                get toPointIndexExpr() {
                    return this._getOption('toPointIndexExpr');
                }
                set toPointIndexExpr(value) {
                    this._setOption('toPointIndexExpr', value);
                }
                get zIndexExpr() {
                    return this._getOption('zIndexExpr');
                }
                set zIndexExpr(value) {
                    this._setOption('zIndexExpr', value);
                }
                get _optionPath() {
                    return 'edges';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoEdgesComponent, selector: "dxo-edges", inputs: { customDataExpr: "customDataExpr", dataSource: "dataSource", fromExpr: "fromExpr", fromLineEndExpr: "fromLineEndExpr", fromPointIndexExpr: "fromPointIndexExpr", keyExpr: "keyExpr", lineTypeExpr: "lineTypeExpr", lockedExpr: "lockedExpr", pointsExpr: "pointsExpr", styleExpr: "styleExpr", textExpr: "textExpr", textStyleExpr: "textStyleExpr", toExpr: "toExpr", toLineEndExpr: "toLineEndExpr", toPointIndexExpr: "toPointIndexExpr", zIndexExpr: "zIndexExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-edges', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customDataExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], fromExpr: [{
                            type: Input
                        }], fromLineEndExpr: [{
                            type: Input
                        }], fromPointIndexExpr: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], lineTypeExpr: [{
                            type: Input
                        }], lockedExpr: [{
                            type: Input
                        }], pointsExpr: [{
                            type: Input
                        }], styleExpr: [{
                            type: Input
                        }], textExpr: [{
                            type: Input
                        }], textStyleExpr: [{
                            type: Input
                        }], toExpr: [{
                            type: Input
                        }], toLineEndExpr: [{
                            type: Input
                        }], toPointIndexExpr: [{
                            type: Input
                        }], zIndexExpr: [{
                            type: Input
                        }] } });
            class DxoEdgesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesModule, declarations: [DxoEdgesComponent], exports: [DxoEdgesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesModule });
            } exports("eM", DxoEdgesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEdgesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoEdgesComponent
                                ],
                                exports: [
                                    DxoEdgesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoEditingComponent extends NestedOption {
                get allowAdding() {
                    return this._getOption('allowAdding');
                }
                set allowAdding(value) {
                    this._setOption('allowAdding', value);
                }
                get allowDeleting() {
                    return this._getOption('allowDeleting');
                }
                set allowDeleting(value) {
                    this._setOption('allowDeleting', value);
                }
                get allowUpdating() {
                    return this._getOption('allowUpdating');
                }
                set allowUpdating(value) {
                    this._setOption('allowUpdating', value);
                }
                get changes() {
                    return this._getOption('changes');
                }
                set changes(value) {
                    this._setOption('changes', value);
                }
                get confirmDelete() {
                    return this._getOption('confirmDelete');
                }
                set confirmDelete(value) {
                    this._setOption('confirmDelete', value);
                }
                get editColumnName() {
                    return this._getOption('editColumnName');
                }
                set editColumnName(value) {
                    this._setOption('editColumnName', value);
                }
                get editRowKey() {
                    return this._getOption('editRowKey');
                }
                set editRowKey(value) {
                    this._setOption('editRowKey', value);
                }
                get form() {
                    return this._getOption('form');
                }
                set form(value) {
                    this._setOption('form', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get newRowPosition() {
                    return this._getOption('newRowPosition');
                }
                set newRowPosition(value) {
                    this._setOption('newRowPosition', value);
                }
                get popup() {
                    return this._getOption('popup');
                }
                set popup(value) {
                    this._setOption('popup', value);
                }
                get refreshMode() {
                    return this._getOption('refreshMode');
                }
                set refreshMode(value) {
                    this._setOption('refreshMode', value);
                }
                get selectTextOnEditStart() {
                    return this._getOption('selectTextOnEditStart');
                }
                set selectTextOnEditStart(value) {
                    this._setOption('selectTextOnEditStart', value);
                }
                get startEditAction() {
                    return this._getOption('startEditAction');
                }
                set startEditAction(value) {
                    this._setOption('startEditAction', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get useIcons() {
                    return this._getOption('useIcons');
                }
                set useIcons(value) {
                    this._setOption('useIcons', value);
                }
                get allowAddShape() {
                    return this._getOption('allowAddShape');
                }
                set allowAddShape(value) {
                    this._setOption('allowAddShape', value);
                }
                get allowChangeConnection() {
                    return this._getOption('allowChangeConnection');
                }
                set allowChangeConnection(value) {
                    this._setOption('allowChangeConnection', value);
                }
                get allowChangeConnectorPoints() {
                    return this._getOption('allowChangeConnectorPoints');
                }
                set allowChangeConnectorPoints(value) {
                    this._setOption('allowChangeConnectorPoints', value);
                }
                get allowChangeConnectorText() {
                    return this._getOption('allowChangeConnectorText');
                }
                set allowChangeConnectorText(value) {
                    this._setOption('allowChangeConnectorText', value);
                }
                get allowChangeShapeText() {
                    return this._getOption('allowChangeShapeText');
                }
                set allowChangeShapeText(value) {
                    this._setOption('allowChangeShapeText', value);
                }
                get allowDeleteConnector() {
                    return this._getOption('allowDeleteConnector');
                }
                set allowDeleteConnector(value) {
                    this._setOption('allowDeleteConnector', value);
                }
                get allowDeleteShape() {
                    return this._getOption('allowDeleteShape');
                }
                set allowDeleteShape(value) {
                    this._setOption('allowDeleteShape', value);
                }
                get allowMoveShape() {
                    return this._getOption('allowMoveShape');
                }
                set allowMoveShape(value) {
                    this._setOption('allowMoveShape', value);
                }
                get allowResizeShape() {
                    return this._getOption('allowResizeShape');
                }
                set allowResizeShape(value) {
                    this._setOption('allowResizeShape', value);
                }
                get allowDependencyAdding() {
                    return this._getOption('allowDependencyAdding');
                }
                set allowDependencyAdding(value) {
                    this._setOption('allowDependencyAdding', value);
                }
                get allowDependencyDeleting() {
                    return this._getOption('allowDependencyDeleting');
                }
                set allowDependencyDeleting(value) {
                    this._setOption('allowDependencyDeleting', value);
                }
                get allowResourceAdding() {
                    return this._getOption('allowResourceAdding');
                }
                set allowResourceAdding(value) {
                    this._setOption('allowResourceAdding', value);
                }
                get allowResourceDeleting() {
                    return this._getOption('allowResourceDeleting');
                }
                set allowResourceDeleting(value) {
                    this._setOption('allowResourceDeleting', value);
                }
                get allowResourceUpdating() {
                    return this._getOption('allowResourceUpdating');
                }
                set allowResourceUpdating(value) {
                    this._setOption('allowResourceUpdating', value);
                }
                get allowTaskAdding() {
                    return this._getOption('allowTaskAdding');
                }
                set allowTaskAdding(value) {
                    this._setOption('allowTaskAdding', value);
                }
                get allowTaskDeleting() {
                    return this._getOption('allowTaskDeleting');
                }
                set allowTaskDeleting(value) {
                    this._setOption('allowTaskDeleting', value);
                }
                get allowTaskResourceUpdating() {
                    return this._getOption('allowTaskResourceUpdating');
                }
                set allowTaskResourceUpdating(value) {
                    this._setOption('allowTaskResourceUpdating', value);
                }
                get allowTaskUpdating() {
                    return this._getOption('allowTaskUpdating');
                }
                set allowTaskUpdating(value) {
                    this._setOption('allowTaskUpdating', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get allowDragging() {
                    return this._getOption('allowDragging');
                }
                set allowDragging(value) {
                    this._setOption('allowDragging', value);
                }
                get allowResizing() {
                    return this._getOption('allowResizing');
                }
                set allowResizing(value) {
                    this._setOption('allowResizing', value);
                }
                get allowTimeZoneEditing() {
                    return this._getOption('allowTimeZoneEditing');
                }
                set allowTimeZoneEditing(value) {
                    this._setOption('allowTimeZoneEditing', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                changesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                editColumnNameChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                editRowKeyChange;
                get _optionPath() {
                    return 'editing';
                }
                get changesChildren() {
                    return this._getOption('changes');
                }
                set changesChildren(value) {
                    this.setChildren('changes', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'changesChange' },
                        { emit: 'editColumnNameChange' },
                        { emit: 'editRowKeyChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoEditingComponent, selector: "dxo-editing", inputs: { allowAdding: "allowAdding", allowDeleting: "allowDeleting", allowUpdating: "allowUpdating", changes: "changes", confirmDelete: "confirmDelete", editColumnName: "editColumnName", editRowKey: "editRowKey", form: "form", mode: "mode", newRowPosition: "newRowPosition", popup: "popup", refreshMode: "refreshMode", selectTextOnEditStart: "selectTextOnEditStart", startEditAction: "startEditAction", texts: "texts", useIcons: "useIcons", allowAddShape: "allowAddShape", allowChangeConnection: "allowChangeConnection", allowChangeConnectorPoints: "allowChangeConnectorPoints", allowChangeConnectorText: "allowChangeConnectorText", allowChangeShapeText: "allowChangeShapeText", allowDeleteConnector: "allowDeleteConnector", allowDeleteShape: "allowDeleteShape", allowMoveShape: "allowMoveShape", allowResizeShape: "allowResizeShape", allowDependencyAdding: "allowDependencyAdding", allowDependencyDeleting: "allowDependencyDeleting", allowResourceAdding: "allowResourceAdding", allowResourceDeleting: "allowResourceDeleting", allowResourceUpdating: "allowResourceUpdating", allowTaskAdding: "allowTaskAdding", allowTaskDeleting: "allowTaskDeleting", allowTaskResourceUpdating: "allowTaskResourceUpdating", allowTaskUpdating: "allowTaskUpdating", enabled: "enabled", allowDragging: "allowDragging", allowResizing: "allowResizing", allowTimeZoneEditing: "allowTimeZoneEditing" }, outputs: { changesChange: "changesChange", editColumnNameChange: "editColumnNameChange", editRowKeyChange: "editRowKeyChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "changesChildren", predicate: i0.forwardRef(() => DxiChangeComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-editing', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowAdding: [{
                            type: Input
                        }], allowDeleting: [{
                            type: Input
                        }], allowUpdating: [{
                            type: Input
                        }], changes: [{
                            type: Input
                        }], confirmDelete: [{
                            type: Input
                        }], editColumnName: [{
                            type: Input
                        }], editRowKey: [{
                            type: Input
                        }], form: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], newRowPosition: [{
                            type: Input
                        }], popup: [{
                            type: Input
                        }], refreshMode: [{
                            type: Input
                        }], selectTextOnEditStart: [{
                            type: Input
                        }], startEditAction: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], useIcons: [{
                            type: Input
                        }], allowAddShape: [{
                            type: Input
                        }], allowChangeConnection: [{
                            type: Input
                        }], allowChangeConnectorPoints: [{
                            type: Input
                        }], allowChangeConnectorText: [{
                            type: Input
                        }], allowChangeShapeText: [{
                            type: Input
                        }], allowDeleteConnector: [{
                            type: Input
                        }], allowDeleteShape: [{
                            type: Input
                        }], allowMoveShape: [{
                            type: Input
                        }], allowResizeShape: [{
                            type: Input
                        }], allowDependencyAdding: [{
                            type: Input
                        }], allowDependencyDeleting: [{
                            type: Input
                        }], allowResourceAdding: [{
                            type: Input
                        }], allowResourceDeleting: [{
                            type: Input
                        }], allowResourceUpdating: [{
                            type: Input
                        }], allowTaskAdding: [{
                            type: Input
                        }], allowTaskDeleting: [{
                            type: Input
                        }], allowTaskResourceUpdating: [{
                            type: Input
                        }], allowTaskUpdating: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], allowDragging: [{
                            type: Input
                        }], allowResizing: [{
                            type: Input
                        }], allowTimeZoneEditing: [{
                            type: Input
                        }], changesChange: [{
                            type: Output
                        }], editColumnNameChange: [{
                            type: Output
                        }], editRowKeyChange: [{
                            type: Output
                        }], changesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiChangeComponent)]
                        }] } });
            class DxoEditingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingModule, declarations: [DxoEditingComponent], exports: [DxoEditingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingModule });
            } exports("eN", DxoEditingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoEditingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoEditingComponent
                                ],
                                exports: [
                                    DxoEditingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoExportComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get fileName() {
                    return this._getOption('fileName');
                }
                set fileName(value) {
                    this._setOption('fileName', value);
                }
                get formats() {
                    return this._getOption('formats');
                }
                set formats(value) {
                    this._setOption('formats', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get printingEnabled() {
                    return this._getOption('printingEnabled');
                }
                set printingEnabled(value) {
                    this._setOption('printingEnabled', value);
                }
                get svgToCanvas() {
                    return this._getOption('svgToCanvas');
                }
                set svgToCanvas(value) {
                    this._setOption('svgToCanvas', value);
                }
                get allowExportSelectedData() {
                    return this._getOption('allowExportSelectedData');
                }
                set allowExportSelectedData(value) {
                    this._setOption('allowExportSelectedData', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get _optionPath() {
                    return 'export';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoExportComponent, selector: "dxo-export", inputs: { backgroundColor: "backgroundColor", enabled: "enabled", fileName: "fileName", formats: "formats", margin: "margin", printingEnabled: "printingEnabled", svgToCanvas: "svgToCanvas", allowExportSelectedData: "allowExportSelectedData", texts: "texts" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-export', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], fileName: [{
                            type: Input
                        }], formats: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], printingEnabled: [{
                            type: Input
                        }], svgToCanvas: [{
                            type: Input
                        }], allowExportSelectedData: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }] } });
            class DxoExportModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoExportModule, declarations: [DxoExportComponent], exports: [DxoExportComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportModule });
            } exports("cx", DxoExportModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoExportModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoExportComponent
                                ],
                                exports: [
                                    DxoExportComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFieldChooserComponent extends NestedOption {
                get allowSearch() {
                    return this._getOption('allowSearch');
                }
                set allowSearch(value) {
                    this._setOption('allowSearch', value);
                }
                get applyChangesMode() {
                    return this._getOption('applyChangesMode');
                }
                set applyChangesMode(value) {
                    this._setOption('applyChangesMode', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get layout() {
                    return this._getOption('layout');
                }
                set layout(value) {
                    this._setOption('layout', value);
                }
                get searchTimeout() {
                    return this._getOption('searchTimeout');
                }
                set searchTimeout(value) {
                    this._setOption('searchTimeout', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'fieldChooser';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFieldChooserComponent, selector: "dxo-field-chooser", inputs: { allowSearch: "allowSearch", applyChangesMode: "applyChangesMode", enabled: "enabled", height: "height", layout: "layout", searchTimeout: "searchTimeout", texts: "texts", title: "title", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-field-chooser', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowSearch: [{
                            type: Input
                        }], applyChangesMode: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], layout: [{
                            type: Input
                        }], searchTimeout: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoFieldChooserModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserModule, declarations: [DxoFieldChooserComponent], exports: [DxoFieldChooserComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserModule });
            } exports("gd", DxoFieldChooserModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldChooserModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFieldChooserComponent
                                ],
                                exports: [
                                    DxoFieldChooserComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFieldPanelComponent extends NestedOption {
                get allowFieldDragging() {
                    return this._getOption('allowFieldDragging');
                }
                set allowFieldDragging(value) {
                    this._setOption('allowFieldDragging', value);
                }
                get showColumnFields() {
                    return this._getOption('showColumnFields');
                }
                set showColumnFields(value) {
                    this._setOption('showColumnFields', value);
                }
                get showDataFields() {
                    return this._getOption('showDataFields');
                }
                set showDataFields(value) {
                    this._setOption('showDataFields', value);
                }
                get showFilterFields() {
                    return this._getOption('showFilterFields');
                }
                set showFilterFields(value) {
                    this._setOption('showFilterFields', value);
                }
                get showRowFields() {
                    return this._getOption('showRowFields');
                }
                set showRowFields(value) {
                    this._setOption('showRowFields', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'fieldPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFieldPanelComponent, selector: "dxo-field-panel", inputs: { allowFieldDragging: "allowFieldDragging", showColumnFields: "showColumnFields", showDataFields: "showDataFields", showFilterFields: "showFilterFields", showRowFields: "showRowFields", texts: "texts", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-field-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowFieldDragging: [{
                            type: Input
                        }], showColumnFields: [{
                            type: Input
                        }], showDataFields: [{
                            type: Input
                        }], showFilterFields: [{
                            type: Input
                        }], showRowFields: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoFieldPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelModule, declarations: [DxoFieldPanelComponent], exports: [DxoFieldPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelModule });
            } exports("ge", DxoFieldPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFieldPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFieldPanelComponent
                                ],
                                exports: [
                                    DxoFieldPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiFileManagerToolbarItem extends CollectionNestedOption {
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get icon() {
                    return this._getOption('icon');
                }
                set icon(value) {
                    this._setOption('icon', value);
                }
                get locateInMenu() {
                    return this._getOption('locateInMenu');
                }
                set locateInMenu(value) {
                    this._setOption('locateInMenu', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get options() {
                    return this._getOption('options');
                }
                set options(value) {
                    this._setOption('options', value);
                }
                get showText() {
                    return this._getOption('showText');
                }
                set showText(value) {
                    this._setOption('showText', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get widget() {
                    return this._getOption('widget');
                }
                set widget(value) {
                    this._setOption('widget', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileManagerToolbarItem, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFileManagerToolbarItem, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileManagerToolbarItem, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiFileSelectionItemComponent extends DxiFileManagerToolbarItem {
                get _optionPath() {
                    return 'fileSelectionItems';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiFileSelectionItemComponent, selector: "dxi-file-selection-item", inputs: { cssClass: "cssClass", disabled: "disabled", icon: "icon", locateInMenu: "locateInMenu", location: "location", name: "name", options: "options", showText: "showText", text: "text", visible: "visible", widget: "widget" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-file-selection-item', template: '', providers: [NestedOptionHost], inputs: [
                                    'cssClass',
                                    'disabled',
                                    'icon',
                                    'locateInMenu',
                                    'location',
                                    'name',
                                    'options',
                                    'showText',
                                    'text',
                                    'visible',
                                    'widget'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiFileSelectionItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemModule, declarations: [DxiFileSelectionItemComponent], exports: [DxiFileSelectionItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemModule });
            } exports("fa", DxiFileSelectionItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiFileSelectionItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiFileSelectionItemComponent
                                ],
                                exports: [
                                    DxiFileSelectionItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFileUploaderOptions extends NestedOption {
                get abortUpload() {
                    return this._getOption('abortUpload');
                }
                set abortUpload(value) {
                    this._setOption('abortUpload', value);
                }
                get accept() {
                    return this._getOption('accept');
                }
                set accept(value) {
                    this._setOption('accept', value);
                }
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get allowCanceling() {
                    return this._getOption('allowCanceling');
                }
                set allowCanceling(value) {
                    this._setOption('allowCanceling', value);
                }
                get allowedFileExtensions() {
                    return this._getOption('allowedFileExtensions');
                }
                set allowedFileExtensions(value) {
                    this._setOption('allowedFileExtensions', value);
                }
                get chunkSize() {
                    return this._getOption('chunkSize');
                }
                set chunkSize(value) {
                    this._setOption('chunkSize', value);
                }
                get dialogTrigger() {
                    return this._getOption('dialogTrigger');
                }
                set dialogTrigger(value) {
                    this._setOption('dialogTrigger', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get dropZone() {
                    return this._getOption('dropZone');
                }
                set dropZone(value) {
                    this._setOption('dropZone', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get inputAttr() {
                    return this._getOption('inputAttr');
                }
                set inputAttr(value) {
                    this._setOption('inputAttr', value);
                }
                get invalidFileExtensionMessage() {
                    return this._getOption('invalidFileExtensionMessage');
                }
                set invalidFileExtensionMessage(value) {
                    this._setOption('invalidFileExtensionMessage', value);
                }
                get invalidMaxFileSizeMessage() {
                    return this._getOption('invalidMaxFileSizeMessage');
                }
                set invalidMaxFileSizeMessage(value) {
                    this._setOption('invalidMaxFileSizeMessage', value);
                }
                get invalidMinFileSizeMessage() {
                    return this._getOption('invalidMinFileSizeMessage');
                }
                set invalidMinFileSizeMessage(value) {
                    this._setOption('invalidMinFileSizeMessage', value);
                }
                get isDirty() {
                    return this._getOption('isDirty');
                }
                set isDirty(value) {
                    this._setOption('isDirty', value);
                }
                get isValid() {
                    return this._getOption('isValid');
                }
                set isValid(value) {
                    this._setOption('isValid', value);
                }
                get labelText() {
                    return this._getOption('labelText');
                }
                set labelText(value) {
                    this._setOption('labelText', value);
                }
                get maxFileSize() {
                    return this._getOption('maxFileSize');
                }
                set maxFileSize(value) {
                    this._setOption('maxFileSize', value);
                }
                get minFileSize() {
                    return this._getOption('minFileSize');
                }
                set minFileSize(value) {
                    this._setOption('minFileSize', value);
                }
                get multiple() {
                    return this._getOption('multiple');
                }
                set multiple(value) {
                    this._setOption('multiple', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get onBeforeSend() {
                    return this._getOption('onBeforeSend');
                }
                set onBeforeSend(value) {
                    this._setOption('onBeforeSend', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onDropZoneEnter() {
                    return this._getOption('onDropZoneEnter');
                }
                set onDropZoneEnter(value) {
                    this._setOption('onDropZoneEnter', value);
                }
                get onDropZoneLeave() {
                    return this._getOption('onDropZoneLeave');
                }
                set onDropZoneLeave(value) {
                    this._setOption('onDropZoneLeave', value);
                }
                get onFilesUploaded() {
                    return this._getOption('onFilesUploaded');
                }
                set onFilesUploaded(value) {
                    this._setOption('onFilesUploaded', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onProgress() {
                    return this._getOption('onProgress');
                }
                set onProgress(value) {
                    this._setOption('onProgress', value);
                }
                get onUploadAborted() {
                    return this._getOption('onUploadAborted');
                }
                set onUploadAborted(value) {
                    this._setOption('onUploadAborted', value);
                }
                get onUploaded() {
                    return this._getOption('onUploaded');
                }
                set onUploaded(value) {
                    this._setOption('onUploaded', value);
                }
                get onUploadError() {
                    return this._getOption('onUploadError');
                }
                set onUploadError(value) {
                    this._setOption('onUploadError', value);
                }
                get onUploadStarted() {
                    return this._getOption('onUploadStarted');
                }
                set onUploadStarted(value) {
                    this._setOption('onUploadStarted', value);
                }
                get onValueChanged() {
                    return this._getOption('onValueChanged');
                }
                set onValueChanged(value) {
                    this._setOption('onValueChanged', value);
                }
                get progress() {
                    return this._getOption('progress');
                }
                set progress(value) {
                    this._setOption('progress', value);
                }
                get readOnly() {
                    return this._getOption('readOnly');
                }
                set readOnly(value) {
                    this._setOption('readOnly', value);
                }
                get readyToUploadMessage() {
                    return this._getOption('readyToUploadMessage');
                }
                set readyToUploadMessage(value) {
                    this._setOption('readyToUploadMessage', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get selectButtonText() {
                    return this._getOption('selectButtonText');
                }
                set selectButtonText(value) {
                    this._setOption('selectButtonText', value);
                }
                get showFileList() {
                    return this._getOption('showFileList');
                }
                set showFileList(value) {
                    this._setOption('showFileList', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get uploadAbortedMessage() {
                    return this._getOption('uploadAbortedMessage');
                }
                set uploadAbortedMessage(value) {
                    this._setOption('uploadAbortedMessage', value);
                }
                get uploadButtonText() {
                    return this._getOption('uploadButtonText');
                }
                set uploadButtonText(value) {
                    this._setOption('uploadButtonText', value);
                }
                get uploadChunk() {
                    return this._getOption('uploadChunk');
                }
                set uploadChunk(value) {
                    this._setOption('uploadChunk', value);
                }
                get uploadCustomData() {
                    return this._getOption('uploadCustomData');
                }
                set uploadCustomData(value) {
                    this._setOption('uploadCustomData', value);
                }
                get uploadedMessage() {
                    return this._getOption('uploadedMessage');
                }
                set uploadedMessage(value) {
                    this._setOption('uploadedMessage', value);
                }
                get uploadFailedMessage() {
                    return this._getOption('uploadFailedMessage');
                }
                set uploadFailedMessage(value) {
                    this._setOption('uploadFailedMessage', value);
                }
                get uploadFile() {
                    return this._getOption('uploadFile');
                }
                set uploadFile(value) {
                    this._setOption('uploadFile', value);
                }
                get uploadHeaders() {
                    return this._getOption('uploadHeaders');
                }
                set uploadHeaders(value) {
                    this._setOption('uploadHeaders', value);
                }
                get uploadMethod() {
                    return this._getOption('uploadMethod');
                }
                set uploadMethod(value) {
                    this._setOption('uploadMethod', value);
                }
                get uploadMode() {
                    return this._getOption('uploadMode');
                }
                set uploadMode(value) {
                    this._setOption('uploadMode', value);
                }
                get uploadUrl() {
                    return this._getOption('uploadUrl');
                }
                set uploadUrl(value) {
                    this._setOption('uploadUrl', value);
                }
                get validationError() {
                    return this._getOption('validationError');
                }
                set validationError(value) {
                    this._setOption('validationError', value);
                }
                get validationErrors() {
                    return this._getOption('validationErrors');
                }
                set validationErrors(value) {
                    this._setOption('validationErrors', value);
                }
                get validationStatus() {
                    return this._getOption('validationStatus');
                }
                set validationStatus(value) {
                    this._setOption('validationStatus', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFileUploaderOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFileUploaderOptionsComponent extends DxoFileUploaderOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'fileUploaderOptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFileUploaderOptionsComponent, selector: "dxo-file-uploader-options", inputs: { abortUpload: "abortUpload", accept: "accept", accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowCanceling: "allowCanceling", allowedFileExtensions: "allowedFileExtensions", chunkSize: "chunkSize", dialogTrigger: "dialogTrigger", disabled: "disabled", dropZone: "dropZone", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", invalidFileExtensionMessage: "invalidFileExtensionMessage", invalidMaxFileSizeMessage: "invalidMaxFileSizeMessage", invalidMinFileSizeMessage: "invalidMinFileSizeMessage", isDirty: "isDirty", isValid: "isValid", labelText: "labelText", maxFileSize: "maxFileSize", minFileSize: "minFileSize", multiple: "multiple", name: "name", onBeforeSend: "onBeforeSend", onContentReady: "onContentReady", onDisposing: "onDisposing", onDropZoneEnter: "onDropZoneEnter", onDropZoneLeave: "onDropZoneLeave", onFilesUploaded: "onFilesUploaded", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onProgress: "onProgress", onUploadAborted: "onUploadAborted", onUploaded: "onUploaded", onUploadError: "onUploadError", onUploadStarted: "onUploadStarted", onValueChanged: "onValueChanged", progress: "progress", readOnly: "readOnly", readyToUploadMessage: "readyToUploadMessage", rtlEnabled: "rtlEnabled", selectButtonText: "selectButtonText", showFileList: "showFileList", tabIndex: "tabIndex", uploadAbortedMessage: "uploadAbortedMessage", uploadButtonText: "uploadButtonText", uploadChunk: "uploadChunk", uploadCustomData: "uploadCustomData", uploadedMessage: "uploadedMessage", uploadFailedMessage: "uploadFailedMessage", uploadFile: "uploadFile", uploadHeaders: "uploadHeaders", uploadMethod: "uploadMethod", uploadMode: "uploadMode", uploadUrl: "uploadUrl", validationError: "validationError", validationErrors: "validationErrors", validationStatus: "validationStatus", value: "value", visible: "visible", width: "width" }, outputs: { valueChange: "valueChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-file-uploader-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'abortUpload',
                                    'accept',
                                    'accessKey',
                                    'activeStateEnabled',
                                    'allowCanceling',
                                    'allowedFileExtensions',
                                    'chunkSize',
                                    'dialogTrigger',
                                    'disabled',
                                    'dropZone',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'inputAttr',
                                    'invalidFileExtensionMessage',
                                    'invalidMaxFileSizeMessage',
                                    'invalidMinFileSizeMessage',
                                    'isDirty',
                                    'isValid',
                                    'labelText',
                                    'maxFileSize',
                                    'minFileSize',
                                    'multiple',
                                    'name',
                                    'onBeforeSend',
                                    'onContentReady',
                                    'onDisposing',
                                    'onDropZoneEnter',
                                    'onDropZoneLeave',
                                    'onFilesUploaded',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onProgress',
                                    'onUploadAborted',
                                    'onUploaded',
                                    'onUploadError',
                                    'onUploadStarted',
                                    'onValueChanged',
                                    'progress',
                                    'readOnly',
                                    'readyToUploadMessage',
                                    'rtlEnabled',
                                    'selectButtonText',
                                    'showFileList',
                                    'tabIndex',
                                    'uploadAbortedMessage',
                                    'uploadButtonText',
                                    'uploadChunk',
                                    'uploadCustomData',
                                    'uploadedMessage',
                                    'uploadFailedMessage',
                                    'uploadFile',
                                    'uploadHeaders',
                                    'uploadMethod',
                                    'uploadMode',
                                    'uploadUrl',
                                    'validationError',
                                    'validationErrors',
                                    'validationStatus',
                                    'value',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { valueChange: [{
                            type: Output
                        }] } });
            class DxoFileUploaderOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsModule, declarations: [DxoFileUploaderOptionsComponent], exports: [DxoFileUploaderOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsModule });
            } exports("fJ", DxoFileUploaderOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFileUploaderOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFileUploaderOptionsComponent
                                ],
                                exports: [
                                    DxoFileUploaderOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFilterBuilderPopupComponent extends DxoPopupOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                positionChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                get _optionPath() {
                    return 'filterBuilderPopup';
                }
                get toolbarItemsChildren() {
                    return this._getOption('toolbarItems');
                }
                set toolbarItemsChildren(value) {
                    this.setChildren('toolbarItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'heightChange' },
                        { emit: 'positionChange' },
                        { emit: 'visibleChange' },
                        { emit: 'widthChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterBuilderPopupComponent, selector: "dxo-filter-builder-popup", inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "toolbarItemsChildren", predicate: i0.forwardRef(() => DxiToolbarItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-filter-builder-popup', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'animation',
                                    'closeOnOutsideClick',
                                    'container',
                                    'contentTemplate',
                                    'deferRendering',
                                    'disabled',
                                    'dragAndResizeArea',
                                    'dragEnabled',
                                    'dragOutsideBoundary',
                                    'enableBodyScroll',
                                    'focusStateEnabled',
                                    'fullScreen',
                                    'height',
                                    'hideOnOutsideClick',
                                    'hideOnParentScroll',
                                    'hint',
                                    'hoverStateEnabled',
                                    'maxHeight',
                                    'maxWidth',
                                    'minHeight',
                                    'minWidth',
                                    'onContentReady',
                                    'onDisposing',
                                    'onHidden',
                                    'onHiding',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onResize',
                                    'onResizeEnd',
                                    'onResizeStart',
                                    'onShowing',
                                    'onShown',
                                    'onTitleRendered',
                                    'position',
                                    'resizeEnabled',
                                    'restorePosition',
                                    'rtlEnabled',
                                    'shading',
                                    'shadingColor',
                                    'showCloseButton',
                                    'showTitle',
                                    'tabIndex',
                                    'title',
                                    'titleTemplate',
                                    'toolbarItems',
                                    'visible',
                                    'width',
                                    'wrapperAttr'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { heightChange: [{
                            type: Output
                        }], positionChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], toolbarItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiToolbarItemComponent)]
                        }] } });
            class DxoFilterBuilderPopupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupModule, declarations: [DxoFilterBuilderPopupComponent], exports: [DxoFilterBuilderPopupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupModule });
            } exports("g_", DxoFilterBuilderPopupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderPopupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterBuilderPopupComponent
                                ],
                                exports: [
                                    DxoFilterBuilderPopupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFilterBuilderOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get allowHierarchicalFields() {
                    return this._getOption('allowHierarchicalFields');
                }
                set allowHierarchicalFields(value) {
                    this._setOption('allowHierarchicalFields', value);
                }
                get customOperations() {
                    return this._getOption('customOperations');
                }
                set customOperations(value) {
                    this._setOption('customOperations', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get fields() {
                    return this._getOption('fields');
                }
                set fields(value) {
                    this._setOption('fields', value);
                }
                get filterOperationDescriptions() {
                    return this._getOption('filterOperationDescriptions');
                }
                set filterOperationDescriptions(value) {
                    this._setOption('filterOperationDescriptions', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get groupOperationDescriptions() {
                    return this._getOption('groupOperationDescriptions');
                }
                set groupOperationDescriptions(value) {
                    this._setOption('groupOperationDescriptions', value);
                }
                get groupOperations() {
                    return this._getOption('groupOperations');
                }
                set groupOperations(value) {
                    this._setOption('groupOperations', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get maxGroupLevel() {
                    return this._getOption('maxGroupLevel');
                }
                set maxGroupLevel(value) {
                    this._setOption('maxGroupLevel', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onEditorPrepared() {
                    return this._getOption('onEditorPrepared');
                }
                set onEditorPrepared(value) {
                    this._setOption('onEditorPrepared', value);
                }
                get onEditorPreparing() {
                    return this._getOption('onEditorPreparing');
                }
                set onEditorPreparing(value) {
                    this._setOption('onEditorPreparing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onValueChanged() {
                    return this._getOption('onValueChanged');
                }
                set onValueChanged(value) {
                    this._setOption('onValueChanged', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterBuilderOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFilterBuilderComponent extends DxoFilterBuilderOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'filterBuilder';
                }
                get customOperationsChildren() {
                    return this._getOption('customOperations');
                }
                set customOperationsChildren(value) {
                    this.setChildren('customOperations', value);
                }
                get fieldsChildren() {
                    return this._getOption('fields');
                }
                set fieldsChildren(value) {
                    this.setChildren('fields', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterBuilderComponent, selector: "dxo-filter-builder", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowHierarchicalFields: "allowHierarchicalFields", customOperations: "customOperations", disabled: "disabled", elementAttr: "elementAttr", fields: "fields", filterOperationDescriptions: "filterOperationDescriptions", focusStateEnabled: "focusStateEnabled", groupOperationDescriptions: "groupOperationDescriptions", groupOperations: "groupOperations", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxGroupLevel: "maxGroupLevel", onContentReady: "onContentReady", onDisposing: "onDisposing", onEditorPrepared: "onEditorPrepared", onEditorPreparing: "onEditorPreparing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onValueChanged: "onValueChanged", rtlEnabled: "rtlEnabled", tabIndex: "tabIndex", value: "value", visible: "visible", width: "width" }, outputs: { valueChange: "valueChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "customOperationsChildren", predicate: i0.forwardRef(() => DxiCustomOperationComponent) }, { propertyName: "fieldsChildren", predicate: i0.forwardRef(() => DxiFieldComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-filter-builder', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'allowHierarchicalFields',
                                    'customOperations',
                                    'disabled',
                                    'elementAttr',
                                    'fields',
                                    'filterOperationDescriptions',
                                    'focusStateEnabled',
                                    'groupOperationDescriptions',
                                    'groupOperations',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'maxGroupLevel',
                                    'onContentReady',
                                    'onDisposing',
                                    'onEditorPrepared',
                                    'onEditorPreparing',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onValueChanged',
                                    'rtlEnabled',
                                    'tabIndex',
                                    'value',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { valueChange: [{
                            type: Output
                        }], customOperationsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCustomOperationComponent)]
                        }], fieldsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiFieldComponent)]
                        }] } });
            class DxoFilterBuilderModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderModule, declarations: [DxoFilterBuilderComponent], exports: [DxoFilterBuilderComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderModule });
            } exports("gZ", DxoFilterBuilderModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterBuilderModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterBuilderComponent
                                ],
                                exports: [
                                    DxoFilterBuilderComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFilterOperationDescriptionsComponent extends NestedOption {
                get between() {
                    return this._getOption('between');
                }
                set between(value) {
                    this._setOption('between', value);
                }
                get contains() {
                    return this._getOption('contains');
                }
                set contains(value) {
                    this._setOption('contains', value);
                }
                get endsWith() {
                    return this._getOption('endsWith');
                }
                set endsWith(value) {
                    this._setOption('endsWith', value);
                }
                get equal() {
                    return this._getOption('equal');
                }
                set equal(value) {
                    this._setOption('equal', value);
                }
                get greaterThan() {
                    return this._getOption('greaterThan');
                }
                set greaterThan(value) {
                    this._setOption('greaterThan', value);
                }
                get greaterThanOrEqual() {
                    return this._getOption('greaterThanOrEqual');
                }
                set greaterThanOrEqual(value) {
                    this._setOption('greaterThanOrEqual', value);
                }
                get isBlank() {
                    return this._getOption('isBlank');
                }
                set isBlank(value) {
                    this._setOption('isBlank', value);
                }
                get isNotBlank() {
                    return this._getOption('isNotBlank');
                }
                set isNotBlank(value) {
                    this._setOption('isNotBlank', value);
                }
                get lessThan() {
                    return this._getOption('lessThan');
                }
                set lessThan(value) {
                    this._setOption('lessThan', value);
                }
                get lessThanOrEqual() {
                    return this._getOption('lessThanOrEqual');
                }
                set lessThanOrEqual(value) {
                    this._setOption('lessThanOrEqual', value);
                }
                get notContains() {
                    return this._getOption('notContains');
                }
                set notContains(value) {
                    this._setOption('notContains', value);
                }
                get notEqual() {
                    return this._getOption('notEqual');
                }
                set notEqual(value) {
                    this._setOption('notEqual', value);
                }
                get startsWith() {
                    return this._getOption('startsWith');
                }
                set startsWith(value) {
                    this._setOption('startsWith', value);
                }
                get _optionPath() {
                    return 'filterOperationDescriptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterOperationDescriptionsComponent, selector: "dxo-filter-operation-descriptions", inputs: { between: "between", contains: "contains", endsWith: "endsWith", equal: "equal", greaterThan: "greaterThan", greaterThanOrEqual: "greaterThanOrEqual", isBlank: "isBlank", isNotBlank: "isNotBlank", lessThan: "lessThan", lessThanOrEqual: "lessThanOrEqual", notContains: "notContains", notEqual: "notEqual", startsWith: "startsWith" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-filter-operation-descriptions', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { between: [{
                            type: Input
                        }], contains: [{
                            type: Input
                        }], endsWith: [{
                            type: Input
                        }], equal: [{
                            type: Input
                        }], greaterThan: [{
                            type: Input
                        }], greaterThanOrEqual: [{
                            type: Input
                        }], isBlank: [{
                            type: Input
                        }], isNotBlank: [{
                            type: Input
                        }], lessThan: [{
                            type: Input
                        }], lessThanOrEqual: [{
                            type: Input
                        }], notContains: [{
                            type: Input
                        }], notEqual: [{
                            type: Input
                        }], startsWith: [{
                            type: Input
                        }] } });
            class DxoFilterOperationDescriptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsModule, declarations: [DxoFilterOperationDescriptionsComponent], exports: [DxoFilterOperationDescriptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsModule });
            } exports("fh", DxoFilterOperationDescriptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterOperationDescriptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterOperationDescriptionsComponent
                                ],
                                exports: [
                                    DxoFilterOperationDescriptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFilterPanelComponent extends NestedOption {
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get filterEnabled() {
                    return this._getOption('filterEnabled');
                }
                set filterEnabled(value) {
                    this._setOption('filterEnabled', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterEnabledChange;
                get _optionPath() {
                    return 'filterPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'filterEnabledChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterPanelComponent, selector: "dxo-filter-panel", inputs: { customizeText: "customizeText", filterEnabled: "filterEnabled", texts: "texts", visible: "visible" }, outputs: { filterEnabledChange: "filterEnabledChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-filter-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customizeText: [{
                            type: Input
                        }], filterEnabled: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], filterEnabledChange: [{
                            type: Output
                        }] } });
            class DxoFilterPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelModule, declarations: [DxoFilterPanelComponent], exports: [DxoFilterPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelModule });
            } exports("g$", DxoFilterPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterPanelComponent
                                ],
                                exports: [
                                    DxoFilterPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttFilterRow extends NestedOption {
                get applyFilter() {
                    return this._getOption('applyFilter');
                }
                set applyFilter(value) {
                    this._setOption('applyFilter', value);
                }
                get applyFilterText() {
                    return this._getOption('applyFilterText');
                }
                set applyFilterText(value) {
                    this._setOption('applyFilterText', value);
                }
                get betweenEndText() {
                    return this._getOption('betweenEndText');
                }
                set betweenEndText(value) {
                    this._setOption('betweenEndText', value);
                }
                get betweenStartText() {
                    return this._getOption('betweenStartText');
                }
                set betweenStartText(value) {
                    this._setOption('betweenStartText', value);
                }
                get operationDescriptions() {
                    return this._getOption('operationDescriptions');
                }
                set operationDescriptions(value) {
                    this._setOption('operationDescriptions', value);
                }
                get resetOperationText() {
                    return this._getOption('resetOperationText');
                }
                set resetOperationText(value) {
                    this._setOption('resetOperationText', value);
                }
                get showAllText() {
                    return this._getOption('showAllText');
                }
                set showAllText(value) {
                    this._setOption('showAllText', value);
                }
                get showOperationChooser() {
                    return this._getOption('showOperationChooser');
                }
                set showOperationChooser(value) {
                    this._setOption('showOperationChooser', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttFilterRow, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttFilterRow, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttFilterRow, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFilterRowComponent extends DxoGanttFilterRow {
                get _optionPath() {
                    return 'filterRow';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFilterRowComponent, selector: "dxo-filter-row", inputs: { applyFilter: "applyFilter", applyFilterText: "applyFilterText", betweenEndText: "betweenEndText", betweenStartText: "betweenStartText", operationDescriptions: "operationDescriptions", resetOperationText: "resetOperationText", showAllText: "showAllText", showOperationChooser: "showOperationChooser", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-filter-row', template: '', providers: [NestedOptionHost], inputs: [
                                    'applyFilter',
                                    'applyFilterText',
                                    'betweenEndText',
                                    'betweenStartText',
                                    'operationDescriptions',
                                    'resetOperationText',
                                    'showAllText',
                                    'showOperationChooser',
                                    'visible'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFilterRowModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowModule, declarations: [DxoFilterRowComponent], exports: [DxoFilterRowComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowModule });
            } exports("fw", DxoFilterRowModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFilterRowModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFilterRowComponent
                                ],
                                exports: [
                                    DxoFilterRowComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoVizFont extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get family() {
                    return this._getOption('family');
                }
                set family(value) {
                    this._setOption('family', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get weight() {
                    return this._getOption('weight');
                }
                set weight(value) {
                    this._setOption('weight', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVizFont, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoVizFont, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVizFont, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFontComponent extends DxoVizFont {
                get _optionPath() {
                    return 'font';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFontComponent, selector: "dxo-font", inputs: { color: "color", family: "family", opacity: "opacity", size: "size", weight: "weight" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-font', template: '', providers: [NestedOptionHost], inputs: [
                                    'color',
                                    'family',
                                    'opacity',
                                    'size',
                                    'weight'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFontModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFontModule, declarations: [DxoFontComponent], exports: [DxoFontComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontModule });
            } exports("cA", DxoFontModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFontModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFontComponent
                                ],
                                exports: [
                                    DxoFontComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFormSimpleItem extends NestedOption {
                get colSpan() {
                    return this._getOption('colSpan');
                }
                set colSpan(value) {
                    this._setOption('colSpan', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get editorType() {
                    return this._getOption('editorType');
                }
                set editorType(value) {
                    this._setOption('editorType', value);
                }
                get helpText() {
                    return this._getOption('helpText');
                }
                set helpText(value) {
                    this._setOption('helpText', value);
                }
                get isRequired() {
                    return this._getOption('isRequired');
                }
                set isRequired(value) {
                    this._setOption('isRequired', value);
                }
                get itemType() {
                    return this._getOption('itemType');
                }
                set itemType(value) {
                    this._setOption('itemType', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get validationRules() {
                    return this._getOption('validationRules');
                }
                set validationRules(value) {
                    this._setOption('validationRules', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visibleIndex() {
                    return this._getOption('visibleIndex');
                }
                set visibleIndex(value) {
                    this._setOption('visibleIndex', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormSimpleItem, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormSimpleItem, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormSimpleItem, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFormItemComponent extends DxoFormSimpleItem {
                get _optionPath() {
                    return 'formItem';
                }
                get validationRulesChildren() {
                    return this._getOption('validationRules');
                }
                set validationRulesChildren(value) {
                    this.setChildren('validationRules', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormItemComponent, selector: "dxo-form-item", inputs: { colSpan: "colSpan", cssClass: "cssClass", dataField: "dataField", editorOptions: "editorOptions", editorType: "editorType", helpText: "helpText", isRequired: "isRequired", itemType: "itemType", label: "label", name: "name", template: "template", validationRules: "validationRules", visible: "visible", visibleIndex: "visibleIndex" }, providers: [NestedOptionHost], queries: [{ propertyName: "validationRulesChildren", predicate: i0.forwardRef(() => DxiValidationRuleComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-form-item', template: '', providers: [NestedOptionHost], inputs: [
                                    'colSpan',
                                    'cssClass',
                                    'dataField',
                                    'editorOptions',
                                    'editorType',
                                    'helpText',
                                    'isRequired',
                                    'itemType',
                                    'label',
                                    'name',
                                    'template',
                                    'validationRules',
                                    'visible',
                                    'visibleIndex'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { validationRulesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiValidationRuleComponent)]
                        }] } });
            class DxoFormItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemModule, declarations: [DxoFormItemComponent], exports: [DxoFormItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemModule });
            } exports("gV", DxoFormItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFormItemComponent
                                ],
                                exports: [
                                    DxoFormItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoFormOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get alignItemLabels() {
                    return this._getOption('alignItemLabels');
                }
                set alignItemLabels(value) {
                    this._setOption('alignItemLabels', value);
                }
                get alignItemLabelsInAllGroups() {
                    return this._getOption('alignItemLabelsInAllGroups');
                }
                set alignItemLabelsInAllGroups(value) {
                    this._setOption('alignItemLabelsInAllGroups', value);
                }
                get colCount() {
                    return this._getOption('colCount');
                }
                set colCount(value) {
                    this._setOption('colCount', value);
                }
                get colCountByScreen() {
                    return this._getOption('colCountByScreen');
                }
                set colCountByScreen(value) {
                    this._setOption('colCountByScreen', value);
                }
                get customizeItem() {
                    return this._getOption('customizeItem');
                }
                set customizeItem(value) {
                    this._setOption('customizeItem', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get formData() {
                    return this._getOption('formData');
                }
                set formData(value) {
                    this._setOption('formData', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get isDirty() {
                    return this._getOption('isDirty');
                }
                set isDirty(value) {
                    this._setOption('isDirty', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get labelLocation() {
                    return this._getOption('labelLocation');
                }
                set labelLocation(value) {
                    this._setOption('labelLocation', value);
                }
                get labelMode() {
                    return this._getOption('labelMode');
                }
                set labelMode(value) {
                    this._setOption('labelMode', value);
                }
                get minColWidth() {
                    return this._getOption('minColWidth');
                }
                set minColWidth(value) {
                    this._setOption('minColWidth', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onEditorEnterKey() {
                    return this._getOption('onEditorEnterKey');
                }
                set onEditorEnterKey(value) {
                    this._setOption('onEditorEnterKey', value);
                }
                get onFieldDataChanged() {
                    return this._getOption('onFieldDataChanged');
                }
                set onFieldDataChanged(value) {
                    this._setOption('onFieldDataChanged', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get optionalMark() {
                    return this._getOption('optionalMark');
                }
                set optionalMark(value) {
                    this._setOption('optionalMark', value);
                }
                get readOnly() {
                    return this._getOption('readOnly');
                }
                set readOnly(value) {
                    this._setOption('readOnly', value);
                }
                get requiredMark() {
                    return this._getOption('requiredMark');
                }
                set requiredMark(value) {
                    this._setOption('requiredMark', value);
                }
                get requiredMessage() {
                    return this._getOption('requiredMessage');
                }
                set requiredMessage(value) {
                    this._setOption('requiredMessage', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get screenByWidth() {
                    return this._getOption('screenByWidth');
                }
                set screenByWidth(value) {
                    this._setOption('screenByWidth', value);
                }
                get scrollingEnabled() {
                    return this._getOption('scrollingEnabled');
                }
                set scrollingEnabled(value) {
                    this._setOption('scrollingEnabled', value);
                }
                get showColonAfterLabel() {
                    return this._getOption('showColonAfterLabel');
                }
                set showColonAfterLabel(value) {
                    this._setOption('showColonAfterLabel', value);
                }
                get showOptionalMark() {
                    return this._getOption('showOptionalMark');
                }
                set showOptionalMark(value) {
                    this._setOption('showOptionalMark', value);
                }
                get showRequiredMark() {
                    return this._getOption('showRequiredMark');
                }
                set showRequiredMark(value) {
                    this._setOption('showRequiredMark', value);
                }
                get showValidationSummary() {
                    return this._getOption('showValidationSummary');
                }
                set showValidationSummary(value) {
                    this._setOption('showValidationSummary', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get validationGroup() {
                    return this._getOption('validationGroup');
                }
                set validationGroup(value) {
                    this._setOption('validationGroup', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFormComponent extends DxoFormOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                formDataChange;
                get _optionPath() {
                    return 'form';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'formDataChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormComponent, selector: "dxo-form", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", alignItemLabels: "alignItemLabels", alignItemLabelsInAllGroups: "alignItemLabelsInAllGroups", colCount: "colCount", colCountByScreen: "colCountByScreen", customizeItem: "customizeItem", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", formData: "formData", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", isDirty: "isDirty", items: "items", labelLocation: "labelLocation", labelMode: "labelMode", minColWidth: "minColWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onEditorEnterKey: "onEditorEnterKey", onFieldDataChanged: "onFieldDataChanged", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", optionalMark: "optionalMark", readOnly: "readOnly", requiredMark: "requiredMark", requiredMessage: "requiredMessage", rtlEnabled: "rtlEnabled", screenByWidth: "screenByWidth", scrollingEnabled: "scrollingEnabled", showColonAfterLabel: "showColonAfterLabel", showOptionalMark: "showOptionalMark", showRequiredMark: "showRequiredMark", showValidationSummary: "showValidationSummary", tabIndex: "tabIndex", validationGroup: "validationGroup", visible: "visible", width: "width" }, outputs: { formDataChange: "formDataChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-form', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'alignItemLabels',
                                    'alignItemLabelsInAllGroups',
                                    'colCount',
                                    'colCountByScreen',
                                    'customizeItem',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'formData',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'isDirty',
                                    'items',
                                    'labelLocation',
                                    'labelMode',
                                    'minColWidth',
                                    'onContentReady',
                                    'onDisposing',
                                    'onEditorEnterKey',
                                    'onFieldDataChanged',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'optionalMark',
                                    'readOnly',
                                    'requiredMark',
                                    'requiredMessage',
                                    'rtlEnabled',
                                    'screenByWidth',
                                    'scrollingEnabled',
                                    'showColonAfterLabel',
                                    'showOptionalMark',
                                    'showRequiredMark',
                                    'showValidationSummary',
                                    'tabIndex',
                                    'validationGroup',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { formDataChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoFormModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFormModule, declarations: [DxoFormComponent], exports: [DxoFormComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormModule });
            } exports("gX", DxoFormModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFormComponent
                                ],
                                exports: [
                                    DxoFormComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'format';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFormatComponent, selector: "dxo-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatModule, declarations: [DxoFormatComponent], exports: [DxoFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatModule });
            } exports("cB", DxoFormatModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFormatComponent
                                ],
                                exports: [
                                    DxoFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoAnimationState extends NestedOption {
                get left() {
                    return this._getOption('left');
                }
                set left(value) {
                    this._setOption('left', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get scale() {
                    return this._getOption('scale');
                }
                set scale(value) {
                    this._setOption('scale', value);
                }
                get top() {
                    return this._getOption('top');
                }
                set top(value) {
                    this._setOption('top', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationState, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoAnimationState, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoAnimationState, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFromComponent extends DxoAnimationState {
                get _optionPath() {
                    return 'from';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFromComponent, selector: "dxo-from", inputs: { left: "left", opacity: "opacity", position: "position", scale: "scale", top: "top" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-from', template: '', providers: [NestedOptionHost], inputs: [
                                    'left',
                                    'opacity',
                                    'position',
                                    'scale',
                                    'top'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFromModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFromModule, declarations: [DxoFromComponent], exports: [DxoFromComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromModule });
            } exports("bY", DxoFromModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFromModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFromComponent
                                ],
                                exports: [
                                    DxoFromComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedarea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedareaComponent, selector: "dxo-fullstackedarea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-fullstackedarea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaModule, declarations: [DxoFullstackedareaComponent], exports: [DxoFullstackedareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaModule });
            } exports("dz", DxoFullstackedareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedareaComponent
                                ],
                                exports: [
                                    DxoFullstackedareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedbarComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedbar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedbarComponent, selector: "dxo-fullstackedbar", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-fullstackedbar', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarModule, declarations: [DxoFullstackedbarComponent], exports: [DxoFullstackedbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarModule });
            } exports("dA", DxoFullstackedbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedbarComponent
                                ],
                                exports: [
                                    DxoFullstackedbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedlineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedlineComponent, selector: "dxo-fullstackedline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-fullstackedline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedlineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineModule, declarations: [DxoFullstackedlineComponent], exports: [DxoFullstackedlineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineModule });
            } exports("dB", DxoFullstackedlineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedlineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedlineComponent
                                ],
                                exports: [
                                    DxoFullstackedlineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedsplineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedspline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedsplineComponent, selector: "dxo-fullstackedspline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-fullstackedspline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedsplineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineModule, declarations: [DxoFullstackedsplineComponent], exports: [DxoFullstackedsplineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineModule });
            } exports("dC", DxoFullstackedsplineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedsplineComponent
                                ],
                                exports: [
                                    DxoFullstackedsplineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoFullstackedsplineareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'fullstackedsplinearea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoFullstackedsplineareaComponent, selector: "dxo-fullstackedsplinearea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-fullstackedsplinearea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoFullstackedsplineareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaModule, declarations: [DxoFullstackedsplineareaComponent], exports: [DxoFullstackedsplineareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaModule });
            } exports("dD", DxoFullstackedsplineareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoFullstackedsplineareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoFullstackedsplineareaComponent
                                ],
                                exports: [
                                    DxoFullstackedsplineareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGeometryComponent extends NestedOption {
                get endAngle() {
                    return this._getOption('endAngle');
                }
                set endAngle(value) {
                    this._setOption('endAngle', value);
                }
                get startAngle() {
                    return this._getOption('startAngle');
                }
                set startAngle(value) {
                    this._setOption('startAngle', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get _optionPath() {
                    return 'geometry';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGeometryComponent, selector: "dxo-geometry", inputs: { endAngle: "endAngle", startAngle: "startAngle", orientation: "orientation" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-geometry', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { endAngle: [{
                            type: Input
                        }], startAngle: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }] } });
            class DxoGeometryModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryModule, declarations: [DxoGeometryComponent], exports: [DxoGeometryComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryModule });
            } exports("cy", DxoGeometryModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGeometryModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGeometryComponent
                                ],
                                exports: [
                                    DxoGeometryComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGridSizeComponent extends NestedOption {
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'gridSize';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGridSizeComponent, selector: "dxo-grid-size", inputs: { items: "items", value: "value" }, outputs: { valueChange: "valueChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-grid-size', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { items: [{
                            type: Input
                        }], value: [{
                            type: Input
                        }], valueChange: [{
                            type: Output
                        }] } });
            class DxoGridSizeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeModule, declarations: [DxoGridSizeComponent], exports: [DxoGridSizeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeModule });
            } exports("eO", DxoGridSizeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridSizeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGridSizeComponent
                                ],
                                exports: [
                                    DxoGridSizeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGridComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'grid';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGridComponent, selector: "dxo-grid", inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-grid', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoGridModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGridModule, declarations: [DxoGridComponent], exports: [DxoGridComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridModule });
            } exports("d4", DxoGridModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGridModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGridComponent
                                ],
                                exports: [
                                    DxoGridComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiGroupItemComponent extends CollectionNestedOption {
                get alignByColumn() {
                    return this._getOption('alignByColumn');
                }
                set alignByColumn(value) {
                    this._setOption('alignByColumn', value);
                }
                get column() {
                    return this._getOption('column');
                }
                set column(value) {
                    this._setOption('column', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get displayFormat() {
                    return this._getOption('displayFormat');
                }
                set displayFormat(value) {
                    this._setOption('displayFormat', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get showInColumn() {
                    return this._getOption('showInColumn');
                }
                set showInColumn(value) {
                    this._setOption('showInColumn', value);
                }
                get showInGroupFooter() {
                    return this._getOption('showInGroupFooter');
                }
                set showInGroupFooter(value) {
                    this._setOption('showInGroupFooter', value);
                }
                get skipEmptyValues() {
                    return this._getOption('skipEmptyValues');
                }
                set skipEmptyValues(value) {
                    this._setOption('skipEmptyValues', value);
                }
                get summaryType() {
                    return this._getOption('summaryType');
                }
                set summaryType(value) {
                    this._setOption('summaryType', value);
                }
                get valueFormat() {
                    return this._getOption('valueFormat');
                }
                set valueFormat(value) {
                    this._setOption('valueFormat', value);
                }
                get _optionPath() {
                    return 'groupItems';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiGroupItemComponent, selector: "dxi-group-item", inputs: { alignByColumn: "alignByColumn", column: "column", customizeText: "customizeText", displayFormat: "displayFormat", name: "name", showInColumn: "showInColumn", showInGroupFooter: "showInGroupFooter", skipEmptyValues: "skipEmptyValues", summaryType: "summaryType", valueFormat: "valueFormat" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-group-item', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { alignByColumn: [{
                            type: Input
                        }], column: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], displayFormat: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], showInColumn: [{
                            type: Input
                        }], showInGroupFooter: [{
                            type: Input
                        }], skipEmptyValues: [{
                            type: Input
                        }], summaryType: [{
                            type: Input
                        }], valueFormat: [{
                            type: Input
                        }] } });
            class DxiGroupItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemModule, declarations: [DxiGroupItemComponent], exports: [DxiGroupItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGroupItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiGroupItemComponent
                                ],
                                exports: [
                                    DxiGroupItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGroupOperationDescriptionsComponent extends NestedOption {
                get and() {
                    return this._getOption('and');
                }
                set and(value) {
                    this._setOption('and', value);
                }
                get notAnd() {
                    return this._getOption('notAnd');
                }
                set notAnd(value) {
                    this._setOption('notAnd', value);
                }
                get notOr() {
                    return this._getOption('notOr');
                }
                set notOr(value) {
                    this._setOption('notOr', value);
                }
                get or() {
                    return this._getOption('or');
                }
                set or(value) {
                    this._setOption('or', value);
                }
                get _optionPath() {
                    return 'groupOperationDescriptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGroupOperationDescriptionsComponent, selector: "dxo-group-operation-descriptions", inputs: { and: "and", notAnd: "notAnd", notOr: "notOr", or: "or" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-group-operation-descriptions', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { and: [{
                            type: Input
                        }], notAnd: [{
                            type: Input
                        }], notOr: [{
                            type: Input
                        }], or: [{
                            type: Input
                        }] } });
            class DxoGroupOperationDescriptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsModule, declarations: [DxoGroupOperationDescriptionsComponent], exports: [DxoGroupOperationDescriptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsModule });
            } exports("fi", DxoGroupOperationDescriptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupOperationDescriptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGroupOperationDescriptionsComponent
                                ],
                                exports: [
                                    DxoGroupOperationDescriptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGroupPanelComponent extends NestedOption {
                get allowColumnDragging() {
                    return this._getOption('allowColumnDragging');
                }
                set allowColumnDragging(value) {
                    this._setOption('allowColumnDragging', value);
                }
                get emptyPanelText() {
                    return this._getOption('emptyPanelText');
                }
                set emptyPanelText(value) {
                    this._setOption('emptyPanelText', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                get _optionPath() {
                    return 'groupPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'visibleChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGroupPanelComponent, selector: "dxo-group-panel", inputs: { allowColumnDragging: "allowColumnDragging", emptyPanelText: "emptyPanelText", visible: "visible" }, outputs: { visibleChange: "visibleChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-group-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowColumnDragging: [{
                            type: Input
                        }], emptyPanelText: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], visibleChange: [{
                            type: Output
                        }] } });
            class DxoGroupPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelModule, declarations: [DxoGroupPanelComponent], exports: [DxoGroupPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGroupPanelComponent
                                ],
                                exports: [
                                    DxoGroupPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGroupComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get headerHeight() {
                    return this._getOption('headerHeight');
                }
                set headerHeight(value) {
                    this._setOption('headerHeight', value);
                }
                get hoverEnabled() {
                    return this._getOption('hoverEnabled');
                }
                set hoverEnabled(value) {
                    this._setOption('hoverEnabled', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get padding() {
                    return this._getOption('padding');
                }
                set padding(value) {
                    this._setOption('padding', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get _optionPath() {
                    return 'group';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGroupComponent, selector: "dxo-group", inputs: { border: "border", color: "color", headerHeight: "headerHeight", hoverEnabled: "hoverEnabled", hoverStyle: "hoverStyle", label: "label", padding: "padding", selectionStyle: "selectionStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-group', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], headerHeight: [{
                            type: Input
                        }], hoverEnabled: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], padding: [{
                            type: Input
                        }], selectionStyle: [{
                            type: Input
                        }] } });
            class DxoGroupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupModule, declarations: [DxoGroupComponent], exports: [DxoGroupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupModule });
            } exports("h7", DxoGroupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGroupComponent
                                ],
                                exports: [
                                    DxoGroupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGroupingComponent extends NestedOption {
                get allowCollapsing() {
                    return this._getOption('allowCollapsing');
                }
                set allowCollapsing(value) {
                    this._setOption('allowCollapsing', value);
                }
                get autoExpandAll() {
                    return this._getOption('autoExpandAll');
                }
                set autoExpandAll(value) {
                    this._setOption('autoExpandAll', value);
                }
                get contextMenuEnabled() {
                    return this._getOption('contextMenuEnabled');
                }
                set contextMenuEnabled(value) {
                    this._setOption('contextMenuEnabled', value);
                }
                get expandMode() {
                    return this._getOption('expandMode');
                }
                set expandMode(value) {
                    this._setOption('expandMode', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get _optionPath() {
                    return 'grouping';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGroupingComponent, selector: "dxo-grouping", inputs: { allowCollapsing: "allowCollapsing", autoExpandAll: "autoExpandAll", contextMenuEnabled: "contextMenuEnabled", expandMode: "expandMode", texts: "texts" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-grouping', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowCollapsing: [{
                            type: Input
                        }], autoExpandAll: [{
                            type: Input
                        }], contextMenuEnabled: [{
                            type: Input
                        }], expandMode: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }] } });
            class DxoGroupingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingModule, declarations: [DxoGroupingComponent], exports: [DxoGroupingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGroupingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoGroupingComponent
                                ],
                                exports: [
                                    DxoGroupingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHatchingComponent extends NestedOption {
                get direction() {
                    return this._getOption('direction');
                }
                set direction(value) {
                    this._setOption('direction', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get step() {
                    return this._getOption('step');
                }
                set step(value) {
                    this._setOption('step', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'hatching';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHatchingComponent, selector: "dxo-hatching", inputs: { direction: "direction", opacity: "opacity", step: "step", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-hatching', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { direction: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], step: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoHatchingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingModule, declarations: [DxoHatchingComponent], exports: [DxoHatchingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingModule });
            } exports("dl", DxoHatchingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHatchingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHatchingComponent
                                ],
                                exports: [
                                    DxoHatchingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttHeaderFilter extends NestedOption {
                get allowSearch() {
                    return this._getOption('allowSearch');
                }
                set allowSearch(value) {
                    this._setOption('allowSearch', value);
                }
                get allowSelectAll() {
                    return this._getOption('allowSelectAll');
                }
                set allowSelectAll(value) {
                    this._setOption('allowSelectAll', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get groupInterval() {
                    return this._getOption('groupInterval');
                }
                set groupInterval(value) {
                    this._setOption('groupInterval', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get search() {
                    return this._getOption('search');
                }
                set search(value) {
                    this._setOption('search', value);
                }
                get searchMode() {
                    return this._getOption('searchMode');
                }
                set searchMode(value) {
                    this._setOption('searchMode', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get searchTimeout() {
                    return this._getOption('searchTimeout');
                }
                set searchTimeout(value) {
                    this._setOption('searchTimeout', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get showRelevantValues() {
                    return this._getOption('showRelevantValues');
                }
                set showRelevantValues(value) {
                    this._setOption('showRelevantValues', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttHeaderFilter, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttHeaderFilter, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttHeaderFilter, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoHeaderFilterComponent extends DxoGanttHeaderFilter {
                get _optionPath() {
                    return 'headerFilter';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHeaderFilterComponent, selector: "dxo-header-filter", inputs: { allowSearch: "allowSearch", allowSelectAll: "allowSelectAll", dataSource: "dataSource", groupInterval: "groupInterval", height: "height", search: "search", searchMode: "searchMode", width: "width", searchTimeout: "searchTimeout", texts: "texts", visible: "visible", showRelevantValues: "showRelevantValues" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-header-filter', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowSearch',
                                    'allowSelectAll',
                                    'dataSource',
                                    'groupInterval',
                                    'height',
                                    'search',
                                    'searchMode',
                                    'width',
                                    'searchTimeout',
                                    'texts',
                                    'visible',
                                    'showRelevantValues'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoHeaderFilterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterModule, declarations: [DxoHeaderFilterComponent], exports: [DxoHeaderFilterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterModule });
            } exports("ft", DxoHeaderFilterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeaderFilterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHeaderFilterComponent
                                ],
                                exports: [
                                    DxoHeaderFilterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHeightComponent extends NestedOption {
                get rangeMaxPoint() {
                    return this._getOption('rangeMaxPoint');
                }
                set rangeMaxPoint(value) {
                    this._setOption('rangeMaxPoint', value);
                }
                get rangeMinPoint() {
                    return this._getOption('rangeMinPoint');
                }
                set rangeMinPoint(value) {
                    this._setOption('rangeMinPoint', value);
                }
                get _optionPath() {
                    return 'height';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHeightComponent, selector: "dxo-height", inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-height', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { rangeMaxPoint: [{
                            type: Input
                        }], rangeMinPoint: [{
                            type: Input
                        }] } });
            class DxoHeightModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightModule, declarations: [DxoHeightComponent], exports: [DxoHeightComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightModule });
            } exports("dp", DxoHeightModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHeightModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHeightComponent
                                ],
                                exports: [
                                    DxoHeightComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHideEventComponent extends NestedOption {
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'hideEvent';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHideEventComponent, selector: "dxo-hide-event", inputs: { delay: "delay", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-hide-event', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { delay: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxoHideEventModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventModule, declarations: [DxoHideEventComponent], exports: [DxoHideEventComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventModule });
            } exports("fU", DxoHideEventModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideEventModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHideEventComponent
                                ],
                                exports: [
                                    DxoHideEventComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoHideComponent extends DxoAnimationConfig {
                get _optionPath() {
                    return 'hide';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHideComponent, selector: "dxo-hide", inputs: { complete: "complete", delay: "delay", direction: "direction", duration: "duration", easing: "easing", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-hide', template: '', providers: [NestedOptionHost], inputs: [
                                    'complete',
                                    'delay',
                                    'direction',
                                    'duration',
                                    'easing',
                                    'from',
                                    'staggerDelay',
                                    'start',
                                    'to',
                                    'type'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoHideModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHideModule, declarations: [DxoHideComponent], exports: [DxoHideComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideModule });
            } exports("bX", DxoHideModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHideModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHideComponent
                                ],
                                exports: [
                                    DxoHideComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHistoryToolbarComponent extends NestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'historyToolbar';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHistoryToolbarComponent, selector: "dxo-history-toolbar", inputs: { commands: "commands", visible: "visible" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-history-toolbar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commands: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }] } });
            class DxoHistoryToolbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarModule, declarations: [DxoHistoryToolbarComponent], exports: [DxoHistoryToolbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarModule });
            } exports("eP", DxoHistoryToolbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHistoryToolbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHistoryToolbarComponent
                                ],
                                exports: [
                                    DxoHistoryToolbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHorizontalLineComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'horizontalLine';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHorizontalLineComponent, selector: "dxo-horizontal-line", inputs: { color: "color", dashStyle: "dashStyle", label: "label", opacity: "opacity", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-horizontal-line', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoHorizontalLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineModule, declarations: [DxoHorizontalLineComponent], exports: [DxoHorizontalLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineModule });
            } exports("dU", DxoHorizontalLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHorizontalLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHorizontalLineComponent
                                ],
                                exports: [
                                    DxoHorizontalLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHoverStyleComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get hatching() {
                    return this._getOption('hatching');
                }
                set hatching(value) {
                    this._setOption('hatching', value);
                }
                get highlight() {
                    return this._getOption('highlight');
                }
                set highlight(value) {
                    this._setOption('highlight', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'hoverStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHoverStyleComponent, selector: "dxo-hover-style", inputs: { border: "border", color: "color", dashStyle: "dashStyle", hatching: "hatching", highlight: "highlight", width: "width", size: "size", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-hover-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], hatching: [{
                            type: Input
                        }], highlight: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], size: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoHoverStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleModule, declarations: [DxoHoverStyleComponent], exports: [DxoHoverStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleModule });
            } exports("dk", DxoHoverStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHoverStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoHoverStyleComponent
                                ],
                                exports: [
                                    DxoHoverStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorImageUpload extends NestedOption {
                get fileUploaderOptions() {
                    return this._getOption('fileUploaderOptions');
                }
                set fileUploaderOptions(value) {
                    this._setOption('fileUploaderOptions', value);
                }
                get fileUploadMode() {
                    return this._getOption('fileUploadMode');
                }
                set fileUploadMode(value) {
                    this._setOption('fileUploadMode', value);
                }
                get tabs() {
                    return this._getOption('tabs');
                }
                set tabs(value) {
                    this._setOption('tabs', value);
                }
                get uploadDirectory() {
                    return this._getOption('uploadDirectory');
                }
                set uploadDirectory(value) {
                    this._setOption('uploadDirectory', value);
                }
                get uploadUrl() {
                    return this._getOption('uploadUrl');
                }
                set uploadUrl(value) {
                    this._setOption('uploadUrl', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorImageUpload, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorImageUpload, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorImageUpload, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoImageUploadComponent extends DxoHtmlEditorImageUpload {
                get _optionPath() {
                    return 'imageUpload';
                }
                get tabsChildren() {
                    return this._getOption('tabs');
                }
                set tabsChildren(value) {
                    this.setChildren('tabs', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoImageUploadComponent, selector: "dxo-image-upload", inputs: { fileUploaderOptions: "fileUploaderOptions", fileUploadMode: "fileUploadMode", tabs: "tabs", uploadDirectory: "uploadDirectory", uploadUrl: "uploadUrl" }, providers: [NestedOptionHost], queries: [{ propertyName: "tabsChildren", predicate: i0.forwardRef(() => DxiTabComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-image-upload', template: '', providers: [NestedOptionHost], inputs: [
                                    'fileUploaderOptions',
                                    'fileUploadMode',
                                    'tabs',
                                    'uploadDirectory',
                                    'uploadUrl'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { tabsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiTabComponent)]
                        }] } });
            class DxoImageUploadModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadModule, declarations: [DxoImageUploadComponent], exports: [DxoImageUploadComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadModule });
            } exports("fI", DxoImageUploadModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageUploadModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoImageUploadComponent
                                ],
                                exports: [
                                    DxoImageUploadComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoImageComponent extends NestedOption {
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get url() {
                    return this._getOption('url');
                }
                set url(value) {
                    this._setOption('url', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get _optionPath() {
                    return 'image';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoImageComponent, selector: "dxo-image", inputs: { height: "height", url: "url", width: "width", location: "location" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-image', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { height: [{
                            type: Input
                        }], url: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }] } });
            class DxoImageModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoImageModule, declarations: [DxoImageComponent], exports: [DxoImageComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageModule });
            } exports("cZ", DxoImageModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoImageModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoImageComponent
                                ],
                                exports: [
                                    DxoImageComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoIndentComponent extends NestedOption {
                get left() {
                    return this._getOption('left');
                }
                set left(value) {
                    this._setOption('left', value);
                }
                get right() {
                    return this._getOption('right');
                }
                set right(value) {
                    this._setOption('right', value);
                }
                get _optionPath() {
                    return 'indent';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoIndentComponent, selector: "dxo-indent", inputs: { left: "left", right: "right" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-indent', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { left: [{
                            type: Input
                        }], right: [{
                            type: Input
                        }] } });
            class DxoIndentModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentModule, declarations: [DxoIndentComponent], exports: [DxoIndentComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentModule });
            } exports("gp", DxoIndentModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoIndentModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoIndentComponent
                                ],
                                exports: [
                                    DxoIndentComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSortableOptions extends NestedOption {
                get allowDropInsideItem() {
                    return this._getOption('allowDropInsideItem');
                }
                set allowDropInsideItem(value) {
                    this._setOption('allowDropInsideItem', value);
                }
                get allowReordering() {
                    return this._getOption('allowReordering');
                }
                set allowReordering(value) {
                    this._setOption('allowReordering', value);
                }
                get autoScroll() {
                    return this._getOption('autoScroll');
                }
                set autoScroll(value) {
                    this._setOption('autoScroll', value);
                }
                get boundary() {
                    return this._getOption('boundary');
                }
                set boundary(value) {
                    this._setOption('boundary', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get cursorOffset() {
                    return this._getOption('cursorOffset');
                }
                set cursorOffset(value) {
                    this._setOption('cursorOffset', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get dragDirection() {
                    return this._getOption('dragDirection');
                }
                set dragDirection(value) {
                    this._setOption('dragDirection', value);
                }
                get dragTemplate() {
                    return this._getOption('dragTemplate');
                }
                set dragTemplate(value) {
                    this._setOption('dragTemplate', value);
                }
                get dropFeedbackMode() {
                    return this._getOption('dropFeedbackMode');
                }
                set dropFeedbackMode(value) {
                    this._setOption('dropFeedbackMode', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get filter() {
                    return this._getOption('filter');
                }
                set filter(value) {
                    this._setOption('filter', value);
                }
                get group() {
                    return this._getOption('group');
                }
                set group(value) {
                    this._setOption('group', value);
                }
                get handle() {
                    return this._getOption('handle');
                }
                set handle(value) {
                    this._setOption('handle', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get itemOrientation() {
                    return this._getOption('itemOrientation');
                }
                set itemOrientation(value) {
                    this._setOption('itemOrientation', value);
                }
                get moveItemOnDrop() {
                    return this._getOption('moveItemOnDrop');
                }
                set moveItemOnDrop(value) {
                    this._setOption('moveItemOnDrop', value);
                }
                get onAdd() {
                    return this._getOption('onAdd');
                }
                set onAdd(value) {
                    this._setOption('onAdd', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onDragChange() {
                    return this._getOption('onDragChange');
                }
                set onDragChange(value) {
                    this._setOption('onDragChange', value);
                }
                get onDragEnd() {
                    return this._getOption('onDragEnd');
                }
                set onDragEnd(value) {
                    this._setOption('onDragEnd', value);
                }
                get onDragMove() {
                    return this._getOption('onDragMove');
                }
                set onDragMove(value) {
                    this._setOption('onDragMove', value);
                }
                get onDragStart() {
                    return this._getOption('onDragStart');
                }
                set onDragStart(value) {
                    this._setOption('onDragStart', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onRemove() {
                    return this._getOption('onRemove');
                }
                set onRemove(value) {
                    this._setOption('onRemove', value);
                }
                get onReorder() {
                    return this._getOption('onReorder');
                }
                set onReorder(value) {
                    this._setOption('onReorder', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get scrollSensitivity() {
                    return this._getOption('scrollSensitivity');
                }
                set scrollSensitivity(value) {
                    this._setOption('scrollSensitivity', value);
                }
                get scrollSpeed() {
                    return this._getOption('scrollSpeed');
                }
                set scrollSpeed(value) {
                    this._setOption('scrollSpeed', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortableOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSortableOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortableOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoItemDraggingComponent extends DxoSortableOptions {
                get _optionPath() {
                    return 'itemDragging';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoItemDraggingComponent, selector: "dxo-item-dragging", inputs: { allowDropInsideItem: "allowDropInsideItem", allowReordering: "allowReordering", autoScroll: "autoScroll", boundary: "boundary", container: "container", cursorOffset: "cursorOffset", data: "data", dragDirection: "dragDirection", dragTemplate: "dragTemplate", dropFeedbackMode: "dropFeedbackMode", elementAttr: "elementAttr", filter: "filter", group: "group", handle: "handle", height: "height", itemOrientation: "itemOrientation", moveItemOnDrop: "moveItemOnDrop", onAdd: "onAdd", onDisposing: "onDisposing", onDragChange: "onDragChange", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onRemove: "onRemove", onReorder: "onReorder", rtlEnabled: "rtlEnabled", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-item-dragging', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowDropInsideItem',
                                    'allowReordering',
                                    'autoScroll',
                                    'boundary',
                                    'container',
                                    'cursorOffset',
                                    'data',
                                    'dragDirection',
                                    'dragTemplate',
                                    'dropFeedbackMode',
                                    'elementAttr',
                                    'filter',
                                    'group',
                                    'handle',
                                    'height',
                                    'itemOrientation',
                                    'moveItemOnDrop',
                                    'onAdd',
                                    'onDisposing',
                                    'onDragChange',
                                    'onDragEnd',
                                    'onDragMove',
                                    'onDragStart',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onRemove',
                                    'onReorder',
                                    'rtlEnabled',
                                    'scrollSensitivity',
                                    'scrollSpeed',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoItemDraggingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingModule, declarations: [DxoItemDraggingComponent], exports: [DxoItemDraggingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingModule });
            } exports("fQ", DxoItemDraggingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemDraggingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoItemDraggingComponent
                                ],
                                exports: [
                                    DxoItemDraggingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoItemTextFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'itemTextFormat';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoItemTextFormatComponent, selector: "dxo-item-text-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-item-text-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoItemTextFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatModule, declarations: [DxoItemTextFormatComponent], exports: [DxoItemTextFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatModule });
            } exports("cE", DxoItemTextFormatModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemTextFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoItemTextFormatComponent
                                ],
                                exports: [
                                    DxoItemTextFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoItemViewComponent extends NestedOption {
                get details() {
                    return this._getOption('details');
                }
                set details(value) {
                    this._setOption('details', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get showFolders() {
                    return this._getOption('showFolders');
                }
                set showFolders(value) {
                    this._setOption('showFolders', value);
                }
                get showParentFolder() {
                    return this._getOption('showParentFolder');
                }
                set showParentFolder(value) {
                    this._setOption('showParentFolder', value);
                }
                get _optionPath() {
                    return 'itemView';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoItemViewComponent, selector: "dxo-item-view", inputs: { details: "details", mode: "mode", showFolders: "showFolders", showParentFolder: "showParentFolder" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-item-view', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { details: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], showFolders: [{
                            type: Input
                        }], showParentFolder: [{
                            type: Input
                        }] } });
            class DxoItemViewModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewModule, declarations: [DxoItemViewComponent], exports: [DxoItemViewComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewModule });
            } exports("f4", DxoItemViewModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemViewModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoItemViewComponent
                                ],
                                exports: [
                                    DxoItemViewComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoItemComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get _optionPath() {
                    return 'item';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoItemComponent, selector: "dxo-item", inputs: { border: "border", hoverStyle: "hoverStyle", selectionStyle: "selectionStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-item', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], selectionStyle: [{
                            type: Input
                        }] } });
            class DxoItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoItemModule, declarations: [DxoItemComponent], exports: [DxoItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemModule });
            } exports("fn", DxoItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoItemComponent
                                ],
                                exports: [
                                    DxoItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoKeyboardNavigationComponent extends NestedOption {
                get editOnKeyPress() {
                    return this._getOption('editOnKeyPress');
                }
                set editOnKeyPress(value) {
                    this._setOption('editOnKeyPress', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get enterKeyAction() {
                    return this._getOption('enterKeyAction');
                }
                set enterKeyAction(value) {
                    this._setOption('enterKeyAction', value);
                }
                get enterKeyDirection() {
                    return this._getOption('enterKeyDirection');
                }
                set enterKeyDirection(value) {
                    this._setOption('enterKeyDirection', value);
                }
                get _optionPath() {
                    return 'keyboardNavigation';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoKeyboardNavigationComponent, selector: "dxo-keyboard-navigation", inputs: { editOnKeyPress: "editOnKeyPress", enabled: "enabled", enterKeyAction: "enterKeyAction", enterKeyDirection: "enterKeyDirection" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-keyboard-navigation', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { editOnKeyPress: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], enterKeyAction: [{
                            type: Input
                        }], enterKeyDirection: [{
                            type: Input
                        }] } });
            class DxoKeyboardNavigationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationModule, declarations: [DxoKeyboardNavigationComponent], exports: [DxoKeyboardNavigationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationModule });
            } exports("h0", DxoKeyboardNavigationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoKeyboardNavigationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoKeyboardNavigationComponent
                                ],
                                exports: [
                                    DxoKeyboardNavigationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLabelComponent extends NestedOption {
                get connectorColor() {
                    return this._getOption('connectorColor');
                }
                set connectorColor(value) {
                    this._setOption('connectorColor', value);
                }
                get connectorWidth() {
                    return this._getOption('connectorWidth');
                }
                set connectorWidth(value) {
                    this._setOption('connectorWidth', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get indent() {
                    return this._getOption('indent');
                }
                set indent(value) {
                    this._setOption('indent', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get alignment() {
                    return this._getOption('alignment');
                }
                set alignment(value) {
                    this._setOption('alignment', value);
                }
                get customizeHint() {
                    return this._getOption('customizeHint');
                }
                set customizeHint(value) {
                    this._setOption('customizeHint', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get indentFromAxis() {
                    return this._getOption('indentFromAxis');
                }
                set indentFromAxis(value) {
                    this._setOption('indentFromAxis', value);
                }
                get overlappingBehavior() {
                    return this._getOption('overlappingBehavior');
                }
                set overlappingBehavior(value) {
                    this._setOption('overlappingBehavior', value);
                }
                get rotationAngle() {
                    return this._getOption('rotationAngle');
                }
                set rotationAngle(value) {
                    this._setOption('rotationAngle', value);
                }
                get staggeringSpacing() {
                    return this._getOption('staggeringSpacing');
                }
                set staggeringSpacing(value) {
                    this._setOption('staggeringSpacing', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get argumentFormat() {
                    return this._getOption('argumentFormat');
                }
                set argumentFormat(value) {
                    this._setOption('argumentFormat', value);
                }
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get connector() {
                    return this._getOption('connector');
                }
                set connector(value) {
                    this._setOption('connector', value);
                }
                get displayFormat() {
                    return this._getOption('displayFormat');
                }
                set displayFormat(value) {
                    this._setOption('displayFormat', value);
                }
                get horizontalOffset() {
                    return this._getOption('horizontalOffset');
                }
                set horizontalOffset(value) {
                    this._setOption('horizontalOffset', value);
                }
                get showForZeroValues() {
                    return this._getOption('showForZeroValues');
                }
                set showForZeroValues(value) {
                    this._setOption('showForZeroValues', value);
                }
                get verticalOffset() {
                    return this._getOption('verticalOffset');
                }
                set verticalOffset(value) {
                    this._setOption('verticalOffset', value);
                }
                get hideFirstOrLast() {
                    return this._getOption('hideFirstOrLast');
                }
                set hideFirstOrLast(value) {
                    this._setOption('hideFirstOrLast', value);
                }
                get indentFromTick() {
                    return this._getOption('indentFromTick');
                }
                set indentFromTick(value) {
                    this._setOption('indentFromTick', value);
                }
                get useRangeColors() {
                    return this._getOption('useRangeColors');
                }
                set useRangeColors(value) {
                    this._setOption('useRangeColors', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get showColon() {
                    return this._getOption('showColon');
                }
                set showColon(value) {
                    this._setOption('showColon', value);
                }
                get radialOffset() {
                    return this._getOption('radialOffset');
                }
                set radialOffset(value) {
                    this._setOption('radialOffset', value);
                }
                get topIndent() {
                    return this._getOption('topIndent');
                }
                set topIndent(value) {
                    this._setOption('topIndent', value);
                }
                get shadow() {
                    return this._getOption('shadow');
                }
                set shadow(value) {
                    this._setOption('shadow', value);
                }
                get useNodeColors() {
                    return this._getOption('useNodeColors');
                }
                set useNodeColors(value) {
                    this._setOption('useNodeColors', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get _optionPath() {
                    return 'label';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLabelComponent, selector: "dxo-label", inputs: { connectorColor: "connectorColor", connectorWidth: "connectorWidth", customizeText: "customizeText", font: "font", format: "format", indent: "indent", visible: "visible", horizontalAlignment: "horizontalAlignment", position: "position", text: "text", verticalAlignment: "verticalAlignment", alignment: "alignment", customizeHint: "customizeHint", displayMode: "displayMode", indentFromAxis: "indentFromAxis", overlappingBehavior: "overlappingBehavior", rotationAngle: "rotationAngle", staggeringSpacing: "staggeringSpacing", template: "template", textOverflow: "textOverflow", wordWrap: "wordWrap", argumentFormat: "argumentFormat", backgroundColor: "backgroundColor", border: "border", connector: "connector", displayFormat: "displayFormat", horizontalOffset: "horizontalOffset", showForZeroValues: "showForZeroValues", verticalOffset: "verticalOffset", hideFirstOrLast: "hideFirstOrLast", indentFromTick: "indentFromTick", useRangeColors: "useRangeColors", location: "location", showColon: "showColon", radialOffset: "radialOffset", topIndent: "topIndent", shadow: "shadow", useNodeColors: "useNodeColors", dataField: "dataField", enabled: "enabled" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-label', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { connectorColor: [{
                            type: Input
                        }], connectorWidth: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], format: [{
                            type: Input
                        }], indent: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], alignment: [{
                            type: Input
                        }], customizeHint: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], indentFromAxis: [{
                            type: Input
                        }], overlappingBehavior: [{
                            type: Input
                        }], rotationAngle: [{
                            type: Input
                        }], staggeringSpacing: [{
                            type: Input
                        }], template: [{
                            type: Input
                        }], textOverflow: [{
                            type: Input
                        }], wordWrap: [{
                            type: Input
                        }], argumentFormat: [{
                            type: Input
                        }], backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], connector: [{
                            type: Input
                        }], displayFormat: [{
                            type: Input
                        }], horizontalOffset: [{
                            type: Input
                        }], showForZeroValues: [{
                            type: Input
                        }], verticalOffset: [{
                            type: Input
                        }], hideFirstOrLast: [{
                            type: Input
                        }], indentFromTick: [{
                            type: Input
                        }], useRangeColors: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }], showColon: [{
                            type: Input
                        }], radialOffset: [{
                            type: Input
                        }], topIndent: [{
                            type: Input
                        }], shadow: [{
                            type: Input
                        }], useNodeColors: [{
                            type: Input
                        }], dataField: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }] } });
            class DxoLabelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelModule, declarations: [DxoLabelComponent], exports: [DxoLabelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelModule });
            } exports("cz", DxoLabelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLabelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLabelComponent
                                ],
                                exports: [
                                    DxoLabelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiLayerComponent extends CollectionNestedOption {
                get borderColor() {
                    return this._getOption('borderColor');
                }
                set borderColor(value) {
                    this._setOption('borderColor', value);
                }
                get borderWidth() {
                    return this._getOption('borderWidth');
                }
                set borderWidth(value) {
                    this._setOption('borderWidth', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get colorGroupingField() {
                    return this._getOption('colorGroupingField');
                }
                set colorGroupingField(value) {
                    this._setOption('colorGroupingField', value);
                }
                get colorGroups() {
                    return this._getOption('colorGroups');
                }
                set colorGroups(value) {
                    this._setOption('colorGroups', value);
                }
                get customize() {
                    return this._getOption('customize');
                }
                set customize(value) {
                    this._setOption('customize', value);
                }
                get dataField() {
                    return this._getOption('dataField');
                }
                set dataField(value) {
                    this._setOption('dataField', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get elementType() {
                    return this._getOption('elementType');
                }
                set elementType(value) {
                    this._setOption('elementType', value);
                }
                get hoveredBorderColor() {
                    return this._getOption('hoveredBorderColor');
                }
                set hoveredBorderColor(value) {
                    this._setOption('hoveredBorderColor', value);
                }
                get hoveredBorderWidth() {
                    return this._getOption('hoveredBorderWidth');
                }
                set hoveredBorderWidth(value) {
                    this._setOption('hoveredBorderWidth', value);
                }
                get hoveredColor() {
                    return this._getOption('hoveredColor');
                }
                set hoveredColor(value) {
                    this._setOption('hoveredColor', value);
                }
                get hoverEnabled() {
                    return this._getOption('hoverEnabled');
                }
                set hoverEnabled(value) {
                    this._setOption('hoverEnabled', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get maxSize() {
                    return this._getOption('maxSize');
                }
                set maxSize(value) {
                    this._setOption('maxSize', value);
                }
                get minSize() {
                    return this._getOption('minSize');
                }
                set minSize(value) {
                    this._setOption('minSize', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get paletteIndex() {
                    return this._getOption('paletteIndex');
                }
                set paletteIndex(value) {
                    this._setOption('paletteIndex', value);
                }
                get paletteSize() {
                    return this._getOption('paletteSize');
                }
                set paletteSize(value) {
                    this._setOption('paletteSize', value);
                }
                get selectedBorderColor() {
                    return this._getOption('selectedBorderColor');
                }
                set selectedBorderColor(value) {
                    this._setOption('selectedBorderColor', value);
                }
                get selectedBorderWidth() {
                    return this._getOption('selectedBorderWidth');
                }
                set selectedBorderWidth(value) {
                    this._setOption('selectedBorderWidth', value);
                }
                get selectedColor() {
                    return this._getOption('selectedColor');
                }
                set selectedColor(value) {
                    this._setOption('selectedColor', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get sizeGroupingField() {
                    return this._getOption('sizeGroupingField');
                }
                set sizeGroupingField(value) {
                    this._setOption('sizeGroupingField', value);
                }
                get sizeGroups() {
                    return this._getOption('sizeGroups');
                }
                set sizeGroups(value) {
                    this._setOption('sizeGroups', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'layers';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiLayerComponent, selector: "dxi-layer", inputs: { borderColor: "borderColor", borderWidth: "borderWidth", color: "color", colorGroupingField: "colorGroupingField", colorGroups: "colorGroups", customize: "customize", dataField: "dataField", dataSource: "dataSource", elementType: "elementType", hoveredBorderColor: "hoveredBorderColor", hoveredBorderWidth: "hoveredBorderWidth", hoveredColor: "hoveredColor", hoverEnabled: "hoverEnabled", label: "label", maxSize: "maxSize", minSize: "minSize", name: "name", opacity: "opacity", palette: "palette", paletteIndex: "paletteIndex", paletteSize: "paletteSize", selectedBorderColor: "selectedBorderColor", selectedBorderWidth: "selectedBorderWidth", selectedColor: "selectedColor", selectionMode: "selectionMode", size: "size", sizeGroupingField: "sizeGroupingField", sizeGroups: "sizeGroups", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("hc", DxiLayerComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-layer', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { borderColor: [{
                            type: Input
                        }], borderWidth: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], colorGroupingField: [{
                            type: Input
                        }], colorGroups: [{
                            type: Input
                        }], customize: [{
                            type: Input
                        }], dataField: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], elementType: [{
                            type: Input
                        }], hoveredBorderColor: [{
                            type: Input
                        }], hoveredBorderWidth: [{
                            type: Input
                        }], hoveredColor: [{
                            type: Input
                        }], hoverEnabled: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], maxSize: [{
                            type: Input
                        }], minSize: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], palette: [{
                            type: Input
                        }], paletteIndex: [{
                            type: Input
                        }], paletteSize: [{
                            type: Input
                        }], selectedBorderColor: [{
                            type: Input
                        }], selectedBorderWidth: [{
                            type: Input
                        }], selectedColor: [{
                            type: Input
                        }], selectionMode: [{
                            type: Input
                        }], size: [{
                            type: Input
                        }], sizeGroupingField: [{
                            type: Input
                        }], sizeGroups: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxiLayerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerModule, declarations: [DxiLayerComponent], exports: [DxiLayerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerModule });
            } exports("hf", DxiLayerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLayerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiLayerComponent
                                ],
                                exports: [
                                    DxiLayerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiLegendComponent extends CollectionNestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get columnCount() {
                    return this._getOption('columnCount');
                }
                set columnCount(value) {
                    this._setOption('columnCount', value);
                }
                get columnItemSpacing() {
                    return this._getOption('columnItemSpacing');
                }
                set columnItemSpacing(value) {
                    this._setOption('columnItemSpacing', value);
                }
                get customizeHint() {
                    return this._getOption('customizeHint');
                }
                set customizeHint(value) {
                    this._setOption('customizeHint', value);
                }
                get customizeItems() {
                    return this._getOption('customizeItems');
                }
                set customizeItems(value) {
                    this._setOption('customizeItems', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get itemsAlignment() {
                    return this._getOption('itemsAlignment');
                }
                set itemsAlignment(value) {
                    this._setOption('itemsAlignment', value);
                }
                get itemTextPosition() {
                    return this._getOption('itemTextPosition');
                }
                set itemTextPosition(value) {
                    this._setOption('itemTextPosition', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get markerColor() {
                    return this._getOption('markerColor');
                }
                set markerColor(value) {
                    this._setOption('markerColor', value);
                }
                get markerShape() {
                    return this._getOption('markerShape');
                }
                set markerShape(value) {
                    this._setOption('markerShape', value);
                }
                get markerSize() {
                    return this._getOption('markerSize');
                }
                set markerSize(value) {
                    this._setOption('markerSize', value);
                }
                get markerTemplate() {
                    return this._getOption('markerTemplate');
                }
                set markerTemplate(value) {
                    this._setOption('markerTemplate', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get rowCount() {
                    return this._getOption('rowCount');
                }
                set rowCount(value) {
                    this._setOption('rowCount', value);
                }
                get rowItemSpacing() {
                    return this._getOption('rowItemSpacing');
                }
                set rowItemSpacing(value) {
                    this._setOption('rowItemSpacing', value);
                }
                get source() {
                    return this._getOption('source');
                }
                set source(value) {
                    this._setOption('source', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'legends';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiLegendComponent, selector: "dxi-legend", inputs: { backgroundColor: "backgroundColor", border: "border", columnCount: "columnCount", columnItemSpacing: "columnItemSpacing", customizeHint: "customizeHint", customizeItems: "customizeItems", customizeText: "customizeText", font: "font", horizontalAlignment: "horizontalAlignment", itemsAlignment: "itemsAlignment", itemTextPosition: "itemTextPosition", margin: "margin", markerColor: "markerColor", markerShape: "markerShape", markerSize: "markerSize", markerTemplate: "markerTemplate", orientation: "orientation", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", rowCount: "rowCount", rowItemSpacing: "rowItemSpacing", source: "source", title: "title", verticalAlignment: "verticalAlignment", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("hd", DxiLegendComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-legend', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], columnCount: [{
                            type: Input
                        }], columnItemSpacing: [{
                            type: Input
                        }], customizeHint: [{
                            type: Input
                        }], customizeItems: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], itemsAlignment: [{
                            type: Input
                        }], itemTextPosition: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], markerColor: [{
                            type: Input
                        }], markerShape: [{
                            type: Input
                        }], markerSize: [{
                            type: Input
                        }], markerTemplate: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], rowCount: [{
                            type: Input
                        }], rowItemSpacing: [{
                            type: Input
                        }], source: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxiLegendModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendModule, declarations: [DxiLegendComponent], exports: [DxiLegendComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendModule });
            } exports("hg", DxiLegendModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiLegendModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiLegendComponent
                                ],
                                exports: [
                                    DxiLegendComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLegendComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get columnCount() {
                    return this._getOption('columnCount');
                }
                set columnCount(value) {
                    this._setOption('columnCount', value);
                }
                get columnItemSpacing() {
                    return this._getOption('columnItemSpacing');
                }
                set columnItemSpacing(value) {
                    this._setOption('columnItemSpacing', value);
                }
                get customizeHint() {
                    return this._getOption('customizeHint');
                }
                set customizeHint(value) {
                    this._setOption('customizeHint', value);
                }
                get customizeItems() {
                    return this._getOption('customizeItems');
                }
                set customizeItems(value) {
                    this._setOption('customizeItems', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get itemsAlignment() {
                    return this._getOption('itemsAlignment');
                }
                set itemsAlignment(value) {
                    this._setOption('itemsAlignment', value);
                }
                get itemTextFormat() {
                    return this._getOption('itemTextFormat');
                }
                set itemTextFormat(value) {
                    this._setOption('itemTextFormat', value);
                }
                get itemTextPosition() {
                    return this._getOption('itemTextPosition');
                }
                set itemTextPosition(value) {
                    this._setOption('itemTextPosition', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get markerSize() {
                    return this._getOption('markerSize');
                }
                set markerSize(value) {
                    this._setOption('markerSize', value);
                }
                get markerTemplate() {
                    return this._getOption('markerTemplate');
                }
                set markerTemplate(value) {
                    this._setOption('markerTemplate', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get rowCount() {
                    return this._getOption('rowCount');
                }
                set rowCount(value) {
                    this._setOption('rowCount', value);
                }
                get rowItemSpacing() {
                    return this._getOption('rowItemSpacing');
                }
                set rowItemSpacing(value) {
                    this._setOption('rowItemSpacing', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get _optionPath() {
                    return 'legend';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLegendComponent, selector: "dxo-legend", inputs: { backgroundColor: "backgroundColor", border: "border", columnCount: "columnCount", columnItemSpacing: "columnItemSpacing", customizeHint: "customizeHint", customizeItems: "customizeItems", customizeText: "customizeText", font: "font", horizontalAlignment: "horizontalAlignment", itemsAlignment: "itemsAlignment", itemTextFormat: "itemTextFormat", itemTextPosition: "itemTextPosition", margin: "margin", markerSize: "markerSize", markerTemplate: "markerTemplate", orientation: "orientation", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", rowCount: "rowCount", rowItemSpacing: "rowItemSpacing", title: "title", verticalAlignment: "verticalAlignment", visible: "visible", hoverMode: "hoverMode", position: "position" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-legend', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], columnCount: [{
                            type: Input
                        }], columnItemSpacing: [{
                            type: Input
                        }], customizeHint: [{
                            type: Input
                        }], customizeItems: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], itemsAlignment: [{
                            type: Input
                        }], itemTextFormat: [{
                            type: Input
                        }], itemTextPosition: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], markerSize: [{
                            type: Input
                        }], markerTemplate: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], rowCount: [{
                            type: Input
                        }], rowItemSpacing: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], hoverMode: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }] } });
            class DxoLegendModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendModule, declarations: [DxoLegendComponent], exports: [DxoLegendComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendModule });
            } exports("cC", DxoLegendModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLegendModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLegendComponent
                                ],
                                exports: [
                                    DxoLegendComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoLineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'line';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLineComponent, selector: "dxo-line", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-line', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLineModule, declarations: [DxoLineComponent], exports: [DxoLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineModule });
            } exports("dF", DxoLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLineComponent
                                ],
                                exports: [
                                    DxoLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLinkComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get colorMode() {
                    return this._getOption('colorMode');
                }
                set colorMode(value) {
                    this._setOption('colorMode', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'link';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLinkComponent, selector: "dxo-link", inputs: { border: "border", color: "color", colorMode: "colorMode", hoverStyle: "hoverStyle", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-link', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], colorMode: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoLinkModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkModule, declarations: [DxoLinkComponent], exports: [DxoLinkComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkModule });
            } exports("gC", DxoLinkModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLinkModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLinkComponent
                                ],
                                exports: [
                                    DxoLinkComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLoadPanelComponent extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get indicatorSrc() {
                    return this._getOption('indicatorSrc');
                }
                set indicatorSrc(value) {
                    this._setOption('indicatorSrc', value);
                }
                get shading() {
                    return this._getOption('shading');
                }
                set shading(value) {
                    this._setOption('shading', value);
                }
                get shadingColor() {
                    return this._getOption('shadingColor');
                }
                set shadingColor(value) {
                    this._setOption('shadingColor', value);
                }
                get showIndicator() {
                    return this._getOption('showIndicator');
                }
                set showIndicator(value) {
                    this._setOption('showIndicator', value);
                }
                get showPane() {
                    return this._getOption('showPane');
                }
                set showPane(value) {
                    this._setOption('showPane', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'loadPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLoadPanelComponent, selector: "dxo-load-panel", inputs: { enabled: "enabled", height: "height", indicatorSrc: "indicatorSrc", shading: "shading", shadingColor: "shadingColor", showIndicator: "showIndicator", showPane: "showPane", text: "text", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-load-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { enabled: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], indicatorSrc: [{
                            type: Input
                        }], shading: [{
                            type: Input
                        }], shadingColor: [{
                            type: Input
                        }], showIndicator: [{
                            type: Input
                        }], showPane: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoLoadPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelModule, declarations: [DxoLoadPanelComponent], exports: [DxoLoadPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelModule });
            } exports("gf", DxoLoadPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLoadPanelComponent
                                ],
                                exports: [
                                    DxoLoadPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLoadingIndicatorComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get show() {
                    return this._getOption('show');
                }
                set show(value) {
                    this._setOption('show', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showChange;
                get _optionPath() {
                    return 'loadingIndicator';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'showChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLoadingIndicatorComponent, selector: "dxo-loading-indicator", inputs: { backgroundColor: "backgroundColor", font: "font", show: "show", text: "text", enabled: "enabled" }, outputs: { showChange: "showChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-loading-indicator', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], show: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], showChange: [{
                            type: Output
                        }] } });
            class DxoLoadingIndicatorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorModule, declarations: [DxoLoadingIndicatorComponent], exports: [DxoLoadingIndicatorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorModule });
            } exports("cI", DxoLoadingIndicatorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLoadingIndicatorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLoadingIndicatorComponent
                                ],
                                exports: [
                                    DxoLoadingIndicatorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoLookupComponent extends NestedOption {
                get allowClearing() {
                    return this._getOption('allowClearing');
                }
                set allowClearing(value) {
                    this._setOption('allowClearing', value);
                }
                get calculateCellValue() {
                    return this._getOption('calculateCellValue');
                }
                set calculateCellValue(value) {
                    this._setOption('calculateCellValue', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get displayExpr() {
                    return this._getOption('displayExpr');
                }
                set displayExpr(value) {
                    this._setOption('displayExpr', value);
                }
                get valueExpr() {
                    return this._getOption('valueExpr');
                }
                set valueExpr(value) {
                    this._setOption('valueExpr', value);
                }
                get _optionPath() {
                    return 'lookup';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoLookupComponent, selector: "dxo-lookup", inputs: { allowClearing: "allowClearing", calculateCellValue: "calculateCellValue", dataSource: "dataSource", displayExpr: "displayExpr", valueExpr: "valueExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-lookup', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowClearing: [{
                            type: Input
                        }], calculateCellValue: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], displayExpr: [{
                            type: Input
                        }], valueExpr: [{
                            type: Input
                        }] } });
            class DxoLookupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupModule, declarations: [DxoLookupComponent], exports: [DxoLookupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupModule });
            } exports("fg", DxoLookupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoLookupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoLookupComponent
                                ],
                                exports: [
                                    DxoLookupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMainToolbarComponent extends NestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'mainToolbar';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMainToolbarComponent, selector: "dxo-main-toolbar", inputs: { commands: "commands", visible: "visible" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-main-toolbar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commands: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }] } });
            class DxoMainToolbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarModule, declarations: [DxoMainToolbarComponent], exports: [DxoMainToolbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarModule });
            } exports("eQ", DxoMainToolbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMainToolbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMainToolbarComponent
                                ],
                                exports: [
                                    DxoMainToolbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMarginComponent extends NestedOption {
                get bottom() {
                    return this._getOption('bottom');
                }
                set bottom(value) {
                    this._setOption('bottom', value);
                }
                get left() {
                    return this._getOption('left');
                }
                set left(value) {
                    this._setOption('left', value);
                }
                get right() {
                    return this._getOption('right');
                }
                set right(value) {
                    this._setOption('right', value);
                }
                get top() {
                    return this._getOption('top');
                }
                set top(value) {
                    this._setOption('top', value);
                }
                get _optionPath() {
                    return 'margin';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMarginComponent, selector: "dxo-margin", inputs: { bottom: "bottom", left: "left", right: "right", top: "top" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-margin', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { bottom: [{
                            type: Input
                        }], left: [{
                            type: Input
                        }], right: [{
                            type: Input
                        }], top: [{
                            type: Input
                        }] } });
            class DxoMarginModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginModule, declarations: [DxoMarginComponent], exports: [DxoMarginComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginModule });
            } exports("cF", DxoMarginModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarginModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMarginComponent
                                ],
                                exports: [
                                    DxoMarginComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiMarkerComponent extends CollectionNestedOption {
                get iconSrc() {
                    return this._getOption('iconSrc');
                }
                set iconSrc(value) {
                    this._setOption('iconSrc', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get onClick() {
                    return this._getOption('onClick');
                }
                set onClick(value) {
                    this._setOption('onClick', value);
                }
                get tooltip() {
                    return this._getOption('tooltip');
                }
                set tooltip(value) {
                    this._setOption('tooltip', value);
                }
                get _optionPath() {
                    return 'markers';
                }
                get locationChildren() {
                    return this._getOption('location');
                }
                set locationChildren(value) {
                    this.setChildren('location', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiMarkerComponent, selector: "dxi-marker", inputs: { iconSrc: "iconSrc", location: "location", onClick: "onClick", tooltip: "tooltip" }, providers: [NestedOptionHost], queries: [{ propertyName: "locationChildren", predicate: i0.forwardRef(() => DxiLocationComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fX", DxiMarkerComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-marker', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { iconSrc: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }], onClick: [{
                            type: Input
                        }], tooltip: [{
                            type: Input
                        }], locationChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiLocationComponent)]
                        }] } });
            class DxiMarkerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerModule, declarations: [DxiMarkerComponent], exports: [DxiMarkerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerModule });
            } exports("f$", DxiMarkerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMarkerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiMarkerComponent
                                ],
                                exports: [
                                    DxiMarkerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMarkerComponent extends NestedOption {
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get separatorHeight() {
                    return this._getOption('separatorHeight');
                }
                set separatorHeight(value) {
                    this._setOption('separatorHeight', value);
                }
                get textLeftIndent() {
                    return this._getOption('textLeftIndent');
                }
                set textLeftIndent(value) {
                    this._setOption('textLeftIndent', value);
                }
                get textTopIndent() {
                    return this._getOption('textTopIndent');
                }
                set textTopIndent(value) {
                    this._setOption('textTopIndent', value);
                }
                get topIndent() {
                    return this._getOption('topIndent');
                }
                set topIndent(value) {
                    this._setOption('topIndent', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'marker';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMarkerComponent, selector: "dxo-marker", inputs: { label: "label", separatorHeight: "separatorHeight", textLeftIndent: "textLeftIndent", textTopIndent: "textTopIndent", topIndent: "topIndent", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-marker', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { label: [{
                            type: Input
                        }], separatorHeight: [{
                            type: Input
                        }], textLeftIndent: [{
                            type: Input
                        }], textTopIndent: [{
                            type: Input
                        }], topIndent: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoMarkerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerModule, declarations: [DxoMarkerComponent], exports: [DxoMarkerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerModule });
            } exports("gq", DxoMarkerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMarkerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMarkerComponent
                                ],
                                exports: [
                                    DxoMarkerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMasterDetailComponent extends NestedOption {
                renderer;
                document;
                element;
                get autoExpandAll() {
                    return this._getOption('autoExpandAll');
                }
                set autoExpandAll(value) {
                    this._setOption('autoExpandAll', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get _optionPath() {
                    return 'masterDetail';
                }
                constructor(parentOptionHost, optionHost, renderer, document, templateHost, element) {
                    super();
                    this.renderer = renderer;
                    this.document = document;
                    this.element = element;
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                    templateHost.setHost(this);
                }
                setTemplate(template) {
                    this.template = template;
                }
                ngAfterViewInit() {
                    extractTemplate(this, this.element, this.renderer, this.document);
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }, { token: i0.Renderer2 }, { token: DOCUMENT }, { token: DxTemplateHost, host: true }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMasterDetailComponent, selector: "dxo-master-detail", inputs: { autoExpandAll: "autoExpandAll", enabled: "enabled", template: "template" }, providers: [NestedOptionHost, DxTemplateHost], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, styles: [":host{display:block}\n"] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-master-detail', template: '<ng-content></ng-content>', providers: [NestedOptionHost, DxTemplateHost], styles: [":host{display:block}\n"] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [DOCUMENT]
                            }] }, { type: DxTemplateHost, decorators: [{
                                type: Host
                            }] }, { type: i0.ElementRef }], propDecorators: { autoExpandAll: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], template: [{
                            type: Input
                        }] } });
            class DxoMasterDetailModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailModule, declarations: [DxoMasterDetailComponent], exports: [DxoMasterDetailComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMasterDetailModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMasterDetailComponent
                                ],
                                exports: [
                                    DxoMasterDetailComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMaxRangeComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'maxRange';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMaxRangeComponent, selector: "dxo-max-range", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-max-range', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoMaxRangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeModule, declarations: [DxoMaxRangeComponent], exports: [DxoMaxRangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeModule });
            } exports("gr", DxoMaxRangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMaxRangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMaxRangeComponent
                                ],
                                exports: [
                                    DxoMaxRangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorMediaResizing extends NestedOption {
                get allowedTargets() {
                    return this._getOption('allowedTargets');
                }
                set allowedTargets(value) {
                    this._setOption('allowedTargets', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorMediaResizing, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorMediaResizing, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorMediaResizing, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoMediaResizingComponent extends DxoHtmlEditorMediaResizing {
                get _optionPath() {
                    return 'mediaResizing';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMediaResizingComponent, selector: "dxo-media-resizing", inputs: { allowedTargets: "allowedTargets", enabled: "enabled" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-media-resizing', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowedTargets',
                                    'enabled'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoMediaResizingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingModule, declarations: [DxoMediaResizingComponent], exports: [DxoMediaResizingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingModule });
            } exports("fK", DxoMediaResizingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMediaResizingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMediaResizingComponent
                                ],
                                exports: [
                                    DxoMediaResizingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiHtmlEditorMention extends CollectionNestedOption {
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get displayExpr() {
                    return this._getOption('displayExpr');
                }
                set displayExpr(value) {
                    this._setOption('displayExpr', value);
                }
                get itemTemplate() {
                    return this._getOption('itemTemplate');
                }
                set itemTemplate(value) {
                    this._setOption('itemTemplate', value);
                }
                get marker() {
                    return this._getOption('marker');
                }
                set marker(value) {
                    this._setOption('marker', value);
                }
                get minSearchLength() {
                    return this._getOption('minSearchLength');
                }
                set minSearchLength(value) {
                    this._setOption('minSearchLength', value);
                }
                get searchExpr() {
                    return this._getOption('searchExpr');
                }
                set searchExpr(value) {
                    this._setOption('searchExpr', value);
                }
                get searchTimeout() {
                    return this._getOption('searchTimeout');
                }
                set searchTimeout(value) {
                    this._setOption('searchTimeout', value);
                }
                get template() {
                    return this._getOption('template');
                }
                set template(value) {
                    this._setOption('template', value);
                }
                get valueExpr() {
                    return this._getOption('valueExpr');
                }
                set valueExpr(value) {
                    this._setOption('valueExpr', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiHtmlEditorMention, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiHtmlEditorMention, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiHtmlEditorMention, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiMentionComponent extends DxiHtmlEditorMention {
                get _optionPath() {
                    return 'mentions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiMentionComponent, selector: "dxi-mention", inputs: { dataSource: "dataSource", displayExpr: "displayExpr", itemTemplate: "itemTemplate", marker: "marker", minSearchLength: "minSearchLength", searchExpr: "searchExpr", searchTimeout: "searchTimeout", template: "template", valueExpr: "valueExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fH", DxiMentionComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-mention', template: '', providers: [NestedOptionHost], inputs: [
                                    'dataSource',
                                    'displayExpr',
                                    'itemTemplate',
                                    'marker',
                                    'minSearchLength',
                                    'searchExpr',
                                    'searchTimeout',
                                    'template',
                                    'valueExpr'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiMentionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionModule, declarations: [DxiMentionComponent], exports: [DxiMentionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionModule });
            } exports("fL", DxiMentionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMentionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiMentionComponent
                                ],
                                exports: [
                                    DxiMentionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiMenuItemComponent extends CollectionNestedOption {
                get action() {
                    return this._getOption('action');
                }
                set action(value) {
                    this._setOption('action', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get _optionPath() {
                    return 'menuItems';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiMenuItemComponent, selector: "dxi-menu-item", inputs: { action: "action", text: "text" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fP", DxiMenuItemComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-menu-item', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { action: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }] } });
            class DxiMenuItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemModule, declarations: [DxiMenuItemComponent], exports: [DxiMenuItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemModule });
            } exports("fR", DxiMenuItemModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiMenuItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiMenuItemComponent
                                ],
                                exports: [
                                    DxiMenuItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinRangeComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'minRange';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinRangeComponent, selector: "dxo-min-range", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-min-range', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoMinRangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeModule, declarations: [DxoMinRangeComponent], exports: [DxoMinRangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeModule });
            } exports("gs", DxoMinRangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinRangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinRangeComponent
                                ],
                                exports: [
                                    DxoMinRangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinVisualRangeLengthComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'minVisualRangeLength';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinVisualRangeLengthComponent, selector: "dxo-min-visual-range-length", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-min-visual-range-length', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoMinVisualRangeLengthModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthModule, declarations: [DxoMinVisualRangeLengthComponent], exports: [DxoMinVisualRangeLengthComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthModule });
            } exports("d8", DxoMinVisualRangeLengthModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinVisualRangeLengthModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinVisualRangeLengthComponent
                                ],
                                exports: [
                                    DxoMinVisualRangeLengthComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinorGridComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'minorGrid';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinorGridComponent, selector: "dxo-minor-grid", inputs: { color: "color", opacity: "opacity", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-minor-grid', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoMinorGridModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridModule, declarations: [DxoMinorGridComponent], exports: [DxoMinorGridComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridModule });
            } exports("d5", DxoMinorGridModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorGridModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinorGridComponent
                                ],
                                exports: [
                                    DxoMinorGridComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinorTickIntervalComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'minorTickInterval';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinorTickIntervalComponent, selector: "dxo-minor-tick-interval", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-minor-tick-interval', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoMinorTickIntervalModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalModule, declarations: [DxoMinorTickIntervalComponent], exports: [DxoMinorTickIntervalComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalModule });
            } exports("d7", DxoMinorTickIntervalModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickIntervalModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinorTickIntervalComponent
                                ],
                                exports: [
                                    DxoMinorTickIntervalComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMinorTickComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get length() {
                    return this._getOption('length');
                }
                set length(value) {
                    this._setOption('length', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get shift() {
                    return this._getOption('shift');
                }
                set shift(value) {
                    this._setOption('shift', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'minorTick';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMinorTickComponent, selector: "dxo-minor-tick", inputs: { color: "color", length: "length", opacity: "opacity", shift: "shift", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-minor-tick', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], length: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], shift: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoMinorTickModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickModule, declarations: [DxoMinorTickComponent], exports: [DxoMinorTickComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickModule });
            } exports("d6", DxoMinorTickModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMinorTickModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMinorTickComponent
                                ],
                                exports: [
                                    DxoMinorTickComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoMyComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'my';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoMyComponent, selector: "dxo-my", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-my', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoMyModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoMyModule, declarations: [DxoMyComponent], exports: [DxoMyComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyModule });
            } exports("c1", DxoMyModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoMyModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoMyComponent
                                ],
                                exports: [
                                    DxoMyComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoNodeComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get padding() {
                    return this._getOption('padding');
                }
                set padding(value) {
                    this._setOption('padding', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'node';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoNodeComponent, selector: "dxo-node", inputs: { border: "border", color: "color", hoverStyle: "hoverStyle", opacity: "opacity", padding: "padding", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-node', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], padding: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoNodeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeModule, declarations: [DxoNodeComponent], exports: [DxoNodeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeModule });
            } exports("gD", DxoNodeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoNodeComponent
                                ],
                                exports: [
                                    DxoNodeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoNodesComponent extends NestedOption {
                get autoLayout() {
                    return this._getOption('autoLayout');
                }
                set autoLayout(value) {
                    this._setOption('autoLayout', value);
                }
                get autoSizeEnabled() {
                    return this._getOption('autoSizeEnabled');
                }
                set autoSizeEnabled(value) {
                    this._setOption('autoSizeEnabled', value);
                }
                get containerChildrenExpr() {
                    return this._getOption('containerChildrenExpr');
                }
                set containerChildrenExpr(value) {
                    this._setOption('containerChildrenExpr', value);
                }
                get containerKeyExpr() {
                    return this._getOption('containerKeyExpr');
                }
                set containerKeyExpr(value) {
                    this._setOption('containerKeyExpr', value);
                }
                get customDataExpr() {
                    return this._getOption('customDataExpr');
                }
                set customDataExpr(value) {
                    this._setOption('customDataExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get heightExpr() {
                    return this._getOption('heightExpr');
                }
                set heightExpr(value) {
                    this._setOption('heightExpr', value);
                }
                get imageUrlExpr() {
                    return this._getOption('imageUrlExpr');
                }
                set imageUrlExpr(value) {
                    this._setOption('imageUrlExpr', value);
                }
                get itemsExpr() {
                    return this._getOption('itemsExpr');
                }
                set itemsExpr(value) {
                    this._setOption('itemsExpr', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get leftExpr() {
                    return this._getOption('leftExpr');
                }
                set leftExpr(value) {
                    this._setOption('leftExpr', value);
                }
                get lockedExpr() {
                    return this._getOption('lockedExpr');
                }
                set lockedExpr(value) {
                    this._setOption('lockedExpr', value);
                }
                get parentKeyExpr() {
                    return this._getOption('parentKeyExpr');
                }
                set parentKeyExpr(value) {
                    this._setOption('parentKeyExpr', value);
                }
                get styleExpr() {
                    return this._getOption('styleExpr');
                }
                set styleExpr(value) {
                    this._setOption('styleExpr', value);
                }
                get textExpr() {
                    return this._getOption('textExpr');
                }
                set textExpr(value) {
                    this._setOption('textExpr', value);
                }
                get textStyleExpr() {
                    return this._getOption('textStyleExpr');
                }
                set textStyleExpr(value) {
                    this._setOption('textStyleExpr', value);
                }
                get topExpr() {
                    return this._getOption('topExpr');
                }
                set topExpr(value) {
                    this._setOption('topExpr', value);
                }
                get typeExpr() {
                    return this._getOption('typeExpr');
                }
                set typeExpr(value) {
                    this._setOption('typeExpr', value);
                }
                get widthExpr() {
                    return this._getOption('widthExpr');
                }
                set widthExpr(value) {
                    this._setOption('widthExpr', value);
                }
                get zIndexExpr() {
                    return this._getOption('zIndexExpr');
                }
                set zIndexExpr(value) {
                    this._setOption('zIndexExpr', value);
                }
                get _optionPath() {
                    return 'nodes';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoNodesComponent, selector: "dxo-nodes", inputs: { autoLayout: "autoLayout", autoSizeEnabled: "autoSizeEnabled", containerChildrenExpr: "containerChildrenExpr", containerKeyExpr: "containerKeyExpr", customDataExpr: "customDataExpr", dataSource: "dataSource", heightExpr: "heightExpr", imageUrlExpr: "imageUrlExpr", itemsExpr: "itemsExpr", keyExpr: "keyExpr", leftExpr: "leftExpr", lockedExpr: "lockedExpr", parentKeyExpr: "parentKeyExpr", styleExpr: "styleExpr", textExpr: "textExpr", textStyleExpr: "textStyleExpr", topExpr: "topExpr", typeExpr: "typeExpr", widthExpr: "widthExpr", zIndexExpr: "zIndexExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-nodes', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { autoLayout: [{
                            type: Input
                        }], autoSizeEnabled: [{
                            type: Input
                        }], containerChildrenExpr: [{
                            type: Input
                        }], containerKeyExpr: [{
                            type: Input
                        }], customDataExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], heightExpr: [{
                            type: Input
                        }], imageUrlExpr: [{
                            type: Input
                        }], itemsExpr: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], leftExpr: [{
                            type: Input
                        }], lockedExpr: [{
                            type: Input
                        }], parentKeyExpr: [{
                            type: Input
                        }], styleExpr: [{
                            type: Input
                        }], textExpr: [{
                            type: Input
                        }], textStyleExpr: [{
                            type: Input
                        }], topExpr: [{
                            type: Input
                        }], typeExpr: [{
                            type: Input
                        }], widthExpr: [{
                            type: Input
                        }], zIndexExpr: [{
                            type: Input
                        }] } });
            class DxoNodesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesModule, declarations: [DxoNodesComponent], exports: [DxoNodesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesModule });
            } exports("eR", DxoNodesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNodesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoNodesComponent
                                ],
                                exports: [
                                    DxoNodesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoNotificationsComponent extends NestedOption {
                get showPanel() {
                    return this._getOption('showPanel');
                }
                set showPanel(value) {
                    this._setOption('showPanel', value);
                }
                get showPopup() {
                    return this._getOption('showPopup');
                }
                set showPopup(value) {
                    this._setOption('showPopup', value);
                }
                get _optionPath() {
                    return 'notifications';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoNotificationsComponent, selector: "dxo-notifications", inputs: { showPanel: "showPanel", showPopup: "showPopup" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-notifications', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { showPanel: [{
                            type: Input
                        }], showPopup: [{
                            type: Input
                        }] } });
            class DxoNotificationsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsModule, declarations: [DxoNotificationsComponent], exports: [DxoNotificationsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsModule });
            } exports("f7", DxoNotificationsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoNotificationsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoNotificationsComponent
                                ],
                                exports: [
                                    DxoNotificationsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoOffsetComponent extends NestedOption {
                get x() {
                    return this._getOption('x');
                }
                set x(value) {
                    this._setOption('x', value);
                }
                get y() {
                    return this._getOption('y');
                }
                set y(value) {
                    this._setOption('y', value);
                }
                get _optionPath() {
                    return 'offset';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoOffsetComponent, selector: "dxo-offset", inputs: { x: "x", y: "y" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-offset', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { x: [{
                            type: Input
                        }], y: [{
                            type: Input
                        }] } });
            class DxoOffsetModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetModule, declarations: [DxoOffsetComponent], exports: [DxoOffsetComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetModule });
            } exports("c2", DxoOffsetModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOffsetModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoOffsetComponent
                                ],
                                exports: [
                                    DxoOffsetComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttFilterRowOperationDescriptions extends NestedOption {
                get between() {
                    return this._getOption('between');
                }
                set between(value) {
                    this._setOption('between', value);
                }
                get contains() {
                    return this._getOption('contains');
                }
                set contains(value) {
                    this._setOption('contains', value);
                }
                get endsWith() {
                    return this._getOption('endsWith');
                }
                set endsWith(value) {
                    this._setOption('endsWith', value);
                }
                get equal() {
                    return this._getOption('equal');
                }
                set equal(value) {
                    this._setOption('equal', value);
                }
                get greaterThan() {
                    return this._getOption('greaterThan');
                }
                set greaterThan(value) {
                    this._setOption('greaterThan', value);
                }
                get greaterThanOrEqual() {
                    return this._getOption('greaterThanOrEqual');
                }
                set greaterThanOrEqual(value) {
                    this._setOption('greaterThanOrEqual', value);
                }
                get lessThan() {
                    return this._getOption('lessThan');
                }
                set lessThan(value) {
                    this._setOption('lessThan', value);
                }
                get lessThanOrEqual() {
                    return this._getOption('lessThanOrEqual');
                }
                set lessThanOrEqual(value) {
                    this._setOption('lessThanOrEqual', value);
                }
                get notContains() {
                    return this._getOption('notContains');
                }
                set notContains(value) {
                    this._setOption('notContains', value);
                }
                get notEqual() {
                    return this._getOption('notEqual');
                }
                set notEqual(value) {
                    this._setOption('notEqual', value);
                }
                get startsWith() {
                    return this._getOption('startsWith');
                }
                set startsWith(value) {
                    this._setOption('startsWith', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttFilterRowOperationDescriptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttFilterRowOperationDescriptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttFilterRowOperationDescriptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoOperationDescriptionsComponent extends DxoGanttFilterRowOperationDescriptions {
                get _optionPath() {
                    return 'operationDescriptions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoOperationDescriptionsComponent, selector: "dxo-operation-descriptions", inputs: { between: "between", contains: "contains", endsWith: "endsWith", equal: "equal", greaterThan: "greaterThan", greaterThanOrEqual: "greaterThanOrEqual", lessThan: "lessThan", lessThanOrEqual: "lessThanOrEqual", notContains: "notContains", notEqual: "notEqual", startsWith: "startsWith" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-operation-descriptions', template: '', providers: [NestedOptionHost], inputs: [
                                    'between',
                                    'contains',
                                    'endsWith',
                                    'equal',
                                    'greaterThan',
                                    'greaterThanOrEqual',
                                    'lessThan',
                                    'lessThanOrEqual',
                                    'notContains',
                                    'notEqual',
                                    'startsWith'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoOperationDescriptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsModule, declarations: [DxoOperationDescriptionsComponent], exports: [DxoOperationDescriptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsModule });
            } exports("fx", DxoOperationDescriptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOperationDescriptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoOperationDescriptionsComponent
                                ],
                                exports: [
                                    DxoOperationDescriptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoOptionsComponent extends DxoButtonOptions {
                get _optionPath() {
                    return 'options';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoOptionsComponent, selector: "dxo-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", icon: "icon", onClick: "onClick", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", rtlEnabled: "rtlEnabled", stylingMode: "stylingMode", tabIndex: "tabIndex", template: "template", text: "text", type: "type", useSubmitBehavior: "useSubmitBehavior", validationGroup: "validationGroup", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'icon',
                                    'onClick',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'rtlEnabled',
                                    'stylingMode',
                                    'tabIndex',
                                    'template',
                                    'text',
                                    'type',
                                    'useSubmitBehavior',
                                    'validationGroup',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsModule, declarations: [DxoOptionsComponent], exports: [DxoOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsModule });
            } exports("bU", DxoOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoOptionsComponent
                                ],
                                exports: [
                                    DxoOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPageSizeComponent extends NestedOption {
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                get _optionPath() {
                    return 'pageSize';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'heightChange' },
                        { emit: 'widthChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPageSizeComponent, selector: "dxo-page-size", inputs: { height: "height", items: "items", width: "width" }, outputs: { heightChange: "heightChange", widthChange: "widthChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-page-size', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { height: [{
                            type: Input
                        }], items: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], heightChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoPageSizeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeModule, declarations: [DxoPageSizeComponent], exports: [DxoPageSizeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeModule });
            } exports("eT", DxoPageSizeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPageSizeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPageSizeComponent
                                ],
                                exports: [
                                    DxoPageSizeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPagerComponent extends NestedOption {
                get allowedPageSizes() {
                    return this._getOption('allowedPageSizes');
                }
                set allowedPageSizes(value) {
                    this._setOption('allowedPageSizes', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get infoText() {
                    return this._getOption('infoText');
                }
                set infoText(value) {
                    this._setOption('infoText', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get showInfo() {
                    return this._getOption('showInfo');
                }
                set showInfo(value) {
                    this._setOption('showInfo', value);
                }
                get showNavigationButtons() {
                    return this._getOption('showNavigationButtons');
                }
                set showNavigationButtons(value) {
                    this._setOption('showNavigationButtons', value);
                }
                get showPageSizeSelector() {
                    return this._getOption('showPageSizeSelector');
                }
                set showPageSizeSelector(value) {
                    this._setOption('showPageSizeSelector', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'pager';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPagerComponent, selector: "dxo-pager", inputs: { allowedPageSizes: "allowedPageSizes", displayMode: "displayMode", infoText: "infoText", label: "label", showInfo: "showInfo", showNavigationButtons: "showNavigationButtons", showPageSizeSelector: "showPageSizeSelector", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-pager', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowedPageSizes: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], infoText: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], showInfo: [{
                            type: Input
                        }], showNavigationButtons: [{
                            type: Input
                        }], showPageSizeSelector: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoPagerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerModule, declarations: [DxoPagerComponent], exports: [DxoPagerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerModule });
            } exports("h1", DxoPagerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPagerComponent
                                ],
                                exports: [
                                    DxoPagerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPagingComponent extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get pageIndex() {
                    return this._getOption('pageIndex');
                }
                set pageIndex(value) {
                    this._setOption('pageIndex', value);
                }
                get pageSize() {
                    return this._getOption('pageSize');
                }
                set pageSize(value) {
                    this._setOption('pageSize', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                pageIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                pageSizeChange;
                get _optionPath() {
                    return 'paging';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'pageIndexChange' },
                        { emit: 'pageSizeChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPagingComponent, selector: "dxo-paging", inputs: { enabled: "enabled", pageIndex: "pageIndex", pageSize: "pageSize" }, outputs: { pageIndexChange: "pageIndexChange", pageSizeChange: "pageSizeChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-paging', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { enabled: [{
                            type: Input
                        }], pageIndex: [{
                            type: Input
                        }], pageSize: [{
                            type: Input
                        }], pageIndexChange: [{
                            type: Output
                        }], pageSizeChange: [{
                            type: Output
                        }] } });
            class DxoPagingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingModule, declarations: [DxoPagingComponent], exports: [DxoPagingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingModule });
            } exports("h2", DxoPagingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPagingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPagingComponent
                                ],
                                exports: [
                                    DxoPagingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiPaneComponent extends CollectionNestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'panes';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiPaneComponent, selector: "dxi-pane", inputs: { backgroundColor: "backgroundColor", border: "border", height: "height", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cU", DxiPaneComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-pane', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxiPaneModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneModule, declarations: [DxiPaneComponent], exports: [DxiPaneComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneModule });
            } exports("dX", DxiPaneModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiPaneModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiPaneComponent
                                ],
                                exports: [
                                    DxiPaneComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPermissionsComponent extends NestedOption {
                get copy() {
                    return this._getOption('copy');
                }
                set copy(value) {
                    this._setOption('copy', value);
                }
                get create() {
                    return this._getOption('create');
                }
                set create(value) {
                    this._setOption('create', value);
                }
                get delete() {
                    return this._getOption('delete');
                }
                set delete(value) {
                    this._setOption('delete', value);
                }
                get download() {
                    return this._getOption('download');
                }
                set download(value) {
                    this._setOption('download', value);
                }
                get move() {
                    return this._getOption('move');
                }
                set move(value) {
                    this._setOption('move', value);
                }
                get rename() {
                    return this._getOption('rename');
                }
                set rename(value) {
                    this._setOption('rename', value);
                }
                get upload() {
                    return this._getOption('upload');
                }
                set upload(value) {
                    this._setOption('upload', value);
                }
                get _optionPath() {
                    return 'permissions';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPermissionsComponent, selector: "dxo-permissions", inputs: { copy: "copy", create: "create", delete: "delete", download: "download", move: "move", rename: "rename", upload: "upload" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-permissions', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { copy: [{
                            type: Input
                        }], create: [{
                            type: Input
                        }], delete: [{
                            type: Input
                        }], download: [{
                            type: Input
                        }], move: [{
                            type: Input
                        }], rename: [{
                            type: Input
                        }], upload: [{
                            type: Input
                        }] } });
            class DxoPermissionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsModule, declarations: [DxoPermissionsComponent], exports: [DxoPermissionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsModule });
            } exports("f8", DxoPermissionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPermissionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPermissionsComponent
                                ],
                                exports: [
                                    DxoPermissionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPointComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get hoverMode() {
                    return this._getOption('hoverMode');
                }
                set hoverMode(value) {
                    this._setOption('hoverMode', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get image() {
                    return this._getOption('image');
                }
                set image(value) {
                    this._setOption('image', value);
                }
                get selectionMode() {
                    return this._getOption('selectionMode');
                }
                set selectionMode(value) {
                    this._setOption('selectionMode', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get symbol() {
                    return this._getOption('symbol');
                }
                set symbol(value) {
                    this._setOption('symbol', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'point';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPointComponent, selector: "dxo-point", inputs: { border: "border", color: "color", hoverMode: "hoverMode", hoverStyle: "hoverStyle", image: "image", selectionMode: "selectionMode", selectionStyle: "selectionStyle", size: "size", symbol: "symbol", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-point', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], hoverMode: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], image: [{
                            type: Input
                        }], selectionMode: [{
                            type: Input
                        }], selectionStyle: [{
                            type: Input
                        }], size: [{
                            type: Input
                        }], symbol: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoPointModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPointModule, declarations: [DxoPointComponent], exports: [DxoPointComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointModule });
            } exports("dn", DxoPointModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPointModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPointComponent
                                ],
                                exports: [
                                    DxoPointComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoPopupComponent extends DxoPopupOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                positionChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                get _optionPath() {
                    return 'popup';
                }
                get toolbarItemsChildren() {
                    return this._getOption('toolbarItems');
                }
                set toolbarItemsChildren(value) {
                    this.setChildren('toolbarItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'heightChange' },
                        { emit: 'positionChange' },
                        { emit: 'visibleChange' },
                        { emit: 'widthChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPopupComponent, selector: "dxo-popup", inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", deferRendering: "deferRendering", disabled: "disabled", dragAndResizeArea: "dragAndResizeArea", dragEnabled: "dragEnabled", dragOutsideBoundary: "dragOutsideBoundary", enableBodyScroll: "enableBodyScroll", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hideOnOutsideClick: "hideOnOutsideClick", hideOnParentScroll: "hideOnParentScroll", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", position: "position", resizeEnabled: "resizeEnabled", restorePosition: "restorePosition", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width", wrapperAttr: "wrapperAttr" }, outputs: { heightChange: "heightChange", positionChange: "positionChange", visibleChange: "visibleChange", widthChange: "widthChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "toolbarItemsChildren", predicate: i0.forwardRef(() => DxiToolbarItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-popup', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'animation',
                                    'closeOnOutsideClick',
                                    'container',
                                    'contentTemplate',
                                    'deferRendering',
                                    'disabled',
                                    'dragAndResizeArea',
                                    'dragEnabled',
                                    'dragOutsideBoundary',
                                    'enableBodyScroll',
                                    'focusStateEnabled',
                                    'fullScreen',
                                    'height',
                                    'hideOnOutsideClick',
                                    'hideOnParentScroll',
                                    'hint',
                                    'hoverStateEnabled',
                                    'maxHeight',
                                    'maxWidth',
                                    'minHeight',
                                    'minWidth',
                                    'onContentReady',
                                    'onDisposing',
                                    'onHidden',
                                    'onHiding',
                                    'onInitialized',
                                    'onOptionChanged',
                                    'onResize',
                                    'onResizeEnd',
                                    'onResizeStart',
                                    'onShowing',
                                    'onShown',
                                    'onTitleRendered',
                                    'position',
                                    'resizeEnabled',
                                    'restorePosition',
                                    'rtlEnabled',
                                    'shading',
                                    'shadingColor',
                                    'showCloseButton',
                                    'showTitle',
                                    'tabIndex',
                                    'title',
                                    'titleTemplate',
                                    'toolbarItems',
                                    'visible',
                                    'width',
                                    'wrapperAttr'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { heightChange: [{
                            type: Output
                        }], positionChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], toolbarItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiToolbarItemComponent)]
                        }] } });
            class DxoPopupModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupModule, declarations: [DxoPopupComponent], exports: [DxoPopupComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupModule });
            } exports("gY", DxoPopupModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPopupModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPopupComponent
                                ],
                                exports: [
                                    DxoPopupComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPositionConfig extends NestedOption {
                get at() {
                    return this._getOption('at');
                }
                set at(value) {
                    this._setOption('at', value);
                }
                get boundary() {
                    return this._getOption('boundary');
                }
                set boundary(value) {
                    this._setOption('boundary', value);
                }
                get boundaryOffset() {
                    return this._getOption('boundaryOffset');
                }
                set boundaryOffset(value) {
                    this._setOption('boundaryOffset', value);
                }
                get collision() {
                    return this._getOption('collision');
                }
                set collision(value) {
                    this._setOption('collision', value);
                }
                get my() {
                    return this._getOption('my');
                }
                set my(value) {
                    this._setOption('my', value);
                }
                get of() {
                    return this._getOption('of');
                }
                set of(value) {
                    this._setOption('of', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPositionConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionConfig, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoPositionComponent extends DxoPositionConfig {
                get _optionPath() {
                    return 'position';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPositionComponent, selector: "dxo-position", inputs: { at: "at", boundary: "boundary", boundaryOffset: "boundaryOffset", collision: "collision", my: "my", of: "of", offset: "offset" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-position', template: '', providers: [NestedOptionHost], inputs: [
                                    'at',
                                    'boundary',
                                    'boundaryOffset',
                                    'collision',
                                    'my',
                                    'of',
                                    'offset'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoPositionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionModule, declarations: [DxoPositionComponent], exports: [DxoPositionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionModule });
            } exports("bZ", DxoPositionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPositionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPositionComponent
                                ],
                                exports: [
                                    DxoPositionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoVectorMapProjectionConfig extends NestedOption {
                get aspectRatio() {
                    return this._getOption('aspectRatio');
                }
                set aspectRatio(value) {
                    this._setOption('aspectRatio', value);
                }
                get from() {
                    return this._getOption('from');
                }
                set from(value) {
                    this._setOption('from', value);
                }
                get to() {
                    return this._getOption('to');
                }
                set to(value) {
                    this._setOption('to', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVectorMapProjectionConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoVectorMapProjectionConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVectorMapProjectionConfig, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoProjectionComponent extends DxoVectorMapProjectionConfig {
                get _optionPath() {
                    return 'projection';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoProjectionComponent, selector: "dxo-projection", inputs: { aspectRatio: "aspectRatio", from: "from", to: "to" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-projection', template: '', providers: [NestedOptionHost], inputs: [
                                    'aspectRatio',
                                    'from',
                                    'to'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoProjectionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionModule, declarations: [DxoProjectionComponent], exports: [DxoProjectionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionModule });
            } exports("hi", DxoProjectionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoProjectionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoProjectionComponent
                                ],
                                exports: [
                                    DxoProjectionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoPropertiesPanelComponent extends NestedOption {
                get tabs() {
                    return this._getOption('tabs');
                }
                set tabs(value) {
                    this._setOption('tabs', value);
                }
                get visibility() {
                    return this._getOption('visibility');
                }
                set visibility(value) {
                    this._setOption('visibility', value);
                }
                get _optionPath() {
                    return 'propertiesPanel';
                }
                get tabsChildren() {
                    return this._getOption('tabs');
                }
                set tabsChildren(value) {
                    this.setChildren('tabs', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoPropertiesPanelComponent, selector: "dxo-properties-panel", inputs: { tabs: "tabs", visibility: "visibility" }, providers: [NestedOptionHost], queries: [{ propertyName: "tabsChildren", predicate: i0.forwardRef(() => DxiTabComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-properties-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { tabs: [{
                            type: Input
                        }], visibility: [{
                            type: Input
                        }], tabsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiTabComponent)]
                        }] } });
            class DxoPropertiesPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelModule, declarations: [DxoPropertiesPanelComponent], exports: [DxoPropertiesPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelModule });
            } exports("eU", DxoPropertiesPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoPropertiesPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoPropertiesPanelComponent
                                ],
                                exports: [
                                    DxoPropertiesPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiRangeComponent extends CollectionNestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get endValue() {
                    return this._getOption('endValue');
                }
                set endValue(value) {
                    this._setOption('endValue', value);
                }
                get startValue() {
                    return this._getOption('startValue');
                }
                set startValue(value) {
                    this._setOption('startValue', value);
                }
                get _optionPath() {
                    return 'ranges';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiRangeComponent, selector: "dxi-range", inputs: { color: "color", endValue: "endValue", startValue: "startValue" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-range', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], endValue: [{
                            type: Input
                        }], startValue: [{
                            type: Input
                        }] } });
            class DxiRangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeModule, declarations: [DxiRangeComponent], exports: [DxiRangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeModule });
            } exports("e4", DxiRangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiRangeComponent
                                ],
                                exports: [
                                    DxiRangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoRangeContainerComponent extends NestedOption {
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get paletteExtensionMode() {
                    return this._getOption('paletteExtensionMode');
                }
                set paletteExtensionMode(value) {
                    this._setOption('paletteExtensionMode', value);
                }
                get ranges() {
                    return this._getOption('ranges');
                }
                set ranges(value) {
                    this._setOption('ranges', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get horizontalOrientation() {
                    return this._getOption('horizontalOrientation');
                }
                set horizontalOrientation(value) {
                    this._setOption('horizontalOrientation', value);
                }
                get verticalOrientation() {
                    return this._getOption('verticalOrientation');
                }
                set verticalOrientation(value) {
                    this._setOption('verticalOrientation', value);
                }
                get _optionPath() {
                    return 'rangeContainer';
                }
                get rangesChildren() {
                    return this._getOption('ranges');
                }
                set rangesChildren(value) {
                    this.setChildren('ranges', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRangeContainerComponent, selector: "dxo-range-container", inputs: { backgroundColor: "backgroundColor", offset: "offset", orientation: "orientation", palette: "palette", paletteExtensionMode: "paletteExtensionMode", ranges: "ranges", width: "width", horizontalOrientation: "horizontalOrientation", verticalOrientation: "verticalOrientation" }, providers: [NestedOptionHost], queries: [{ propertyName: "rangesChildren", predicate: i0.forwardRef(() => DxiRangeComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-range-container', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { backgroundColor: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }], palette: [{
                            type: Input
                        }], paletteExtensionMode: [{
                            type: Input
                        }], ranges: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], horizontalOrientation: [{
                            type: Input
                        }], verticalOrientation: [{
                            type: Input
                        }], rangesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiRangeComponent)]
                        }] } });
            class DxoRangeContainerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerModule, declarations: [DxoRangeContainerComponent], exports: [DxoRangeContainerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerModule });
            } exports("e3", DxoRangeContainerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeContainerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRangeContainerComponent
                                ],
                                exports: [
                                    DxoRangeContainerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoRangeareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'rangearea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRangeareaComponent, selector: "dxo-rangearea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-rangearea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoRangeareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaModule, declarations: [DxoRangeareaComponent], exports: [DxoRangeareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaModule });
            } exports("dG", DxoRangeareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangeareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRangeareaComponent
                                ],
                                exports: [
                                    DxoRangeareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoRangebarComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'rangebar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRangebarComponent, selector: "dxo-rangebar", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-rangebar', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoRangebarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarModule, declarations: [DxoRangebarComponent], exports: [DxoRangebarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarModule });
            } exports("dH", DxoRangebarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRangebarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRangebarComponent
                                ],
                                exports: [
                                    DxoRangebarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoReductionComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get level() {
                    return this._getOption('level');
                }
                set level(value) {
                    this._setOption('level', value);
                }
                get _optionPath() {
                    return 'reduction';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoReductionComponent, selector: "dxo-reduction", inputs: { color: "color", level: "level" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-reduction', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], level: [{
                            type: Input
                        }] } });
            class DxoReductionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionModule, declarations: [DxoReductionComponent], exports: [DxoReductionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionModule });
            } exports("dt", DxoReductionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoReductionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoReductionComponent
                                ],
                                exports: [
                                    DxoReductionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoRemoteOperationsComponent extends NestedOption {
                get filtering() {
                    return this._getOption('filtering');
                }
                set filtering(value) {
                    this._setOption('filtering', value);
                }
                get grouping() {
                    return this._getOption('grouping');
                }
                set grouping(value) {
                    this._setOption('grouping', value);
                }
                get groupPaging() {
                    return this._getOption('groupPaging');
                }
                set groupPaging(value) {
                    this._setOption('groupPaging', value);
                }
                get paging() {
                    return this._getOption('paging');
                }
                set paging(value) {
                    this._setOption('paging', value);
                }
                get sorting() {
                    return this._getOption('sorting');
                }
                set sorting(value) {
                    this._setOption('sorting', value);
                }
                get summary() {
                    return this._getOption('summary');
                }
                set summary(value) {
                    this._setOption('summary', value);
                }
                get _optionPath() {
                    return 'remoteOperations';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRemoteOperationsComponent, selector: "dxo-remote-operations", inputs: { filtering: "filtering", grouping: "grouping", groupPaging: "groupPaging", paging: "paging", sorting: "sorting", summary: "summary" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-remote-operations', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { filtering: [{
                            type: Input
                        }], grouping: [{
                            type: Input
                        }], groupPaging: [{
                            type: Input
                        }], paging: [{
                            type: Input
                        }], sorting: [{
                            type: Input
                        }], summary: [{
                            type: Input
                        }] } });
            class DxoRemoteOperationsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsModule, declarations: [DxoRemoteOperationsComponent], exports: [DxoRemoteOperationsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsModule });
            } exports("h3", DxoRemoteOperationsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRemoteOperationsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRemoteOperationsComponent
                                ],
                                exports: [
                                    DxoRemoteOperationsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoResourceAssignmentsComponent extends NestedOption {
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get resourceIdExpr() {
                    return this._getOption('resourceIdExpr');
                }
                set resourceIdExpr(value) {
                    this._setOption('resourceIdExpr', value);
                }
                get taskIdExpr() {
                    return this._getOption('taskIdExpr');
                }
                set taskIdExpr(value) {
                    this._setOption('taskIdExpr', value);
                }
                get _optionPath() {
                    return 'resourceAssignments';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoResourceAssignmentsComponent, selector: "dxo-resource-assignments", inputs: { dataSource: "dataSource", keyExpr: "keyExpr", resourceIdExpr: "resourceIdExpr", taskIdExpr: "taskIdExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-resource-assignments', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { dataSource: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], resourceIdExpr: [{
                            type: Input
                        }], taskIdExpr: [{
                            type: Input
                        }] } });
            class DxoResourceAssignmentsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsModule, declarations: [DxoResourceAssignmentsComponent], exports: [DxoResourceAssignmentsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsModule });
            } exports("fz", DxoResourceAssignmentsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourceAssignmentsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoResourceAssignmentsComponent
                                ],
                                exports: [
                                    DxoResourceAssignmentsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiResourceComponent extends CollectionNestedOption {
                get allowMultiple() {
                    return this._getOption('allowMultiple');
                }
                set allowMultiple(value) {
                    this._setOption('allowMultiple', value);
                }
                get colorExpr() {
                    return this._getOption('colorExpr');
                }
                set colorExpr(value) {
                    this._setOption('colorExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get displayExpr() {
                    return this._getOption('displayExpr');
                }
                set displayExpr(value) {
                    this._setOption('displayExpr', value);
                }
                get fieldExpr() {
                    return this._getOption('fieldExpr');
                }
                set fieldExpr(value) {
                    this._setOption('fieldExpr', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get useColorAsDefault() {
                    return this._getOption('useColorAsDefault');
                }
                set useColorAsDefault(value) {
                    this._setOption('useColorAsDefault', value);
                }
                get valueExpr() {
                    return this._getOption('valueExpr');
                }
                set valueExpr(value) {
                    this._setOption('valueExpr', value);
                }
                get _optionPath() {
                    return 'resources';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiResourceComponent, selector: "dxi-resource", inputs: { allowMultiple: "allowMultiple", colorExpr: "colorExpr", dataSource: "dataSource", displayExpr: "displayExpr", fieldExpr: "fieldExpr", label: "label", useColorAsDefault: "useColorAsDefault", valueExpr: "valueExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("gM", DxiResourceComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-resource', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowMultiple: [{
                            type: Input
                        }], colorExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], displayExpr: [{
                            type: Input
                        }], fieldExpr: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], useColorAsDefault: [{
                            type: Input
                        }], valueExpr: [{
                            type: Input
                        }] } });
            class DxiResourceModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceModule, declarations: [DxiResourceComponent], exports: [DxiResourceComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceModule });
            } exports("gP", DxiResourceModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiResourceModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiResourceComponent
                                ],
                                exports: [
                                    DxiResourceComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoResourcesComponent extends NestedOption {
                get colorExpr() {
                    return this._getOption('colorExpr');
                }
                set colorExpr(value) {
                    this._setOption('colorExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get textExpr() {
                    return this._getOption('textExpr');
                }
                set textExpr(value) {
                    this._setOption('textExpr', value);
                }
                get _optionPath() {
                    return 'resources';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoResourcesComponent, selector: "dxo-resources", inputs: { colorExpr: "colorExpr", dataSource: "dataSource", keyExpr: "keyExpr", textExpr: "textExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-resources', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { colorExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], textExpr: [{
                            type: Input
                        }] } });
            class DxoResourcesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesModule, declarations: [DxoResourcesComponent], exports: [DxoResourcesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesModule });
            } exports("fA", DxoResourcesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoResourcesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoResourcesComponent
                                ],
                                exports: [
                                    DxoResourcesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiRouteComponent extends CollectionNestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get locations() {
                    return this._getOption('locations');
                }
                set locations(value) {
                    this._setOption('locations', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get weight() {
                    return this._getOption('weight');
                }
                set weight(value) {
                    this._setOption('weight', value);
                }
                get _optionPath() {
                    return 'routes';
                }
                get locationsChildren() {
                    return this._getOption('locations');
                }
                set locationsChildren(value) {
                    this.setChildren('locations', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiRouteComponent, selector: "dxi-route", inputs: { color: "color", locations: "locations", mode: "mode", opacity: "opacity", weight: "weight" }, providers: [NestedOptionHost], queries: [{ propertyName: "locationsChildren", predicate: i0.forwardRef(() => DxiLocationComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fY", DxiRouteComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-route', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], locations: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], weight: [{
                            type: Input
                        }], locationsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiLocationComponent)]
                        }] } });
            class DxiRouteModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteModule, declarations: [DxiRouteComponent], exports: [DxiRouteComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteModule });
            } exports("g1", DxiRouteModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRouteModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiRouteComponent
                                ],
                                exports: [
                                    DxiRouteComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoRowDraggingComponent extends NestedOption {
                get allowDropInsideItem() {
                    return this._getOption('allowDropInsideItem');
                }
                set allowDropInsideItem(value) {
                    this._setOption('allowDropInsideItem', value);
                }
                get allowReordering() {
                    return this._getOption('allowReordering');
                }
                set allowReordering(value) {
                    this._setOption('allowReordering', value);
                }
                get autoScroll() {
                    return this._getOption('autoScroll');
                }
                set autoScroll(value) {
                    this._setOption('autoScroll', value);
                }
                get boundary() {
                    return this._getOption('boundary');
                }
                set boundary(value) {
                    this._setOption('boundary', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get cursorOffset() {
                    return this._getOption('cursorOffset');
                }
                set cursorOffset(value) {
                    this._setOption('cursorOffset', value);
                }
                get data() {
                    return this._getOption('data');
                }
                set data(value) {
                    this._setOption('data', value);
                }
                get dragDirection() {
                    return this._getOption('dragDirection');
                }
                set dragDirection(value) {
                    this._setOption('dragDirection', value);
                }
                get dragTemplate() {
                    return this._getOption('dragTemplate');
                }
                set dragTemplate(value) {
                    this._setOption('dragTemplate', value);
                }
                get dropFeedbackMode() {
                    return this._getOption('dropFeedbackMode');
                }
                set dropFeedbackMode(value) {
                    this._setOption('dropFeedbackMode', value);
                }
                get filter() {
                    return this._getOption('filter');
                }
                set filter(value) {
                    this._setOption('filter', value);
                }
                get group() {
                    return this._getOption('group');
                }
                set group(value) {
                    this._setOption('group', value);
                }
                get handle() {
                    return this._getOption('handle');
                }
                set handle(value) {
                    this._setOption('handle', value);
                }
                get onAdd() {
                    return this._getOption('onAdd');
                }
                set onAdd(value) {
                    this._setOption('onAdd', value);
                }
                get onDragChange() {
                    return this._getOption('onDragChange');
                }
                set onDragChange(value) {
                    this._setOption('onDragChange', value);
                }
                get onDragEnd() {
                    return this._getOption('onDragEnd');
                }
                set onDragEnd(value) {
                    this._setOption('onDragEnd', value);
                }
                get onDragMove() {
                    return this._getOption('onDragMove');
                }
                set onDragMove(value) {
                    this._setOption('onDragMove', value);
                }
                get onDragStart() {
                    return this._getOption('onDragStart');
                }
                set onDragStart(value) {
                    this._setOption('onDragStart', value);
                }
                get onRemove() {
                    return this._getOption('onRemove');
                }
                set onRemove(value) {
                    this._setOption('onRemove', value);
                }
                get onReorder() {
                    return this._getOption('onReorder');
                }
                set onReorder(value) {
                    this._setOption('onReorder', value);
                }
                get scrollSensitivity() {
                    return this._getOption('scrollSensitivity');
                }
                set scrollSensitivity(value) {
                    this._setOption('scrollSensitivity', value);
                }
                get scrollSpeed() {
                    return this._getOption('scrollSpeed');
                }
                set scrollSpeed(value) {
                    this._setOption('scrollSpeed', value);
                }
                get showDragIcons() {
                    return this._getOption('showDragIcons');
                }
                set showDragIcons(value) {
                    this._setOption('showDragIcons', value);
                }
                get _optionPath() {
                    return 'rowDragging';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoRowDraggingComponent, selector: "dxo-row-dragging", inputs: { allowDropInsideItem: "allowDropInsideItem", allowReordering: "allowReordering", autoScroll: "autoScroll", boundary: "boundary", container: "container", cursorOffset: "cursorOffset", data: "data", dragDirection: "dragDirection", dragTemplate: "dragTemplate", dropFeedbackMode: "dropFeedbackMode", filter: "filter", group: "group", handle: "handle", onAdd: "onAdd", onDragChange: "onDragChange", onDragEnd: "onDragEnd", onDragMove: "onDragMove", onDragStart: "onDragStart", onRemove: "onRemove", onReorder: "onReorder", scrollSensitivity: "scrollSensitivity", scrollSpeed: "scrollSpeed", showDragIcons: "showDragIcons" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-row-dragging', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowDropInsideItem: [{
                            type: Input
                        }], allowReordering: [{
                            type: Input
                        }], autoScroll: [{
                            type: Input
                        }], boundary: [{
                            type: Input
                        }], container: [{
                            type: Input
                        }], cursorOffset: [{
                            type: Input
                        }], data: [{
                            type: Input
                        }], dragDirection: [{
                            type: Input
                        }], dragTemplate: [{
                            type: Input
                        }], dropFeedbackMode: [{
                            type: Input
                        }], filter: [{
                            type: Input
                        }], group: [{
                            type: Input
                        }], handle: [{
                            type: Input
                        }], onAdd: [{
                            type: Input
                        }], onDragChange: [{
                            type: Input
                        }], onDragEnd: [{
                            type: Input
                        }], onDragMove: [{
                            type: Input
                        }], onDragStart: [{
                            type: Input
                        }], onRemove: [{
                            type: Input
                        }], onReorder: [{
                            type: Input
                        }], scrollSensitivity: [{
                            type: Input
                        }], scrollSpeed: [{
                            type: Input
                        }], showDragIcons: [{
                            type: Input
                        }] } });
            class DxoRowDraggingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingModule, declarations: [DxoRowDraggingComponent], exports: [DxoRowDraggingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingModule });
            } exports("h4", DxoRowDraggingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoRowDraggingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoRowDraggingComponent
                                ],
                                exports: [
                                    DxoRowDraggingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiRowComponent extends CollectionNestedOption {
                get baseSize() {
                    return this._getOption('baseSize');
                }
                set baseSize(value) {
                    this._setOption('baseSize', value);
                }
                get ratio() {
                    return this._getOption('ratio');
                }
                set ratio(value) {
                    this._setOption('ratio', value);
                }
                get screen() {
                    return this._getOption('screen');
                }
                set screen(value) {
                    this._setOption('screen', value);
                }
                get shrink() {
                    return this._getOption('shrink');
                }
                set shrink(value) {
                    this._setOption('shrink', value);
                }
                get _optionPath() {
                    return 'rows';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiRowComponent, selector: "dxi-row", inputs: { baseSize: "baseSize", ratio: "ratio", screen: "screen", shrink: "shrink" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("gz", DxiRowComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-row', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { baseSize: [{
                            type: Input
                        }], ratio: [{
                            type: Input
                        }], screen: [{
                            type: Input
                        }], shrink: [{
                            type: Input
                        }] } });
            class DxiRowModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiRowModule, declarations: [DxiRowComponent], exports: [DxiRowComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowModule });
            } exports("gB", DxiRowModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiRowModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiRowComponent
                                ],
                                exports: [
                                    DxiRowComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoScaleTypeRangeComponent extends NestedOption {
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                get _optionPath() {
                    return 'scaleTypeRange';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScaleTypeRangeComponent, selector: "dxo-scale-type-range", inputs: { max: "max", min: "min" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-scale-type-range', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { max: [{
                            type: Input
                        }], min: [{
                            type: Input
                        }] } });
            class DxoScaleTypeRangeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeModule, declarations: [DxoScaleTypeRangeComponent], exports: [DxoScaleTypeRangeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeModule });
            } exports("fB", DxoScaleTypeRangeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleTypeRangeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScaleTypeRangeComponent
                                ],
                                exports: [
                                    DxoScaleTypeRangeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoScaleComponent extends NestedOption {
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get customMinorTicks() {
                    return this._getOption('customMinorTicks');
                }
                set customMinorTicks(value) {
                    this._setOption('customMinorTicks', value);
                }
                get customTicks() {
                    return this._getOption('customTicks');
                }
                set customTicks(value) {
                    this._setOption('customTicks', value);
                }
                get endValue() {
                    return this._getOption('endValue');
                }
                set endValue(value) {
                    this._setOption('endValue', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minorTickInterval() {
                    return this._getOption('minorTickInterval');
                }
                set minorTickInterval(value) {
                    this._setOption('minorTickInterval', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get scaleDivisionFactor() {
                    return this._getOption('scaleDivisionFactor');
                }
                set scaleDivisionFactor(value) {
                    this._setOption('scaleDivisionFactor', value);
                }
                get startValue() {
                    return this._getOption('startValue');
                }
                set startValue(value) {
                    this._setOption('startValue', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get tickInterval() {
                    return this._getOption('tickInterval');
                }
                set tickInterval(value) {
                    this._setOption('tickInterval', value);
                }
                get horizontalOrientation() {
                    return this._getOption('horizontalOrientation');
                }
                set horizontalOrientation(value) {
                    this._setOption('horizontalOrientation', value);
                }
                get verticalOrientation() {
                    return this._getOption('verticalOrientation');
                }
                set verticalOrientation(value) {
                    this._setOption('verticalOrientation', value);
                }
                get aggregateByCategory() {
                    return this._getOption('aggregateByCategory');
                }
                set aggregateByCategory(value) {
                    this._setOption('aggregateByCategory', value);
                }
                get aggregationGroupWidth() {
                    return this._getOption('aggregationGroupWidth');
                }
                set aggregationGroupWidth(value) {
                    this._setOption('aggregationGroupWidth', value);
                }
                get aggregationInterval() {
                    return this._getOption('aggregationInterval');
                }
                set aggregationInterval(value) {
                    this._setOption('aggregationInterval', value);
                }
                get breaks() {
                    return this._getOption('breaks');
                }
                set breaks(value) {
                    this._setOption('breaks', value);
                }
                get breakStyle() {
                    return this._getOption('breakStyle');
                }
                set breakStyle(value) {
                    this._setOption('breakStyle', value);
                }
                get categories() {
                    return this._getOption('categories');
                }
                set categories(value) {
                    this._setOption('categories', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get holidays() {
                    return this._getOption('holidays');
                }
                set holidays(value) {
                    this._setOption('holidays', value);
                }
                get linearThreshold() {
                    return this._getOption('linearThreshold');
                }
                set linearThreshold(value) {
                    this._setOption('linearThreshold', value);
                }
                get logarithmBase() {
                    return this._getOption('logarithmBase');
                }
                set logarithmBase(value) {
                    this._setOption('logarithmBase', value);
                }
                get marker() {
                    return this._getOption('marker');
                }
                set marker(value) {
                    this._setOption('marker', value);
                }
                get maxRange() {
                    return this._getOption('maxRange');
                }
                set maxRange(value) {
                    this._setOption('maxRange', value);
                }
                get minorTickCount() {
                    return this._getOption('minorTickCount');
                }
                set minorTickCount(value) {
                    this._setOption('minorTickCount', value);
                }
                get minRange() {
                    return this._getOption('minRange');
                }
                set minRange(value) {
                    this._setOption('minRange', value);
                }
                get placeholderHeight() {
                    return this._getOption('placeholderHeight');
                }
                set placeholderHeight(value) {
                    this._setOption('placeholderHeight', value);
                }
                get showCustomBoundaryTicks() {
                    return this._getOption('showCustomBoundaryTicks');
                }
                set showCustomBoundaryTicks(value) {
                    this._setOption('showCustomBoundaryTicks', value);
                }
                get singleWorkdays() {
                    return this._getOption('singleWorkdays');
                }
                set singleWorkdays(value) {
                    this._setOption('singleWorkdays', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueType() {
                    return this._getOption('valueType');
                }
                set valueType(value) {
                    this._setOption('valueType', value);
                }
                get workdaysOnly() {
                    return this._getOption('workdaysOnly');
                }
                set workdaysOnly(value) {
                    this._setOption('workdaysOnly', value);
                }
                get workWeek() {
                    return this._getOption('workWeek');
                }
                set workWeek(value) {
                    this._setOption('workWeek', value);
                }
                get _optionPath() {
                    return 'scale';
                }
                get breaksChildren() {
                    return this._getOption('breaks');
                }
                set breaksChildren(value) {
                    this.setChildren('breaks', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScaleComponent, selector: "dxo-scale", inputs: { allowDecimals: "allowDecimals", customMinorTicks: "customMinorTicks", customTicks: "customTicks", endValue: "endValue", label: "label", minorTick: "minorTick", minorTickInterval: "minorTickInterval", orientation: "orientation", scaleDivisionFactor: "scaleDivisionFactor", startValue: "startValue", tick: "tick", tickInterval: "tickInterval", horizontalOrientation: "horizontalOrientation", verticalOrientation: "verticalOrientation", aggregateByCategory: "aggregateByCategory", aggregationGroupWidth: "aggregationGroupWidth", aggregationInterval: "aggregationInterval", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", holidays: "holidays", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", marker: "marker", maxRange: "maxRange", minorTickCount: "minorTickCount", minRange: "minRange", placeholderHeight: "placeholderHeight", showCustomBoundaryTicks: "showCustomBoundaryTicks", singleWorkdays: "singleWorkdays", type: "type", valueType: "valueType", workdaysOnly: "workdaysOnly", workWeek: "workWeek" }, providers: [NestedOptionHost], queries: [{ propertyName: "breaksChildren", predicate: i0.forwardRef(() => DxiBreakComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-scale', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowDecimals: [{
                            type: Input
                        }], customMinorTicks: [{
                            type: Input
                        }], customTicks: [{
                            type: Input
                        }], endValue: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minorTickInterval: [{
                            type: Input
                        }], orientation: [{
                            type: Input
                        }], scaleDivisionFactor: [{
                            type: Input
                        }], startValue: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], tickInterval: [{
                            type: Input
                        }], horizontalOrientation: [{
                            type: Input
                        }], verticalOrientation: [{
                            type: Input
                        }], aggregateByCategory: [{
                            type: Input
                        }], aggregationGroupWidth: [{
                            type: Input
                        }], aggregationInterval: [{
                            type: Input
                        }], breaks: [{
                            type: Input
                        }], breakStyle: [{
                            type: Input
                        }], categories: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], holidays: [{
                            type: Input
                        }], linearThreshold: [{
                            type: Input
                        }], logarithmBase: [{
                            type: Input
                        }], marker: [{
                            type: Input
                        }], maxRange: [{
                            type: Input
                        }], minorTickCount: [{
                            type: Input
                        }], minRange: [{
                            type: Input
                        }], placeholderHeight: [{
                            type: Input
                        }], showCustomBoundaryTicks: [{
                            type: Input
                        }], singleWorkdays: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], valueType: [{
                            type: Input
                        }], workdaysOnly: [{
                            type: Input
                        }], workWeek: [{
                            type: Input
                        }], breaksChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiBreakComponent)]
                        }] } });
            class DxoScaleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleModule, declarations: [DxoScaleComponent], exports: [DxoScaleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleModule });
            } exports("e5", DxoScaleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScaleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScaleComponent
                                ],
                                exports: [
                                    DxoScaleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoScatterComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'scatter';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScatterComponent, selector: "dxo-scatter", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-scatter', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoScatterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterModule, declarations: [DxoScatterComponent], exports: [DxoScatterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterModule });
            } exports("dI", DxoScatterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScatterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScatterComponent
                                ],
                                exports: [
                                    DxoScatterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoScrollBarComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'scrollBar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScrollBarComponent, selector: "dxo-scroll-bar", inputs: { color: "color", offset: "offset", opacity: "opacity", position: "position", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-scroll-bar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoScrollBarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarModule, declarations: [DxoScrollBarComponent], exports: [DxoScrollBarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarModule });
            } exports("dY", DxoScrollBarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollBarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScrollBarComponent
                                ],
                                exports: [
                                    DxoScrollBarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSchedulerScrolling extends NestedOption {
                get columnRenderingMode() {
                    return this._getOption('columnRenderingMode');
                }
                set columnRenderingMode(value) {
                    this._setOption('columnRenderingMode', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get preloadEnabled() {
                    return this._getOption('preloadEnabled');
                }
                set preloadEnabled(value) {
                    this._setOption('preloadEnabled', value);
                }
                get renderAsync() {
                    return this._getOption('renderAsync');
                }
                set renderAsync(value) {
                    this._setOption('renderAsync', value);
                }
                get rowRenderingMode() {
                    return this._getOption('rowRenderingMode');
                }
                set rowRenderingMode(value) {
                    this._setOption('rowRenderingMode', value);
                }
                get scrollByContent() {
                    return this._getOption('scrollByContent');
                }
                set scrollByContent(value) {
                    this._setOption('scrollByContent', value);
                }
                get scrollByThumb() {
                    return this._getOption('scrollByThumb');
                }
                set scrollByThumb(value) {
                    this._setOption('scrollByThumb', value);
                }
                get showScrollbar() {
                    return this._getOption('showScrollbar');
                }
                set showScrollbar(value) {
                    this._setOption('showScrollbar', value);
                }
                get useNative() {
                    return this._getOption('useNative');
                }
                set useNative(value) {
                    this._setOption('useNative', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSchedulerScrolling, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSchedulerScrolling, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSchedulerScrolling, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoScrollingComponent extends DxoSchedulerScrolling {
                get _optionPath() {
                    return 'scrolling';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoScrollingComponent, selector: "dxo-scrolling", inputs: { columnRenderingMode: "columnRenderingMode", mode: "mode", preloadEnabled: "preloadEnabled", renderAsync: "renderAsync", rowRenderingMode: "rowRenderingMode", scrollByContent: "scrollByContent", scrollByThumb: "scrollByThumb", showScrollbar: "showScrollbar", useNative: "useNative" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-scrolling', template: '', providers: [NestedOptionHost], inputs: [
                                    'columnRenderingMode',
                                    'mode',
                                    'preloadEnabled',
                                    'renderAsync',
                                    'rowRenderingMode',
                                    'scrollByContent',
                                    'scrollByThumb',
                                    'showScrollbar',
                                    'useNative'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoScrollingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingModule, declarations: [DxoScrollingComponent], exports: [DxoScrollingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingModule });
            } exports("gg", DxoScrollingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoScrollingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoScrollingComponent
                                ],
                                exports: [
                                    DxoScrollingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTextBoxOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get buttons() {
                    return this._getOption('buttons');
                }
                set buttons(value) {
                    this._setOption('buttons', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get inputAttr() {
                    return this._getOption('inputAttr');
                }
                set inputAttr(value) {
                    this._setOption('inputAttr', value);
                }
                get isDirty() {
                    return this._getOption('isDirty');
                }
                set isDirty(value) {
                    this._setOption('isDirty', value);
                }
                get isValid() {
                    return this._getOption('isValid');
                }
                set isValid(value) {
                    this._setOption('isValid', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get labelMode() {
                    return this._getOption('labelMode');
                }
                set labelMode(value) {
                    this._setOption('labelMode', value);
                }
                get mask() {
                    return this._getOption('mask');
                }
                set mask(value) {
                    this._setOption('mask', value);
                }
                get maskChar() {
                    return this._getOption('maskChar');
                }
                set maskChar(value) {
                    this._setOption('maskChar', value);
                }
                get maskInvalidMessage() {
                    return this._getOption('maskInvalidMessage');
                }
                set maskInvalidMessage(value) {
                    this._setOption('maskInvalidMessage', value);
                }
                get maskRules() {
                    return this._getOption('maskRules');
                }
                set maskRules(value) {
                    this._setOption('maskRules', value);
                }
                get maxLength() {
                    return this._getOption('maxLength');
                }
                set maxLength(value) {
                    this._setOption('maxLength', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get onChange() {
                    return this._getOption('onChange');
                }
                set onChange(value) {
                    this._setOption('onChange', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onCopy() {
                    return this._getOption('onCopy');
                }
                set onCopy(value) {
                    this._setOption('onCopy', value);
                }
                get onCut() {
                    return this._getOption('onCut');
                }
                set onCut(value) {
                    this._setOption('onCut', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onEnterKey() {
                    return this._getOption('onEnterKey');
                }
                set onEnterKey(value) {
                    this._setOption('onEnterKey', value);
                }
                get onFocusIn() {
                    return this._getOption('onFocusIn');
                }
                set onFocusIn(value) {
                    this._setOption('onFocusIn', value);
                }
                get onFocusOut() {
                    return this._getOption('onFocusOut');
                }
                set onFocusOut(value) {
                    this._setOption('onFocusOut', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onInput() {
                    return this._getOption('onInput');
                }
                set onInput(value) {
                    this._setOption('onInput', value);
                }
                get onKeyDown() {
                    return this._getOption('onKeyDown');
                }
                set onKeyDown(value) {
                    this._setOption('onKeyDown', value);
                }
                get onKeyUp() {
                    return this._getOption('onKeyUp');
                }
                set onKeyUp(value) {
                    this._setOption('onKeyUp', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onPaste() {
                    return this._getOption('onPaste');
                }
                set onPaste(value) {
                    this._setOption('onPaste', value);
                }
                get onValueChanged() {
                    return this._getOption('onValueChanged');
                }
                set onValueChanged(value) {
                    this._setOption('onValueChanged', value);
                }
                get placeholder() {
                    return this._getOption('placeholder');
                }
                set placeholder(value) {
                    this._setOption('placeholder', value);
                }
                get readOnly() {
                    return this._getOption('readOnly');
                }
                set readOnly(value) {
                    this._setOption('readOnly', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get showClearButton() {
                    return this._getOption('showClearButton');
                }
                set showClearButton(value) {
                    this._setOption('showClearButton', value);
                }
                get showMaskMode() {
                    return this._getOption('showMaskMode');
                }
                set showMaskMode(value) {
                    this._setOption('showMaskMode', value);
                }
                get spellcheck() {
                    return this._getOption('spellcheck');
                }
                set spellcheck(value) {
                    this._setOption('spellcheck', value);
                }
                get stylingMode() {
                    return this._getOption('stylingMode');
                }
                set stylingMode(value) {
                    this._setOption('stylingMode', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get useMaskedValue() {
                    return this._getOption('useMaskedValue');
                }
                set useMaskedValue(value) {
                    this._setOption('useMaskedValue', value);
                }
                get validationError() {
                    return this._getOption('validationError');
                }
                set validationError(value) {
                    this._setOption('validationError', value);
                }
                get validationErrors() {
                    return this._getOption('validationErrors');
                }
                set validationErrors(value) {
                    this._setOption('validationErrors', value);
                }
                get validationMessageMode() {
                    return this._getOption('validationMessageMode');
                }
                set validationMessageMode(value) {
                    this._setOption('validationMessageMode', value);
                }
                get validationMessagePosition() {
                    return this._getOption('validationMessagePosition');
                }
                set validationMessagePosition(value) {
                    this._setOption('validationMessagePosition', value);
                }
                get validationStatus() {
                    return this._getOption('validationStatus');
                }
                set validationStatus(value) {
                    this._setOption('validationStatus', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get valueChangeEvent() {
                    return this._getOption('valueChangeEvent');
                }
                set valueChangeEvent(value) {
                    this._setOption('valueChangeEvent', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextBoxOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTextBoxOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextBoxOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSearchEditorOptionsComponent extends DxoTextBoxOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                textChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'searchEditorOptions';
                }
                get buttonsChildren() {
                    return this._getOption('buttons');
                }
                set buttonsChildren(value) {
                    this.setChildren('buttons', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'textChange' },
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSearchEditorOptionsComponent, selector: "dxo-search-editor-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", buttons: "buttons", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", inputAttr: "inputAttr", isDirty: "isDirty", isValid: "isValid", label: "label", labelMode: "labelMode", mask: "mask", maskChar: "maskChar", maskInvalidMessage: "maskInvalidMessage", maskRules: "maskRules", maxLength: "maxLength", mode: "mode", name: "name", onChange: "onChange", onContentReady: "onContentReady", onCopy: "onCopy", onCut: "onCut", onDisposing: "onDisposing", onEnterKey: "onEnterKey", onFocusIn: "onFocusIn", onFocusOut: "onFocusOut", onInitialized: "onInitialized", onInput: "onInput", onKeyDown: "onKeyDown", onKeyUp: "onKeyUp", onOptionChanged: "onOptionChanged", onPaste: "onPaste", onValueChanged: "onValueChanged", placeholder: "placeholder", readOnly: "readOnly", rtlEnabled: "rtlEnabled", showClearButton: "showClearButton", showMaskMode: "showMaskMode", spellcheck: "spellcheck", stylingMode: "stylingMode", tabIndex: "tabIndex", text: "text", useMaskedValue: "useMaskedValue", validationError: "validationError", validationErrors: "validationErrors", validationMessageMode: "validationMessageMode", validationMessagePosition: "validationMessagePosition", validationStatus: "validationStatus", value: "value", valueChangeEvent: "valueChangeEvent", visible: "visible", width: "width" }, outputs: { textChange: "textChange", valueChange: "valueChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "buttonsChildren", predicate: i0.forwardRef(() => DxiButtonComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-search-editor-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'buttons',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'inputAttr',
                                    'isDirty',
                                    'isValid',
                                    'label',
                                    'labelMode',
                                    'mask',
                                    'maskChar',
                                    'maskInvalidMessage',
                                    'maskRules',
                                    'maxLength',
                                    'mode',
                                    'name',
                                    'onChange',
                                    'onContentReady',
                                    'onCopy',
                                    'onCut',
                                    'onDisposing',
                                    'onEnterKey',
                                    'onFocusIn',
                                    'onFocusOut',
                                    'onInitialized',
                                    'onInput',
                                    'onKeyDown',
                                    'onKeyUp',
                                    'onOptionChanged',
                                    'onPaste',
                                    'onValueChanged',
                                    'placeholder',
                                    'readOnly',
                                    'rtlEnabled',
                                    'showClearButton',
                                    'showMaskMode',
                                    'spellcheck',
                                    'stylingMode',
                                    'tabIndex',
                                    'text',
                                    'useMaskedValue',
                                    'validationError',
                                    'validationErrors',
                                    'validationMessageMode',
                                    'validationMessagePosition',
                                    'validationStatus',
                                    'value',
                                    'valueChangeEvent',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { textChange: [{
                            type: Output
                        }], valueChange: [{
                            type: Output
                        }], buttonsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiButtonComponent)]
                        }] } });
            class DxoSearchEditorOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsModule, declarations: [DxoSearchEditorOptionsComponent], exports: [DxoSearchEditorOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsModule });
            } exports("fS", DxoSearchEditorOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchEditorOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSearchEditorOptionsComponent
                                ],
                                exports: [
                                    DxoSearchEditorOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSearchPanelComponent extends NestedOption {
                get highlightCaseSensitive() {
                    return this._getOption('highlightCaseSensitive');
                }
                set highlightCaseSensitive(value) {
                    this._setOption('highlightCaseSensitive', value);
                }
                get highlightSearchText() {
                    return this._getOption('highlightSearchText');
                }
                set highlightSearchText(value) {
                    this._setOption('highlightSearchText', value);
                }
                get placeholder() {
                    return this._getOption('placeholder');
                }
                set placeholder(value) {
                    this._setOption('placeholder', value);
                }
                get searchVisibleColumnsOnly() {
                    return this._getOption('searchVisibleColumnsOnly');
                }
                set searchVisibleColumnsOnly(value) {
                    this._setOption('searchVisibleColumnsOnly', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                textChange;
                get _optionPath() {
                    return 'searchPanel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'textChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSearchPanelComponent, selector: "dxo-search-panel", inputs: { highlightCaseSensitive: "highlightCaseSensitive", highlightSearchText: "highlightSearchText", placeholder: "placeholder", searchVisibleColumnsOnly: "searchVisibleColumnsOnly", text: "text", visible: "visible", width: "width" }, outputs: { textChange: "textChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-search-panel', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { highlightCaseSensitive: [{
                            type: Input
                        }], highlightSearchText: [{
                            type: Input
                        }], placeholder: [{
                            type: Input
                        }], searchVisibleColumnsOnly: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], textChange: [{
                            type: Output
                        }] } });
            class DxoSearchPanelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelModule, declarations: [DxoSearchPanelComponent], exports: [DxoSearchPanelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelModule });
            } exports("h5", DxoSearchPanelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchPanelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSearchPanelComponent
                                ],
                                exports: [
                                    DxoSearchPanelComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColumnChooserSearchConfig extends NestedOption {
                get editorOptions() {
                    return this._getOption('editorOptions');
                }
                set editorOptions(value) {
                    this._setOption('editorOptions', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get timeout() {
                    return this._getOption('timeout');
                }
                set timeout(value) {
                    this._setOption('timeout', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get searchExpr() {
                    return this._getOption('searchExpr');
                }
                set searchExpr(value) {
                    this._setOption('searchExpr', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserSearchConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColumnChooserSearchConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserSearchConfig, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSearchComponent extends DxoColumnChooserSearchConfig {
                get _optionPath() {
                    return 'search';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSearchComponent, selector: "dxo-search", inputs: { editorOptions: "editorOptions", enabled: "enabled", timeout: "timeout", mode: "mode", searchExpr: "searchExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-search', template: '', providers: [NestedOptionHost], inputs: [
                                    'editorOptions',
                                    'enabled',
                                    'timeout',
                                    'mode',
                                    'searchExpr'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSearchModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchModule, declarations: [DxoSearchComponent], exports: [DxoSearchComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchModule });
            } exports("fu", DxoSearchModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSearchModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSearchComponent
                                ],
                                exports: [
                                    DxoSearchComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSelectionStyleComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get hatching() {
                    return this._getOption('hatching');
                }
                set hatching(value) {
                    this._setOption('hatching', value);
                }
                get highlight() {
                    return this._getOption('highlight');
                }
                set highlight(value) {
                    this._setOption('highlight', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'selectionStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSelectionStyleComponent, selector: "dxo-selection-style", inputs: { border: "border", color: "color", size: "size", dashStyle: "dashStyle", hatching: "hatching", highlight: "highlight", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-selection-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], size: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], hatching: [{
                            type: Input
                        }], highlight: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoSelectionStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleModule, declarations: [DxoSelectionStyleComponent], exports: [DxoSelectionStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleModule });
            } exports("ds", DxoSelectionStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSelectionStyleComponent
                                ],
                                exports: [
                                    DxoSelectionStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoColumnChooserSelectionConfig extends NestedOption {
                get allowSelectAll() {
                    return this._getOption('allowSelectAll');
                }
                set allowSelectAll(value) {
                    this._setOption('allowSelectAll', value);
                }
                get recursive() {
                    return this._getOption('recursive');
                }
                set recursive(value) {
                    this._setOption('recursive', value);
                }
                get selectByClick() {
                    return this._getOption('selectByClick');
                }
                set selectByClick(value) {
                    this._setOption('selectByClick', value);
                }
                get deferred() {
                    return this._getOption('deferred');
                }
                set deferred(value) {
                    this._setOption('deferred', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get selectAllMode() {
                    return this._getOption('selectAllMode');
                }
                set selectAllMode(value) {
                    this._setOption('selectAllMode', value);
                }
                get showCheckBoxesMode() {
                    return this._getOption('showCheckBoxesMode');
                }
                set showCheckBoxesMode(value) {
                    this._setOption('showCheckBoxesMode', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserSelectionConfig, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoColumnChooserSelectionConfig, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoColumnChooserSelectionConfig, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSelectionComponent extends DxoColumnChooserSelectionConfig {
                get _optionPath() {
                    return 'selection';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSelectionComponent, selector: "dxo-selection", inputs: { allowSelectAll: "allowSelectAll", recursive: "recursive", selectByClick: "selectByClick", deferred: "deferred", mode: "mode", selectAllMode: "selectAllMode", showCheckBoxesMode: "showCheckBoxesMode" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-selection', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowSelectAll',
                                    'recursive',
                                    'selectByClick',
                                    'deferred',
                                    'mode',
                                    'selectAllMode',
                                    'showCheckBoxesMode'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSelectionModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionModule, declarations: [DxoSelectionComponent], exports: [DxoSelectionComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionModule });
            } exports("gT", DxoSelectionModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSelectionModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSelectionComponent
                                ],
                                exports: [
                                    DxoSelectionComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSeriesTemplateComponent extends NestedOption {
                get customizeSeries() {
                    return this._getOption('customizeSeries');
                }
                set customizeSeries(value) {
                    this._setOption('customizeSeries', value);
                }
                get nameField() {
                    return this._getOption('nameField');
                }
                set nameField(value) {
                    this._setOption('nameField', value);
                }
                get _optionPath() {
                    return 'seriesTemplate';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSeriesTemplateComponent, selector: "dxo-series-template", inputs: { customizeSeries: "customizeSeries", nameField: "nameField" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-series-template', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customizeSeries: [{
                            type: Input
                        }], nameField: [{
                            type: Input
                        }] } });
            class DxoSeriesTemplateModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateModule, declarations: [DxoSeriesTemplateComponent], exports: [DxoSeriesTemplateComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateModule });
            } exports("d_", DxoSeriesTemplateModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSeriesTemplateModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSeriesTemplateComponent
                                ],
                                exports: [
                                    DxoSeriesTemplateComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShadowComponent extends NestedOption {
                get blur() {
                    return this._getOption('blur');
                }
                set blur(value) {
                    this._setOption('blur', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get offsetX() {
                    return this._getOption('offsetX');
                }
                set offsetX(value) {
                    this._setOption('offsetX', value);
                }
                get offsetY() {
                    return this._getOption('offsetY');
                }
                set offsetY(value) {
                    this._setOption('offsetY', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'shadow';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShadowComponent, selector: "dxo-shadow", inputs: { blur: "blur", color: "color", offsetX: "offsetX", offsetY: "offsetY", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-shadow', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { blur: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], offsetX: [{
                            type: Input
                        }], offsetY: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoShadowModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowModule, declarations: [DxoShadowComponent], exports: [DxoShadowComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowModule });
            } exports("cL", DxoShadowModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShadowModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShadowComponent
                                ],
                                exports: [
                                    DxoShadowComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShowEventComponent extends NestedOption {
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'showEvent';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShowEventComponent, selector: "dxo-show-event", inputs: { delay: "delay", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-show-event', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { delay: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxoShowEventModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventModule, declarations: [DxoShowEventComponent], exports: [DxoShowEventComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventModule });
            } exports("el", DxoShowEventModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowEventModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShowEventComponent
                                ],
                                exports: [
                                    DxoShowEventComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShowFirstSubmenuModeComponent extends NestedOption {
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'showFirstSubmenuMode';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShowFirstSubmenuModeComponent, selector: "dxo-show-first-submenu-mode", inputs: { delay: "delay", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-show-first-submenu-mode', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { delay: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxoShowFirstSubmenuModeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeModule, declarations: [DxoShowFirstSubmenuModeComponent], exports: [DxoShowFirstSubmenuModeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeModule });
            } exports("g2", DxoShowFirstSubmenuModeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowFirstSubmenuModeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShowFirstSubmenuModeComponent
                                ],
                                exports: [
                                    DxoShowFirstSubmenuModeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShowSubmenuModeComponent extends NestedOption {
                get delay() {
                    return this._getOption('delay');
                }
                set delay(value) {
                    this._setOption('delay', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get _optionPath() {
                    return 'showSubmenuMode';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShowSubmenuModeComponent, selector: "dxo-show-submenu-mode", inputs: { delay: "delay", name: "name" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-show-submenu-mode', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { delay: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }] } });
            class DxoShowSubmenuModeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeModule, declarations: [DxoShowSubmenuModeComponent], exports: [DxoShowSubmenuModeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeModule });
            } exports("em", DxoShowSubmenuModeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowSubmenuModeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShowSubmenuModeComponent
                                ],
                                exports: [
                                    DxoShowSubmenuModeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoShowComponent extends DxoAnimationConfig {
                get _optionPath() {
                    return 'show';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShowComponent, selector: "dxo-show", inputs: { complete: "complete", delay: "delay", direction: "direction", duration: "duration", easing: "easing", from: "from", staggerDelay: "staggerDelay", start: "start", to: "to", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-show', template: '', providers: [NestedOptionHost], inputs: [
                                    'complete',
                                    'delay',
                                    'direction',
                                    'duration',
                                    'easing',
                                    'from',
                                    'staggerDelay',
                                    'start',
                                    'to',
                                    'type'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoShowModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShowModule, declarations: [DxoShowComponent], exports: [DxoShowComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowModule });
            } exports("c4", DxoShowModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShowModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShowComponent
                                ],
                                exports: [
                                    DxoShowComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoShutterComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get _optionPath() {
                    return 'shutter';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoShutterComponent, selector: "dxo-shutter", inputs: { color: "color", opacity: "opacity" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-shutter', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }] } });
            class DxoShutterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterModule, declarations: [DxoShutterComponent], exports: [DxoShutterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterModule });
            } exports("gt", DxoShutterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoShutterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoShutterComponent
                                ],
                                exports: [
                                    DxoShutterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSizeComponent extends NestedOption {
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'size';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSizeComponent, selector: "dxo-size", inputs: { height: "height", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-size', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { height: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoSizeModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeModule, declarations: [DxoSizeComponent], exports: [DxoSizeComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeModule });
            } exports("cJ", DxoSizeModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSizeModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSizeComponent
                                ],
                                exports: [
                                    DxoSizeComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSliderHandleComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'sliderHandle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSliderHandleComponent, selector: "dxo-slider-handle", inputs: { color: "color", opacity: "opacity", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-slider-handle', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoSliderHandleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleModule, declarations: [DxoSliderHandleComponent], exports: [DxoSliderHandleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleModule });
            } exports("gu", DxoSliderHandleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderHandleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSliderHandleComponent
                                ],
                                exports: [
                                    DxoSliderHandleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSliderMarkerComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get invalidRangeColor() {
                    return this._getOption('invalidRangeColor');
                }
                set invalidRangeColor(value) {
                    this._setOption('invalidRangeColor', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get placeholderHeight() {
                    return this._getOption('placeholderHeight');
                }
                set placeholderHeight(value) {
                    this._setOption('placeholderHeight', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'sliderMarker';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSliderMarkerComponent, selector: "dxo-slider-marker", inputs: { color: "color", customizeText: "customizeText", font: "font", format: "format", invalidRangeColor: "invalidRangeColor", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", placeholderHeight: "placeholderHeight", visible: "visible" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-slider-marker', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], format: [{
                            type: Input
                        }], invalidRangeColor: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], placeholderHeight: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }] } });
            class DxoSliderMarkerModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerModule, declarations: [DxoSliderMarkerComponent], exports: [DxoSliderMarkerComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerModule });
            } exports("gv", DxoSliderMarkerModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSliderMarkerModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSliderMarkerComponent
                                ],
                                exports: [
                                    DxoSliderMarkerComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSmallValuesGroupingComponent extends NestedOption {
                get groupName() {
                    return this._getOption('groupName');
                }
                set groupName(value) {
                    this._setOption('groupName', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get threshold() {
                    return this._getOption('threshold');
                }
                set threshold(value) {
                    this._setOption('threshold', value);
                }
                get topCount() {
                    return this._getOption('topCount');
                }
                set topCount(value) {
                    this._setOption('topCount', value);
                }
                get _optionPath() {
                    return 'smallValuesGrouping';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSmallValuesGroupingComponent, selector: "dxo-small-values-grouping", inputs: { groupName: "groupName", mode: "mode", threshold: "threshold", topCount: "topCount" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-small-values-grouping', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { groupName: [{
                            type: Input
                        }], mode: [{
                            type: Input
                        }], threshold: [{
                            type: Input
                        }], topCount: [{
                            type: Input
                        }] } });
            class DxoSmallValuesGroupingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingModule, declarations: [DxoSmallValuesGroupingComponent], exports: [DxoSmallValuesGroupingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingModule });
            } exports("g3", DxoSmallValuesGroupingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSmallValuesGroupingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSmallValuesGroupingComponent
                                ],
                                exports: [
                                    DxoSmallValuesGroupingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiSortByGroupSummaryInfoComponent extends CollectionNestedOption {
                get groupColumn() {
                    return this._getOption('groupColumn');
                }
                set groupColumn(value) {
                    this._setOption('groupColumn', value);
                }
                get sortOrder() {
                    return this._getOption('sortOrder');
                }
                set sortOrder(value) {
                    this._setOption('sortOrder', value);
                }
                get summaryItem() {
                    return this._getOption('summaryItem');
                }
                set summaryItem(value) {
                    this._setOption('summaryItem', value);
                }
                get _optionPath() {
                    return 'sortByGroupSummaryInfo';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiSortByGroupSummaryInfoComponent, selector: "dxi-sort-by-group-summary-info", inputs: { groupColumn: "groupColumn", sortOrder: "sortOrder", summaryItem: "summaryItem" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-sort-by-group-summary-info', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { groupColumn: [{
                            type: Input
                        }], sortOrder: [{
                            type: Input
                        }], summaryItem: [{
                            type: Input
                        }] } });
            class DxiSortByGroupSummaryInfoModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoModule, declarations: [DxiSortByGroupSummaryInfoComponent], exports: [DxiSortByGroupSummaryInfoComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiSortByGroupSummaryInfoModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiSortByGroupSummaryInfoComponent
                                ],
                                exports: [
                                    DxiSortByGroupSummaryInfoComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttSorting extends NestedOption {
                get ascendingText() {
                    return this._getOption('ascendingText');
                }
                set ascendingText(value) {
                    this._setOption('ascendingText', value);
                }
                get clearText() {
                    return this._getOption('clearText');
                }
                set clearText(value) {
                    this._setOption('clearText', value);
                }
                get descendingText() {
                    return this._getOption('descendingText');
                }
                set descendingText(value) {
                    this._setOption('descendingText', value);
                }
                get mode() {
                    return this._getOption('mode');
                }
                set mode(value) {
                    this._setOption('mode', value);
                }
                get showSortIndexes() {
                    return this._getOption('showSortIndexes');
                }
                set showSortIndexes(value) {
                    this._setOption('showSortIndexes', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttSorting, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttSorting, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttSorting, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSortingComponent extends DxoGanttSorting {
                get _optionPath() {
                    return 'sorting';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSortingComponent, selector: "dxo-sorting", inputs: { ascendingText: "ascendingText", clearText: "clearText", descendingText: "descendingText", mode: "mode", showSortIndexes: "showSortIndexes" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-sorting', template: '', providers: [NestedOptionHost], inputs: [
                                    'ascendingText',
                                    'clearText',
                                    'descendingText',
                                    'mode',
                                    'showSortIndexes'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSortingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingModule, declarations: [DxoSortingComponent], exports: [DxoSortingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingModule });
            } exports("fC", DxoSortingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSortingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSortingComponent
                                ],
                                exports: [
                                    DxoSortingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSourceComponent extends NestedOption {
                get grouping() {
                    return this._getOption('grouping');
                }
                set grouping(value) {
                    this._setOption('grouping', value);
                }
                get layer() {
                    return this._getOption('layer');
                }
                set layer(value) {
                    this._setOption('layer', value);
                }
                get _optionPath() {
                    return 'source';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSourceComponent, selector: "dxo-source", inputs: { grouping: "grouping", layer: "layer" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-source', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { grouping: [{
                            type: Input
                        }], layer: [{
                            type: Input
                        }] } });
            class DxoSourceModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceModule, declarations: [DxoSourceComponent], exports: [DxoSourceComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceModule });
            } exports("hh", DxoSourceModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSourceModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSourceComponent
                                ],
                                exports: [
                                    DxoSourceComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSplineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'spline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSplineComponent, selector: "dxo-spline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-spline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSplineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineModule, declarations: [DxoSplineComponent], exports: [DxoSplineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineModule });
            } exports("dJ", DxoSplineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSplineComponent
                                ],
                                exports: [
                                    DxoSplineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSplineareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'splinearea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSplineareaComponent, selector: "dxo-splinearea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-splinearea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSplineareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaModule, declarations: [DxoSplineareaComponent], exports: [DxoSplineareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaModule });
            } exports("dK", DxoSplineareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplineareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSplineareaComponent
                                ],
                                exports: [
                                    DxoSplineareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSplitterOptions extends NestedOption {
                get allowKeyboardNavigation() {
                    return this._getOption('allowKeyboardNavigation');
                }
                set allowKeyboardNavigation(value) {
                    this._setOption('allowKeyboardNavigation', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get itemTemplate() {
                    return this._getOption('itemTemplate');
                }
                set itemTemplate(value) {
                    this._setOption('itemTemplate', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onItemClick() {
                    return this._getOption('onItemClick');
                }
                set onItemClick(value) {
                    this._setOption('onItemClick', value);
                }
                get onItemCollapsed() {
                    return this._getOption('onItemCollapsed');
                }
                set onItemCollapsed(value) {
                    this._setOption('onItemCollapsed', value);
                }
                get onItemContextMenu() {
                    return this._getOption('onItemContextMenu');
                }
                set onItemContextMenu(value) {
                    this._setOption('onItemContextMenu', value);
                }
                get onItemExpanded() {
                    return this._getOption('onItemExpanded');
                }
                set onItemExpanded(value) {
                    this._setOption('onItemExpanded', value);
                }
                get onItemRendered() {
                    return this._getOption('onItemRendered');
                }
                set onItemRendered(value) {
                    this._setOption('onItemRendered', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onResize() {
                    return this._getOption('onResize');
                }
                set onResize(value) {
                    this._setOption('onResize', value);
                }
                get onResizeEnd() {
                    return this._getOption('onResizeEnd');
                }
                set onResizeEnd(value) {
                    this._setOption('onResizeEnd', value);
                }
                get onResizeStart() {
                    return this._getOption('onResizeStart');
                }
                set onResizeStart(value) {
                    this._setOption('onResizeStart', value);
                }
                get orientation() {
                    return this._getOption('orientation');
                }
                set orientation(value) {
                    this._setOption('orientation', value);
                }
                get repaintChangesOnly() {
                    return this._getOption('repaintChangesOnly');
                }
                set repaintChangesOnly(value) {
                    this._setOption('repaintChangesOnly', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get separatorSize() {
                    return this._getOption('separatorSize');
                }
                set separatorSize(value) {
                    this._setOption('separatorSize', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSplitterOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSplitterComponent extends DxoSplitterOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                itemsChange;
                get _optionPath() {
                    return 'splitter';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'itemsChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSplitterComponent, selector: "dxo-splitter", inputs: { allowKeyboardNavigation: "allowKeyboardNavigation", dataSource: "dataSource", disabled: "disabled", elementAttr: "elementAttr", height: "height", hoverStateEnabled: "hoverStateEnabled", items: "items", itemTemplate: "itemTemplate", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemCollapsed: "onItemCollapsed", onItemContextMenu: "onItemContextMenu", onItemExpanded: "onItemExpanded", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", orientation: "orientation", repaintChangesOnly: "repaintChangesOnly", rtlEnabled: "rtlEnabled", separatorSize: "separatorSize", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-splitter', template: '', providers: [NestedOptionHost], inputs: [
                                    'allowKeyboardNavigation',
                                    'dataSource',
                                    'disabled',
                                    'elementAttr',
                                    'height',
                                    'hoverStateEnabled',
                                    'items',
                                    'itemTemplate',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onItemClick',
                                    'onItemCollapsed',
                                    'onItemContextMenu',
                                    'onItemExpanded',
                                    'onItemRendered',
                                    'onOptionChanged',
                                    'onResize',
                                    'onResizeEnd',
                                    'onResizeStart',
                                    'orientation',
                                    'repaintChangesOnly',
                                    'rtlEnabled',
                                    'separatorSize',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoSplitterModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterModule, declarations: [DxoSplitterComponent], exports: [DxoSplitterComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterModule });
            } exports("gR", DxoSplitterModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSplitterModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSplitterComponent
                                ],
                                exports: [
                                    DxoSplitterComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedarea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedareaComponent, selector: "dxo-stackedarea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-stackedarea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaModule, declarations: [DxoStackedareaComponent], exports: [DxoStackedareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaModule });
            } exports("dL", DxoStackedareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedareaComponent
                                ],
                                exports: [
                                    DxoStackedareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedbarComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedbar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedbarComponent, selector: "dxo-stackedbar", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width", closed: "closed" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-stackedbar', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width',
                                    'closed'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarModule, declarations: [DxoStackedbarComponent], exports: [DxoStackedbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarModule });
            } exports("dM", DxoStackedbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedbarComponent
                                ],
                                exports: [
                                    DxoStackedbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedlineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedlineComponent, selector: "dxo-stackedline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-stackedline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedlineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineModule, declarations: [DxoStackedlineComponent], exports: [DxoStackedlineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineModule });
            } exports("dN", DxoStackedlineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedlineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedlineComponent
                                ],
                                exports: [
                                    DxoStackedlineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedsplineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedspline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedsplineComponent, selector: "dxo-stackedspline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-stackedspline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedsplineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineModule, declarations: [DxoStackedsplineComponent], exports: [DxoStackedsplineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineModule });
            } exports("dO", DxoStackedsplineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedsplineComponent
                                ],
                                exports: [
                                    DxoStackedsplineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStackedsplineareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stackedsplinearea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStackedsplineareaComponent, selector: "dxo-stackedsplinearea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-stackedsplinearea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStackedsplineareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaModule, declarations: [DxoStackedsplineareaComponent], exports: [DxoStackedsplineareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaModule });
            } exports("dP", DxoStackedsplineareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStackedsplineareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStackedsplineareaComponent
                                ],
                                exports: [
                                    DxoStackedsplineareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoStateStoringComponent extends NestedOption {
                get customLoad() {
                    return this._getOption('customLoad');
                }
                set customLoad(value) {
                    this._setOption('customLoad', value);
                }
                get customSave() {
                    return this._getOption('customSave');
                }
                set customSave(value) {
                    this._setOption('customSave', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get savingTimeout() {
                    return this._getOption('savingTimeout');
                }
                set savingTimeout(value) {
                    this._setOption('savingTimeout', value);
                }
                get storageKey() {
                    return this._getOption('storageKey');
                }
                set storageKey(value) {
                    this._setOption('storageKey', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'stateStoring';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStateStoringComponent, selector: "dxo-state-storing", inputs: { customLoad: "customLoad", customSave: "customSave", enabled: "enabled", savingTimeout: "savingTimeout", storageKey: "storageKey", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-state-storing', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customLoad: [{
                            type: Input
                        }], customSave: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], savingTimeout: [{
                            type: Input
                        }], storageKey: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxoStateStoringModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringModule, declarations: [DxoStateStoringComponent], exports: [DxoStateStoringComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringModule });
            } exports("gh", DxoStateStoringModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStateStoringModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStateStoringComponent
                                ],
                                exports: [
                                    DxoStateStoringComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStepareaComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'steparea';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStepareaComponent, selector: "dxo-steparea", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-steparea', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStepareaModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaModule, declarations: [DxoStepareaComponent], exports: [DxoStepareaComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaModule });
            } exports("dQ", DxoStepareaModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStepareaModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStepareaComponent
                                ],
                                exports: [
                                    DxoStepareaComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSteplineComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stepline';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSteplineComponent, selector: "dxo-stepline", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-stepline', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSteplineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineModule, declarations: [DxoSteplineComponent], exports: [DxoSteplineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineModule });
            } exports("dR", DxoSteplineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSteplineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSteplineComponent
                                ],
                                exports: [
                                    DxoSteplineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoStockComponent extends DxoChartCommonSeriesSettings {
                get _optionPath() {
                    return 'stock';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStockComponent, selector: "dxo-stock", inputs: { aggregation: "aggregation", area: "area", argumentField: "argumentField", axis: "axis", bar: "bar", barOverlapGroup: "barOverlapGroup", barPadding: "barPadding", barWidth: "barWidth", border: "border", bubble: "bubble", candlestick: "candlestick", closeValueField: "closeValueField", color: "color", cornerRadius: "cornerRadius", dashStyle: "dashStyle", fullstackedarea: "fullstackedarea", fullstackedbar: "fullstackedbar", fullstackedline: "fullstackedline", fullstackedspline: "fullstackedspline", fullstackedsplinearea: "fullstackedsplinearea", highValueField: "highValueField", hoverMode: "hoverMode", hoverStyle: "hoverStyle", ignoreEmptyPoints: "ignoreEmptyPoints", innerColor: "innerColor", label: "label", line: "line", lowValueField: "lowValueField", maxLabelCount: "maxLabelCount", minBarSize: "minBarSize", opacity: "opacity", openValueField: "openValueField", pane: "pane", point: "point", rangearea: "rangearea", rangebar: "rangebar", rangeValue1Field: "rangeValue1Field", rangeValue2Field: "rangeValue2Field", reduction: "reduction", scatter: "scatter", selectionMode: "selectionMode", selectionStyle: "selectionStyle", showInLegend: "showInLegend", sizeField: "sizeField", spline: "spline", splinearea: "splinearea", stack: "stack", stackedarea: "stackedarea", stackedbar: "stackedbar", stackedline: "stackedline", stackedspline: "stackedspline", stackedsplinearea: "stackedsplinearea", steparea: "steparea", stepline: "stepline", stock: "stock", tagField: "tagField", type: "type", valueErrorBar: "valueErrorBar", valueField: "valueField", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-stock', template: '', providers: [NestedOptionHost], inputs: [
                                    'aggregation',
                                    'area',
                                    'argumentField',
                                    'axis',
                                    'bar',
                                    'barOverlapGroup',
                                    'barPadding',
                                    'barWidth',
                                    'border',
                                    'bubble',
                                    'candlestick',
                                    'closeValueField',
                                    'color',
                                    'cornerRadius',
                                    'dashStyle',
                                    'fullstackedarea',
                                    'fullstackedbar',
                                    'fullstackedline',
                                    'fullstackedspline',
                                    'fullstackedsplinearea',
                                    'highValueField',
                                    'hoverMode',
                                    'hoverStyle',
                                    'ignoreEmptyPoints',
                                    'innerColor',
                                    'label',
                                    'line',
                                    'lowValueField',
                                    'maxLabelCount',
                                    'minBarSize',
                                    'opacity',
                                    'openValueField',
                                    'pane',
                                    'point',
                                    'rangearea',
                                    'rangebar',
                                    'rangeValue1Field',
                                    'rangeValue2Field',
                                    'reduction',
                                    'scatter',
                                    'selectionMode',
                                    'selectionStyle',
                                    'showInLegend',
                                    'sizeField',
                                    'spline',
                                    'splinearea',
                                    'stack',
                                    'stackedarea',
                                    'stackedbar',
                                    'stackedline',
                                    'stackedspline',
                                    'stackedsplinearea',
                                    'steparea',
                                    'stepline',
                                    'stock',
                                    'tagField',
                                    'type',
                                    'valueErrorBar',
                                    'valueField',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoStockModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStockModule, declarations: [DxoStockComponent], exports: [DxoStockComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockModule });
            } exports("dS", DxoStockModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStockModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStockComponent
                                ],
                                exports: [
                                    DxoStockComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoStoreComponent extends NestedOption {
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'store';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStoreComponent, selector: "dxo-store", inputs: { type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-store', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { type: [{
                            type: Input
                        }] } });
            class DxoStoreModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreModule, declarations: [DxoStoreComponent], exports: [DxoStoreComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreModule });
            } exports("gc", DxoStoreModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStoreModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStoreComponent
                                ],
                                exports: [
                                    DxoStoreComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiGanttStripLine extends CollectionNestedOption {
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get end() {
                    return this._getOption('end');
                }
                set end(value) {
                    this._setOption('end', value);
                }
                get start() {
                    return this._getOption('start');
                }
                set start(value) {
                    this._setOption('start', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGanttStripLine, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiGanttStripLine, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiGanttStripLine, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxiStripLineComponent extends DxiGanttStripLine {
                get _optionPath() {
                    return 'stripLines';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiStripLineComponent, selector: "dxi-strip-line", inputs: { cssClass: "cssClass", end: "end", start: "start", title: "title" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("fs", DxiStripLineComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-strip-line', template: '', providers: [NestedOptionHost], inputs: [
                                    'cssClass',
                                    'end',
                                    'start',
                                    'title'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxiStripLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineModule, declarations: [DxiStripLineComponent], exports: [DxiStripLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineModule });
            } exports("fD", DxiStripLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiStripLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiStripLineComponent
                                ],
                                exports: [
                                    DxiStripLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoStripStyleComponent extends NestedOption {
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get _optionPath() {
                    return 'stripStyle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoStripStyleComponent, selector: "dxo-strip-style", inputs: { label: "label", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-strip-style', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { label: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }] } });
            class DxoStripStyleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleModule, declarations: [DxoStripStyleComponent], exports: [DxoStripStyleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleModule });
            } exports("da", DxoStripStyleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoStripStyleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoStripStyleComponent
                                ],
                                exports: [
                                    DxoStripStyleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSubtitleComponent extends NestedOption {
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get _optionPath() {
                    return 'subtitle';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSubtitleComponent, selector: "dxo-subtitle", inputs: { font: "font", offset: "offset", text: "text", textOverflow: "textOverflow", wordWrap: "wordWrap" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-subtitle', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { font: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], textOverflow: [{
                            type: Input
                        }], wordWrap: [{
                            type: Input
                        }] } });
            class DxoSubtitleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleModule, declarations: [DxoSubtitleComponent], exports: [DxoSubtitleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleModule });
            } exports("cH", DxoSubtitleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubtitleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSubtitleComponent
                                ],
                                exports: [
                                    DxoSubtitleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGaugeIndicator extends NestedOption {
                get arrowLength() {
                    return this._getOption('arrowLength');
                }
                set arrowLength(value) {
                    this._setOption('arrowLength', value);
                }
                get backgroundColor() {
                    return this._getOption('backgroundColor');
                }
                set backgroundColor(value) {
                    this._setOption('backgroundColor', value);
                }
                get baseValue() {
                    return this._getOption('baseValue');
                }
                set baseValue(value) {
                    this._setOption('baseValue', value);
                }
                get beginAdaptingAtRadius() {
                    return this._getOption('beginAdaptingAtRadius');
                }
                set beginAdaptingAtRadius(value) {
                    this._setOption('beginAdaptingAtRadius', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get horizontalOrientation() {
                    return this._getOption('horizontalOrientation');
                }
                set horizontalOrientation(value) {
                    this._setOption('horizontalOrientation', value);
                }
                get indentFromCenter() {
                    return this._getOption('indentFromCenter');
                }
                set indentFromCenter(value) {
                    this._setOption('indentFromCenter', value);
                }
                get length() {
                    return this._getOption('length');
                }
                set length(value) {
                    this._setOption('length', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get palette() {
                    return this._getOption('palette');
                }
                set palette(value) {
                    this._setOption('palette', value);
                }
                get secondColor() {
                    return this._getOption('secondColor');
                }
                set secondColor(value) {
                    this._setOption('secondColor', value);
                }
                get secondFraction() {
                    return this._getOption('secondFraction');
                }
                set secondFraction(value) {
                    this._setOption('secondFraction', value);
                }
                get size() {
                    return this._getOption('size');
                }
                set size(value) {
                    this._setOption('size', value);
                }
                get spindleGapSize() {
                    return this._getOption('spindleGapSize');
                }
                set spindleGapSize(value) {
                    this._setOption('spindleGapSize', value);
                }
                get spindleSize() {
                    return this._getOption('spindleSize');
                }
                set spindleSize(value) {
                    this._setOption('spindleSize', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get verticalOrientation() {
                    return this._getOption('verticalOrientation');
                }
                set verticalOrientation(value) {
                    this._setOption('verticalOrientation', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGaugeIndicator, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGaugeIndicator, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGaugeIndicator, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoSubvalueIndicatorComponent extends DxoGaugeIndicator {
                get _optionPath() {
                    return 'subvalueIndicator';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSubvalueIndicatorComponent, selector: "dxo-subvalue-indicator", inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-subvalue-indicator', template: '', providers: [NestedOptionHost], inputs: [
                                    'arrowLength',
                                    'backgroundColor',
                                    'baseValue',
                                    'beginAdaptingAtRadius',
                                    'color',
                                    'horizontalOrientation',
                                    'indentFromCenter',
                                    'length',
                                    'offset',
                                    'palette',
                                    'secondColor',
                                    'secondFraction',
                                    'size',
                                    'spindleGapSize',
                                    'spindleSize',
                                    'text',
                                    'type',
                                    'verticalOrientation',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoSubvalueIndicatorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorModule, declarations: [DxoSubvalueIndicatorComponent], exports: [DxoSubvalueIndicatorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorModule });
            } exports("e6", DxoSubvalueIndicatorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSubvalueIndicatorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSubvalueIndicatorComponent
                                ],
                                exports: [
                                    DxoSubvalueIndicatorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiTotalItemComponent extends CollectionNestedOption {
                get alignment() {
                    return this._getOption('alignment');
                }
                set alignment(value) {
                    this._setOption('alignment', value);
                }
                get column() {
                    return this._getOption('column');
                }
                set column(value) {
                    this._setOption('column', value);
                }
                get cssClass() {
                    return this._getOption('cssClass');
                }
                set cssClass(value) {
                    this._setOption('cssClass', value);
                }
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get displayFormat() {
                    return this._getOption('displayFormat');
                }
                set displayFormat(value) {
                    this._setOption('displayFormat', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get showInColumn() {
                    return this._getOption('showInColumn');
                }
                set showInColumn(value) {
                    this._setOption('showInColumn', value);
                }
                get skipEmptyValues() {
                    return this._getOption('skipEmptyValues');
                }
                set skipEmptyValues(value) {
                    this._setOption('skipEmptyValues', value);
                }
                get summaryType() {
                    return this._getOption('summaryType');
                }
                set summaryType(value) {
                    this._setOption('summaryType', value);
                }
                get valueFormat() {
                    return this._getOption('valueFormat');
                }
                set valueFormat(value) {
                    this._setOption('valueFormat', value);
                }
                get _optionPath() {
                    return 'totalItems';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiTotalItemComponent, selector: "dxi-total-item", inputs: { alignment: "alignment", column: "column", cssClass: "cssClass", customizeText: "customizeText", displayFormat: "displayFormat", name: "name", showInColumn: "showInColumn", skipEmptyValues: "skipEmptyValues", summaryType: "summaryType", valueFormat: "valueFormat" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-total-item', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { alignment: [{
                            type: Input
                        }], column: [{
                            type: Input
                        }], cssClass: [{
                            type: Input
                        }], customizeText: [{
                            type: Input
                        }], displayFormat: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], showInColumn: [{
                            type: Input
                        }], skipEmptyValues: [{
                            type: Input
                        }], summaryType: [{
                            type: Input
                        }], valueFormat: [{
                            type: Input
                        }] } });
            class DxiTotalItemModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemModule, declarations: [DxiTotalItemComponent], exports: [DxiTotalItemComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiTotalItemModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiTotalItemComponent
                                ],
                                exports: [
                                    DxiTotalItemComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoSummaryComponent extends NestedOption {
                get calculateCustomSummary() {
                    return this._getOption('calculateCustomSummary');
                }
                set calculateCustomSummary(value) {
                    this._setOption('calculateCustomSummary', value);
                }
                get groupItems() {
                    return this._getOption('groupItems');
                }
                set groupItems(value) {
                    this._setOption('groupItems', value);
                }
                get recalculateWhileEditing() {
                    return this._getOption('recalculateWhileEditing');
                }
                set recalculateWhileEditing(value) {
                    this._setOption('recalculateWhileEditing', value);
                }
                get skipEmptyValues() {
                    return this._getOption('skipEmptyValues');
                }
                set skipEmptyValues(value) {
                    this._setOption('skipEmptyValues', value);
                }
                get texts() {
                    return this._getOption('texts');
                }
                set texts(value) {
                    this._setOption('texts', value);
                }
                get totalItems() {
                    return this._getOption('totalItems');
                }
                set totalItems(value) {
                    this._setOption('totalItems', value);
                }
                get _optionPath() {
                    return 'summary';
                }
                get groupItemsChildren() {
                    return this._getOption('groupItems');
                }
                set groupItemsChildren(value) {
                    this.setChildren('groupItems', value);
                }
                get totalItemsChildren() {
                    return this._getOption('totalItems');
                }
                set totalItemsChildren(value) {
                    this.setChildren('totalItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoSummaryComponent, selector: "dxo-summary", inputs: { calculateCustomSummary: "calculateCustomSummary", groupItems: "groupItems", recalculateWhileEditing: "recalculateWhileEditing", skipEmptyValues: "skipEmptyValues", texts: "texts", totalItems: "totalItems" }, providers: [NestedOptionHost], queries: [{ propertyName: "groupItemsChildren", predicate: i0.forwardRef(() => DxiGroupItemComponent) }, { propertyName: "totalItemsChildren", predicate: i0.forwardRef(() => DxiTotalItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-summary', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { calculateCustomSummary: [{
                            type: Input
                        }], groupItems: [{
                            type: Input
                        }], recalculateWhileEditing: [{
                            type: Input
                        }], skipEmptyValues: [{
                            type: Input
                        }], texts: [{
                            type: Input
                        }], totalItems: [{
                            type: Input
                        }], groupItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiGroupItemComponent)]
                        }], totalItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiTotalItemComponent)]
                        }] } });
            class DxoSummaryModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryModule, declarations: [DxoSummaryComponent], exports: [DxoSummaryComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoSummaryModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoSummaryComponent
                                ],
                                exports: [
                                    DxoSummaryComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTabPanelOptions extends NestedOption {
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                get animationEnabled() {
                    return this._getOption('animationEnabled');
                }
                set animationEnabled(value) {
                    this._setOption('animationEnabled', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get deferRendering() {
                    return this._getOption('deferRendering');
                }
                set deferRendering(value) {
                    this._setOption('deferRendering', value);
                }
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                get focusStateEnabled() {
                    return this._getOption('focusStateEnabled');
                }
                set focusStateEnabled(value) {
                    this._setOption('focusStateEnabled', value);
                }
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                get iconPosition() {
                    return this._getOption('iconPosition');
                }
                set iconPosition(value) {
                    this._setOption('iconPosition', value);
                }
                get itemHoldTimeout() {
                    return this._getOption('itemHoldTimeout');
                }
                set itemHoldTimeout(value) {
                    this._setOption('itemHoldTimeout', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get itemTemplate() {
                    return this._getOption('itemTemplate');
                }
                set itemTemplate(value) {
                    this._setOption('itemTemplate', value);
                }
                get itemTitleTemplate() {
                    return this._getOption('itemTitleTemplate');
                }
                set itemTitleTemplate(value) {
                    this._setOption('itemTitleTemplate', value);
                }
                get loop() {
                    return this._getOption('loop');
                }
                set loop(value) {
                    this._setOption('loop', value);
                }
                get noDataText() {
                    return this._getOption('noDataText');
                }
                set noDataText(value) {
                    this._setOption('noDataText', value);
                }
                get onContentReady() {
                    return this._getOption('onContentReady');
                }
                set onContentReady(value) {
                    this._setOption('onContentReady', value);
                }
                get onDisposing() {
                    return this._getOption('onDisposing');
                }
                set onDisposing(value) {
                    this._setOption('onDisposing', value);
                }
                get onInitialized() {
                    return this._getOption('onInitialized');
                }
                set onInitialized(value) {
                    this._setOption('onInitialized', value);
                }
                get onItemClick() {
                    return this._getOption('onItemClick');
                }
                set onItemClick(value) {
                    this._setOption('onItemClick', value);
                }
                get onItemContextMenu() {
                    return this._getOption('onItemContextMenu');
                }
                set onItemContextMenu(value) {
                    this._setOption('onItemContextMenu', value);
                }
                get onItemHold() {
                    return this._getOption('onItemHold');
                }
                set onItemHold(value) {
                    this._setOption('onItemHold', value);
                }
                get onItemRendered() {
                    return this._getOption('onItemRendered');
                }
                set onItemRendered(value) {
                    this._setOption('onItemRendered', value);
                }
                get onOptionChanged() {
                    return this._getOption('onOptionChanged');
                }
                set onOptionChanged(value) {
                    this._setOption('onOptionChanged', value);
                }
                get onSelectionChanged() {
                    return this._getOption('onSelectionChanged');
                }
                set onSelectionChanged(value) {
                    this._setOption('onSelectionChanged', value);
                }
                get onTitleClick() {
                    return this._getOption('onTitleClick');
                }
                set onTitleClick(value) {
                    this._setOption('onTitleClick', value);
                }
                get onTitleHold() {
                    return this._getOption('onTitleHold');
                }
                set onTitleHold(value) {
                    this._setOption('onTitleHold', value);
                }
                get onTitleRendered() {
                    return this._getOption('onTitleRendered');
                }
                set onTitleRendered(value) {
                    this._setOption('onTitleRendered', value);
                }
                get repaintChangesOnly() {
                    return this._getOption('repaintChangesOnly');
                }
                set repaintChangesOnly(value) {
                    this._setOption('repaintChangesOnly', value);
                }
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                get scrollByContent() {
                    return this._getOption('scrollByContent');
                }
                set scrollByContent(value) {
                    this._setOption('scrollByContent', value);
                }
                get scrollingEnabled() {
                    return this._getOption('scrollingEnabled');
                }
                set scrollingEnabled(value) {
                    this._setOption('scrollingEnabled', value);
                }
                get selectedIndex() {
                    return this._getOption('selectedIndex');
                }
                set selectedIndex(value) {
                    this._setOption('selectedIndex', value);
                }
                get selectedItem() {
                    return this._getOption('selectedItem');
                }
                set selectedItem(value) {
                    this._setOption('selectedItem', value);
                }
                get showNavButtons() {
                    return this._getOption('showNavButtons');
                }
                set showNavButtons(value) {
                    this._setOption('showNavButtons', value);
                }
                get stylingMode() {
                    return this._getOption('stylingMode');
                }
                set stylingMode(value) {
                    this._setOption('stylingMode', value);
                }
                get swipeEnabled() {
                    return this._getOption('swipeEnabled');
                }
                set swipeEnabled(value) {
                    this._setOption('swipeEnabled', value);
                }
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                get tabsPosition() {
                    return this._getOption('tabsPosition');
                }
                set tabsPosition(value) {
                    this._setOption('tabsPosition', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptions, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTabPanelOptions, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptions, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoTabPanelOptionsComponent extends DxoTabPanelOptions {
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                itemsChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectedIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectedItemChange;
                get _optionPath() {
                    return 'tabPanelOptions';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'itemsChange' },
                        { emit: 'selectedIndexChange' },
                        { emit: 'selectedItemChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTabPanelOptionsComponent, selector: "dxo-tab-panel-options", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", animationEnabled: "animationEnabled", dataSource: "dataSource", deferRendering: "deferRendering", disabled: "disabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", iconPosition: "iconPosition", itemHoldTimeout: "itemHoldTimeout", items: "items", itemTemplate: "itemTemplate", itemTitleTemplate: "itemTitleTemplate", loop: "loop", noDataText: "noDataText", onContentReady: "onContentReady", onDisposing: "onDisposing", onInitialized: "onInitialized", onItemClick: "onItemClick", onItemContextMenu: "onItemContextMenu", onItemHold: "onItemHold", onItemRendered: "onItemRendered", onOptionChanged: "onOptionChanged", onSelectionChanged: "onSelectionChanged", onTitleClick: "onTitleClick", onTitleHold: "onTitleHold", onTitleRendered: "onTitleRendered", repaintChangesOnly: "repaintChangesOnly", rtlEnabled: "rtlEnabled", scrollByContent: "scrollByContent", scrollingEnabled: "scrollingEnabled", selectedIndex: "selectedIndex", selectedItem: "selectedItem", showNavButtons: "showNavButtons", stylingMode: "stylingMode", swipeEnabled: "swipeEnabled", tabIndex: "tabIndex", tabsPosition: "tabsPosition", visible: "visible", width: "width" }, outputs: { itemsChange: "itemsChange", selectedIndexChange: "selectedIndexChange", selectedItemChange: "selectedItemChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-tab-panel-options', template: '', providers: [NestedOptionHost], inputs: [
                                    'accessKey',
                                    'activeStateEnabled',
                                    'animationEnabled',
                                    'dataSource',
                                    'deferRendering',
                                    'disabled',
                                    'elementAttr',
                                    'focusStateEnabled',
                                    'height',
                                    'hint',
                                    'hoverStateEnabled',
                                    'iconPosition',
                                    'itemHoldTimeout',
                                    'items',
                                    'itemTemplate',
                                    'itemTitleTemplate',
                                    'loop',
                                    'noDataText',
                                    'onContentReady',
                                    'onDisposing',
                                    'onInitialized',
                                    'onItemClick',
                                    'onItemContextMenu',
                                    'onItemHold',
                                    'onItemRendered',
                                    'onOptionChanged',
                                    'onSelectionChanged',
                                    'onTitleClick',
                                    'onTitleHold',
                                    'onTitleRendered',
                                    'repaintChangesOnly',
                                    'rtlEnabled',
                                    'scrollByContent',
                                    'scrollingEnabled',
                                    'selectedIndex',
                                    'selectedItem',
                                    'showNavButtons',
                                    'stylingMode',
                                    'swipeEnabled',
                                    'tabIndex',
                                    'tabsPosition',
                                    'visible',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChange: [{
                            type: Output
                        }], selectedIndexChange: [{
                            type: Output
                        }], selectedItemChange: [{
                            type: Output
                        }], itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoTabPanelOptionsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsModule, declarations: [DxoTabPanelOptionsComponent], exports: [DxoTabPanelOptionsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsModule });
            } exports("fl", DxoTabPanelOptionsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTabPanelOptionsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTabPanelOptionsComponent
                                ],
                                exports: [
                                    DxoTabPanelOptionsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorTableContextMenu extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorTableContextMenu, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorTableContextMenu, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorTableContextMenu, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoTableContextMenuComponent extends DxoHtmlEditorTableContextMenu {
                get _optionPath() {
                    return 'tableContextMenu';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTableContextMenuComponent, selector: "dxo-table-context-menu", inputs: { enabled: "enabled", items: "items" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-table-context-menu', template: '', providers: [NestedOptionHost], inputs: [
                                    'enabled',
                                    'items'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }] } });
            class DxoTableContextMenuModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuModule, declarations: [DxoTableContextMenuComponent], exports: [DxoTableContextMenuComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuModule });
            } exports("fM", DxoTableContextMenuModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableContextMenuModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTableContextMenuComponent
                                ],
                                exports: [
                                    DxoTableContextMenuComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorTableResizing extends NestedOption {
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get minColumnWidth() {
                    return this._getOption('minColumnWidth');
                }
                set minColumnWidth(value) {
                    this._setOption('minColumnWidth', value);
                }
                get minRowHeight() {
                    return this._getOption('minRowHeight');
                }
                set minRowHeight(value) {
                    this._setOption('minRowHeight', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorTableResizing, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorTableResizing, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorTableResizing, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoTableResizingComponent extends DxoHtmlEditorTableResizing {
                get _optionPath() {
                    return 'tableResizing';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTableResizingComponent, selector: "dxo-table-resizing", inputs: { enabled: "enabled", minColumnWidth: "minColumnWidth", minRowHeight: "minRowHeight" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-table-resizing', template: '', providers: [NestedOptionHost], inputs: [
                                    'enabled',
                                    'minColumnWidth',
                                    'minRowHeight'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoTableResizingModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingModule, declarations: [DxoTableResizingComponent], exports: [DxoTableResizingComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingModule });
            } exports("fN", DxoTableResizingModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTableResizingModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTableResizingComponent
                                ],
                                exports: [
                                    DxoTableResizingComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTasksComponent extends NestedOption {
                get colorExpr() {
                    return this._getOption('colorExpr');
                }
                set colorExpr(value) {
                    this._setOption('colorExpr', value);
                }
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get endExpr() {
                    return this._getOption('endExpr');
                }
                set endExpr(value) {
                    this._setOption('endExpr', value);
                }
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                get parentIdExpr() {
                    return this._getOption('parentIdExpr');
                }
                set parentIdExpr(value) {
                    this._setOption('parentIdExpr', value);
                }
                get progressExpr() {
                    return this._getOption('progressExpr');
                }
                set progressExpr(value) {
                    this._setOption('progressExpr', value);
                }
                get startExpr() {
                    return this._getOption('startExpr');
                }
                set startExpr(value) {
                    this._setOption('startExpr', value);
                }
                get titleExpr() {
                    return this._getOption('titleExpr');
                }
                set titleExpr(value) {
                    this._setOption('titleExpr', value);
                }
                get _optionPath() {
                    return 'tasks';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTasksComponent, selector: "dxo-tasks", inputs: { colorExpr: "colorExpr", dataSource: "dataSource", endExpr: "endExpr", keyExpr: "keyExpr", parentIdExpr: "parentIdExpr", progressExpr: "progressExpr", startExpr: "startExpr", titleExpr: "titleExpr" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-tasks', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { colorExpr: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], endExpr: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], parentIdExpr: [{
                            type: Input
                        }], progressExpr: [{
                            type: Input
                        }], startExpr: [{
                            type: Input
                        }], titleExpr: [{
                            type: Input
                        }] } });
            class DxoTasksModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksModule, declarations: [DxoTasksComponent], exports: [DxoTasksComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksModule });
            } exports("fE", DxoTasksModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTasksModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTasksComponent
                                ],
                                exports: [
                                    DxoTasksComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTextComponent extends NestedOption {
                get customizeText() {
                    return this._getOption('customizeText');
                }
                set customizeText(value) {
                    this._setOption('customizeText', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get indent() {
                    return this._getOption('indent');
                }
                set indent(value) {
                    this._setOption('indent', value);
                }
                get _optionPath() {
                    return 'text';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTextComponent, selector: "dxo-text", inputs: { customizeText: "customizeText", font: "font", format: "format", indent: "indent" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-text', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { customizeText: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], format: [{
                            type: Input
                        }], indent: [{
                            type: Input
                        }] } });
            class DxoTextModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTextModule, declarations: [DxoTextComponent], exports: [DxoTextComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextModule });
            } exports("e7", DxoTextModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTextComponent
                                ],
                                exports: [
                                    DxoTextComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoGanttHeaderFilterTexts extends NestedOption {
                get fix() {
                    return this._getOption('fix');
                }
                set fix(value) {
                    this._setOption('fix', value);
                }
                get leftPosition() {
                    return this._getOption('leftPosition');
                }
                set leftPosition(value) {
                    this._setOption('leftPosition', value);
                }
                get rightPosition() {
                    return this._getOption('rightPosition');
                }
                set rightPosition(value) {
                    this._setOption('rightPosition', value);
                }
                get unfix() {
                    return this._getOption('unfix');
                }
                set unfix(value) {
                    this._setOption('unfix', value);
                }
                get addRow() {
                    return this._getOption('addRow');
                }
                set addRow(value) {
                    this._setOption('addRow', value);
                }
                get cancelAllChanges() {
                    return this._getOption('cancelAllChanges');
                }
                set cancelAllChanges(value) {
                    this._setOption('cancelAllChanges', value);
                }
                get cancelRowChanges() {
                    return this._getOption('cancelRowChanges');
                }
                set cancelRowChanges(value) {
                    this._setOption('cancelRowChanges', value);
                }
                get confirmDeleteMessage() {
                    return this._getOption('confirmDeleteMessage');
                }
                set confirmDeleteMessage(value) {
                    this._setOption('confirmDeleteMessage', value);
                }
                get confirmDeleteTitle() {
                    return this._getOption('confirmDeleteTitle');
                }
                set confirmDeleteTitle(value) {
                    this._setOption('confirmDeleteTitle', value);
                }
                get deleteRow() {
                    return this._getOption('deleteRow');
                }
                set deleteRow(value) {
                    this._setOption('deleteRow', value);
                }
                get editRow() {
                    return this._getOption('editRow');
                }
                set editRow(value) {
                    this._setOption('editRow', value);
                }
                get saveAllChanges() {
                    return this._getOption('saveAllChanges');
                }
                set saveAllChanges(value) {
                    this._setOption('saveAllChanges', value);
                }
                get saveRowChanges() {
                    return this._getOption('saveRowChanges');
                }
                set saveRowChanges(value) {
                    this._setOption('saveRowChanges', value);
                }
                get undeleteRow() {
                    return this._getOption('undeleteRow');
                }
                set undeleteRow(value) {
                    this._setOption('undeleteRow', value);
                }
                get validationCancelChanges() {
                    return this._getOption('validationCancelChanges');
                }
                set validationCancelChanges(value) {
                    this._setOption('validationCancelChanges', value);
                }
                get exportAll() {
                    return this._getOption('exportAll');
                }
                set exportAll(value) {
                    this._setOption('exportAll', value);
                }
                get exportSelectedRows() {
                    return this._getOption('exportSelectedRows');
                }
                set exportSelectedRows(value) {
                    this._setOption('exportSelectedRows', value);
                }
                get exportTo() {
                    return this._getOption('exportTo');
                }
                set exportTo(value) {
                    this._setOption('exportTo', value);
                }
                get clearFilter() {
                    return this._getOption('clearFilter');
                }
                set clearFilter(value) {
                    this._setOption('clearFilter', value);
                }
                get createFilter() {
                    return this._getOption('createFilter');
                }
                set createFilter(value) {
                    this._setOption('createFilter', value);
                }
                get filterEnabledHint() {
                    return this._getOption('filterEnabledHint');
                }
                set filterEnabledHint(value) {
                    this._setOption('filterEnabledHint', value);
                }
                get groupByThisColumn() {
                    return this._getOption('groupByThisColumn');
                }
                set groupByThisColumn(value) {
                    this._setOption('groupByThisColumn', value);
                }
                get groupContinuedMessage() {
                    return this._getOption('groupContinuedMessage');
                }
                set groupContinuedMessage(value) {
                    this._setOption('groupContinuedMessage', value);
                }
                get groupContinuesMessage() {
                    return this._getOption('groupContinuesMessage');
                }
                set groupContinuesMessage(value) {
                    this._setOption('groupContinuesMessage', value);
                }
                get ungroup() {
                    return this._getOption('ungroup');
                }
                set ungroup(value) {
                    this._setOption('ungroup', value);
                }
                get ungroupAll() {
                    return this._getOption('ungroupAll');
                }
                set ungroupAll(value) {
                    this._setOption('ungroupAll', value);
                }
                get cancel() {
                    return this._getOption('cancel');
                }
                set cancel(value) {
                    this._setOption('cancel', value);
                }
                get emptyValue() {
                    return this._getOption('emptyValue');
                }
                set emptyValue(value) {
                    this._setOption('emptyValue', value);
                }
                get ok() {
                    return this._getOption('ok');
                }
                set ok(value) {
                    this._setOption('ok', value);
                }
                get avg() {
                    return this._getOption('avg');
                }
                set avg(value) {
                    this._setOption('avg', value);
                }
                get avgOtherColumn() {
                    return this._getOption('avgOtherColumn');
                }
                set avgOtherColumn(value) {
                    this._setOption('avgOtherColumn', value);
                }
                get count() {
                    return this._getOption('count');
                }
                set count(value) {
                    this._setOption('count', value);
                }
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get maxOtherColumn() {
                    return this._getOption('maxOtherColumn');
                }
                set maxOtherColumn(value) {
                    this._setOption('maxOtherColumn', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                get minOtherColumn() {
                    return this._getOption('minOtherColumn');
                }
                set minOtherColumn(value) {
                    this._setOption('minOtherColumn', value);
                }
                get sum() {
                    return this._getOption('sum');
                }
                set sum(value) {
                    this._setOption('sum', value);
                }
                get sumOtherColumn() {
                    return this._getOption('sumOtherColumn');
                }
                set sumOtherColumn(value) {
                    this._setOption('sumOtherColumn', value);
                }
                get allFields() {
                    return this._getOption('allFields');
                }
                set allFields(value) {
                    this._setOption('allFields', value);
                }
                get columnFields() {
                    return this._getOption('columnFields');
                }
                set columnFields(value) {
                    this._setOption('columnFields', value);
                }
                get dataFields() {
                    return this._getOption('dataFields');
                }
                set dataFields(value) {
                    this._setOption('dataFields', value);
                }
                get filterFields() {
                    return this._getOption('filterFields');
                }
                set filterFields(value) {
                    this._setOption('filterFields', value);
                }
                get rowFields() {
                    return this._getOption('rowFields');
                }
                set rowFields(value) {
                    this._setOption('rowFields', value);
                }
                get columnFieldArea() {
                    return this._getOption('columnFieldArea');
                }
                set columnFieldArea(value) {
                    this._setOption('columnFieldArea', value);
                }
                get dataFieldArea() {
                    return this._getOption('dataFieldArea');
                }
                set dataFieldArea(value) {
                    this._setOption('dataFieldArea', value);
                }
                get filterFieldArea() {
                    return this._getOption('filterFieldArea');
                }
                set filterFieldArea(value) {
                    this._setOption('filterFieldArea', value);
                }
                get rowFieldArea() {
                    return this._getOption('rowFieldArea');
                }
                set rowFieldArea(value) {
                    this._setOption('rowFieldArea', value);
                }
                get collapseAll() {
                    return this._getOption('collapseAll');
                }
                set collapseAll(value) {
                    this._setOption('collapseAll', value);
                }
                get dataNotAvailable() {
                    return this._getOption('dataNotAvailable');
                }
                set dataNotAvailable(value) {
                    this._setOption('dataNotAvailable', value);
                }
                get expandAll() {
                    return this._getOption('expandAll');
                }
                set expandAll(value) {
                    this._setOption('expandAll', value);
                }
                get exportToExcel() {
                    return this._getOption('exportToExcel');
                }
                set exportToExcel(value) {
                    this._setOption('exportToExcel', value);
                }
                get grandTotal() {
                    return this._getOption('grandTotal');
                }
                set grandTotal(value) {
                    this._setOption('grandTotal', value);
                }
                get noData() {
                    return this._getOption('noData');
                }
                set noData(value) {
                    this._setOption('noData', value);
                }
                get removeAllSorting() {
                    return this._getOption('removeAllSorting');
                }
                set removeAllSorting(value) {
                    this._setOption('removeAllSorting', value);
                }
                get showFieldChooser() {
                    return this._getOption('showFieldChooser');
                }
                set showFieldChooser(value) {
                    this._setOption('showFieldChooser', value);
                }
                get sortColumnBySummary() {
                    return this._getOption('sortColumnBySummary');
                }
                set sortColumnBySummary(value) {
                    this._setOption('sortColumnBySummary', value);
                }
                get sortRowBySummary() {
                    return this._getOption('sortRowBySummary');
                }
                set sortRowBySummary(value) {
                    this._setOption('sortRowBySummary', value);
                }
                get total() {
                    return this._getOption('total');
                }
                set total(value) {
                    this._setOption('total', value);
                }
                get addRowToNode() {
                    return this._getOption('addRowToNode');
                }
                set addRowToNode(value) {
                    this._setOption('addRowToNode', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttHeaderFilterTexts, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoGanttHeaderFilterTexts, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoGanttHeaderFilterTexts, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoTextsComponent extends DxoGanttHeaderFilterTexts {
                get _optionPath() {
                    return 'texts';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTextsComponent, selector: "dxo-texts", inputs: { fix: "fix", leftPosition: "leftPosition", rightPosition: "rightPosition", unfix: "unfix", addRow: "addRow", cancelAllChanges: "cancelAllChanges", cancelRowChanges: "cancelRowChanges", confirmDeleteMessage: "confirmDeleteMessage", confirmDeleteTitle: "confirmDeleteTitle", deleteRow: "deleteRow", editRow: "editRow", saveAllChanges: "saveAllChanges", saveRowChanges: "saveRowChanges", undeleteRow: "undeleteRow", validationCancelChanges: "validationCancelChanges", exportAll: "exportAll", exportSelectedRows: "exportSelectedRows", exportTo: "exportTo", clearFilter: "clearFilter", createFilter: "createFilter", filterEnabledHint: "filterEnabledHint", groupByThisColumn: "groupByThisColumn", groupContinuedMessage: "groupContinuedMessage", groupContinuesMessage: "groupContinuesMessage", ungroup: "ungroup", ungroupAll: "ungroupAll", cancel: "cancel", emptyValue: "emptyValue", ok: "ok", avg: "avg", avgOtherColumn: "avgOtherColumn", count: "count", max: "max", maxOtherColumn: "maxOtherColumn", min: "min", minOtherColumn: "minOtherColumn", sum: "sum", sumOtherColumn: "sumOtherColumn", allFields: "allFields", columnFields: "columnFields", dataFields: "dataFields", filterFields: "filterFields", rowFields: "rowFields", columnFieldArea: "columnFieldArea", dataFieldArea: "dataFieldArea", filterFieldArea: "filterFieldArea", rowFieldArea: "rowFieldArea", collapseAll: "collapseAll", dataNotAvailable: "dataNotAvailable", expandAll: "expandAll", exportToExcel: "exportToExcel", grandTotal: "grandTotal", noData: "noData", removeAllSorting: "removeAllSorting", showFieldChooser: "showFieldChooser", sortColumnBySummary: "sortColumnBySummary", sortRowBySummary: "sortRowBySummary", total: "total", addRowToNode: "addRowToNode" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-texts', template: '', providers: [NestedOptionHost], inputs: [
                                    'fix',
                                    'leftPosition',
                                    'rightPosition',
                                    'unfix',
                                    'addRow',
                                    'cancelAllChanges',
                                    'cancelRowChanges',
                                    'confirmDeleteMessage',
                                    'confirmDeleteTitle',
                                    'deleteRow',
                                    'editRow',
                                    'saveAllChanges',
                                    'saveRowChanges',
                                    'undeleteRow',
                                    'validationCancelChanges',
                                    'exportAll',
                                    'exportSelectedRows',
                                    'exportTo',
                                    'clearFilter',
                                    'createFilter',
                                    'filterEnabledHint',
                                    'groupByThisColumn',
                                    'groupContinuedMessage',
                                    'groupContinuesMessage',
                                    'ungroup',
                                    'ungroupAll',
                                    'cancel',
                                    'emptyValue',
                                    'ok',
                                    'avg',
                                    'avgOtherColumn',
                                    'count',
                                    'max',
                                    'maxOtherColumn',
                                    'min',
                                    'minOtherColumn',
                                    'sum',
                                    'sumOtherColumn',
                                    'allFields',
                                    'columnFields',
                                    'dataFields',
                                    'filterFields',
                                    'rowFields',
                                    'columnFieldArea',
                                    'dataFieldArea',
                                    'filterFieldArea',
                                    'rowFieldArea',
                                    'collapseAll',
                                    'dataNotAvailable',
                                    'expandAll',
                                    'exportToExcel',
                                    'grandTotal',
                                    'noData',
                                    'removeAllSorting',
                                    'showFieldChooser',
                                    'sortColumnBySummary',
                                    'sortRowBySummary',
                                    'total',
                                    'addRowToNode'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoTextsModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsModule, declarations: [DxoTextsComponent], exports: [DxoTextsComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsModule });
            } exports("fy", DxoTextsModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTextsModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTextsComponent
                                ],
                                exports: [
                                    DxoTextsComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTickIntervalComponent extends NestedOption {
                get days() {
                    return this._getOption('days');
                }
                set days(value) {
                    this._setOption('days', value);
                }
                get hours() {
                    return this._getOption('hours');
                }
                set hours(value) {
                    this._setOption('hours', value);
                }
                get milliseconds() {
                    return this._getOption('milliseconds');
                }
                set milliseconds(value) {
                    this._setOption('milliseconds', value);
                }
                get minutes() {
                    return this._getOption('minutes');
                }
                set minutes(value) {
                    this._setOption('minutes', value);
                }
                get months() {
                    return this._getOption('months');
                }
                set months(value) {
                    this._setOption('months', value);
                }
                get quarters() {
                    return this._getOption('quarters');
                }
                set quarters(value) {
                    this._setOption('quarters', value);
                }
                get seconds() {
                    return this._getOption('seconds');
                }
                set seconds(value) {
                    this._setOption('seconds', value);
                }
                get weeks() {
                    return this._getOption('weeks');
                }
                set weeks(value) {
                    this._setOption('weeks', value);
                }
                get years() {
                    return this._getOption('years');
                }
                set years(value) {
                    this._setOption('years', value);
                }
                get _optionPath() {
                    return 'tickInterval';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTickIntervalComponent, selector: "dxo-tick-interval", inputs: { days: "days", hours: "hours", milliseconds: "milliseconds", minutes: "minutes", months: "months", quarters: "quarters", seconds: "seconds", weeks: "weeks", years: "years" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-tick-interval', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { days: [{
                            type: Input
                        }], hours: [{
                            type: Input
                        }], milliseconds: [{
                            type: Input
                        }], minutes: [{
                            type: Input
                        }], months: [{
                            type: Input
                        }], quarters: [{
                            type: Input
                        }], seconds: [{
                            type: Input
                        }], weeks: [{
                            type: Input
                        }], years: [{
                            type: Input
                        }] } });
            class DxoTickIntervalModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalModule, declarations: [DxoTickIntervalComponent], exports: [DxoTickIntervalComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalModule });
            } exports("dc", DxoTickIntervalModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickIntervalModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTickIntervalComponent
                                ],
                                exports: [
                                    DxoTickIntervalComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTickComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get length() {
                    return this._getOption('length');
                }
                set length(value) {
                    this._setOption('length', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get shift() {
                    return this._getOption('shift');
                }
                set shift(value) {
                    this._setOption('shift', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'tick';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTickComponent, selector: "dxo-tick", inputs: { color: "color", length: "length", opacity: "opacity", shift: "shift", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-tick', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], length: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], shift: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoTickModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTickModule, declarations: [DxoTickComponent], exports: [DxoTickComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickModule });
            } exports("db", DxoTickModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTickModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTickComponent
                                ],
                                exports: [
                                    DxoTickComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTileComponent extends NestedOption {
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get hoverStyle() {
                    return this._getOption('hoverStyle');
                }
                set hoverStyle(value) {
                    this._setOption('hoverStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get selectionStyle() {
                    return this._getOption('selectionStyle');
                }
                set selectionStyle(value) {
                    this._setOption('selectionStyle', value);
                }
                get _optionPath() {
                    return 'tile';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTileComponent, selector: "dxo-tile", inputs: { border: "border", color: "color", hoverStyle: "hoverStyle", label: "label", selectionStyle: "selectionStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-tile', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], hoverStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], selectionStyle: [{
                            type: Input
                        }] } });
            class DxoTileModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTileModule, declarations: [DxoTileComponent], exports: [DxoTileComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileModule });
            } exports("h8", DxoTileModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTileModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTileComponent
                                ],
                                exports: [
                                    DxoTileComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTitleComponent extends NestedOption {
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get horizontalAlignment() {
                    return this._getOption('horizontalAlignment');
                }
                set horizontalAlignment(value) {
                    this._setOption('horizontalAlignment', value);
                }
                get margin() {
                    return this._getOption('margin');
                }
                set margin(value) {
                    this._setOption('margin', value);
                }
                get placeholderSize() {
                    return this._getOption('placeholderSize');
                }
                set placeholderSize(value) {
                    this._setOption('placeholderSize', value);
                }
                get subtitle() {
                    return this._getOption('subtitle');
                }
                set subtitle(value) {
                    this._setOption('subtitle', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get verticalAlignment() {
                    return this._getOption('verticalAlignment');
                }
                set verticalAlignment(value) {
                    this._setOption('verticalAlignment', value);
                }
                get textOverflow() {
                    return this._getOption('textOverflow');
                }
                set textOverflow(value) {
                    this._setOption('textOverflow', value);
                }
                get wordWrap() {
                    return this._getOption('wordWrap');
                }
                set wordWrap(value) {
                    this._setOption('wordWrap', value);
                }
                get alignment() {
                    return this._getOption('alignment');
                }
                set alignment(value) {
                    this._setOption('alignment', value);
                }
                get _optionPath() {
                    return 'title';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTitleComponent, selector: "dxo-title", inputs: { font: "font", horizontalAlignment: "horizontalAlignment", margin: "margin", placeholderSize: "placeholderSize", subtitle: "subtitle", text: "text", verticalAlignment: "verticalAlignment", textOverflow: "textOverflow", wordWrap: "wordWrap", alignment: "alignment" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-title', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { font: [{
                            type: Input
                        }], horizontalAlignment: [{
                            type: Input
                        }], margin: [{
                            type: Input
                        }], placeholderSize: [{
                            type: Input
                        }], subtitle: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], verticalAlignment: [{
                            type: Input
                        }], textOverflow: [{
                            type: Input
                        }], wordWrap: [{
                            type: Input
                        }], alignment: [{
                            type: Input
                        }] } });
            class DxoTitleModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleModule, declarations: [DxoTitleComponent], exports: [DxoTitleComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleModule });
            } exports("cG", DxoTitleModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTitleModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTitleComponent
                                ],
                                exports: [
                                    DxoTitleComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoToComponent extends DxoAnimationState {
                get _optionPath() {
                    return 'to';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoToComponent, selector: "dxo-to", inputs: { left: "left", opacity: "opacity", position: "position", scale: "scale", top: "top" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-to', template: '', providers: [NestedOptionHost], inputs: [
                                    'left',
                                    'opacity',
                                    'position',
                                    'scale',
                                    'top'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoToModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoToModule, declarations: [DxoToComponent], exports: [DxoToComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToModule });
            } exports("c3", DxoToModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoToComponent
                                ],
                                exports: [
                                    DxoToComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoDataGridToolbar extends NestedOption {
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get fileSelectionItems() {
                    return this._getOption('fileSelectionItems');
                }
                set fileSelectionItems(value) {
                    this._setOption('fileSelectionItems', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get multiline() {
                    return this._getOption('multiline');
                }
                set multiline(value) {
                    this._setOption('multiline', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataGridToolbar, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoDataGridToolbar, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoDataGridToolbar, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoToolbarComponent extends DxoDataGridToolbar {
                get _optionPath() {
                    return 'toolbar';
                }
                get itemsChildren() {
                    return this._getOption('items');
                }
                set itemsChildren(value) {
                    this.setChildren('items', value);
                }
                get fileSelectionItemsChildren() {
                    return this._getOption('fileSelectionItems');
                }
                set fileSelectionItemsChildren(value) {
                    this.setChildren('fileSelectionItems', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoToolbarComponent, selector: "dxo-toolbar", inputs: { disabled: "disabled", items: "items", visible: "visible", fileSelectionItems: "fileSelectionItems", container: "container", multiline: "multiline" }, providers: [NestedOptionHost], queries: [{ propertyName: "itemsChildren", predicate: i0.forwardRef(() => DxiItemComponent) }, { propertyName: "fileSelectionItemsChildren", predicate: i0.forwardRef(() => DxiFileSelectionItemComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-toolbar', template: '', providers: [NestedOptionHost], inputs: [
                                    'disabled',
                                    'items',
                                    'visible',
                                    'fileSelectionItems',
                                    'container',
                                    'multiline'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { itemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiItemComponent)]
                        }], fileSelectionItemsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiFileSelectionItemComponent)]
                        }] } });
            class DxoToolbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarModule, declarations: [DxoToolbarComponent], exports: [DxoToolbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarModule });
            } exports("f9", DxoToolbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoToolbarComponent
                                ],
                                exports: [
                                    DxoToolbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoToolboxComponent extends NestedOption {
                get groups() {
                    return this._getOption('groups');
                }
                set groups(value) {
                    this._setOption('groups', value);
                }
                get shapeIconsPerRow() {
                    return this._getOption('shapeIconsPerRow');
                }
                set shapeIconsPerRow(value) {
                    this._setOption('shapeIconsPerRow', value);
                }
                get showSearch() {
                    return this._getOption('showSearch');
                }
                set showSearch(value) {
                    this._setOption('showSearch', value);
                }
                get visibility() {
                    return this._getOption('visibility');
                }
                set visibility(value) {
                    this._setOption('visibility', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'toolbox';
                }
                get groupsChildren() {
                    return this._getOption('groups');
                }
                set groupsChildren(value) {
                    this.setChildren('groups', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoToolboxComponent, selector: "dxo-toolbox", inputs: { groups: "groups", shapeIconsPerRow: "shapeIconsPerRow", showSearch: "showSearch", visibility: "visibility", width: "width" }, providers: [NestedOptionHost], queries: [{ propertyName: "groupsChildren", predicate: i0.forwardRef(() => DxiGroupComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-toolbox', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { groups: [{
                            type: Input
                        }], shapeIconsPerRow: [{
                            type: Input
                        }], showSearch: [{
                            type: Input
                        }], visibility: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], groupsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiGroupComponent)]
                        }] } });
            class DxoToolboxModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxModule, declarations: [DxoToolboxComponent], exports: [DxoToolboxComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxModule });
            } exports("eX", DxoToolboxModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoToolboxModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoToolboxComponent
                                ],
                                exports: [
                                    DxoToolboxComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoTooltipComponent extends NestedOption {
                get arrowLength() {
                    return this._getOption('arrowLength');
                }
                set arrowLength(value) {
                    this._setOption('arrowLength', value);
                }
                get border() {
                    return this._getOption('border');
                }
                set border(value) {
                    this._setOption('border', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get container() {
                    return this._getOption('container');
                }
                set container(value) {
                    this._setOption('container', value);
                }
                get contentTemplate() {
                    return this._getOption('contentTemplate');
                }
                set contentTemplate(value) {
                    this._setOption('contentTemplate', value);
                }
                get cornerRadius() {
                    return this._getOption('cornerRadius');
                }
                set cornerRadius(value) {
                    this._setOption('cornerRadius', value);
                }
                get customizeTooltip() {
                    return this._getOption('customizeTooltip');
                }
                set customizeTooltip(value) {
                    this._setOption('customizeTooltip', value);
                }
                get enabled() {
                    return this._getOption('enabled');
                }
                set enabled(value) {
                    this._setOption('enabled', value);
                }
                get font() {
                    return this._getOption('font');
                }
                set font(value) {
                    this._setOption('font', value);
                }
                get format() {
                    return this._getOption('format');
                }
                set format(value) {
                    this._setOption('format', value);
                }
                get interactive() {
                    return this._getOption('interactive');
                }
                set interactive(value) {
                    this._setOption('interactive', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get paddingLeftRight() {
                    return this._getOption('paddingLeftRight');
                }
                set paddingLeftRight(value) {
                    this._setOption('paddingLeftRight', value);
                }
                get paddingTopBottom() {
                    return this._getOption('paddingTopBottom');
                }
                set paddingTopBottom(value) {
                    this._setOption('paddingTopBottom', value);
                }
                get shadow() {
                    return this._getOption('shadow');
                }
                set shadow(value) {
                    this._setOption('shadow', value);
                }
                get zIndex() {
                    return this._getOption('zIndex');
                }
                set zIndex(value) {
                    this._setOption('zIndex', value);
                }
                get argumentFormat() {
                    return this._getOption('argumentFormat');
                }
                set argumentFormat(value) {
                    this._setOption('argumentFormat', value);
                }
                get location() {
                    return this._getOption('location');
                }
                set location(value) {
                    this._setOption('location', value);
                }
                get shared() {
                    return this._getOption('shared');
                }
                set shared(value) {
                    this._setOption('shared', value);
                }
                get isShown() {
                    return this._getOption('isShown');
                }
                set isShown(value) {
                    this._setOption('isShown', value);
                }
                get text() {
                    return this._getOption('text');
                }
                set text(value) {
                    this._setOption('text', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get showMode() {
                    return this._getOption('showMode');
                }
                set showMode(value) {
                    this._setOption('showMode', value);
                }
                get customizeLinkTooltip() {
                    return this._getOption('customizeLinkTooltip');
                }
                set customizeLinkTooltip(value) {
                    this._setOption('customizeLinkTooltip', value);
                }
                get customizeNodeTooltip() {
                    return this._getOption('customizeNodeTooltip');
                }
                set customizeNodeTooltip(value) {
                    this._setOption('customizeNodeTooltip', value);
                }
                get linkTooltipTemplate() {
                    return this._getOption('linkTooltipTemplate');
                }
                set linkTooltipTemplate(value) {
                    this._setOption('linkTooltipTemplate', value);
                }
                get nodeTooltipTemplate() {
                    return this._getOption('nodeTooltipTemplate');
                }
                set nodeTooltipTemplate(value) {
                    this._setOption('nodeTooltipTemplate', value);
                }
                get _optionPath() {
                    return 'tooltip';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoTooltipComponent, selector: "dxo-tooltip", inputs: { arrowLength: "arrowLength", border: "border", color: "color", container: "container", contentTemplate: "contentTemplate", cornerRadius: "cornerRadius", customizeTooltip: "customizeTooltip", enabled: "enabled", font: "font", format: "format", interactive: "interactive", opacity: "opacity", paddingLeftRight: "paddingLeftRight", paddingTopBottom: "paddingTopBottom", shadow: "shadow", zIndex: "zIndex", argumentFormat: "argumentFormat", location: "location", shared: "shared", isShown: "isShown", text: "text", position: "position", showMode: "showMode", customizeLinkTooltip: "customizeLinkTooltip", customizeNodeTooltip: "customizeNodeTooltip", linkTooltipTemplate: "linkTooltipTemplate", nodeTooltipTemplate: "nodeTooltipTemplate" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-tooltip', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { arrowLength: [{
                            type: Input
                        }], border: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], container: [{
                            type: Input
                        }], contentTemplate: [{
                            type: Input
                        }], cornerRadius: [{
                            type: Input
                        }], customizeTooltip: [{
                            type: Input
                        }], enabled: [{
                            type: Input
                        }], font: [{
                            type: Input
                        }], format: [{
                            type: Input
                        }], interactive: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], paddingLeftRight: [{
                            type: Input
                        }], paddingTopBottom: [{
                            type: Input
                        }], shadow: [{
                            type: Input
                        }], zIndex: [{
                            type: Input
                        }], argumentFormat: [{
                            type: Input
                        }], location: [{
                            type: Input
                        }], shared: [{
                            type: Input
                        }], isShown: [{
                            type: Input
                        }], text: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], showMode: [{
                            type: Input
                        }], customizeLinkTooltip: [{
                            type: Input
                        }], customizeNodeTooltip: [{
                            type: Input
                        }], linkTooltipTemplate: [{
                            type: Input
                        }], nodeTooltipTemplate: [{
                            type: Input
                        }] } });
            class DxoTooltipModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipModule, declarations: [DxoTooltipComponent], exports: [DxoTooltipComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipModule });
            } exports("cK", DxoTooltipModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoTooltipModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoTooltipComponent
                                ],
                                exports: [
                                    DxoTooltipComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoUploadComponent extends NestedOption {
                get chunkSize() {
                    return this._getOption('chunkSize');
                }
                set chunkSize(value) {
                    this._setOption('chunkSize', value);
                }
                get maxFileSize() {
                    return this._getOption('maxFileSize');
                }
                set maxFileSize(value) {
                    this._setOption('maxFileSize', value);
                }
                get _optionPath() {
                    return 'upload';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoUploadComponent, selector: "dxo-upload", inputs: { chunkSize: "chunkSize", maxFileSize: "maxFileSize" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-upload', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { chunkSize: [{
                            type: Input
                        }], maxFileSize: [{
                            type: Input
                        }] } });
            class DxoUploadModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadModule, declarations: [DxoUploadComponent], exports: [DxoUploadComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadModule });
            } exports("fb", DxoUploadModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUploadModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoUploadComponent
                                ],
                                exports: [
                                    DxoUploadComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoUrlComponent extends NestedOption {
                get rangeMaxPoint() {
                    return this._getOption('rangeMaxPoint');
                }
                set rangeMaxPoint(value) {
                    this._setOption('rangeMaxPoint', value);
                }
                get rangeMinPoint() {
                    return this._getOption('rangeMinPoint');
                }
                set rangeMinPoint(value) {
                    this._setOption('rangeMinPoint', value);
                }
                get _optionPath() {
                    return 'url';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoUrlComponent, selector: "dxo-url", inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-url', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { rangeMaxPoint: [{
                            type: Input
                        }], rangeMinPoint: [{
                            type: Input
                        }] } });
            class DxoUrlModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlModule, declarations: [DxoUrlComponent], exports: [DxoUrlComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlModule });
            } exports("dq", DxoUrlModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoUrlModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoUrlComponent
                                ],
                                exports: [
                                    DxoUrlComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoValidationComponent extends NestedOption {
                get autoUpdateParentTasks() {
                    return this._getOption('autoUpdateParentTasks');
                }
                set autoUpdateParentTasks(value) {
                    this._setOption('autoUpdateParentTasks', value);
                }
                get enablePredecessorGap() {
                    return this._getOption('enablePredecessorGap');
                }
                set enablePredecessorGap(value) {
                    this._setOption('enablePredecessorGap', value);
                }
                get validateDependencies() {
                    return this._getOption('validateDependencies');
                }
                set validateDependencies(value) {
                    this._setOption('validateDependencies', value);
                }
                get _optionPath() {
                    return 'validation';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValidationComponent, selector: "dxo-validation", inputs: { autoUpdateParentTasks: "autoUpdateParentTasks", enablePredecessorGap: "enablePredecessorGap", validateDependencies: "validateDependencies" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-validation', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { autoUpdateParentTasks: [{
                            type: Input
                        }], enablePredecessorGap: [{
                            type: Input
                        }], validateDependencies: [{
                            type: Input
                        }] } });
            class DxoValidationModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationModule, declarations: [DxoValidationComponent], exports: [DxoValidationComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationModule });
            } exports("fF", DxoValidationModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValidationModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValidationComponent
                                ],
                                exports: [
                                    DxoValidationComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiValueAxisComponent extends CollectionNestedOption {
                get aggregatedPointsPosition() {
                    return this._getOption('aggregatedPointsPosition');
                }
                set aggregatedPointsPosition(value) {
                    this._setOption('aggregatedPointsPosition', value);
                }
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get autoBreaksEnabled() {
                    return this._getOption('autoBreaksEnabled');
                }
                set autoBreaksEnabled(value) {
                    this._setOption('autoBreaksEnabled', value);
                }
                get axisDivisionFactor() {
                    return this._getOption('axisDivisionFactor');
                }
                set axisDivisionFactor(value) {
                    this._setOption('axisDivisionFactor', value);
                }
                get breaks() {
                    return this._getOption('breaks');
                }
                set breaks(value) {
                    this._setOption('breaks', value);
                }
                get breakStyle() {
                    return this._getOption('breakStyle');
                }
                set breakStyle(value) {
                    this._setOption('breakStyle', value);
                }
                get categories() {
                    return this._getOption('categories');
                }
                set categories(value) {
                    this._setOption('categories', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get constantLines() {
                    return this._getOption('constantLines');
                }
                set constantLines(value) {
                    this._setOption('constantLines', value);
                }
                get constantLineStyle() {
                    return this._getOption('constantLineStyle');
                }
                set constantLineStyle(value) {
                    this._setOption('constantLineStyle', value);
                }
                get customPosition() {
                    return this._getOption('customPosition');
                }
                set customPosition(value) {
                    this._setOption('customPosition', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get grid() {
                    return this._getOption('grid');
                }
                set grid(value) {
                    this._setOption('grid', value);
                }
                get inverted() {
                    return this._getOption('inverted');
                }
                set inverted(value) {
                    this._setOption('inverted', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get linearThreshold() {
                    return this._getOption('linearThreshold');
                }
                set linearThreshold(value) {
                    this._setOption('linearThreshold', value);
                }
                get logarithmBase() {
                    return this._getOption('logarithmBase');
                }
                set logarithmBase(value) {
                    this._setOption('logarithmBase', value);
                }
                get maxAutoBreakCount() {
                    return this._getOption('maxAutoBreakCount');
                }
                set maxAutoBreakCount(value) {
                    this._setOption('maxAutoBreakCount', value);
                }
                get maxValueMargin() {
                    return this._getOption('maxValueMargin');
                }
                set maxValueMargin(value) {
                    this._setOption('maxValueMargin', value);
                }
                get minorGrid() {
                    return this._getOption('minorGrid');
                }
                set minorGrid(value) {
                    this._setOption('minorGrid', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minorTickCount() {
                    return this._getOption('minorTickCount');
                }
                set minorTickCount(value) {
                    this._setOption('minorTickCount', value);
                }
                get minorTickInterval() {
                    return this._getOption('minorTickInterval');
                }
                set minorTickInterval(value) {
                    this._setOption('minorTickInterval', value);
                }
                get minValueMargin() {
                    return this._getOption('minValueMargin');
                }
                set minValueMargin(value) {
                    this._setOption('minValueMargin', value);
                }
                get minVisualRangeLength() {
                    return this._getOption('minVisualRangeLength');
                }
                set minVisualRangeLength(value) {
                    this._setOption('minVisualRangeLength', value);
                }
                get multipleAxesSpacing() {
                    return this._getOption('multipleAxesSpacing');
                }
                set multipleAxesSpacing(value) {
                    this._setOption('multipleAxesSpacing', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get pane() {
                    return this._getOption('pane');
                }
                set pane(value) {
                    this._setOption('pane', value);
                }
                get placeholderSize() {
                    return this._getOption('placeholderSize');
                }
                set placeholderSize(value) {
                    this._setOption('placeholderSize', value);
                }
                get position() {
                    return this._getOption('position');
                }
                set position(value) {
                    this._setOption('position', value);
                }
                get showZero() {
                    return this._getOption('showZero');
                }
                set showZero(value) {
                    this._setOption('showZero', value);
                }
                get strips() {
                    return this._getOption('strips');
                }
                set strips(value) {
                    this._setOption('strips', value);
                }
                get stripStyle() {
                    return this._getOption('stripStyle');
                }
                set stripStyle(value) {
                    this._setOption('stripStyle', value);
                }
                get synchronizedValue() {
                    return this._getOption('synchronizedValue');
                }
                set synchronizedValue(value) {
                    this._setOption('synchronizedValue', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get tickInterval() {
                    return this._getOption('tickInterval');
                }
                set tickInterval(value) {
                    this._setOption('tickInterval', value);
                }
                get title() {
                    return this._getOption('title');
                }
                set title(value) {
                    this._setOption('title', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueMarginsEnabled() {
                    return this._getOption('valueMarginsEnabled');
                }
                set valueMarginsEnabled(value) {
                    this._setOption('valueMarginsEnabled', value);
                }
                get valueType() {
                    return this._getOption('valueType');
                }
                set valueType(value) {
                    this._setOption('valueType', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visualRange() {
                    return this._getOption('visualRange');
                }
                set visualRange(value) {
                    this._setOption('visualRange', value);
                }
                get visualRangeUpdateMode() {
                    return this._getOption('visualRangeUpdateMode');
                }
                set visualRangeUpdateMode(value) {
                    this._setOption('visualRangeUpdateMode', value);
                }
                get wholeRange() {
                    return this._getOption('wholeRange');
                }
                set wholeRange(value) {
                    this._setOption('wholeRange', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                categoriesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visualRangeChange;
                get _optionPath() {
                    return 'valueAxis';
                }
                get breaksChildren() {
                    return this._getOption('breaks');
                }
                set breaksChildren(value) {
                    this.setChildren('breaks', value);
                }
                get constantLinesChildren() {
                    return this._getOption('constantLines');
                }
                set constantLinesChildren(value) {
                    this.setChildren('constantLines', value);
                }
                get stripsChildren() {
                    return this._getOption('strips');
                }
                set stripsChildren(value) {
                    this.setChildren('strips', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'categoriesChange' },
                        { emit: 'visualRangeChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiValueAxisComponent, selector: "dxi-value-axis", inputs: { aggregatedPointsPosition: "aggregatedPointsPosition", allowDecimals: "allowDecimals", autoBreaksEnabled: "autoBreaksEnabled", axisDivisionFactor: "axisDivisionFactor", breaks: "breaks", breakStyle: "breakStyle", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", customPosition: "customPosition", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxAutoBreakCount: "maxAutoBreakCount", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", multipleAxesSpacing: "multipleAxesSpacing", name: "name", offset: "offset", opacity: "opacity", pane: "pane", placeholderSize: "placeholderSize", position: "position", showZero: "showZero", strips: "strips", stripStyle: "stripStyle", synchronizedValue: "synchronizedValue", tick: "tick", tickInterval: "tickInterval", title: "title", type: "type", valueMarginsEnabled: "valueMarginsEnabled", valueType: "valueType", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width" }, outputs: { categoriesChange: "categoriesChange", visualRangeChange: "visualRangeChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "breaksChildren", predicate: i0.forwardRef(() => DxiBreakComponent) }, { propertyName: "constantLinesChildren", predicate: i0.forwardRef(() => DxiConstantLineComponent) }, { propertyName: "stripsChildren", predicate: i0.forwardRef(() => DxiStripComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("cW", DxiValueAxisComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-value-axis', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { aggregatedPointsPosition: [{
                            type: Input
                        }], allowDecimals: [{
                            type: Input
                        }], autoBreaksEnabled: [{
                            type: Input
                        }], axisDivisionFactor: [{
                            type: Input
                        }], breaks: [{
                            type: Input
                        }], breakStyle: [{
                            type: Input
                        }], categories: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], constantLines: [{
                            type: Input
                        }], constantLineStyle: [{
                            type: Input
                        }], customPosition: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], grid: [{
                            type: Input
                        }], inverted: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], linearThreshold: [{
                            type: Input
                        }], logarithmBase: [{
                            type: Input
                        }], maxAutoBreakCount: [{
                            type: Input
                        }], maxValueMargin: [{
                            type: Input
                        }], minorGrid: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minorTickCount: [{
                            type: Input
                        }], minorTickInterval: [{
                            type: Input
                        }], minValueMargin: [{
                            type: Input
                        }], minVisualRangeLength: [{
                            type: Input
                        }], multipleAxesSpacing: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], pane: [{
                            type: Input
                        }], placeholderSize: [{
                            type: Input
                        }], position: [{
                            type: Input
                        }], showZero: [{
                            type: Input
                        }], strips: [{
                            type: Input
                        }], stripStyle: [{
                            type: Input
                        }], synchronizedValue: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], tickInterval: [{
                            type: Input
                        }], title: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], valueMarginsEnabled: [{
                            type: Input
                        }], valueType: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], visualRange: [{
                            type: Input
                        }], visualRangeUpdateMode: [{
                            type: Input
                        }], wholeRange: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], categoriesChange: [{
                            type: Output
                        }], visualRangeChange: [{
                            type: Output
                        }], breaksChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiBreakComponent)]
                        }], constantLinesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiConstantLineComponent)]
                        }], stripsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiStripComponent)]
                        }] } });
            class DxiValueAxisModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisModule, declarations: [DxiValueAxisComponent], exports: [DxiValueAxisComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisModule });
            } exports("d$", DxiValueAxisModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiValueAxisModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiValueAxisComponent
                                ],
                                exports: [
                                    DxiValueAxisComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoValueAxisComponent extends NestedOption {
                get allowDecimals() {
                    return this._getOption('allowDecimals');
                }
                set allowDecimals(value) {
                    this._setOption('allowDecimals', value);
                }
                get axisDivisionFactor() {
                    return this._getOption('axisDivisionFactor');
                }
                set axisDivisionFactor(value) {
                    this._setOption('axisDivisionFactor', value);
                }
                get categories() {
                    return this._getOption('categories');
                }
                set categories(value) {
                    this._setOption('categories', value);
                }
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get constantLines() {
                    return this._getOption('constantLines');
                }
                set constantLines(value) {
                    this._setOption('constantLines', value);
                }
                get constantLineStyle() {
                    return this._getOption('constantLineStyle');
                }
                set constantLineStyle(value) {
                    this._setOption('constantLineStyle', value);
                }
                get discreteAxisDivisionMode() {
                    return this._getOption('discreteAxisDivisionMode');
                }
                set discreteAxisDivisionMode(value) {
                    this._setOption('discreteAxisDivisionMode', value);
                }
                get endOnTick() {
                    return this._getOption('endOnTick');
                }
                set endOnTick(value) {
                    this._setOption('endOnTick', value);
                }
                get grid() {
                    return this._getOption('grid');
                }
                set grid(value) {
                    this._setOption('grid', value);
                }
                get inverted() {
                    return this._getOption('inverted');
                }
                set inverted(value) {
                    this._setOption('inverted', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get linearThreshold() {
                    return this._getOption('linearThreshold');
                }
                set linearThreshold(value) {
                    this._setOption('linearThreshold', value);
                }
                get logarithmBase() {
                    return this._getOption('logarithmBase');
                }
                set logarithmBase(value) {
                    this._setOption('logarithmBase', value);
                }
                get maxValueMargin() {
                    return this._getOption('maxValueMargin');
                }
                set maxValueMargin(value) {
                    this._setOption('maxValueMargin', value);
                }
                get minorGrid() {
                    return this._getOption('minorGrid');
                }
                set minorGrid(value) {
                    this._setOption('minorGrid', value);
                }
                get minorTick() {
                    return this._getOption('minorTick');
                }
                set minorTick(value) {
                    this._setOption('minorTick', value);
                }
                get minorTickCount() {
                    return this._getOption('minorTickCount');
                }
                set minorTickCount(value) {
                    this._setOption('minorTickCount', value);
                }
                get minorTickInterval() {
                    return this._getOption('minorTickInterval');
                }
                set minorTickInterval(value) {
                    this._setOption('minorTickInterval', value);
                }
                get minValueMargin() {
                    return this._getOption('minValueMargin');
                }
                set minValueMargin(value) {
                    this._setOption('minValueMargin', value);
                }
                get minVisualRangeLength() {
                    return this._getOption('minVisualRangeLength');
                }
                set minVisualRangeLength(value) {
                    this._setOption('minVisualRangeLength', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get showZero() {
                    return this._getOption('showZero');
                }
                set showZero(value) {
                    this._setOption('showZero', value);
                }
                get strips() {
                    return this._getOption('strips');
                }
                set strips(value) {
                    this._setOption('strips', value);
                }
                get stripStyle() {
                    return this._getOption('stripStyle');
                }
                set stripStyle(value) {
                    this._setOption('stripStyle', value);
                }
                get tick() {
                    return this._getOption('tick');
                }
                set tick(value) {
                    this._setOption('tick', value);
                }
                get tickInterval() {
                    return this._getOption('tickInterval');
                }
                set tickInterval(value) {
                    this._setOption('tickInterval', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get valueMarginsEnabled() {
                    return this._getOption('valueMarginsEnabled');
                }
                set valueMarginsEnabled(value) {
                    this._setOption('valueMarginsEnabled', value);
                }
                get valueType() {
                    return this._getOption('valueType');
                }
                set valueType(value) {
                    this._setOption('valueType', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get visualRange() {
                    return this._getOption('visualRange');
                }
                set visualRange(value) {
                    this._setOption('visualRange', value);
                }
                get visualRangeUpdateMode() {
                    return this._getOption('visualRangeUpdateMode');
                }
                set visualRangeUpdateMode(value) {
                    this._setOption('visualRangeUpdateMode', value);
                }
                get wholeRange() {
                    return this._getOption('wholeRange');
                }
                set wholeRange(value) {
                    this._setOption('wholeRange', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get max() {
                    return this._getOption('max');
                }
                set max(value) {
                    this._setOption('max', value);
                }
                get min() {
                    return this._getOption('min');
                }
                set min(value) {
                    this._setOption('min', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visualRangeChange;
                get _optionPath() {
                    return 'valueAxis';
                }
                get constantLinesChildren() {
                    return this._getOption('constantLines');
                }
                set constantLinesChildren(value) {
                    this.setChildren('constantLines', value);
                }
                get stripsChildren() {
                    return this._getOption('strips');
                }
                set stripsChildren(value) {
                    this.setChildren('strips', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'visualRangeChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValueAxisComponent, selector: "dxo-value-axis", inputs: { allowDecimals: "allowDecimals", axisDivisionFactor: "axisDivisionFactor", categories: "categories", color: "color", constantLines: "constantLines", constantLineStyle: "constantLineStyle", discreteAxisDivisionMode: "discreteAxisDivisionMode", endOnTick: "endOnTick", grid: "grid", inverted: "inverted", label: "label", linearThreshold: "linearThreshold", logarithmBase: "logarithmBase", maxValueMargin: "maxValueMargin", minorGrid: "minorGrid", minorTick: "minorTick", minorTickCount: "minorTickCount", minorTickInterval: "minorTickInterval", minValueMargin: "minValueMargin", minVisualRangeLength: "minVisualRangeLength", opacity: "opacity", showZero: "showZero", strips: "strips", stripStyle: "stripStyle", tick: "tick", tickInterval: "tickInterval", type: "type", valueMarginsEnabled: "valueMarginsEnabled", valueType: "valueType", visible: "visible", visualRange: "visualRange", visualRangeUpdateMode: "visualRangeUpdateMode", wholeRange: "wholeRange", width: "width", max: "max", min: "min" }, outputs: { visualRangeChange: "visualRangeChange" }, providers: [NestedOptionHost], queries: [{ propertyName: "constantLinesChildren", predicate: i0.forwardRef(() => DxiConstantLineComponent) }, { propertyName: "stripsChildren", predicate: i0.forwardRef(() => DxiStripComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-value-axis', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowDecimals: [{
                            type: Input
                        }], axisDivisionFactor: [{
                            type: Input
                        }], categories: [{
                            type: Input
                        }], color: [{
                            type: Input
                        }], constantLines: [{
                            type: Input
                        }], constantLineStyle: [{
                            type: Input
                        }], discreteAxisDivisionMode: [{
                            type: Input
                        }], endOnTick: [{
                            type: Input
                        }], grid: [{
                            type: Input
                        }], inverted: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], linearThreshold: [{
                            type: Input
                        }], logarithmBase: [{
                            type: Input
                        }], maxValueMargin: [{
                            type: Input
                        }], minorGrid: [{
                            type: Input
                        }], minorTick: [{
                            type: Input
                        }], minorTickCount: [{
                            type: Input
                        }], minorTickInterval: [{
                            type: Input
                        }], minValueMargin: [{
                            type: Input
                        }], minVisualRangeLength: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], showZero: [{
                            type: Input
                        }], strips: [{
                            type: Input
                        }], stripStyle: [{
                            type: Input
                        }], tick: [{
                            type: Input
                        }], tickInterval: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], valueMarginsEnabled: [{
                            type: Input
                        }], valueType: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], visualRange: [{
                            type: Input
                        }], visualRangeUpdateMode: [{
                            type: Input
                        }], wholeRange: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], max: [{
                            type: Input
                        }], min: [{
                            type: Input
                        }], visualRangeChange: [{
                            type: Output
                        }], constantLinesChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiConstantLineComponent)]
                        }], stripsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiStripComponent)]
                        }] } });
            class DxoValueAxisModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisModule, declarations: [DxoValueAxisComponent], exports: [DxoValueAxisComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisModule });
            } exports("gi", DxoValueAxisModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueAxisModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValueAxisComponent
                                ],
                                exports: [
                                    DxoValueAxisComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoValueErrorBarComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get displayMode() {
                    return this._getOption('displayMode');
                }
                set displayMode(value) {
                    this._setOption('displayMode', value);
                }
                get edgeLength() {
                    return this._getOption('edgeLength');
                }
                set edgeLength(value) {
                    this._setOption('edgeLength', value);
                }
                get highValueField() {
                    return this._getOption('highValueField');
                }
                set highValueField(value) {
                    this._setOption('highValueField', value);
                }
                get lineWidth() {
                    return this._getOption('lineWidth');
                }
                set lineWidth(value) {
                    this._setOption('lineWidth', value);
                }
                get lowValueField() {
                    return this._getOption('lowValueField');
                }
                set lowValueField(value) {
                    this._setOption('lowValueField', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                get _optionPath() {
                    return 'valueErrorBar';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValueErrorBarComponent, selector: "dxo-value-error-bar", inputs: { color: "color", displayMode: "displayMode", edgeLength: "edgeLength", highValueField: "highValueField", lineWidth: "lineWidth", lowValueField: "lowValueField", opacity: "opacity", type: "type", value: "value" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-value-error-bar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], displayMode: [{
                            type: Input
                        }], edgeLength: [{
                            type: Input
                        }], highValueField: [{
                            type: Input
                        }], lineWidth: [{
                            type: Input
                        }], lowValueField: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }], value: [{
                            type: Input
                        }] } });
            class DxoValueErrorBarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarModule, declarations: [DxoValueErrorBarComponent], exports: [DxoValueErrorBarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarModule });
            } exports("du", DxoValueErrorBarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueErrorBarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValueErrorBarComponent
                                ],
                                exports: [
                                    DxoValueErrorBarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoValueFormatComponent extends DxoFormat {
                get _optionPath() {
                    return 'valueFormat';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValueFormatComponent, selector: "dxo-value-format", inputs: { currency: "currency", formatter: "formatter", parser: "parser", precision: "precision", type: "type", useCurrencyAccountingStyle: "useCurrencyAccountingStyle" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-value-format', template: '', providers: [NestedOptionHost], inputs: [
                                    'currency',
                                    'formatter',
                                    'parser',
                                    'precision',
                                    'type',
                                    'useCurrencyAccountingStyle'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoValueFormatModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatModule, declarations: [DxoValueFormatComponent], exports: [DxoValueFormatComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatModule });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueFormatModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValueFormatComponent
                                ],
                                exports: [
                                    DxoValueFormatComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoValueIndicatorComponent extends DxoGaugeIndicator {
                get _optionPath() {
                    return 'valueIndicator';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoValueIndicatorComponent, selector: "dxo-value-indicator", inputs: { arrowLength: "arrowLength", backgroundColor: "backgroundColor", baseValue: "baseValue", beginAdaptingAtRadius: "beginAdaptingAtRadius", color: "color", horizontalOrientation: "horizontalOrientation", indentFromCenter: "indentFromCenter", length: "length", offset: "offset", palette: "palette", secondColor: "secondColor", secondFraction: "secondFraction", size: "size", spindleGapSize: "spindleGapSize", spindleSize: "spindleSize", text: "text", type: "type", verticalOrientation: "verticalOrientation", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-value-indicator', template: '', providers: [NestedOptionHost], inputs: [
                                    'arrowLength',
                                    'backgroundColor',
                                    'baseValue',
                                    'beginAdaptingAtRadius',
                                    'color',
                                    'horizontalOrientation',
                                    'indentFromCenter',
                                    'length',
                                    'offset',
                                    'palette',
                                    'secondColor',
                                    'secondFraction',
                                    'size',
                                    'spindleGapSize',
                                    'spindleSize',
                                    'text',
                                    'type',
                                    'verticalOrientation',
                                    'width'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoValueIndicatorModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorModule, declarations: [DxoValueIndicatorComponent], exports: [DxoValueIndicatorComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorModule });
            } exports("e8", DxoValueIndicatorModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoValueIndicatorModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoValueIndicatorComponent
                                ],
                                exports: [
                                    DxoValueIndicatorComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoHtmlEditorVariables extends NestedOption {
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                get escapeChar() {
                    return this._getOption('escapeChar');
                }
                set escapeChar(value) {
                    this._setOption('escapeChar', value);
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorVariables, deps: null, target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoHtmlEditorVariables, selector: "ng-component", usesInheritance: true, ngImport: i0, template: '', isInline: true });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoHtmlEditorVariables, decorators: [{
                        type: Component$1,
                        args: [{
                                template: ''
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /* tslint:disable:use-input-property-decorator */
            class DxoVariablesComponent extends DxoHtmlEditorVariables {
                get _optionPath() {
                    return 'variables';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoVariablesComponent, selector: "dxo-variables", inputs: { dataSource: "dataSource", escapeChar: "escapeChar" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-variables', template: '', providers: [NestedOptionHost], inputs: [
                                    'dataSource',
                                    'escapeChar'
                                ] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }] });
            class DxoVariablesModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesModule, declarations: [DxoVariablesComponent], exports: [DxoVariablesComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesModule });
            } exports("fO", DxoVariablesModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVariablesModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoVariablesComponent
                                ],
                                exports: [
                                    DxoVariablesComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoVerticalLineComponent extends NestedOption {
                get color() {
                    return this._getOption('color');
                }
                set color(value) {
                    this._setOption('color', value);
                }
                get dashStyle() {
                    return this._getOption('dashStyle');
                }
                set dashStyle(value) {
                    this._setOption('dashStyle', value);
                }
                get label() {
                    return this._getOption('label');
                }
                set label(value) {
                    this._setOption('label', value);
                }
                get opacity() {
                    return this._getOption('opacity');
                }
                set opacity(value) {
                    this._setOption('opacity', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                get _optionPath() {
                    return 'verticalLine';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoVerticalLineComponent, selector: "dxo-vertical-line", inputs: { color: "color", dashStyle: "dashStyle", label: "label", opacity: "opacity", visible: "visible", width: "width" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-vertical-line', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { color: [{
                            type: Input
                        }], dashStyle: [{
                            type: Input
                        }], label: [{
                            type: Input
                        }], opacity: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }] } });
            class DxoVerticalLineModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineModule, declarations: [DxoVerticalLineComponent], exports: [DxoVerticalLineComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineModule });
            } exports("dV", DxoVerticalLineModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoVerticalLineModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoVerticalLineComponent
                                ],
                                exports: [
                                    DxoVerticalLineComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxiViewComponent extends CollectionNestedOption {
                get agendaDuration() {
                    return this._getOption('agendaDuration');
                }
                set agendaDuration(value) {
                    this._setOption('agendaDuration', value);
                }
                get allDayPanelMode() {
                    return this._getOption('allDayPanelMode');
                }
                set allDayPanelMode(value) {
                    this._setOption('allDayPanelMode', value);
                }
                get appointmentCollectorTemplate() {
                    return this._getOption('appointmentCollectorTemplate');
                }
                set appointmentCollectorTemplate(value) {
                    this._setOption('appointmentCollectorTemplate', value);
                }
                get appointmentTemplate() {
                    return this._getOption('appointmentTemplate');
                }
                set appointmentTemplate(value) {
                    this._setOption('appointmentTemplate', value);
                }
                get appointmentTooltipTemplate() {
                    return this._getOption('appointmentTooltipTemplate');
                }
                set appointmentTooltipTemplate(value) {
                    this._setOption('appointmentTooltipTemplate', value);
                }
                get cellDuration() {
                    return this._getOption('cellDuration');
                }
                set cellDuration(value) {
                    this._setOption('cellDuration', value);
                }
                get dataCellTemplate() {
                    return this._getOption('dataCellTemplate');
                }
                set dataCellTemplate(value) {
                    this._setOption('dataCellTemplate', value);
                }
                get dateCellTemplate() {
                    return this._getOption('dateCellTemplate');
                }
                set dateCellTemplate(value) {
                    this._setOption('dateCellTemplate', value);
                }
                get dropDownAppointmentTemplate() {
                    return this._getOption('dropDownAppointmentTemplate');
                }
                set dropDownAppointmentTemplate(value) {
                    this._setOption('dropDownAppointmentTemplate', value);
                }
                get endDayHour() {
                    return this._getOption('endDayHour');
                }
                set endDayHour(value) {
                    this._setOption('endDayHour', value);
                }
                get firstDayOfWeek() {
                    return this._getOption('firstDayOfWeek');
                }
                set firstDayOfWeek(value) {
                    this._setOption('firstDayOfWeek', value);
                }
                get groupByDate() {
                    return this._getOption('groupByDate');
                }
                set groupByDate(value) {
                    this._setOption('groupByDate', value);
                }
                get groupOrientation() {
                    return this._getOption('groupOrientation');
                }
                set groupOrientation(value) {
                    this._setOption('groupOrientation', value);
                }
                get groups() {
                    return this._getOption('groups');
                }
                set groups(value) {
                    this._setOption('groups', value);
                }
                get intervalCount() {
                    return this._getOption('intervalCount');
                }
                set intervalCount(value) {
                    this._setOption('intervalCount', value);
                }
                get maxAppointmentsPerCell() {
                    return this._getOption('maxAppointmentsPerCell');
                }
                set maxAppointmentsPerCell(value) {
                    this._setOption('maxAppointmentsPerCell', value);
                }
                get name() {
                    return this._getOption('name');
                }
                set name(value) {
                    this._setOption('name', value);
                }
                get offset() {
                    return this._getOption('offset');
                }
                set offset(value) {
                    this._setOption('offset', value);
                }
                get resourceCellTemplate() {
                    return this._getOption('resourceCellTemplate');
                }
                set resourceCellTemplate(value) {
                    this._setOption('resourceCellTemplate', value);
                }
                get scrolling() {
                    return this._getOption('scrolling');
                }
                set scrolling(value) {
                    this._setOption('scrolling', value);
                }
                get startDate() {
                    return this._getOption('startDate');
                }
                set startDate(value) {
                    this._setOption('startDate', value);
                }
                get startDayHour() {
                    return this._getOption('startDayHour');
                }
                set startDayHour(value) {
                    this._setOption('startDayHour', value);
                }
                get timeCellTemplate() {
                    return this._getOption('timeCellTemplate');
                }
                set timeCellTemplate(value) {
                    this._setOption('timeCellTemplate', value);
                }
                get type() {
                    return this._getOption('type');
                }
                set type(value) {
                    this._setOption('type', value);
                }
                get _optionPath() {
                    return 'views';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnDestroy() {
                    this._deleteRemovedOptions(this._fullOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxiViewComponent, selector: "dxi-view", inputs: { agendaDuration: "agendaDuration", allDayPanelMode: "allDayPanelMode", appointmentCollectorTemplate: "appointmentCollectorTemplate", appointmentTemplate: "appointmentTemplate", appointmentTooltipTemplate: "appointmentTooltipTemplate", cellDuration: "cellDuration", dataCellTemplate: "dataCellTemplate", dateCellTemplate: "dateCellTemplate", dropDownAppointmentTemplate: "dropDownAppointmentTemplate", endDayHour: "endDayHour", firstDayOfWeek: "firstDayOfWeek", groupByDate: "groupByDate", groupOrientation: "groupOrientation", groups: "groups", intervalCount: "intervalCount", maxAppointmentsPerCell: "maxAppointmentsPerCell", name: "name", offset: "offset", resourceCellTemplate: "resourceCellTemplate", scrolling: "scrolling", startDate: "startDate", startDayHour: "startDayHour", timeCellTemplate: "timeCellTemplate", type: "type" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            } exports("gN", DxiViewComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxi-view', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { agendaDuration: [{
                            type: Input
                        }], allDayPanelMode: [{
                            type: Input
                        }], appointmentCollectorTemplate: [{
                            type: Input
                        }], appointmentTemplate: [{
                            type: Input
                        }], appointmentTooltipTemplate: [{
                            type: Input
                        }], cellDuration: [{
                            type: Input
                        }], dataCellTemplate: [{
                            type: Input
                        }], dateCellTemplate: [{
                            type: Input
                        }], dropDownAppointmentTemplate: [{
                            type: Input
                        }], endDayHour: [{
                            type: Input
                        }], firstDayOfWeek: [{
                            type: Input
                        }], groupByDate: [{
                            type: Input
                        }], groupOrientation: [{
                            type: Input
                        }], groups: [{
                            type: Input
                        }], intervalCount: [{
                            type: Input
                        }], maxAppointmentsPerCell: [{
                            type: Input
                        }], name: [{
                            type: Input
                        }], offset: [{
                            type: Input
                        }], resourceCellTemplate: [{
                            type: Input
                        }], scrolling: [{
                            type: Input
                        }], startDate: [{
                            type: Input
                        }], startDayHour: [{
                            type: Input
                        }], timeCellTemplate: [{
                            type: Input
                        }], type: [{
                            type: Input
                        }] } });
            class DxiViewModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxiViewModule, declarations: [DxiViewComponent], exports: [DxiViewComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewModule });
            } exports("gQ", DxiViewModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxiViewModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxiViewComponent
                                ],
                                exports: [
                                    DxiViewComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoViewToolbarComponent extends NestedOption {
                get commands() {
                    return this._getOption('commands');
                }
                set commands(value) {
                    this._setOption('commands', value);
                }
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                get _optionPath() {
                    return 'viewToolbar';
                }
                get commandsChildren() {
                    return this._getOption('commands');
                }
                set commandsChildren(value) {
                    this.setChildren('commands', value);
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoViewToolbarComponent, selector: "dxo-view-toolbar", inputs: { commands: "commands", visible: "visible" }, providers: [NestedOptionHost], queries: [{ propertyName: "commandsChildren", predicate: i0.forwardRef(() => DxiCommandComponent) }], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-view-toolbar', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { commands: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], commandsChildren: [{
                            type: ContentChildren,
                            args: [forwardRef(() => DxiCommandComponent)]
                        }] } });
            class DxoViewToolbarModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarModule, declarations: [DxoViewToolbarComponent], exports: [DxoViewToolbarComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarModule });
            } exports("eY", DxoViewToolbarModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoViewToolbarModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoViewToolbarComponent
                                ],
                                exports: [
                                    DxoViewToolbarComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoWidthComponent extends NestedOption {
                get rangeMaxPoint() {
                    return this._getOption('rangeMaxPoint');
                }
                set rangeMaxPoint(value) {
                    this._setOption('rangeMaxPoint', value);
                }
                get rangeMinPoint() {
                    return this._getOption('rangeMinPoint');
                }
                set rangeMinPoint(value) {
                    this._setOption('rangeMinPoint', value);
                }
                get end() {
                    return this._getOption('end');
                }
                set end(value) {
                    this._setOption('end', value);
                }
                get start() {
                    return this._getOption('start');
                }
                set start(value) {
                    this._setOption('start', value);
                }
                get _optionPath() {
                    return 'width';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoWidthComponent, selector: "dxo-width", inputs: { rangeMaxPoint: "rangeMaxPoint", rangeMinPoint: "rangeMinPoint", end: "end", start: "start" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-width', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { rangeMaxPoint: [{
                            type: Input
                        }], rangeMinPoint: [{
                            type: Input
                        }], end: [{
                            type: Input
                        }], start: [{
                            type: Input
                        }] } });
            class DxoWidthModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthModule, declarations: [DxoWidthComponent], exports: [DxoWidthComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthModule });
            } exports("dr", DxoWidthModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoWidthModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoWidthComponent
                                ],
                                exports: [
                                    DxoWidthComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoZoomAndPanComponent extends NestedOption {
                get allowMouseWheel() {
                    return this._getOption('allowMouseWheel');
                }
                set allowMouseWheel(value) {
                    this._setOption('allowMouseWheel', value);
                }
                get allowTouchGestures() {
                    return this._getOption('allowTouchGestures');
                }
                set allowTouchGestures(value) {
                    this._setOption('allowTouchGestures', value);
                }
                get argumentAxis() {
                    return this._getOption('argumentAxis');
                }
                set argumentAxis(value) {
                    this._setOption('argumentAxis', value);
                }
                get dragBoxStyle() {
                    return this._getOption('dragBoxStyle');
                }
                set dragBoxStyle(value) {
                    this._setOption('dragBoxStyle', value);
                }
                get dragToZoom() {
                    return this._getOption('dragToZoom');
                }
                set dragToZoom(value) {
                    this._setOption('dragToZoom', value);
                }
                get panKey() {
                    return this._getOption('panKey');
                }
                set panKey(value) {
                    this._setOption('panKey', value);
                }
                get valueAxis() {
                    return this._getOption('valueAxis');
                }
                set valueAxis(value) {
                    this._setOption('valueAxis', value);
                }
                get _optionPath() {
                    return 'zoomAndPan';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoZoomAndPanComponent, selector: "dxo-zoom-and-pan", inputs: { allowMouseWheel: "allowMouseWheel", allowTouchGestures: "allowTouchGestures", argumentAxis: "argumentAxis", dragBoxStyle: "dragBoxStyle", dragToZoom: "dragToZoom", panKey: "panKey", valueAxis: "valueAxis" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-zoom-and-pan', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { allowMouseWheel: [{
                            type: Input
                        }], allowTouchGestures: [{
                            type: Input
                        }], argumentAxis: [{
                            type: Input
                        }], dragBoxStyle: [{
                            type: Input
                        }], dragToZoom: [{
                            type: Input
                        }], panKey: [{
                            type: Input
                        }], valueAxis: [{
                            type: Input
                        }] } });
            class DxoZoomAndPanModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanModule, declarations: [DxoZoomAndPanComponent], exports: [DxoZoomAndPanComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanModule });
            } exports("e0", DxoZoomAndPanModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomAndPanModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoZoomAndPanComponent
                                ],
                                exports: [
                                    DxoZoomAndPanComponent
                                ],
                            }]
                    }] });

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            class DxoZoomLevelComponent extends NestedOption {
                get items() {
                    return this._getOption('items');
                }
                set items(value) {
                    this._setOption('items', value);
                }
                get value() {
                    return this._getOption('value');
                }
                set value(value) {
                    this._setOption('value', value);
                }
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                valueChange;
                get _optionPath() {
                    return 'zoomLevel';
                }
                constructor(parentOptionHost, optionHost) {
                    super();
                    this._createEventEmitters([
                        { emit: 'valueChange' }
                    ]);
                    parentOptionHost.setNestedOption(this);
                    optionHost.setHost(this, this._fullOptionPath.bind(this));
                }
                ngOnInit() {
                    this._addRecreatedComponent();
                }
                ngOnDestroy() {
                    this._addRemovedOption(this._getOptionPath());
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelComponent, deps: [{ token: NestedOptionHost, host: true, skipSelf: true }, { token: NestedOptionHost, host: true }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxoZoomLevelComponent, selector: "dxo-zoom-level", inputs: { items: "items", value: "value" }, outputs: { valueChange: "valueChange" }, providers: [NestedOptionHost], usesInheritance: true, ngImport: i0, template: '', isInline: true, styles: [""] });
            }
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelComponent, decorators: [{
                        type: Component$1,
                        args: [{ selector: 'dxo-zoom-level', template: '', providers: [NestedOptionHost] }]
                    }], ctorParameters: () => [{ type: NestedOptionHost, decorators: [{
                                type: SkipSelf
                            }, {
                                type: Host
                            }] }, { type: NestedOptionHost, decorators: [{
                                type: Host
                            }] }], propDecorators: { items: [{
                            type: Input
                        }], value: [{
                            type: Input
                        }], valueChange: [{
                            type: Output
                        }] } });
            class DxoZoomLevelModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelModule, declarations: [DxoZoomLevelComponent], exports: [DxoZoomLevelComponent] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelModule });
            } exports("eZ", DxoZoomLevelModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxoZoomLevelModule, decorators: [{
                        type: NgModule,
                        args: [{
                                declarations: [
                                    DxoZoomLevelComponent
                                ],
                                exports: [
                                    DxoZoomLevelComponent
                                ],
                            }]
                    }] });

            /**
             * DevExtreme (esm/core/utils/math.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var sign = exports("ca", function(value) {
                if (0 === value) {
                    return 0
                }
                return value / Math.abs(value)
            });
            var fitIntoRange = exports("aW", function(value, minValue, maxValue) {
                var isMinValueUndefined = !minValue && 0 !== minValue;
                var isMaxValueUndefined = !maxValue && 0 !== maxValue;
                isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);
                isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);
                return Math.min(Math.max(value, minValue), maxValue)
            });
            var inRange = exports("b8", function(value, minValue, maxValue) {
                return value >= minValue && value <= maxValue
            });

            function getExponent(value) {
                return Math.abs(parseInt(value.toExponential().split("e")[1]))
            }

            function getExponentialNotation(value) {
                var parts = value.toExponential().split("e");
                var mantissa = parseFloat(parts[0]);
                var exponent = parseInt(parts[1]);
                return {
                    exponent: exponent,
                    mantissa: mantissa
                }
            }

            function multiplyInExponentialForm(value, exponentShift) {
                var exponentialNotation = getExponentialNotation(value);
                return parseFloat("".concat(exponentialNotation.mantissa, "e").concat(exponentialNotation.exponent + exponentShift))
            }

            function _isEdgeBug() {
                return "0.000300" !== 3e-4.toPrecision(3)
            }

            function adjust(value, interval) {
                var precision = getPrecision(interval || 0) + 2;
                var separatedValue = value.toString().split(".");
                var sourceValue = value;
                var absValue = Math.abs(value);
                var separatedAdjustedValue;
                var isExponentValue = isExponential(value);
                var integerPart = absValue > 1 ? 10 : 0;
                if (1 === separatedValue.length) {
                    return value
                }
                if (!isExponentValue) {
                    if (isExponential(interval)) {
                        precision = separatedValue[0].length + getExponent(interval);
                    }
                    value = absValue;
                    value = value - Math.floor(value) + integerPart;
                }
                precision = _isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;
                if (!isExponentValue) {
                    separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(".");
                    if (separatedAdjustedValue[0] === integerPart.toString()) {
                        return parseFloat(separatedValue[0] + "." + separatedAdjustedValue[1])
                    }
                }
                return parseFloat(sourceValue.toPrecision(precision))
            }

            function getPrecision(value) {
                var str = value.toString();
                if (str.indexOf(".") < 0) {
                    return 0
                }
                var mantissa = str.split(".");
                var positionOfDelimiter = mantissa[1].indexOf("e");
                return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length
            }

            function getRoot(x, n) {
                if (x < 0 && n % 2 !== 1) {
                    return NaN
                }
                var y = Math.pow(Math.abs(x), 1 / n);
                return n % 2 === 1 && x < 0 ? -y : y
            }

            function solveCubicEquation(a, b, c, d) {
                if (Math.abs(a) < 1e-8) {
                    a = b;
                    b = c;
                    c = d;
                    if (Math.abs(a) < 1e-8) {
                        a = b;
                        b = c;
                        if (Math.abs(a) < 1e-8) {
                            return []
                        }
                        return [-b / a]
                    }
                    var D2 = b * b - 4 * a * c;
                    if (Math.abs(D2) < 1e-8) {
                        return [-b / (2 * a)]
                    } else if (D2 > 0) {
                        return [(-b + Math.sqrt(D2)) / (2 * a), (-b - Math.sqrt(D2)) / (2 * a)]
                    }
                    return []
                }
                var p = (3 * a * c - b * b) / (3 * a * a);
                var q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);
                var roots;
                var u;
                if (Math.abs(p) < 1e-8) {
                    roots = [getRoot(-q, 3)];
                } else if (Math.abs(q) < 1e-8) {
                    roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);
                } else {
                    var D3 = q * q / 4 + p * p * p / 27;
                    if (Math.abs(D3) < 1e-8) {
                        roots = [-1.5 * q / p, 3 * q / p];
                    } else if (D3 > 0) {
                        u = getRoot(-q / 2 - Math.sqrt(D3), 3);
                        roots = [u - p / (3 * u)];
                    } else {
                        u = 2 * Math.sqrt(-p / 3);
                        var t = Math.acos(3 * q / p / u) / 3;
                        var k = 2 * Math.PI / 3;
                        roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)];
                    }
                }
                for (var i = 0; i < roots.length; i++) {
                    roots[i] -= b / (3 * a);
                }
                return roots
            }

            function trunc(value) {
                return Math.trunc ? Math.trunc(value) : value > 0 ? Math.floor(value) : Math.ceil(value)
            }

            function getRemainderByDivision(dividend, divider, digitsCount) {
                if (divider === parseInt(divider)) {
                    return dividend % divider
                }
                var quotient = roundFloatPart(dividend / divider, digitsCount);
                return (quotient - parseInt(quotient)) * divider
            }

            function getExponentLength(value) {
                var _valueString$split$;
                var valueString = value.toString();
                return (null === (_valueString$split$ = valueString.split(".")[1]) || void 0 === _valueString$split$ ? void 0 : _valueString$split$.length) || parseInt(valueString.split("e-")[1]) || 0
            }

            function roundFloatPart(value) {
                var digitsCount = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
                return parseFloat(value.toFixed(digitsCount))
            }

            /**
             * DevExtreme (esm/localization/utils.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DECIMAL_BASE$1 = 10;

            function roundByAbs(value) {
                var valueSign = sign(value);
                return valueSign * Math.round(Math.abs(value))
            }

            function adjustValue(value, precision) {
                var precisionMultiplier = Math.pow(DECIMAL_BASE$1, precision);
                var intermediateValue = multiplyInExponentialForm(value, precision);
                return roundByAbs(intermediateValue) / precisionMultiplier
            }
            function toFixed(value, precision) {
                var valuePrecision = precision || 0;
                var adjustedValue = valuePrecision > 0 ? adjustValue(...arguments) : value;
                return adjustedValue.toFixed(valuePrecision)
            }

            /**
             * DevExtreme (esm/localization/ldml/number.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DEFAULT_CONFIG = {
                thousandsSeparator: ",",
                decimalSeparator: "."
            };
            var ESCAPING_CHAR = "'";
            var MAXIMUM_NUMBER_LENGTH = 15;
            var PERCENT_EXPONENT_SHIFT = 2;

            function getGroupSizes(formatString) {
                return formatString.split(",").slice(1).map((function(str) {
                    var singleQuotesLeft = 0;
                    return str.split("").filter((function(char, index) {
                        singleQuotesLeft += "'" === char;
                        var isDigit = "#" === char || "0" === char;
                        var isInStub = singleQuotesLeft % 2;
                        return isDigit && !isInStub
                    })).length
                }))
            }

            function getSignParts(format) {
                var signParts = format.split(";");
                if (1 === signParts.length) {
                    signParts.push("-" + signParts[0]);
                }
                return signParts
            }

            function reverseString(str) {
                return str.toString().split("").reverse().join("")
            }

            function isPercentFormat(format) {
                return -1 !== format.indexOf("%") && !format.match(/'[^']*%[^']*'/g)
            }

            function removeStubs(str) {
                return str.replace(/'.+'/g, "")
            }

            function getNonRequiredDigitCount(floatFormat) {
                if (!floatFormat) {
                    return 0
                }
                var format = removeStubs(floatFormat);
                return format.length - format.replace(/[#]/g, "").length
            }

            function getRequiredDigitCount(floatFormat) {
                if (!floatFormat) {
                    return 0
                }
                var format = removeStubs(floatFormat);
                return format.length - format.replace(/[0]/g, "").length
            }

            function normalizeValueString(valuePart, minDigitCount, maxDigitCount) {
                if (!valuePart) {
                    return ""
                }
                if (valuePart.length > maxDigitCount) {
                    valuePart = valuePart.substr(0, maxDigitCount);
                }
                while (valuePart.length > minDigitCount && "0" === valuePart.slice(-1)) {
                    valuePart = valuePart.substr(0, valuePart.length - 1);
                }
                while (valuePart.length < minDigitCount) {
                    valuePart += "0";
                }
                return valuePart
            }

            function applyGroups(valueString, groupSizes, thousandsSeparator) {
                if (!groupSizes.length) {
                    return valueString
                }
                var groups = [];
                var index = 0;
                while (valueString) {
                    var groupSize = groupSizes[index];
                    if (!groupSize) {
                        break
                    }
                    groups.push(valueString.slice(0, groupSize));
                    valueString = valueString.slice(groupSize);
                    if (index < groupSizes.length - 1) {
                        index++;
                    }
                }
                return groups.join(thousandsSeparator)
            }

            function formatNumberPart(format, valueString) {
                return format.split(ESCAPING_CHAR).map((function(formatPart, escapeIndex) {
                    var isEscape = escapeIndex % 2;
                    if (!formatPart && isEscape) {
                        return ESCAPING_CHAR
                    }
                    return isEscape ? formatPart : formatPart.replace(/[,#0]+/, valueString)
                })).join("")
            }

            function getFloatPointIndex(format) {
                var isEscape = false;
                for (var index = 0; index < format.length; index++) {
                    if ("'" === format[index]) {
                        isEscape = !isEscape;
                    }
                    if ("." === format[index] && !isEscape) {
                        return index
                    }
                }
                return format.length
            }
            function getFormatter$3(format, config) {
                config = config || DEFAULT_CONFIG;
                return function(value) {
                    if ("number" !== typeof value || isNaN(value)) {
                        return ""
                    }
                    var signFormatParts = getSignParts(format);
                    var isPositiveZero = 1 / value === 1 / 0;
                    var isPositive = value > 0 || isPositiveZero;
                    var numberFormat = signFormatParts[isPositive ? 0 : 1];
                    var floatPointIndex = getFloatPointIndex(numberFormat);
                    var floatFormatParts = [numberFormat.substr(0, floatPointIndex), numberFormat.substr(floatPointIndex + 1)];
                    var minFloatPrecision = getRequiredDigitCount(floatFormatParts[1]);
                    var maxFloatPrecision = minFloatPrecision + getNonRequiredDigitCount(floatFormatParts[1]);
                    if (isPercentFormat(numberFormat)) {
                        value = multiplyInExponentialForm(value, PERCENT_EXPONENT_SHIFT);
                    }
                    if (!isPositive) {
                        value = -value;
                    }
                    var minIntegerPrecision = getRequiredDigitCount(floatFormatParts[0]);
                    var maxIntegerPrecision = getNonRequiredDigitCount(floatFormatParts[0]) || config.unlimitedIntegerDigits ? void 0 : minIntegerPrecision;
                    var integerLength = Math.floor(value).toString().length;
                    var floatPrecision = fitIntoRange(maxFloatPrecision, 0, MAXIMUM_NUMBER_LENGTH - integerLength);
                    var groupSizes = getGroupSizes(floatFormatParts[0]).reverse();
                    var valueParts = toFixed(value, floatPrecision < 0 ? 0 : floatPrecision).split(".");
                    var valueIntegerPart = normalizeValueString(reverseString(valueParts[0]), minIntegerPrecision, maxIntegerPrecision);
                    var valueFloatPart = normalizeValueString(valueParts[1], minFloatPrecision, maxFloatPrecision);
                    valueIntegerPart = applyGroups(valueIntegerPart, groupSizes, config.thousandsSeparator);
                    var integerString = reverseString(formatNumberPart(reverseString(floatFormatParts[0]), valueIntegerPart));
                    var floatString = maxFloatPrecision ? formatNumberPart(floatFormatParts[1], valueFloatPart) : "";
                    var result = integerString + (floatString.match(/\d/) ? config.decimalSeparator : "") + floatString;
                    return result
                }
            }

            function parseValue(text, isPercent, isNegative) {
                var value = (isPercent ? .01 : 1) * parseFloat(text) || 0;
                return isNegative ? -value : value
            }

            function prepareValueText(valueText, formatter, isPercent, isIntegerPart) {
                var nextValueText = valueText;
                var char;
                var text;
                var nextText;
                do {
                    if (nextText) {
                        char = text.length === nextText.length ? "0" : "1";
                        valueText = isIntegerPart ? char + valueText : valueText + char;
                    }
                    text = nextText || formatter(parseValue(nextValueText, isPercent));
                    nextValueText = isIntegerPart ? "1" + nextValueText : nextValueText + "1";
                    nextText = formatter(parseValue(nextValueText, isPercent));
                } while (text !== nextText && (isIntegerPart ? text.length === nextText.length : text.length <= nextText.length));
                if (isIntegerPart && nextText.length > text.length) {
                    var hasGroups = -1 === formatter(12345).indexOf("12345");
                    do {
                        valueText = "1" + valueText;
                    } while (hasGroups && parseValue(valueText, isPercent) < 1e5)
                }
                return valueText
            }

            function getFormatByValueText(valueText, formatter, isPercent, isNegative) {
                var format = formatter(parseValue(valueText, isPercent, isNegative));
                var valueTextParts = valueText.split(".");
                var valueTextWithModifiedFloat = valueTextParts[0] + ".3" + valueTextParts[1].slice(1);
                var valueWithModifiedFloat = parseValue(valueTextWithModifiedFloat, isPercent, isNegative);
                var decimalSeparatorIndex = formatter(valueWithModifiedFloat).indexOf("3") - 1;
                format = format.replace(/(\d)\D(\d)/g, "$1,$2");
                if (decimalSeparatorIndex >= 0) {
                    format = format.slice(0, decimalSeparatorIndex) + "." + format.slice(decimalSeparatorIndex + 1);
                }
                format = format.replace(/1+/, "1").replace(/1/g, "#");
                if (!isPercent) {
                    format = format.replace(/%/g, "'%'");
                }
                return format
            }
            function getFormat$1(formatter) {
                var valueText = ".";
                var isPercent = formatter(1).indexOf("100") >= 0;
                valueText = prepareValueText(valueText, formatter, isPercent, true);
                valueText = prepareValueText(valueText, formatter, isPercent, false);
                var positiveFormat = getFormatByValueText(valueText, formatter, isPercent, false);
                var negativeFormat = getFormatByValueText(valueText, formatter, isPercent, true);
                return negativeFormat === "-" + positiveFormat ? positiveFormat : positiveFormat + ";" + negativeFormat
            }

            /**
             * DevExtreme (esm/localization/currency.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var currencyLocalization = {
                _formatNumberCore: function(value, format, formatConfig) {
                    if ("currency" === format) {
                        formatConfig.precision = formatConfig.precision || 0;
                        var result = this.format(value, extend({}, formatConfig, {
                            type: "fixedpoint"
                        }));
                        var currencyPart = this.getCurrencySymbol().symbol.replace(/\$/g, "$$$$");
                        result = result.replace(/^(\D*)(\d.*)/, "$1" + currencyPart + "$2");
                        return result
                    }
                    return this.callBase.apply(this, arguments)
                },
                getCurrencySymbol: function() {
                    return {
                        symbol: "$"
                    }
                },
                getOpenXmlCurrencyFormat: function() {
                    return "$#,##0{0}_);\\($#,##0{0}\\)"
                }
            };

            /**
             * DevExtreme (esm/localization/open_xml_currency_format.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var openXmlCurrencyFormat = (currencySymbol, accountingFormat) => {
                if (!accountingFormat) {
                    return
                }
                var encodedCurrencySymbol = currencySymbol;
                if ("string" === typeof currencySymbol) {
                    encodedCurrencySymbol = "";
                    for (var i = 0; i < currencySymbol.length; i++) {
                        if ("$" !== currencySymbol[i]) {
                            encodedCurrencySymbol += "\\";
                        }
                        encodedCurrencySymbol += currencySymbol[i];
                    }
                }
                var encodeSymbols = {
                    ".00": "{0}",
                    "'": "\\'",
                    "\\(": "\\(",
                    "\\)": "\\)",
                    " ": "\\ ",
                    '"': "&quot;",
                    "\\\xa4": encodedCurrencySymbol
                };
                var result = accountingFormat.split(";");
                for (var _i = 0; _i < result.length; _i++) {
                    for (var symbol in encodeSymbols) {
                        if (Object.prototype.hasOwnProperty.call(encodeSymbols, symbol)) {
                            result[_i] = result[_i].replace(new RegExp(symbol, "g"), encodeSymbols[symbol]);
                        }
                    }
                }
                return 2 === result.length ? result[0] + "_);" + result[1] : result[0]
            };

            /**
             * DevExtreme (esm/localization/cldr-data/accounting_formats.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            // !!! AUTO-GENERATED FILE, DO NOT EDIT
            var accountingFormats = {
                af: "\xa4#,##0.00;(\xa4#,##0.00)",
                "af-NA": "\xa4#,##0.00;(\xa4#,##0.00)",
                agq: "#,##0.00\xa4",
                ak: "\xa4#,##0.00",
                am: "\xa4#,##0.00;(\xa4#,##0.00)",
                ar: "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-AE": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-BH": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-DJ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-DZ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-EG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-EH": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-ER": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-IL": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-IQ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-JO": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-KM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-KW": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-LB": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-LY": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-MA": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-MR": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-OM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-PS": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-QA": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-SA": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-SD": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-SO": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-SS": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-SY": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-TD": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-TN": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ar-YE": "\xa4#,##0.00;(\xa4#,##0.00)",
                as: "\xa4\xa0#,##,##0.00",
                asa: "#,##0.00\xa0\xa4",
                ast: "#,##0.00\xa0\xa4",
                az: "#,##0.00\xa0\xa4",
                "az-Cyrl": "#,##0.00\xa0\xa4",
                "az-Latn": "#,##0.00\xa0\xa4",
                bas: "#,##0.00\xa0\xa4",
                be: "#,##0.00\xa0\xa4",
                "be-tarask": "#,##0.00\xa0\xa4",
                bem: "\xa4#,##0.00;(\xa4#,##0.00)",
                bez: "#,##0.00\xa4",
                bg: "0.00\xa0\xa4;(0.00\xa0\xa4)",
                bm: "\xa4#,##0.00;(\xa4#,##0.00)",
                bn: "#,##,##0.00\xa4;(#,##,##0.00\xa4)",
                "bn-IN": "#,##,##0.00\xa4;(#,##,##0.00\xa4)",
                bo: "\xa4\xa0#,##0.00",
                "bo-IN": "\xa4\xa0#,##0.00",
                br: "#,##0.00\xa0\xa4",
                brx: "\xa4\xa0#,##,##0.00",
                bs: "#,##0.00\xa0\xa4",
                "bs-Cyrl": "#,##0.00\xa0\xa4",
                "bs-Latn": "#,##0.00\xa0\xa4",
                ca: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "ca-AD": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "ca-ES-valencia": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "ca-FR": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "ca-IT": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                ccp: "#,##,##0.00\xa4;(#,##,##0.00\xa4)",
                "ccp-IN": "#,##,##0.00\xa4;(#,##,##0.00\xa4)",
                ce: "#,##0.00\xa0\xa4",
                ceb: "\xa4#,##0.00;(\xa4#,##0.00)",
                cgg: "\xa4#,##0.00",
                chr: "\xa4#,##0.00;(\xa4#,##0.00)",
                ckb: "\xa4\xa0#,##0.00",
                "ckb-IR": "\xa4\xa0#,##0.00",
                cs: "#,##0.00\xa0\xa4",
                cy: "\xa4#,##0.00;(\xa4#,##0.00)",
                da: "#,##0.00\xa0\xa4",
                "da-GL": "#,##0.00\xa0\xa4",
                dav: "\xa4#,##0.00;(\xa4#,##0.00)",
                de: "#,##0.00\xa0\xa4",
                "de-AT": "#,##0.00\xa0\xa4",
                "de-BE": "#,##0.00\xa0\xa4",
                "de-CH": "#,##0.00\xa0\xa4",
                "de-IT": "#,##0.00\xa0\xa4",
                "de-LI": "#,##0.00\xa0\xa4",
                "de-LU": "#,##0.00\xa0\xa4",
                dje: "#,##0.00\xa4",
                doi: "\xa4#,##0.00",
                dsb: "#,##0.00\xa0\xa4",
                dua: "#,##0.00\xa0\xa4",
                dyo: "#,##0.00\xa0\xa4",
                dz: "\xa4#,##,##0.00",
                ebu: "\xa4#,##0.00;(\xa4#,##0.00)",
                ee: "\xa4#,##0.00;(\xa4#,##0.00)",
                "ee-TG": "\xa4#,##0.00;(\xa4#,##0.00)",
                el: "#,##0.00\xa0\xa4",
                "el-CY": "#,##0.00\xa0\xa4",
                en: "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-001": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-150": "#,##0.00\xa0\xa4",
                "en-AE": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-AG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-AI": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-AS": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-AT": "\xa4\xa0#,##0.00",
                "en-AU": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-BB": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-BE": "#,##0.00\xa0\xa4",
                "en-BI": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-BM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-BS": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-BW": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-BZ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-CA": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-CC": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-CH": "\xa4\xa0#,##0.00;\xa4-#,##0.00",
                "en-CK": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-CM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-CX": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-CY": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-DE": "#,##0.00\xa0\xa4",
                "en-DG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-DK": "#,##0.00\xa0\xa4",
                "en-DM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-ER": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-FI": "#,##0.00\xa0\xa4",
                "en-FJ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-FK": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-FM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-GB": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-GD": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-GG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-GH": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-GI": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-GM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-GU": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-GY": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-HK": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-IE": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-IL": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-IM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-IN": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-IO": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-JE": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-JM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-KE": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-KI": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-KN": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-KY": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-LC": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-LR": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-LS": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MH": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MO": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MP": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MS": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MT": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MU": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MV": "\xa4\xa0#,##0.00",
                "en-MW": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-MY": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-NA": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-NF": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-NG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-NL": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "en-NR": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-NU": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-NZ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-PG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-PH": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-PK": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-PN": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-PR": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-PW": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-RW": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SB": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SC": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SD": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SE": "#,##0.00\xa0\xa4",
                "en-SG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SH": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SI": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "en-SL": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SS": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SX": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-SZ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-TC": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-TK": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-TO": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-TT": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-TV": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-TZ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-UG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-UM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-VC": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-VG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-VI": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-VU": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-WS": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-ZA": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-ZM": "\xa4#,##0.00;(\xa4#,##0.00)",
                "en-ZW": "\xa4#,##0.00;(\xa4#,##0.00)",
                eo: "\xa4\xa0#,##0.00",
                es: "#,##0.00\xa0\xa4",
                "es-419": "\xa4#,##0.00",
                "es-AR": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "es-BO": "\xa4#,##0.00",
                "es-BR": "\xa4#,##0.00",
                "es-BZ": "\xa4#,##0.00",
                "es-CL": "\xa4#,##0.00",
                "es-CO": "\xa4#,##0.00",
                "es-CR": "\xa4#,##0.00",
                "es-CU": "\xa4#,##0.00",
                "es-DO": "\xa4#,##0.00;(\xa4#,##0.00)",
                "es-EA": "#,##0.00\xa0\xa4",
                "es-EC": "\xa4#,##0.00",
                "es-GQ": "#,##0.00\xa0\xa4",
                "es-GT": "\xa4#,##0.00",
                "es-HN": "\xa4#,##0.00",
                "es-IC": "#,##0.00\xa0\xa4",
                "es-MX": "\xa4#,##0.00",
                "es-NI": "\xa4#,##0.00",
                "es-PA": "\xa4#,##0.00",
                "es-PE": "\xa4#,##0.00",
                "es-PH": "#,##0.00\xa0\xa4",
                "es-PR": "\xa4#,##0.00",
                "es-PY": "\xa4#,##0.00",
                "es-SV": "\xa4#,##0.00",
                "es-US": "\xa4#,##0.00",
                "es-UY": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "es-VE": "\xa4#,##0.00",
                et: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                eu: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                ewo: "#,##0.00\xa0\xa4",
                fa: "\u200e\xa4\xa0#,##0.00;\u200e(\xa4\xa0#,##0.00)",
                "fa-AF": "\xa4\xa0#,##0.00;\u200e(\xa4\xa0#,##0.00)",
                ff: "#,##0.00\xa0\xa4",
                "ff-Adlm": "\xa4\xa0#,##0.00",
                "ff-Adlm-BF": "\xa4\xa0#,##0.00",
                "ff-Adlm-CM": "\xa4\xa0#,##0.00",
                "ff-Adlm-GH": "\xa4\xa0#,##0.00",
                "ff-Adlm-GM": "\xa4\xa0#,##0.00",
                "ff-Adlm-GW": "\xa4\xa0#,##0.00",
                "ff-Adlm-LR": "\xa4\xa0#,##0.00",
                "ff-Adlm-MR": "\xa4\xa0#,##0.00",
                "ff-Adlm-NE": "\xa4\xa0#,##0.00",
                "ff-Adlm-NG": "\xa4\xa0#,##0.00",
                "ff-Adlm-SL": "\xa4\xa0#,##0.00",
                "ff-Adlm-SN": "\xa4\xa0#,##0.00",
                "ff-Latn": "#,##0.00\xa0\xa4",
                "ff-Latn-BF": "#,##0.00\xa0\xa4",
                "ff-Latn-CM": "#,##0.00\xa0\xa4",
                "ff-Latn-GH": "#,##0.00\xa0\xa4",
                "ff-Latn-GM": "#,##0.00\xa0\xa4",
                "ff-Latn-GN": "#,##0.00\xa0\xa4",
                "ff-Latn-GW": "#,##0.00\xa0\xa4",
                "ff-Latn-LR": "#,##0.00\xa0\xa4",
                "ff-Latn-MR": "#,##0.00\xa0\xa4",
                "ff-Latn-NE": "#,##0.00\xa0\xa4",
                "ff-Latn-NG": "#,##0.00\xa0\xa4",
                "ff-Latn-SL": "#,##0.00\xa0\xa4",
                fi: "#,##0.00\xa0\xa4",
                fil: "\xa4#,##0.00;(\xa4#,##0.00)",
                fo: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fo-DK": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                fr: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-BE": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-BF": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-BI": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-BJ": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-BL": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-CA": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-CD": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-CF": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-CG": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-CH": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-CI": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-CM": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-DJ": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-DZ": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-GA": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-GF": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-GN": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-GP": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-GQ": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-HT": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-KM": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-LU": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-MA": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-MC": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-MF": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-MG": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-ML": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-MQ": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-MR": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-MU": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-NC": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-NE": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-PF": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-PM": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-RE": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-RW": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-SC": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-SN": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-SY": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-TD": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-TG": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-TN": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-VU": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-WF": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "fr-YT": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                fur: "\xa4\xa0#,##0.00",
                fy: "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                ga: "\xa4#,##0.00;(\xa4#,##0.00)",
                "ga-GB": "\xa4#,##0.00;(\xa4#,##0.00)",
                gd: "\xa4#,##0.00;(\xa4#,##0.00)",
                gl: "#,##0.00\xa0\xa4",
                gsw: "#,##0.00\xa0\xa4",
                "gsw-FR": "#,##0.00\xa0\xa4",
                "gsw-LI": "#,##0.00\xa0\xa4",
                gu: "\xa4#,##,##0.00;(\xa4#,##,##0.00)",
                guz: "\xa4#,##0.00;(\xa4#,##0.00)",
                gv: "\xa4#,##0.00",
                ha: "\xa4\xa0#,##0.00",
                "ha-GH": "\xa4\xa0#,##0.00",
                "ha-NE": "\xa4\xa0#,##0.00",
                haw: "\xa4#,##0.00;(\xa4#,##0.00)",
                he: "#,##0.00\xa0\xa4",
                hi: "\xa4#,##,##0.00",
                "hi-Latn": "\xa4#,##,##0.00",
                hr: "#,##0.00\xa0\xa4",
                "hr-BA": "#,##0.00\xa0\xa4",
                hsb: "#,##0.00\xa0\xa4",
                hu: "#,##0.00\xa0\xa4",
                hy: "#,##0.00\xa0\xa4",
                ia: "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                id: "\xa4#,##0.00",
                ig: "\xa4#,##0.00;(\xa4#,##0.00)",
                ii: "\xa4\xa0#,##0.00",
                is: "#,##0.00\xa0\xa4",
                it: "#,##0.00\xa0\xa4",
                "it-CH": "#,##0.00\xa0\xa4",
                "it-SM": "#,##0.00\xa0\xa4",
                "it-VA": "#,##0.00\xa0\xa4",
                ja: "\xa4#,##0.00;(\xa4#,##0.00)",
                jgo: "\xa4\xa0#,##0.00",
                jmc: "\xa4#,##0.00",
                jv: "\xa4\xa0#,##0.00",
                ka: "#,##0.00\xa0\xa4",
                kab: "#,##0.00\xa4",
                kam: "\xa4#,##0.00;(\xa4#,##0.00)",
                kde: "\xa4#,##0.00;(\xa4#,##0.00)",
                kea: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                kgp: "\xa4\xa0#,##0.00",
                khq: "#,##0.00\xa4",
                ki: "\xa4#,##0.00;(\xa4#,##0.00)",
                kk: "#,##0.00\xa0\xa4",
                kkj: "\xa4\xa0#,##0.00",
                kl: "\xa4#,##0.00;\xa4-#,##0.00",
                kln: "\xa4#,##0.00;(\xa4#,##0.00)",
                km: "#,##0.00\xa4;(#,##0.00\xa4)",
                kn: "\xa4#,##0.00;(\xa4#,##0.00)",
                ko: "\xa4#,##0.00;(\xa4#,##0.00)",
                "ko-KP": "\xa4#,##0.00;(\xa4#,##0.00)",
                kok: "\xa4#,##0.00;(\xa4#,##0.00)",
                ks: "\xa4#,##0.00",
                "ks-Arab": "\xa4#,##0.00",
                "ks-Deva": "\xa4\xa0#,##0.00",
                ksb: "#,##0.00\xa4",
                ksf: "#,##0.00\xa0\xa4",
                ksh: "#,##0.00\xa0\xa4",
                ku: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                kw: "\xa4#,##0.00",
                ky: "#,##0.00\xa0\xa4",
                lag: "\xa4\xa0#,##0.00",
                lb: "#,##0.00\xa0\xa4",
                lg: "#,##0.00\xa4",
                lkt: "\xa4\xa0#,##0.00",
                ln: "#,##0.00\xa0\xa4",
                "ln-AO": "#,##0.00\xa0\xa4",
                "ln-CF": "#,##0.00\xa0\xa4",
                "ln-CG": "#,##0.00\xa0\xa4",
                lo: "\xa4#,##0.00;\xa4-#,##0.00",
                lrc: "\xa4\xa0#,##0.00",
                "lrc-IQ": "\xa4\xa0#,##0.00",
                lt: "#,##0.00\xa0\xa4",
                lu: "#,##0.00\xa4",
                luo: "#,##0.00\xa4",
                luy: "\xa4#,##0.00;\xa4-\xa0#,##0.00",
                lv: "#,##0.00\xa0\xa4",
                mai: "\xa4\xa0#,##0.00",
                mas: "\xa4#,##0.00;(\xa4#,##0.00)",
                "mas-TZ": "\xa4#,##0.00;(\xa4#,##0.00)",
                mer: "\xa4#,##0.00;(\xa4#,##0.00)",
                mfe: "\xa4\xa0#,##0.00",
                mg: "\xa4#,##0.00",
                mgh: "\xa4\xa0#,##0.00",
                mgo: "\xa4\xa0#,##0.00",
                mi: "\xa4\xa0#,##0.00",
                mk: "#,##0.00\xa0\xa4",
                ml: "\xa4#,##0.00;(\xa4#,##0.00)",
                mn: "\xa4\xa0#,##0.00",
                mni: "\xa4\xa0#,##0.00",
                "mni-Beng": "\xa4\xa0#,##0.00",
                mr: "\xa4#,##0.00;(\xa4#,##0.00)",
                ms: "\xa4#,##0.00;(\xa4#,##0.00)",
                "ms-BN": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ms-ID": "\xa4#,##0.00",
                "ms-SG": "\xa4#,##0.00;(\xa4#,##0.00)",
                mt: "\xa4#,##0.00",
                mua: "\xa4#,##0.00;(\xa4#,##0.00)",
                my: "\xa4\xa0#,##0.00",
                mzn: "\xa4\xa0#,##0.00",
                naq: "\xa4#,##0.00",
                nb: "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "nb-SJ": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                nd: "\xa4#,##0.00;(\xa4#,##0.00)",
                nds: "\xa4\xa0#,##0.00",
                "nds-NL": "\xa4\xa0#,##0.00",
                ne: "\xa4\xa0#,##,##0.00",
                "ne-IN": "\xa4\xa0#,##,##0.00",
                nl: "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "nl-AW": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "nl-BE": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "nl-BQ": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "nl-CW": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "nl-SR": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                "nl-SX": "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                nmg: "#,##0.00\xa0\xa4",
                nn: "#,##0.00\xa0\xa4",
                nnh: "\xa4\xa0#,##0.00",
                no: "\xa4\xa0#,##0.00;(\xa4\xa0#,##0.00)",
                nus: "\xa4#,##0.00;(\xa4#,##0.00)",
                nyn: "\xa4#,##0.00",
                om: "\xa4#,##0.00",
                "om-KE": "\xa4#,##0.00",
                or: "\xa4#,##0.00;(\xa4#,##0.00)",
                os: "\xa4\xa0#,##0.00",
                "os-RU": "\xa4\xa0#,##0.00",
                pa: "\xa4\xa0#,##0.00",
                "pa-Arab": "\xa4\xa0#,##0.00",
                "pa-Guru": "\xa4\xa0#,##0.00",
                pcm: "\xa4#,##0.00",
                pl: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                ps: "\xa4#,##0.00;(\xa4#,##0.00)",
                "ps-PK": "\xa4#,##0.00;(\xa4#,##0.00)",
                pt: "\xa4\xa0#,##0.00",
                "pt-AO": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-CH": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-CV": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-GQ": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-GW": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-LU": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-MO": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-MZ": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-PT": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-ST": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "pt-TL": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                qu: "\xa4\xa0#,##0.00",
                "qu-BO": "\xa4\xa0#,##0.00",
                "qu-EC": "\xa4\xa0#,##0.00",
                rm: "#,##0.00\xa0\xa4",
                rn: "#,##0.00\xa4",
                ro: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "ro-MD": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                rof: "\xa4#,##0.00",
                ru: "#,##0.00\xa0\xa4",
                "ru-BY": "#,##0.00\xa0\xa4",
                "ru-KG": "#,##0.00\xa0\xa4",
                "ru-KZ": "#,##0.00\xa0\xa4",
                "ru-MD": "#,##0.00\xa0\xa4",
                "ru-UA": "#,##0.00\xa0\xa4",
                rw: "\xa4\xa0#,##0.00",
                rwk: "#,##0.00\xa4",
                sa: "\xa4\xa0#,##0.00",
                sah: "#,##0.00\xa0\xa4",
                saq: "\xa4#,##0.00;(\xa4#,##0.00)",
                sat: "\xa4\xa0#,##0.00",
                "sat-Olck": "\xa4\xa0#,##0.00",
                sbp: "#,##0.00\xa4",
                sc: "#,##0.00\xa0\xa4",
                sd: "\xa4\xa0#,##0.00",
                "sd-Arab": "\xa4\xa0#,##0.00",
                "sd-Deva": "\xa4\xa0#,##0.00",
                se: "#,##0.00\xa0\xa4",
                "se-FI": "#,##0.00\xa0\xa4",
                "se-SE": "#,##0.00\xa0\xa4",
                seh: "#,##0.00\xa4",
                ses: "#,##0.00\xa4",
                sg: "\xa4#,##0.00;\xa4-#,##0.00",
                shi: "#,##0.00\xa4",
                "shi-Latn": "#,##0.00\xa4",
                "shi-Tfng": "#,##0.00\xa4",
                si: "\xa4#,##0.00;(\xa4#,##0.00)",
                sk: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                sl: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                smn: "#,##0.00\xa0\xa4",
                sn: "\xa4#,##0.00;(\xa4#,##0.00)",
                so: "\xa4#,##0.00;(\xa4#,##0.00)",
                "so-DJ": "\xa4#,##0.00;(\xa4#,##0.00)",
                "so-ET": "\xa4#,##0.00;(\xa4#,##0.00)",
                "so-KE": "\xa4#,##0.00;(\xa4#,##0.00)",
                sq: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sq-MK": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sq-XK": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                sr: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sr-Cyrl": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sr-Cyrl-BA": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sr-Cyrl-ME": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sr-Cyrl-XK": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sr-Latn": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sr-Latn-BA": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sr-Latn-ME": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                "sr-Latn-XK": "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                su: "\xa4#,##0.00",
                "su-Latn": "\xa4#,##0.00",
                sv: "#,##0.00\xa0\xa4",
                "sv-AX": "#,##0.00\xa0\xa4",
                "sv-FI": "#,##0.00\xa0\xa4",
                sw: "\xa4\xa0#,##0.00",
                "sw-CD": "\xa4\xa0#,##0.00",
                "sw-KE": "\xa4\xa0#,##0.00",
                "sw-UG": "\xa4\xa0#,##0.00",
                ta: "\xa4#,##0.00;(\xa4#,##0.00)",
                "ta-LK": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ta-MY": "\xa4#,##0.00;(\xa4#,##0.00)",
                "ta-SG": "\xa4#,##0.00;(\xa4#,##0.00)",
                te: "\xa4#,##0.00;(\xa4#,##0.00)",
                teo: "\xa4#,##0.00;(\xa4#,##0.00)",
                "teo-KE": "\xa4#,##0.00;(\xa4#,##0.00)",
                tg: "#,##0.00\xa0\xa4",
                th: "\xa4#,##0.00;(\xa4#,##0.00)",
                ti: "\xa4#,##0.00",
                "ti-ER": "\xa4#,##0.00",
                tk: "#,##0.00\xa0\xa4",
                to: "\xa4\xa0#,##0.00",
                tr: "\xa4#,##0.00;(\xa4#,##0.00)",
                "tr-CY": "\xa4#,##0.00;(\xa4#,##0.00)",
                tt: "#,##0.00\xa0\xa4",
                twq: "#,##0.00\xa4",
                tzm: "#,##0.00\xa0\xa4",
                ug: "\xa4#,##0.00;(\xa4#,##0.00)",
                uk: "#,##0.00\xa0\xa4",
                und: "\xa4\xa0#,##0.00",
                ur: "\xa4#,##0.00;(\xa4#,##0.00)",
                "ur-IN": "\xa4#,##0.00;(\xa4#,##0.00)",
                uz: "#,##0.00\xa0\xa4",
                "uz-Arab": "\xa4\xa0#,##0.00",
                "uz-Cyrl": "#,##0.00\xa0\xa4",
                "uz-Latn": "#,##0.00\xa0\xa4",
                vai: "\xa4#,##0.00;(\xa4#,##0.00)",
                "vai-Latn": "\xa4#,##0.00;(\xa4#,##0.00)",
                "vai-Vaii": "\xa4#,##0.00;(\xa4#,##0.00)",
                vi: "#,##0.00\xa0\xa4",
                vun: "\xa4#,##0.00",
                wae: "\xa4\xa0#,##0.00",
                wo: "\xa4\xa0#,##0.00",
                xh: "\xa4#,##0.00",
                xog: "#,##0.00\xa0\xa4",
                yav: "#,##0.00\xa0\xa4;(#,##0.00\xa0\xa4)",
                yi: "\xa4\xa0#,##0.00",
                yo: "\xa4#,##0.00;(\xa4#,##0.00)",
                "yo-BJ": "\xa4#,##0.00;(\xa4#,##0.00)",
                yrl: "\xa4\xa0#,##0.00",
                "yrl-CO": "\xa4\xa0#,##0.00",
                "yrl-VE": "\xa4\xa0#,##0.00",
                yue: "\xa4#,##0.00;(\xa4#,##0.00)",
                "yue-Hans": "\xa4#,##0.00;(\xa4#,##0.00)",
                "yue-Hant": "\xa4#,##0.00;(\xa4#,##0.00)",
                zgh: "#,##0.00\xa4",
                zh: "\xa4#,##0.00;(\xa4#,##0.00)",
                "zh-Hans": "\xa4#,##0.00;(\xa4#,##0.00)",
                "zh-Hans-HK": "\xa4#,##0.00;(\xa4#,##0.00)",
                "zh-Hans-MO": "\xa4#,##0.00;(\xa4#,##0.00)",
                "zh-Hans-SG": "\xa4#,##0.00;(\xa4#,##0.00)",
                "zh-Hant": "\xa4#,##0.00;(\xa4#,##0.00)",
                "zh-Hant-HK": "\xa4#,##0.00;(\xa4#,##0.00)",
                "zh-Hant-MO": "\xa4#,##0.00;(\xa4#,##0.00)",
                zu: "\xa4#,##0.00;(\xa4#,##0.00)"
            };

            /**
             * DevExtreme (esm/localization/intl/number.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var CURRENCY_STYLES = ["standard", "accounting"];
            var MAX_FRACTION_DIGITS = 20;
            var detectCurrencySymbolRegex = /([^\s0]+)?(\s*)0*[.,]*0*(\s*)([^\s0]+)?/;
            var formattersCache$1 = {};
            var getFormatter$2 = format => {
                var key = localizationCoreUtils.locale() + "/" + JSON.stringify(format);
                if (!formattersCache$1[key]) {
                    formattersCache$1[key] = new Intl.NumberFormat(localizationCoreUtils.locale(), format).format;
                }
                return formattersCache$1[key]
            };
            var getCurrencyFormatter = currency => new Intl.NumberFormat(localizationCoreUtils.locale(), {
                style: "currency",
                currency: currency
            });
            var intlNumberLocalization = {
                engine: function() {
                    return "intl"
                },
                _formatNumberCore: function(value, format, formatConfig) {
                    if ("exponential" === format) {
                        return this.callBase.apply(this, arguments)
                    }
                    return getFormatter$2(this._normalizeFormatConfig(format, formatConfig, value))(value)
                },
                _normalizeFormatConfig: function(format, formatConfig, value) {
                    var config;
                    if ("decimal" === format) {
                        var fractionDigits = String(value).split(".")[1];
                        config = {
                            minimumIntegerDigits: formatConfig.precision || void 0,
                            useGrouping: false,
                            maximumFractionDigits: fractionDigits && fractionDigits.length,
                            round: value < 0 ? "ceil" : "floor"
                        };
                    } else {
                        config = this._getPrecisionConfig(formatConfig.precision);
                    }
                    if ("percent" === format) {
                        config.style = "percent";
                    } else if ("currency" === format) {
                        var _formatConfig$useCurr;
                        var useAccountingStyle = null !== (_formatConfig$useCurr = formatConfig.useCurrencyAccountingStyle) && void 0 !== _formatConfig$useCurr ? _formatConfig$useCurr : configMethod().defaultUseCurrencyAccountingStyle;
                        config.style = "currency";
                        config.currency = formatConfig.currency || configMethod().defaultCurrency;
                        config.currencySign = CURRENCY_STYLES[+useAccountingStyle];
                    }
                    return config
                },
                _getPrecisionConfig: function(precision) {
                    var config;
                    if (null === precision) {
                        config = {
                            minimumFractionDigits: 0,
                            maximumFractionDigits: MAX_FRACTION_DIGITS
                        };
                    } else {
                        config = {
                            minimumFractionDigits: precision || 0,
                            maximumFractionDigits: precision || 0
                        };
                    }
                    return config
                },
                format: function(value, _format) {
                    if ("number" !== typeof value) {
                        return value
                    }
                    _format = this._normalizeFormat(_format);
                    if ("default" === _format.currency) {
                        _format.currency = configMethod().defaultCurrency;
                    }
                    if (!_format || "function" !== typeof _format && !_format.type && !_format.formatter) {
                        return getFormatter$2(_format)(value)
                    }
                    return this.callBase.apply(this, arguments)
                },
                _getCurrencySymbolInfo: function(currency) {
                    var formatter = getCurrencyFormatter(currency);
                    return this._extractCurrencySymbolInfo(formatter.format(0))
                },
                _extractCurrencySymbolInfo: function(currencyValueString) {
                    var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];
                    var position = match[1] ? "before" : "after";
                    var symbol = match[1] || match[4] || "";
                    var delimiter = match[2] || match[3] || "";
                    return {
                        position: position,
                        symbol: symbol,
                        delimiter: delimiter
                    }
                },
                getCurrencySymbol: function(currency) {
                    if (!currency) {
                        currency = configMethod().defaultCurrency;
                    }
                    var symbolInfo = this._getCurrencySymbolInfo(currency);
                    return {
                        symbol: symbolInfo.symbol
                    }
                },
                getOpenXmlCurrencyFormat: function(currency) {
                    var targetCurrency = currency || configMethod().defaultCurrency;
                    var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;
                    var closestAccountingFormat = localizationCoreUtils.getValueByClosestLocale(locale => accountingFormats[locale]);
                    return openXmlCurrencyFormat(currencySymbol, closestAccountingFormat)
                }
            };

            /**
             * DevExtreme (esm/localization/number.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var hasIntl$1 = "undefined" !== typeof Intl;
            var MAX_LARGE_NUMBER_POWER = 4;
            var DECIMAL_BASE = 10;
            var NUMERIC_FORMATS = ["currency", "fixedpoint", "exponential", "percent", "decimal"];
            var LargeNumberFormatPostfixes = {
                1: "K",
                2: "M",
                3: "B",
                4: "T"
            };
            var LargeNumberFormatPowers = {
                largenumber: "auto",
                thousands: 1,
                millions: 2,
                billions: 3,
                trillions: 4
            };
            var numberLocalization = exports("au", dependencyInjector({
                engine: function() {
                    return "base"
                },
                numericFormats: NUMERIC_FORMATS,
                defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,
                _parseNumberFormatString: function(formatType) {
                    var formatObject = {};
                    if (!formatType || "string" !== typeof formatType) {
                        return
                    }
                    var formatList = formatType.toLowerCase().split(" ");
                    each(formatList, (index, value) => {
                        if (NUMERIC_FORMATS.includes(value)) {
                            formatObject.formatType = value;
                        } else if (value in LargeNumberFormatPowers) {
                            formatObject.power = LargeNumberFormatPowers[value];
                        }
                    });
                    if (formatObject.power && !formatObject.formatType) {
                        formatObject.formatType = "fixedpoint";
                    }
                    if (formatObject.formatType) {
                        return formatObject
                    }
                },
                _calculateNumberPower: function(value, base, minPower, maxPower) {
                    var number = Math.abs(value);
                    var power = 0;
                    if (number > 1) {
                        while (number && number >= base && (void 0 === maxPower || power < maxPower)) {
                            power++;
                            number /= base;
                        }
                    } else if (number > 0 && number < 1) {
                        while (number < 1 && (void 0 === minPower || power > minPower)) {
                            power--;
                            number *= base;
                        }
                    }
                    return power
                },
                _getNumberByPower: function(number, power, base) {
                    var result = number;
                    while (power > 0) {
                        result /= base;
                        power--;
                    }
                    while (power < 0) {
                        result *= base;
                        power++;
                    }
                    return result
                },
                _formatNumber: function(value, formatObject, formatConfig) {
                    if ("auto" === formatObject.power) {
                        formatObject.power = this._calculateNumberPower(value, 1e3, 0, MAX_LARGE_NUMBER_POWER);
                    }
                    if (formatObject.power) {
                        value = this._getNumberByPower(value, formatObject.power, 1e3);
                    }
                    var powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || "";
                    var result = this._formatNumberCore(value, formatObject.formatType, formatConfig);
                    result = result.replace(/(\d|.$)(\D*)$/, "$1" + powerPostfix + "$2");
                    return result
                },
                _formatNumberExponential: function(value, formatConfig) {
                    var power = this._calculateNumberPower(value, DECIMAL_BASE);
                    var number = this._getNumberByPower(value, power, DECIMAL_BASE);
                    if (void 0 === formatConfig.precision) {
                        formatConfig.precision = 1;
                    }
                    if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {
                        power++;
                        number /= DECIMAL_BASE;
                    }
                    var powString = (power >= 0 ? "+" : "") + power.toString();
                    return this._formatNumberCore(number, "fixedpoint", formatConfig) + "E" + powString
                },
                _addZeroes: function(value, precision) {
                    var multiplier = Math.pow(10, precision);
                    var sign = value < 0 ? "-" : "";
                    value = (Math.abs(value) * multiplier >>> 0) / multiplier;
                    var result = value.toString();
                    while (result.length < precision) {
                        result = "0" + result;
                    }
                    return sign + result
                },
                _addGroupSeparators: function(value) {
                    var parts = value.toString().split(".");
                    return parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, configMethod().thousandsSeparator) + (parts[1] ? configMethod().decimalSeparator + parts[1] : "")
                },
                _formatNumberCore: function(value, format, formatConfig) {
                    if ("exponential" === format) {
                        return this._formatNumberExponential(value, formatConfig)
                    }
                    if ("decimal" !== format && null !== formatConfig.precision) {
                        formatConfig.precision = formatConfig.precision || 0;
                    }
                    if ("percent" === format) {
                        value *= 100;
                    }
                    if (void 0 !== formatConfig.precision) {
                        if ("decimal" === format) {
                            value = this._addZeroes(value, formatConfig.precision);
                        } else {
                            value = null === formatConfig.precision ? value.toPrecision() : toFixed(value, formatConfig.precision);
                        }
                    }
                    if ("decimal" !== format) {
                        value = this._addGroupSeparators(value);
                    } else {
                        value = value.toString().replace(".", configMethod().decimalSeparator);
                    }
                    if ("percent" === format) {
                        value += "%";
                    }
                    return value
                },
                _normalizeFormat: function(format) {
                    if (!format) {
                        return {}
                    }
                    if ("function" === typeof format) {
                        return format
                    }
                    if (!isPlainObject(format)) {
                        format = {
                            type: format
                        };
                    }
                    return format
                },
                _getSeparators: function() {
                    return {
                        decimalSeparator: this.getDecimalSeparator(),
                        thousandsSeparator: this.getThousandsSeparator()
                    }
                },
                getThousandsSeparator: function() {
                    return this.format(1e4, "fixedPoint")[2]
                },
                getDecimalSeparator: function() {
                    return this.format(1.2, {
                        type: "fixedPoint",
                        precision: 1
                    })[1]
                },
                convertDigits: function(value, toStandard) {
                    var digits = this.format(90, "decimal");
                    if ("string" !== typeof value || "0" === digits[1]) {
                        return value
                    }
                    var fromFirstDigit = toStandard ? digits[1] : "0";
                    var toFirstDigit = toStandard ? "0" : digits[1];
                    var fromLastDigit = toStandard ? digits[0] : "9";
                    var regExp = new RegExp("[" + fromFirstDigit + "-" + fromLastDigit + "]", "g");
                    return value.replace(regExp, char => String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0))))
                },
                getNegativeEtalonRegExp: function(format) {
                    var separators = this._getSeparators();
                    var digitalRegExp = new RegExp("[0-9" + escapeRegExp(separators.decimalSeparator + separators.thousandsSeparator) + "]+", "g");
                    var negativeEtalon = this.format(-1, format).replace(digitalRegExp, "1");
                    ["\\", "(", ")", "[", "]", "*", "+", "$", "^", "?", "|", "{", "}"].forEach(char => {
                        negativeEtalon = negativeEtalon.replace(new RegExp("\\".concat(char), "g"), "\\".concat(char));
                    });
                    negativeEtalon = negativeEtalon.replace(/ /g, "\\s");
                    negativeEtalon = negativeEtalon.replace(/1/g, ".*");
                    return new RegExp(negativeEtalon, "g")
                },
                getSign: function(text, format) {
                    if (!format) {
                        if ("-" === text.replace(/[^0-9-]/g, "").charAt(0)) {
                            return -1
                        }
                        return 1
                    }
                    var negativeEtalon = this.getNegativeEtalonRegExp(format);
                    return text.match(negativeEtalon) ? -1 : 1
                },
                format: function(value, _format) {
                    if ("number" !== typeof value) {
                        return value
                    }
                    if ("number" === typeof _format) {
                        return value
                    }
                    _format = _format && _format.formatter || _format;
                    if ("function" === typeof _format) {
                        return _format(value)
                    }
                    _format = this._normalizeFormat(_format);
                    if (!_format.type) {
                        _format.type = "decimal";
                    }
                    var numberConfig = this._parseNumberFormatString(_format.type);
                    if (!numberConfig) {
                        var formatterConfig = this._getSeparators();
                        formatterConfig.unlimitedIntegerDigits = _format.unlimitedIntegerDigits;
                        return this.convertDigits(getFormatter$3(_format.type, formatterConfig)(value))
                    }
                    return this._formatNumber(value, numberConfig, _format)
                },
                parse: function(text, format) {
                    if (!text) {
                        return
                    }
                    if (format && format.parser) {
                        return format.parser(text)
                    }
                    text = this.convertDigits(text, true);
                    if (format && "string" !== typeof format) {
                        errors$2.log("W0011");
                    }
                    var decimalSeparator = this.getDecimalSeparator();
                    var regExp = new RegExp("[^0-9" + escapeRegExp(decimalSeparator) + "]", "g");
                    var cleanedText = text.replace(regExp, "").replace(decimalSeparator, ".").replace(/\.$/g, "");
                    if ("." === cleanedText || "" === cleanedText) {
                        return null
                    }
                    if (this._calcSignificantDigits(cleanedText) > 15) {
                        return NaN
                    }
                    var parsed = +cleanedText * this.getSign(text, format);
                    format = this._normalizeFormat(format);
                    var formatConfig = this._parseNumberFormatString(format.type);
                    var power = null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.power;
                    if (power) {
                        if ("auto" === power) {
                            var match = text.match(/\d(K|M|B|T)/);
                            if (match) {
                                power = Object.keys(LargeNumberFormatPostfixes).find(power => LargeNumberFormatPostfixes[power] === match[1]);
                            }
                        }
                        parsed *= Math.pow(10, 3 * power);
                    }
                    if ("percent" === (null === formatConfig || void 0 === formatConfig ? void 0 : formatConfig.formatType)) {
                        parsed /= 100;
                    }
                    return parsed
                },
                _calcSignificantDigits: function(text) {
                    var [integer, fractional] = text.split(".");
                    var calcDigitsAfterLeadingZeros = digits => {
                        var index = -1;
                        for (var i = 0; i < digits.length; i++) {
                            if ("0" !== digits[i]) {
                                index = i;
                                break
                            }
                        }
                        return index > -1 ? digits.length - index : 0
                    };
                    var result = 0;
                    if (integer) {
                        result += calcDigitsAfterLeadingZeros(integer.split(""));
                    }
                    if (fractional) {
                        result += calcDigitsAfterLeadingZeros(fractional.split("").reverse());
                    }
                    return result
                }
            }));
            numberLocalization.inject(currencyLocalization);
            if (hasIntl$1) {
                numberLocalization.inject(intlNumberLocalization);
            }

            /**
             * DevExtreme (esm/events/gesture/emitter.gesture.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ready$1 = readyCallbacks$1.add;
            var abs = Math.abs;
            var SLEEP = 0;
            var INITED = 1;
            var STARTED = 2;
            var TOUCH_BOUNDARY = 10;
            var IMMEDIATE_TOUCH_BOUNDARY = 0;
            var IMMEDIATE_TIMEOUT = 180;
            var supportPointerEvents = function() {
                return styleProp("pointer-events")
            };
            var setGestureCover = callOnce((function() {
                var isDesktop = "desktop" === devices.real().deviceType;
                if (!supportPointerEvents() || !isDesktop) {
                    return noop
                }
                var $cover = $("<div>").addClass("dx-gesture-cover").css("pointerEvents", "none");
                eventsEngine.subscribeGlobal($cover, "dxmousewheel", (function(e) {
                    e.preventDefault();
                }));
                ready$1((function() {
                    $cover.appendTo("body");
                }));
                return function(toggle, cursor) {
                    $cover.css("pointerEvents", toggle ? "all" : "none");
                    toggle && $cover.css("cursor", cursor);
                }
            }));
            var gestureCover = function(toggle, cursor) {
                var gestureCoverStrategy = setGestureCover();
                gestureCoverStrategy(toggle, cursor);
            };
            var GestureEmitter = exports("aH", Emitter.inherit({
                gesture: true,
                configure: function(data) {
                    this.getElement().css("msTouchAction", data.immediate ? "pinch-zoom" : "");
                    this.callBase(data);
                },
                allowInterruptionByMouseWheel: function() {
                    return this._stage !== STARTED
                },
                getDirection: function() {
                    return this.direction
                },
                _cancel: function() {
                    this.callBase.apply(this, arguments);
                    this._toggleGestureCover(false);
                    this._stage = SLEEP;
                },
                start: function(e) {
                    if (e._needSkipEvent || needSkipEvent(e)) {
                        this._cancel(e);
                        return
                    }
                    this._startEvent = createEvent(e);
                    this._startEventData = eventData(e);
                    this._stage = INITED;
                    this._init(e);
                    this._setupImmediateTimer();
                },
                _setupImmediateTimer: function() {
                    var _this$immediateTimeou;
                    clearTimeout(this._immediateTimer);
                    this._immediateAccepted = false;
                    if (!this.immediate) {
                        return
                    }
                    if (0 === this.immediateTimeout) {
                        this._immediateAccepted = true;
                        return
                    }
                    this._immediateTimer = setTimeout(function() {
                        this._immediateAccepted = true;
                    }.bind(this), null !== (_this$immediateTimeou = this.immediateTimeout) && void 0 !== _this$immediateTimeou ? _this$immediateTimeou : IMMEDIATE_TIMEOUT);
                },
                move: function(e) {
                    if (this._stage === INITED && this._directionConfirmed(e)) {
                        this._stage = STARTED;
                        this._resetActiveElement();
                        this._toggleGestureCover(true);
                        this._clearSelection(e);
                        this._adjustStartEvent(e);
                        this._start(this._startEvent);
                        if (this._stage === SLEEP) {
                            return
                        }
                        this._requestAccept(e);
                        this._move(e);
                        this._forgetAccept();
                    } else if (this._stage === STARTED) {
                        this._clearSelection(e);
                        this._move(e);
                    }
                },
                _directionConfirmed: function(e) {
                    var touchBoundary = this._getTouchBoundary(e);
                    var delta = eventDelta(this._startEventData, eventData(e));
                    var deltaX = abs(delta.x);
                    var deltaY = abs(delta.y);
                    var horizontalMove = this._validateMove(touchBoundary, deltaX, deltaY);
                    var verticalMove = this._validateMove(touchBoundary, deltaY, deltaX);
                    var direction = this.getDirection(e);
                    var bothAccepted = "both" === direction && (horizontalMove || verticalMove);
                    var horizontalAccepted = "horizontal" === direction && horizontalMove;
                    var verticalAccepted = "vertical" === direction && verticalMove;
                    return bothAccepted || horizontalAccepted || verticalAccepted || this._immediateAccepted
                },
                _validateMove: function(touchBoundary, mainAxis, crossAxis) {
                    return mainAxis && mainAxis >= touchBoundary && (this.immediate ? mainAxis >= crossAxis : true)
                },
                _getTouchBoundary: function(e) {
                    return this.immediate || isDxMouseWheelEvent(e) ? IMMEDIATE_TOUCH_BOUNDARY : TOUCH_BOUNDARY
                },
                _adjustStartEvent: function(e) {
                    var touchBoundary = this._getTouchBoundary(e);
                    var delta = eventDelta(this._startEventData, eventData(e));
                    this._startEvent.pageX += sign(delta.x) * touchBoundary;
                    this._startEvent.pageY += sign(delta.y) * touchBoundary;
                },
                _resetActiveElement: function() {
                    if ("ios" === devices.real().platform && this.getElement().find(":focus").length) {
                        resetActiveElement();
                    }
                },
                _toggleGestureCover: function(toggle) {
                    this._toggleGestureCoverImpl(toggle);
                },
                _toggleGestureCoverImpl: function(toggle) {
                    var isStarted = this._stage === STARTED;
                    if (isStarted) {
                        gestureCover(toggle, this.getElement().css("cursor"));
                    }
                },
                _clearSelection: function(e) {
                    if (isDxMouseWheelEvent(e) || isTouchEvent(e)) {
                        return
                    }
                    clearSelection();
                },
                end: function(e) {
                    this._toggleGestureCover(false);
                    if (this._stage === STARTED) {
                        this._end(e);
                    } else if (this._stage === INITED) {
                        this._stop(e);
                    }
                    this._stage = SLEEP;
                },
                dispose: function() {
                    clearTimeout(this._immediateTimer);
                    this.callBase.apply(this, arguments);
                    this._toggleGestureCover(false);
                },
                _init: noop,
                _start: noop,
                _move: noop,
                _stop: noop,
                _end: noop
            }));
            GestureEmitter.initialTouchBoundary = TOUCH_BOUNDARY;
            GestureEmitter.touchBoundary = function(newBoundary) {
                if (isDefined(newBoundary)) {
                    TOUCH_BOUNDARY = newBoundary;
                    return
                }
                return TOUCH_BOUNDARY
            };

            /**
             * DevExtreme (esm/events/drag.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DRAG_START_EVENT = exports("a$", "dxdragstart");
            var DRAG_EVENT = exports("b0", "dxdrag");
            var DRAG_END_EVENT = exports("b1", "dxdragend");
            var DRAG_ENTER_EVENT = exports("eh", "dxdragenter");
            var DRAG_LEAVE_EVENT = exports("ei", "dxdragleave");
            var DROP_EVENT = exports("g8", "dxdrop");
            var DX_DRAG_EVENTS_COUNT_KEY = "dxDragEventsCount";
            var knownDropTargets = [];
            var knownDropTargetSelectors = [];
            var knownDropTargetConfigs = [];
            var dropTargetRegistration = {
                setup: function(element, data) {
                    var knownDropTarget = knownDropTargets.includes(element);
                    if (!knownDropTarget) {
                        knownDropTargets.push(element);
                        knownDropTargetSelectors.push([]);
                        knownDropTargetConfigs.push(data || {});
                    }
                },
                add: function(element, handleObj) {
                    var index = knownDropTargets.indexOf(element);
                    this.updateEventsCounter(element, handleObj.type, 1);
                    var selector = handleObj.selector;
                    if (!knownDropTargetSelectors[index].includes(selector)) {
                        knownDropTargetSelectors[index].push(selector);
                    }
                },
                updateEventsCounter: function(element, event, value) {
                    if ([DRAG_ENTER_EVENT, DRAG_LEAVE_EVENT, DROP_EVENT].indexOf(event) > -1) {
                        var eventsCount = data(element, DX_DRAG_EVENTS_COUNT_KEY) || 0;
                        data(element, DX_DRAG_EVENTS_COUNT_KEY, Math.max(0, eventsCount + value));
                    }
                },
                remove: function(element, handleObj) {
                    this.updateEventsCounter(element, handleObj.type, -1);
                },
                teardown: function(element) {
                    var handlersCount = data(element, DX_DRAG_EVENTS_COUNT_KEY);
                    if (!handlersCount) {
                        var index = knownDropTargets.indexOf(element);
                        knownDropTargets.splice(index, 1);
                        knownDropTargetSelectors.splice(index, 1);
                        knownDropTargetConfigs.splice(index, 1);
                        removeData(element, DX_DRAG_EVENTS_COUNT_KEY);
                    }
                }
            };
            registerEvent$1(DRAG_ENTER_EVENT, dropTargetRegistration);
            registerEvent$1(DRAG_LEAVE_EVENT, dropTargetRegistration);
            registerEvent$1(DROP_EVENT, dropTargetRegistration);
            var getItemDelegatedTargets = function($element) {
                var dropTargetIndex = knownDropTargets.indexOf($element.get(0));
                var dropTargetSelectors = knownDropTargetSelectors[dropTargetIndex].filter(selector => selector);
                var $delegatedTargets = $element.find(dropTargetSelectors.join(", "));
                if (knownDropTargetSelectors[dropTargetIndex].includes(void 0)) {
                    $delegatedTargets = $delegatedTargets.add($element);
                }
                return $delegatedTargets
            };
            var getItemConfig = function($element) {
                var dropTargetIndex = knownDropTargets.indexOf($element.get(0));
                return knownDropTargetConfigs[dropTargetIndex]
            };
            var getItemPosition = function(dropTargetConfig, $element) {
                if (dropTargetConfig.itemPositionFunc) {
                    return dropTargetConfig.itemPositionFunc($element)
                } else {
                    return $element.offset()
                }
            };
            var getItemSize = function(dropTargetConfig, $element) {
                if (dropTargetConfig.itemSizeFunc) {
                    return dropTargetConfig.itemSizeFunc($element)
                }
                return {
                    width: $element.get(0).getBoundingClientRect().width,
                    height: $element.get(0).getBoundingClientRect().height
                }
            };
            var DragEmitter = GestureEmitter.inherit({
                ctor: function(element) {
                    this.callBase(element);
                    this.direction = "both";
                },
                _init: function(e) {
                    this._initEvent = e;
                },
                _start: function(e) {
                    e = this._fireEvent(DRAG_START_EVENT, this._initEvent);
                    this._maxLeftOffset = e.maxLeftOffset;
                    this._maxRightOffset = e.maxRightOffset;
                    this._maxTopOffset = e.maxTopOffset;
                    this._maxBottomOffset = e.maxBottomOffset;
                    if (e.targetElements || null === e.targetElements) {
                        var dropTargets = wrapToArray(e.targetElements || []);
                        this._dropTargets = map(dropTargets, (function(element) {
                            return $(element).get(0)
                        }));
                    } else {
                        this._dropTargets = knownDropTargets;
                    }
                },
                _move: function(e) {
                    var eventData$1 = eventData(e);
                    var dragOffset = this._calculateOffset(eventData$1);
                    e = this._fireEvent(DRAG_EVENT, e, {
                        offset: dragOffset
                    });
                    this._processDropTargets(e);
                    if (!e._cancelPreventDefault) {
                        e.preventDefault();
                    }
                },
                _calculateOffset: function(eventData) {
                    return {
                        x: this._calculateXOffset(eventData),
                        y: this._calculateYOffset(eventData)
                    }
                },
                _calculateXOffset: function(eventData) {
                    if ("vertical" !== this.direction) {
                        var offset = eventData.x - this._startEventData.x;
                        return this._fitOffset(offset, this._maxLeftOffset, this._maxRightOffset)
                    }
                    return 0
                },
                _calculateYOffset: function(eventData) {
                    if ("horizontal" !== this.direction) {
                        var offset = eventData.y - this._startEventData.y;
                        return this._fitOffset(offset, this._maxTopOffset, this._maxBottomOffset)
                    }
                    return 0
                },
                _fitOffset: function(offset, minOffset, maxOffset) {
                    if (null != minOffset) {
                        offset = Math.max(offset, -minOffset);
                    }
                    if (null != maxOffset) {
                        offset = Math.min(offset, maxOffset);
                    }
                    return offset
                },
                _processDropTargets: function(e) {
                    var target = this._findDropTarget(e);
                    var sameTarget = target === this._currentDropTarget;
                    if (!sameTarget) {
                        this._fireDropTargetEvent(e, DRAG_LEAVE_EVENT);
                        this._currentDropTarget = target;
                        this._fireDropTargetEvent(e, DRAG_ENTER_EVENT);
                    }
                },
                _fireDropTargetEvent: function(event, eventName) {
                    if (!this._currentDropTarget) {
                        return
                    }
                    var eventData = {
                        type: eventName,
                        originalEvent: event,
                        draggingElement: this._$element.get(0),
                        target: this._currentDropTarget
                    };
                    fireEvent(eventData);
                },
                _findDropTarget: function(e) {
                    var that = this;
                    var result;
                    each(knownDropTargets, (function(_, target) {
                        if (!that._checkDropTargetActive(target)) {
                            return
                        }
                        var $target = $(target);
                        each(getItemDelegatedTargets($target), (function(_, delegatedTarget) {
                            var $delegatedTarget = $(delegatedTarget);
                            if (that._checkDropTarget(getItemConfig($target), $delegatedTarget, $(result), e)) {
                                result = delegatedTarget;
                            }
                        }));
                    }));
                    return result
                },
                _checkDropTargetActive: function(target) {
                    var active = false;
                    each(this._dropTargets, (function(_, activeTarget) {
                        active = active || activeTarget === target || contains(activeTarget, target);
                        return !active
                    }));
                    return active
                },
                _checkDropTarget: function(config, $target, $prevTarget, e) {
                    var isDraggingElement = $target.get(0) === $(e.target).get(0);
                    if (isDraggingElement) {
                        return false
                    }
                    var targetPosition = getItemPosition(config, $target);
                    if (e.pageX < targetPosition.left) {
                        return false
                    }
                    if (e.pageY < targetPosition.top) {
                        return false
                    }
                    var targetSize = getItemSize(config, $target);
                    if (e.pageX > targetPosition.left + targetSize.width) {
                        return false
                    }
                    if (e.pageY > targetPosition.top + targetSize.height) {
                        return false
                    }
                    if ($prevTarget.length && $prevTarget.closest($target).length) {
                        return false
                    }
                    if (config.checkDropTarget && !config.checkDropTarget($target, e)) {
                        return false
                    }
                    return $target
                },
                _end: function(e) {
                    var eventData$1 = eventData(e);
                    this._fireEvent(DRAG_END_EVENT, e, {
                        offset: this._calculateOffset(eventData$1)
                    });
                    this._fireDropTargetEvent(e, DROP_EVENT);
                    delete this._currentDropTarget;
                }
            });
            registerEmitter({
                emitter: DragEmitter,
                events: [DRAG_START_EVENT, DRAG_EVENT, DRAG_END_EVENT]
            });

            /**
             * DevExtreme (esm/mobile/hide_callback.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var hideCallback = function() {
                var callbacks = [];
                return {
                    add: function(callback) {
                        if (!callbacks.includes(callback)) {
                            callbacks.push(callback);
                        }
                    },
                    remove: function(callback) {
                        var indexOfCallback = callbacks.indexOf(callback);
                        if (-1 !== indexOfCallback) {
                            callbacks.splice(indexOfCallback, 1);
                        }
                    },
                    fire: function() {
                        var callback = callbacks.pop();
                        var result = !!callback;
                        if (result) {
                            callback();
                        }
                        return result
                    },
                    hasCallback: function() {
                        return callbacks.length > 0
                    }
                }
            }();

            /**
             * DevExtreme (esm/ui/overlay/z_index.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var baseZIndex = 1500;
            var zIndexStack = [];
            var base = ZIndex => {
                baseZIndex = ensureDefined(ZIndex, baseZIndex);
                return baseZIndex
            };
            var create = exports("bk", function() {
                var baseIndex = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : baseZIndex;
                var length = zIndexStack.length;
                var index = (length ? zIndexStack[length - 1] : baseIndex) + 1;
                zIndexStack.push(index);
                return index
            });
            var remove = exports("bl", zIndex => {
                var position = zIndexStack.indexOf(zIndex);
                if (position >= 0) {
                    zIndexStack.splice(position, 1);
                }
            });
            var isLastZIndexInStack = exports("bj", zIndex => zIndexStack.length && zIndexStack[zIndexStack.length - 1] === zIndex);

            /**
             * DevExtreme (esm/ui/widget/swatch_container.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var SWATCH_CONTAINER_CLASS_PREFIX = "dx-swatch-";
            var getSwatchContainer = element => {
                var $element = $(element);
                var swatchContainer = $element.closest('[class^="'.concat(SWATCH_CONTAINER_CLASS_PREFIX, '"], [class*=" ').concat(SWATCH_CONTAINER_CLASS_PREFIX, '"]'));
                var viewport = value();
                if (!swatchContainer.length) {
                    return viewport
                }
                var swatchClassRegex = new RegExp("(\\s|^)(".concat(SWATCH_CONTAINER_CLASS_PREFIX, ".*?)(\\s|$)"));
                var swatchClass = swatchContainer[0].className.match(swatchClassRegex)[2];
                var viewportSwatchContainer = viewport.children("." + swatchClass);
                if (!viewportSwatchContainer.length) {
                    viewportSwatchContainer = $("<div>").addClass(swatchClass).appendTo(viewport);
                }
                return viewportSwatchContainer
            };
            var swatchContainer = exports("g7", {
                getSwatchContainer: getSwatchContainer
            });

            /**
             * DevExtreme (esm/ui/overlay/overlay_position_controller.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var window$2 = getWindow();
            var OVERLAY_POSITION_ALIASES = {
                top: {
                    my: "top center",
                    at: "top center"
                },
                bottom: {
                    my: "bottom center",
                    at: "bottom center"
                },
                right: {
                    my: "right center",
                    at: "right center"
                },
                left: {
                    my: "left center",
                    at: "left center"
                },
                center: {
                    my: "center",
                    at: "center"
                },
                "right bottom": {
                    my: "right bottom",
                    at: "right bottom"
                },
                "right top": {
                    my: "right top",
                    at: "right top"
                },
                "left bottom": {
                    my: "left bottom",
                    at: "left bottom"
                },
                "left top": {
                    my: "left top",
                    at: "left top"
                }
            };
            var OVERLAY_DEFAULT_BOUNDARY_OFFSET = {
                h: 0,
                v: 0
            };
            class OverlayPositionController {
                constructor(_ref) {
                    var {
                        position: position,
                        container: container,
                        visualContainer: visualContainer,
                        $root: $root,
                        $content: $content,
                        $wrapper: $wrapper,
                        onPositioned: onPositioned,
                        onVisualPositionChanged: onVisualPositionChanged,
                        restorePosition: restorePosition,
                        _fixWrapperPosition: _fixWrapperPosition,
                        _skipContentPositioning: _skipContentPositioning
                    } = _ref;
                    this._props = {
                        position: position,
                        container: container,
                        visualContainer: visualContainer,
                        restorePosition: restorePosition,
                        onPositioned: onPositioned,
                        onVisualPositionChanged: onVisualPositionChanged,
                        _fixWrapperPosition: _fixWrapperPosition,
                        _skipContentPositioning: _skipContentPositioning
                    };
                    this._$root = $root;
                    this._$content = $content;
                    this._$wrapper = $wrapper;
                    this._$markupContainer = void 0;
                    this._$visualContainer = void 0;
                    this._shouldRenderContentInitialPosition = true;
                    this._visualPosition = void 0;
                    this._initialPosition = void 0;
                    this._previousVisualPosition = void 0;
                    this.updateContainer(container);
                    this.updatePosition(position);
                    this.updateVisualContainer(visualContainer);
                }
                get $container() {
                    this.updateContainer();
                    return this._$markupContainer
                }
                get $visualContainer() {
                    return this._$visualContainer
                }
                get position() {
                    return this._position
                }
                set fixWrapperPosition(fixWrapperPosition) {
                    this._props._fixWrapperPosition = fixWrapperPosition;
                    this.styleWrapperPosition();
                }
                set restorePosition(restorePosition) {
                    this._props.restorePosition = restorePosition;
                }
                restorePositionOnNextRender(value) {
                    this._shouldRenderContentInitialPosition = value || !this._visualPosition;
                }
                openingHandled() {
                    var shouldRestorePosition = this._props.restorePosition;
                    this.restorePositionOnNextRender(shouldRestorePosition);
                }
                updatePosition(positionProp) {
                    this._props.position = positionProp;
                    this._position = this._normalizePosition(positionProp);
                    this.updateVisualContainer();
                }
                updateContainer() {
                    var containerProp = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._props.container;
                    this._props.container = containerProp;
                    this._$markupContainer = containerProp ? $(containerProp) : swatchContainer.getSwatchContainer(this._$root);
                    this.updateVisualContainer(this._props.visualContainer);
                }
                updateVisualContainer() {
                    var visualContainer = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this._props.visualContainer;
                    this._props.visualContainer = visualContainer;
                    this._$visualContainer = this._getVisualContainer();
                }
                detectVisualPositionChange(event) {
                    this._updateVisualPositionValue();
                    this._raisePositionedEvents(event);
                }
                positionContent() {
                    if (this._shouldRenderContentInitialPosition) {
                        this._renderContentInitialPosition();
                    } else {
                        move(this._$content, this._visualPosition);
                        this.detectVisualPositionChange();
                    }
                }
                positionWrapper() {
                    if (this._$visualContainer) {
                        positionUtils.setup(this._$wrapper, {
                            my: "top left",
                            at: "top left",
                            of: this._$visualContainer
                        });
                    }
                }
                styleWrapperPosition() {
                    var useFixed = isWindow(this.$visualContainer.get(0)) || this._props._fixWrapperPosition;
                    var positionStyle = useFixed ? "fixed" : "absolute";
                    this._$wrapper.css("position", positionStyle);
                }
                _updateVisualPositionValue() {
                    this._previousVisualPosition = this._visualPosition;
                    this._visualPosition = locate(this._$content);
                }
                _renderContentInitialPosition() {
                    this._renderBoundaryOffset();
                    resetPosition(this._$content);
                    var wrapperOverflow = this._$wrapper.css("overflow");
                    this._$wrapper.css("overflow", "hidden");
                    if (!this._props._skipContentPositioning) {
                        var resultPosition = positionUtils.setup(this._$content, this._position);
                        this._initialPosition = resultPosition;
                    }
                    this._$wrapper.css("overflow", wrapperOverflow);
                    this.detectVisualPositionChange();
                }
                _raisePositionedEvents(event) {
                    var previousPosition = this._previousVisualPosition;
                    var newPosition = this._visualPosition;
                    var isVisualPositionChanged = (null === previousPosition || void 0 === previousPosition ? void 0 : previousPosition.top) !== newPosition.top || (null === previousPosition || void 0 === previousPosition ? void 0 : previousPosition.left) !== newPosition.left;
                    if (isVisualPositionChanged) {
                        this._props.onVisualPositionChanged({
                            previousPosition: previousPosition,
                            position: newPosition,
                            event: event
                        });
                    }
                    this._props.onPositioned({
                        position: this._initialPosition
                    });
                }
                _renderBoundaryOffset() {
                    var _this$_position;
                    var boundaryOffset = null !== (_this$_position = this._position) && void 0 !== _this$_position ? _this$_position : {
                        boundaryOffset: OVERLAY_DEFAULT_BOUNDARY_OFFSET
                    };
                    this._$content.css("margin", "".concat(boundaryOffset.v, "px ").concat(boundaryOffset.h, "px"));
                }
                _getVisualContainer() {
                    var _this$_props$position, _this$_props$position2;
                    var containerProp = this._props.container;
                    var visualContainerProp = this._props.visualContainer;
                    var positionOf = isEvent(null === (_this$_props$position = this._props.position) || void 0 === _this$_props$position ? void 0 : _this$_props$position.of) ? this._props.position.of.target : null === (_this$_props$position2 = this._props.position) || void 0 === _this$_props$position2 ? void 0 : _this$_props$position2.of;
                    if (visualContainerProp) {
                        return $(visualContainerProp)
                    }
                    if (containerProp) {
                        return $(containerProp)
                    }
                    if (positionOf) {
                        return $(positionOf)
                    }
                    return $(window$2)
                }
                _normalizePosition(positionProp) {
                    var defaultPositionConfig = {
                        boundaryOffset: OVERLAY_DEFAULT_BOUNDARY_OFFSET
                    };
                    if (isDefined(positionProp)) {
                        return extend(true, {}, defaultPositionConfig, this._positionToObject(positionProp))
                    } else {
                        return defaultPositionConfig
                    }
                }
                _positionToObject(position) {
                    if (isString(position)) {
                        return extend({}, OVERLAY_POSITION_ALIASES[position])
                    }
                    return position
                }
            } exports("bc", OverlayPositionController);

            /**
             * DevExtreme (esm/ui/overlay/ui.overlay.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ready = readyCallbacks$1.add;
            var window$1 = getWindow();
            var viewPortChanged = changeCallback;
            var OVERLAY_CLASS = "dx-overlay";
            var OVERLAY_WRAPPER_CLASS = "dx-overlay-wrapper";
            var OVERLAY_CONTENT_CLASS = "dx-overlay-content";
            var OVERLAY_SHADER_CLASS = "dx-overlay-shader";
            var INNER_OVERLAY_CLASS = "dx-inner-overlay";
            var INVISIBLE_STATE_CLASS = "dx-state-invisible";
            var ANONYMOUS_TEMPLATE_NAME = "content";
            var RTL_DIRECTION_CLASS = "dx-rtl";
            var OVERLAY_STACK = [];
            var PREVENT_SAFARI_SCROLLING_CLASS = "dx-prevent-safari-scrolling";
            var TAB_KEY = "tab";
            ready(() => {
                eventsEngine.subscribeGlobal(domAdapter.getDocument(), pointer.down, e => {
                    for (var i = OVERLAY_STACK.length - 1; i >= 0; i--) {
                        if (!OVERLAY_STACK[i]._proxiedDocumentDownHandler(e)) {
                            return
                        }
                    }
                });
            });
            var Overlay = exports("bg", Widget.inherit({
                _supportedKeys: function() {
                    return extend(this.callBase(), {
                        escape: function() {
                            this.hide();
                        }
                    })
                },
                _getDefaultOptions: function() {
                    return extend(this.callBase(), {
                        activeStateEnabled: false,
                        visible: false,
                        deferRendering: true,
                        shading: true,
                        shadingColor: "",
                        wrapperAttr: {},
                        position: extend({}, OVERLAY_POSITION_ALIASES.center),
                        width: "80vw",
                        minWidth: null,
                        maxWidth: null,
                        height: "80vh",
                        minHeight: null,
                        maxHeight: null,
                        animation: {
                            show: {
                                type: "pop",
                                duration: 300,
                                from: {
                                    scale: .55
                                }
                            },
                            hide: {
                                type: "pop",
                                duration: 300,
                                from: {
                                    opacity: 1,
                                    scale: 1
                                },
                                to: {
                                    opacity: 0,
                                    scale: .55
                                }
                            }
                        },
                        closeOnOutsideClick: false,
                        hideOnOutsideClick: false,
                        _ignorePreventScrollEventsDeprecation: false,
                        onShowing: null,
                        onShown: null,
                        onHiding: null,
                        onHidden: null,
                        contentTemplate: "content",
                        innerOverlay: false,
                        restorePosition: true,
                        container: void 0,
                        visualContainer: void 0,
                        hideTopOverlayHandler: () => {
                            this.hide();
                        },
                        hideOnParentScroll: false,
                        preventScrollEvents: true,
                        onPositioned: null,
                        propagateOutsideClick: false,
                        ignoreChildEvents: true,
                        _checkParentVisibility: true,
                        _hideOnParentScrollTarget: void 0,
                        _fixWrapperPosition: false
                    })
                },
                _defaultOptionsRules: function() {
                    return this.callBase().concat([{
                        device: function() {
                            return !hasWindow()
                        },
                        options: {
                            width: null,
                            height: null,
                            animation: null,
                            _checkParentVisibility: false
                        }
                    }])
                },
                _setOptionsByReference: function() {
                    this.callBase();
                    extend(this._optionsByReference, {
                        animation: true
                    });
                },
                $wrapper: function() {
                    return this._$wrapper
                },
                _eventBindingTarget: function() {
                    return this._$content
                },
                _setDeprecatedOptions() {
                    this.callBase();
                    extend(this._deprecatedOptions, {
                        closeOnOutsideClick: {
                            since: "22.1",
                            alias: "hideOnOutsideClick"
                        }
                    });
                },
                ctor: function(element, options) {
                    this.callBase(element, options);
                    if (options) {
                        if ("preventScrollEvents" in options && !options._ignorePreventScrollEventsDeprecation) {
                            this._logDeprecatedPreventScrollEventsInfo();
                        }
                    }
                },
                _logDeprecatedPreventScrollEventsInfo() {
                    this._logDeprecatedOptionWarning("preventScrollEvents", {
                        since: "23.1",
                        message: "If you enable this option, end-users may experience scrolling issues."
                    });
                },
                _init: function() {
                    this.callBase();
                    this._initActions();
                    this._initHideOnOutsideClickHandler();
                    this._initTabTerminatorHandler();
                    this._customWrapperClass = null;
                    this._$wrapper = $("<div>").addClass(OVERLAY_WRAPPER_CLASS);
                    this._$content = $("<div>").addClass(OVERLAY_CONTENT_CLASS);
                    this._initInnerOverlayClass();
                    var $element = this.$element();
                    $element.addClass(OVERLAY_CLASS);
                    this._$wrapper.attr("data-bind", "dxControlsDescendantBindings: true");
                    this._toggleViewPortSubscription(true);
                    this._initHideTopOverlayHandler(this.option("hideTopOverlayHandler"));
                    this._parentsScrollSubscriptionInfo = {
                        handler: e => {
                            this._hideOnParentsScrollHandler(e);
                        }
                    };
                    this.warnPositionAsFunction();
                },
                warnPositionAsFunction() {
                    if (isFunction(this.option("position"))) {
                        errors$2.log("W0018");
                    }
                },
                _initInnerOverlayClass: function() {
                    this._$content.toggleClass(INNER_OVERLAY_CLASS, this.option("innerOverlay"));
                },
                _initHideTopOverlayHandler: function(handler) {
                    this._hideTopOverlayHandler = handler;
                },
                _getActionsList: function() {
                    return ["onShowing", "onShown", "onHiding", "onHidden", "onPositioned", "onVisualPositionChanged"]
                },
                _initActions: function() {
                    this._actions = {};
                    var actions = this._getActionsList();
                    each(actions, (_, action) => {
                        this._actions[action] = this._createActionByOption(action, {
                            excludeValidators: ["disabled", "readOnly"]
                        }) || noop;
                    });
                },
                _initHideOnOutsideClickHandler: function() {
                    var _this = this;
                    this._proxiedDocumentDownHandler = function() {
                        return _this._documentDownHandler(...arguments)
                    };
                },
                _initMarkup() {
                    this.callBase();
                    this._renderWrapperAttributes();
                    this._initPositionController();
                },
                _documentDownHandler: function(e) {
                    if (this._showAnimationProcessing) {
                        this._stopAnimation();
                    }
                    var isAttachedTarget = $(window$1.document).is(e.target) || contains(window$1.document, e.target);
                    var isInnerOverlay = $(e.target).closest(".".concat(INNER_OVERLAY_CLASS)).length;
                    var outsideClick = isAttachedTarget && !isInnerOverlay && !(this._$content.is(e.target) || contains(this._$content.get(0), e.target));
                    if (outsideClick && this._shouldHideOnOutsideClick(e)) {
                        this._outsideClickHandler(e);
                    }
                    return this.option("propagateOutsideClick")
                },
                _shouldHideOnOutsideClick: function(e) {
                    var {
                        hideOnOutsideClick: hideOnOutsideClick
                    } = this.option();
                    if (isFunction(hideOnOutsideClick)) {
                        return hideOnOutsideClick(e)
                    }
                    return hideOnOutsideClick
                },
                _outsideClickHandler(e) {
                    if (this.option("shading")) {
                        e.preventDefault();
                    }
                    this.hide();
                },
                _getAnonymousTemplateName: function() {
                    return ANONYMOUS_TEMPLATE_NAME
                },
                _initTemplates: function() {
                    this._templateManager.addDefaultTemplates({
                        content: new EmptyTemplate
                    });
                    this.callBase();
                },
                _isTopOverlay: function() {
                    var overlayStack = this._overlayStack();
                    for (var i = overlayStack.length - 1; i >= 0; i--) {
                        var tabbableElements = overlayStack[i]._findTabbableBounds();
                        if (tabbableElements.first || tabbableElements.last) {
                            return overlayStack[i] === this
                        }
                    }
                    return false
                },
                _overlayStack: function() {
                    return OVERLAY_STACK
                },
                _zIndexInitValue: function() {
                    return Overlay.baseZIndex()
                },
                _toggleViewPortSubscription: function(toggle) {
                    var _this2 = this;
                    viewPortChanged.remove(this._viewPortChangeHandle);
                    if (toggle) {
                        this._viewPortChangeHandle = function() {
                            _this2._viewPortChangeHandler(...arguments);
                        };
                        viewPortChanged.add(this._viewPortChangeHandle);
                    }
                },
                _viewPortChangeHandler: function() {
                    this._positionController.updateContainer(this.option("container"));
                    this._refresh();
                },
                _renderWrapperAttributes() {
                    var {
                        wrapperAttr: wrapperAttr
                    } = this.option();
                    var attributes = extend({}, wrapperAttr);
                    var classNames = attributes.class;
                    delete attributes.class;
                    this.$wrapper().attr(attributes).removeClass(this._customWrapperClass).addClass(classNames);
                    this._customWrapperClass = classNames;
                },
                _renderVisibilityAnimate: function(visible) {
                    this._stopAnimation();
                    return visible ? this._show() : this._hide()
                },
                _getAnimationConfig: function() {
                    return this._getOptionValue("animation", this)
                },
                _toggleBodyScroll: noop,
                _animateShowing: function() {
                    var _this$_getAnimationCo, _showAnimation$start, _showAnimation$comple, _this3 = this;
                    var animation = null !== (_this$_getAnimationCo = this._getAnimationConfig()) && void 0 !== _this$_getAnimationCo ? _this$_getAnimationCo : {};
                    var showAnimation = this._normalizeAnimation(animation.show, "to");
                    var startShowAnimation = null !== (_showAnimation$start = null === showAnimation || void 0 === showAnimation ? void 0 : showAnimation.start) && void 0 !== _showAnimation$start ? _showAnimation$start : noop;
                    var completeShowAnimation = null !== (_showAnimation$comple = null === showAnimation || void 0 === showAnimation ? void 0 : showAnimation.complete) && void 0 !== _showAnimation$comple ? _showAnimation$comple : noop;
                    this._animate(showAnimation, (function() {
                        if (_this3._isAnimationPaused) {
                            return
                        }
                        if (_this3.option("focusStateEnabled")) {
                            eventsEngine.trigger(_this3._focusTarget(), "focus");
                        }
                        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                            args[_key] = arguments[_key];
                        }
                        completeShowAnimation.call(_this3, ...args);
                        _this3._showAnimationProcessing = false;
                        _this3._isHidden = false;
                        _this3._actions.onShown();
                        _this3._toggleSafariScrolling();
                        _this3._showingDeferred.resolve();
                    }), (function() {
                        if (_this3._isAnimationPaused) {
                            return
                        }
                        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            args[_key2] = arguments[_key2];
                        }
                        startShowAnimation.call(_this3, ...args);
                        _this3._showAnimationProcessing = true;
                    }));
                },
                _processShowingHidingCancel: function(cancelArg, applyFunction, cancelFunction) {
                    if (isPromise$1(cancelArg)) {
                        cancelArg.then(shouldCancel => {
                            if (shouldCancel) {
                                cancelFunction();
                            } else {
                                applyFunction();
                            }
                        }).catch(() => applyFunction());
                    } else {
                        cancelArg ? cancelFunction() : applyFunction();
                    }
                },
                _show: function() {
                    this._showingDeferred = new Deferred;
                    this._parentHidden = this._isParentHidden();
                    this._showingDeferred.done(() => {
                        delete this._parentHidden;
                    });
                    if (this._parentHidden) {
                        this._isHidden = true;
                        return this._showingDeferred.resolve()
                    }
                    if (this._currentVisible) {
                        return (new Deferred).resolve().promise()
                    }
                    this._currentVisible = true;
                    if (this._isHidingActionCanceled) {
                        delete this._isHidingActionCanceled;
                        this._showingDeferred.reject();
                    } else {
                        var show = () => {
                            this._stopAnimation();
                            this._toggleBodyScroll(this.option("enableBodyScroll"));
                            this._toggleVisibility(true);
                            this._$content.css("visibility", "hidden");
                            this._$content.toggleClass(INVISIBLE_STATE_CLASS, false);
                            this._updateZIndexStackPosition(true);
                            this._positionController.openingHandled();
                            this._renderContent();
                            var showingArgs = {
                                cancel: false
                            };
                            this._actions.onShowing(showingArgs);
                            this._processShowingHidingCancel(showingArgs.cancel, () => {
                                this._$content.css("visibility", "");
                                this._renderVisibility(true);
                                this._animateShowing();
                            }, () => {
                                this._toggleVisibility(false);
                                this._$content.css("visibility", "");
                                this._$content.toggleClass(INVISIBLE_STATE_CLASS, true);
                                this._isShowingActionCanceled = true;
                                this._moveFromContainer();
                                this._toggleBodyScroll(true);
                                this.option("visible", false);
                                this._showingDeferred.resolve();
                            });
                        };
                        if (this.option("templatesRenderAsynchronously")) {
                            this._stopShowTimer();
                            this._asyncShowTimeout = setTimeout(show);
                        } else {
                            show();
                        }
                    }
                    return this._showingDeferred.promise()
                },
                _normalizeAnimation: function(showHideConfig, direction) {
                    if (showHideConfig) {
                        showHideConfig = extend({
                            type: "slide",
                            skipElementInitialStyles: true
                        }, showHideConfig);
                        if (isObject(showHideConfig[direction])) {
                            extend(showHideConfig[direction], {
                                position: this._positionController.position
                            });
                        }
                    }
                    return showHideConfig
                },
                _animateHiding: function() {
                    var _this$_getAnimationCo2, _hideAnimation$start, _hideAnimation$comple, _this4 = this;
                    var animation = null !== (_this$_getAnimationCo2 = this._getAnimationConfig()) && void 0 !== _this$_getAnimationCo2 ? _this$_getAnimationCo2 : {};
                    var hideAnimation = this._normalizeAnimation(animation.hide, "from");
                    var startHideAnimation = null !== (_hideAnimation$start = null === hideAnimation || void 0 === hideAnimation ? void 0 : hideAnimation.start) && void 0 !== _hideAnimation$start ? _hideAnimation$start : noop;
                    var completeHideAnimation = null !== (_hideAnimation$comple = null === hideAnimation || void 0 === hideAnimation ? void 0 : hideAnimation.complete) && void 0 !== _hideAnimation$comple ? _hideAnimation$comple : noop;
                    this._animate(hideAnimation, (function() {
                        var _this4$_actions;
                        _this4._$content.css("pointerEvents", "");
                        _this4._renderVisibility(false);
                        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                            args[_key3] = arguments[_key3];
                        }
                        completeHideAnimation.call(_this4, ...args);
                        _this4._hideAnimationProcessing = false;
                        null === (_this4$_actions = _this4._actions) || void 0 === _this4$_actions ? void 0 : _this4$_actions.onHidden();
                        _this4._hidingDeferred.resolve();
                    }), (function() {
                        _this4._$content.css("pointerEvents", "none");
                        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                            args[_key4] = arguments[_key4];
                        }
                        startHideAnimation.call(_this4, ...args);
                        _this4._hideAnimationProcessing = true;
                    }));
                },
                _hide: function() {
                    if (!this._currentVisible) {
                        return (new Deferred).resolve().promise()
                    }
                    this._currentVisible = false;
                    this._hidingDeferred = new Deferred;
                    var hidingArgs = {
                        cancel: false
                    };
                    if (this._isShowingActionCanceled) {
                        delete this._isShowingActionCanceled;
                        this._hidingDeferred.reject();
                    } else {
                        this._actions.onHiding(hidingArgs);
                        this._toggleSafariScrolling();
                        this._toggleBodyScroll(true);
                        this._processShowingHidingCancel(hidingArgs.cancel, () => {
                            this._forceFocusLost();
                            this._toggleShading(false);
                            this._toggleSubscriptions(false);
                            this._stopShowTimer();
                            this._animateHiding();
                        }, () => {
                            this._isHidingActionCanceled = true;
                            this._toggleBodyScroll(this.option("enableBodyScroll"));
                            this.option("visible", true);
                            this._hidingDeferred.resolve();
                        });
                    }
                    return this._hidingDeferred.promise()
                },
                _forceFocusLost: function() {
                    var activeElement = domAdapter.getActiveElement();
                    var shouldResetActiveElement = !!this._$content.find(activeElement).length;
                    if (shouldResetActiveElement) {
                        resetActiveElement();
                    }
                },
                _animate: function(animation, completeCallback, startCallback) {
                    if (animation) {
                        startCallback = startCallback || animation.start || noop;
                        fx.animate(this._$content, extend({}, animation, {
                            start: startCallback,
                            complete: completeCallback
                        }));
                    } else {
                        completeCallback();
                    }
                },
                _stopAnimation: function() {
                    fx.stop(this._$content, true);
                },
                _renderVisibility: function(visible) {
                    if (visible && this._isParentHidden()) {
                        return
                    }
                    this._currentVisible = visible;
                    this._stopAnimation();
                    if (!visible) {
                        triggerHidingEvent(this._$content);
                    }
                    if (visible) {
                        this._checkContainerExists();
                        this._moveToContainer();
                        this._renderGeometry();
                        triggerShownEvent(this._$content);
                        triggerResizeEvent(this._$content);
                    } else {
                        this._toggleVisibility(visible);
                        this._$content.toggleClass(INVISIBLE_STATE_CLASS, !visible);
                        this._updateZIndexStackPosition(visible);
                        this._moveFromContainer();
                    }
                    this._toggleShading(visible);
                    this._toggleSubscriptions(visible);
                },
                _updateZIndexStackPosition: function(pushToStack) {
                    var overlayStack = this._overlayStack();
                    var index = overlayStack.indexOf(this);
                    if (pushToStack) {
                        if (-1 === index) {
                            this._zIndex = create(this._zIndexInitValue());
                            overlayStack.push(this);
                        }
                        this._$wrapper.css("zIndex", this._zIndex);
                        this._$content.css("zIndex", this._zIndex);
                    } else if (-1 !== index) {
                        overlayStack.splice(index, 1);
                        remove(this._zIndex);
                    }
                },
                _toggleShading: function(visible) {
                    this._$wrapper.toggleClass(OVERLAY_SHADER_CLASS, visible && this.option("shading"));
                    this._$wrapper.css("backgroundColor", this.option("shading") ? this.option("shadingColor") : "");
                    this._toggleTabTerminator(visible && this.option("shading"));
                },
                _initTabTerminatorHandler: function() {
                    var _this5 = this;
                    this._proxiedTabTerminatorHandler = function() {
                        _this5._tabKeyHandler(...arguments);
                    };
                },
                _toggleTabTerminator: function(enabled) {
                    var eventName = addNamespace$1("keydown", this.NAME);
                    if (enabled) {
                        eventsEngine.on(domAdapter.getDocument(), eventName, this._proxiedTabTerminatorHandler);
                    } else {
                        eventsEngine.off(domAdapter.getDocument(), eventName, this._proxiedTabTerminatorHandler);
                    }
                },
                _findTabbableBounds: function() {
                    var $elements = this._$wrapper.find("*");
                    var elementsCount = $elements.length - 1;
                    var result = {
                        first: null,
                        last: null
                    };
                    for (var i = 0; i <= elementsCount; i++) {
                        if (!result.first && $elements.eq(i).is(tabbable)) {
                            result.first = $elements.eq(i);
                        }
                        if (!result.last && $elements.eq(elementsCount - i).is(tabbable)) {
                            result.last = $elements.eq(elementsCount - i);
                        }
                        if (result.first && result.last) {
                            break
                        }
                    }
                    return result
                },
                _tabKeyHandler: function(e) {
                    if (normalizeKeyName(e) !== TAB_KEY || !this._isTopOverlay()) {
                        return
                    }
                    var tabbableElements = this._findTabbableBounds();
                    var $firstTabbable = tabbableElements.first;
                    var $lastTabbable = tabbableElements.last;
                    var isTabOnLast = !e.shiftKey && e.target === $lastTabbable.get(0);
                    var isShiftTabOnFirst = e.shiftKey && e.target === $firstTabbable.get(0);
                    var isEmptyTabList = 0 === tabbableElements.length;
                    var isOutsideTarget = !contains(this._$wrapper.get(0), e.target);
                    if (isTabOnLast || isShiftTabOnFirst || isEmptyTabList || isOutsideTarget) {
                        e.preventDefault();
                        var $focusElement = e.shiftKey ? $lastTabbable : $firstTabbable;
                        eventsEngine.trigger($focusElement, "focusin");
                        eventsEngine.trigger($focusElement, "focus");
                    }
                },
                _toggleSubscriptions: function(enabled) {
                    if (hasWindow()) {
                        this._toggleHideTopOverlayCallback(enabled);
                        this._toggleHideOnParentsScrollSubscription(enabled);
                    }
                },
                _toggleHideTopOverlayCallback: function(subscribe) {
                    if (!this._hideTopOverlayHandler) {
                        return
                    }
                    if (subscribe) {
                        hideCallback.add(this._hideTopOverlayHandler);
                    } else {
                        hideCallback.remove(this._hideTopOverlayHandler);
                    }
                },
                _toggleHideOnParentsScrollSubscription: function(needSubscribe) {
                    var _this$_parentsScrollS;
                    var scrollEvent = addNamespace$1("scroll", this.NAME);
                    var {
                        prevTargets: prevTargets,
                        handler: handler
                    } = null !== (_this$_parentsScrollS = this._parentsScrollSubscriptionInfo) && void 0 !== _this$_parentsScrollS ? _this$_parentsScrollS : {};
                    eventsEngine.off(prevTargets, scrollEvent, handler);
                    var hideOnScroll = this.option("hideOnParentScroll");
                    if (needSubscribe && hideOnScroll) {
                        var $parents = this._getHideOnParentScrollTarget().parents();
                        if ("desktop" === devices.real().deviceType) {
                            $parents = $parents.add(window$1);
                        }
                        eventsEngine.on($parents, scrollEvent, handler);
                        this._parentsScrollSubscriptionInfo.prevTargets = $parents;
                    }
                },
                _hideOnParentsScrollHandler: function(e) {
                    var hideHandled = false;
                    var hideOnScroll = this.option("hideOnParentScroll");
                    if (isFunction(hideOnScroll)) {
                        hideHandled = hideOnScroll(e);
                    }
                    if (!hideHandled && !this._showAnimationProcessing) {
                        this.hide();
                    }
                },
                _getHideOnParentScrollTarget: function() {
                    var $hideOnParentScrollTarget = $(this.option("_hideOnParentScrollTarget"));
                    if ($hideOnParentScrollTarget.length) {
                        return $hideOnParentScrollTarget
                    }
                    return this._$wrapper
                },
                _render: function() {
                    this.callBase();
                    this._appendContentToElement();
                    this._renderVisibilityAnimate(this.option("visible"));
                },
                _appendContentToElement: function() {
                    if (!this._$content.parent().is(this.$element())) {
                        this._$content.appendTo(this.$element());
                    }
                },
                _renderContent: function() {
                    var shouldDeferRendering = !this._currentVisible && this.option("deferRendering");
                    var isParentHidden = this.option("visible") && this._isParentHidden();
                    if (isParentHidden) {
                        this._isHidden = true;
                        return
                    }
                    if (this._contentAlreadyRendered || shouldDeferRendering) {
                        return
                    }
                    this._contentAlreadyRendered = true;
                    this._appendContentToElement();
                    this.callBase();
                },
                _isParentHidden: function() {
                    if (!this.option("_checkParentVisibility")) {
                        return false
                    }
                    if (void 0 !== this._parentHidden) {
                        return this._parentHidden
                    }
                    var $parent = this.$element().parent();
                    if ($parent.is(":visible")) {
                        return false
                    }
                    var isHidden = false;
                    $parent.add($parent.parents()).each((function() {
                        var $element = $(this);
                        if ("none" === $element.css("display")) {
                            isHidden = true;
                            return false
                        }
                    }));
                    return isHidden || !domAdapter.getBody().contains($parent.get(0))
                },
                _renderContentImpl: function() {
                    var whenContentRendered = new Deferred;
                    var contentTemplateOption = this.option("contentTemplate");
                    var contentTemplate = this._getTemplate(contentTemplateOption);
                    var transclude = this._templateManager.anonymousTemplateName === contentTemplateOption;
                    contentTemplate && contentTemplate.render({
                        container: getPublicElement(this.$content()),
                        noModel: true,
                        transclude: transclude,
                        onRendered: () => {
                            whenContentRendered.resolve();
                            if (this.option("templatesRenderAsynchronously")) {
                                this._dimensionChanged();
                            }
                        }
                    });
                    this._toggleWrapperScrollEventsSubscription(this.option("preventScrollEvents"));
                    whenContentRendered.done(() => {
                        if (this.option("visible")) {
                            this._moveToContainer();
                        }
                    });
                    return whenContentRendered.promise()
                },
                _getPositionControllerConfig() {
                    var {
                        container: container,
                        visualContainer: visualContainer,
                        _fixWrapperPosition: _fixWrapperPosition,
                        restorePosition: restorePosition,
                        _skipContentPositioning: _skipContentPositioning
                    } = this.option();
                    return {
                        container: container,
                        visualContainer: visualContainer,
                        $root: this.$element(),
                        $content: this._$content,
                        $wrapper: this._$wrapper,
                        onPositioned: this._actions.onPositioned,
                        onVisualPositionChanged: this._actions.onVisualPositionChanged,
                        restorePosition: restorePosition,
                        _fixWrapperPosition: _fixWrapperPosition,
                        _skipContentPositioning: _skipContentPositioning
                    }
                },
                _initPositionController() {
                    this._positionController = new OverlayPositionController(this._getPositionControllerConfig());
                },
                _toggleWrapperScrollEventsSubscription: function(enabled) {
                    var eventName = addNamespace$1(DRAG_EVENT, this.NAME);
                    eventsEngine.off(this._$wrapper, eventName);
                    if (enabled) {
                        eventsEngine.on(this._$wrapper, eventName, {
                            validate: function() {
                                return true
                            },
                            getDirection: function() {
                                return "both"
                            },
                            _toggleGestureCover: function(toggle) {
                                if (!toggle) {
                                    this._toggleGestureCoverImpl(toggle);
                                }
                            },
                            _clearSelection: noop,
                            isNative: true
                        }, e => {
                            var originalEvent = e.originalEvent.originalEvent;
                            var {
                                type: type
                            } = originalEvent || {};
                            var isWheel = "wheel" === type;
                            var isMouseMove = "mousemove" === type;
                            var isScrollByWheel = isWheel && !isCommandKeyPressed(e);
                            e._cancelPreventDefault = true;
                            if (originalEvent && false !== e.cancelable && (!isMouseMove && !isWheel || isScrollByWheel)) {
                                e.preventDefault();
                            }
                        });
                    }
                },
                _moveFromContainer: function() {
                    this._$content.appendTo(this.$element());
                    this._$wrapper.detach();
                },
                _checkContainerExists() {
                    var $wrapperContainer = this._positionController.$container;
                    if (void 0 === $wrapperContainer) {
                        return
                    }
                    var containerExists = $wrapperContainer.length > 0;
                    if (!containerExists) {
                        errors.log("W1021", this.NAME);
                    }
                },
                _moveToContainer: function() {
                    var $wrapperContainer = this._positionController.$container;
                    this._$wrapper.appendTo($wrapperContainer);
                    this._$content.appendTo(this._$wrapper);
                },
                _renderGeometry: function(options) {
                    var {
                        visible: visible
                    } = this.option();
                    if (visible && hasWindow()) {
                        this._stopAnimation();
                        this._renderGeometryImpl();
                    }
                },
                _renderGeometryImpl: function() {
                    this._positionController.updatePosition(this._getOptionValue("position"));
                    this._renderWrapper();
                    this._renderDimensions();
                    this._renderPosition();
                },
                _renderPosition() {
                    this._positionController.positionContent();
                },
                _isAllWindowCovered: function() {
                    return isWindow(this._positionController.$visualContainer.get(0)) && this.option("shading")
                },
                _toggleSafariScrolling: function() {
                    var visible = this.option("visible");
                    var $body = $(domAdapter.getBody());
                    var isIosSafari = "ios" === devices.real().platform && browser.safari;
                    var isAllWindowCovered = this._isAllWindowCovered();
                    var isScrollingPrevented = $body.hasClass(PREVENT_SAFARI_SCROLLING_CLASS);
                    var shouldPreventScrolling = !isScrollingPrevented && visible && isAllWindowCovered;
                    var shouldEnableScrolling = isScrollingPrevented && (!visible || !isAllWindowCovered || this._disposed);
                    if (isIosSafari) {
                        if (shouldEnableScrolling) {
                            $body.removeClass(PREVENT_SAFARI_SCROLLING_CLASS);
                            window$1.scrollTo(0, this._cachedBodyScrollTop);
                            this._cachedBodyScrollTop = void 0;
                        } else if (shouldPreventScrolling) {
                            this._cachedBodyScrollTop = window$1.pageYOffset;
                            $body.addClass(PREVENT_SAFARI_SCROLLING_CLASS);
                        }
                    }
                },
                _renderWrapper: function() {
                    this._positionController.styleWrapperPosition();
                    this._renderWrapperDimensions();
                    this._positionController.positionWrapper();
                },
                _renderWrapperDimensions: function() {
                    var $visualContainer = this._positionController.$visualContainer;
                    var documentElement = domAdapter.getDocumentElement();
                    var isVisualContainerWindow = isWindow($visualContainer.get(0));
                    var wrapperWidth = isVisualContainerWindow ? documentElement.clientWidth : getOuterWidth($visualContainer);
                    var wrapperHeight = isVisualContainerWindow ? window$1.innerHeight : getOuterHeight($visualContainer);
                    this._$wrapper.css({
                        width: wrapperWidth,
                        height: wrapperHeight
                    });
                },
                _renderDimensions: function() {
                    var content = this._$content.get(0);
                    this._$content.css({
                        minWidth: this._getOptionValue("minWidth", content),
                        maxWidth: this._getOptionValue("maxWidth", content),
                        minHeight: this._getOptionValue("minHeight", content),
                        maxHeight: this._getOptionValue("maxHeight", content),
                        width: this._getOptionValue("width", content),
                        height: this._getOptionValue("height", content)
                    });
                },
                _focusTarget: function() {
                    return this._$content
                },
                _attachKeyboardEvents: function() {
                    this._keyboardListenerId = keyboard.on(this._$content, null, opts => this._keyboardHandler(opts));
                },
                _keyboardHandler: function(options) {
                    var e = options.originalEvent;
                    var $target = $(e.target);
                    if ($target.is(this._$content) || !this.option("ignoreChildEvents")) {
                        this.callBase(...arguments);
                    }
                },
                _isVisible: function() {
                    return this.option("visible")
                },
                _visibilityChanged: function(visible) {
                    if (visible) {
                        if (this.option("visible")) {
                            this._renderVisibilityAnimate(visible);
                        }
                    } else {
                        this._renderVisibilityAnimate(visible);
                    }
                },
                _dimensionChanged: function() {
                    this._renderGeometry();
                },
                _clean: function() {
                    var options = this.option();
                    if (!this._contentAlreadyRendered && !options.isRenovated) {
                        this.$content().empty();
                    }
                    this._renderVisibility(false);
                    this._stopShowTimer();
                    this._cleanFocusState();
                },
                _stopShowTimer() {
                    if (this._asyncShowTimeout) {
                        clearTimeout(this._asyncShowTimeout);
                    }
                    this._asyncShowTimeout = null;
                },
                _dispose: function() {
                    fx.stop(this._$content, false);
                    clearTimeout(this._deferShowTimer);
                    this._toggleViewPortSubscription(false);
                    this._toggleSubscriptions(false);
                    this._updateZIndexStackPosition(false);
                    this._toggleTabTerminator(false);
                    this._actions = null;
                    this._parentsScrollSubscriptionInfo = null;
                    this.callBase();
                    this._toggleSafariScrolling();
                    this.option("visible") && remove(this._zIndex);
                    this._$wrapper.remove();
                    this._$content.remove();
                },
                _toggleRTLDirection: function(rtl) {
                    this._$content.toggleClass(RTL_DIRECTION_CLASS, rtl);
                },
                _optionChanged: function(args) {
                    var {
                        value: value,
                        name: name
                    } = args;
                    if (this._getActionsList().includes(name)) {
                        this._initActions();
                        return
                    }
                    switch (name) {
                        case "animation":
                            break;
                        case "shading":
                            this._toggleShading(this.option("visible"));
                            this._toggleSafariScrolling();
                            break;
                        case "shadingColor":
                            this._toggleShading(this.option("visible"));
                            break;
                        case "width":
                        case "height":
                            this._renderGeometry();
                            break;
                        case "minWidth":
                        case "maxWidth":
                        case "minHeight":
                        case "maxHeight":
                            this._renderGeometry();
                            break;
                        case "position":
                            this._positionController.updatePosition(this.option("position"));
                            this._positionController.restorePositionOnNextRender(true);
                            this._renderGeometry();
                            this._toggleSafariScrolling();
                            break;
                        case "visible":
                            this._renderVisibilityAnimate(value).done(() => {
                                var _this$_animateDeferre;
                                return null === (_this$_animateDeferre = this._animateDeferred) || void 0 === _this$_animateDeferre ? void 0 : _this$_animateDeferre.resolveWith(this)
                            }).fail(() => {
                                var _this$_animateDeferre2;
                                return null === (_this$_animateDeferre2 = this._animateDeferred) || void 0 === _this$_animateDeferre2 ? void 0 : _this$_animateDeferre2.reject()
                            });
                            break;
                        case "container":
                            this._positionController.updateContainer(value);
                            this._invalidate();
                            this._toggleSafariScrolling();
                            break;
                        case "visualContainer":
                            this._positionController.updateVisualContainer(value);
                            this._renderWrapper();
                            this._toggleSafariScrolling();
                            break;
                        case "innerOverlay":
                            this._initInnerOverlayClass();
                            break;
                        case "deferRendering":
                        case "contentTemplate":
                            this._contentAlreadyRendered = false;
                            this._clean();
                            this._invalidate();
                            break;
                        case "hideTopOverlayHandler":
                            this._toggleHideTopOverlayCallback(false);
                            this._initHideTopOverlayHandler(value);
                            this._toggleHideTopOverlayCallback(this.option("visible"));
                            break;
                        case "hideOnParentScroll":
                        case "_hideOnParentScrollTarget":
                            this._toggleHideOnParentsScrollSubscription(this.option("visible"));
                            break;
                        case "closeOnOutsideClick":
                        case "hideOnOutsideClick":
                        case "propagateOutsideClick":
                            break;
                        case "rtlEnabled":
                            this._contentAlreadyRendered = false;
                            this.callBase(args);
                            break;
                        case "_fixWrapperPosition":
                            this._positionController.fixWrapperPosition = value;
                            break;
                        case "wrapperAttr":
                            this._renderWrapperAttributes();
                            break;
                        case "restorePosition":
                            this._positionController.restorePosition = value;
                            break;
                        case "preventScrollEvents":
                            this._logDeprecatedPreventScrollEventsInfo();
                            this._toggleWrapperScrollEventsSubscription(value);
                            break;
                        default:
                            this.callBase(args);
                    }
                },
                toggle: function(showing) {
                    showing = void 0 === showing ? !this.option("visible") : showing;
                    var result = new Deferred;
                    if (showing === this.option("visible")) {
                        return result.resolveWith(this, [showing]).promise()
                    }
                    var animateDeferred = new Deferred;
                    this._animateDeferred = animateDeferred;
                    this.option("visible", showing);
                    animateDeferred.promise().done(() => {
                        delete this._animateDeferred;
                        result.resolveWith(this, [this.option("visible")]);
                    }).fail(() => {
                        delete this._animateDeferred;
                        result.reject();
                    });
                    return result.promise()
                },
                $content: function() {
                    return this._$content
                },
                show: function() {
                    return this.toggle(true)
                },
                hide: function() {
                    return this.toggle(false)
                },
                content: function() {
                    return getPublicElement(this._$content)
                },
                repaint: function() {
                    if (this._contentAlreadyRendered) {
                        this._positionController.restorePositionOnNextRender(true);
                        this._renderGeometry({
                            forceStopAnimation: true
                        });
                        triggerResizeEvent(this._$content);
                    } else {
                        this.callBase();
                    }
                }
            }));
            Overlay.baseZIndex = zIndex => base(zIndex);
            registerComponent("dxOverlay", Overlay);

            /**
             * DevExtreme (esm/ui/load_indicator.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var navigator = getNavigator();
            var LOADINDICATOR_CLASS = "dx-loadindicator";
            var LOADINDICATOR_WRAPPER_CLASS = "dx-loadindicator-wrapper";
            var LOADINDICATOR_CONTENT_CLASS = "dx-loadindicator-content";
            var LOADINDICATOR_ICON_CLASS = "dx-loadindicator-icon";
            var LOADINDICATOR_SEGMENT_CLASS = "dx-loadindicator-segment";
            var LOADINDICATOR_SEGMENT_INNER_CLASS = "dx-loadindicator-segment-inner";
            var LOADINDICATOR_IMAGE_CLASS = "dx-loadindicator-image";
            var LoadIndicator = exports("bx", Widget.inherit({
                _getDefaultOptions: function() {
                    return extend(this.callBase(), {
                        indicatorSrc: "",
                        activeStateEnabled: false,
                        hoverStateEnabled: false,
                        _animatingSegmentCount: 1,
                        _animatingSegmentInner: false
                    })
                },
                _defaultOptionsRules: function() {
                    var themeName = current();
                    return this.callBase().concat([{
                        device: function() {
                            var realDevice = devices.real();
                            var obsoleteAndroid = "android" === realDevice.platform && !/chrome/i.test(navigator.userAgent);
                            return obsoleteAndroid
                        },
                        options: {
                            viaImage: true
                        }
                    }, {
                        device: function() {
                            return isMaterialBased(themeName)
                        },
                        options: {
                            _animatingSegmentCount: 2,
                            _animatingSegmentInner: true
                        }
                    }, {
                        device: function() {
                            return isGeneric(themeName)
                        },
                        options: {
                            _animatingSegmentCount: 7
                        }
                    }])
                },
                _useTemplates: function() {
                    return false
                },
                _init: function() {
                    this.callBase();
                    this.$element().addClass(LOADINDICATOR_CLASS);
                },
                _initMarkup: function() {
                    this.callBase();
                    this._renderWrapper();
                    this._renderIndicatorContent();
                    this._renderMarkup();
                },
                _renderWrapper: function() {
                    this._$wrapper = $("<div>").addClass(LOADINDICATOR_WRAPPER_CLASS);
                    this.$element().append(this._$wrapper);
                },
                _renderIndicatorContent: function() {
                    this._$content = $("<div>").addClass(LOADINDICATOR_CONTENT_CLASS);
                    this._$wrapper.append(this._$content);
                },
                _renderMarkup: function() {
                    var {
                        viaImage: viaImage,
                        indicatorSrc: indicatorSrc
                    } = this.option();
                    if (animation() && !viaImage && !indicatorSrc) {
                        this._renderMarkupForAnimation();
                    } else {
                        this._renderMarkupForImage();
                    }
                },
                _renderMarkupForAnimation: function() {
                    var animatingSegmentInner = this.option("_animatingSegmentInner");
                    this._$indicator = $("<div>").addClass(LOADINDICATOR_ICON_CLASS);
                    this._$content.append(this._$indicator);
                    for (var i = this.option("_animatingSegmentCount"); i >= 0; --i) {
                        var $segment = $("<div>").addClass(LOADINDICATOR_SEGMENT_CLASS).addClass(LOADINDICATOR_SEGMENT_CLASS + i);
                        if (animatingSegmentInner) {
                            $segment.append($("<div>").addClass(LOADINDICATOR_SEGMENT_INNER_CLASS));
                        }
                        this._$indicator.append($segment);
                    }
                },
                _renderMarkupForImage: function() {
                    var {
                        indicatorSrc: indicatorSrc
                    } = this.option();
                    if (indicatorSrc) {
                        this._$wrapper.addClass(LOADINDICATOR_IMAGE_CLASS);
                        this._$wrapper.css("backgroundImage", "url(" + indicatorSrc + ")");
                    } else if (animation()) {
                        this._renderMarkupForAnimation();
                    }
                },
                _renderDimensions: function() {
                    this.callBase();
                    this._updateContentSizeForAnimation();
                },
                _updateContentSizeForAnimation: function() {
                    if (!this._$indicator) {
                        return
                    }
                    var width = this.option("width");
                    var height = this.option("height");
                    if (width || height) {
                        width = getWidth(this.$element());
                        height = getHeight(this.$element());
                        var minDimension = Math.min(height, width);
                        this._$wrapper.css({
                            height: minDimension,
                            width: minDimension,
                            fontSize: minDimension
                        });
                    }
                },
                _clean: function() {
                    this.callBase();
                    this._removeMarkupForAnimation();
                    this._removeMarkupForImage();
                },
                _removeMarkupForAnimation: function() {
                    if (!this._$indicator) {
                        return
                    }
                    this._$indicator.remove();
                    delete this._$indicator;
                },
                _removeMarkupForImage: function() {
                    this._$wrapper.css("backgroundImage", "none");
                },
                _optionChanged: function(args) {
                    switch (args.name) {
                        case "_animatingSegmentCount":
                        case "_animatingSegmentInner":
                        case "indicatorSrc":
                            this._invalidate();
                            break;
                        default:
                            this.callBase(args);
                    }
                }
            }));
            registerComponent("dxLoadIndicator", LoadIndicator);

            /**
             * DevExtreme (esm/ui/load_panel.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var LOADPANEL_CLASS = "dx-loadpanel";
            var LOADPANEL_WRAPPER_CLASS = "dx-loadpanel-wrapper";
            var LOADPANEL_INDICATOR_CLASS = "dx-loadpanel-indicator";
            var LOADPANEL_MESSAGE_CLASS = "dx-loadpanel-message";
            var LOADPANEL_CONTENT_CLASS = "dx-loadpanel-content";
            var LOADPANEL_CONTENT_WRAPPER_CLASS = "dx-loadpanel-content-wrapper";
            var LOADPANEL_PANE_HIDDEN_CLASS = "dx-loadpanel-pane-hidden";
            var LoadPanel = Overlay.inherit({
                _supportedKeys: function() {
                    return extend(this.callBase(), {
                        escape: noop
                    })
                },
                _getDefaultOptions: function() {
                    return extend(this.callBase(), {
                        message: messageLocalization.format("Loading"),
                        width: 222,
                        height: 90,
                        animation: null,
                        showIndicator: true,
                        indicatorSrc: "",
                        showPane: true,
                        delay: 0,
                        templatesRenderAsynchronously: false,
                        hideTopOverlayHandler: null,
                        focusStateEnabled: false,
                        propagateOutsideClick: true,
                        preventScrollEvents: false
                    })
                },
                _defaultOptionsRules: function() {
                    return this.callBase().concat([{
                        device: {
                            platform: "generic"
                        },
                        options: {
                            shadingColor: "transparent"
                        }
                    }, {
                        device: function() {
                            return isMaterial()
                        },
                        options: {
                            message: "",
                            width: 60,
                            height: 60,
                            maxHeight: 60,
                            maxWidth: 60
                        }
                    }, {
                        device: function() {
                            return isFluent()
                        },
                        options: {
                            width: "auto",
                            height: "auto"
                        }
                    }])
                },
                _init: function() {
                    this.callBase.apply(this, arguments);
                },
                _render: function() {
                    this.callBase();
                    this.$element().addClass(LOADPANEL_CLASS);
                    this.$wrapper().addClass(LOADPANEL_WRAPPER_CLASS);
                    this._setWrapperAria();
                },
                _setWrapperAria() {
                    var {
                        message: message
                    } = this.option();
                    var defaultLabel = isMaterialBased() ? message : null;
                    var label = message ? defaultLabel : messageLocalization.format("Loading");
                    var aria = {
                        role: "alert",
                        label: label
                    };
                    this.setAria(aria, this.$wrapper());
                },
                _renderContentImpl: function() {
                    this.callBase();
                    this.$content().addClass(LOADPANEL_CONTENT_CLASS);
                    this._$loadPanelContentWrapper = $("<div>").addClass(LOADPANEL_CONTENT_WRAPPER_CLASS);
                    this._$loadPanelContentWrapper.appendTo(this.$content());
                    this._togglePaneVisible();
                    this._cleanPreviousContent();
                    this._renderLoadIndicator();
                    this._renderMessage();
                },
                _show: function() {
                    var delay = this.option("delay");
                    if (!delay) {
                        return this.callBase()
                    }
                    var deferred = new Deferred;
                    var callBase = this.callBase.bind(this);
                    this._clearShowTimeout();
                    this._showTimeout = setTimeout((function() {
                        callBase().done((function() {
                            deferred.resolve();
                        }));
                    }), delay);
                    return deferred.promise()
                },
                _hide: function() {
                    this._clearShowTimeout();
                    return this.callBase()
                },
                _clearShowTimeout: function() {
                    clearTimeout(this._showTimeout);
                },
                _renderMessage: function() {
                    if (!this._$loadPanelContentWrapper) {
                        return
                    }
                    var message = this.option("message");
                    if (!message) {
                        return
                    }
                    var $message = $("<div>").addClass(LOADPANEL_MESSAGE_CLASS).text(message);
                    this._$loadPanelContentWrapper.append($message);
                },
                _renderLoadIndicator: function() {
                    if (!this._$loadPanelContentWrapper || !this.option("showIndicator")) {
                        return
                    }
                    if (!this._$indicator) {
                        this._$indicator = $("<div>").addClass(LOADPANEL_INDICATOR_CLASS).appendTo(this._$loadPanelContentWrapper);
                    }
                    this._createComponent(this._$indicator, LoadIndicator, {
                        indicatorSrc: this.option("indicatorSrc")
                    });
                },
                _cleanPreviousContent: function() {
                    this.$content().find("." + LOADPANEL_MESSAGE_CLASS).remove();
                    this.$content().find("." + LOADPANEL_INDICATOR_CLASS).remove();
                    delete this._$indicator;
                },
                _togglePaneVisible: function() {
                    this.$content().toggleClass(LOADPANEL_PANE_HIDDEN_CLASS, !this.option("showPane"));
                },
                _optionChanged: function(args) {
                    switch (args.name) {
                        case "delay":
                            break;
                        case "message":
                        case "showIndicator":
                            this._cleanPreviousContent();
                            this._renderLoadIndicator();
                            this._renderMessage();
                            this._setWrapperAria();
                            break;
                        case "showPane":
                            this._togglePaneVisible();
                            break;
                        case "indicatorSrc":
                            this._renderLoadIndicator();
                            break;
                        default:
                            this.callBase(args);
                    }
                },
                _dispose: function() {
                    this._clearShowTimeout();
                    this.callBase();
                }
            });
            registerComponent("dxLoadPanel", LoadPanel);
            var LoadPanel$1 = exports("bN", LoadPanel);

            /**
             * DevExtreme (esm/renovation/ui/common/utils/date/toMilliseconds.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var timeIntervals = {
                millisecond: 1,
                second: 1e3,
                minute: 6e4,
                hour: 36e5,
                day: 864e5,
                week: 6048e5,
                month: 2592e6,
                quarter: 7776e6,
                year: 31536e6
            };
            function toMilliseconds(value) {
                return timeIntervals[value]
            }

            /**
             * DevExtreme (esm/core/utils/date.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DAYS_IN_WEEK = 7;
            var THURSDAY_WEEK_NUMBER = 4;
            var SUNDAY_WEEK_NUMBER = 7;
            var USUAL_WEEK_COUNT_IN_YEAR = 52;
            var dateUnitIntervals = ["millisecond", "second", "minute", "hour", "day", "week", "month", "quarter", "year"];
            var getDatesInterval = function(startDate, endDate, intervalUnit) {
                var delta = endDate.getTime() - startDate.getTime();
                var millisecondCount = toMilliseconds(intervalUnit) || 1;
                return Math.floor(delta / millisecondCount)
            };
            var getNextDateUnit = function(unit, withWeeks) {
                var interval = getDateUnitInterval(unit);
                switch (interval) {
                    case "millisecond":
                        return "second";
                    case "second":
                        return "minute";
                    case "minute":
                        return "hour";
                    case "hour":
                        return "day";
                    case "day":
                        return withWeeks ? "week" : "month";
                    case "week":
                        return "month";
                    case "month":
                        return "quarter";
                    case "quarter":
                    case "year":
                        return "year";
                    default:
                        return 0
                }
            };
            var convertMillisecondsToDateUnits = function(value) {
                var i;
                var dateUnitCount;
                var dateUnitInterval;
                var dateUnitIntervals = ["millisecond", "second", "minute", "hour", "day", "month", "year"];
                var result = {};
                for (i = dateUnitIntervals.length - 1; i >= 0; i--) {
                    dateUnitInterval = dateUnitIntervals[i];
                    dateUnitCount = Math.floor(value / toMilliseconds(dateUnitInterval));
                    if (dateUnitCount > 0) {
                        result[dateUnitInterval + "s"] = dateUnitCount;
                        value -= convertDateUnitToMilliseconds(dateUnitInterval, dateUnitCount);
                    }
                }
                return result
            };
            var dateToMilliseconds = function(tickInterval) {
                var milliseconds = 0;
                if (isObject(tickInterval)) {
                    each(tickInterval, (function(key, value) {
                        milliseconds += convertDateUnitToMilliseconds(key.substr(0, key.length - 1), value);
                    }));
                }
                if (isString(tickInterval)) {
                    milliseconds = convertDateUnitToMilliseconds(tickInterval, 1);
                }
                return milliseconds
            };

            function convertDateUnitToMilliseconds(dateUnit, count) {
                return toMilliseconds(dateUnit) * count
            }

            function getDateUnitInterval(tickInterval) {
                var maxInterval = -1;
                var i;
                if (isString(tickInterval)) {
                    return tickInterval
                }
                if (isObject(tickInterval)) {
                    each(tickInterval, (function(key, value) {
                        for (i = 0; i < dateUnitIntervals.length; i++) {
                            if (value && (key === dateUnitIntervals[i] + "s" || key === dateUnitIntervals[i]) && maxInterval < i) {
                                maxInterval = i;
                            }
                        }
                    }));
                    return dateUnitIntervals[maxInterval]
                }
                return ""
            }
            var tickIntervalToFormatMap = {
                millisecond: "millisecond",
                second: "longtime",
                minute: "shorttime",
                hour: "shorttime",
                day: "day",
                week: "day",
                month: "month",
                quarter: "quarter",
                year: "year"
            };

            function getDateFormatByTickInterval(tickInterval) {
                return tickIntervalToFormatMap[getDateUnitInterval(tickInterval)] || ""
            }
            var getQuarter = function(month) {
                return Math.floor(month / 3)
            };
            var getFirstQuarterMonth = function(month) {
                return 3 * getQuarter(month)
            };

            function correctDateWithUnitBeginning(date, dateInterval, withCorrection, firstDayOfWeek) {
                date = new Date(date.getTime());
                var oldDate = new Date(date.getTime());
                var firstQuarterMonth;
                var month;
                var dateUnitInterval = getDateUnitInterval(dateInterval);
                switch (dateUnitInterval) {
                    case "second":
                        date = new Date(1e3 * Math.floor(oldDate.getTime() / 1e3));
                        break;
                    case "minute":
                        date = new Date(6e4 * Math.floor(oldDate.getTime() / 6e4));
                        break;
                    case "hour":
                        date = new Date(36e5 * Math.floor(oldDate.getTime() / 36e5));
                        break;
                    case "year":
                        date.setMonth(0);
                    case "month":
                        date.setDate(1);
                    case "day":
                        date.setHours(0, 0, 0, 0);
                        break;
                    case "week":
                        date = getFirstWeekDate(date, firstDayOfWeek || 0);
                        date.setHours(0, 0, 0, 0);
                        break;
                    case "quarter":
                        firstQuarterMonth = getFirstQuarterMonth(date.getMonth());
                        month = date.getMonth();
                        date.setDate(1);
                        date.setHours(0, 0, 0, 0);
                        if (month !== firstQuarterMonth) {
                            date.setMonth(firstQuarterMonth);
                        }
                }
                if (withCorrection && "hour" !== dateUnitInterval && "minute" !== dateUnitInterval && "second" !== dateUnitInterval) {
                    fixTimezoneGap(oldDate, date);
                }
                return date
            }

            function trimTime(date) {
                return correctDateWithUnitBeginning(date, "day")
            }
            var setToDayEnd = function(date) {
                var result = trimTime(date);
                result.setDate(result.getDate() + 1);
                return new Date(result.getTime() - 1)
            };
            var getDatesDifferences = function(date1, date2) {
                var counter = 0;
                var differences = {
                    year: date1.getFullYear() !== date2.getFullYear(),
                    month: date1.getMonth() !== date2.getMonth(),
                    day: date1.getDate() !== date2.getDate(),
                    hour: date1.getHours() !== date2.getHours(),
                    minute: date1.getMinutes() !== date2.getMinutes(),
                    second: date1.getSeconds() !== date2.getSeconds(),
                    millisecond: date1.getMilliseconds() !== date2.getMilliseconds()
                };
                each(differences, (function(key, value) {
                    if (value) {
                        counter++;
                    }
                }));
                if (0 === counter && 0 !== getTimezonesDifference(date1, date2)) {
                    differences.hour = true;
                    counter++;
                }
                differences.count = counter;
                return differences
            };

            function addDateInterval(value, interval, dir) {
                var result = new Date(value.getTime());
                var intervalObject = isString(interval) ? getDateIntervalByString(interval.toLowerCase()) : isNumeric(interval) ? convertMillisecondsToDateUnits(interval) : interval;
                if (intervalObject.years) {
                    result.setFullYear(result.getFullYear() + intervalObject.years * dir);
                }
                if (intervalObject.quarters) {
                    result.setMonth(result.getMonth() + 3 * intervalObject.quarters * dir);
                }
                if (intervalObject.months) {
                    result.setMonth(result.getMonth() + intervalObject.months * dir);
                }
                if (intervalObject.weeks) {
                    result.setDate(result.getDate() + 7 * intervalObject.weeks * dir);
                }
                if (intervalObject.days) {
                    result.setDate(result.getDate() + intervalObject.days * dir);
                }
                if (intervalObject.hours) {
                    result.setTime(result.getTime() + 36e5 * intervalObject.hours * dir);
                }
                if (intervalObject.minutes) {
                    result.setTime(result.getTime() + 6e4 * intervalObject.minutes * dir);
                }
                if (intervalObject.seconds) {
                    result.setTime(result.getTime() + 1e3 * intervalObject.seconds * dir);
                }
                if (intervalObject.milliseconds) {
                    result.setTime(result.getTime() + intervalObject.milliseconds * dir);
                }
                return result
            }
            var addInterval = function(value, interval, isNegative) {
                var dir = isNegative ? -1 : 1;
                return isDate(value) ? addDateInterval(value, interval, dir) : adjust(value + interval * dir, interval)
            };
            var getSequenceByInterval = function(min, max, interval) {
                var intervals = [];
                var cur;
                intervals.push(isDate(min) ? new Date(min.getTime()) : min);
                cur = min;
                while (cur < max) {
                    cur = addInterval(cur, interval);
                    intervals.push(cur);
                }
                return intervals
            };
            var getViewFirstCellDate = function(viewType, date) {
                if ("month" === viewType) {
                    return createDateWithFullYear(date.getFullYear(), date.getMonth(), 1)
                }
                if ("year" === viewType) {
                    return createDateWithFullYear(date.getFullYear(), 0, date.getDate())
                }
                if ("decade" === viewType) {
                    return createDateWithFullYear(getFirstYearInDecade(date), date.getMonth(), date.getDate())
                }
                if ("century" === viewType) {
                    return createDateWithFullYear(getFirstDecadeInCentury(date), date.getMonth(), date.getDate())
                }
            };
            var getViewLastCellDate = function(viewType, date) {
                if ("month" === viewType) {
                    return createDateWithFullYear(date.getFullYear(), date.getMonth(), getLastMonthDay(date))
                }
                if ("year" === viewType) {
                    return createDateWithFullYear(date.getFullYear(), 11, date.getDate())
                }
                if ("decade" === viewType) {
                    return createDateWithFullYear(getFirstYearInDecade(date) + 9, date.getMonth(), date.getDate())
                }
                if ("century" === viewType) {
                    return createDateWithFullYear(getFirstDecadeInCentury(date) + 90, date.getMonth(), date.getDate())
                }
            };
            var getViewMinBoundaryDate = function(viewType, date) {
                var resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth(), 1);
                if ("month" === viewType) {
                    return resultDate
                }
                resultDate.setMonth(0);
                if ("year" === viewType) {
                    return resultDate
                }
                if ("decade" === viewType) {
                    resultDate.setFullYear(getFirstYearInDecade(date));
                }
                if ("century" === viewType) {
                    resultDate.setFullYear(getFirstDecadeInCentury(date));
                }
                return resultDate
            };
            var getViewMaxBoundaryDate = function(viewType, date) {
                var resultDate = new Date(date);
                resultDate.setDate(getLastMonthDay(date));
                if ("month" === viewType) {
                    return resultDate
                }
                resultDate.setMonth(11);
                resultDate.setDate(getLastMonthDay(resultDate));
                if ("year" === viewType) {
                    return resultDate
                }
                if ("decade" === viewType) {
                    resultDate.setFullYear(getFirstYearInDecade(date) + 9);
                }
                if ("century" === viewType) {
                    resultDate.setFullYear(getFirstDecadeInCentury(date) + 99);
                }
                return resultDate
            };

            function getLastMonthDay(date) {
                var resultDate = createDateWithFullYear(date.getFullYear(), date.getMonth() + 1, 0);
                return resultDate.getDate()
            }
            var getViewUp = function(typeView) {
                switch (typeView) {
                    case "month":
                        return "year";
                    case "year":
                        return "decade";
                    case "decade":
                        return "century"
                }
            };
            var getViewDown = function(typeView) {
                switch (typeView) {
                    case "century":
                        return "decade";
                    case "decade":
                        return "year";
                    case "year":
                        return "month"
                }
            };
            var getDifferenceInMonth = function(typeView) {
                var difference = 1;
                if ("year" === typeView) {
                    difference = 12;
                }
                if ("decade" === typeView) {
                    difference = 120;
                }
                if ("century" === typeView) {
                    difference = 1200;
                }
                return difference
            };
            var getDifferenceInMonthForCells = function(typeView) {
                var difference = 1;
                if ("decade" === typeView) {
                    difference = 12;
                }
                if ("century" === typeView) {
                    difference = 120;
                }
                return difference
            };

            function getDateIntervalByString(intervalString) {
                var result = {};
                switch (intervalString) {
                    case "year":
                        result.years = 1;
                        break;
                    case "month":
                        result.months = 1;
                        break;
                    case "quarter":
                        result.months = 3;
                        break;
                    case "week":
                        result.weeks = 1;
                        break;
                    case "day":
                        result.days = 1;
                        break;
                    case "hour":
                        result.hours = 1;
                        break;
                    case "minute":
                        result.minutes = 1;
                        break;
                    case "second":
                        result.seconds = 1;
                        break;
                    case "millisecond":
                        result.milliseconds = 1;
                }
                return result
            }

            function sameDate(date1, date2) {
                return sameMonthAndYear(date1, date2) && date1.getDate() === date2.getDate()
            }

            function sameMonthAndYear(date1, date2) {
                return sameYear(date1, date2) && date1.getMonth() === date2.getMonth()
            }

            function sameYear(date1, date2) {
                return date1 && date2 && date1.getFullYear() === date2.getFullYear()
            }

            function sameHoursAndMinutes(date1, date2) {
                return date1 && date2 && date1.getHours() === date2.getHours() && date1.getMinutes() === date2.getMinutes()
            }
            var sameDecade = function(date1, date2) {
                if (!isDefined(date1) || !isDefined(date2)) {
                    return
                }
                var startDecadeDate1 = date1.getFullYear() - date1.getFullYear() % 10;
                var startDecadeDate2 = date2.getFullYear() - date2.getFullYear() % 10;
                return date1 && date2 && startDecadeDate1 === startDecadeDate2
            };
            var sameCentury = function(date1, date2) {
                if (!isDefined(date1) || !isDefined(date2)) {
                    return
                }
                var startCenturyDate1 = date1.getFullYear() - date1.getFullYear() % 100;
                var startCenturyDate2 = date2.getFullYear() - date2.getFullYear() % 100;
                return date1 && date2 && startCenturyDate1 === startCenturyDate2
            };

            function getFirstDecadeInCentury(date) {
                return date && date.getFullYear() - date.getFullYear() % 100
            }

            function getFirstYearInDecade(date) {
                return date && date.getFullYear() - date.getFullYear() % 10
            }
            var getShortDateFormat = function() {
                return "yyyy/MM/dd"
            };
            var getFirstMonthDate = function(date) {
                if (!isDefined(date)) {
                    return
                }
                return createDateWithFullYear(date.getFullYear(), date.getMonth(), 1)
            };
            var getLastMonthDate = function(date) {
                if (!isDefined(date)) {
                    return
                }
                return createDateWithFullYear(date.getFullYear(), date.getMonth() + 1, 0)
            };

            function getFirstWeekDate(date, firstDayOfWeek) {
                var delta = (date.getDay() - firstDayOfWeek + DAYS_IN_WEEK) % DAYS_IN_WEEK;
                var result = new Date(date);
                result.setDate(date.getDate() - delta);
                return result
            }

            function getUTCTime(date) {
                return Date.UTC(date.getFullYear(), date.getMonth(), date.getDate())
            }

            function getDayNumber(date) {
                var ms = getUTCTime(date) - getUTCTime(getFirstDateInYear(date.getFullYear()));
                return 1 + Math.floor(ms / toMilliseconds("day"))
            }

            function getFirstDateInYear(year) {
                return new Date(year, 0, 1)
            }

            function getLastDateInYear(year) {
                return new Date(year, 11, 31)
            }

            function getDayWeekNumber(date, firstDayOfWeek) {
                var day = date.getDay() - firstDayOfWeek + 1;
                if (day <= 0) {
                    day += DAYS_IN_WEEK;
                }
                return day
            }

            function getWeekNumber(date, firstDayOfWeek, rule) {
                var firstWeekDayInYear = getDayWeekNumber(getFirstDateInYear(date.getFullYear()), firstDayOfWeek);
                var lastWeekDayInYear = getDayWeekNumber(getLastDateInYear(date.getFullYear()), firstDayOfWeek);
                var daysInFirstWeek = DAYS_IN_WEEK - firstWeekDayInYear + 1;
                var weekNumber = Math.ceil((getDayNumber(date) - daysInFirstWeek) / 7);
                switch (rule) {
                    case "fullWeek":
                        if (daysInFirstWeek === DAYS_IN_WEEK) {
                            weekNumber++;
                        }
                        if (0 === weekNumber) {
                            var lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);
                            return getWeekNumber(lastDateInPreviousYear, firstDayOfWeek, rule)
                        }
                        return weekNumber;
                    case "firstDay":
                        if (daysInFirstWeek > 0) {
                            weekNumber++;
                        }
                        var isSunday = firstWeekDayInYear === SUNDAY_WEEK_NUMBER || lastWeekDayInYear === SUNDAY_WEEK_NUMBER;
                        if (weekNumber > USUAL_WEEK_COUNT_IN_YEAR && !isSunday || 54 === weekNumber) {
                            weekNumber = 1;
                        }
                        return weekNumber;
                    case "firstFourDays":
                        if (daysInFirstWeek > 3) {
                            weekNumber++;
                        }
                        var isThursday = firstWeekDayInYear === THURSDAY_WEEK_NUMBER || lastWeekDayInYear === THURSDAY_WEEK_NUMBER;
                        if (weekNumber > USUAL_WEEK_COUNT_IN_YEAR && !isThursday) {
                            weekNumber = 1;
                        }
                        if (0 === weekNumber) {
                            var _lastDateInPreviousYear = getLastDateInYear(date.getFullYear() - 1);
                            return getWeekNumber(_lastDateInPreviousYear, firstDayOfWeek, rule)
                        }
                        return weekNumber
                }
            }
            var normalizeDateByWeek = function(date, currentDate) {
                var differenceInDays = dateUtils.getDatesInterval(date, currentDate, "day");
                var resultDate = new Date(date);
                if (differenceInDays >= 6) {
                    resultDate = new Date(resultDate.setDate(resultDate.getDate() + 7));
                }
                return resultDate
            };
            var dateInRange = function(date, min, max, format) {
                if ("date" === format) {
                    min = min && dateUtils.correctDateWithUnitBeginning(min, "day");
                    max = max && dateUtils.correctDateWithUnitBeginning(max, "day");
                    date = date && dateUtils.correctDateWithUnitBeginning(date, "day");
                }
                return normalizeDate(date, min, max) === date
            };
            var intervalsOverlap = function(options) {
                var {
                    firstMin: firstMin,
                    firstMax: firstMax,
                    secondMin: secondMin,
                    secondMax: secondMax
                } = options;
                return firstMin <= secondMin && secondMin <= firstMax || firstMin > secondMin && firstMin < secondMax || firstMin < secondMax && firstMax > secondMax
            };
            var dateTimeFromDecimal = function(number) {
                var hours = Math.floor(number);
                var minutes = number % 1 * 60;
                return {
                    hours: hours,
                    minutes: minutes
                }
            };
            var roundDateByStartDayHour = function(date, startDayHour) {
                var startTime = this.dateTimeFromDecimal(startDayHour);
                var result = new Date(date);
                if (date.getHours() === startTime.hours && date.getMinutes() < startTime.minutes || date.getHours() < startTime.hours) {
                    result.setHours(startTime.hours, startTime.minutes, 0, 0);
                }
                return result
            };

            function normalizeDate(date, min, max) {
                var normalizedDate = date;
                if (!isDefined(date)) {
                    return date
                }
                if (isDefined(min) && date < min) {
                    normalizedDate = min;
                }
                if (isDefined(max) && date > max) {
                    normalizedDate = max;
                }
                return normalizedDate
            }

            function fixTimezoneGap(oldDate, newDate) {
                if (!isDefined(oldDate)) {
                    return
                }
                var diff = newDate.getHours() - oldDate.getHours();
                if (0 === diff) {
                    return
                }
                var sign = 1 === diff || -23 === diff ? -1 : 1;
                var trial = new Date(newDate.getTime() + 36e5 * sign);
                if (sign > 0 || trial.getDate() === newDate.getDate()) {
                    newDate.setTime(trial.getTime());
                }
            }
            var roundToHour = function(date) {
                var result = new Date(date.getTime());
                result.setHours(result.getHours() + 1);
                result.setMinutes(0);
                return result
            };

            function getTimezonesDifference(min, max) {
                return 60 * (max.getTimezoneOffset() - min.getTimezoneOffset()) * 1e3
            }
            var makeDate = function(date) {
                return new Date(date)
            };
            var getDatesOfInterval = function(startDate, endDate, step) {
                var result = [];
                var currentDate = new Date(startDate.getTime());
                while (currentDate < endDate) {
                    result.push(new Date(currentDate.getTime()));
                    currentDate = this.addInterval(currentDate, step);
                }
                return result
            };
            var createDateWithFullYear = function(year) {
                var result = new Date(...arguments);
                result.setFullYear(year);
                return result
            };
            var getMachineTimezoneName = () => {
                var hasIntl = "undefined" !== typeof Intl;
                return hasIntl ? Intl.DateTimeFormat().resolvedOptions().timeZone : null
            };
            var dateUtils = exports("c7", {
                dateUnitIntervals: dateUnitIntervals,
                convertMillisecondsToDateUnits: convertMillisecondsToDateUnits,
                dateToMilliseconds: dateToMilliseconds,
                getNextDateUnit: getNextDateUnit,
                convertDateUnitToMilliseconds: convertDateUnitToMilliseconds,
                getDateUnitInterval: getDateUnitInterval,
                getDateFormatByTickInterval: getDateFormatByTickInterval,
                getDatesDifferences: getDatesDifferences,
                correctDateWithUnitBeginning: correctDateWithUnitBeginning,
                trimTime: trimTime,
                setToDayEnd: setToDayEnd,
                roundDateByStartDayHour: roundDateByStartDayHour,
                dateTimeFromDecimal: dateTimeFromDecimal,
                addDateInterval: addDateInterval,
                addInterval: addInterval,
                getSequenceByInterval: getSequenceByInterval,
                getDateIntervalByString: getDateIntervalByString,
                sameHoursAndMinutes: sameHoursAndMinutes,
                sameDate: sameDate,
                sameMonthAndYear: sameMonthAndYear,
                sameMonth: sameMonthAndYear,
                sameYear: sameYear,
                sameDecade: sameDecade,
                sameCentury: sameCentury,
                getDifferenceInMonth: getDifferenceInMonth,
                getDifferenceInMonthForCells: getDifferenceInMonthForCells,
                getFirstYearInDecade: getFirstYearInDecade,
                getFirstDecadeInCentury: getFirstDecadeInCentury,
                getShortDateFormat: getShortDateFormat,
                getViewFirstCellDate: getViewFirstCellDate,
                getViewLastCellDate: getViewLastCellDate,
                getViewDown: getViewDown,
                getViewUp: getViewUp,
                getLastMonthDay: getLastMonthDay,
                getLastMonthDate: getLastMonthDate,
                getFirstMonthDate: getFirstMonthDate,
                getFirstWeekDate: getFirstWeekDate,
                getWeekNumber: getWeekNumber,
                normalizeDateByWeek: normalizeDateByWeek,
                getQuarter: getQuarter,
                getFirstQuarterMonth: getFirstQuarterMonth,
                dateInRange: dateInRange,
                intervalsOverlap: intervalsOverlap,
                roundToHour: roundToHour,
                normalizeDate: normalizeDate,
                getViewMinBoundaryDate: getViewMinBoundaryDate,
                getViewMaxBoundaryDate: getViewMaxBoundaryDate,
                fixTimezoneGap: fixTimezoneGap,
                getTimezonesDifference: getTimezonesDifference,
                makeDate: makeDate,
                getDatesInterval: getDatesInterval,
                getDatesOfInterval: getDatesOfInterval,
                createDateWithFullYear: createDateWithFullYear,
                getMachineTimezoneName: getMachineTimezoneName
            });
            dateUtils.sameView = function(view, date1, date2) {
                return dateUtils[camelize("same " + view)](date1, date2)
            };

            /**
             * DevExtreme (esm/localization/ldml/date.formatter.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            function leftPad(text, length) {
                while (text.length < length) {
                    text = "0" + text;
                }
                return text
            }
            var FORMAT_TYPES$1 = {
                3: "abbreviated",
                4: "wide",
                5: "narrow"
            };
            var LDML_FORMATTERS = {
                y: function(date, count, useUtc) {
                    var year = date[useUtc ? "getUTCFullYear" : "getFullYear"]();
                    if (2 === count) {
                        year %= 100;
                    }
                    return leftPad(year.toString(), count)
                },
                M: function(date, count, useUtc, dateParts) {
                    var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
                    var formatType = FORMAT_TYPES$1[count];
                    if (formatType) {
                        return dateParts.getMonthNames(formatType, "format")[month]
                    }
                    return leftPad((month + 1).toString(), Math.min(count, 2))
                },
                L: function(date, count, useUtc, dateParts) {
                    var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
                    var formatType = FORMAT_TYPES$1[count];
                    if (formatType) {
                        return dateParts.getMonthNames(formatType, "standalone")[month]
                    }
                    return leftPad((month + 1).toString(), Math.min(count, 2))
                },
                Q: function(date, count, useUtc, dateParts) {
                    var month = date[useUtc ? "getUTCMonth" : "getMonth"]();
                    var quarter = Math.floor(month / 3);
                    var formatType = FORMAT_TYPES$1[count];
                    if (formatType) {
                        return dateParts.getQuarterNames(formatType)[quarter]
                    }
                    return leftPad((quarter + 1).toString(), Math.min(count, 2))
                },
                E: function(date, count, useUtc, dateParts) {
                    var day = date[useUtc ? "getUTCDay" : "getDay"]();
                    var formatType = FORMAT_TYPES$1[count < 3 ? 3 : count];
                    return dateParts.getDayNames(formatType)[day]
                },
                a: function(date, count, useUtc, dateParts) {
                    var hours = date[useUtc ? "getUTCHours" : "getHours"]();
                    var period = hours < 12 ? 0 : 1;
                    var formatType = FORMAT_TYPES$1[count];
                    return dateParts.getPeriodNames(formatType)[period]
                },
                d: function(date, count, useUtc) {
                    return leftPad(date[useUtc ? "getUTCDate" : "getDate"]().toString(), Math.min(count, 2))
                },
                H: function(date, count, useUtc) {
                    return leftPad(date[useUtc ? "getUTCHours" : "getHours"]().toString(), Math.min(count, 2))
                },
                h: function(date, count, useUtc) {
                    var hours = date[useUtc ? "getUTCHours" : "getHours"]();
                    return leftPad((hours % 12 || 12).toString(), Math.min(count, 2))
                },
                m: function(date, count, useUtc) {
                    return leftPad(date[useUtc ? "getUTCMinutes" : "getMinutes"]().toString(), Math.min(count, 2))
                },
                s: function(date, count, useUtc) {
                    return leftPad(date[useUtc ? "getUTCSeconds" : "getSeconds"]().toString(), Math.min(count, 2))
                },
                S: function(date, count, useUtc) {
                    return leftPad(date[useUtc ? "getUTCMilliseconds" : "getMilliseconds"]().toString(), 3).substr(0, count)
                },
                x: function(date, count, useUtc) {
                    var timezoneOffset = useUtc ? 0 : date.getTimezoneOffset();
                    var signPart = timezoneOffset > 0 ? "-" : "+";
                    var timezoneOffsetAbs = Math.abs(timezoneOffset);
                    var hours = Math.floor(timezoneOffsetAbs / 60);
                    var minutes = timezoneOffsetAbs % 60;
                    var hoursPart = leftPad(hours.toString(), 2);
                    var minutesPart = leftPad(minutes.toString(), 2);
                    return signPart + hoursPart + (count >= 3 ? ":" : "") + (count > 1 || minutes ? minutesPart : "")
                },
                X: function(date, count, useUtc) {
                    if (useUtc || !date.getTimezoneOffset()) {
                        return "Z"
                    }
                    return LDML_FORMATTERS.x(date, count, useUtc)
                },
                Z: function(date, count, useUtc) {
                    return LDML_FORMATTERS.X(date, count >= 5 ? 3 : 2, useUtc)
                }
            };
            var getFormatter$1 = exports("cc", function(format, dateParts) {
                return function(date) {
                    var charIndex;
                    var formatter;
                    var char;
                    var charCount = 0;
                    var isEscaping = false;
                    var isCurrentCharEqualsNext;
                    var result = "";
                    if (!date) {
                        return null
                    }
                    if (!format) {
                        return date
                    }
                    var useUtc = "Z" === format[format.length - 1] || "'Z'" === format.slice(-3);
                    for (charIndex = 0; charIndex < format.length; charIndex++) {
                        char = format[charIndex];
                        formatter = LDML_FORMATTERS[char];
                        isCurrentCharEqualsNext = char === format[charIndex + 1];
                        charCount++;
                        if (!isCurrentCharEqualsNext) {
                            if (formatter && !isEscaping) {
                                result += formatter(date, charCount, useUtc, dateParts);
                            }
                            charCount = 0;
                        }
                        if ("'" === char && !isCurrentCharEqualsNext) {
                            isEscaping = !isEscaping;
                        } else if (isEscaping || !formatter) {
                            result += char;
                        }
                        if ("'" === char && isCurrentCharEqualsNext) {
                            charIndex++;
                        }
                    }
                    return result
                }
            });

            /**
             * DevExtreme (esm/localization/default_date_names.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var MONTHS = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
            var DAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
            var PERIODS = ["AM", "PM"];
            var QUARTERS = ["Q1", "Q2", "Q3", "Q4"];
            var cutCaptions = (captions, format) => {
                var lengthByFormat = {
                    abbreviated: 3,
                    short: 2,
                    narrow: 1
                };
                return map(captions, caption => caption.substr(0, lengthByFormat[format]))
            };
            var defaultDateNames = exports("cd", {
                getMonthNames: function(format) {
                    return cutCaptions(MONTHS, format)
                },
                getDayNames: function(format) {
                    return cutCaptions(DAYS, format)
                },
                getQuarterNames: function(format) {
                    return QUARTERS
                },
                getPeriodNames: function(format) {
                    return PERIODS
                }
            });

            /**
             * DevExtreme (esm/localization/ldml/date.format.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var ARABIC_COMMA = "\u060c";
            var FORMAT_SEPARATORS = " .,:;/\\<>()-[]" + ARABIC_COMMA;
            var AM_PM_PATTERN = ". m.";
            var checkDigit = function(char) {
                var code = char && numberLocalization.convertDigits(char, false).charCodeAt(0);
                var zeroCode = numberLocalization.convertDigits("0", false).charCodeAt(0);
                return zeroCode <= code && code < zeroCode + 10
            };
            var checkPatternContinue = function(text, patterns, index, isDigit) {
                var char = text[index];
                var nextChar = text[index + 1];
                if (!isDigit) {
                    if ("." === char || " " === char && text.slice(index - 1, index + 3) === AM_PM_PATTERN) {
                        return true
                    }
                    if ("-" === char && !checkDigit(nextChar)) {
                        return true
                    }
                }
                var isDigitChanged = isDigit && patterns.some(pattern => text[index] !== pattern[index]);
                return FORMAT_SEPARATORS.indexOf(char) < 0 && isDigit === checkDigit(char) && (!isDigit || isDigitChanged)
            };
            var getPatternStartIndex = function(defaultPattern, index) {
                if (!checkDigit(defaultPattern[index])) {
                    while (index > 0 && !checkDigit(defaultPattern[index - 1]) && ("." === defaultPattern[index - 1] || FORMAT_SEPARATORS.indexOf(defaultPattern[index - 1]) < 0)) {
                        index--;
                    }
                }
                return index
            };
            var getDifference = function(defaultPattern, patterns, processedIndexes, isDigit) {
                var i = 0;
                var result = [];
                var patternsFilter = function(pattern) {
                    return defaultPattern[i] !== pattern[i] && (void 0 === isDigit || checkDigit(defaultPattern[i]) === isDigit)
                };
                if (!Array.isArray(patterns)) {
                    patterns = [patterns];
                }
                for (i = 0; i < defaultPattern.length; i++) {
                    if (processedIndexes.indexOf(i) < 0 && patterns.filter(patternsFilter).length) {
                        i = getPatternStartIndex(defaultPattern, i);
                        do {
                            isDigit = checkDigit(defaultPattern[i]);
                            if (!result.length && !isDigit && checkDigit(patterns[0][i])) {
                                break
                            }
                            result.push(i);
                            processedIndexes.unshift(i);
                            i++;
                        } while (defaultPattern[i] && checkPatternContinue(defaultPattern, patterns, i, isDigit));
                        break
                    }
                }
                if (1 === result.length && ("0" === defaultPattern[processedIndexes[0] - 1] || "\u0660" === defaultPattern[processedIndexes[0] - 1])) {
                    processedIndexes.unshift(processedIndexes[0] - 1);
                }
                return result
            };
            var replaceCharsCore = function(pattern, indexes, char, patternPositions) {
                var baseCharIndex = indexes[0];
                var patternIndex = baseCharIndex < patternPositions.length ? patternPositions[baseCharIndex] : baseCharIndex;
                indexes.forEach((function(_, index) {
                    pattern = pattern.substr(0, patternIndex + index) + (char.length > 1 ? char[index] : char) + pattern.substr(patternIndex + index + 1);
                }));
                if (1 === indexes.length) {
                    pattern = pattern.replace("0" + char, char + char);
                    pattern = pattern.replace("\u0660" + char, char + char);
                }
                return pattern
            };
            var replaceChars = function(pattern, indexes, char, patternPositions) {
                var i;
                var index;
                var patternIndex;
                if (!checkDigit(pattern[indexes[0]] || "0")) {
                    var letterCount = Math.max(indexes.length <= 3 ? 3 : 4, char.length);
                    while (indexes.length > letterCount) {
                        index = indexes.pop();
                        patternIndex = patternPositions[index];
                        patternPositions[index] = -1;
                        for (i = index + 1; i < patternPositions.length; i++) {
                            patternPositions[i]--;
                        }
                        pattern = pattern.substr(0, patternIndex) + pattern.substr(patternIndex + 1);
                    }
                    index = indexes[indexes.length - 1] + 1, patternIndex = index < patternPositions.length ? patternPositions[index] : index;
                    while (indexes.length < letterCount) {
                        indexes.push(indexes[indexes.length - 1] + 1);
                        for (i = index; i < patternPositions.length; i++) {
                            patternPositions[i]++;
                        }
                        pattern = pattern.substr(0, patternIndex) + " " + pattern.substr(patternIndex);
                    }
                }
                pattern = replaceCharsCore(pattern, indexes, char, patternPositions);
                return pattern
            };
            var formatValue$1 = function(value, formatter) {
                if (Array.isArray(value)) {
                    return value.map((function(value) {
                        return (formatter(value) || "").toString()
                    }))
                }
                return (formatter(value) || "").toString()
            };
            var ESCAPE_CHARS_REGEXP = /[a-zA-Z]/g;
            var escapeChars = function(pattern, defaultPattern, processedIndexes, patternPositions) {
                var escapeIndexes = defaultPattern.split("").map((function(char, index) {
                    if (processedIndexes.indexOf(index) < 0 && (char.match(ESCAPE_CHARS_REGEXP) || "'" === char)) {
                        return patternPositions[index]
                    }
                    return -1
                }));
                pattern = pattern.split("").map((function(char, index) {
                    var result = char;
                    var isCurrentCharEscaped = escapeIndexes.indexOf(index) >= 0;
                    var isPrevCharEscaped = index > 0 && escapeIndexes.indexOf(index - 1) >= 0;
                    var isNextCharEscaped = escapeIndexes.indexOf(index + 1) >= 0;
                    if (isCurrentCharEscaped) {
                        if (!isPrevCharEscaped) {
                            result = "'" + result;
                        }
                        if (!isNextCharEscaped) {
                            result += "'";
                        }
                    }
                    return result
                })).join("");
                return pattern
            };
            var getFormat = exports("et", function(formatter) {
                var processedIndexes = [];
                var defaultPattern = formatValue$1(new Date(2009, 8, 8, 6, 5, 4), formatter);
                var patternPositions = defaultPattern.split("").map((function(_, index) {
                    return index
                }));
                var result = defaultPattern;
                var replacedPatterns = {};
                var datePatterns = [{
                    date: new Date(2009, 8, 8, 6, 5, 4, 111),
                    pattern: "S"
                }, {
                    date: new Date(2009, 8, 8, 6, 5, 2),
                    pattern: "s"
                }, {
                    date: new Date(2009, 8, 8, 6, 2, 4),
                    pattern: "m"
                }, {
                    date: new Date(2009, 8, 8, 18, 5, 4),
                    pattern: "H",
                    isDigit: true
                }, {
                    date: new Date(2009, 8, 8, 2, 5, 4),
                    pattern: "h",
                    isDigit: true
                }, {
                    date: new Date(2009, 8, 8, 18, 5, 4),
                    pattern: "a",
                    isDigit: false
                }, {
                    date: new Date(2009, 8, 1, 6, 5, 4),
                    pattern: "d"
                }, {
                    date: [new Date(2009, 8, 2, 6, 5, 4), new Date(2009, 8, 3, 6, 5, 4), new Date(2009, 8, 4, 6, 5, 4)],
                    pattern: "E"
                }, {
                    date: new Date(2009, 9, 6, 6, 5, 4),
                    pattern: "M"
                }, {
                    date: new Date(1998, 8, 8, 6, 5, 4),
                    pattern: "y"
                }];
                if (!result) {
                    return
                }
                datePatterns.forEach((function(test) {
                    var diff = getDifference(defaultPattern, formatValue$1(test.date, formatter), processedIndexes, test.isDigit);
                    var pattern = "M" === test.pattern && !replacedPatterns.d ? "L" : test.pattern;
                    result = replaceChars(result, diff, pattern, patternPositions);
                    replacedPatterns[pattern] = diff.length;
                }));
                result = escapeChars(result, defaultPattern, processedIndexes, patternPositions);
                if (processedIndexes.length) {
                    return result
                }
            });

            /**
             * DevExtreme (esm/localization/ldml/date.parser.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var FORMAT_TYPES = {
                3: "abbreviated",
                4: "wide",
                5: "narrow"
            };
            var monthRegExpGenerator = function(count, dateParts) {
                if (count > 2) {
                    return Object.keys(FORMAT_TYPES).map((function(count) {
                        return ["format", "standalone"].map((function(type) {
                            return dateParts.getMonthNames(FORMAT_TYPES[count], type).join("|")
                        })).join("|")
                    })).join("|")
                }
                return 2 === count ? "1[012]|0?[1-9]" : "0??[1-9]|1[012]"
            };
            var PATTERN_REGEXPS = {
                ":": function(count, dateParts) {
                    var countSuffix = count > 1 ? "{".concat(count, "}") : "";
                    var timeSeparator = escapeRegExp(dateParts.getTimeSeparator());
                    ":" !== timeSeparator && (timeSeparator = "".concat(timeSeparator, "|:"));
                    return "".concat(timeSeparator).concat(countSuffix)
                },
                y: function(count) {
                    return 2 === count ? "[0-9]{".concat(count, "}") : "[0-9]+?"
                },
                M: monthRegExpGenerator,
                L: monthRegExpGenerator,
                Q: function(count, dateParts) {
                    if (count > 2) {
                        return dateParts.getQuarterNames(FORMAT_TYPES[count], "format").join("|")
                    }
                    return "0?[1-4]"
                },
                E: function(count, dateParts) {
                    return "\\D*"
                },
                a: function(count, dateParts) {
                    return dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], "format").join("|")
                },
                d: function(count) {
                    return 2 === count ? "3[01]|[12][0-9]|0?[1-9]" : "0??[1-9]|[12][0-9]|3[01]"
                },
                H: function(count) {
                    return 2 === count ? "2[0-3]|1[0-9]|0?[0-9]" : "0??[0-9]|1[0-9]|2[0-3]"
                },
                h: function(count) {
                    return 2 === count ? "1[012]|0?[1-9]" : "0??[1-9]|1[012]"
                },
                m: function(count) {
                    return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]"
                },
                s: function(count) {
                    return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]"
                },
                S: function(count) {
                    return "[0-9]{1,".concat(count, "}")
                },
                w: function(count) {
                    return 2 === count ? "[1-5][0-9]|0?[0-9]" : "0??[0-9]|[1-5][0-9]"
                }
            };
            var parseNumber = Number;
            var caseInsensitiveIndexOf = function(array, value) {
                return array.map(item => item.toLowerCase()).indexOf(value.toLowerCase())
            };
            var monthPatternParser = function(text, count, dateParts) {
                if (count > 2) {
                    return ["format", "standalone"].map((function(type) {
                        return Object.keys(FORMAT_TYPES).map((function(count) {
                            var monthNames = dateParts.getMonthNames(FORMAT_TYPES[count], type);
                            return caseInsensitiveIndexOf(monthNames, text)
                        }))
                    })).reduce((function(a, b) {
                        return a.concat(b)
                    })).filter((function(index) {
                        return index >= 0
                    }))[0]
                }
                return parseNumber(text) - 1
            };
            var PATTERN_PARSERS = {
                y: function(text, count) {
                    var year = parseNumber(text);
                    if (2 === count) {
                        return year < 30 ? 2e3 + year : 1900 + year
                    }
                    return year
                },
                M: monthPatternParser,
                L: monthPatternParser,
                Q: function(text, count, dateParts) {
                    if (count > 2) {
                        return dateParts.getQuarterNames(FORMAT_TYPES[count], "format").indexOf(text)
                    }
                    return parseNumber(text) - 1
                },
                E: function(text, count, dateParts) {
                    var dayNames = dateParts.getDayNames(FORMAT_TYPES[count < 3 ? 3 : count], "format");
                    return caseInsensitiveIndexOf(dayNames, text)
                },
                a: function(text, count, dateParts) {
                    var periodNames = dateParts.getPeriodNames(FORMAT_TYPES[count < 3 ? 3 : count], "format");
                    return caseInsensitiveIndexOf(periodNames, text)
                },
                d: parseNumber,
                H: parseNumber,
                h: parseNumber,
                m: parseNumber,
                s: parseNumber,
                S: function(text, count) {
                    count = Math.max(count, 3);
                    text = text.slice(0, 3);
                    while (count < 3) {
                        text += "0";
                        count++;
                    }
                    return parseNumber(text)
                }
            };
            var ORDERED_PATTERNS = ["y", "M", "d", "h", "m", "s", "S"];
            var PATTERN_SETTERS = {
                y: "setFullYear",
                M: "setMonth",
                L: "setMonth",
                a: function(date, value, datePartValues) {
                    var hours = date.getHours();
                    var hourPartValue = datePartValues.h;
                    if (void 0 !== hourPartValue && hourPartValue !== hours) {
                        hours--;
                    }
                    if (!value && 12 === hours) {
                        hours = 0;
                    } else if (value && 12 !== hours) {
                        hours += 12;
                    }
                    date.setHours(hours);
                },
                d: "setDate",
                H: "setHours",
                h: "setHours",
                m: "setMinutes",
                s: "setSeconds",
                S: "setMilliseconds"
            };
            var getSameCharCount = function(text, index) {
                var char = text[index];
                if (!char) {
                    return 0
                }
                var count = 0;
                do {
                    index++;
                    count++;
                } while (text[index] === char);
                return count
            };
            var createPattern = function(char, count) {
                var result = "";
                for (var i = 0; i < count; i++) {
                    result += char;
                }
                return result
            };
            var getRegExpInfo = exports("eu", function(format, dateParts) {
                var regexpText = "";
                var stubText = "";
                var isEscaping;
                var patterns = [];
                var addPreviousStub = function() {
                    if (stubText) {
                        patterns.push("'".concat(stubText, "'"));
                        regexpText += "".concat(escapeRegExp(stubText), ")");
                        stubText = "";
                    }
                };
                for (var i = 0; i < format.length; i++) {
                    var char = format[i];
                    var isEscapeChar = "'" === char;
                    var regexpPart = PATTERN_REGEXPS[char];
                    if (isEscapeChar) {
                        isEscaping = !isEscaping;
                        if ("'" !== format[i - 1]) {
                            continue
                        }
                    }
                    if (regexpPart && !isEscaping) {
                        var count = getSameCharCount(format, i);
                        var pattern = createPattern(char, count);
                        addPreviousStub();
                        patterns.push(pattern);
                        regexpText += "(".concat(regexpPart(count, dateParts), ")");
                        i += count - 1;
                    } else {
                        if (!stubText) {
                            regexpText += "(";
                        }
                        stubText += char;
                    }
                }
                addPreviousStub();
                if (!isPossibleForParsingFormat(patterns)) {
                    logger.warn("The following format may be parsed incorrectly: ".concat(format, "."));
                }
                return {
                    patterns: patterns,
                    regexp: new RegExp("^".concat(regexpText, "$"), "i")
                }
            });
            var digitFieldSymbols = ["d", "H", "h", "m", "s", "w", "M", "L", "Q"];
            var isPossibleForParsingFormat = function(patterns) {
                var isDigitPattern = pattern => {
                    if (!pattern) {
                        return false
                    }
                    var char = pattern[0];
                    return ["y", "S"].includes(char) || digitFieldSymbols.includes(char) && pattern.length < 3
                };
                var possibleForParsing = true;
                var ambiguousDigitPatternsCount = 0;
                return patterns.every((pattern, index, patterns) => {
                    if (isDigitPattern(pattern)) {
                        if ((pattern => "S" !== pattern[0] && 2 !== pattern.length)(pattern)) {
                            possibleForParsing = ++ambiguousDigitPatternsCount < 2;
                        }
                        if (!isDigitPattern(patterns[index + 1])) {
                            ambiguousDigitPatternsCount = 0;
                        }
                    }
                    return possibleForParsing
                })
            };
            var getPatternSetters = exports("eq", function() {
                return PATTERN_SETTERS
            });
            var setPatternPart = function(date, pattern, text, dateParts, datePartValues) {
                var patternChar = pattern[0];
                var partSetter = PATTERN_SETTERS[patternChar];
                var partParser = PATTERN_PARSERS[patternChar];
                if (partSetter && partParser) {
                    var value = partParser(text, pattern.length, dateParts);
                    datePartValues[pattern] = value;
                    if (date[partSetter]) {
                        date[partSetter](value);
                    } else {
                        partSetter(date, value, datePartValues);
                    }
                }
            };
            var setPatternPartFromNow = function(date, pattern, now) {
                var setterName = PATTERN_SETTERS[pattern];
                var getterName = "g" + setterName.substr(1);
                var value = now[getterName]();
                date[setterName](value);
            };
            var getShortPatterns = function(fullPatterns) {
                return fullPatterns.map((function(pattern) {
                    if ("'" === pattern[0]) {
                        return ""
                    } else {
                        return "H" === pattern[0] ? "h" : pattern[0]
                    }
                }))
            };
            var getMaxOrderedPatternIndex = function(patterns) {
                var indexes = patterns.map((function(pattern) {
                    return ORDERED_PATTERNS.indexOf(pattern)
                }));
                return Math.max.apply(Math, indexes)
            };
            var getOrderedFormatPatterns = function(formatPatterns) {
                var otherPatterns = formatPatterns.filter((function(pattern) {
                    return ORDERED_PATTERNS.indexOf(pattern) < 0
                }));
                return ORDERED_PATTERNS.concat(otherPatterns)
            };
            var getParser = function(format, dateParts) {
                var regExpInfo = getRegExpInfo(format, dateParts);
                return function(text) {
                    var regExpResult = regExpInfo.regexp.exec(text);
                    if (regExpResult) {
                        var now = new Date;
                        var date = new Date(now.getFullYear(), 0, 1);
                        var formatPatterns = getShortPatterns(regExpInfo.patterns);
                        var maxPatternIndex = getMaxOrderedPatternIndex(formatPatterns);
                        var orderedFormatPatterns = getOrderedFormatPatterns(formatPatterns);
                        var datePartValues = {};
                        orderedFormatPatterns.forEach((function(pattern, index) {
                            if (!pattern || index < ORDERED_PATTERNS.length && index > maxPatternIndex) {
                                return
                            }
                            var patternIndex = formatPatterns.indexOf(pattern);
                            if (patternIndex >= 0) {
                                var regExpPattern = regExpInfo.patterns[patternIndex];
                                var regExpText = regExpResult[patternIndex + 1];
                                setPatternPart(date, regExpPattern, regExpText, dateParts, datePartValues);
                            } else {
                                setPatternPartFromNow(date, pattern, now);
                            }
                        }));
                        return date
                    }
                    return null
                }
            };

            /**
             * DevExtreme (esm/localization/cldr-data/first_day_of_week_data.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            // !!! AUTO-GENERATED FILE, DO NOT EDIT
            var firstDayOfWeekData = {
                "af-NA": 1,
                agq: 1,
                ak: 1,
                ar: 6,
                "ar-EH": 1,
                "ar-ER": 1,
                "ar-KM": 1,
                "ar-LB": 1,
                "ar-MA": 1,
                "ar-MR": 1,
                "ar-PS": 1,
                "ar-SO": 1,
                "ar-SS": 1,
                "ar-TD": 1,
                "ar-TN": 1,
                asa: 1,
                ast: 1,
                az: 1,
                "az-Cyrl": 1,
                bas: 1,
                be: 1,
                bem: 1,
                bez: 1,
                bg: 1,
                bm: 1,
                br: 1,
                bs: 1,
                "bs-Cyrl": 1,
                ca: 1,
                ce: 1,
                cgg: 1,
                ckb: 6,
                cs: 1,
                cy: 1,
                da: 1,
                de: 1,
                dje: 1,
                dsb: 1,
                dua: 1,
                dyo: 1,
                ee: 1,
                el: 1,
                "en-001": 1,
                "en-AE": 6,
                "en-BI": 1,
                "en-MP": 1,
                "en-MV": 5,
                "en-SD": 6,
                eo: 1,
                es: 1,
                et: 1,
                eu: 1,
                ewo: 1,
                fa: 6,
                ff: 1,
                "ff-Adlm": 1,
                fi: 1,
                fo: 1,
                fr: 1,
                "fr-DJ": 6,
                "fr-DZ": 6,
                "fr-SY": 6,
                fur: 1,
                fy: 1,
                ga: 1,
                gd: 1,
                gl: 1,
                gsw: 1,
                gv: 1,
                ha: 1,
                hr: 1,
                hsb: 1,
                hu: 1,
                hy: 1,
                ia: 1,
                ig: 1,
                is: 1,
                it: 1,
                jgo: 1,
                jmc: 1,
                ka: 1,
                kab: 6,
                kde: 1,
                kea: 1,
                khq: 1,
                kk: 1,
                kkj: 1,
                kl: 1,
                "ko-KP": 1,
                ksb: 1,
                ksf: 1,
                ksh: 1,
                ku: 1,
                kw: 1,
                ky: 1,
                lag: 1,
                lb: 1,
                lg: 1,
                ln: 1,
                lrc: 6,
                lt: 1,
                lu: 1,
                lv: 1,
                "mas-TZ": 1,
                mfe: 1,
                mg: 1,
                mgo: 1,
                mi: 1,
                mk: 1,
                mn: 1,
                ms: 1,
                mua: 1,
                mzn: 6,
                naq: 1,
                nds: 1,
                nl: 1,
                nmg: 1,
                nnh: 1,
                no: 1,
                nus: 1,
                nyn: 1,
                os: 1,
                pcm: 1,
                pl: 1,
                ps: 6,
                "pt-AO": 1,
                "pt-CH": 1,
                "pt-CV": 1,
                "pt-GQ": 1,
                "pt-GW": 1,
                "pt-LU": 1,
                "pt-ST": 1,
                "pt-TL": 1,
                "qu-BO": 1,
                "qu-EC": 1,
                rm: 1,
                rn: 1,
                ro: 1,
                rof: 1,
                ru: 1,
                rw: 1,
                rwk: 1,
                sah: 1,
                sbp: 1,
                sc: 1,
                se: 1,
                ses: 1,
                sg: 1,
                shi: 1,
                "shi-Latn": 1,
                si: 1,
                sk: 1,
                sl: 1,
                smn: 1,
                so: 1,
                "so-DJ": 6,
                sq: 1,
                sr: 1,
                "sr-Latn": 1,
                sv: 1,
                sw: 1,
                "ta-LK": 1,
                "ta-MY": 1,
                teo: 1,
                tg: 1,
                "ti-ER": 1,
                tk: 1,
                to: 1,
                tr: 1,
                tt: 1,
                twq: 1,
                tzm: 1,
                uk: 1,
                uz: 1,
                "uz-Arab": 6,
                "uz-Cyrl": 1,
                vai: 1,
                "vai-Latn": 1,
                vi: 1,
                vun: 1,
                wae: 1,
                wo: 1,
                xog: 1,
                yav: 1,
                yi: 1,
                yo: 1,
                zgh: 1
            };

            /**
             * DevExtreme (esm/localization/intl/date.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var SYMBOLS_TO_REMOVE_REGEX = /[\u200E\u200F]/g;
            var NARROW_NO_BREAK_SPACE_REGEX = /[\u202F]/g;
            var getIntlFormatter = format => date => {
                if (!format.timeZoneName) {
                    var year = date.getFullYear();
                    var recognizableAsTwentyCentury = String(year).length < 3;
                    var temporaryYearValue = recognizableAsTwentyCentury ? year + 400 : year;
                    var utcDate = new Date(Date.UTC(temporaryYearValue, date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
                    if (recognizableAsTwentyCentury) {
                        utcDate.setFullYear(year);
                    }
                    var utcFormat = extend({
                        timeZone: "UTC"
                    }, format);
                    return formatDateTime(utcDate, utcFormat)
                }
                return formatDateTime(date, format)
            };
            var formattersCache = {};
            var getFormatter = format => {
                var key = localizationCoreUtils.locale() + "/" + JSON.stringify(format);
                if (!formattersCache[key]) {
                    formattersCache[key] = new Intl.DateTimeFormat(localizationCoreUtils.locale(), format).format;
                }
                return formattersCache[key]
            };

            function formatDateTime(date, format) {
                return getFormatter(format)(date).replace(SYMBOLS_TO_REMOVE_REGEX, "").replace(NARROW_NO_BREAK_SPACE_REGEX, " ")
            }
            var formatNumber = number => new Intl.NumberFormat(localizationCoreUtils.locale()).format(number);
            var getAlternativeNumeralsMap = (() => {
                var numeralsMapCache = {};
                return locale => {
                    if (!(locale in numeralsMapCache)) {
                        if ("0" === formatNumber(0)) {
                            numeralsMapCache[locale] = false;
                            return false
                        }
                        numeralsMapCache[locale] = {};
                        for (var i = 0; i < 10; ++i) {
                            numeralsMapCache[locale][formatNumber(i)] = i;
                        }
                    }
                    return numeralsMapCache[locale]
                }
            })();
            var normalizeNumerals = dateString => {
                var alternativeNumeralsMap = getAlternativeNumeralsMap(localizationCoreUtils.locale());
                if (!alternativeNumeralsMap) {
                    return dateString
                }
                return dateString.split("").map(sign => sign in alternativeNumeralsMap ? String(alternativeNumeralsMap[sign]) : sign).join("")
            };
            var removeLeadingZeroes = str => str.replace(/(\D)0+(\d)/g, "$1$2");
            var dateStringEquals = (actual, expected) => removeLeadingZeroes(actual) === removeLeadingZeroes(expected);
            var normalizeMonth = text => text.replace("d\u2019", "de ");
            var intlFormats = {
                day: {
                    day: "numeric"
                },
                date: {
                    year: "numeric",
                    month: "long",
                    day: "numeric"
                },
                dayofweek: {
                    weekday: "long"
                },
                longdate: {
                    weekday: "long",
                    year: "numeric",
                    month: "long",
                    day: "numeric"
                },
                longdatelongtime: {
                    weekday: "long",
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                    hour: "numeric",
                    minute: "numeric",
                    second: "numeric"
                },
                longtime: {
                    hour: "numeric",
                    minute: "numeric",
                    second: "numeric"
                },
                month: {
                    month: "long"
                },
                monthandday: {
                    month: "long",
                    day: "numeric"
                },
                monthandyear: {
                    year: "numeric",
                    month: "long"
                },
                shortdate: {},
                shorttime: {
                    hour: "numeric",
                    minute: "numeric"
                },
                shortyear: {
                    year: "2-digit"
                },
                year: {
                    year: "numeric"
                }
            };
            Object.defineProperty(intlFormats, "shortdateshorttime", {
                get: function() {
                    var defaultOptions = Intl.DateTimeFormat(localizationCoreUtils.locale()).resolvedOptions();
                    return {
                        year: defaultOptions.year,
                        month: defaultOptions.month,
                        day: defaultOptions.day,
                        hour: "numeric",
                        minute: "numeric"
                    }
                }
            });
            var getIntlFormat = format => "string" === typeof format && intlFormats[format.toLowerCase()];
            var monthNameStrategies = {
                standalone: function(monthIndex, monthFormat) {
                    var date = new Date(1999, monthIndex, 13, 1);
                    var dateString = getIntlFormatter({
                        month: monthFormat
                    })(date);
                    return dateString
                },
                format: function(monthIndex, monthFormat) {
                    var date = new Date(0, monthIndex, 13, 1);
                    var dateString = normalizeMonth(getIntlFormatter({
                        day: "numeric",
                        month: monthFormat
                    })(date));
                    var parts = dateString.split(" ").filter(part => part.indexOf("13") < 0);
                    if (1 === parts.length) {
                        return parts[0]
                    } else if (2 === parts.length) {
                        return parts[0].length > parts[1].length ? parts[0] : parts[1]
                    }
                    return monthNameStrategies.standalone(monthIndex, monthFormat)
                }
            };
            var intlDateLocalization = {
                engine: function() {
                    return "intl"
                },
                getMonthNames: function(format, type) {
                    var monthFormat = {
                        wide: "long",
                        abbreviated: "short",
                        narrow: "narrow"
                    } [format || "wide"];
                    type = "format" === type ? type : "standalone";
                    return Array.apply(null, new Array(12)).map((_, monthIndex) => monthNameStrategies[type](monthIndex, monthFormat))
                },
                getDayNames: function(format) {
                    var result = (format => Array.apply(null, new Array(7)).map((_, dayIndex) => getIntlFormatter({
                        weekday: format
                    })(new Date(0, 0, dayIndex))))({
                        wide: "long",
                        abbreviated: "short",
                        short: "narrow",
                        narrow: "narrow"
                    } [format || "wide"]);
                    return result
                },
                getPeriodNames: function() {
                    var hour12Formatter = getIntlFormatter({
                        hour: "numeric",
                        hour12: true
                    });
                    return [1, 13].map(hours => {
                        var hourNumberText = formatNumber(1);
                        var timeParts = hour12Formatter(new Date(0, 0, 1, hours)).split(hourNumberText);
                        if (2 !== timeParts.length) {
                            return ""
                        }
                        var biggerPart = timeParts[0].length > timeParts[1].length ? timeParts[0] : timeParts[1];
                        return biggerPart.trim()
                    })
                },
                format: function(date, _format) {
                    if (!date) {
                        return
                    }
                    if (!_format) {
                        return date
                    }
                    if ("function" !== typeof _format && !_format.formatter) {
                        _format = _format.type || _format;
                    }
                    var intlFormat = getIntlFormat(_format);
                    if (intlFormat) {
                        return getIntlFormatter(intlFormat)(date)
                    }
                    var formatType = typeof _format;
                    if (_format.formatter || "function" === formatType || "string" === formatType) {
                        return this.callBase.apply(this, arguments)
                    }
                    return getIntlFormatter(_format)(date)
                },
                parse: function(dateString, format) {
                    var formatter;
                    if (format && !format.parser && "string" === typeof dateString) {
                        dateString = normalizeMonth(dateString);
                        formatter = date => normalizeMonth(this.format(date, format));
                    }
                    return this.callBase(dateString, formatter || format)
                },
                _parseDateBySimpleFormat: function(dateString, format) {
                    dateString = normalizeNumerals(dateString);
                    var formatParts = this.getFormatParts(format);
                    var dateParts = dateString.split(/\D+/).filter(part => part.length > 0);
                    if (formatParts.length !== dateParts.length) {
                        return
                    }
                    var dateArgs = this._generateDateArgs(formatParts, dateParts);
                    var constructValidDate = ampmShift => {
                        var parsedDate = ((dateArgs, ampmShift) => {
                            var hoursShift = ampmShift ? 12 : 0;
                            return new Date(dateArgs.year, dateArgs.month, dateArgs.day, (dateArgs.hours + hoursShift) % 24, dateArgs.minutes, dateArgs.seconds)
                        })(dateArgs, ampmShift);
                        if (dateStringEquals(normalizeNumerals(this.format(parsedDate, format)), dateString)) {
                            return parsedDate
                        }
                    };
                    return constructValidDate(false) || constructValidDate(true)
                },
                _generateDateArgs: function(formatParts, dateParts) {
                    var currentDate = new Date;
                    var dateArgs = {
                        year: currentDate.getFullYear(),
                        month: currentDate.getMonth(),
                        day: currentDate.getDate(),
                        hours: 0,
                        minutes: 0,
                        seconds: 0
                    };
                    formatParts.forEach((formatPart, index) => {
                        var datePart = dateParts[index];
                        var parsed = parseInt(datePart, 10);
                        if ("month" === formatPart) {
                            parsed -= 1;
                        }
                        dateArgs[formatPart] = parsed;
                    });
                    return dateArgs
                },
                formatUsesMonthName: function(format) {
                    if ("object" === typeof format && !(format.type || format.format)) {
                        return "long" === format.month
                    }
                    return this.callBase.apply(this, arguments)
                },
                formatUsesDayName: function(format) {
                    if ("object" === typeof format && !(format.type || format.format)) {
                        return "long" === format.weekday
                    }
                    return this.callBase.apply(this, arguments)
                },
                getTimeSeparator: function() {
                    return normalizeNumerals(formatDateTime(new Date(2001, 1, 1, 11, 11), {
                        hour: "numeric",
                        minute: "numeric",
                        hour12: false
                    })).replace(/\d/g, "")
                },
                getFormatParts: function(format) {
                    if ("string" === typeof format) {
                        return this.callBase(format)
                    }
                    var intlFormat = extend({}, intlFormats[format.toLowerCase()]);
                    var date = new Date(2001, 2, 4, 5, 6, 7);
                    var formattedDate = getIntlFormatter(intlFormat)(date);
                    formattedDate = normalizeNumerals(formattedDate);
                    return [{
                        name: "year",
                        value: 1
                    }, {
                        name: "month",
                        value: 3
                    }, {
                        name: "day",
                        value: 4
                    }, {
                        name: "hours",
                        value: 5
                    }, {
                        name: "minutes",
                        value: 6
                    }, {
                        name: "seconds",
                        value: 7
                    }].map(part => ({
                        name: part.name,
                        index: formattedDate.indexOf(part.value)
                    })).filter(part => part.index > -1).sort((a, b) => a.index - b.index).map(part => part.name)
                }
            };

            /**
             * DevExtreme (esm/localization/date.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DEFAULT_DAY_OF_WEEK_INDEX = 0;
            var hasIntl = "undefined" !== typeof Intl;
            var FORMATS_TO_PATTERN_MAP = {
                shortdate: "M/d/y",
                shorttime: "h:mm a",
                longdate: "EEEE, MMMM d, y",
                longtime: "h:mm:ss a",
                monthandday: "MMMM d",
                monthandyear: "MMMM y",
                quarterandyear: "QQQ y",
                day: "d",
                year: "y",
                shortdateshorttime: "M/d/y, h:mm a",
                longdatelongtime: "EEEE, MMMM d, y, h:mm:ss a",
                month: "LLLL",
                shortyear: "yy",
                dayofweek: "EEEE",
                quarter: "QQQ",
                hour: "HH",
                minute: "mm",
                second: "ss",
                millisecond: "SSS",
                "datetime-local": "yyyy-MM-ddTHH':'mm':'ss"
            };
            var possiblePartPatterns = {
                year: ["y", "yy", "yyyy"],
                day: ["d", "dd"],
                month: ["M", "MM", "MMM", "MMMM"],
                hours: ["H", "HH", "h", "hh", "ah"],
                minutes: ["m", "mm"],
                seconds: ["s", "ss"],
                milliseconds: ["S", "SS", "SSS"]
            };
            var dateLocalization = exports("cl", dependencyInjector({
                engine: function() {
                    return "base"
                },
                _getPatternByFormat: function(format) {
                    return FORMATS_TO_PATTERN_MAP[format.toLowerCase()]
                },
                _expandPattern: function(pattern) {
                    return this._getPatternByFormat(pattern) || pattern
                },
                formatUsesMonthName: function(format) {
                    return -1 !== this._expandPattern(format).indexOf("MMMM")
                },
                formatUsesDayName: function(format) {
                    return -1 !== this._expandPattern(format).indexOf("EEEE")
                },
                getFormatParts: function(format) {
                    var pattern = this._getPatternByFormat(format) || format;
                    var result = [];
                    each(pattern.split(/\W+/), (_, formatPart) => {
                        each(possiblePartPatterns, (partName, possiblePatterns) => {
                            if (possiblePatterns.includes(formatPart)) {
                                result.push(partName);
                            }
                        });
                    });
                    return result
                },
                getMonthNames: function(format) {
                    return defaultDateNames.getMonthNames(format)
                },
                getDayNames: function(format) {
                    return defaultDateNames.getDayNames(format)
                },
                getQuarterNames: function(format) {
                    return defaultDateNames.getQuarterNames(format)
                },
                getPeriodNames: function(format) {
                    return defaultDateNames.getPeriodNames(format)
                },
                getTimeSeparator: function() {
                    return ":"
                },
                is24HourFormat: function(format) {
                    var amTime = new Date(2017, 0, 20, 11, 0, 0, 0);
                    var pmTime = new Date(2017, 0, 20, 23, 0, 0, 0);
                    var amTimeFormatted = this.format(amTime, format);
                    var pmTimeFormatted = this.format(pmTime, format);
                    for (var i = 0; i < amTimeFormatted.length; i++) {
                        if (amTimeFormatted[i] !== pmTimeFormatted[i]) {
                            return !isNaN(parseInt(amTimeFormatted[i]))
                        }
                    }
                },
                format: function(date, _format) {
                    if (!date) {
                        return
                    }
                    if (!_format) {
                        return date
                    }
                    var formatter;
                    if ("function" === typeof _format) {
                        formatter = _format;
                    } else if (_format.formatter) {
                        formatter = _format.formatter;
                    } else {
                        _format = _format.type || _format;
                        if (isString(_format)) {
                            _format = FORMATS_TO_PATTERN_MAP[_format.toLowerCase()] || _format;
                            return numberLocalization.convertDigits(getFormatter$1(_format, this)(date))
                        }
                    }
                    if (!formatter) {
                        return
                    }
                    return formatter(date)
                },
                parse: function(text, format) {
                    var that = this;
                    var ldmlFormat;
                    var formatter;
                    if (!text) {
                        return
                    }
                    if (!format) {
                        return this.parse(text, "shortdate")
                    }
                    if (format.parser) {
                        return format.parser(text)
                    }
                    if ("string" === typeof format && !FORMATS_TO_PATTERN_MAP[format.toLowerCase()]) {
                        ldmlFormat = format;
                    } else {
                        formatter = value => {
                            var text = that.format(value, format);
                            return numberLocalization.convertDigits(text, true)
                        };
                        try {
                            ldmlFormat = getFormat(formatter);
                        } catch (e) {}
                    }
                    if (ldmlFormat) {
                        text = numberLocalization.convertDigits(text, true);
                        return getParser(ldmlFormat, this)(text)
                    }
                    errors$2.log("W0012");
                    var result = new Date(text);
                    if (!result || isNaN(result.getTime())) {
                        return
                    }
                    return result
                },
                firstDayOfWeekIndex: function() {
                    var index = localizationCoreUtils.getValueByClosestLocale(locale => firstDayOfWeekData[locale]);
                    return void 0 === index ? DEFAULT_DAY_OF_WEEK_INDEX : index
                }
            }));
            if (hasIntl) {
                dateLocalization.inject(intlDateLocalization);
            }

            /**
             * DevExtreme (esm/format_helper.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var formatHelper = exports("cj", dependencyInjector({
                format: function(value, _format) {
                    var formatIsValid = isString(_format) && "" !== _format || isPlainObject(_format) || isFunction(_format);
                    var valueIsValid = isNumeric(value) || isDate(value);
                    if (!formatIsValid || !valueIsValid) {
                        return isDefined(value) ? value.toString() : ""
                    }
                    if (isFunction(_format)) {
                        return _format(value)
                    }
                    if (isString(_format)) {
                        _format = {
                            type: _format
                        };
                    }
                    if (isNumeric(value)) {
                        return numberLocalization.format(value, _format)
                    }
                    if (isDate(value)) {
                        return dateLocalization.format(value, _format)
                    }
                },
                getTimeFormat: function(showSecond) {
                    return showSecond ? "longtime" : "shorttime"
                },
                _normalizeFormat: function(format) {
                    if (!Array.isArray(format)) {
                        return format
                    }
                    if (1 === format.length) {
                        return format[0]
                    }
                    return function(date) {
                        return format.map((function(formatPart) {
                            return dateLocalization.format(date, formatPart)
                        })).join(" ")
                    }
                },
                getDateFormatByDifferences: function(dateDifferences, intervalFormat) {
                    var resultFormat = [];
                    var needSpecialSecondFormatter = intervalFormat && dateDifferences.millisecond && !(dateDifferences.year || dateDifferences.month || dateDifferences.day);
                    if (needSpecialSecondFormatter) {
                        resultFormat.push((function(date) {
                            return date.getSeconds() + date.getMilliseconds() / 1e3 + "s"
                        }));
                    } else if (dateDifferences.millisecond) {
                        resultFormat.push("millisecond");
                    }
                    if (dateDifferences.hour || dateDifferences.minute || !needSpecialSecondFormatter && dateDifferences.second) {
                        resultFormat.unshift(this.getTimeFormat(dateDifferences.second));
                    }
                    if (dateDifferences.year && dateDifferences.month && dateDifferences.day) {
                        if (intervalFormat && "month" === intervalFormat) {
                            return "monthandyear"
                        } else {
                            resultFormat.unshift("shortdate");
                            return this._normalizeFormat(resultFormat)
                        }
                    }
                    if (dateDifferences.year && dateDifferences.month) {
                        return "monthandyear"
                    }
                    if (dateDifferences.year && dateDifferences.quarter) {
                        return "quarterandyear"
                    }
                    if (dateDifferences.year) {
                        return "year"
                    }
                    if (dateDifferences.quarter) {
                        return "quarter"
                    }
                    if (dateDifferences.month && dateDifferences.day) {
                        if (intervalFormat) {
                            resultFormat.unshift((function(date) {
                                return dateLocalization.getMonthNames("abbreviated")[date.getMonth()] + " " + dateLocalization.format(date, "day")
                            }));
                        } else {
                            resultFormat.unshift("monthandday");
                        }
                        return this._normalizeFormat(resultFormat)
                    }
                    if (dateDifferences.month) {
                        return "month"
                    }
                    if (dateDifferences.day) {
                        if (intervalFormat) {
                            resultFormat.unshift("day");
                        } else {
                            resultFormat.unshift((function(date) {
                                return dateLocalization.format(date, "dayofweek") + ", " + dateLocalization.format(date, "day")
                            }));
                        }
                        return this._normalizeFormat(resultFormat)
                    }
                    return this._normalizeFormat(resultFormat)
                },
                getDateFormatByTicks: function(ticks) {
                    var maxDiff;
                    var currentDiff;
                    var i;
                    if (ticks.length > 1) {
                        maxDiff = dateUtils.getDatesDifferences(ticks[0], ticks[1]);
                        for (i = 1; i < ticks.length - 1; i++) {
                            currentDiff = dateUtils.getDatesDifferences(ticks[i], ticks[i + 1]);
                            if (maxDiff.count < currentDiff.count) {
                                maxDiff = currentDiff;
                            }
                        }
                    } else {
                        maxDiff = {
                            year: true,
                            month: true,
                            day: true,
                            hour: ticks[0].getHours() > 0,
                            minute: ticks[0].getMinutes() > 0,
                            second: ticks[0].getSeconds() > 0,
                            millisecond: ticks[0].getMilliseconds() > 0
                        };
                    }
                    var resultFormat = this.getDateFormatByDifferences(maxDiff);
                    return resultFormat
                },
                getDateFormatByTickInterval: function(startValue, endValue, tickInterval) {
                    var dateUnitInterval;
                    var correctDateDifferences = function(dateDifferences, tickInterval, value) {
                        switch (tickInterval) {
                            case "year":
                            case "quarter":
                                dateDifferences.month = value;
                            case "month":
                                dateDifferences.day = value;
                            case "week":
                            case "day":
                                dateDifferences.hour = value;
                            case "hour":
                                dateDifferences.minute = value;
                            case "minute":
                                dateDifferences.second = value;
                            case "second":
                                dateDifferences.millisecond = value;
                        }
                    };
                    tickInterval = isString(tickInterval) ? tickInterval.toLowerCase() : tickInterval;
                    var dateDifferences = dateUtils.getDatesDifferences(startValue, endValue);
                    if (startValue !== endValue) {
                        ! function(differences, minDate, maxDate) {
                            if (!maxDate.getMilliseconds() && maxDate.getSeconds()) {
                                if (maxDate.getSeconds() - minDate.getSeconds() === 1) {
                                    differences.millisecond = true;
                                    differences.second = false;
                                }
                            } else if (!maxDate.getSeconds() && maxDate.getMinutes()) {
                                if (maxDate.getMinutes() - minDate.getMinutes() === 1) {
                                    differences.second = true;
                                    differences.minute = false;
                                }
                            } else if (!maxDate.getMinutes() && maxDate.getHours()) {
                                if (maxDate.getHours() - minDate.getHours() === 1) {
                                    differences.minute = true;
                                    differences.hour = false;
                                }
                            } else if (!maxDate.getHours() && maxDate.getDate() > 1) {
                                if (maxDate.getDate() - minDate.getDate() === 1) {
                                    differences.hour = true;
                                    differences.day = false;
                                }
                            } else if (1 === maxDate.getDate() && maxDate.getMonth()) {
                                if (maxDate.getMonth() - minDate.getMonth() === 1) {
                                    differences.day = true;
                                    differences.month = false;
                                }
                            } else if (!maxDate.getMonth() && maxDate.getFullYear()) {
                                if (maxDate.getFullYear() - minDate.getFullYear() === 1) {
                                    differences.month = true;
                                    differences.year = false;
                                }
                            }
                        }(dateDifferences, startValue > endValue ? endValue : startValue, startValue > endValue ? startValue : endValue);
                    }
                    dateUnitInterval = dateUtils.getDateUnitInterval(dateDifferences);
                    correctDateDifferences(dateDifferences, dateUnitInterval, true);
                    dateUnitInterval = dateUtils.getDateUnitInterval(tickInterval || "second");
                    correctDateDifferences(dateDifferences, dateUnitInterval, false);
                    dateDifferences[{
                        week: "day"
                    } [dateUnitInterval] || dateUnitInterval] = true;
                    var resultFormat = this.getDateFormatByDifferences(dateDifferences);
                    return resultFormat
                }
            }));

            /**
             * DevExtreme (esm/__internal/grids/grid_core/views/utils/update_views_borders.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var __rest = window && window.__rest || function(s, e) {
                var t = {};
                for (var p in s) {
                    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) {
                        t[p] = s[p];
                    }
                }
                if (null != s && "function" === typeof Object.getOwnPropertySymbols) {
                    var i = 0;
                    for (p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) {
                            t[p[i]] = s[p[i]];
                        }
                    }
                }
                return t
            };
            var CLASSES = {
                borderedTop: "dx-bordered-top-view",
                borderedBottom: "dx-bordered-bottom-view"
            };
            var getFirstVisibleViewElement = _ref => {
                var {
                    columnHeadersView: columnHeadersView,
                    rowsView: rowsView
                } = _ref;
                if (null === columnHeadersView || void 0 === columnHeadersView ? void 0 : columnHeadersView.isVisible()) {
                    return columnHeadersView.element()
                }
                return rowsView.element()
            };
            var getLastVisibleViewElement = _ref2 => {
                var {
                    filterPanelView: filterPanelView,
                    footerView: footerView,
                    rowsView: rowsView
                } = _ref2;
                if (null === filterPanelView || void 0 === filterPanelView ? void 0 : filterPanelView.isVisible()) {
                    return filterPanelView.element()
                }
                if (null === footerView || void 0 === footerView ? void 0 : footerView.isVisible()) {
                    return footerView.element()
                }
                return rowsView.element()
            };
            var getViewElementWithClass = (viewsWithBorder, className) => {
                var _a;
                var borderedView = Object.values(viewsWithBorder).find(view => {
                    var _a;
                    return null === (_a = null === view || void 0 === view ? void 0 : view.element()) || void 0 === _a ? void 0 : _a.hasClass(className)
                });
                return null !== (_a = null === borderedView || void 0 === borderedView ? void 0 : borderedView.element()) && void 0 !== _a ? _a : null
            };
            var shouldUpdateBorders = (viewName, viewsWithBorder) => {
                var _a;
                if (!Object.keys(viewsWithBorder).includes(viewName)) {
                    return false
                }
                var {
                    rowsView: rowsView
                } = viewsWithBorder, otherViews = __rest(viewsWithBorder, ["rowsView"]);
                if (!isDefined(null === (_a = null === rowsView || void 0 === rowsView ? void 0 : rowsView.element) || void 0 === _a ? void 0 : _a.call(rowsView))) {
                    return false
                }
                return Object.values(otherViews).filter(view => {
                    var _a;
                    return null === (_a = null === view || void 0 === view ? void 0 : view.isVisible) || void 0 === _a ? void 0 : _a.call(view)
                }).every(view => isDefined(null === view || void 0 === view ? void 0 : view.element()))
            };
            var updateViewsBorders = (viewName, viewsWithBorder) => {
                if (!shouldUpdateBorders(viewName, viewsWithBorder)) {
                    return
                }
                var $oldFirst = getViewElementWithClass(viewsWithBorder, CLASSES.borderedTop);
                var $oldLast = getViewElementWithClass(viewsWithBorder, CLASSES.borderedBottom);
                var $newFirst = getFirstVisibleViewElement(viewsWithBorder);
                var $newLast = getLastVisibleViewElement(viewsWithBorder);
                if ($oldFirst && !$oldFirst.is($newFirst)) {
                    $oldFirst.removeClass(CLASSES.borderedTop);
                }
                if ($oldLast && !$oldLast.is($newLast)) {
                    $oldLast.removeClass(CLASSES.borderedBottom);
                }
                if (!$newFirst.hasClass(CLASSES.borderedTop)) {
                    $newFirst.addClass(CLASSES.borderedTop);
                }
                if (!$newLast.hasClass(CLASSES.borderedBottom)) {
                    $newLast.addClass(CLASSES.borderedBottom);
                }
            };

            /**
             * DevExtreme (esm/__internal/grids/grid_core/m_modules.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var WIDGET_WITH_LEGACY_CONTAINER_NAME = "dxDataGrid";
            class ModuleItem {
                constructor(component) {
                    var that = this;
                    that._updateLockCount = 0;
                    that.component = component;
                    that._actions = {};
                    that._actionConfigs = {};
                    each(this.callbackNames() || [], (function(index, name) {
                        var flags = that.callbackFlags(name) || {};
                        flags.unique = true;
                        flags.syncStrategy = true;
                        that[this] = Callbacks(flags);
                    }));
                }
                _endUpdateCore() {}
                init() {}
                callbackNames() {
                    return
                }
                callbackFlags(name) {}
                publicMethods() {
                    return []
                }
                beginUpdate() {
                    this._updateLockCount++;
                }
                endUpdate() {
                    if (this._updateLockCount > 0) {
                        this._updateLockCount--;
                        if (!this._updateLockCount) {
                            this._endUpdateCore();
                        }
                    }
                }
                option(name) {
                    var {
                        component: component
                    } = this;
                    var optionCache = component._optionCache;
                    if (1 === arguments.length && optionCache) {
                        if (!(name in optionCache)) {
                            optionCache[name] = component.option(name);
                        }
                        return optionCache[name]
                    }
                    return component.option.apply(component, arguments)
                }
                _silentOption(name, value) {
                    var {
                        component: component
                    } = this;
                    var optionCache = component._optionCache;
                    if (optionCache) {
                        optionCache[name] = value;
                    }
                    return component._setOptionWithoutOptionChange(name, value)
                }
                localize(name) {
                    var optionCache = this.component._optionCache;
                    if (optionCache) {
                        if (!(name in optionCache)) {
                            optionCache[name] = messageLocalization.format(name);
                        }
                        return optionCache[name]
                    }
                    return messageLocalization.format(name)
                }
                on(event, callback) {
                    return this.component.on.apply(this.component, arguments)
                }
                off() {
                    return this.component.off.apply(this.component, arguments)
                }
                optionChanged(args) {
                    if (args.name in this._actions) {
                        this.createAction(args.name, this._actionConfigs[args.name]);
                        args.handled = true;
                    }
                }
                getAction(actionName) {
                    return this._actions[actionName]
                }
                setAria(name, value, $target) {
                    var target = $target.get(0);
                    var prefix = "role" !== name && "id" !== name ? "aria-" : "";
                    if (target.setAttribute) {
                        target.setAttribute(prefix + name, value);
                    } else {
                        $target.attr(prefix + name, value);
                    }
                }
                _createComponent($container, component, options) {
                    return this.component._createComponent($container, component, options)
                }
                getController(name) {
                    return this.component._controllers[name]
                }
                createAction(actionName, config) {
                    if (isFunction(actionName)) {
                        var action = this.component._createAction(actionName.bind(this), config);
                        return function(e) {
                            action({
                                event: e
                            });
                        }
                    }
                    this._actions[actionName] = this.component._createActionByOption(actionName, config);
                    this._actionConfigs[actionName] = config;
                    return
                }
                executeAction(actionName, options) {
                    var action = this._actions[actionName];
                    return action && action(options)
                }
                dispose() {
                    var that = this;
                    each(that.callbackNames() || [], (function() {
                        that[this].empty();
                    }));
                }
                addWidgetPrefix(className) {
                    var componentName = this.component.NAME;
                    return "dx-".concat(componentName.slice(2).toLowerCase()).concat(className ? "-".concat(className) : "")
                }
                getWidgetContainerClass() {
                    var containerName = this.component.NAME === WIDGET_WITH_LEGACY_CONTAINER_NAME ? null : "container";
                    return this.addWidgetPrefix(containerName)
                }
                elementIsInsideGrid($element) {
                    var $gridElement = $element.closest(".".concat(this.getWidgetContainerClass())).parent();
                    return $gridElement.is(this.component.$element())
                }
            }
            class Controller extends ModuleItem {}
            class ViewController extends Controller {
                getView(name) {
                    return this.component._views[name]
                }
                getViews() {
                    return this.component._views
                }
            }
            class View extends ModuleItem {
                constructor(component) {
                    super(component);
                    this.renderCompleted = Callbacks();
                    this.resizeCompleted = Callbacks();
                }
                _isReady() {
                    return this.component.isReady()
                }
                _endUpdateCore() {
                    super._endUpdateCore();
                    if (!this._isReady() && this._requireReady) {
                        this._requireRender = false;
                        this.component._requireResize = false;
                    }
                    if (this._requireRender) {
                        this._requireRender = false;
                        this.render(this._$parent);
                    }
                }
                _invalidate(requireResize, requireReady) {
                    this._requireRender = true;
                    this.component._requireResize = hasWindow() && (this.component._requireResize || requireResize);
                    this._requireReady = this._requireReady || requireReady;
                }
                _renderCore(options) {}
                _resizeCore() {}
                _parentElement() {
                    return this._$parent
                }
                element() {
                    return this._$element
                }
                getElementHeight() {
                    var $element = this.element();
                    if (!$element) {
                        return 0
                    }
                    var marginTop = parseFloat($element.css("marginTop")) || 0;
                    var marginBottom = parseFloat($element.css("marginBottom")) || 0;
                    var {
                        offsetHeight: offsetHeight
                    } = $element.get(0);
                    return offsetHeight + marginTop + marginBottom
                }
                isVisible() {
                    return true
                }
                getTemplate(name) {
                    return this.component._getTemplate(name)
                }
                getView(name) {
                    return this.component._views[name]
                }
                _getBorderedViews() {
                    return {
                        columnHeadersView: this.component._views.columnHeadersView,
                        rowsView: this.component._views.rowsView,
                        filterPanelView: this.component._views.filterPanelView,
                        footerView: this.component._views.footerView
                    }
                }
                render($parent, options) {
                    var $element = this._$element;
                    var isVisible = this.isVisible();
                    if (!$element && !$parent) {
                        return
                    }
                    this._requireReady = false;
                    if (!$element) {
                        $element = this._$element = $("<div>").appendTo($parent);
                        this._$parent = $parent;
                    }
                    $element.toggleClass("dx-hidden", !isVisible);
                    if (this.component._views) {
                        updateViewsBorders(this.name, this._getBorderedViews());
                    }
                    if (isVisible) {
                        this.component._optionCache = {};
                        var deferred = this._renderCore(options);
                        this.component._optionCache = void 0;
                        if (deferred) {
                            deferred.done(() => {
                                this.renderCompleted.fire(options);
                            });
                        } else {
                            this.renderCompleted.fire(options);
                        }
                    }
                }
                resize() {
                    this.isResizing = true;
                    this._resizeCore();
                    this.resizeCompleted.fire();
                    this.isResizing = false;
                }
                focus(preventScroll) {
                    this.element().get(0).focus({
                        preventScroll: preventScroll
                    });
                }
            }
            var MODULES_ORDER_MAX_INDEX = 1e6;

            function getExtendedTypes(types) {
                var moduleExtenders = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
                var extendTypes = {};
                Object.entries(moduleExtenders).forEach(_ref => {
                    var [name, extender] = _ref;
                    var currentType = types[name];
                    if (currentType) {
                        if (isFunction(extender)) {
                            extendTypes[name] = extender(currentType);
                        } else {
                            var classType = currentType;
                            extendTypes[name] = classType.inherit(extender);
                        }
                    }
                });
                return extendTypes
            }

            function registerPublicMethods(componentInstance, name, moduleItem) {
                var publicMethods = moduleItem.publicMethods();
                if (publicMethods) {
                    each(publicMethods, (_, methodName) => {
                        if (moduleItem[methodName]) {
                            if (!componentInstance[methodName]) {
                                componentInstance[methodName] = function() {
                                    return moduleItem[methodName](...arguments)
                                };
                            } else {
                                throw errors.Error("E1005", methodName)
                            }
                        } else {
                            throw errors.Error("E1006", name, methodName)
                        }
                    });
                }
            }
            function processModules(componentInstance, componentClass) {
                var {
                    modules: modules
                } = componentClass;
                var {
                    modulesOrder: modulesOrder
                } = componentClass;

                function createModuleItems(moduleTypes) {
                    var moduleItems = {};
                    each(moduleTypes, (name, moduleType) => {
                        var moduleItem = new moduleType(componentInstance);
                        moduleItem.name = name;
                        registerPublicMethods(componentInstance, name, moduleItem);
                        moduleItems[name] = moduleItem;
                    });
                    return moduleItems
                }
                if (modulesOrder) {
                    modules.sort((module1, module2) => {
                        var orderIndex1 = modulesOrder.indexOf(module1.name);
                        var orderIndex2 = modulesOrder.indexOf(module2.name);
                        if (orderIndex1 < 0) {
                            orderIndex1 = MODULES_ORDER_MAX_INDEX;
                        }
                        if (orderIndex2 < 0) {
                            orderIndex2 = MODULES_ORDER_MAX_INDEX;
                        }
                        return orderIndex1 - orderIndex2
                    });
                }
                var rootControllerTypes = {};
                var rootViewTypes = {};
                modules.forEach(_ref2 => {
                    var {
                        name: moduleName,
                        controllers: controllers = {},
                        views: views = {}
                    } = _ref2;
                    Object.entries(controllers).forEach(_ref3 => {
                        var [name, type] = _ref3;
                        if (rootControllerTypes[name]) {
                            throw errors.Error("E1001", moduleName, name)
                        } else if (!((null === type || void 0 === type ? void 0 : type.prototype) instanceof Controller)) {
                            throw errors.Error("E1002", moduleName, name)
                        }
                        rootControllerTypes[name] = type;
                    });
                    Object.entries(views).forEach(_ref4 => {
                        var [name, type] = _ref4;
                        if (rootViewTypes[name]) {
                            throw errors.Error("E1003", moduleName, name)
                        } else if (!((null === type || void 0 === type ? void 0 : type.prototype) instanceof View)) {
                            throw errors.Error("E1004", moduleName, name)
                        }
                        rootViewTypes[name] = type;
                    });
                });
                var moduleExtenders = modules.filter(_ref5 => {
                    var {
                        extenders: extenders
                    } = _ref5;
                    return !!extenders
                });
                var controllerTypes = moduleExtenders.reduce((types, _ref6) => {
                    var {
                        extenders: extenders
                    } = _ref6;
                    return _extends(_extends({}, types), getExtendedTypes(types, null === extenders || void 0 === extenders ? void 0 : extenders.controllers))
                }, rootControllerTypes);
                var viewTypes = moduleExtenders.reduce((types, _ref7) => {
                    var {
                        extenders: extenders
                    } = _ref7;
                    return _extends(_extends({}, types), getExtendedTypes(types, null === extenders || void 0 === extenders ? void 0 : extenders.views))
                }, rootViewTypes);
                componentInstance._controllers = createModuleItems(controllerTypes);
                componentInstance._views = createModuleItems(viewTypes);
            }
            var callModuleItemsMethod = function(that, methodName, args) {
                args = args || [];
                if (that._controllers) {
                    each(that._controllers, (function() {
                        this[methodName] && this[methodName].apply(this, args);
                    }));
                }
                if (that._views) {
                    each(that._views, (function() {
                        this[methodName] && this[methodName].apply(this, args);
                    }));
                }
            };
            var modules = exports("eo", {
                modules: [],
                View: View,
                ViewController: ViewController,
                Controller: Controller,
                registerModule(name, module) {
                    var {
                        modules: modules
                    } = this;
                    for (var i = 0; i < modules.length; i++) {
                        if (modules[i].name === name) {
                            return
                        }
                    }
                    module.name = name;
                    modules.push(module);
                },
                registerModulesOrder(moduleNames) {
                    this.modulesOrder = moduleNames;
                },
                unregisterModule(name) {
                    this.modules = grep(this.modules, module => module.name !== name);
                },
                processModules: processModules,
                callModuleItemsMethod: callModuleItemsMethod
            });

            /**
             * DevExtreme (esm/ui/shared/filtering.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DEFAULT_DATE_INTERVAL = ["year", "month", "day"];
            var DEFAULT_DATETIME_INTERVAL = ["year", "month", "day", "hour", "minute"];
            var isDateType$1 = function(dataType) {
                return "date" === dataType || "datetime" === dataType
            };
            var getGroupInterval = function(column) {
                var index;
                var result = [];
                var dateIntervals = ["year", "month", "day", "hour", "minute", "second"];
                var groupInterval = column.headerFilter && column.headerFilter.groupInterval;
                var interval = "quarter" === groupInterval ? "month" : groupInterval;
                if (isDateType$1(column.dataType) && null !== groupInterval) {
                    result = "datetime" === column.dataType ? DEFAULT_DATETIME_INTERVAL : DEFAULT_DATE_INTERVAL;
                    index = dateIntervals.indexOf(interval);
                    if (index >= 0) {
                        result = dateIntervals.slice(0, index);
                        result.push(groupInterval);
                        return result
                    }
                    return result
                } else if (isDefined(groupInterval)) {
                    return Array.isArray(groupInterval) ? groupInterval : [groupInterval]
                }
            };
            var filterUtils = exports("eA", (function() {
                var getFilterSelector = function(column, target) {
                    var selector = column.dataField || column.selector;
                    if ("search" === target) {
                        selector = column.displayField || column.calculateDisplayValue || selector;
                    }
                    return selector
                };
                var getFilterExpressionByRange = function(filterValue, target) {
                    var endFilterValue;
                    var startFilterExpression;
                    var endFilterExpression;
                    var selector = getFilterSelector(this, target);
                    if (Array.isArray(filterValue) && isDefined(filterValue[0]) && isDefined(filterValue[1])) {
                        startFilterExpression = [selector, ">=", filterValue[0]];
                        endFilterExpression = [selector, "<=", filterValue[1]];
                        if (isDateType$1(this.dataType) && (date = filterValue[1], date.getHours() + date.getMinutes() + date.getSeconds() + date.getMilliseconds() < 1)) {
                            endFilterValue = new Date(filterValue[1].getTime());
                            if ("date" === this.dataType) {
                                endFilterValue.setDate(filterValue[1].getDate() + 1);
                            }
                            endFilterExpression = [selector, "<", endFilterValue];
                        }
                        return [startFilterExpression, "and", endFilterExpression]
                    }
                    var date;
                };
                var getFilterExpressionForDate = function(filterValue, selectedFilterOperation, target) {
                    var dateStart;
                    var dateEnd;
                    var dateInterval;
                    var values = function(dateValue) {
                        if (isDate(dateValue)) {
                            return [dateValue.getFullYear(), dateValue.getMonth(), dateValue.getDate(), dateValue.getHours(), dateValue.getMinutes(), dateValue.getSeconds()]
                        }
                        return map(("" + dateValue).split("/"), (function(value, index) {
                            return 1 === index ? Number(value) - 1 : Number(value)
                        }))
                    }(filterValue);
                    var selector = getFilterSelector(this, target);
                    if ("headerFilter" === target) {
                        dateInterval = getGroupInterval(this)[values.length - 1];
                    } else if ("datetime" === this.dataType) {
                        dateInterval = "minute";
                    }
                    switch (dateInterval) {
                        case "year":
                            dateStart = new Date(values[0], 0, 1);
                            dateEnd = new Date(values[0] + 1, 0, 1);
                            break;
                        case "month":
                            dateStart = new Date(values[0], values[1], 1);
                            dateEnd = new Date(values[0], values[1] + 1, 1);
                            break;
                        case "quarter":
                            dateStart = new Date(values[0], 3 * values[1], 1);
                            dateEnd = new Date(values[0], 3 * values[1] + 3, 1);
                            break;
                        case "hour":
                            dateStart = new Date(values[0], values[1], values[2], values[3]);
                            dateEnd = new Date(values[0], values[1], values[2], values[3] + 1);
                            break;
                        case "minute":
                            dateStart = new Date(values[0], values[1], values[2], values[3], values[4]);
                            dateEnd = new Date(values[0], values[1], values[2], values[3], values[4] + 1);
                            break;
                        case "second":
                            dateStart = new Date(values[0], values[1], values[2], values[3], values[4], values[5]);
                            dateEnd = new Date(values[0], values[1], values[2], values[3], values[4], values[5] + 1);
                            break;
                        default:
                            dateStart = new Date(values[0], values[1], values[2]);
                            dateEnd = new Date(values[0], values[1], values[2] + 1);
                    }
                    switch (selectedFilterOperation) {
                        case "<":
                            return [selector, "<", dateStart];
                        case "<=":
                            return [selector, "<", dateEnd];
                        case ">":
                            return [selector, ">=", dateEnd];
                        case ">=":
                            return [selector, ">=", dateStart];
                        case "<>":
                            return [
                                [selector, "<", dateStart], "or", [selector, ">=", dateEnd]
                            ];
                        default:
                            return [
                                [selector, ">=", dateStart], "and", [selector, "<", dateEnd]
                            ]
                    }
                };
                var getFilterExpressionForNumber = function(filterValue, selectedFilterOperation, target) {
                    var selector = getFilterSelector(this, target);
                    var groupInterval = getGroupInterval(this);
                    if ("headerFilter" === target && groupInterval && isDefined(filterValue)) {
                        var values = ("" + filterValue).split("/");
                        var value = Number(values[values.length - 1]);
                        var interval = groupInterval[values.length - 1];
                        var startFilterValue = [selector, ">=", value];
                        var endFilterValue = [selector, "<", value + interval];
                        var condition = [startFilterValue, "and", endFilterValue];
                        return condition
                    }
                    return [selector, selectedFilterOperation || "=", filterValue]
                };
                return {
                    defaultCalculateFilterExpression: function(filterValue, selectedFilterOperation, target) {
                        var column = this;
                        var selector = getFilterSelector(column, target);
                        var isSearchByDisplayValue = column.calculateDisplayValue && "search" === target;
                        var dataType = isSearchByDisplayValue && column.lookup && column.lookup.dataType || column.dataType;
                        var filter = null;
                        if (("headerFilter" === target || "filterBuilder" === target) && null === filterValue) {
                            filter = [selector, selectedFilterOperation || "=", null];
                            if ("string" === dataType) {
                                filter = [filter, "=" === selectedFilterOperation ? "or" : "and", [selector, selectedFilterOperation || "=", ""]];
                            }
                        } else if ("string" === dataType && (!column.lookup || isSearchByDisplayValue)) {
                            filter = [selector, selectedFilterOperation || "contains", filterValue];
                        } else if ("between" === selectedFilterOperation) {
                            return getFilterExpressionByRange.apply(column, [filterValue, target])
                        } else if (isDateType$1(dataType) && isDefined(filterValue)) {
                            return getFilterExpressionForDate.apply(column, arguments)
                        } else if ("number" === dataType) {
                            return getFilterExpressionForNumber.apply(column, arguments)
                        } else {
                            filter = [selector, selectedFilterOperation || "=", filterValue];
                        }
                        return filter
                    },
                    getGroupInterval: getGroupInterval
                }
            }()));

            /**
             * DevExtreme (esm/__internal/grids/grid_core/m_utils.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DATAGRID_SELECTION_DISABLED_CLASS = "dx-selection-disabled";
            var DATAGRID_GROUP_OPENED_CLASS = "dx-datagrid-group-opened";
            var DATAGRID_GROUP_CLOSED_CLASS = "dx-datagrid-group-closed";
            var DATAGRID_EXPAND_CLASS = "dx-datagrid-expand";
            var NO_DATA_CLASS = "nodata";
            var SCROLLING_MODE_INFINITE = "infinite";
            var SCROLLING_MODE_VIRTUAL = "virtual";
            var LEGACY_SCROLLING_MODE = "scrolling.legacyMode";
            var SCROLLING_MODE_OPTION = "scrolling.mode";
            var ROW_RENDERING_MODE_OPTION = "scrolling.rowRenderingMode";
            var DATE_INTERVAL_SELECTORS = {
                year: value => value && value.getFullYear(),
                month: value => value && value.getMonth() + 1,
                day: value => value && value.getDate(),
                quarter: value => value && Math.floor(value.getMonth() / 3) + 1,
                hour: value => value && value.getHours(),
                minute: value => value && value.getMinutes(),
                second: value => value && value.getSeconds()
            };
            var getIntervalSelector = function() {
                var data = arguments[1];
                var value = this.calculateCellValue(data);
                if (!isDefined(value)) {
                    return null
                }
                if (isDateType(this.dataType)) {
                    var nameIntervalSelector = arguments[0];
                    return DATE_INTERVAL_SELECTORS[nameIntervalSelector](value)
                }
                if ("number" === this.dataType) {
                    var groupInterval = arguments[0];
                    return Math.floor(Number(value) / groupInterval) * groupInterval
                }
            };
            var equalSelectors = function(selector1, selector2) {
                if (isFunction(selector1) && isFunction(selector2)) {
                    if (selector1.originalCallback && selector2.originalCallback) {
                        return selector1.originalCallback === selector2.originalCallback && selector1.columnIndex === selector2.columnIndex
                    }
                }
                return selector1 === selector2
            };

            function isDateType(dataType) {
                return "date" === dataType || "datetime" === dataType
            }
            var setEmptyText = function($container) {
                $container.get(0).textContent = "\xa0";
            };
            var normalizeSortingInfo = function(sort) {
                sort = sort || [];
                var result = normalizeSortingInfo$1(sort);
                for (var i = 0; i < sort.length; i++) {
                    if (sort && sort[i] && void 0 !== sort[i].isExpanded) {
                        result[i].isExpanded = sort[i].isExpanded;
                    }
                    if (sort && sort[i] && void 0 !== sort[i].groupInterval) {
                        result[i].groupInterval = sort[i].groupInterval;
                    }
                }
                return result
            };
            var formatValue = function(value, options) {
                var valueText = formatHelper.format(value, options.format) || value && value.toString() || "";
                var formatObject = {
                    value: value,
                    valueText: options.getDisplayFormat ? options.getDisplayFormat(valueText) : valueText,
                    target: options.target || "row",
                    groupInterval: options.groupInterval
                };
                return options.customizeText ? options.customizeText.call(options, formatObject) : formatObject.valueText
            };
            var getSummaryText = function(summaryItem, summaryTexts) {
                var displayFormat = summaryItem.displayFormat || summaryItem.columnCaption && summaryTexts["".concat(summaryItem.summaryType, "OtherColumn")] || summaryTexts[summaryItem.summaryType];
                return formatValue(summaryItem.value, {
                    format: summaryItem.valueFormat,
                    getDisplayFormat: valueText => displayFormat ? format(displayFormat, valueText, summaryItem.columnCaption) : valueText,
                    customizeText: summaryItem.customizeText
                })
            };
            var getWidgetInstance = function($element) {
                var editorData = $element.data && $element.data();
                var dxComponents = editorData && editorData.dxComponents;
                var widgetName = dxComponents && dxComponents[0];
                return widgetName && editorData[widgetName]
            };
            var equalFilterParameters = function equalFilterParameters(filter1, filter2) {
                if (Array.isArray(filter1) && Array.isArray(filter2)) {
                    if (filter1.length !== filter2.length) {
                        return false
                    }
                    for (var i = 0; i < filter1.length; i++) {
                        if (!equalFilterParameters(filter1[i], filter2[i])) {
                            return false
                        }
                    }
                    return true
                }
                if (isFunction(filter1) && filter1.columnIndex >= 0 && isFunction(filter2) && filter2.columnIndex >= 0) {
                    return filter1.columnIndex === filter2.columnIndex && toComparable(filter1.filterValue) === toComparable(filter2.filterValue) && toComparable(filter1.selectedFilterOperation) === toComparable(filter2.selectedFilterOperation)
                }
                return toComparable(filter1) == toComparable(filter2)
            };

            function normalizeGroupingLoadOptions(group) {
                if (!Array.isArray(group)) {
                    group = [group];
                }
                return group.map((item, i) => {
                    if (isString(item)) {
                        return {
                            selector: item,
                            isExpanded: i < group.length - 1
                        }
                    }
                    return item
                })
            }
            var gridCoreUtils = exports("ey", {
                renderNoDataText($element) {
                    $element = $element || this.element();
                    if (!$element) {
                        return
                    }
                    var noDataClass = this.addWidgetPrefix(NO_DATA_CLASS);
                    var noDataElement = $element.find(".".concat(noDataClass)).last();
                    var isVisible = this._dataController.isEmpty();
                    var isLoading = this._dataController.isLoading();
                    if (!noDataElement.length) {
                        noDataElement = $("<span>").addClass(noDataClass);
                    }
                    if (!noDataElement.parent().is($element)) {
                        noDataElement.appendTo($element);
                    }
                    if (isVisible && !isLoading) {
                        noDataElement.removeClass("dx-hidden").text(this._getNoDataText());
                    } else {
                        noDataElement.addClass("dx-hidden");
                    }
                },
                renderLoadPanel($element, $container, isLocalStore) {
                    var loadPanelOptions;
                    this._loadPanel && this._loadPanel.$element().remove();
                    loadPanelOptions = this.option("loadPanel");
                    if (loadPanelOptions && ("auto" === loadPanelOptions.enabled ? !isLocalStore : loadPanelOptions.enabled)) {
                        loadPanelOptions = extend({
                            shading: false,
                            message: loadPanelOptions.text,
                            container: $container
                        }, loadPanelOptions);
                        this._loadPanel = this._createComponent($("<div>").appendTo($container), LoadPanel$1, loadPanelOptions);
                    } else {
                        this._loadPanel = null;
                    }
                },
                calculateLoadPanelPosition($element) {
                    var $window = $(getWindow());
                    if (getHeight($element) > getHeight($window)) {
                        return {
                            of: $window,
                            boundary: $element,
                            collision: "fit"
                        }
                    }
                    return {
                        of: $element
                    }
                },
                getIndexByKey(key, items, keyName) {
                    var index = -1;
                    if (void 0 !== key && Array.isArray(items)) {
                        keyName = arguments.length <= 2 ? "key" : keyName;
                        for (var i = 0; i < items.length; i++) {
                            var item = isDefined(keyName) ? items[i][keyName] : items[i];
                            if (equalByValue(key, item)) {
                                index = i;
                                break
                            }
                        }
                    }
                    return index
                },
                combineFilters(filters, operation) {
                    var _a;
                    var resultFilter = [];
                    operation = operation || "and";
                    for (var i = 0; i < filters.length; i++) {
                        if (!filters[i]) {
                            continue
                        }
                        if (1 === (null === (_a = filters[i]) || void 0 === _a ? void 0 : _a.length) && "!" === filters[i][0]) {
                            if ("and" === operation) {
                                return ["!"]
                            }
                            if ("or" === operation) {
                                continue
                            }
                        }
                        if (resultFilter.length) {
                            resultFilter.push(operation);
                        }
                        resultFilter.push(filters[i]);
                    }
                    if (1 === resultFilter.length) {
                        resultFilter = resultFilter[0];
                    }
                    if (resultFilter.length) {
                        return resultFilter
                    }
                    return
                },
                checkChanges(changes, changeNames) {
                    var changesWithChangeNamesCount = 0;
                    for (var i = 0; i < changeNames.length; i++) {
                        if (changes[changeNames[i]]) {
                            changesWithChangeNamesCount++;
                        }
                    }
                    return changes.length && changes.length === changesWithChangeNamesCount
                },
                equalFilterParameters: equalFilterParameters,
                proxyMethod(instance, methodName, defaultResult) {
                    if (!instance[methodName]) {
                        instance[methodName] = function() {
                            var dataSource = this._dataSource;
                            return dataSource ? dataSource[methodName].apply(dataSource, arguments) : defaultResult
                        };
                    }
                },
                formatValue: formatValue,
                getFormatOptionsByColumn: (column, target) => ({
                    format: column.format,
                    getDisplayFormat: column.getDisplayFormat,
                    customizeText: column.customizeText,
                    target: target,
                    trueText: column.trueText,
                    falseText: column.falseText
                }),
                getDisplayValue(column, value, data, rowType) {
                    if (column.displayValueMap && void 0 !== column.displayValueMap[value]) {
                        return column.displayValueMap[value]
                    }
                    if (column.calculateDisplayValue && data && "group" !== rowType) {
                        return column.calculateDisplayValue(data)
                    }
                    if (column.lookup && !("group" === rowType && (column.calculateGroupValue || column.calculateDisplayValue))) {
                        return column.lookup.calculateCellValue(value)
                    }
                    return value
                },
                getGroupRowSummaryText(summaryItems, summaryTexts) {
                    var result = "(";
                    for (var i = 0; i < summaryItems.length; i++) {
                        var summaryItem = summaryItems[i];
                        result += (i > 0 ? ", " : "") + getSummaryText(summaryItem, summaryTexts);
                    }
                    return result + ")"
                },
                getSummaryText: getSummaryText,
                normalizeSortingInfo: normalizeSortingInfo,
                getFormatByDataType(dataType) {
                    switch (dataType) {
                        case "date":
                            return "shortDate";
                        case "datetime":
                            return "shortDateShortTime";
                        default:
                            return
                    }
                },
                getHeaderFilterGroupParameters(column, remoteGrouping) {
                    var result = [];
                    var dataField = column.dataField || column.name;
                    var groupInterval = filterUtils.getGroupInterval(column);
                    if (groupInterval) {
                        each(groupInterval, (index, interval) => {
                            result.push(remoteGrouping ? {
                                selector: dataField,
                                groupInterval: interval,
                                isExpanded: index < groupInterval.length - 1
                            } : getIntervalSelector.bind(column, interval));
                        });
                        return result
                    }
                    if (remoteGrouping) {
                        result = [{
                            selector: dataField,
                            isExpanded: false
                        }];
                    } else {
                        result = function(data) {
                            var result = column.calculateCellValue(data);
                            if (void 0 === result || "" === result) {
                                result = null;
                            }
                            return result
                        };
                        if (column.sortingMethod) {
                            result = [{
                                selector: result,
                                compare: column.sortingMethod.bind(column)
                            }];
                        }
                    }
                    return result
                },
                equalSortParameters(sortParameters1, sortParameters2, ignoreIsExpanded) {
                    sortParameters1 = normalizeSortingInfo(sortParameters1);
                    sortParameters2 = normalizeSortingInfo(sortParameters2);
                    if (Array.isArray(sortParameters1) && Array.isArray(sortParameters2)) {
                        if (sortParameters1.length !== sortParameters2.length) {
                            return false
                        }
                        for (var i = 0; i < sortParameters1.length; i++) {
                            if (!equalSelectors(sortParameters1[i].selector, sortParameters2[i].selector) || sortParameters1[i].desc !== sortParameters2[i].desc || sortParameters1[i].groupInterval !== sortParameters2[i].groupInterval || !ignoreIsExpanded && Boolean(sortParameters1[i].isExpanded) !== Boolean(sortParameters2[i].isExpanded)) {
                                return false
                            }
                        }
                        return true
                    }
                    return (!sortParameters1 || !sortParameters1.length) === (!sortParameters2 || !sortParameters2.length)
                },
                getPointsByColumns(items, pointCreated, isVertical, startColumnIndex) {
                    var cellsLength = items.length;
                    var notCreatePoint = false;
                    var item;
                    var offset;
                    var columnIndex = startColumnIndex || 0;
                    var result = [];
                    var rtlEnabled;
                    for (var i = 0; i <= cellsLength; i++) {
                        if (i < cellsLength) {
                            item = items.eq(i);
                            offset = item.offset();
                            rtlEnabled = "rtl" === item.css("direction");
                        }
                        var point = {
                            index: columnIndex,
                            x: offset ? offset.left + (!isVertical && rtlEnabled ^ i === cellsLength ? getBoundingRect(item[0]).width : 0) : 0,
                            y: offset ? offset.top + (isVertical && i === cellsLength ? getBoundingRect(item[0]).height : 0) : 0,
                            columnIndex: columnIndex
                        };
                        if (!isVertical && i > 0) {
                            var prevItemOffset = items.eq(i - 1).offset();
                            if (prevItemOffset.top < point.y) {
                                point.y = prevItemOffset.top;
                            }
                        }
                        if (pointCreated) {
                            notCreatePoint = pointCreated(point);
                        }
                        if (!notCreatePoint) {
                            result.push(point);
                        }
                        columnIndex++;
                    }
                    return result
                },
                getExpandCellTemplate: () => ({
                    allowRenderToDetachedContainer: true,
                    render(container, options) {
                        var $container = $(container);
                        if (isDefined(options.value) && !(options.data && options.data.isContinuation) && !options.row.isNewRow) {
                            var rowsView = options.component.getView("rowsView");
                            $container.addClass(DATAGRID_EXPAND_CLASS).addClass(DATAGRID_SELECTION_DISABLED_CLASS);
                            $("<div>").addClass(options.value ? DATAGRID_GROUP_OPENED_CLASS : DATAGRID_GROUP_CLOSED_CLASS).appendTo($container);
                            rowsView.setAria("label", options.value ? rowsView.localize("dxDataGrid-ariaCollapse") : rowsView.localize("dxDataGrid-ariaExpand"), $container);
                        } else {
                            setEmptyText($container);
                        }
                    }
                }),
                setEmptyText: setEmptyText,
                isDateType: isDateType,
                getSelectionRange(focusedElement) {
                    try {
                        if (focusedElement) {
                            return {
                                selectionStart: focusedElement.selectionStart,
                                selectionEnd: focusedElement.selectionEnd
                            }
                        }
                    } catch (e) {}
                    return {}
                },
                setSelectionRange(focusedElement, selectionRange) {
                    try {
                        if (focusedElement && focusedElement.setSelectionRange) {
                            focusedElement.setSelectionRange(selectionRange.selectionStart, selectionRange.selectionEnd);
                        }
                    } catch (e) {}
                },
                focusAndSelectElement(component, $element) {
                    var isFocused = $element.is(":focus");
                    eventsEngine.trigger($element, "focus");
                    var isSelectTextOnEditingStart = component.option("editing.selectTextOnEditStart");
                    var element = $element.get(0);
                    if (!isFocused && isSelectTextOnEditingStart && $element.is(".dx-texteditor-input") && !$element.is("[readonly]")) {
                        var editor = getWidgetInstance($element.closest(".dx-texteditor"));
                        when(editor && editor._loadItemDeferred).done(() => {
                            element.select();
                        });
                    }
                },
                getWidgetInstance: getWidgetInstance,
                getLastResizableColumnIndex(columns, resultWidths) {
                    var hasResizableColumns = columns.some(column => column && !column.command && !column.fixed && false !== column.allowResizing);
                    var lastColumnIndex;
                    for (lastColumnIndex = columns.length - 1; columns[lastColumnIndex]; lastColumnIndex--) {
                        var column = columns[lastColumnIndex];
                        var width = resultWidths && resultWidths[lastColumnIndex];
                        var allowResizing = !hasResizableColumns || false !== column.allowResizing;
                        if (!column.command && !column.fixed && "adaptiveHidden" !== width && allowResizing) {
                            break
                        }
                    }
                    return lastColumnIndex
                },
                isElementInCurrentGrid(controller, $element) {
                    if ($element && $element.length) {
                        var $grid = $element.closest(".".concat(controller.getWidgetContainerClass())).parent();
                        return $grid.is(controller.component.$element())
                    }
                    return false
                },
                isVirtualRowRendering(that) {
                    var rowRenderingMode = that.option(ROW_RENDERING_MODE_OPTION);
                    var isVirtualMode = that.option(SCROLLING_MODE_OPTION) === SCROLLING_MODE_VIRTUAL;
                    var isAppendMode = that.option(SCROLLING_MODE_OPTION) === SCROLLING_MODE_INFINITE;
                    if (false === that.option(LEGACY_SCROLLING_MODE) && (isVirtualMode || isAppendMode)) {
                        return true
                    }
                    return rowRenderingMode === SCROLLING_MODE_VIRTUAL
                },
                getPixelRatio: window => window.devicePixelRatio || 1,
                getContentHeightLimit(browser) {
                    if (browser.mozilla) {
                        return 8e6
                    }
                    return 15e6 / this.getPixelRatio(getWindow())
                },
                normalizeLookupDataSource(lookup) {
                    var lookupDataSourceOptions;
                    if (lookup.items) {
                        lookupDataSourceOptions = lookup.items;
                    } else {
                        lookupDataSourceOptions = lookup.dataSource;
                        if (isFunction(lookupDataSourceOptions) && !variableWrapper.isWrapped(lookupDataSourceOptions)) {
                            lookupDataSourceOptions = lookupDataSourceOptions({});
                        }
                    }
                    return normalizeDataSourceOptions(lookupDataSourceOptions)
                },
                getWrappedLookupDataSource(column, dataSource, filter) {
                    if (!dataSource) {
                        return []
                    }
                    var lookupDataSourceOptions = this.normalizeLookupDataSource(column.lookup);
                    if (column.calculateCellValue !== column.defaultCalculateCellValue) {
                        return lookupDataSourceOptions
                    }
                    var hasGroupPaging = dataSource.remoteOperations().groupPaging;
                    var hasLookupOptimization = column.displayField && isString(column.displayField);
                    var cachedUniqueRelevantItems;
                    var previousTake;
                    var previousSkip;
                    var sliceItems = (items, loadOptions) => {
                        var _a;
                        var start = null !== (_a = loadOptions.skip) && void 0 !== _a ? _a : 0;
                        var end = loadOptions.take ? start + loadOptions.take : items.length;
                        return items.slice(start, end)
                    };
                    var lookupDataSource = _extends(_extends({}, lookupDataSourceOptions), {
                        __dataGridSourceFilter: filter,
                        load: loadOptions => {
                            var d = new Deferred;
                            (loadOptions => {
                                var group = normalizeGroupingLoadOptions(hasLookupOptimization ? [column.dataField, column.displayField] : column.dataField);
                                var d = new Deferred;
                                var canUseCache = cachedUniqueRelevantItems && (!hasGroupPaging || loadOptions.skip === previousSkip && loadOptions.take === previousTake);
                                if (canUseCache) {
                                    d.resolve(sliceItems(cachedUniqueRelevantItems, loadOptions));
                                } else {
                                    previousSkip = loadOptions.skip;
                                    previousTake = loadOptions.take;
                                    dataSource.load({
                                        filter: filter,
                                        group: group,
                                        take: hasGroupPaging ? loadOptions.take : void 0,
                                        skip: hasGroupPaging ? loadOptions.skip : void 0
                                    }).done(items => {
                                        cachedUniqueRelevantItems = items;
                                        d.resolve(hasGroupPaging ? items : sliceItems(items, loadOptions));
                                    }).fail(d.fail);
                                }
                                return d
                            })(loadOptions).done(items => {
                                if (0 === items.length) {
                                    d.resolve([]);
                                    return
                                }
                                var filter = this.combineFilters(items.flatMap(data => data.key).map(key => [column.lookup.valueExpr, key]), "or");
                                var newDataSource = new DataSource(_extends(_extends(_extends({}, lookupDataSourceOptions), loadOptions), {
                                    filter: this.combineFilters([filter, loadOptions.filter], "and"),
                                    paginate: false
                                }));
                                newDataSource.load().done(d.resolve).fail(d.fail);
                            }).fail(d.fail);
                            return d
                        },
                        key: column.lookup.valueExpr,
                        byKey(key) {
                            var d = Deferred();
                            this.load({
                                filter: [column.lookup.valueExpr, "=", key]
                            }).done(arr => {
                                d.resolve(arr[0]);
                            });
                            return d.promise()
                        }
                    });
                    return lookupDataSource
                },
                logHeaderFilterDeprecatedWarningIfNeed(component) {
                    var logWarning = component._logDeprecatedOptionWarning.bind(component);
                    if (isDefined(component.option("headerFilter.allowSearch"))) {
                        logWarning("headerFilter.allowSearch", {
                            since: "23.1",
                            alias: "headerFilter.search.enabled"
                        });
                    }
                    if (isDefined(component.option("headerFilter.searchTimeout"))) {
                        logWarning("headerFilter.searchTimeout", {
                            since: "23.1",
                            alias: "headerFilter.search.timeout"
                        });
                    }
                    var specificName = "dxPivotGrid" === component.NAME ? "dataSource.fields" : "columns";
                    var columns = component.option(specificName);
                    if (!Array.isArray(columns)) {
                        return
                    }
                    var logSpecificDeprecatedWarningIfNeed = columns => {
                        columns.forEach(column => {
                            var _a;
                            var headerFilter = column.headerFilter || {};
                            if (isDefined(headerFilter.allowSearch)) {
                                logWarning("".concat(specificName, "[].headerFilter.allowSearch"), {
                                    since: "23.1",
                                    alias: "".concat(specificName, "[].headerFilter.search.enabled")
                                });
                            }
                            if (isDefined(headerFilter.searchMode)) {
                                logWarning("".concat(specificName, "[].headerFilter.searchMode"), {
                                    since: "23.1",
                                    alias: "".concat(specificName, "[].headerFilter.search.mode")
                                });
                            }
                            if (null === (_a = column.columns) || void 0 === _a ? void 0 : _a.length) {
                                logSpecificDeprecatedWarningIfNeed(column.columns);
                            }
                        });
                    };
                    logSpecificDeprecatedWarningIfNeed(columns);
                }
            });

            /**
             * DevExtreme (esm/__internal/grids/data_grid/m_core.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var gridCore = _extends(_extends(_extends({}, modules), gridCoreUtils), {
                modules: []
            });

            /**
             * DevExtreme (esm/__internal/grids/data_grid/m_widget_base.js)
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
             */
            var DATAGRID_ROW_SELECTOR = ".dx-row";
            var DATAGRID_DEPRECATED_TEMPLATE_WARNING = "Specifying grid templates with the jQuery selector name is now deprecated. Use the DOM Node or the jQuery object that references this selector instead.";
            gridCore.registerModulesOrder(["stateStoring", "columns", "selection", "editorFactory", "columnChooser", "grouping", "editing", "editingRowBased", "editingFormBased", "editingCellBased", "masterDetail", "validating", "adaptivity", "data", "virtualScrolling", "columnHeaders", "filterRow", "headerPanel", "headerFilter", "sorting", "search", "rows", "pager", "columnsResizingReordering", "contextMenu", "keyboardNavigation", "errorHandling", "summary", "columnFixing", "export", "gridView"]);
            class DataGrid extends Widget {
                constructor() {
                    super(...arguments);
                    this._activeStateUnit = DATAGRID_ROW_SELECTOR;
                }
                _getDefaultOptions() {
                    var result = super._getDefaultOptions();
                    each(gridCore.modules, (function() {
                        if (isFunction(this.defaultOptions)) {
                            extend(true, result, this.defaultOptions());
                        }
                    }));
                    return result
                }
                _setDeprecatedOptions() {
                    super._setDeprecatedOptions();
                    extend(this._deprecatedOptions, {
                        useKeyboard: {
                            since: "19.2",
                            alias: "keyboardNavigation.enabled"
                        },
                        rowTemplate: {
                            since: "21.2",
                            message: 'Use the "dataRowTemplate" option instead'
                        },
                        "columnChooser.allowSearch": {
                            since: "23.1",
                            message: 'Use the "columnChooser.search.enabled" option instead'
                        },
                        "columnChooser.searchTimeout": {
                            since: "23.1",
                            message: 'Use the "columnChooser.search.timeout" option instead'
                        }
                    });
                }
                _defaultOptionsRules() {
                    return super._defaultOptionsRules().concat([{
                        device: {
                            platform: "ios"
                        },
                        options: {
                            showRowLines: true
                        }
                    }, {
                        device: () => isMaterialBased(),
                        options: {
                            showRowLines: true,
                            showColumnLines: false,
                            headerFilter: {
                                height: 315
                            },
                            editing: {
                                useIcons: true
                            },
                            selection: {
                                showCheckBoxesMode: "always"
                            }
                        }
                    }, {
                        device: () => browser.webkit,
                        options: {
                            loadingTimeout: 30,
                            loadPanel: {
                                animation: {
                                    show: {
                                        easing: "cubic-bezier(1, 0, 1, 0)",
                                        duration: 500,
                                        from: {
                                            opacity: 0
                                        },
                                        to: {
                                            opacity: 1
                                        }
                                    }
                                }
                            }
                        }
                    }, {
                        device: device => "desktop" !== device.deviceType,
                        options: {
                            grouping: {
                                expandMode: "rowClick"
                            }
                        }
                    }])
                }
                _init() {
                    super._init();
                    gridCoreUtils.logHeaderFilterDeprecatedWarningIfNeed(this);
                    gridCore.processModules(this, gridCore);
                    gridCore.callModuleItemsMethod(this, "init");
                }
                _clean() {}
                _optionChanged(args) {
                    gridCore.callModuleItemsMethod(this, "optionChanged", [args]);
                    if (!args.handled) {
                        super._optionChanged(args);
                    }
                }
                _dimensionChanged() {
                    this.updateDimensions(true);
                }
                _visibilityChanged(visible) {
                    if (visible) {
                        this.updateDimensions();
                    }
                }
                _initMarkup() {
                    super._initMarkup.apply(this, arguments);
                    this.getView("gridView").render(this.$element());
                }
                _renderContentImpl() {
                    this.getView("gridView").update();
                }
                _renderContent() {
                    var that = this;
                    deferRender(() => {
                        that._renderContentImpl();
                    });
                }
                _getTemplate(templateName) {
                    var template = templateName;
                    if (isString(template) && template.startsWith("#")) {
                        template = $(templateName);
                        logger.warn(DATAGRID_DEPRECATED_TEMPLATE_WARNING);
                    }
                    return super._getTemplate(template)
                }
                _dispose() {
                    super._dispose();
                    gridCore.callModuleItemsMethod(this, "dispose");
                }
                isReady() {
                    return this.getController("data").isReady()
                }
                beginUpdate() {
                    super.beginUpdate();
                    gridCore.callModuleItemsMethod(this, "beginUpdate");
                }
                endUpdate() {
                    gridCore.callModuleItemsMethod(this, "endUpdate");
                    super.endUpdate();
                }
                getController(name) {
                    return this._controllers[name]
                }
                getView(name) {
                    return this._views[name]
                }
                focus(element) {
                    this.getController("keyboardNavigation").focus(element);
                }
                static registerModule(name, module) {
                    gridCore.registerModule(name, module);
                }
            } exports("f1", DataGrid);
            registerComponent("dxDataGrid", DataGrid);

            /*!
             * devextreme-angular
             * Version: 24.1.1
             * Build date: Mon Apr 15 2024
             *
             * Copyright (c) 2012 - 2024 Developer Express Inc. ALL RIGHTS RESERVED
             *
             * This software may be modified and distributed under the terms
             * of the MIT license. See the LICENSE file in the root of the project for details.
             *
             * https://github.com/DevExpress/devextreme-angular
             */
            /* tslint:disable:max-line-length */
            /**
             * The DataGrid is a UI component that represents data from a local or remote source in the form of a grid. This UI component offers such basic features as sorting, grouping, filtering, as well as more advanced capabilities, like state storing, client-side exporting, master-detail interface, and many others.

             */
            class DxDataGridComponent extends DxComponent {
                _watcherHelper;
                _idh;
                instance = null;
                /**
                 * Specifies the shortcut key that sets focus on the UI component.
                
                 */
                get accessKey() {
                    return this._getOption('accessKey');
                }
                set accessKey(value) {
                    this._setOption('accessKey', value);
                }
                /**
                 * Specifies whether the UI component changes its visual state as a result of user interaction.
                
                 */
                get activeStateEnabled() {
                    return this._getOption('activeStateEnabled');
                }
                set activeStateEnabled(value) {
                    this._setOption('activeStateEnabled', value);
                }
                /**
                 * Specifies whether a user can reorder columns.
                
                 */
                get allowColumnReordering() {
                    return this._getOption('allowColumnReordering');
                }
                set allowColumnReordering(value) {
                    this._setOption('allowColumnReordering', value);
                }
                /**
                 * Specifies whether a user can resize columns.
                
                 */
                get allowColumnResizing() {
                    return this._getOption('allowColumnResizing');
                }
                set allowColumnResizing(value) {
                    this._setOption('allowColumnResizing', value);
                }
                /**
                 * Automatically scrolls the component to the focused row when the focusedRowKey is changed.
                
                 */
                get autoNavigateToFocusedRow() {
                    return this._getOption('autoNavigateToFocusedRow');
                }
                set autoNavigateToFocusedRow(value) {
                    this._setOption('autoNavigateToFocusedRow', value);
                }
                /**
                 * Specifies whether data should be cached.
                
                 */
                get cacheEnabled() {
                    return this._getOption('cacheEnabled');
                }
                set cacheEnabled(value) {
                    this._setOption('cacheEnabled', value);
                }
                /**
                 * Enables a hint that appears when a user hovers the mouse pointer over a cell with truncated content.
                
                 */
                get cellHintEnabled() {
                    return this._getOption('cellHintEnabled');
                }
                set cellHintEnabled(value) {
                    this._setOption('cellHintEnabled', value);
                }
                /**
                 * Specifies whether columns should adjust their widths to the content.
                
                 */
                get columnAutoWidth() {
                    return this._getOption('columnAutoWidth');
                }
                set columnAutoWidth(value) {
                    this._setOption('columnAutoWidth', value);
                }
                /**
                 * Configures the column chooser.
                
                 */
                get columnChooser() {
                    return this._getOption('columnChooser');
                }
                set columnChooser(value) {
                    this._setOption('columnChooser', value);
                }
                /**
                 * Configures column fixing.
                
                 */
                get columnFixing() {
                    return this._getOption('columnFixing');
                }
                set columnFixing(value) {
                    this._setOption('columnFixing', value);
                }
                /**
                 * Specifies whether the UI component should hide columns to adapt to the screen or container size. Ignored if allowColumnResizing is true and columnResizingMode is &apos;widget&apos;.
                
                 */
                get columnHidingEnabled() {
                    return this._getOption('columnHidingEnabled');
                }
                set columnHidingEnabled(value) {
                    this._setOption('columnHidingEnabled', value);
                }
                /**
                 * Specifies the minimum width of columns.
                
                 */
                get columnMinWidth() {
                    return this._getOption('columnMinWidth');
                }
                set columnMinWidth(value) {
                    this._setOption('columnMinWidth', value);
                }
                /**
                 * Specifies how the UI component resizes columns. Applies only if allowColumnResizing is true.
                
                 */
                get columnResizingMode() {
                    return this._getOption('columnResizingMode');
                }
                set columnResizingMode(value) {
                    this._setOption('columnResizingMode', value);
                }
                /**
                 * An array of grid columns.
                
                 */
                get columns() {
                    return this._getOption('columns');
                }
                set columns(value) {
                    this._setOption('columns', value);
                }
                /**
                 * Specifies the width for all data columns. Has a lower priority than the column.width property.
                
                 */
                get columnWidth() {
                    return this._getOption('columnWidth');
                }
                set columnWidth(value) {
                    this._setOption('columnWidth', value);
                }
                /**
                 * Customizes columns after they are created.
                
                 */
                get customizeColumns() {
                    return this._getOption('customizeColumns');
                }
                set customizeColumns(value) {
                    this._setOption('customizeColumns', value);
                }
                /**
                 * Specifies a custom template for data rows.
                
                 */
                get dataRowTemplate() {
                    return this._getOption('dataRowTemplate');
                }
                set dataRowTemplate(value) {
                    this._setOption('dataRowTemplate', value);
                }
                /**
                 * Binds the UI component to data.
                
                 */
                get dataSource() {
                    return this._getOption('dataSource');
                }
                set dataSource(value) {
                    this._setOption('dataSource', value);
                }
                /**
                 * Specifies the format in which date-time values should be sent to the server.
                
                 */
                get dateSerializationFormat() {
                    return this._getOption('dateSerializationFormat');
                }
                set dateSerializationFormat(value) {
                    this._setOption('dateSerializationFormat', value);
                }
                /**
                 * Specifies whether the UI component responds to user interaction.
                
                 */
                get disabled() {
                    return this._getOption('disabled');
                }
                set disabled(value) {
                    this._setOption('disabled', value);
                }
                /**
                 * Configures editing.
                
                 */
                get editing() {
                    return this._getOption('editing');
                }
                set editing(value) {
                    this._setOption('editing', value);
                }
                /**
                 * Specifies the global attributes to be attached to the UI component&apos;s container element.
                
                 */
                get elementAttr() {
                    return this._getOption('elementAttr');
                }
                set elementAttr(value) {
                    this._setOption('elementAttr', value);
                }
                /**
                 * Indicates whether to show the error row.
                
                 */
                get errorRowEnabled() {
                    return this._getOption('errorRowEnabled');
                }
                set errorRowEnabled(value) {
                    this._setOption('errorRowEnabled', value);
                }
                /**
                 * Configures client-side exporting.
                
                 */
                get export() {
                    return this._getOption('export');
                }
                set export(value) {
                    this._setOption('export', value);
                }
                /**
                 * Configures the integrated filter builder.
                
                 */
                get filterBuilder() {
                    return this._getOption('filterBuilder');
                }
                set filterBuilder(value) {
                    this._setOption('filterBuilder', value);
                }
                /**
                 * Configures the popup in which the integrated filter builder is shown.
                
                 */
                get filterBuilderPopup() {
                    return this._getOption('filterBuilderPopup');
                }
                set filterBuilderPopup(value) {
                    this._setOption('filterBuilderPopup', value);
                }
                /**
                 * Configures the filter panel.
                
                 */
                get filterPanel() {
                    return this._getOption('filterPanel');
                }
                set filterPanel(value) {
                    this._setOption('filterPanel', value);
                }
                /**
                 * Configures the filter row.
                
                 */
                get filterRow() {
                    return this._getOption('filterRow');
                }
                set filterRow(value) {
                    this._setOption('filterRow', value);
                }
                /**
                 * Specifies whether to synchronize the filter row, header filter, and filter builder. The synchronized filter expression is stored in the filterValue property.
                
                 */
                get filterSyncEnabled() {
                    return this._getOption('filterSyncEnabled');
                }
                set filterSyncEnabled(value) {
                    this._setOption('filterSyncEnabled', value);
                }
                /**
                 * Specifies a filter expression.
                
                 */
                get filterValue() {
                    return this._getOption('filterValue');
                }
                set filterValue(value) {
                    this._setOption('filterValue', value);
                }
                /**
                 * The index of the column that contains the focused data cell. This index is taken from the columns array.
                
                 */
                get focusedColumnIndex() {
                    return this._getOption('focusedColumnIndex');
                }
                set focusedColumnIndex(value) {
                    this._setOption('focusedColumnIndex', value);
                }
                /**
                 * Specifies whether the focused row feature is enabled.
                
                 */
                get focusedRowEnabled() {
                    return this._getOption('focusedRowEnabled');
                }
                set focusedRowEnabled(value) {
                    this._setOption('focusedRowEnabled', value);
                }
                /**
                 * Specifies or indicates the focused data row&apos;s index.
                
                 */
                get focusedRowIndex() {
                    return this._getOption('focusedRowIndex');
                }
                set focusedRowIndex(value) {
                    this._setOption('focusedRowIndex', value);
                }
                /**
                 * Specifies initially or currently focused grid row&apos;s key.
                
                 */
                get focusedRowKey() {
                    return this._getOption('focusedRowKey');
                }
                set focusedRowKey(value) {
                    this._setOption('focusedRowKey', value);
                }
                /**
                 * Configures grouping.
                
                 */
                get grouping() {
                    return this._getOption('grouping');
                }
                set grouping(value) {
                    this._setOption('grouping', value);
                }
                /**
                 * Configures the group panel.
                
                 */
                get groupPanel() {
                    return this._getOption('groupPanel');
                }
                set groupPanel(value) {
                    this._setOption('groupPanel', value);
                }
                /**
                 * Configures the header filter feature.
                
                 */
                get headerFilter() {
                    return this._getOption('headerFilter');
                }
                set headerFilter(value) {
                    this._setOption('headerFilter', value);
                }
                /**
                 * Specifies the UI component&apos;s height.
                
                 */
                get height() {
                    return this._getOption('height');
                }
                set height(value) {
                    this._setOption('height', value);
                }
                /**
                 * Specifies whether to highlight rows and cells with edited data. repaintChangesOnly should be true.
                
                 */
                get highlightChanges() {
                    return this._getOption('highlightChanges');
                }
                set highlightChanges(value) {
                    this._setOption('highlightChanges', value);
                }
                /**
                 * Specifies text for a hint that appears when a user pauses on the UI component.
                
                 */
                get hint() {
                    return this._getOption('hint');
                }
                set hint(value) {
                    this._setOption('hint', value);
                }
                /**
                 * Specifies whether the UI component changes its state when a user pauses on it.
                
                 */
                get hoverStateEnabled() {
                    return this._getOption('hoverStateEnabled');
                }
                set hoverStateEnabled(value) {
                    this._setOption('hoverStateEnabled', value);
                }
                /**
                 * Configures keyboard navigation.
                
                 */
                get keyboardNavigation() {
                    return this._getOption('keyboardNavigation');
                }
                set keyboardNavigation(value) {
                    this._setOption('keyboardNavigation', value);
                }
                /**
                 * Specifies the key property (or properties) that provide(s) key values to access data items. Each key value must be unique. This property applies only if data is a simple array.
                
                 */
                get keyExpr() {
                    return this._getOption('keyExpr');
                }
                set keyExpr(value) {
                    this._setOption('keyExpr', value);
                }
                /**
                 * Configures the load panel.
                
                 */
                get loadPanel() {
                    return this._getOption('loadPanel');
                }
                set loadPanel(value) {
                    this._setOption('loadPanel', value);
                }
                /**
                 * Allows you to build a master-detail interface in the grid.
                
                 */
                get masterDetail() {
                    return this._getOption('masterDetail');
                }
                set masterDetail(value) {
                    this._setOption('masterDetail', value);
                }
                /**
                 * Specifies a text string shown when the widget does not display any data.
                
                 */
                get noDataText() {
                    return this._getOption('noDataText');
                }
                set noDataText(value) {
                    this._setOption('noDataText', value);
                }
                /**
                 * Configures the pager.
                
                 */
                get pager() {
                    return this._getOption('pager');
                }
                set pager(value) {
                    this._setOption('pager', value);
                }
                /**
                 * Configures paging.
                
                 */
                get paging() {
                    return this._getOption('paging');
                }
                set paging(value) {
                    this._setOption('paging', value);
                }
                /**
                 * Notifies the DataGrid of the server&apos;s data processing operations.
                
                 */
                get remoteOperations() {
                    return this._getOption('remoteOperations');
                }
                set remoteOperations(value) {
                    this._setOption('remoteOperations', value);
                }
                /**
                 * Specifies whether to render the filter row, command columns, and columns with showEditorAlways set to true after other elements.
                
                 */
                get renderAsync() {
                    return this._getOption('renderAsync');
                }
                set renderAsync(value) {
                    this._setOption('renderAsync', value);
                }
                /**
                 * Specifies whether to repaint only those cells whose data changed.
                
                 */
                get repaintChangesOnly() {
                    return this._getOption('repaintChangesOnly');
                }
                set repaintChangesOnly(value) {
                    this._setOption('repaintChangesOnly', value);
                }
                /**
                 * Specifies whether rows should be shaded differently.
                
                 */
                get rowAlternationEnabled() {
                    return this._getOption('rowAlternationEnabled');
                }
                set rowAlternationEnabled(value) {
                    this._setOption('rowAlternationEnabled', value);
                }
                /**
                 * Configures row reordering using drag and drop gestures.
                
                 */
                get rowDragging() {
                    return this._getOption('rowDragging');
                }
                set rowDragging(value) {
                    this._setOption('rowDragging', value);
                }
                /**
                 * Specifies a custom template for rows.
                
                 * @deprecated Use the dataRowTemplate option instead.
                
                 */
                get rowTemplate() {
                    return this._getOption('rowTemplate');
                }
                set rowTemplate(value) {
                    this._setOption('rowTemplate', value);
                }
                /**
                 * Switches the UI component to a right-to-left representation.
                
                 */
                get rtlEnabled() {
                    return this._getOption('rtlEnabled');
                }
                set rtlEnabled(value) {
                    this._setOption('rtlEnabled', value);
                }
                /**
                 * Configures scrolling.
                
                 */
                get scrolling() {
                    return this._getOption('scrolling');
                }
                set scrolling(value) {
                    this._setOption('scrolling', value);
                }
                /**
                 * Configures the search panel.
                
                 */
                get searchPanel() {
                    return this._getOption('searchPanel');
                }
                set searchPanel(value) {
                    this._setOption('searchPanel', value);
                }
                /**
                 * Allows you to select rows or determine which rows are selected.
                
                 */
                get selectedRowKeys() {
                    return this._getOption('selectedRowKeys');
                }
                set selectedRowKeys(value) {
                    this._setOption('selectedRowKeys', value);
                }
                /**
                 * Configures runtime selection.
                
                 */
                get selection() {
                    return this._getOption('selection');
                }
                set selection(value) {
                    this._setOption('selection', value);
                }
                /**
                 * Specifies filters for the rows that must be selected initially. Applies only if selection.deferred is true.
                
                 */
                get selectionFilter() {
                    return this._getOption('selectionFilter');
                }
                set selectionFilter(value) {
                    this._setOption('selectionFilter', value);
                }
                /**
                 * Specifies whether the outer borders of the UI component are visible.
                
                 */
                get showBorders() {
                    return this._getOption('showBorders');
                }
                set showBorders(value) {
                    this._setOption('showBorders', value);
                }
                /**
                 * Specifies whether column headers are visible.
                
                 */
                get showColumnHeaders() {
                    return this._getOption('showColumnHeaders');
                }
                set showColumnHeaders(value) {
                    this._setOption('showColumnHeaders', value);
                }
                /**
                 * Specifies whether vertical lines that separate one column from another are visible.
                
                 */
                get showColumnLines() {
                    return this._getOption('showColumnLines');
                }
                set showColumnLines(value) {
                    this._setOption('showColumnLines', value);
                }
                /**
                 * Specifies whether horizontal lines that separate one row from another are visible.
                
                 */
                get showRowLines() {
                    return this._getOption('showRowLines');
                }
                set showRowLines(value) {
                    this._setOption('showRowLines', value);
                }
                /**
                 * Allows you to sort groups according to the values of group summary items.
                
                 */
                get sortByGroupSummaryInfo() {
                    return this._getOption('sortByGroupSummaryInfo');
                }
                set sortByGroupSummaryInfo(value) {
                    this._setOption('sortByGroupSummaryInfo', value);
                }
                /**
                 * Configures runtime sorting.
                
                 */
                get sorting() {
                    return this._getOption('sorting');
                }
                set sorting(value) {
                    this._setOption('sorting', value);
                }
                /**
                 * Configures state storing.
                
                 */
                get stateStoring() {
                    return this._getOption('stateStoring');
                }
                set stateStoring(value) {
                    this._setOption('stateStoring', value);
                }
                /**
                 * Specifies the properties of the grid summary.
                
                 */
                get summary() {
                    return this._getOption('summary');
                }
                set summary(value) {
                    this._setOption('summary', value);
                }
                /**
                 * Specifies whether to show only relevant values in the header filter and filter row.
                
                 */
                get syncLookupFilterValues() {
                    return this._getOption('syncLookupFilterValues');
                }
                set syncLookupFilterValues(value) {
                    this._setOption('syncLookupFilterValues', value);
                }
                /**
                 * Specifies the number of the element when the Tab key is used for navigating.
                
                 */
                get tabIndex() {
                    return this._getOption('tabIndex');
                }
                set tabIndex(value) {
                    this._setOption('tabIndex', value);
                }
                /**
                 * Configures the toolbar.
                
                 */
                get toolbar() {
                    return this._getOption('toolbar');
                }
                set toolbar(value) {
                    this._setOption('toolbar', value);
                }
                /**
                 * Specifies whether to enable two-way data binding.
                
                 */
                get twoWayBindingEnabled() {
                    return this._getOption('twoWayBindingEnabled');
                }
                set twoWayBindingEnabled(value) {
                    this._setOption('twoWayBindingEnabled', value);
                }
                /**
                 * Specifies whether the UI component is visible.
                
                 */
                get visible() {
                    return this._getOption('visible');
                }
                set visible(value) {
                    this._setOption('visible', value);
                }
                /**
                 * Specifies the UI component&apos;s width.
                
                 */
                get width() {
                    return this._getOption('width');
                }
                set width(value) {
                    this._setOption('width', value);
                }
                /**
                 * Specifies whether text that does not fit into a column should be wrapped.
                
                 */
                get wordWrapEnabled() {
                    return this._getOption('wordWrapEnabled');
                }
                set wordWrapEnabled(value) {
                    this._setOption('wordWrapEnabled', value);
                }
                /**
                
                 * A function that is executed before an adaptive detail row is rendered.
                
                
                 */
                onAdaptiveDetailRowPreparing;
                /**
                
                 * A function that is executed when a cell is clicked or tapped. Executed before onRowClick.
                
                
                 */
                onCellClick;
                /**
                
                 * A function that is executed when a cell is double-clicked or double-tapped. Executed before onRowDblClick.
                
                
                 */
                onCellDblClick;
                /**
                
                 * A function that is executed after the pointer enters or leaves a cell.
                
                
                 */
                onCellHoverChanged;
                /**
                
                 * A function that is executed after a grid cell is created.
                
                
                 */
                onCellPrepared;
                /**
                
                 * A function that is executed when the UI component is rendered and each time the component is repainted.
                
                
                 */
                onContentReady;
                /**
                
                 * A function that is executed before the context menu is rendered.
                
                
                 */
                onContextMenuPreparing;
                /**
                
                 * A function that is executed when an error occurs in the data source.
                
                
                 */
                onDataErrorOccurred;
                /**
                
                 * A function that is executed before the UI component is disposed of.
                
                
                 */
                onDisposing;
                /**
                
                 * A function that is executed after row changes are discarded.
                
                
                 */
                onEditCanceled;
                /**
                
                 * A function that is executed when the edit operation is canceled, but row changes are not yet discarded.
                
                
                 */
                onEditCanceling;
                /**
                
                 * A function that is executed before a cell or row switches to the editing state.
                
                
                 */
                onEditingStart;
                /**
                
                 * A function that is executed after an editor is created. Not executed for cells with an editCellTemplate.
                
                
                 */
                onEditorPrepared;
                /**
                
                 * A function used to customize a cell&apos;s editor. Not executed for cells with an editCellTemplate.
                
                
                 */
                onEditorPreparing;
                /**
                
                 * A function that is executed before data is exported.
                
                
                 */
                onExporting;
                /**
                
                 * A function that is executed after the focused cell changes. Applies only to cells in data or group rows.
                
                
                 */
                onFocusedCellChanged;
                /**
                
                 * A function that is executed before the focused cell changes. Applies only to cells in data or group rows.
                
                
                 */
                onFocusedCellChanging;
                /**
                
                 * A function that is executed after the focused row changes. Applies only to data or group rows. focusedRowEnabled should be true.
                
                
                 */
                onFocusedRowChanged;
                /**
                
                 * A function that is executed before the focused row changes. Applies only to data or group rows. focusedRowEnabled should be true.
                
                
                 */
                onFocusedRowChanging;
                /**
                
                 * A function used in JavaScript frameworks to save the UI component instance.
                
                
                 */
                onInitialized;
                /**
                
                 * A function that is executed before a new row is added to the UI component.
                
                
                 */
                onInitNewRow;
                /**
                
                 * A function that is executed when the UI component is in focus and a key has been pressed down.
                
                
                 */
                onKeyDown;
                /**
                
                 * A function that is executed after a UI component property is changed.
                
                
                 */
                onOptionChanged;
                /**
                
                 * A function that is executed when a row is clicked or tapped.
                
                
                 */
                onRowClick;
                /**
                
                 * A function that is executed after a row is collapsed.
                
                
                 */
                onRowCollapsed;
                /**
                
                 * A function that is executed before a row is collapsed.
                
                
                 */
                onRowCollapsing;
                /**
                
                 * A function that is executed when a row is double-clicked or double-tapped. Executed after onCellDblClick.
                
                
                 */
                onRowDblClick;
                /**
                
                 * A function that is executed after a row is expanded.
                
                
                 */
                onRowExpanded;
                /**
                
                 * A function that is executed before a row is expanded.
                
                
                 */
                onRowExpanding;
                /**
                
                 * A function that is executed after a new row has been inserted into the data source.
                
                
                 */
                onRowInserted;
                /**
                
                 * A function that is executed before a new row is inserted into the data source.
                
                
                 */
                onRowInserting;
                /**
                
                 * A function that is executed after a row is created.
                
                
                 */
                onRowPrepared;
                /**
                
                 * A function that is executed after a row has been removed from the data source.
                
                
                 */
                onRowRemoved;
                /**
                
                 * A function that is executed before a row is removed from the data source.
                
                
                 */
                onRowRemoving;
                /**
                
                 * A function that is executed after a row has been updated in the data source.
                
                
                 */
                onRowUpdated;
                /**
                
                 * A function that is executed before a row is updated in the data source.
                
                
                 */
                onRowUpdating;
                /**
                
                 * A function that is executed after cells in a row are validated against validation rules.
                
                
                 */
                onRowValidating;
                /**
                
                 * A function that is executed after row changes are saved.
                
                
                 */
                onSaved;
                /**
                
                 * A function that is executed before pending row changes are saved.
                
                
                 */
                onSaving;
                /**
                
                 * A function that is executed after selecting a row or clearing its selection.
                
                
                 */
                onSelectionChanged;
                /**
                
                 * A function that is executed before the toolbar is created.
                
                
                 */
                onToolbarPreparing;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                accessKeyChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                activeStateEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                allowColumnReorderingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                allowColumnResizingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                autoNavigateToFocusedRowChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                cacheEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                cellHintEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnAutoWidthChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnChooserChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnFixingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnHidingEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnMinWidthChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnResizingModeChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnsChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                columnWidthChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                customizeColumnsChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                dataRowTemplateChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                dataSourceChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                dateSerializationFormatChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                disabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                editingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                elementAttrChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                errorRowEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                exportChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterBuilderChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterBuilderPopupChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterPanelChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterRowChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterSyncEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                filterValueChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                focusedColumnIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                focusedRowEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                focusedRowIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                focusedRowKeyChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                groupingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                groupPanelChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                headerFilterChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                heightChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                highlightChangesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                hintChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                hoverStateEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                keyboardNavigationChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                keyExprChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                loadPanelChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                masterDetailChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                noDataTextChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                pagerChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                pagingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                remoteOperationsChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                renderAsyncChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                repaintChangesOnlyChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                rowAlternationEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                rowDraggingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                rowTemplateChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                rtlEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                scrollingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                searchPanelChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectedRowKeysChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectionChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                selectionFilterChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showBordersChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showColumnHeadersChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showColumnLinesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                showRowLinesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                sortByGroupSummaryInfoChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                sortingChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                stateStoringChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                summaryChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                syncLookupFilterValuesChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                tabIndexChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                toolbarChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                twoWayBindingEnabledChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                visibleChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                widthChange;
                /**
                
                 * This member supports the internal infrastructure and is not intended to be used directly from your code.
                
                 */
                wordWrapEnabledChange;
                get columnsChildren() {
                    return this._getOption('columns');
                }
                set columnsChildren(value) {
                    this.setChildren('columns', value);
                }
                get sortByGroupSummaryInfoChildren() {
                    return this._getOption('sortByGroupSummaryInfo');
                }
                set sortByGroupSummaryInfoChildren(value) {
                    this.setChildren('sortByGroupSummaryInfo', value);
                }
                constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
                    super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
                    this._watcherHelper = _watcherHelper;
                    this._idh = _idh;
                    this._createEventEmitters([
                        { subscribe: 'adaptiveDetailRowPreparing', emit: 'onAdaptiveDetailRowPreparing' },
                        { subscribe: 'cellClick', emit: 'onCellClick' },
                        { subscribe: 'cellDblClick', emit: 'onCellDblClick' },
                        { subscribe: 'cellHoverChanged', emit: 'onCellHoverChanged' },
                        { subscribe: 'cellPrepared', emit: 'onCellPrepared' },
                        { subscribe: 'contentReady', emit: 'onContentReady' },
                        { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },
                        { subscribe: 'dataErrorOccurred', emit: 'onDataErrorOccurred' },
                        { subscribe: 'disposing', emit: 'onDisposing' },
                        { subscribe: 'editCanceled', emit: 'onEditCanceled' },
                        { subscribe: 'editCanceling', emit: 'onEditCanceling' },
                        { subscribe: 'editingStart', emit: 'onEditingStart' },
                        { subscribe: 'editorPrepared', emit: 'onEditorPrepared' },
                        { subscribe: 'editorPreparing', emit: 'onEditorPreparing' },
                        { subscribe: 'exporting', emit: 'onExporting' },
                        { subscribe: 'focusedCellChanged', emit: 'onFocusedCellChanged' },
                        { subscribe: 'focusedCellChanging', emit: 'onFocusedCellChanging' },
                        { subscribe: 'focusedRowChanged', emit: 'onFocusedRowChanged' },
                        { subscribe: 'focusedRowChanging', emit: 'onFocusedRowChanging' },
                        { subscribe: 'initialized', emit: 'onInitialized' },
                        { subscribe: 'initNewRow', emit: 'onInitNewRow' },
                        { subscribe: 'keyDown', emit: 'onKeyDown' },
                        { subscribe: 'optionChanged', emit: 'onOptionChanged' },
                        { subscribe: 'rowClick', emit: 'onRowClick' },
                        { subscribe: 'rowCollapsed', emit: 'onRowCollapsed' },
                        { subscribe: 'rowCollapsing', emit: 'onRowCollapsing' },
                        { subscribe: 'rowDblClick', emit: 'onRowDblClick' },
                        { subscribe: 'rowExpanded', emit: 'onRowExpanded' },
                        { subscribe: 'rowExpanding', emit: 'onRowExpanding' },
                        { subscribe: 'rowInserted', emit: 'onRowInserted' },
                        { subscribe: 'rowInserting', emit: 'onRowInserting' },
                        { subscribe: 'rowPrepared', emit: 'onRowPrepared' },
                        { subscribe: 'rowRemoved', emit: 'onRowRemoved' },
                        { subscribe: 'rowRemoving', emit: 'onRowRemoving' },
                        { subscribe: 'rowUpdated', emit: 'onRowUpdated' },
                        { subscribe: 'rowUpdating', emit: 'onRowUpdating' },
                        { subscribe: 'rowValidating', emit: 'onRowValidating' },
                        { subscribe: 'saved', emit: 'onSaved' },
                        { subscribe: 'saving', emit: 'onSaving' },
                        { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
                        { subscribe: 'toolbarPreparing', emit: 'onToolbarPreparing' },
                        { emit: 'accessKeyChange' },
                        { emit: 'activeStateEnabledChange' },
                        { emit: 'allowColumnReorderingChange' },
                        { emit: 'allowColumnResizingChange' },
                        { emit: 'autoNavigateToFocusedRowChange' },
                        { emit: 'cacheEnabledChange' },
                        { emit: 'cellHintEnabledChange' },
                        { emit: 'columnAutoWidthChange' },
                        { emit: 'columnChooserChange' },
                        { emit: 'columnFixingChange' },
                        { emit: 'columnHidingEnabledChange' },
                        { emit: 'columnMinWidthChange' },
                        { emit: 'columnResizingModeChange' },
                        { emit: 'columnsChange' },
                        { emit: 'columnWidthChange' },
                        { emit: 'customizeColumnsChange' },
                        { emit: 'dataRowTemplateChange' },
                        { emit: 'dataSourceChange' },
                        { emit: 'dateSerializationFormatChange' },
                        { emit: 'disabledChange' },
                        { emit: 'editingChange' },
                        { emit: 'elementAttrChange' },
                        { emit: 'errorRowEnabledChange' },
                        { emit: 'exportChange' },
                        { emit: 'filterBuilderChange' },
                        { emit: 'filterBuilderPopupChange' },
                        { emit: 'filterPanelChange' },
                        { emit: 'filterRowChange' },
                        { emit: 'filterSyncEnabledChange' },
                        { emit: 'filterValueChange' },
                        { emit: 'focusedColumnIndexChange' },
                        { emit: 'focusedRowEnabledChange' },
                        { emit: 'focusedRowIndexChange' },
                        { emit: 'focusedRowKeyChange' },
                        { emit: 'groupingChange' },
                        { emit: 'groupPanelChange' },
                        { emit: 'headerFilterChange' },
                        { emit: 'heightChange' },
                        { emit: 'highlightChangesChange' },
                        { emit: 'hintChange' },
                        { emit: 'hoverStateEnabledChange' },
                        { emit: 'keyboardNavigationChange' },
                        { emit: 'keyExprChange' },
                        { emit: 'loadPanelChange' },
                        { emit: 'masterDetailChange' },
                        { emit: 'noDataTextChange' },
                        { emit: 'pagerChange' },
                        { emit: 'pagingChange' },
                        { emit: 'remoteOperationsChange' },
                        { emit: 'renderAsyncChange' },
                        { emit: 'repaintChangesOnlyChange' },
                        { emit: 'rowAlternationEnabledChange' },
                        { emit: 'rowDraggingChange' },
                        { emit: 'rowTemplateChange' },
                        { emit: 'rtlEnabledChange' },
                        { emit: 'scrollingChange' },
                        { emit: 'searchPanelChange' },
                        { emit: 'selectedRowKeysChange' },
                        { emit: 'selectionChange' },
                        { emit: 'selectionFilterChange' },
                        { emit: 'showBordersChange' },
                        { emit: 'showColumnHeadersChange' },
                        { emit: 'showColumnLinesChange' },
                        { emit: 'showRowLinesChange' },
                        { emit: 'sortByGroupSummaryInfoChange' },
                        { emit: 'sortingChange' },
                        { emit: 'stateStoringChange' },
                        { emit: 'summaryChange' },
                        { emit: 'syncLookupFilterValuesChange' },
                        { emit: 'tabIndexChange' },
                        { emit: 'toolbarChange' },
                        { emit: 'twoWayBindingEnabledChange' },
                        { emit: 'visibleChange' },
                        { emit: 'widthChange' },
                        { emit: 'wordWrapEnabledChange' }
                    ]);
                    this._idh.setHost(this);
                    optionHost.setHost(this);
                }
                _createInstance(element, options) {
                    return new DataGrid(element, options);
                }
                ngOnDestroy() {
                    this._destroyWidget();
                }
                ngOnChanges(changes) {
                    super.ngOnChanges(changes);
                    this.setupChanges('columns', changes);
                    this.setupChanges('dataSource', changes);
                    this.setupChanges('keyExpr', changes);
                    this.setupChanges('selectedRowKeys', changes);
                    this.setupChanges('sortByGroupSummaryInfo', changes);
                }
                setupChanges(prop, changes) {
                    if (!(prop in this._optionsToUpdate)) {
                        this._idh.setup(prop, changes);
                    }
                }
                ngDoCheck() {
                    this._idh.doCheck('columns');
                    this._idh.doCheck('dataSource');
                    this._idh.doCheck('keyExpr');
                    this._idh.doCheck('selectedRowKeys');
                    this._idh.doCheck('sortByGroupSummaryInfo');
                    this._watcherHelper.checkWatchers();
                    super.ngDoCheck();
                    super.clearChangedOptions();
                }
                _setOption(name, value) {
                    let isSetup = this._idh.setupSingle(name, value);
                    let isChanged = this._idh.getChanges(name, value) !== null;
                    if (isSetup || isChanged) {
                        super._setOption(name, value);
                    }
                }
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: DxTemplateHost }, { token: WatcherHelper }, { token: IterableDifferHelper }, { token: NestedOptionHost }, { token: i2.TransferState }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
                /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.0", type: DxDataGridComponent, selector: "dx-data-grid", inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowColumnReordering: "allowColumnReordering", allowColumnResizing: "allowColumnResizing", autoNavigateToFocusedRow: "autoNavigateToFocusedRow", cacheEnabled: "cacheEnabled", cellHintEnabled: "cellHintEnabled", columnAutoWidth: "columnAutoWidth", columnChooser: "columnChooser", columnFixing: "columnFixing", columnHidingEnabled: "columnHidingEnabled", columnMinWidth: "columnMinWidth", columnResizingMode: "columnResizingMode", columns: "columns", columnWidth: "columnWidth", customizeColumns: "customizeColumns", dataRowTemplate: "dataRowTemplate", dataSource: "dataSource", dateSerializationFormat: "dateSerializationFormat", disabled: "disabled", editing: "editing", elementAttr: "elementAttr", errorRowEnabled: "errorRowEnabled", export: "export", filterBuilder: "filterBuilder", filterBuilderPopup: "filterBuilderPopup", filterPanel: "filterPanel", filterRow: "filterRow", filterSyncEnabled: "filterSyncEnabled", filterValue: "filterValue", focusedColumnIndex: "focusedColumnIndex", focusedRowEnabled: "focusedRowEnabled", focusedRowIndex: "focusedRowIndex", focusedRowKey: "focusedRowKey", grouping: "grouping", groupPanel: "groupPanel", headerFilter: "headerFilter", height: "height", highlightChanges: "highlightChanges", hint: "hint", hoverStateEnabled: "hoverStateEnabled", keyboardNavigation: "keyboardNavigation", keyExpr: "keyExpr", loadPanel: "loadPanel", masterDetail: "masterDetail", noDataText: "noDataText", pager: "pager", paging: "paging", remoteOperations: "remoteOperations", renderAsync: "renderAsync", repaintChangesOnly: "repaintChangesOnly", rowAlternationEnabled: "rowAlternationEnabled", rowDragging: "rowDragging", rowTemplate: "rowTemplate", rtlEnabled: "rtlEnabled", scrolling: "scrolling", searchPanel: "searchPanel", selectedRowKeys: "selectedRowKeys", selection: "selection", selectionFilter: "selectionFilter", showBorders: "showBorders", showColumnHeaders: "showColumnHeaders", showColumnLines: "showColumnLines", showRowLines: "showRowLines", sortByGroupSummaryInfo: "sortByGroupSummaryInfo", sorting: "sorting", stateStoring: "stateStoring", summary: "summary", syncLookupFilterValues: "syncLookupFilterValues", tabIndex: "tabIndex", toolbar: "toolbar", twoWayBindingEnabled: "twoWayBindingEnabled", visible: "visible", width: "width", wordWrapEnabled: "wordWrapEnabled" }, outputs: { onAdaptiveDetailRowPreparing: "onAdaptiveDetailRowPreparing", onCellClick: "onCellClick", onCellDblClick: "onCellDblClick", onCellHoverChanged: "onCellHoverChanged", onCellPrepared: "onCellPrepared", onContentReady: "onContentReady", onContextMenuPreparing: "onContextMenuPreparing", onDataErrorOccurred: "onDataErrorOccurred", onDisposing: "onDisposing", onEditCanceled: "onEditCanceled", onEditCanceling: "onEditCanceling", onEditingStart: "onEditingStart", onEditorPrepared: "onEditorPrepared", onEditorPreparing: "onEditorPreparing", onExporting: "onExporting", onFocusedCellChanged: "onFocusedCellChanged", onFocusedCellChanging: "onFocusedCellChanging", onFocusedRowChanged: "onFocusedRowChanged", onFocusedRowChanging: "onFocusedRowChanging", onInitialized: "onInitialized", onInitNewRow: "onInitNewRow", onKeyDown: "onKeyDown", onOptionChanged: "onOptionChanged", onRowClick: "onRowClick", onRowCollapsed: "onRowCollapsed", onRowCollapsing: "onRowCollapsing", onRowDblClick: "onRowDblClick", onRowExpanded: "onRowExpanded", onRowExpanding: "onRowExpanding", onRowInserted: "onRowInserted", onRowInserting: "onRowInserting", onRowPrepared: "onRowPrepared", onRowRemoved: "onRowRemoved", onRowRemoving: "onRowRemoving", onRowUpdated: "onRowUpdated", onRowUpdating: "onRowUpdating", onRowValidating: "onRowValidating", onSaved: "onSaved", onSaving: "onSaving", onSelectionChanged: "onSelectionChanged", onToolbarPreparing: "onToolbarPreparing", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowColumnReorderingChange: "allowColumnReorderingChange", allowColumnResizingChange: "allowColumnResizingChange", autoNavigateToFocusedRowChange: "autoNavigateToFocusedRowChange", cacheEnabledChange: "cacheEnabledChange", cellHintEnabledChange: "cellHintEnabledChange", columnAutoWidthChange: "columnAutoWidthChange", columnChooserChange: "columnChooserChange", columnFixingChange: "columnFixingChange", columnHidingEnabledChange: "columnHidingEnabledChange", columnMinWidthChange: "columnMinWidthChange", columnResizingModeChange: "columnResizingModeChange", columnsChange: "columnsChange", columnWidthChange: "columnWidthChange", customizeColumnsChange: "customizeColumnsChange", dataRowTemplateChange: "dataRowTemplateChange", dataSourceChange: "dataSourceChange", dateSerializationFormatChange: "dateSerializationFormatChange", disabledChange: "disabledChange", editingChange: "editingChange", elementAttrChange: "elementAttrChange", errorRowEnabledChange: "errorRowEnabledChange", exportChange: "exportChange", filterBuilderChange: "filterBuilderChange", filterBuilderPopupChange: "filterBuilderPopupChange", filterPanelChange: "filterPanelChange", filterRowChange: "filterRowChange", filterSyncEnabledChange: "filterSyncEnabledChange", filterValueChange: "filterValueChange", focusedColumnIndexChange: "focusedColumnIndexChange", focusedRowEnabledChange: "focusedRowEnabledChange", focusedRowIndexChange: "focusedRowIndexChange", focusedRowKeyChange: "focusedRowKeyChange", groupingChange: "groupingChange", groupPanelChange: "groupPanelChange", headerFilterChange: "headerFilterChange", heightChange: "heightChange", highlightChangesChange: "highlightChangesChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", keyboardNavigationChange: "keyboardNavigationChange", keyExprChange: "keyExprChange", loadPanelChange: "loadPanelChange", masterDetailChange: "masterDetailChange", noDataTextChange: "noDataTextChange", pagerChange: "pagerChange", pagingChange: "pagingChange", remoteOperationsChange: "remoteOperationsChange", renderAsyncChange: "renderAsyncChange", repaintChangesOnlyChange: "repaintChangesOnlyChange", rowAlternationEnabledChange: "rowAlternationEnabledChange", rowDraggingChange: "rowDraggingChange", rowTemplateChange: "rowTemplateChange", rtlEnabledChange: "rtlEnabledChange", scrollingChange: "scrollingChange", searchPanelChange: "searchPanelChange", selectedRowKeysChange: "selectedRowKeysChange", selectionChange: "selectionChange", selectionFilterChange: "selectionFilterChange", showBordersChange: "showBordersChange", showColumnHeadersChange: "showColumnHeadersChange", showColumnLinesChange: "showColumnLinesChange", showRowLinesChange: "showRowLinesChange", sortByGroupSummaryInfoChange: "sortByGroupSummaryInfoChange", sortingChange: "sortingChange", stateStoringChange: "stateStoringChange", summaryChange: "summaryChange", syncLookupFilterValuesChange: "syncLookupFilterValuesChange", tabIndexChange: "tabIndexChange", toolbarChange: "toolbarChange", twoWayBindingEnabledChange: "twoWayBindingEnabledChange", visibleChange: "visibleChange", widthChange: "widthChange", wordWrapEnabledChange: "wordWrapEnabledChange" }, providers: [
                        DxTemplateHost,
                        WatcherHelper,
                        NestedOptionHost,
                        IterableDifferHelper
                    ], queries: [{ propertyName: "columnsChildren", predicate: DxiColumnComponent }, { propertyName: "sortByGroupSummaryInfoChildren", predicate: DxiSortByGroupSummaryInfoComponent }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true });
            } exports("hk", DxDataGridComponent);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridComponent, decorators: [{
                        type: Component$1,
                        args: [{
                                selector: 'dx-data-grid',
                                template: '',
                                providers: [
                                    DxTemplateHost,
                                    WatcherHelper,
                                    NestedOptionHost,
                                    IterableDifferHelper
                                ]
                            }]
                    }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: DxTemplateHost }, { type: WatcherHelper }, { type: IterableDifferHelper }, { type: NestedOptionHost }, { type: i2.TransferState }, { type: undefined, decorators: [{
                                type: Inject,
                                args: [PLATFORM_ID]
                            }] }], propDecorators: { accessKey: [{
                            type: Input
                        }], activeStateEnabled: [{
                            type: Input
                        }], allowColumnReordering: [{
                            type: Input
                        }], allowColumnResizing: [{
                            type: Input
                        }], autoNavigateToFocusedRow: [{
                            type: Input
                        }], cacheEnabled: [{
                            type: Input
                        }], cellHintEnabled: [{
                            type: Input
                        }], columnAutoWidth: [{
                            type: Input
                        }], columnChooser: [{
                            type: Input
                        }], columnFixing: [{
                            type: Input
                        }], columnHidingEnabled: [{
                            type: Input
                        }], columnMinWidth: [{
                            type: Input
                        }], columnResizingMode: [{
                            type: Input
                        }], columns: [{
                            type: Input
                        }], columnWidth: [{
                            type: Input
                        }], customizeColumns: [{
                            type: Input
                        }], dataRowTemplate: [{
                            type: Input
                        }], dataSource: [{
                            type: Input
                        }], dateSerializationFormat: [{
                            type: Input
                        }], disabled: [{
                            type: Input
                        }], editing: [{
                            type: Input
                        }], elementAttr: [{
                            type: Input
                        }], errorRowEnabled: [{
                            type: Input
                        }], export: [{
                            type: Input
                        }], filterBuilder: [{
                            type: Input
                        }], filterBuilderPopup: [{
                            type: Input
                        }], filterPanel: [{
                            type: Input
                        }], filterRow: [{
                            type: Input
                        }], filterSyncEnabled: [{
                            type: Input
                        }], filterValue: [{
                            type: Input
                        }], focusedColumnIndex: [{
                            type: Input
                        }], focusedRowEnabled: [{
                            type: Input
                        }], focusedRowIndex: [{
                            type: Input
                        }], focusedRowKey: [{
                            type: Input
                        }], grouping: [{
                            type: Input
                        }], groupPanel: [{
                            type: Input
                        }], headerFilter: [{
                            type: Input
                        }], height: [{
                            type: Input
                        }], highlightChanges: [{
                            type: Input
                        }], hint: [{
                            type: Input
                        }], hoverStateEnabled: [{
                            type: Input
                        }], keyboardNavigation: [{
                            type: Input
                        }], keyExpr: [{
                            type: Input
                        }], loadPanel: [{
                            type: Input
                        }], masterDetail: [{
                            type: Input
                        }], noDataText: [{
                            type: Input
                        }], pager: [{
                            type: Input
                        }], paging: [{
                            type: Input
                        }], remoteOperations: [{
                            type: Input
                        }], renderAsync: [{
                            type: Input
                        }], repaintChangesOnly: [{
                            type: Input
                        }], rowAlternationEnabled: [{
                            type: Input
                        }], rowDragging: [{
                            type: Input
                        }], rowTemplate: [{
                            type: Input
                        }], rtlEnabled: [{
                            type: Input
                        }], scrolling: [{
                            type: Input
                        }], searchPanel: [{
                            type: Input
                        }], selectedRowKeys: [{
                            type: Input
                        }], selection: [{
                            type: Input
                        }], selectionFilter: [{
                            type: Input
                        }], showBorders: [{
                            type: Input
                        }], showColumnHeaders: [{
                            type: Input
                        }], showColumnLines: [{
                            type: Input
                        }], showRowLines: [{
                            type: Input
                        }], sortByGroupSummaryInfo: [{
                            type: Input
                        }], sorting: [{
                            type: Input
                        }], stateStoring: [{
                            type: Input
                        }], summary: [{
                            type: Input
                        }], syncLookupFilterValues: [{
                            type: Input
                        }], tabIndex: [{
                            type: Input
                        }], toolbar: [{
                            type: Input
                        }], twoWayBindingEnabled: [{
                            type: Input
                        }], visible: [{
                            type: Input
                        }], width: [{
                            type: Input
                        }], wordWrapEnabled: [{
                            type: Input
                        }], onAdaptiveDetailRowPreparing: [{
                            type: Output
                        }], onCellClick: [{
                            type: Output
                        }], onCellDblClick: [{
                            type: Output
                        }], onCellHoverChanged: [{
                            type: Output
                        }], onCellPrepared: [{
                            type: Output
                        }], onContentReady: [{
                            type: Output
                        }], onContextMenuPreparing: [{
                            type: Output
                        }], onDataErrorOccurred: [{
                            type: Output
                        }], onDisposing: [{
                            type: Output
                        }], onEditCanceled: [{
                            type: Output
                        }], onEditCanceling: [{
                            type: Output
                        }], onEditingStart: [{
                            type: Output
                        }], onEditorPrepared: [{
                            type: Output
                        }], onEditorPreparing: [{
                            type: Output
                        }], onExporting: [{
                            type: Output
                        }], onFocusedCellChanged: [{
                            type: Output
                        }], onFocusedCellChanging: [{
                            type: Output
                        }], onFocusedRowChanged: [{
                            type: Output
                        }], onFocusedRowChanging: [{
                            type: Output
                        }], onInitialized: [{
                            type: Output
                        }], onInitNewRow: [{
                            type: Output
                        }], onKeyDown: [{
                            type: Output
                        }], onOptionChanged: [{
                            type: Output
                        }], onRowClick: [{
                            type: Output
                        }], onRowCollapsed: [{
                            type: Output
                        }], onRowCollapsing: [{
                            type: Output
                        }], onRowDblClick: [{
                            type: Output
                        }], onRowExpanded: [{
                            type: Output
                        }], onRowExpanding: [{
                            type: Output
                        }], onRowInserted: [{
                            type: Output
                        }], onRowInserting: [{
                            type: Output
                        }], onRowPrepared: [{
                            type: Output
                        }], onRowRemoved: [{
                            type: Output
                        }], onRowRemoving: [{
                            type: Output
                        }], onRowUpdated: [{
                            type: Output
                        }], onRowUpdating: [{
                            type: Output
                        }], onRowValidating: [{
                            type: Output
                        }], onSaved: [{
                            type: Output
                        }], onSaving: [{
                            type: Output
                        }], onSelectionChanged: [{
                            type: Output
                        }], onToolbarPreparing: [{
                            type: Output
                        }], accessKeyChange: [{
                            type: Output
                        }], activeStateEnabledChange: [{
                            type: Output
                        }], allowColumnReorderingChange: [{
                            type: Output
                        }], allowColumnResizingChange: [{
                            type: Output
                        }], autoNavigateToFocusedRowChange: [{
                            type: Output
                        }], cacheEnabledChange: [{
                            type: Output
                        }], cellHintEnabledChange: [{
                            type: Output
                        }], columnAutoWidthChange: [{
                            type: Output
                        }], columnChooserChange: [{
                            type: Output
                        }], columnFixingChange: [{
                            type: Output
                        }], columnHidingEnabledChange: [{
                            type: Output
                        }], columnMinWidthChange: [{
                            type: Output
                        }], columnResizingModeChange: [{
                            type: Output
                        }], columnsChange: [{
                            type: Output
                        }], columnWidthChange: [{
                            type: Output
                        }], customizeColumnsChange: [{
                            type: Output
                        }], dataRowTemplateChange: [{
                            type: Output
                        }], dataSourceChange: [{
                            type: Output
                        }], dateSerializationFormatChange: [{
                            type: Output
                        }], disabledChange: [{
                            type: Output
                        }], editingChange: [{
                            type: Output
                        }], elementAttrChange: [{
                            type: Output
                        }], errorRowEnabledChange: [{
                            type: Output
                        }], exportChange: [{
                            type: Output
                        }], filterBuilderChange: [{
                            type: Output
                        }], filterBuilderPopupChange: [{
                            type: Output
                        }], filterPanelChange: [{
                            type: Output
                        }], filterRowChange: [{
                            type: Output
                        }], filterSyncEnabledChange: [{
                            type: Output
                        }], filterValueChange: [{
                            type: Output
                        }], focusedColumnIndexChange: [{
                            type: Output
                        }], focusedRowEnabledChange: [{
                            type: Output
                        }], focusedRowIndexChange: [{
                            type: Output
                        }], focusedRowKeyChange: [{
                            type: Output
                        }], groupingChange: [{
                            type: Output
                        }], groupPanelChange: [{
                            type: Output
                        }], headerFilterChange: [{
                            type: Output
                        }], heightChange: [{
                            type: Output
                        }], highlightChangesChange: [{
                            type: Output
                        }], hintChange: [{
                            type: Output
                        }], hoverStateEnabledChange: [{
                            type: Output
                        }], keyboardNavigationChange: [{
                            type: Output
                        }], keyExprChange: [{
                            type: Output
                        }], loadPanelChange: [{
                            type: Output
                        }], masterDetailChange: [{
                            type: Output
                        }], noDataTextChange: [{
                            type: Output
                        }], pagerChange: [{
                            type: Output
                        }], pagingChange: [{
                            type: Output
                        }], remoteOperationsChange: [{
                            type: Output
                        }], renderAsyncChange: [{
                            type: Output
                        }], repaintChangesOnlyChange: [{
                            type: Output
                        }], rowAlternationEnabledChange: [{
                            type: Output
                        }], rowDraggingChange: [{
                            type: Output
                        }], rowTemplateChange: [{
                            type: Output
                        }], rtlEnabledChange: [{
                            type: Output
                        }], scrollingChange: [{
                            type: Output
                        }], searchPanelChange: [{
                            type: Output
                        }], selectedRowKeysChange: [{
                            type: Output
                        }], selectionChange: [{
                            type: Output
                        }], selectionFilterChange: [{
                            type: Output
                        }], showBordersChange: [{
                            type: Output
                        }], showColumnHeadersChange: [{
                            type: Output
                        }], showColumnLinesChange: [{
                            type: Output
                        }], showRowLinesChange: [{
                            type: Output
                        }], sortByGroupSummaryInfoChange: [{
                            type: Output
                        }], sortingChange: [{
                            type: Output
                        }], stateStoringChange: [{
                            type: Output
                        }], summaryChange: [{
                            type: Output
                        }], syncLookupFilterValuesChange: [{
                            type: Output
                        }], tabIndexChange: [{
                            type: Output
                        }], toolbarChange: [{
                            type: Output
                        }], twoWayBindingEnabledChange: [{
                            type: Output
                        }], visibleChange: [{
                            type: Output
                        }], widthChange: [{
                            type: Output
                        }], wordWrapEnabledChange: [{
                            type: Output
                        }], columnsChildren: [{
                            type: ContentChildren,
                            args: [DxiColumnComponent]
                        }], sortByGroupSummaryInfoChildren: [{
                            type: ContentChildren,
                            args: [DxiSortByGroupSummaryInfoComponent]
                        }] } });
            class DxDataGridModule {
                /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
                /** @nocollapse */ static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridModule, declarations: [DxDataGridComponent], imports: [DxoColumnChooserModule,
                        DxoPositionModule,
                        DxoAtModule,
                        DxoBoundaryOffsetModule,
                        DxoCollisionModule,
                        DxoMyModule,
                        DxoOffsetModule,
                        DxoSearchModule,
                        DxoSelectionModule,
                        DxoColumnFixingModule,
                        DxoTextsModule,
                        DxiColumnModule,
                        DxiButtonModule,
                        DxoHeaderFilterModule,
                        DxoLookupModule,
                        DxoFormatModule,
                        DxoFormItemModule,
                        DxoLabelModule,
                        DxiValidationRuleModule,
                        DxoEditingModule,
                        DxiChangeModule,
                        DxoFormModule,
                        DxoColCountByScreenModule,
                        DxiItemModule,
                        DxoTabPanelOptionsModule,
                        DxiTabModule,
                        DxoButtonOptionsModule,
                        DxoPopupModule,
                        DxoAnimationModule,
                        DxoHideModule,
                        DxoFromModule,
                        DxoToModule,
                        DxoShowModule,
                        DxiToolbarItemModule,
                        DxoExportModule,
                        DxoFilterBuilderModule,
                        DxiCustomOperationModule,
                        DxiFieldModule,
                        DxoFilterOperationDescriptionsModule,
                        DxoGroupOperationDescriptionsModule,
                        DxoFilterBuilderPopupModule,
                        DxoFilterPanelModule,
                        DxoFilterRowModule,
                        DxoOperationDescriptionsModule,
                        DxoGroupingModule,
                        DxoGroupPanelModule,
                        DxoKeyboardNavigationModule,
                        DxoLoadPanelModule,
                        DxoMasterDetailModule,
                        DxoPagerModule,
                        DxoPagingModule,
                        DxoRemoteOperationsModule,
                        DxoRowDraggingModule,
                        DxoCursorOffsetModule,
                        DxoScrollingModule,
                        DxoSearchPanelModule,
                        DxiSortByGroupSummaryInfoModule,
                        DxoSortingModule,
                        DxoStateStoringModule,
                        DxoSummaryModule,
                        DxiGroupItemModule,
                        DxoValueFormatModule,
                        DxiTotalItemModule,
                        DxoToolbarModule,
                        DxIntegrationModule,
                        DxTemplateModule], exports: [DxDataGridComponent, DxoColumnChooserModule,
                        DxoPositionModule,
                        DxoAtModule,
                        DxoBoundaryOffsetModule,
                        DxoCollisionModule,
                        DxoMyModule,
                        DxoOffsetModule,
                        DxoSearchModule,
                        DxoSelectionModule,
                        DxoColumnFixingModule,
                        DxoTextsModule,
                        DxiColumnModule,
                        DxiButtonModule,
                        DxoHeaderFilterModule,
                        DxoLookupModule,
                        DxoFormatModule,
                        DxoFormItemModule,
                        DxoLabelModule,
                        DxiValidationRuleModule,
                        DxoEditingModule,
                        DxiChangeModule,
                        DxoFormModule,
                        DxoColCountByScreenModule,
                        DxiItemModule,
                        DxoTabPanelOptionsModule,
                        DxiTabModule,
                        DxoButtonOptionsModule,
                        DxoPopupModule,
                        DxoAnimationModule,
                        DxoHideModule,
                        DxoFromModule,
                        DxoToModule,
                        DxoShowModule,
                        DxiToolbarItemModule,
                        DxoExportModule,
                        DxoFilterBuilderModule,
                        DxiCustomOperationModule,
                        DxiFieldModule,
                        DxoFilterOperationDescriptionsModule,
                        DxoGroupOperationDescriptionsModule,
                        DxoFilterBuilderPopupModule,
                        DxoFilterPanelModule,
                        DxoFilterRowModule,
                        DxoOperationDescriptionsModule,
                        DxoGroupingModule,
                        DxoGroupPanelModule,
                        DxoKeyboardNavigationModule,
                        DxoLoadPanelModule,
                        DxoMasterDetailModule,
                        DxoPagerModule,
                        DxoPagingModule,
                        DxoRemoteOperationsModule,
                        DxoRowDraggingModule,
                        DxoCursorOffsetModule,
                        DxoScrollingModule,
                        DxoSearchPanelModule,
                        DxiSortByGroupSummaryInfoModule,
                        DxoSortingModule,
                        DxoStateStoringModule,
                        DxoSummaryModule,
                        DxiGroupItemModule,
                        DxoValueFormatModule,
                        DxiTotalItemModule,
                        DxoToolbarModule,
                        DxTemplateModule] });
                /** @nocollapse */ static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridModule, imports: [DxoColumnChooserModule,
                        DxoPositionModule,
                        DxoAtModule,
                        DxoBoundaryOffsetModule,
                        DxoCollisionModule,
                        DxoMyModule,
                        DxoOffsetModule,
                        DxoSearchModule,
                        DxoSelectionModule,
                        DxoColumnFixingModule,
                        DxoTextsModule,
                        DxiColumnModule,
                        DxiButtonModule,
                        DxoHeaderFilterModule,
                        DxoLookupModule,
                        DxoFormatModule,
                        DxoFormItemModule,
                        DxoLabelModule,
                        DxiValidationRuleModule,
                        DxoEditingModule,
                        DxiChangeModule,
                        DxoFormModule,
                        DxoColCountByScreenModule,
                        DxiItemModule,
                        DxoTabPanelOptionsModule,
                        DxiTabModule,
                        DxoButtonOptionsModule,
                        DxoPopupModule,
                        DxoAnimationModule,
                        DxoHideModule,
                        DxoFromModule,
                        DxoToModule,
                        DxoShowModule,
                        DxiToolbarItemModule,
                        DxoExportModule,
                        DxoFilterBuilderModule,
                        DxiCustomOperationModule,
                        DxiFieldModule,
                        DxoFilterOperationDescriptionsModule,
                        DxoGroupOperationDescriptionsModule,
                        DxoFilterBuilderPopupModule,
                        DxoFilterPanelModule,
                        DxoFilterRowModule,
                        DxoOperationDescriptionsModule,
                        DxoGroupingModule,
                        DxoGroupPanelModule,
                        DxoKeyboardNavigationModule,
                        DxoLoadPanelModule,
                        DxoMasterDetailModule,
                        DxoPagerModule,
                        DxoPagingModule,
                        DxoRemoteOperationsModule,
                        DxoRowDraggingModule,
                        DxoCursorOffsetModule,
                        DxoScrollingModule,
                        DxoSearchPanelModule,
                        DxiSortByGroupSummaryInfoModule,
                        DxoSortingModule,
                        DxoStateStoringModule,
                        DxoSummaryModule,
                        DxiGroupItemModule,
                        DxoValueFormatModule,
                        DxiTotalItemModule,
                        DxoToolbarModule,
                        DxIntegrationModule,
                        DxTemplateModule, DxoColumnChooserModule,
                        DxoPositionModule,
                        DxoAtModule,
                        DxoBoundaryOffsetModule,
                        DxoCollisionModule,
                        DxoMyModule,
                        DxoOffsetModule,
                        DxoSearchModule,
                        DxoSelectionModule,
                        DxoColumnFixingModule,
                        DxoTextsModule,
                        DxiColumnModule,
                        DxiButtonModule,
                        DxoHeaderFilterModule,
                        DxoLookupModule,
                        DxoFormatModule,
                        DxoFormItemModule,
                        DxoLabelModule,
                        DxiValidationRuleModule,
                        DxoEditingModule,
                        DxiChangeModule,
                        DxoFormModule,
                        DxoColCountByScreenModule,
                        DxiItemModule,
                        DxoTabPanelOptionsModule,
                        DxiTabModule,
                        DxoButtonOptionsModule,
                        DxoPopupModule,
                        DxoAnimationModule,
                        DxoHideModule,
                        DxoFromModule,
                        DxoToModule,
                        DxoShowModule,
                        DxiToolbarItemModule,
                        DxoExportModule,
                        DxoFilterBuilderModule,
                        DxiCustomOperationModule,
                        DxiFieldModule,
                        DxoFilterOperationDescriptionsModule,
                        DxoGroupOperationDescriptionsModule,
                        DxoFilterBuilderPopupModule,
                        DxoFilterPanelModule,
                        DxoFilterRowModule,
                        DxoOperationDescriptionsModule,
                        DxoGroupingModule,
                        DxoGroupPanelModule,
                        DxoKeyboardNavigationModule,
                        DxoLoadPanelModule,
                        DxoMasterDetailModule,
                        DxoPagerModule,
                        DxoPagingModule,
                        DxoRemoteOperationsModule,
                        DxoRowDraggingModule,
                        DxoCursorOffsetModule,
                        DxoScrollingModule,
                        DxoSearchPanelModule,
                        DxiSortByGroupSummaryInfoModule,
                        DxoSortingModule,
                        DxoStateStoringModule,
                        DxoSummaryModule,
                        DxiGroupItemModule,
                        DxoValueFormatModule,
                        DxiTotalItemModule,
                        DxoToolbarModule,
                        DxTemplateModule] });
            } exports("hj", DxDataGridModule);
            i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.0", ngImport: i0, type: DxDataGridModule, decorators: [{
                        type: NgModule,
                        args: [{
                                imports: [
                                    DxoColumnChooserModule,
                                    DxoPositionModule,
                                    DxoAtModule,
                                    DxoBoundaryOffsetModule,
                                    DxoCollisionModule,
                                    DxoMyModule,
                                    DxoOffsetModule,
                                    DxoSearchModule,
                                    DxoSelectionModule,
                                    DxoColumnFixingModule,
                                    DxoTextsModule,
                                    DxiColumnModule,
                                    DxiButtonModule,
                                    DxoHeaderFilterModule,
                                    DxoLookupModule,
                                    DxoFormatModule,
                                    DxoFormItemModule,
                                    DxoLabelModule,
                                    DxiValidationRuleModule,
                                    DxoEditingModule,
                                    DxiChangeModule,
                                    DxoFormModule,
                                    DxoColCountByScreenModule,
                                    DxiItemModule,
                                    DxoTabPanelOptionsModule,
                                    DxiTabModule,
                                    DxoButtonOptionsModule,
                                    DxoPopupModule,
                                    DxoAnimationModule,
                                    DxoHideModule,
                                    DxoFromModule,
                                    DxoToModule,
                                    DxoShowModule,
                                    DxiToolbarItemModule,
                                    DxoExportModule,
                                    DxoFilterBuilderModule,
                                    DxiCustomOperationModule,
                                    DxiFieldModule,
                                    DxoFilterOperationDescriptionsModule,
                                    DxoGroupOperationDescriptionsModule,
                                    DxoFilterBuilderPopupModule,
                                    DxoFilterPanelModule,
                                    DxoFilterRowModule,
                                    DxoOperationDescriptionsModule,
                                    DxoGroupingModule,
                                    DxoGroupPanelModule,
                                    DxoKeyboardNavigationModule,
                                    DxoLoadPanelModule,
                                    DxoMasterDetailModule,
                                    DxoPagerModule,
                                    DxoPagingModule,
                                    DxoRemoteOperationsModule,
                                    DxoRowDraggingModule,
                                    DxoCursorOffsetModule,
                                    DxoScrollingModule,
                                    DxoSearchPanelModule,
                                    DxiSortByGroupSummaryInfoModule,
                                    DxoSortingModule,
                                    DxoStateStoringModule,
                                    DxoSummaryModule,
                                    DxiGroupItemModule,
                                    DxoValueFormatModule,
                                    DxiTotalItemModule,
                                    DxoToolbarModule,
                                    DxIntegrationModule,
                                    DxTemplateModule
                                ],
                                declarations: [
                                    DxDataGridComponent
                                ],
                                exports: [
                                    DxDataGridComponent,
                                    DxoColumnChooserModule,
                                    DxoPositionModule,
                                    DxoAtModule,
                                    DxoBoundaryOffsetModule,
                                    DxoCollisionModule,
                                    DxoMyModule,
                                    DxoOffsetModule,
                                    DxoSearchModule,
                                    DxoSelectionModule,
                                    DxoColumnFixingModule,
                                    DxoTextsModule,
                                    DxiColumnModule,
                                    DxiButtonModule,
                                    DxoHeaderFilterModule,
                                    DxoLookupModule,
                                    DxoFormatModule,
                                    DxoFormItemModule,
                                    DxoLabelModule,
                                    DxiValidationRuleModule,
                                    DxoEditingModule,
                                    DxiChangeModule,
                                    DxoFormModule,
                                    DxoColCountByScreenModule,
                                    DxiItemModule,
                                    DxoTabPanelOptionsModule,
                                    DxiTabModule,
                                    DxoButtonOptionsModule,
                                    DxoPopupModule,
                                    DxoAnimationModule,
                                    DxoHideModule,
                                    DxoFromModule,
                                    DxoToModule,
                                    DxoShowModule,
                                    DxiToolbarItemModule,
                                    DxoExportModule,
                                    DxoFilterBuilderModule,
                                    DxiCustomOperationModule,
                                    DxiFieldModule,
                                    DxoFilterOperationDescriptionsModule,
                                    DxoGroupOperationDescriptionsModule,
                                    DxoFilterBuilderPopupModule,
                                    DxoFilterPanelModule,
                                    DxoFilterRowModule,
                                    DxoOperationDescriptionsModule,
                                    DxoGroupingModule,
                                    DxoGroupPanelModule,
                                    DxoKeyboardNavigationModule,
                                    DxoLoadPanelModule,
                                    DxoMasterDetailModule,
                                    DxoPagerModule,
                                    DxoPagingModule,
                                    DxoRemoteOperationsModule,
                                    DxoRowDraggingModule,
                                    DxoCursorOffsetModule,
                                    DxoScrollingModule,
                                    DxoSearchPanelModule,
                                    DxiSortByGroupSummaryInfoModule,
                                    DxoSortingModule,
                                    DxoStateStoringModule,
                                    DxoSummaryModule,
                                    DxiGroupItemModule,
                                    DxoValueFormatModule,
                                    DxiTotalItemModule,
                                    DxoToolbarModule,
                                    DxTemplateModule
                                ]
                            }]
                    }] });

        })
    };
}));
