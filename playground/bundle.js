/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 123);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer_base = _interopRequireDefault(__webpack_require__(127));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _renderer_base.default.get();

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.isEvent = exports.type = exports.isDeferred = exports.isPromise = exports.isRenderer = exports.isWindow = exports.isPrimitive = exports.isPlainObject = exports.isEmptyObject = exports.isObject = exports.isNumeric = exports.isString = exports.isFunction = exports.isDefined = exports.isDate = exports.isExponential = exports.isBoolean = void 0;

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var types = {
  '[object Array]': 'array',
  '[object Date]': 'date',
  '[object Object]': 'object',
  '[object String]': 'string',
  '[object Null]': 'null'
};

var type = function type(object) {
  var typeOfObject = Object.prototype.toString.call(object);
  return _typeof(object) === 'object' ? types[typeOfObject] || 'object' : _typeof(object);
};

exports.type = type;

var isBoolean = function isBoolean(object) {
  return typeof object === 'boolean';
};

exports.isBoolean = isBoolean;

var isExponential = function isExponential(value) {
  return isNumeric(value) && value.toString().indexOf('e') !== -1;
};

exports.isExponential = isExponential;

var isDate = function isDate(object) {
  return type(object) === 'date';
};

exports.isDate = isDate;

var isDefined = function isDefined(object) {
  return object !== null && object !== undefined;
};

exports.isDefined = isDefined;

var isFunction = function isFunction(object) {
  return typeof object === 'function';
};

exports.isFunction = isFunction;

var isString = function isString(object) {
  return typeof object === 'string';
};

exports.isString = isString;

var isNumeric = function isNumeric(object) {
  return typeof object === 'number' && isFinite(object) || !isNaN(object - parseFloat(object));
};

exports.isNumeric = isNumeric;

var isObject = function isObject(object) {
  return type(object) === 'object';
};

exports.isObject = isObject;

var isEmptyObject = function isEmptyObject(object) {
  var property;

  for (property in object) {
    return false;
  }

  return true;
};

exports.isEmptyObject = isEmptyObject;

var isPlainObject = function isPlainObject(object) {
  if (!object || Object.prototype.toString.call(object) !== '[object Object]') {
    return false;
  }

  var proto = Object.getPrototypeOf(object);
  var ctor = Object.hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof ctor === 'function' && Object.toString.call(ctor) === Object.toString.call(Object);
};

exports.isPlainObject = isPlainObject;

var isPrimitive = function isPrimitive(value) {
  return ['object', 'array', 'function'].indexOf(type(value)) === -1;
};

exports.isPrimitive = isPrimitive;

var isWindow = function isWindow(object) {
  return object != null && object === object.window;
};

exports.isWindow = isWindow;

var isRenderer = function isRenderer(object) {
  return !!(object.jquery || object.dxRenderer);
};

exports.isRenderer = isRenderer;

var isPromise = function isPromise(object) {
  return object && isFunction(object.then);
};

exports.isPromise = isPromise;

var isDeferred = function isDeferred(object) {
  return object && isFunction(object.done) && isFunction(object.fail);
};

exports.isDeferred = isDeferred;

var isEvent = function isEvent(object) {
  return !!(object && object.preventDefault);
};

exports.isEvent = isEvent;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.extend = exports.extendFromObject = void 0;

var _type = __webpack_require__(1);

var extendFromObject = function extendFromObject(target, source, overrideExistingValues) {
  target = target || {};

  for (var prop in source) {
    if (Object.prototype.hasOwnProperty.call(source, prop)) {
      var value = source[prop];

      if (!(prop in target) || overrideExistingValues) {
        target[prop] = value;
      }
    }
  }

  return target;
};

exports.extendFromObject = extendFromObject;

var extend = function extend(target) {
  target = target || {};
  var i = 1;
  var deep = false;

  if (typeof target === 'boolean') {
    deep = target;
    target = arguments[1] || {};
    i++;
  }

  for (; i < arguments.length; i++) {
    var source = arguments[i];

    if (source == null) {
      continue;
    }

    for (var key in source) {
      var targetValue = target[key];
      var sourceValue = source[key];
      var sourceValueIsArray = false;
      var clone = void 0;

      if (key === '__proto__' || key === 'constructor' || target === sourceValue) {
        continue;
      }

      if (deep && sourceValue && ((0, _type.isPlainObject)(sourceValue) || (sourceValueIsArray = Array.isArray(sourceValue)))) {
        if (sourceValueIsArray) {
          clone = targetValue && Array.isArray(targetValue) ? targetValue : [];
        } else {
          clone = targetValue && (0, _type.isPlainObject)(targetValue) ? targetValue : {};
        }

        target[key] = extend(deep, clone, sourceValue);
      } else if (sourceValue !== undefined) {
        target[key] = sourceValue;
      }
    }
  }

  return target;
};

exports.extend = extend;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.equalByValue = exports.grep = exports.asyncNoop = exports.noop = exports.applyServerDecimalSeparator = exports.escapeRegExp = exports.getKeyHash = exports.pairToObject = exports.denormalizeKey = exports.normalizeKey = exports.splitPair = exports.findBestMatches = exports.deferUpdater = exports.deferRenderer = exports.deferUpdate = exports.deferRender = exports.executeAsync = exports.ensureDefined = void 0;

var _config = _interopRequireDefault(__webpack_require__(18));

var _guid = _interopRequireDefault(__webpack_require__(53));

var _deferred = __webpack_require__(9);

var _data = __webpack_require__(23);

var _iterator = __webpack_require__(4);

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ensureDefined = function ensureDefined(value, defaultValue) {
  return (0, _type.isDefined)(value) ? value : defaultValue;
};

exports.ensureDefined = ensureDefined;

var executeAsync = function executeAsync(action, context
/* , internal */
) {
  var deferred = new _deferred.Deferred();
  var normalizedContext = context || this;
  var task = {
    promise: deferred.promise(),
    abort: function abort() {
      clearTimeout(timerId);
      deferred.rejectWith(normalizedContext);
    }
  };

  var callback = function callback() {
    var result = action.call(normalizedContext);

    if (result && result.done && (0, _type.isFunction)(result.done)) {
      result.done(function () {
        deferred.resolveWith(normalizedContext);
      });
    } else {
      deferred.resolveWith(normalizedContext);
    }
  };

  var timerId = (arguments[2] || setTimeout)(callback, typeof context === 'number' ? context : 0);
  return task;
};

exports.executeAsync = executeAsync;
var delayedFuncs = [];
var delayedNames = [];
var delayedDeferreds = [];
var executingName;

var deferExecute = function deferExecute(name, func, deferred) {
  if (executingName && executingName !== name) {
    delayedFuncs.push(func);
    delayedNames.push(name);
    deferred = deferred || new _deferred.Deferred();
    delayedDeferreds.push(deferred);
    return deferred;
  } else {
    var oldExecutingName = executingName;
    var currentDelayedCount = delayedDeferreds.length;
    executingName = name;
    var result = func();

    if (!result) {
      if (delayedDeferreds.length > currentDelayedCount) {
        result = _deferred.when.apply(this, delayedDeferreds.slice(currentDelayedCount));
      } else if (deferred) {
        deferred.resolve();
      }
    }

    executingName = oldExecutingName;

    if (deferred && result && result.done) {
      result.done(deferred.resolve).fail(deferred.reject);
    }

    if (!executingName && delayedFuncs.length) {
      (delayedNames.shift() === 'render' ? deferRender : deferUpdate)(delayedFuncs.shift(), delayedDeferreds.shift());
    }

    return result || (0, _deferred.when)();
  }
};

var deferRender = function deferRender(func, deferred) {
  return deferExecute('render', func, deferred);
};

exports.deferRender = deferRender;

var deferUpdate = function deferUpdate(func, deferred) {
  return deferExecute('update', func, deferred);
};

exports.deferUpdate = deferUpdate;

var deferRenderer = function deferRenderer(func) {
  return function () {
    var that = this;
    return deferExecute('render', function () {
      return func.call(that);
    });
  };
};

exports.deferRenderer = deferRenderer;

var deferUpdater = function deferUpdater(func) {
  return function () {
    var that = this;
    return deferExecute('update', function () {
      return func.call(that);
    });
  };
};

exports.deferUpdater = deferUpdater;

var findBestMatches = function findBestMatches(targetFilter, items, mapFn) {
  var bestMatches = [];
  var maxMatchCount = 0;
  (0, _iterator.each)(items, function (index, itemSrc) {
    var matchCount = 0;
    var item = mapFn ? mapFn(itemSrc) : itemSrc;
    (0, _iterator.each)(targetFilter, function (paramName, targetValue) {
      var value = item[paramName];

      if (value === undefined) {
        return;
      }

      if (match(value, targetValue)) {
        matchCount++;
        return;
      }

      matchCount = -1;
      return false;
    });

    if (matchCount < maxMatchCount) {
      return;
    }

    if (matchCount > maxMatchCount) {
      bestMatches.length = 0;
      maxMatchCount = matchCount;
    }

    bestMatches.push(itemSrc);
  });
  return bestMatches;
};

exports.findBestMatches = findBestMatches;

var match = function match(value, targetValue) {
  if (Array.isArray(value) && Array.isArray(targetValue)) {
    var mismatch = false;
    (0, _iterator.each)(value, function (index, valueItem) {
      if (valueItem !== targetValue[index]) {
        mismatch = true;
        return false;
      }
    });

    if (mismatch) {
      return false;
    }

    return true;
  }

  if (value === targetValue) {
    return true;
  }

  return false;
};

var splitPair = function splitPair(raw) {
  var _raw$x, _raw$y;

  switch ((0, _type.type)(raw)) {
    case 'string':
      return raw.split(/\s+/, 2);

    case 'object':
      return [(_raw$x = raw.x) !== null && _raw$x !== void 0 ? _raw$x : raw.h, (_raw$y = raw.y) !== null && _raw$y !== void 0 ? _raw$y : raw.v];

    case 'number':
      return [raw];

    case 'array':
      return raw;

    default:
      return null;
  }
};

exports.splitPair = splitPair;

var normalizeKey = function normalizeKey(id) {
  var key = (0, _type.isString)(id) ? id : id.toString();
  var arr = key.match(/[^a-zA-Z0-9_]/g);
  arr && (0, _iterator.each)(arr, function (_, sign) {
    key = key.replace(sign, '__' + sign.charCodeAt() + '__');
  });
  return key;
};

exports.normalizeKey = normalizeKey;

var denormalizeKey = function denormalizeKey(key) {
  var arr = key.match(/__\d+__/g);
  arr && arr.forEach(function (char) {
    var charCode = parseInt(char.replace('__', ''));
    key = key.replace(char, String.fromCharCode(charCode));
  });
  return key;
};

exports.denormalizeKey = denormalizeKey;

var pairToObject = function pairToObject(raw, preventRound) {
  var pair = splitPair(raw);
  var h = preventRound ? parseFloat(pair && pair[0]) : parseInt(pair && pair[0], 10);
  var v = preventRound ? parseFloat(pair && pair[1]) : parseInt(pair && pair[1], 10);

  if (!isFinite(h)) {
    h = 0;
  }

  if (!isFinite(v)) {
    v = h;
  }

  return {
    h: h,
    v: v
  };
};

exports.pairToObject = pairToObject;

var getKeyHash = function getKeyHash(key) {
  if (key instanceof _guid.default) {
    return key.toString();
  } else if ((0, _type.isObject)(key) || Array.isArray(key)) {
    try {
      var keyHash = JSON.stringify(key);
      return keyHash === '{}' ? key : keyHash;
    } catch (e) {
      return key;
    }
  }

  return key;
};

exports.getKeyHash = getKeyHash;

var escapeRegExp = function escapeRegExp(string) {
  return string.replace(/[[\]{}\-()*+?.\\^$|\s]/g, '\\$&');
};

exports.escapeRegExp = escapeRegExp;

var applyServerDecimalSeparator = function applyServerDecimalSeparator(value) {
  var separator = (0, _config.default)().serverDecimalSeparator;

  if ((0, _type.isDefined)(value)) {
    value = value.toString().replace('.', separator);
  }

  return value;
};

exports.applyServerDecimalSeparator = applyServerDecimalSeparator;

var noop = function noop() {};

exports.noop = noop;

var asyncNoop = function asyncNoop() {
  return new _deferred.Deferred().resolve().promise();
};

exports.asyncNoop = asyncNoop;

var grep = function grep(elements, checkFunction, invert) {
  var result = [];
  var check;
  var expectedCheck = !invert;

  for (var i = 0; i < elements.length; i++) {
    check = !!checkFunction(elements[i], i);

    if (check === expectedCheck) {
      result.push(elements[i]);
    }
  }

  return result;
};

exports.grep = grep;

var arraysEqualByValue = function arraysEqualByValue(array1, array2, depth) {
  if (array1.length !== array2.length) {
    return false;
  }

  for (var i = 0; i < array1.length; i++) {
    if (!equalByValue(array1[i], array2[i], depth + 1)) {
      return false;
    }
  }

  return true;
};

var objectsEqualByValue = function objectsEqualByValue(object1, object2, depth, strict) {
  for (var propertyName in object1) {
    if (Object.prototype.hasOwnProperty.call(object1, propertyName) && !equalByValue(object1[propertyName], object2[propertyName], depth + 1, strict)) {
      return false;
    }
  }

  for (var _propertyName in object2) {
    if (!(_propertyName in object1)) {
      return false;
    }
  }

  return true;
};

var maxEqualityDepth = 3;

var equalByValue = function equalByValue(object1, object2) {
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var strict = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  object1 = (0, _data.toComparable)(object1, true);
  object2 = (0, _data.toComparable)(object2, true); // eslint-disable-next-line eqeqeq

  var comparisonResult = strict ? object1 === object2 : object1 == object2;

  if (comparisonResult || depth >= maxEqualityDepth) {
    return true;
  }

  if ((0, _type.isObject)(object1) && (0, _type.isObject)(object2)) {
    return objectsEqualByValue(object1, object2, depth, strict);
  } else if (Array.isArray(object1) && Array.isArray(object2)) {
    return arraysEqualByValue(object1, object2, depth);
  }

  return false;
};

exports.equalByValue = equalByValue;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.reverseEach = exports.each = exports.map = void 0;

var map = function map(values, callback) {
  if (Array.isArray(values)) {
    return values.map(callback);
  }

  var result = [];

  for (var key in values) {
    result.push(callback(values[key], key));
  }

  return result;
};

exports.map = map;

var each = function each(values, callback) {
  if (!values) return;

  if ('length' in values) {
    for (var i = 0; i < values.length; i++) {
      if (callback.call(values[i], i, values[i]) === false) {
        break;
      }
    }
  } else {
    for (var key in values) {
      if (callback.call(values[key], key, values[key]) === false) {
        break;
      }
    }
  }

  return values;
};

exports.each = each;

var reverseEach = function reverseEach(array, callback) {
  if (!array || !('length' in array) || array.length === 0) return;

  for (var i = array.length - 1; i >= 0; i--) {
    if (callback.call(array[i], i, array[i]) === false) {
      break;
    }
  }
};

exports.reverseEach = reverseEach;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _event_registrator_callbacks = _interopRequireDefault(__webpack_require__(87));

var _extend = __webpack_require__(2);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _window = __webpack_require__(7);

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

var _type = __webpack_require__(1);

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _errors = _interopRequireDefault(__webpack_require__(13));

var _weak_map = _interopRequireDefault(__webpack_require__(69));

var _hook_touch_props = _interopRequireDefault(__webpack_require__(129));

var _call_once = _interopRequireDefault(__webpack_require__(32));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var window = (0, _window.getWindow)();
var EMPTY_EVENT_NAME = 'dxEmptyEventType';
var NATIVE_EVENTS_TO_SUBSCRIBE = {
  'mouseenter': 'mouseover',
  'mouseleave': 'mouseout',
  'pointerenter': 'pointerover',
  'pointerleave': 'pointerout'
};
var NATIVE_EVENTS_TO_TRIGGER = {
  'focusin': 'focus',
  'focusout': 'blur'
};
var NO_BUBBLE_EVENTS = ['blur', 'focus', 'load'];
var forcePassiveFalseEventNames = ['touchmove', 'wheel', 'mousewheel', 'touchstart'];
var EVENT_PROPERTIES = ['target', 'relatedTarget', 'delegateTarget', 'altKey', 'bubbles', 'cancelable', 'changedTouches', 'ctrlKey', 'detail', 'eventPhase', 'metaKey', 'shiftKey', 'view', 'char', 'code', 'charCode', 'key', 'keyCode', 'button', 'buttons', 'offsetX', 'offsetY', 'pointerId', 'pointerType', 'targetTouches', 'toElement', 'touches'];

function matchesSafe(target, selector) {
  return !(0, _type.isWindow)(target) && target.nodeName !== '#document' && _dom_adapter.default.elementMatches(target, selector);
}

var elementDataMap = new _weak_map.default();
var guid = 0;
var skipEvent;

var special = function () {
  var specialData = {};

  _event_registrator_callbacks.default.add(function (eventName, eventObject) {
    specialData[eventName] = eventObject;
  });

  return {
    getField: function getField(eventName, field) {
      return specialData[eventName] && specialData[eventName][field];
    },
    callMethod: function callMethod(eventName, methodName, context, args) {
      return specialData[eventName] && specialData[eventName][methodName] && specialData[eventName][methodName].apply(context, args);
    }
  };
}();

var eventsEngine = (0, _dependency_injector.default)({
  on: getHandler(normalizeOnArguments(iterate(function (element, eventName, selector, data, handler) {
    var handlersController = getHandlersController(element, eventName);
    handlersController.addHandler(handler, selector, data);
  }))),
  one: getHandler(normalizeOnArguments(function (element, eventName, selector, data, handler) {
    var oneTimeHandler = function oneTimeHandler() {
      eventsEngine.off(element, eventName, selector, oneTimeHandler);
      handler.apply(this, arguments);
    };

    eventsEngine.on(element, eventName, selector, data, oneTimeHandler);
  })),
  off: getHandler(normalizeOffArguments(iterate(function (element, eventName, selector, handler) {
    var handlersController = getHandlersController(element, eventName);
    handlersController.removeHandler(handler, selector);
  }))),
  trigger: getHandler(normalizeTriggerArguments(function (element, event, extraParameters) {
    var eventName = event.type;
    var handlersController = getHandlersController(element, event.type);
    special.callMethod(eventName, 'trigger', element, [event, extraParameters]);
    handlersController.callHandlers(event, extraParameters);
    var noBubble = special.getField(eventName, 'noBubble') || event.isPropagationStopped() || NO_BUBBLE_EVENTS.indexOf(eventName) !== -1;

    if (!noBubble) {
      var parents = [];

      var getParents = function getParents(element) {
        var parent = element.parentNode;

        if (parent) {
          parents.push(parent);
          getParents(parent);
        }
      };

      getParents(element);
      parents.push(window);
      var i = 0;

      while (parents[i] && !event.isPropagationStopped()) {
        var parentDataByEvent = getHandlersController(parents[i], event.type);
        parentDataByEvent.callHandlers((0, _extend.extend)(event, {
          currentTarget: parents[i]
        }), extraParameters);
        i++;
      }
    }

    if (element.nodeType || (0, _type.isWindow)(element)) {
      special.callMethod(eventName, '_default', element, [event, extraParameters]);
      callNativeMethod(eventName, element);
    }
  })),
  triggerHandler: getHandler(normalizeTriggerArguments(function (element, event, extraParameters) {
    var handlersController = getHandlersController(element, event.type);
    handlersController.callHandlers(event, extraParameters);
  }))
});

function applyForEach(args, method) {
  var element = args[0];

  if (!element) {
    return;
  }

  if (_dom_adapter.default.isNode(element) || (0, _type.isWindow)(element)) {
    method.apply(eventsEngine, args);
  } else if (!(0, _type.isString)(element) && 'length' in element) {
    var itemArgs = Array.prototype.slice.call(args, 0);
    Array.prototype.forEach.call(element, function (itemElement) {
      itemArgs[0] = itemElement;
      applyForEach(itemArgs, method);
    });
  } else {
    throw _errors.default.Error('E0025');
  }
}

function getHandler(method) {
  return function () {
    applyForEach(arguments, method);
  };
}

function detectPassiveEventHandlersSupport() {
  var isSupported = false;

  try {
    var options = Object.defineProperty({}, 'passive', {
      get: function get() {
        isSupported = true;
        return true;
      }
    });
    window.addEventListener('test', null, options);
  } catch (e) {}

  return isSupported;
}

var passiveEventHandlersSupported = (0, _call_once.default)(detectPassiveEventHandlersSupport);

var contains = function contains(container, element) {
  if ((0, _type.isWindow)(container)) {
    return contains(container.document, element);
  }

  return container.contains ? container.contains(element) : !!(element.compareDocumentPosition(container) & element.DOCUMENT_POSITION_CONTAINS);
};

function getHandlersController(element, eventName) {
  var elementData = elementDataMap.get(element);
  eventName = eventName || '';
  var eventNameParts = eventName.split('.');
  var namespaces = eventNameParts.slice(1);
  var eventNameIsDefined = !!eventNameParts[0];
  eventName = eventNameParts[0] || EMPTY_EVENT_NAME;

  if (!elementData) {
    elementData = {};
    elementDataMap.set(element, elementData);
  }

  if (!elementData[eventName]) {
    elementData[eventName] = {
      handleObjects: [],
      nativeHandler: null
    };
  }

  var eventData = elementData[eventName];
  return {
    addHandler: function addHandler(handler, selector, data) {
      var callHandler = function callHandler(e, extraParameters) {
        var handlerArgs = [e];
        var target = e.currentTarget;
        var relatedTarget = e.relatedTarget;
        var secondaryTargetIsInside;
        var result;

        if (eventName in NATIVE_EVENTS_TO_SUBSCRIBE) {
          secondaryTargetIsInside = relatedTarget && target && (relatedTarget === target || contains(target, relatedTarget));
        }

        if (extraParameters !== undefined) {
          handlerArgs.push(extraParameters);
        }

        special.callMethod(eventName, 'handle', element, [e, data]);

        if (!secondaryTargetIsInside) {
          result = handler.apply(target, handlerArgs);
        }

        if (result === false) {
          e.preventDefault();
          e.stopPropagation();
        }
      };

      var wrappedHandler = function wrappedHandler(e, extraParameters) {
        if (skipEvent && e.type === skipEvent) {
          return;
        }

        e.data = data;
        e.delegateTarget = element;

        if (selector) {
          var currentTarget = e.target;

          while (currentTarget && currentTarget !== element) {
            if (matchesSafe(currentTarget, selector)) {
              e.currentTarget = currentTarget;
              callHandler(e, extraParameters);
            }

            currentTarget = currentTarget.parentNode;
          }
        } else {
          e.currentTarget = e.delegateTarget || e.target;
          callHandler(e, extraParameters);
        }
      };

      var handleObject = {
        handler: handler,
        wrappedHandler: wrappedHandler,
        selector: selector,
        type: eventName,
        data: data,
        namespace: namespaces.join('.'),
        namespaces: namespaces,
        guid: ++guid
      };
      eventData.handleObjects.push(handleObject);
      var firstHandlerForTheType = eventData.handleObjects.length === 1;
      var shouldAddNativeListener = firstHandlerForTheType && eventNameIsDefined;
      var nativeListenerOptions;

      if (shouldAddNativeListener) {
        shouldAddNativeListener = !special.callMethod(eventName, 'setup', element, [data, namespaces, handler]);
      }

      if (shouldAddNativeListener) {
        eventData.nativeHandler = getNativeHandler(eventName);

        if (passiveEventHandlersSupported() && forcePassiveFalseEventNames.indexOf(eventName) > -1) {
          nativeListenerOptions = {
            passive: false
          };
        }

        eventData.removeListener = _dom_adapter.default.listen(element, NATIVE_EVENTS_TO_SUBSCRIBE[eventName] || eventName, eventData.nativeHandler, nativeListenerOptions);
      }

      special.callMethod(eventName, 'add', element, [handleObject]);
    },
    removeHandler: function removeHandler(handler, selector) {
      var removeByEventName = function removeByEventName(eventName) {
        var eventData = elementData[eventName];

        if (!eventData.handleObjects.length) {
          delete elementData[eventName];
          return;
        }

        var removedHandler;
        eventData.handleObjects = eventData.handleObjects.filter(function (handleObject) {
          var skip = namespaces.length && !isSubset(handleObject.namespaces, namespaces) || handler && handleObject.handler !== handler || selector && handleObject.selector !== selector;

          if (!skip) {
            removedHandler = handleObject.handler;
            special.callMethod(eventName, 'remove', element, [handleObject]);
          }

          return skip;
        });
        var lastHandlerForTheType = !eventData.handleObjects.length;
        var shouldRemoveNativeListener = lastHandlerForTheType && eventName !== EMPTY_EVENT_NAME;

        if (shouldRemoveNativeListener) {
          special.callMethod(eventName, 'teardown', element, [namespaces, removedHandler]);

          if (eventData.nativeHandler) {
            eventData.removeListener();
          }

          delete elementData[eventName];
        }
      };

      if (eventNameIsDefined) {
        removeByEventName(eventName);
      } else {
        for (var name in elementData) {
          removeByEventName(name);
        }
      }

      var elementDataIsEmpty = Object.keys(elementData).length === 0;

      if (elementDataIsEmpty) {
        elementDataMap.delete(element);
      }
    },
    callHandlers: function callHandlers(event, extraParameters) {
      var forceStop = false;

      var handleCallback = function handleCallback(handleObject) {
        if (forceStop) {
          return;
        }

        if (!namespaces.length || isSubset(handleObject.namespaces, namespaces)) {
          handleObject.wrappedHandler(event, extraParameters);
          forceStop = event.isImmediatePropagationStopped();
        }
      };

      eventData.handleObjects.forEach(handleCallback);

      if (namespaces.length && elementData[EMPTY_EVENT_NAME]) {
        elementData[EMPTY_EVENT_NAME].handleObjects.forEach(handleCallback);
      }
    }
  };
}

function getNativeHandler(subscribeName) {
  return function (event, extraParameters) {
    var handlersController = getHandlersController(this, subscribeName);
    event = eventsEngine.Event(event);
    handlersController.callHandlers(event, extraParameters);
  };
}

function isSubset(original, checked) {
  for (var i = 0; i < checked.length; i++) {
    if (original.indexOf(checked[i]) < 0) return false;
  }

  return true;
}

function normalizeOnArguments(callback) {
  return function (element, eventName, selector, data, handler) {
    if (!handler) {
      handler = data;
      data = undefined;
    }

    if (typeof selector !== 'string') {
      data = selector;
      selector = undefined;
    }

    if (!handler && typeof eventName === 'string') {
      handler = data || selector;
      selector = undefined;
      data = undefined;
    }

    callback(element, eventName, selector, data, handler);
  };
}

function normalizeOffArguments(callback) {
  return function (element, eventName, selector, handler) {
    if (typeof selector === 'function') {
      handler = selector;
      selector = undefined;
    }

    callback(element, eventName, selector, handler);
  };
}

function normalizeTriggerArguments(callback) {
  return function (element, src, extraParameters) {
    if (typeof src === 'string') {
      src = {
        type: src
      };
    }

    if (!src.target) {
      src.target = element;
    }

    src.currentTarget = element;

    if (!src.delegateTarget) {
      src.delegateTarget = element;
    }

    if (!src.type && src.originalEvent) {
      src.type = src.originalEvent.type;
    }

    callback(element, src instanceof eventsEngine.Event ? src : eventsEngine.Event(src), extraParameters);
  };
}

function normalizeEventArguments(callback) {
  eventsEngine.Event = function (src, config) {
    if (!(this instanceof eventsEngine.Event)) {
      return new eventsEngine.Event(src, config);
    }

    if (!src) {
      src = {};
    }

    if (typeof src === 'string') {
      src = {
        type: src
      };
    }

    if (!config) {
      config = {};
    }

    callback.call(this, src, config);
  };

  _extends(eventsEngine.Event.prototype, {
    _propagationStopped: false,
    _immediatePropagationStopped: false,
    _defaultPrevented: false,
    isPropagationStopped: function isPropagationStopped() {
      return !!(this._propagationStopped || this.originalEvent && this.originalEvent.propagationStopped);
    },
    stopPropagation: function stopPropagation() {
      this._propagationStopped = true;
      this.originalEvent && this.originalEvent.stopPropagation();
    },
    isImmediatePropagationStopped: function isImmediatePropagationStopped() {
      return this._immediatePropagationStopped;
    },
    stopImmediatePropagation: function stopImmediatePropagation() {
      this.stopPropagation();
      this._immediatePropagationStopped = true;
      this.originalEvent && this.originalEvent.stopImmediatePropagation();
    },
    isDefaultPrevented: function isDefaultPrevented() {
      return !!(this._defaultPrevented || this.originalEvent && this.originalEvent.defaultPrevented);
    },
    preventDefault: function preventDefault() {
      this._defaultPrevented = true;
      this.originalEvent && this.originalEvent.preventDefault();
    }
  });

  return eventsEngine.Event;
}

function iterate(callback) {
  var iterateEventNames = function iterateEventNames(element, eventName) {
    if (eventName && eventName.indexOf(' ') > -1) {
      var args = Array.prototype.slice.call(arguments, 0);
      eventName.split(' ').forEach(function (eventName) {
        args[1] = eventName;
        callback.apply(this, args);
      });
    } else {
      callback.apply(this, arguments);
    }
  };

  return function (element, eventName) {
    if (_typeof(eventName) === 'object') {
      var args = Array.prototype.slice.call(arguments, 0);

      for (var name in eventName) {
        args[1] = name;
        args[args.length - 1] = eventName[name];
        iterateEventNames.apply(this, args);
      }
    } else {
      iterateEventNames.apply(this, arguments);
    }
  };
}

function callNativeMethod(eventName, element) {
  var nativeMethodName = NATIVE_EVENTS_TO_TRIGGER[eventName] || eventName;

  var isLinkClickEvent = function isLinkClickEvent(eventName, element) {
    return eventName === 'click' && element.localName === 'a';
  };

  if (isLinkClickEvent(eventName, element)) return;

  if ((0, _type.isFunction)(element[nativeMethodName])) {
    skipEvent = eventName;
    element[nativeMethodName]();
    skipEvent = undefined;
  }
}

function calculateWhich(event) {
  var setForMouseEvent = function setForMouseEvent(event) {
    var mouseEventRegex = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
    return !event.which && event.button !== undefined && mouseEventRegex.test(event.type);
  };

  var setForKeyEvent = function setForKeyEvent(event) {
    return event.which == null && event.type.indexOf('key') === 0;
  };

  if (setForKeyEvent(event)) {
    return event.charCode != null ? event.charCode : event.keyCode;
  }

  if (setForMouseEvent(event)) {
    var whichByButton = {
      1: 1,
      2: 3,
      3: 1,
      4: 2
    };
    return whichByButton[event.button];
  }

  return event.which;
}

function initEvent(EventClass) {
  if (EventClass) {
    eventsEngine.Event = EventClass;
    eventsEngine.Event.prototype = EventClass.prototype;
  }
}

initEvent(normalizeEventArguments(function (src, config) {
  var _src$view;

  var that = this;
  var srcIsEvent = src instanceof eventsEngine.Event || (0, _window.hasWindow)() && src instanceof window.Event || ((_src$view = src.view) === null || _src$view === void 0 ? void 0 : _src$view.Event) && src instanceof src.view.Event;

  if (srcIsEvent) {
    that.originalEvent = src;
    that.type = src.type;
    that.currentTarget = undefined;
    that.timeStamp = src.timeStamp || Date.now();
  } else {
    _extends(that, src);
  }

  addProperty('which', calculateWhich, that);

  if (src.type.indexOf('touch') === 0) {
    delete config.pageX;
    delete config.pageY;
  }

  _extends(that, config);

  that.guid = ++guid;
}));

function addProperty(propName, hook, eventInstance) {
  Object.defineProperty(eventInstance || eventsEngine.Event.prototype, propName, {
    enumerable: true,
    configurable: true,
    get: function get() {
      return this.originalEvent && hook(this.originalEvent);
    },
    set: function set(value) {
      Object.defineProperty(this, propName, {
        enumerable: true,
        configurable: true,
        writable: true,
        value: value
      });
    }
  });
}

EVENT_PROPERTIES.forEach(function (prop) {
  return addProperty(prop, function (event) {
    return event[prop];
  });
});
(0, _hook_touch_props.default)(addProperty);
var beforeSetStrategy = (0, _callbacks.default)();
var afterSetStrategy = (0, _callbacks.default)();

eventsEngine.set = function (engine) {
  beforeSetStrategy.fire();
  eventsEngine.inject(engine);
  initEvent(engine.Event);
  afterSetStrategy.fire();
};

eventsEngine.subscribeGlobal = function () {
  applyForEach(arguments, normalizeOnArguments(function () {
    var args = arguments;
    eventsEngine.on.apply(this, args);
    beforeSetStrategy.add(function () {
      var offArgs = Array.prototype.slice.call(args, 0);
      offArgs.splice(3, 1);
      eventsEngine.off.apply(this, offArgs);
    });
    afterSetStrategy.add(function () {
      eventsEngine.on.apply(this, args);
    });
  }));
};

eventsEngine.forcePassiveFalseEventNames = forcePassiveFalseEventNames;
eventsEngine.passiveEventHandlersSupported = passiveEventHandlersSupported; ///#DEBUG

eventsEngine.elementDataMap = elementDataMap;
eventsEngine.detectPassiveEventHandlersSupport = detectPassiveEventHandlersSupport; ///#ENDDEBUG

var _default = eventsEngine;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.isCommandKeyPressed = exports.addNamespace = exports.getChar = exports.normalizeKeyName = exports.fireEvent = exports.createEvent = exports.setEventFixMethod = exports.needSkipEvent = exports.stopEventsSkipping = exports.forceSkipEvents = exports.hasTouches = exports.eventDelta = exports.eventData = exports.isFakeClickEvent = exports.isKeyboardEvent = exports.isTouchEvent = exports.isDxMouseWheelEvent = exports.isMouseEvent = exports.isPointerEvent = exports.eventSource = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _add_namespace = _interopRequireDefault(__webpack_require__(130));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _iterator = __webpack_require__(4);

var _extend = __webpack_require__(2);

var _selectors = __webpack_require__(35);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var KEY_MAP = {
  'backspace': 'backspace',
  'tab': 'tab',
  'enter': 'enter',
  'escape': 'escape',
  'pageup': 'pageUp',
  'pagedown': 'pageDown',
  'end': 'end',
  'home': 'home',
  'arrowleft': 'leftArrow',
  'arrowup': 'upArrow',
  'arrowright': 'rightArrow',
  'arrowdown': 'downArrow',
  'delete': 'del',
  ' ': 'space',
  'f': 'F',
  'a': 'A',
  '*': 'asterisk',
  '-': 'minus',
  'alt': 'alt',
  'control': 'control',
  'shift': 'shift',
  // IE11:
  'left': 'leftArrow',
  'up': 'upArrow',
  'right': 'rightArrow',
  'down': 'downArrow',
  'multiply': 'asterisk',
  'spacebar': 'space',
  'del': 'del',
  'subtract': 'minus',
  'esc': 'escape'
};
var LEGACY_KEY_CODES = {
  // iOS 10.2 and lower didn't supports KeyboardEvent.key
  '8': 'backspace',
  '9': 'tab',
  '13': 'enter',
  '27': 'escape',
  '33': 'pageUp',
  '34': 'pageDown',
  '35': 'end',
  '36': 'home',
  '37': 'leftArrow',
  '38': 'upArrow',
  '39': 'rightArrow',
  '40': 'downArrow',
  '46': 'del',
  '32': 'space',
  '70': 'F',
  '65': 'A',
  '106': 'asterisk',
  '109': 'minus',
  '189': 'minus',
  '173': 'minus',
  '16': 'shift',
  '17': 'control',
  '18': 'alt'
};
var EVENT_SOURCES_REGEX = {
  dx: /^dx/i,
  mouse: /(mouse|wheel)/i,
  touch: /^touch/i,
  keyboard: /^key/i,
  pointer: /^(ms)?pointer/i
};

var fixMethod = function fixMethod(e) {
  return e;
};

var copyEvent = function copyEvent(originalEvent) {
  return fixMethod(_events_engine.default.Event(originalEvent, originalEvent), originalEvent);
};

var isDxEvent = function isDxEvent(e) {
  return eventSource(e) === 'dx';
};

var isNativeMouseEvent = function isNativeMouseEvent(e) {
  return eventSource(e) === 'mouse';
};

var isNativeTouchEvent = function isNativeTouchEvent(e) {
  return eventSource(e) === 'touch';
};

var eventSource = function eventSource(_ref) {
  var type = _ref.type;
  var result = 'other';
  (0, _iterator.each)(EVENT_SOURCES_REGEX, function (key) {
    if (this.test(type)) {
      result = key;
      return false;
    }
  });
  return result;
};

exports.eventSource = eventSource;

var isPointerEvent = function isPointerEvent(e) {
  return eventSource(e) === 'pointer';
};

exports.isPointerEvent = isPointerEvent;

var isMouseEvent = function isMouseEvent(e) {
  return isNativeMouseEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && e.pointerType === 'mouse';
};

exports.isMouseEvent = isMouseEvent;

var isDxMouseWheelEvent = function isDxMouseWheelEvent(e) {
  return e && e.type === 'dxmousewheel';
};

exports.isDxMouseWheelEvent = isDxMouseWheelEvent;

var isTouchEvent = function isTouchEvent(e) {
  return isNativeTouchEvent(e) || (isPointerEvent(e) || isDxEvent(e)) && e.pointerType === 'touch';
};

exports.isTouchEvent = isTouchEvent;

var isKeyboardEvent = function isKeyboardEvent(e) {
  return eventSource(e) === 'keyboard';
};

exports.isKeyboardEvent = isKeyboardEvent;

var isFakeClickEvent = function isFakeClickEvent(_ref2) {
  var screenX = _ref2.screenX,
      offsetX = _ref2.offsetX,
      pageX = _ref2.pageX;
  return screenX === 0 && !offsetX && pageX === 0;
};

exports.isFakeClickEvent = isFakeClickEvent;

var eventData = function eventData(_ref3) {
  var pageX = _ref3.pageX,
      pageY = _ref3.pageY,
      timeStamp = _ref3.timeStamp;
  return {
    x: pageX,
    y: pageY,
    time: timeStamp
  };
};

exports.eventData = eventData;

var eventDelta = function eventDelta(from, to) {
  return {
    x: to.x - from.x,
    y: to.y - from.y,
    time: to.time - from.time || 1
  };
};

exports.eventDelta = eventDelta;

var hasTouches = function hasTouches(e) {
  var originalEvent = e.originalEvent,
      pointers = e.pointers;

  if (isNativeTouchEvent(e)) {
    return (originalEvent.touches || []).length;
  }

  if (isDxEvent(e)) {
    return (pointers || []).length;
  }

  return 0;
}; // TODO: for tests


exports.hasTouches = hasTouches;
var skipEvents = false;

var forceSkipEvents = function forceSkipEvents() {
  return skipEvents = true;
};

exports.forceSkipEvents = forceSkipEvents;

var stopEventsSkipping = function stopEventsSkipping() {
  return skipEvents = false;
};

exports.stopEventsSkipping = stopEventsSkipping;

var needSkipEvent = function needSkipEvent(e) {
  // TODO: for tests
  if (skipEvents) {
    return true;
  } // TODO: this checking used in swipeable first move handler. is it correct?


  var target = e.target;
  var $target = (0, _renderer.default)(target);
  var isDropDown = $target.is('.dx-dropdownlist-popup-wrapper *, .dx-dropdownlist-popup-wrapper');
  var isContentEditable = (target === null || target === void 0 ? void 0 : target.isContentEditable) || (target === null || target === void 0 ? void 0 : target.hasAttribute('contenteditable'));
  var touchInEditable = $target.is('input, textarea, select') || isContentEditable;

  if ($target.is('.dx-skip-gesture-event *, .dx-skip-gesture-event') && !isDropDown) {
    return true;
  }

  if (isDxMouseWheelEvent(e)) {
    var isTextArea = $target.is('textarea') && $target.hasClass('dx-texteditor-input');

    if (isTextArea || isContentEditable) {
      return false;
    }

    var isInputFocused = $target.is('input[type=\'number\'], textarea, select') && $target.is(':focus');
    return isInputFocused;
  }

  if (isMouseEvent(e)) {
    return touchInEditable || e.which > 1; // only left mouse button
  }

  if (isTouchEvent(e)) {
    return touchInEditable && (0, _selectors.focused)($target);
  }
};

exports.needSkipEvent = needSkipEvent;

var setEventFixMethod = function setEventFixMethod(func) {
  return fixMethod = func;
};

exports.setEventFixMethod = setEventFixMethod;

var createEvent = function createEvent(originalEvent, args) {
  var event = copyEvent(originalEvent);
  args && (0, _extend.extend)(event, args);
  return event;
};

exports.createEvent = createEvent;

var fireEvent = function fireEvent(props) {
  var originalEvent = props.originalEvent,
      delegateTarget = props.delegateTarget;
  var event = createEvent(originalEvent, props);

  _events_engine.default.trigger(delegateTarget || event.target, event);

  return event;
};

exports.fireEvent = fireEvent;

var normalizeKeyName = function normalizeKeyName(_ref4) {
  var key = _ref4.key,
      which = _ref4.which;
  var isKeySupported = !!key;
  key = isKeySupported ? key : which;

  if (key) {
    if (isKeySupported) {
      key = KEY_MAP[key.toLowerCase()] || key;
    } else {
      key = LEGACY_KEY_CODES[key] || String.fromCharCode(key);
    }

    return key;
  }
};

exports.normalizeKeyName = normalizeKeyName;

var getChar = function getChar(_ref5) {
  var key = _ref5.key,
      which = _ref5.which;
  return key || String.fromCharCode(which);
};

exports.getChar = getChar;
var addNamespace = _add_namespace.default;
exports.addNamespace = addNamespace;

var isCommandKeyPressed = function isCommandKeyPressed(_ref6) {
  var ctrlKey = _ref6.ctrlKey,
      metaKey = _ref6.metaKey;
  return ctrlKey || metaKey;
};

exports.isCommandKeyPressed = isCommandKeyPressed;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.getNavigator = exports.getCurrentScreenFactor = exports.defaultScreenFactorFunc = exports.hasProperty = exports.setWindow = exports.getWindow = exports.hasWindow = void 0;

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global window */
var hasWindowValue = typeof window !== 'undefined';

var hasWindow = function hasWindow() {
  return hasWindowValue;
};

exports.hasWindow = hasWindow;
var windowObject = hasWindow() ? window : undefined;

if (!windowObject) {
  windowObject = {};
  windowObject.window = windowObject;
}

var getWindow = function getWindow() {
  return windowObject;
};

exports.getWindow = getWindow;

var setWindow = function setWindow(newWindowObject, hasWindow) {
  if (hasWindow === undefined) {
    hasWindowValue = typeof window !== 'undefined' && window === newWindowObject;
  } else {
    hasWindowValue = hasWindow;
  }

  windowObject = newWindowObject;
};

exports.setWindow = setWindow;

var hasProperty = function hasProperty(prop) {
  return hasWindow() && prop in windowObject;
};

exports.hasProperty = hasProperty;

var defaultScreenFactorFunc = function defaultScreenFactorFunc(width) {
  if (width < 768) {
    return 'xs';
  } else if (width < 992) {
    return 'sm';
  } else if (width < 1200) {
    return 'md';
  } else {
    return 'lg';
  }
};

exports.defaultScreenFactorFunc = defaultScreenFactorFunc;

var getCurrentScreenFactor = function getCurrentScreenFactor(screenFactorCallback) {
  var screenFactorFunc = screenFactorCallback || defaultScreenFactorFunc;

  var windowWidth = _dom_adapter.default.getDocumentElement()['clientWidth'];

  return screenFactorFunc(windowWidth);
};

exports.getCurrentScreenFactor = getCurrentScreenFactor;

var getNavigator = function getNavigator() {
  return hasWindow() ? windowObject.navigator : {
    userAgent: ''
  };
};

exports.getNavigator = getNavigator;

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

var _common = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var DOCUMENT_NODE = 9;
var nativeDOMAdapterStrategy = {
  querySelectorAll: function querySelectorAll(element, selector) {
    return element.querySelectorAll(selector);
  },
  elementMatches: function elementMatches(element, selector) {
    var _this = this;

    var matches = element.matches || element.matchesSelector || element.mozMatchesSelector || element.msMatchesSelector || element.oMatchesSelector || element.webkitMatchesSelector || function (selector) {
      var doc = element.document || element.ownerDocument;

      if (!doc) {
        return false;
      }

      var items = _this.querySelectorAll(doc, selector);

      for (var i = 0; i < items.length; i++) {
        if (items[i] === element) {
          return true;
        }
      }
    };

    return matches.call(element, selector);
  },
  createElement: function createElement(tagName, context) {
    context = context || this._document;
    return context.createElement(tagName);
  },
  createElementNS: function createElementNS(ns, tagName, context) {
    context = context || this._document;
    return context.createElementNS(ns, tagName);
  },
  createTextNode: function createTextNode(text, context) {
    context = context || this._document;
    return context.createTextNode(text);
  },
  isNode: function isNode(element) {
    return element && _typeof(element) === 'object' && 'nodeType' in element && 'nodeName' in element;
  },
  isElementNode: function isElementNode(element) {
    return element && element.nodeType === ELEMENT_NODE;
  },
  isTextNode: function isTextNode(element) {
    return element && element.nodeType === TEXT_NODE;
  },
  isDocument: function isDocument(element) {
    return element && element.nodeType === DOCUMENT_NODE;
  },
  removeElement: function removeElement(element) {
    var parentNode = element && element.parentNode;

    if (parentNode) {
      parentNode.removeChild(element);
    }
  },
  insertElement: function insertElement(parentElement, newElement, nextSiblingElement) {
    if (parentElement && newElement && parentElement !== newElement) {
      if (nextSiblingElement) {
        parentElement.insertBefore(newElement, nextSiblingElement);
      } else {
        parentElement.appendChild(newElement);
      }
    }
  },
  getAttribute: function getAttribute(element, name) {
    return element.getAttribute(name);
  },
  setAttribute: function setAttribute(element, name, value) {
    element.setAttribute(name, value);
  },
  removeAttribute: function removeAttribute(element, name) {
    element.removeAttribute(name);
  },
  setProperty: function setProperty(element, name, value) {
    element[name] = value;
  },
  setText: function setText(element, text) {
    if (element) {
      element.textContent = text;
    }
  },
  setClass: function setClass(element, className, isAdd) {
    if (element.nodeType === 1 && className) {
      if (element.classList) {
        if (isAdd) {
          element.classList.add(className);
        } else {
          element.classList.remove(className);
        }
      } else {
        // IE9
        var classNameSupported = typeof element.className === 'string';
        var elementClass = classNameSupported ? element.className : this.getAttribute(element, 'class') || '';
        var classNames = elementClass.split(' ');
        var classIndex = classNames.indexOf(className);
        var resultClassName;

        if (isAdd && classIndex < 0) {
          resultClassName = elementClass ? elementClass + ' ' + className : className;
        }

        if (!isAdd && classIndex >= 0) {
          classNames.splice(classIndex, 1);
          resultClassName = classNames.join(' ');
        }

        if (resultClassName !== undefined) {
          if (classNameSupported) {
            element.className = resultClassName;
          } else {
            this.setAttribute(element, 'class', resultClassName);
          }
        }
      }
    }
  },
  setStyle: function setStyle(element, name, value) {
    element.style[name] = value || '';
  },
  _document: typeof document === 'undefined' ? undefined : document,
  getDocument: function getDocument() {
    return this._document;
  },
  getActiveElement: function getActiveElement() {
    return this._document.activeElement;
  },
  getBody: function getBody() {
    return this._document.body;
  },
  createDocumentFragment: function createDocumentFragment() {
    return this._document.createDocumentFragment();
  },
  getDocumentElement: function getDocumentElement() {
    return this._document.documentElement;
  },
  getLocation: function getLocation() {
    return this._document.location;
  },
  getSelection: function getSelection() {
    return this._document.selection;
  },
  getReadyState: function getReadyState() {
    return this._document.readyState;
  },
  getHead: function getHead() {
    return this._document.head;
  },
  hasDocumentProperty: function hasDocumentProperty(property) {
    return property in this._document;
  },
  listen: function listen(element, event, callback, options) {
    if (!element || !('addEventListener' in element)) {
      return _common.noop;
    }

    element.addEventListener(event, callback, options);
    return function () {
      element.removeEventListener(event, callback);
    };
  }
};

var _default = (0, _dependency_injector.default)(nativeDOMAdapterStrategy);

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.fromPromise = fromPromise;
exports.setStrategy = setStrategy;
exports.Deferred = Deferred;
exports.when = when;

var _type = __webpack_require__(1);

var _extend = __webpack_require__(2);

var _callbacks = _interopRequireDefault(__webpack_require__(15));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var deferredConfig = [{
  method: 'resolve',
  handler: 'done',
  state: 'resolved'
}, {
  method: 'reject',
  handler: 'fail',
  state: 'rejected'
}, {
  method: 'notify',
  handler: 'progress'
}];

var _DeferredObj = function DeferredObj() {
  var that = this;
  this._state = 'pending';
  this._promise = {};
  deferredConfig.forEach(function (config) {
    var methodName = config.method;
    this[methodName + 'Callbacks'] = new _callbacks.default();

    this[methodName] = function () {
      return this[methodName + 'With'](this._promise, arguments);
    }.bind(this);

    this._promise[config.handler] = function (handler) {
      if (!handler) return this;
      var callbacks = that[methodName + 'Callbacks'];

      if (callbacks.fired()) {
        handler.apply(that[methodName + 'Context'], that[methodName + 'Args']);
      } else {
        callbacks.add(function (context, args) {
          handler.apply(context, args);
        }.bind(this));
      }

      return this;
    };
  }.bind(this));

  this._promise.always = function (handler) {
    return this.done(handler).fail(handler);
  };

  this._promise.catch = function (handler) {
    return this.then(null, handler);
  };

  this._promise.then = function (resolve, reject) {
    var result = new _DeferredObj();
    ['done', 'fail'].forEach(function (method) {
      var callback = method === 'done' ? resolve : reject;
      this[method](function () {
        if (!callback) {
          result[method === 'done' ? 'resolve' : 'reject'].apply(this, arguments);
          return;
        }

        var callbackResult = callback && callback.apply(this, arguments);

        if ((0, _type.isDeferred)(callbackResult)) {
          callbackResult.done(result.resolve).fail(result.reject);
        } else if ((0, _type.isPromise)(callbackResult)) {
          callbackResult.then(result.resolve, result.reject);
        } else {
          result.resolve.apply(this, (0, _type.isDefined)(callbackResult) ? [callbackResult] : arguments);
        }
      });
    }.bind(this));
    return result.promise();
  };

  this._promise.state = function () {
    return that._state;
  };

  this._promise.promise = function (args) {
    return args ? (0, _extend.extend)(args, that._promise) : that._promise;
  };

  this._promise.promise(this);
};

deferredConfig.forEach(function (config) {
  var methodName = config.method;
  var state = config.state;

  _DeferredObj.prototype[methodName + 'With'] = function (context, args) {
    var callbacks = this[methodName + 'Callbacks'];

    if (this.state() === 'pending') {
      this[methodName + 'Args'] = args;
      this[methodName + 'Context'] = context;
      if (state) this._state = state;
      callbacks.fire(context, args);
    }

    return this;
  };
});

function fromPromise(promise, context) {
  if ((0, _type.isDeferred)(promise)) {
    return promise;
  } else if ((0, _type.isPromise)(promise)) {
    var d = new _DeferredObj();
    promise.then(function () {
      d.resolveWith.apply(d, [context].concat([[].slice.call(arguments)]));
    }, function () {
      d.rejectWith.apply(d, [context].concat([[].slice.call(arguments)]));
    });
    return d;
  }

  return new _DeferredObj().resolveWith(context, [promise]);
}

var whenFunc = function whenFunc() {
  if (arguments.length === 1) {
    return fromPromise(arguments[0]);
  }

  var values = [].slice.call(arguments);
  var contexts = [];
  var resolvedCount = 0;
  var deferred = new _DeferredObj();

  var updateState = function updateState(i) {
    return function (value) {
      contexts[i] = this;
      values[i] = arguments.length > 1 ? [].slice.call(arguments) : value;
      resolvedCount++;

      if (resolvedCount === values.length) {
        deferred.resolveWith(contexts, values);
      }
    };
  };

  for (var i = 0; i < values.length; i++) {
    if ((0, _type.isDeferred)(values[i])) {
      values[i].promise().done(updateState(i)).fail(deferred.reject);
    } else {
      resolvedCount++;
    }
  }

  if (resolvedCount === values.length) {
    deferred.resolveWith(contexts, values);
  }

  return deferred.promise();
};

function setStrategy(value) {
  _DeferredObj = value.Deferred;
  whenFunc = value.when;
}

function Deferred() {
  return new _DeferredObj();
}

function when() {
  return whenFunc.apply(this, arguments);
}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _window = __webpack_require__(7);

var _extend = __webpack_require__(2);

var _type = __webpack_require__(1);

var _iterator = __webpack_require__(4);

var _errors = _interopRequireDefault(__webpack_require__(13));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _resize_callbacks = _interopRequireDefault(__webpack_require__(94));

var _events_strategy = __webpack_require__(49);

var _storage = __webpack_require__(141);

var _view_port = __webpack_require__(50);

var _config = _interopRequireDefault(__webpack_require__(18));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var navigator = (0, _window.getNavigator)();
var window = (0, _window.getWindow)();
var KNOWN_UA_TABLE = {
  'iPhone': 'iPhone',
  'iPhone5': 'iPhone',
  'iPhone6': 'iPhone',
  'iPhone6plus': 'iPhone',
  'iPad': 'iPad',
  'iPadMini': 'iPad Mini',
  'androidPhone': 'Android Mobile',
  'androidTablet': 'Android',
  'msSurface': 'Windows ARM Tablet PC',
  'desktop': 'desktop'
};
var DEFAULT_DEVICE = {
  deviceType: 'desktop',
  platform: 'generic',
  version: [],
  phone: false,
  tablet: false,
  android: false,
  ios: false,
  generic: true,
  grade: 'A',
  // TODO: For internal use (draft, do not document these options!)
  mac: false
};
var uaParsers = {
  generic: function generic(userAgent) {
    var isPhone = /windows phone/i.test(userAgent) || userAgent.match(/WPDesktop/);
    var isTablet = !isPhone && /Windows(.*)arm(.*)Tablet PC/i.test(userAgent);
    var isDesktop = !isPhone && !isTablet && /msapphost/i.test(userAgent);
    var isMac = /((intel|ppc) mac os x)/.test(userAgent.toLowerCase());

    if (!(isPhone || isTablet || isDesktop || isMac)) {
      return;
    }

    return {
      deviceType: isPhone ? 'phone' : isTablet ? 'tablet' : 'desktop',
      platform: 'generic',
      version: [],
      grade: 'A',
      mac: isMac
    };
  },
  ios: function ios(userAgent) {
    if (!/ip(hone|od|ad)/i.test(userAgent)) {
      return;
    }

    var isPhone = /ip(hone|od)/i.test(userAgent);
    var matches = userAgent.match(/os (\d+)_(\d+)_?(\d+)?/i);
    var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2], 10), parseInt(matches[3] || 0, 10)] : [];
    var isIPhone4 = window.screen.height === 960 / 2;
    var grade = isIPhone4 ? 'B' : 'A';
    return {
      deviceType: isPhone ? 'phone' : 'tablet',
      platform: 'ios',
      version: version,
      grade: grade
    };
  },
  android: function android(userAgent) {
    if (!/android|htc_|silk/i.test(userAgent)) {
      return;
    }

    var isPhone = /mobile/i.test(userAgent);
    var matches = userAgent.match(/android (\d+)\.?(\d+)?\.?(\d+)?/i);
    var version = matches ? [parseInt(matches[1], 10), parseInt(matches[2] || 0, 10), parseInt(matches[3] || 0, 10)] : [];
    var worseThan4_4 = version.length > 1 && (version[0] < 4 || version[0] === 4 && version[1] < 4);
    var grade = worseThan4_4 ? 'B' : 'A';
    return {
      deviceType: isPhone ? 'phone' : 'tablet',
      platform: 'android',
      version: version,
      grade: grade
    };
  }
};

var Devices = /*#__PURE__*/function () {
  /**
  * @name DevicesObject.ctor
  * @publicName ctor(options)
  * @param1 options:object
  * @param1_field1 window:Window
  * @hidden
  */
  function Devices(options) {
    this._window = (options === null || options === void 0 ? void 0 : options.window) || window;
    this._realDevice = this._getDevice();
    this._currentDevice = undefined;
    this._currentOrientation = undefined;
    this._eventsStrategy = new _events_strategy.EventsStrategy(this);
    this.changed = (0, _callbacks.default)();

    if ((0, _window.hasWindow)()) {
      _ready_callbacks.default.add(this._recalculateOrientation.bind(this));

      _resize_callbacks.default.add(this._recalculateOrientation.bind(this));
    }
  }

  var _proto = Devices.prototype;

  _proto.current = function current(deviceOrName) {
    if (deviceOrName) {
      this._currentDevice = this._getDevice(deviceOrName);
      this._forced = true;
      this.changed.fire();
      return;
    }

    if (!this._currentDevice) {
      deviceOrName = undefined;

      try {
        deviceOrName = this._getDeviceOrNameFromWindowScope();
      } catch (e) {
        deviceOrName = this._getDeviceNameFromSessionStorage();
      } finally {
        if (!deviceOrName) {
          deviceOrName = this._getDeviceNameFromSessionStorage();
        }

        if (deviceOrName) {
          this._forced = true;
        }
      }

      this._currentDevice = this._getDevice(deviceOrName);
    }

    return this._currentDevice;
  };

  _proto.real = function real(forceDevice) {
    ///#DEBUG
    if ((0, _type.isPlainObject)(forceDevice)) {
      (0, _extend.extend)(this._realDevice, forceDevice);
      return;
    } ///#ENDDEBUG


    return (0, _extend.extend)({}, this._realDevice);
  };

  _proto.orientation = function orientation() {
    return this._currentOrientation;
  };

  _proto.isForced = function isForced() {
    return this._forced;
  };

  _proto.isRippleEmulator = function isRippleEmulator() {
    return !!this._window.tinyHippos;
  };

  _proto._getCssClasses = function _getCssClasses(device) {
    var result = [];
    var realDevice = this._realDevice;
    device = device || this.current(); // TODO: use real device here?

    if (device.deviceType) {
      result.push("dx-device-".concat(device.deviceType));

      if (device.deviceType !== 'desktop') {
        result.push('dx-device-mobile');
      }
    }

    result.push("dx-device-".concat(realDevice.platform));

    if (realDevice.version && realDevice.version.length) {
      result.push("dx-device-".concat(realDevice.platform, "-").concat(realDevice.version[0]));
    }

    if (this.isSimulator()) {
      result.push('dx-simulator');
    }

    if ((0, _config.default)().rtlEnabled) {
      result.push('dx-rtl');
    }

    return result;
  };

  _proto.attachCssClasses = function attachCssClasses(element, device) {
    this._deviceClasses = this._getCssClasses(device).join(' ');
    (0, _renderer.default)(element).addClass(this._deviceClasses);
  };

  _proto.detachCssClasses = function detachCssClasses(element) {
    (0, _renderer.default)(element).removeClass(this._deviceClasses);
  };

  _proto.isSimulator = function isSimulator() {
    // NOTE: error may happen due to same-origin policy
    try {
      return this._isSimulator || (0, _window.hasWindow)() && this._window.top !== this._window.self && this._window.top['dx-force-device'] || this.isRippleEmulator();
    } catch (e) {
      return false;
    }
  };

  _proto.forceSimulator = function forceSimulator() {
    this._isSimulator = true;
  };

  _proto._getDevice = function _getDevice(deviceName) {
    if (deviceName === 'genericPhone') {
      deviceName = {
        deviceType: 'phone',
        platform: 'generic',
        generic: true
      };
    }

    if ((0, _type.isPlainObject)(deviceName)) {
      return this._fromConfig(deviceName);
    } else {
      var ua;

      if (deviceName) {
        ua = KNOWN_UA_TABLE[deviceName];

        if (!ua) {
          throw _errors.default.Error('E0005');
        }
      } else {
        ua = navigator.userAgent;
      }

      return this._fromUA(ua);
    }
  };

  _proto._getDeviceOrNameFromWindowScope = function _getDeviceOrNameFromWindowScope() {
    var result;

    if ((0, _window.hasWindow)() && (this._window.top['dx-force-device-object'] || this._window.top['dx-force-device'])) {
      result = this._window.top['dx-force-device-object'] || this._window.top['dx-force-device'];
    }

    return result;
  };

  _proto._getDeviceNameFromSessionStorage = function _getDeviceNameFromSessionStorage() {
    var sessionStorage = (0, _storage.sessionStorage)();

    if (!sessionStorage) {
      return;
    }

    var deviceOrName = sessionStorage.getItem('dx-force-device');

    try {
      return JSON.parse(deviceOrName);
    } catch (ex) {
      return deviceOrName;
    }
  };

  _proto._fromConfig = function _fromConfig(config) {
    var result = (0, _extend.extend)({}, DEFAULT_DEVICE, this._currentDevice, config);
    var shortcuts = {
      phone: result.deviceType === 'phone',
      tablet: result.deviceType === 'tablet',
      android: result.platform === 'android',
      ios: result.platform === 'ios',
      generic: result.platform === 'generic'
    };
    return (0, _extend.extend)(result, shortcuts);
  };

  _proto._fromUA = function _fromUA(ua) {
    var config;
    (0, _iterator.each)(uaParsers, function (platform, parser) {
      config = parser(ua);
      return !config;
    });

    if (config) {
      return this._fromConfig(config);
    }

    return DEFAULT_DEVICE;
  };

  _proto._changeOrientation = function _changeOrientation() {
    var $window = (0, _renderer.default)(this._window);
    var orientation = $window.height() > $window.width() ? 'portrait' : 'landscape';

    if (this._currentOrientation === orientation) {
      return;
    }

    this._currentOrientation = orientation;

    this._eventsStrategy.fireEvent('orientationChanged', [{
      orientation: orientation
    }]);
  };

  _proto._recalculateOrientation = function _recalculateOrientation() {
    var windowWidth = (0, _renderer.default)(this._window).width();

    if (this._currentWidth === windowWidth) {
      return;
    }

    this._currentWidth = windowWidth;

    this._changeOrientation();
  };

  _proto.on = function on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);

    return this;
  };

  _proto.off = function off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);

    return this;
  };

  return Devices;
}();

var devices = new Devices();
var viewPortElement = (0, _view_port.value)();

if (viewPortElement) {
  devices.attachCssClasses(viewPortElement);
}

_view_port.changeCallback.add(function (viewPort, prevViewport) {
  devices.detachCssClasses(prevViewport);
  devices.attachCssClasses(viewPort);
}); ///#DEBUG


devices.Devices = Devices; ///#ENDDEBUG

var _default = devices;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _errors = _interopRequireDefault(__webpack_require__(13));

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var wrapOverridden = function wrapOverridden(baseProto, methodName, method) {
  return function () {
    var prevCallBase = this.callBase;
    this.callBase = baseProto[methodName];

    try {
      return method.apply(this, arguments);
    } finally {
      this.callBase = prevCallBase;
    }
  };
};

var clonePrototype = function clonePrototype(obj) {
  var func = function func() {};

  func.prototype = obj.prototype;
  return new func();
};

var redefine = function redefine(members) {
  var that = this;
  var overridden;
  var memberName;
  var member;

  if (!members) {
    return that;
  }

  for (memberName in members) {
    member = members[memberName];
    overridden = typeof that.prototype[memberName] === 'function' && typeof member === 'function';
    that.prototype[memberName] = overridden ? wrapOverridden(that.parent.prototype, memberName, member) : member;
  }

  return that;
};

var include = function include() {
  var classObj = this;
  var argument;
  var name;
  var i; // NOTE: For ES6 classes. They don't have _includedCtors/_includedPostCtors
  // properties and get them from the ancestor class.

  var hasClassObjOwnProperty = Object.prototype.hasOwnProperty.bind(classObj);
  var isES6Class = !hasClassObjOwnProperty('_includedCtors') && !hasClassObjOwnProperty('_includedPostCtors');

  if (isES6Class) {
    classObj._includedCtors = classObj._includedCtors.slice(0);
    classObj._includedPostCtors = classObj._includedPostCtors.slice(0);
  }

  for (i = 0; i < arguments.length; i++) {
    argument = arguments[i];

    if (argument.ctor) {
      classObj._includedCtors.push(argument.ctor);
    }

    if (argument.postCtor) {
      classObj._includedPostCtors.push(argument.postCtor);
    }

    for (name in argument) {
      if (name === 'ctor' || name === 'postCtor' || name === 'default') {
        continue;
      } ///#DEBUG


      if (name in classObj.prototype) {
        throw _errors.default.Error('E0002', name);
      } ///#ENDDEBUG


      classObj.prototype[name] = argument[name];
    }
  }

  return classObj;
};

var subclassOf = function subclassOf(parentClass) {
  var hasParentProperty = Object.prototype.hasOwnProperty.bind(this)('parent');
  var isES6Class = !hasParentProperty && this.parent;

  if (isES6Class) {
    var baseClass = Object.getPrototypeOf(this);
    return baseClass === parentClass || baseClass.subclassOf(parentClass);
  } else {
    if (this.parent === parentClass) {
      return true;
    }

    if (!this.parent || !this.parent.subclassOf) {
      return false;
    }

    return this.parent.subclassOf(parentClass);
  }
};

var abstract = function abstract() {
  throw _errors.default.Error('E0001');
};

var copyStatic = function () {
  var hasOwn = Object.prototype.hasOwnProperty;
  return function (source, destination) {
    for (var key in source) {
      if (!hasOwn.call(source, key)) {
        return;
      }

      destination[key] = source[key];
    }
  };
}();

var classImpl = function classImpl() {};

classImpl.inherit = function (members) {
  var inheritor = function inheritor() {
    if (!this || (0, _type.isWindow)(this) || typeof this.constructor !== 'function') {
      throw _errors.default.Error('E0003');
    }

    var instance = this;
    var ctor = instance.ctor;
    var includedCtors = instance.constructor._includedCtors;
    var includedPostCtors = instance.constructor._includedPostCtors;
    var i;

    for (i = 0; i < includedCtors.length; i++) {
      includedCtors[i].call(instance);
    }

    if (ctor) {
      ctor.apply(instance, arguments);
    }

    for (i = 0; i < includedPostCtors.length; i++) {
      includedPostCtors[i].call(instance);
    }
  };

  inheritor.prototype = clonePrototype(this);
  copyStatic(this, inheritor);
  inheritor.inherit = this.inherit;
  inheritor.abstract = abstract;
  inheritor.redefine = redefine;
  inheritor.include = include;
  inheritor.subclassOf = subclassOf;
  inheritor.parent = this;
  inheritor._includedCtors = this._includedCtors ? this._includedCtors.slice(0) : [];
  inheritor._includedPostCtors = this._includedPostCtors ? this._includedPostCtors.slice(0) : [];
  inheritor.prototype.constructor = inheritor;
  inheritor.redefine(members);
  return inheritor;
};

classImpl.abstract = abstract;
var _default = classImpl;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.groupBy = exports.find = exports.merge = exports.normalizeIndexes = exports.removeDuplicates = exports.uniqueValues = exports.intersection = exports.inArray = exports.wrapToArray = exports.isEmpty = void 0;

var _type = __webpack_require__(1);

var _iterator = __webpack_require__(4);

var _object = __webpack_require__(70);

var _config = _interopRequireDefault(__webpack_require__(18));

var _browser = _interopRequireDefault(__webpack_require__(19));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var isIE11 = _browser.default.msie && parseInt(_browser.default.version) <= 11;

var isEmpty = function isEmpty(entity) {
  return Array.isArray(entity) && !entity.length;
};

exports.isEmpty = isEmpty;

var wrapToArray = function wrapToArray(entity) {
  return Array.isArray(entity) ? entity : [entity];
};

exports.wrapToArray = wrapToArray;

var inArray = function inArray(value, object) {
  if (!object) {
    return -1;
  }

  var array = Array.isArray(object) ? object : object.toArray();
  return array.indexOf(value);
};

exports.inArray = inArray;

var intersection = function intersection(a, b) {
  if (!Array.isArray(a) || a.length === 0 || !Array.isArray(b) || b.length === 0) {
    return [];
  }

  var result = [];
  (0, _iterator.each)(a, function (_, value) {
    var index = inArray(value, b);

    if (index !== -1) {
      result.push(value);
    }
  });
  return result;
};

exports.intersection = intersection;

var uniqueValues = function uniqueValues(data) {
  if (isIE11) {
    return data.filter(function (item, position) {
      return data.indexOf(item) === position;
    });
  }

  return _toConsumableArray(new Set(data));
};

exports.uniqueValues = uniqueValues;

var removeDuplicates = function removeDuplicates(from, what) {
  if (!Array.isArray(from) || from.length === 0) {
    return [];
  }

  var result = from.slice();

  if (!Array.isArray(what) || what.length === 0) {
    return result;
  }

  (0, _iterator.each)(what, function (_, value) {
    var index = inArray(value, result);
    result.splice(index, 1);
  });
  return result;
};

exports.removeDuplicates = removeDuplicates;

var normalizeIndexes = function normalizeIndexes(items, indexParameterName, currentItem, needIndexCallback) {
  var indexedItems = {};
  var parameterIndex = 0;
  var useLegacyVisibleIndex = (0, _config.default)().useLegacyVisibleIndex;
  (0, _iterator.each)(items, function (index, item) {
    index = item[indexParameterName];

    if (index >= 0) {
      indexedItems[index] = indexedItems[index] || [];

      if (item === currentItem) {
        indexedItems[index].unshift(item);
      } else {
        indexedItems[index].push(item);
      }
    } else {
      item[indexParameterName] = undefined;
    }
  });

  if (!useLegacyVisibleIndex) {
    (0, _iterator.each)(items, function () {
      if (!(0, _type.isDefined)(this[indexParameterName]) && (!needIndexCallback || needIndexCallback(this))) {
        while (indexedItems[parameterIndex]) {
          parameterIndex++;
        }

        indexedItems[parameterIndex] = [this];
        parameterIndex++;
      }
    });
  }

  parameterIndex = 0;
  (0, _object.orderEach)(indexedItems, function (index, items) {
    (0, _iterator.each)(items, function () {
      if (index >= 0) {
        this[indexParameterName] = parameterIndex++;
      }
    });
  });

  if (useLegacyVisibleIndex) {
    (0, _iterator.each)(items, function () {
      if (!(0, _type.isDefined)(this[indexParameterName]) && (!needIndexCallback || needIndexCallback(this))) {
        this[indexParameterName] = parameterIndex++;
      }
    });
  }

  return parameterIndex;
};

exports.normalizeIndexes = normalizeIndexes;

var merge = function merge(array1, array2) {
  for (var i = 0; i < array2.length; i++) {
    array1[array1.length] = array2[i];
  }

  return array1;
};

exports.merge = merge;

var find = function find(array, condition) {
  for (var i = 0; i < array.length; i++) {
    if (condition(array[i])) {
      return array[i];
    }
  }
};

exports.find = find;

var groupBy = function groupBy(array, cb) {
  return array.reduce(function (result, item) {
    return _extends({}, result, _defineProperty({}, cb(item), [].concat(_toConsumableArray(result[cb(item)] || []), [item])));
  }, {});
};

exports.groupBy = groupBy;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _error = _interopRequireDefault(__webpack_require__(71));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @docid
* @name ErrorsCore
*/
var _default = (0, _error.default)({
  /**
  * @name ErrorsCore.E0001
  */
  E0001: 'Method is not implemented',

  /**
  * @name ErrorsCore.E0002
  */
  E0002: 'Member name collision: {0}',

  /**
  * @name ErrorsCore.E0003
  */
  E0003: 'A class must be instantiated using the \'new\' keyword',

  /**
  * @name ErrorsCore.E0004
  */
  E0004: 'The NAME property of the component is not specified',

  /**
  * @name ErrorsCore.E0005
  */
  E0005: 'Unknown device',

  /**
  * @name ErrorsCore.E0006
  */
  E0006: 'Unknown endpoint key is requested',

  /**
  * @name ErrorsCore.E0007
  */
  E0007: '\'Invalidate\' method is called outside the update transaction',

  /**
  * @name ErrorsCore.E0008
  */
  E0008: 'Type of the option name is not appropriate to create an action',

  /**
  * @name ErrorsCore.E0009
  */
  E0009: 'Component \'{0}\' has not been initialized for an element',

  /**
  * @name ErrorsCore.E0010
  */
  E0010: 'Animation configuration with the \'{0}\' type requires \'{1}\' configuration as {2}',

  /**
  * @name ErrorsCore.E0011
  */
  E0011: 'Unknown animation type \'{0}\'',

  /**
  * @name ErrorsCore.E0012
  */
  E0012: 'jQuery version is too old. Please upgrade jQuery to 1.10.0 or later',

  /**
  * @name ErrorsCore.E0013
  */
  E0013: 'KnockoutJS version is too old. Please upgrade KnockoutJS to 2.3.0 or later',

  /**
  * @name ErrorsCore.E0014
  */
  E0014: 'The \'release\' method shouldn\'t be called for an unlocked Lock object',

  /**
  * @name ErrorsCore.E0015
  */
  E0015: 'Queued task returned an unexpected result',

  /**
  * @name ErrorsCore.E0017
  */
  E0017: 'Event namespace is not defined',

  /**
  * @name ErrorsCore.E0018
  */
  E0018: 'DevExpress.ui.DevExpressPopup widget is required',

  /**
  * @name ErrorsCore.E0020
  */
  E0020: 'Template engine \'{0}\' is not supported',

  /**
  * @name ErrorsCore.E0021
  */
  E0021: 'Unknown theme is set: {0}',

  /**
  * @name ErrorsCore.E0022
  */
  E0022: 'LINK[rel=DevExpress-theme] tags must go before DevExpress included scripts',

  /**
  * @name ErrorsCore.E0023
  */
  E0023: 'Template name is not specified',

  /**
  * @name ErrorsCore.E0024
  */
  E0024: 'DevExtreme bundle already included',

  /**
  * @name ErrorsCore.E0025
  */
  E0025: 'Unexpected argument type',

  /**
  * @name ErrorsCore.E0100
  */
  E0100: 'Unknown validation type is detected',

  /**
  * @name ErrorsCore.E0101
  */
  E0101: 'Misconfigured range validation rule is detected',

  /**
  * @name ErrorsCore.E0102
  */
  E0102: 'Misconfigured comparison validation rule is detected',

  /**
  * @name ErrorsCore.E0103
  */
  E0103: 'validationCallback of an asynchronous rule should return a jQuery or a native promise',

  /**
  * @name ErrorsCore.E0110
  */
  E0110: 'Unknown validation group is detected',

  /**
  * @name ErrorsCore.E0120
  */
  E0120: 'Adapter for a DevExpressValidator component cannot be configured',

  /**
  * @name ErrorsCore.E0121
  */
  E0121: 'The \'customItem\' field of the \'onCustomItemCreating\' function\'s parameter should contain a custom item or Promise that is resolved after the item is created.',

  /**
  * @name ErrorsCore.W0000
  */
  W0000: '\'{0}\' is deprecated in {1}. {2}',

  /**
  * @name ErrorsCore.W0001
  */
  W0001: '{0} - \'{1}\' option is deprecated in {2}. {3}',

  /**
  * @name ErrorsCore.W0002
  */
  W0002: '{0} - \'{1}\' method is deprecated in {2}. {3}',

  /**
  * @name ErrorsCore.W0003
  */
  W0003: '{0} - \'{1}\' property is deprecated in {2}. {3}',

  /**
  * @name ErrorsCore.W0004
  */
  W0004: 'Timeout for theme loading is over: {0}',

  /**
  * @name ErrorsCore.W0005
  */
  W0005: '\'{0}\' event is deprecated in {1}. {2}',

  /**
  * @name ErrorsCore.W0006
  */
  W0006: 'Invalid recurrence rule: \'{0}\'',

  /**
  * @name ErrorsCore.W0007
  */
  W0007: '\'{0}\' Globalize culture is not defined',

  /**
  * @name ErrorsCore.W0008
  */
  W0008: 'Invalid view name: \'{0}\'',

  /**
  * @name ErrorsCore.W0009
  */
  W0009: 'Invalid time zone name: \'{0}\'',

  /**
  * @name ErrorsCore.W0010
  */
  W0010: '{0} is deprecated in {1}. {2}',

  /**
  * @name ErrorsCore.W0011
  */
  W0011: 'Number parsing is invoked while the parser is not defined',

  /**
  * @name ErrorsCore.W0012
  */
  W0012: 'Date parsing is invoked while the parser is not defined',

  /**
  * @name ErrorsCore.W0013
  */
  W0013: '\'{0}\' file is deprecated in {1}. {2}',

  /**
  * @name ErrorsCore.W0014
  */
  W0014: '{0} - \'{1}\' type is deprecated in {2}. {3}',

  /**
  * @name ErrorsCore.W0015
  */
  W0015: 'Instead of returning a value from the \'{0}\' function, write it into the \'{1}\' field of the function\'s parameter.',

  /**
  * @name ErrorsCore.W0016
  */
  W0016: 'The "{0}" option does not accept the "{1}" value since v.{2}. {3}.'
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _component_registrator_callbacks = _interopRequireDefault(__webpack_require__(146));

var _errors = _interopRequireDefault(__webpack_require__(13));

var _public_component = __webpack_require__(60);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var registerComponent = function registerComponent(name, namespace, componentClass) {
  if (!componentClass) {
    componentClass = namespace;
  } else {
    namespace[name] = componentClass;
  }

  (0, _public_component.name)(componentClass, name);

  _component_registrator_callbacks.default.fire(name, componentClass);
};

var registerRendererComponent = function registerRendererComponent(name, componentClass) {
  _renderer.default.fn[name] = function (options) {
    var isMemberInvoke = typeof options === 'string';
    var result;

    if (isMemberInvoke) {
      var memberName = options;
      var memberArgs = [].slice.call(arguments).slice(1);
      this.each(function () {
        var instance = componentClass.getInstance(this);

        if (!instance) {
          throw _errors.default.Error('E0009', name);
        }

        var member = instance[memberName];
        var memberValue = member.apply(instance, memberArgs);

        if (result === undefined) {
          result = memberValue;
        }
      });
    } else {
      this.each(function () {
        var instance = componentClass.getInstance(this);

        if (instance) {
          instance.option(options);
        } else {
          new componentClass(this, options);
        }
      });
      result = this;
    }

    return result;
  };
};

_component_registrator_callbacks.default.add(registerRendererComponent);

var _default = registerComponent;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var Callback = function Callback(options) {
  this._options = options || {};
  this._list = [];
  this._queue = [];
  this._firing = false;
  this._fired = false;
  this._firingIndexes = [];
};

Callback.prototype._fireCore = function (context, args) {
  var firingIndexes = this._firingIndexes;
  var list = this._list;
  var stopOnFalse = this._options.stopOnFalse;
  var step = firingIndexes.length;

  for (firingIndexes[step] = 0; firingIndexes[step] < list.length; firingIndexes[step]++) {
    var result = list[firingIndexes[step]].apply(context, args);

    if (result === false && stopOnFalse) {
      break;
    }
  }

  firingIndexes.pop();
};

Callback.prototype.add = function (fn) {
  if (typeof fn === 'function' && (!this._options.unique || !this.has(fn))) {
    this._list.push(fn);
  }

  return this;
};

Callback.prototype.remove = function (fn) {
  var list = this._list;
  var firingIndexes = this._firingIndexes;
  var index = list.indexOf(fn);

  if (index > -1) {
    list.splice(index, 1);

    if (this._firing && firingIndexes.length) {
      for (var step = 0; step < firingIndexes.length; step++) {
        if (index <= firingIndexes[step]) {
          firingIndexes[step]--;
        }
      }
    }
  }

  return this;
};

Callback.prototype.has = function (fn) {
  var list = this._list;
  return fn ? list.indexOf(fn) > -1 : !!list.length;
};

Callback.prototype.empty = function (fn) {
  this._list = [];
  return this;
};

Callback.prototype.fireWith = function (context, args) {
  var queue = this._queue;
  args = args || [];
  args = args.slice ? args.slice() : args;

  if (this._options.syncStrategy) {
    this._firing = true;

    this._fireCore(context, args);
  } else {
    queue.push([context, args]);

    if (this._firing) {
      return;
    }

    this._firing = true;

    while (queue.length) {
      var memory = queue.shift();

      this._fireCore(memory[0], memory[1]);
    }
  }

  this._firing = false;
  this._fired = true;
  return this;
};

Callback.prototype.fire = function () {
  this.fireWith(this, arguments);
};

Callback.prototype.fired = function () {
  return this._fired;
};

var Callbacks = function Callbacks(options) {
  return new Callback(options);
};

var _default = Callbacks;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.parseTranslate = exports.resetPosition = exports.move = exports.getTranslate = exports.getTranslateCss = exports.clearCache = exports.locate = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _element_data = __webpack_require__(25);

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TRANSLATOR_DATA_KEY = 'dxTranslator';
var TRANSFORM_MATRIX_REGEX = /matrix(3d)?\((.+?)\)/;
var TRANSLATE_REGEX = /translate(?:3d)?\((.+?)\)/;

var locate = function locate($element) {
  $element = (0, _renderer.default)($element);
  var translate = getTranslate($element);
  return {
    left: translate.x,
    top: translate.y
  };
};

exports.locate = locate;

function isPercentValue(value) {
  return (0, _type.type)(value) === 'string' && value[value.length - 1] === '%';
}

function cacheTranslate($element, translate) {
  if ($element.length) {
    (0, _element_data.data)($element.get(0), TRANSLATOR_DATA_KEY, translate);
  }
}

var clearCache = function clearCache($element) {
  if ($element.length) {
    (0, _element_data.removeData)($element.get(0), TRANSLATOR_DATA_KEY);
  }
};

exports.clearCache = clearCache;

var getTranslateCss = function getTranslateCss(translate) {
  translate.x = translate.x || 0;
  translate.y = translate.y || 0;
  var xValueString = isPercentValue(translate.x) ? translate.x : translate.x + 'px';
  var yValueString = isPercentValue(translate.y) ? translate.y : translate.y + 'px';
  return 'translate(' + xValueString + ', ' + yValueString + ')';
};

exports.getTranslateCss = getTranslateCss;

var getTranslate = function getTranslate($element) {
  var result = $element.length ? (0, _element_data.data)($element.get(0), TRANSLATOR_DATA_KEY) : null;

  if (!result) {
    var transformValue = $element.css('transform') || getTranslateCss({
      x: 0,
      y: 0
    });
    var matrix = transformValue.match(TRANSFORM_MATRIX_REGEX);
    var is3D = matrix && matrix[1];

    if (matrix) {
      matrix = matrix[2].split(',');

      if (is3D === '3d') {
        matrix = matrix.slice(12, 15);
      } else {
        matrix.push(0);
        matrix = matrix.slice(4, 7);
      }
    } else {
      matrix = [0, 0, 0];
    }

    result = {
      x: parseFloat(matrix[0]),
      y: parseFloat(matrix[1]),
      z: parseFloat(matrix[2])
    };
    cacheTranslate($element, result);
  }

  return result;
};

exports.getTranslate = getTranslate;

var move = function move($element, position) {
  $element = (0, _renderer.default)($element);
  var left = position.left;
  var top = position.top;
  var translate;

  if (left === undefined) {
    translate = getTranslate($element);
    translate.y = top || 0;
  } else if (top === undefined) {
    translate = getTranslate($element);
    translate.x = left || 0;
  } else {
    translate = {
      x: left || 0,
      y: top || 0,
      z: 0
    };
    cacheTranslate($element, translate);
  }

  $element.css({
    transform: getTranslateCss(translate)
  });

  if (isPercentValue(left) || isPercentValue(top)) {
    clearCache($element);
  }
};

exports.move = move;

var resetPosition = function resetPosition($element, finishTransition) {
  $element = (0, _renderer.default)($element);
  var originalTransition;
  var stylesConfig = {
    left: 0,
    top: 0,
    transform: 'none'
  };

  if (finishTransition) {
    originalTransition = $element.css('transition');
    stylesConfig.transition = 'none';
  }

  $element.css(stylesConfig);
  clearCache($element);

  if (finishTransition) {
    $element.get(0).offsetHeight;
    $element.css('transition', originalTransition);
  }
};

exports.resetPosition = resetPosition;

var parseTranslate = function parseTranslate(translateString) {
  var result = translateString.match(TRANSLATE_REGEX);

  if (!result || !result[1]) {
    return;
  }

  result = result[1].split(',');
  result = {
    x: parseFloat(result[0]),
    y: parseFloat(result[1]),
    z: parseFloat(result[2])
  };
  return result;
};

exports.parseTranslate = parseTranslate;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _string = __webpack_require__(46);

var _inflector = __webpack_require__(47);

var _core = _interopRequireDefault(__webpack_require__(91));

var _default_messages = __webpack_require__(138);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var baseDictionary = (0, _extend.extend)(true, {}, _default_messages.defaultMessages);

var getDataByLocale = function getDataByLocale(localeData, locale) {
  return localeData[locale] || {};
};

var newMessages = {};
var messageLocalization = (0, _dependency_injector.default)({
  engine: function engine() {
    return 'base';
  },
  _dictionary: baseDictionary,
  load: function load(messages) {
    (0, _extend.extend)(true, this._dictionary, messages);
  },
  _localizablePrefix: '@',
  setup: function setup(localizablePrefix) {
    this._localizablePrefix = localizablePrefix;
  },
  localizeString: function localizeString(text) {
    var that = this;
    var regex = new RegExp('(^|[^a-zA-Z_0-9' + that._localizablePrefix + '-]+)(' + that._localizablePrefix + '{1,2})([a-zA-Z_0-9-]+)', 'g');
    var escapeString = that._localizablePrefix + that._localizablePrefix;
    return text.replace(regex, function (str, prefix, escape, localizationKey) {
      var defaultResult = that._localizablePrefix + localizationKey;
      var result;

      if (escape !== escapeString) {
        result = that.format(localizationKey);
      }

      if (!result) {
        newMessages[localizationKey] = (0, _inflector.humanize)(localizationKey);
      }

      return prefix + (result || defaultResult);
    });
  },
  localizeNode: function localizeNode(node) {
    var that = this;
    (0, _renderer.default)(node).each(function (index, nodeItem) {
      if (!nodeItem.nodeType) {
        return;
      }

      if (nodeItem.nodeType === 3) {
        nodeItem.nodeValue = that.localizeString(nodeItem.nodeValue);
      } else {
        if (!(0, _renderer.default)(nodeItem).is('iframe')) {
          // T199912
          (0, _iterator.each)(nodeItem.attributes || [], function (index, attr) {
            if (typeof attr.value === 'string') {
              var localizedValue = that.localizeString(attr.value);

              if (attr.value !== localizedValue) {
                attr.value = localizedValue;
              }
            }
          });
          (0, _renderer.default)(nodeItem).contents().each(function (index, node) {
            that.localizeNode(node);
          });
        }
      }
    });
  },
  getMessagesByLocales: function getMessagesByLocales() {
    return this._dictionary;
  },
  getDictionary: function getDictionary(onlyNew) {
    if (onlyNew) {
      return newMessages;
    }

    return (0, _extend.extend)({}, newMessages, this.getMessagesByLocales()[_core.default.locale()]);
  },
  getFormatter: function getFormatter(key) {
    return this._getFormatterBase(key) || this._getFormatterBase(key, 'en');
  },
  _getFormatterBase: function _getFormatterBase(key, locale) {
    var _this = this;

    var message = _core.default.getValueByClosestLocale(function (locale) {
      return getDataByLocale(_this._dictionary, locale)[key];
    });

    if (message) {
      return function () {
        var args = arguments.length === 1 && Array.isArray(arguments[0]) ? arguments[0].slice(0) : Array.prototype.slice.call(arguments, 0);
        args.unshift(message);
        return _string.format.apply(this, args);
      };
    }
  },
  format: function format(key) {
    var formatter = this.getFormatter(key);
    var values = Array.prototype.slice.call(arguments, 1);
    return formatter && formatter.apply(this, values) || '';
  }
});
var _default = messageLocalization;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _extend = __webpack_require__(2);

var _errors = _interopRequireDefault(__webpack_require__(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* global DevExpress */
var config = {
  rtlEnabled: false,
  defaultCurrency: 'USD',
  oDataFilterToLower: true,
  serverDecimalSeparator: '.',
  decimalSeparator: '.',
  thousandsSeparator: ',',
  forceIsoDateParsing: true,
  wrapActionsBeforeExecute: true,
  useLegacyStoreResult: false,

  /**
  * @name globalConfig.useJQuery
  * @type boolean
  * @hidden
  */
  useJQuery: undefined,
  editorStylingMode: undefined,
  useLegacyVisibleIndex: false,
  floatingActionButtonConfig: {
    icon: 'add',
    closeIcon: 'close',
    label: '',
    position: {
      at: 'right bottom',
      my: 'right bottom',
      offset: {
        x: -16,
        y: -16
      }
    },
    maxSpeedDialActionCount: 5,
    shading: false,
    direction: 'auto'
  },
  optionsParser: function optionsParser(optionsString) {
    if (optionsString.trim().charAt(0) !== '{') {
      optionsString = '{' + optionsString + '}';
    }

    try {
      // eslint-disable-next-line no-new-func
      return new Function('return ' + optionsString)();
    } catch (ex) {
      throw _errors.default.Error('E3018', ex, optionsString);
    }
  }
};
var deprecatedFields = ['decimalSeparator', 'thousandsSeparator'];

var configMethod = function configMethod() {
  if (!arguments.length) {
    return config;
  }

  var newConfig = arguments.length <= 0 ? undefined : arguments[0];
  deprecatedFields.forEach(function (deprecatedField) {
    if (newConfig[deprecatedField]) {
      var message = "Now, the ".concat(deprecatedField, " is selected based on the specified locale.");

      _errors.default.log('W0003', 'config', deprecatedField, '19.2', message);
    }
  });
  (0, _extend.extend)(config, newConfig);
};

if (typeof DevExpress !== 'undefined' && DevExpress.config) {
  configMethod(DevExpress.config);
}

var _default = configMethod;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _extend = __webpack_require__(2);

var _window = __webpack_require__(7);

var navigator = (0, _window.getNavigator)();
var webkitRegExp = /(webkit)[ /]([\w.]+)/;
var ieRegExp = /(msie) (\d{1,2}\.\d)/;
var ie11RegExp = /(trident).*rv:(\d{1,2}\.\d)/;
var msEdge = /(edge)\/((\d+)?[\w.]+)/;
var mozillaRegExp = /(mozilla)(?:.*? rv:([\w.]+))/;

var browserFromUA = function browserFromUA(ua) {
  ua = ua.toLowerCase();
  var result = {};
  var matches = ieRegExp.exec(ua) || ie11RegExp.exec(ua) || msEdge.exec(ua) || ua.indexOf('compatible') < 0 && mozillaRegExp.exec(ua) || webkitRegExp.exec(ua) || [];
  var browserName = matches[1];
  var browserVersion = matches[2];

  if (browserName === 'webkit') {
    result['webkit'] = true;

    if (ua.indexOf('chrome') >= 0 || ua.indexOf('crios') >= 0) {
      browserName = 'chrome';
      browserVersion = /(?:chrome|crios)\/(\d+\.\d+)/.exec(ua);
      browserVersion = browserVersion && browserVersion[1];
    } else if (ua.indexOf('fxios') >= 0) {
      browserName = 'mozilla';
      browserVersion = /fxios\/(\d+\.\d+)/.exec(ua);
      browserVersion = browserVersion && browserVersion[1];
    } else if (ua.indexOf('safari') >= 0 && /version|phantomjs/.test(ua)) {
      browserName = 'safari';
      browserVersion = /(?:version|phantomjs)\/([0-9.]+)/.exec(ua);
      browserVersion = browserVersion && browserVersion[1];
    } else {
      browserName = 'unknown';
      browserVersion = /applewebkit\/([0-9.]+)/.exec(ua);
      browserVersion = browserVersion && browserVersion[1];
    }
  }

  if (browserName === 'trident' || browserName === 'edge') {
    browserName = 'msie';
  }

  if (browserName) {
    result[browserName] = true;
    result.version = browserVersion;
  }

  return result;
};

var _default = (0, _extend.extend)({
  _fromUA: browserFromUA
}, browserFromUA(navigator.userAgent));

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.getPublicElement = getPublicElement;
exports.setPublicElementWrapper = setPublicElementWrapper;

var strategy = function strategy(element) {
  return element && element.get(0);
};

function getPublicElement(element) {
  return strategy(element);
}

function setPublicElementWrapper(newStrategy) {
  strategy = newStrategy;
}

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.createTextElementHiddenCopy = exports.contains = exports.clipboardText = exports.normalizeTemplateElement = exports.extractTemplateMarkup = exports.closestCommonParent = exports.clearSelection = exports.resetActiveElement = void 0;

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _type = __webpack_require__(1);

var _window = __webpack_require__(7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)();

var resetActiveElement = function resetActiveElement() {
  var activeElement = _dom_adapter.default.getActiveElement();

  var body = _dom_adapter.default.getBody(); // TODO: remove this hack after msie 11 support stopped


  if (activeElement && activeElement !== body && activeElement.blur) {
    try {
      activeElement.blur();
    } catch (e) {
      body.blur();
    }
  }
};

exports.resetActiveElement = resetActiveElement;

var clearSelection = function clearSelection() {
  var selection = window.getSelection();
  if (!selection) return;
  if (selection.type === 'Caret') return;

  if (selection.empty) {
    selection.empty();
  } else if (selection.removeAllRanges) {
    // T522811
    try {
      selection.removeAllRanges();
    } catch (e) {}
  }
};

exports.clearSelection = clearSelection;

var closestCommonParent = function closestCommonParent(startTarget, endTarget) {
  var $startTarget = (0, _renderer.default)(startTarget);
  var $endTarget = (0, _renderer.default)(endTarget);

  if ($startTarget[0] === $endTarget[0]) {
    return $startTarget[0];
  }

  var $startParents = $startTarget.parents();
  var $endParents = $endTarget.parents();
  var startingParent = Math.min($startParents.length, $endParents.length);

  for (var i = -startingParent; i < 0; i++) {
    if ($startParents.get(i) === $endParents.get(i)) {
      return $startParents.get(i);
    }
  }
};

exports.closestCommonParent = closestCommonParent;

var extractTemplateMarkup = function extractTemplateMarkup(element) {
  element = (0, _renderer.default)(element);
  var templateTag = element.length && element.filter(function isNotExecutableScript() {
    var $node = (0, _renderer.default)(this);
    return $node.is('script[type]') && $node.attr('type').indexOf('script') < 0;
  });

  if (templateTag.length) {
    return templateTag.eq(0).html();
  } else {
    element = (0, _renderer.default)('<div>').append(element);
    return element.html();
  }
};

exports.extractTemplateMarkup = extractTemplateMarkup;

var normalizeTemplateElement = function normalizeTemplateElement(element) {
  var $element = (0, _type.isDefined)(element) && (element.nodeType || (0, _type.isRenderer)(element)) ? (0, _renderer.default)(element) : (0, _renderer.default)('<div>').html(element).contents();

  if ($element.length === 1) {
    if ($element.is('script')) {
      $element = normalizeTemplateElement($element.html().trim());
    } else if ($element.is('table')) {
      $element = $element.children('tbody').contents();
    }
  }

  return $element;
};

exports.normalizeTemplateElement = normalizeTemplateElement;

var clipboardText = function clipboardText(event, text) {
  var clipboard = event.originalEvent && event.originalEvent.clipboardData || window.clipboardData;

  if (arguments.length === 1) {
    return clipboard && clipboard.getData('Text');
  }

  clipboard && clipboard.setData('Text', text);
};

exports.clipboardText = clipboardText;

var contains = function contains(container, element) {
  if (!element) {
    return false;
  }

  if (_dom_adapter.default.isTextNode(element)) {
    element = element.parentNode;
  }

  if (_dom_adapter.default.isDocument(container)) {
    return container.documentElement.contains(element);
  }

  if ((0, _type.isWindow)(container)) {
    return contains(container.document, element);
  }

  return container.contains ? container.contains(element) : !!(element.compareDocumentPosition(container) & element.DOCUMENT_POSITION_CONTAINS);
};

exports.contains = contains;

var createTextElementHiddenCopy = function createTextElementHiddenCopy(element, text, options) {
  var elementStyles = window.getComputedStyle((0, _renderer.default)(element).get(0));
  var includePaddings = options && options.includePaddings;
  return (0, _renderer.default)('<div>').text(text).css({
    'fontStyle': elementStyles.fontStyle,
    'fontVariant': elementStyles.fontVariant,
    'fontWeight': elementStyles.fontWeight,
    'fontSize': elementStyles.fontSize,
    'fontFamily': elementStyles.fontFamily,
    'letterSpacing': elementStyles.letterSpacing,
    'border': elementStyles.border,
    'paddingTop': includePaddings ? elementStyles.paddingTop : '',
    'paddingRight': includePaddings ? elementStyles.paddingRight : '',
    'paddingBottom': includePaddings ? elementStyles.paddingBottom : '',
    'paddingLeft': includePaddings ? elementStyles.paddingLeft : '',
    'visibility': 'hidden',
    'whiteSpace': 'pre',
    'position': 'absolute',
    'float': 'left'
  });
};

exports.createTextElementHiddenCopy = createTextElementHiddenCopy;

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.default = void 0;

var support = _interopRequireWildcard(__webpack_require__(34));

var _iterator = __webpack_require__(4);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _event_registrator = _interopRequireDefault(__webpack_require__(38));

var _touch = _interopRequireDefault(__webpack_require__(95));

var _mspointer = _interopRequireDefault(__webpack_require__(143));

var _mouse = _interopRequireDefault(__webpack_require__(97));

var _mouse_and_touch = _interopRequireDefault(__webpack_require__(144));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
  * @name UI Events.dxpointerdown
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 pointerType:string
  * @module events/pointer
*/

/**
  * @name UI Events.dxpointermove
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 pointerType:string
  * @module events/pointer
*/

/**
  * @name UI Events.dxpointerup
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 pointerType:string
  * @module events/pointer
*/

/**
  * @name UI Events.dxpointercancel
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 pointerType:string
  * @module events/pointer
*/

/**
  * @name UI Events.dxpointerover
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 pointerType:string
  * @module events/pointer
*/

/**
  * @name UI Events.dxpointerout
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 pointerType:string
  * @module events/pointer
*/

/**
  * @name UI Events.dxpointerenter
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 pointerType:string
  * @module events/pointer
*/

/**
  * @name UI Events.dxpointerleave
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 pointerType:string
  * @module events/pointer
*/
var getStrategy = function getStrategy(support, device, browser) {
  if (support.pointerEvents && browser.msie) {
    return _mspointer.default;
  }

  var tablet = device.tablet,
      phone = device.phone;

  if (support.touch && !(tablet || phone)) {
    return _mouse_and_touch.default;
  }

  if (support.touch) {
    return _touch.default;
  }

  return _mouse.default;
};

var EventStrategy = getStrategy(support, _devices.default.real(), _browser.default);
(0, _iterator.each)(EventStrategy.map, function (pointerEvent, originalEvents) {
  (0, _event_registrator.default)(pointerEvent, new EventStrategy(pointerEvent, originalEvents));
});
var pointer = {
  down: 'dxpointerdown',
  up: 'dxpointerup',
  move: 'dxpointermove',
  cancel: 'dxpointercancel',
  enter: 'dxpointerenter',
  leave: 'dxpointerleave',
  over: 'dxpointerover',
  out: 'dxpointerout'
}; ///#DEBUG

pointer.getStrategy = getStrategy; ///#ENDDEBUG

var _default = pointer;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.toComparable = exports.compileSetter = exports.compileGetter = void 0;

var _errors = _interopRequireDefault(__webpack_require__(13));

var _class = _interopRequireDefault(__webpack_require__(11));

var _object = __webpack_require__(70);

var _type = __webpack_require__(1);

var _iterator = __webpack_require__(4);

var _variable_wrapper = _interopRequireDefault(__webpack_require__(85));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unwrapVariable = _variable_wrapper.default.unwrap;
var isWrapped = _variable_wrapper.default.isWrapped;
var assign = _variable_wrapper.default.assign;

var bracketsToDots = function bracketsToDots(expr) {
  return expr.replace(/\[/g, '.').replace(/\]/g, '');
};

var readPropValue = function readPropValue(obj, propName, options) {
  options = options || {};

  if (propName === 'this') {
    return unwrap(obj, options);
  }

  return unwrap(obj[propName], options);
};

var assignPropValue = function assignPropValue(obj, propName, value, options) {
  if (propName === 'this') {
    throw new _errors.default.Error('E4016');
  }

  var propValue = obj[propName];

  if (options.unwrapObservables && isWrapped(propValue)) {
    assign(propValue, value);
  } else {
    obj[propName] = value;
  }
};

var prepareOptions = function prepareOptions(options) {
  options = options || {};
  options.unwrapObservables = options.unwrapObservables !== undefined ? options.unwrapObservables : true;
  return options;
};

function unwrap(value, options) {
  return options.unwrapObservables ? unwrapVariable(value) : value;
}

var compileGetter = function compileGetter(expr) {
  if (arguments.length > 1) {
    expr = [].slice.call(arguments);
  }

  if (!expr || expr === 'this') {
    return function (obj) {
      return obj;
    };
  }

  if (typeof expr === 'string') {
    expr = bracketsToDots(expr);
    var path = expr.split('.');
    return function (obj, options) {
      options = prepareOptions(options);
      var functionAsIs = options.functionsAsIs;
      var hasDefaultValue = ('defaultValue' in options);
      var current = unwrap(obj, options);

      for (var i = 0; i < path.length; i++) {
        if (!current) {
          if (current == null && hasDefaultValue) {
            return options.defaultValue;
          }

          break;
        }

        var pathPart = path[i];

        if (hasDefaultValue && (0, _type.isObject)(current) && !(pathPart in current)) {
          return options.defaultValue;
        }

        var next = unwrap(current[pathPart], options);

        if (!functionAsIs && (0, _type.isFunction)(next)) {
          next = next.call(current);
        }

        current = next;
      }

      return current;
    };
  }

  if (Array.isArray(expr)) {
    return combineGetters(expr);
  }

  if ((0, _type.isFunction)(expr)) {
    return expr;
  }
};

exports.compileGetter = compileGetter;

function combineGetters(getters) {
  var compiledGetters = {};

  for (var i = 0, l = getters.length; i < l; i++) {
    var getter = getters[i];
    compiledGetters[getter] = compileGetter(getter);
  }

  return function (obj, options) {
    var result;
    (0, _iterator.each)(compiledGetters, function (name) {
      var value = this(obj, options);

      if (value === undefined) {
        return;
      }

      var current = result || (result = {});
      var path = name.split('.');
      var last = path.length - 1;

      for (var _i = 0; _i < last; _i++) {
        var pathItem = path[_i];

        if (!(pathItem in current)) {
          current[pathItem] = {};
        }

        current = current[pathItem];
      }

      current[path[last]] = value;
    });
    return result;
  };
}

var ensurePropValueDefined = function ensurePropValueDefined(obj, propName, value, options) {
  if ((0, _type.isDefined)(value)) {
    return value;
  }

  var newValue = {};
  assignPropValue(obj, propName, newValue, options);
  return newValue;
};

var compileSetter = function compileSetter(expr) {
  expr = bracketsToDots(expr || 'this').split('.');
  var lastLevelIndex = expr.length - 1;
  return function (obj, value, options) {
    options = prepareOptions(options);
    var currentValue = unwrap(obj, options);
    expr.forEach(function (propertyName, levelIndex) {
      var propertyValue = readPropValue(currentValue, propertyName, options);
      var isPropertyFunc = !options.functionsAsIs && (0, _type.isFunction)(propertyValue) && !isWrapped(propertyValue);

      if (levelIndex === lastLevelIndex) {
        if (options.merge && (0, _type.isPlainObject)(value) && (!(0, _type.isDefined)(propertyValue) || (0, _type.isPlainObject)(propertyValue))) {
          propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);
          (0, _object.deepExtendArraySafe)(propertyValue, value, false, true);
        } else if (isPropertyFunc) {
          currentValue[propertyName](value);
        } else {
          assignPropValue(currentValue, propertyName, value, options);
        }
      } else {
        propertyValue = ensurePropValueDefined(currentValue, propertyName, propertyValue, options);

        if (isPropertyFunc) {
          propertyValue = propertyValue.call(currentValue);
        }

        currentValue = propertyValue;
      }
    });
  };
};

exports.compileSetter = compileSetter;

var toComparable = function toComparable(value, caseSensitive) {
  if (value instanceof Date) {
    return value.getTime();
  }

  if (value && value instanceof _class.default && value.valueOf) {
    return value.valueOf();
  }

  if (!caseSensitive && typeof value === 'string') {
    return value.toLowerCase();
  }

  return value;
};

exports.toComparable = toComparable;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

var _window = __webpack_require__(7);

var _call_once = _interopRequireDefault(__webpack_require__(32));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var callbacks = [];

var isReady = function isReady() {
  // NOTE: we can't use document.readyState === "interactive" because of ie9/ie10 support
  return _dom_adapter.default.getReadyState() === 'complete' || _dom_adapter.default.getReadyState() !== 'loading' && !_dom_adapter.default.getDocumentElement().doScroll;
};

var subscribeReady = (0, _call_once.default)(function () {
  var removeListener = _dom_adapter.default.listen(_dom_adapter.default.getDocument(), 'DOMContentLoaded', function () {
    readyCallbacks.fire();
    removeListener();
  });
});
var readyCallbacks = {
  add: function add(callback) {
    var windowExists = (0, _window.hasWindow)();

    if (windowExists && isReady()) {
      callback();
    } else {
      callbacks.push(callback);
      windowExists && subscribeReady();
    }
  },
  fire: function fire() {
    callbacks.forEach(function (callback) {
      return callback();
    });
    callbacks = [];
  }
};

var _default = (0, _dependency_injector.default)(readyCallbacks);

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.getDataStrategy = getDataStrategy;
exports.data = data;
exports.beforeCleanData = beforeCleanData;
exports.afterCleanData = afterCleanData;
exports.cleanData = cleanData;
exports.removeData = removeData;
exports.cleanDataRecursive = cleanDataRecursive;
exports.setDataStrategy = exports.strategyChanging = void 0;

var _weak_map = _interopRequireDefault(__webpack_require__(69));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _memorized_callbacks = _interopRequireDefault(__webpack_require__(72));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var dataMap = new _weak_map.default();
var strategy;
var strategyChanging = new _memorized_callbacks.default();
exports.strategyChanging = strategyChanging;

var beforeCleanDataFunc = function beforeCleanDataFunc() {};

var afterCleanDataFunc = function afterCleanDataFunc() {};

var setDataStrategy = function setDataStrategy(value) {
  strategyChanging.fire(value);
  strategy = value;
  var cleanData = strategy.cleanData;

  strategy.cleanData = function (nodes) {
    beforeCleanDataFunc(nodes);
    var result = cleanData.call(this, nodes);
    afterCleanDataFunc(nodes);
    return result;
  };
};

exports.setDataStrategy = setDataStrategy;
setDataStrategy({
  data: function data() {
    var element = arguments[0];
    var key = arguments[1];
    var value = arguments[2];
    if (!element) return;
    var elementData = dataMap.get(element);

    if (!elementData) {
      elementData = {};
      dataMap.set(element, elementData);
    }

    if (key === undefined) {
      return elementData;
    }

    if (arguments.length === 2) {
      return elementData[key];
    }

    elementData[key] = value;
    return value;
  },
  removeData: function removeData(element, key) {
    if (!element) return;

    if (key === undefined) {
      dataMap.delete(element);
    } else {
      var elementData = dataMap.get(element);

      if (elementData) {
        delete elementData[key];
      }
    }
  },
  cleanData: function cleanData(elements) {
    for (var i = 0; i < elements.length; i++) {
      _events_engine.default.off(elements[i]);

      dataMap.delete(elements[i]);
    }
  }
});

function getDataStrategy() {
  return strategy;
}

function data() {
  return strategy.data.apply(this, arguments);
}

function beforeCleanData(callback) {
  beforeCleanDataFunc = callback;
}

function afterCleanData(callback) {
  afterCleanDataFunc = callback;
}

function cleanData(nodes) {
  return strategy.cleanData.call(this, nodes);
}

function removeData(element, key) {
  return strategy.removeData.call(this, element, key);
}

function cleanDataRecursive(element, cleanSelf) {
  if (!_dom_adapter.default.isElementNode(element)) {
    return;
  }

  var childElements = element.getElementsByTagName('*');
  strategy.cleanData(childElements);

  if (cleanSelf) {
    strategy.cleanData([element]);
  }
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = _default;

var _extend = __webpack_require__(2);

var _type = __webpack_require__(1);

var _iterator = __webpack_require__(4);

var _class = _interopRequireDefault(__webpack_require__(11));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(object) {
  var BaseClass = _class.default.inherit(object);

  var InjectedClass = BaseClass;
  var instance = new InjectedClass(object);
  var initialFields = {};

  var injectFields = function injectFields(injectionObject, initial) {
    (0, _iterator.each)(injectionObject, function (key) {
      if ((0, _type.isFunction)(instance[key])) {
        if (initial || !object[key]) {
          object[key] = function () {
            return instance[key].apply(object, arguments);
          };
        }
      } else {
        if (initial) {
          initialFields[key] = object[key];
        }

        object[key] = instance[key];
      }
    });
  };

  injectFields(object, true);

  object.inject = function (injectionObject) {
    InjectedClass = InjectedClass.inherit(injectionObject);
    instance = new InjectedClass();
    injectFields(injectionObject);
  };

  object.resetInjection = function () {
    (0, _extend.extend)(object, initialFields);
    InjectedClass = BaseClass;
    instance = new BaseClass();
  };

  return object;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.isDisjunctiveOperator = isDisjunctiveOperator;
exports.isConjunctiveOperator = isConjunctiveOperator;
exports.throttleChanges = throttleChanges;
exports.rejectedPromise = exports.trivialPromise = exports.isGroupCriterion = exports.isUnaryOperation = exports.base64_encode = exports.keysEqual = exports.processRequestResultLock = exports.aggregators = exports.errorMessageFromXhr = exports.normalizeSortingInfo = exports.normalizeBinaryCriterion = exports.XHR_ERROR_UNLOAD = void 0;

var _type = __webpack_require__(1);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _window = __webpack_require__(7);

var _iterator = __webpack_require__(4);

var _deferred = __webpack_require__(9);

var _common = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var ready = _ready_callbacks.default.add;
var XHR_ERROR_UNLOAD = 'DEVEXTREME_XHR_ERROR_UNLOAD';
exports.XHR_ERROR_UNLOAD = XHR_ERROR_UNLOAD;

var normalizeBinaryCriterion = function normalizeBinaryCriterion(crit) {
  return [crit[0], crit.length < 3 ? '=' : String(crit[1]).toLowerCase(), crit.length < 2 ? true : crit[crit.length - 1]];
};

exports.normalizeBinaryCriterion = normalizeBinaryCriterion;

var normalizeSortingInfo = function normalizeSortingInfo(info) {
  if (!Array.isArray(info)) {
    info = [info];
  }

  return (0, _iterator.map)(info, function (i) {
    var result = {
      selector: (0, _type.isFunction)(i) || typeof i === 'string' ? i : i.getter || i.field || i.selector,
      desc: !!(i.desc || String(i.dir).charAt(0).toLowerCase() === 'd')
    };

    if (i.compare) {
      result.compare = i.compare;
    }

    return result;
  });
};

exports.normalizeSortingInfo = normalizeSortingInfo;

var errorMessageFromXhr = function () {
  var textStatusMessages = {
    'timeout': 'Network connection timeout',
    'error': 'Unspecified network error',
    'parsererror': 'Unexpected server response'
  }; ///#DEBUG

  var textStatusDetails = {
    'timeout': 'possible causes: the remote host is not accessible, overloaded or is not included into the domain white-list when being run in the native container',
    'error': 'if the remote host is located on another domain, make sure it properly supports cross-origin resource sharing (CORS), or use the JSONP approach instead',
    'parsererror': 'the remote host did not respond with valid JSON data'
  }; ///#ENDDEBUG

  var explainTextStatus = function explainTextStatus(textStatus) {
    var result = textStatusMessages[textStatus];

    if (!result) {
      return textStatus;
    } ///#DEBUG


    result += ' (' + textStatusDetails[textStatus] + ')'; ///#ENDDEBUG

    return result;
  }; // T542570, https://stackoverflow.com/a/18170879


  var unloading;
  ready(function () {
    var window = (0, _window.getWindow)();

    _dom_adapter.default.listen(window, 'beforeunload', function () {
      unloading = true;
    });
  });
  return function (xhr, textStatus) {
    if (unloading) {
      return XHR_ERROR_UNLOAD;
    }

    if (xhr.status < 400) {
      return explainTextStatus(textStatus);
    }

    return xhr.statusText;
  };
}();

exports.errorMessageFromXhr = errorMessageFromXhr;
var aggregators = {
  count: {
    seed: 0,
    step: function step(count) {
      return 1 + count;
    }
  },
  sum: {
    seed: 0,
    step: function step(sum, item) {
      return sum + item;
    }
  },
  min: {
    step: function step(min, item) {
      return item < min ? item : min;
    }
  },
  max: {
    step: function step(max, item) {
      return item > max ? item : max;
    }
  },
  avg: {
    seed: [0, 0],
    step: function step(pair, value) {
      return [pair[0] + value, pair[1] + 1];
    },
    finalize: function finalize(pair) {
      return pair[1] ? pair[0] / pair[1] : NaN;
    }
  }
};
exports.aggregators = aggregators;

var processRequestResultLock = function () {
  var lockCount = 0;
  var lockDeferred;

  var obtain = function obtain() {
    if (lockCount === 0) {
      lockDeferred = new _deferred.Deferred();
    }

    lockCount++;
  };

  var release = function release() {
    lockCount--;

    if (lockCount < 1) {
      lockDeferred.resolve();
    }
  };

  var promise = function promise() {
    var deferred = lockCount === 0 ? new _deferred.Deferred().resolve() : lockDeferred;
    return deferred.promise();
  };

  var reset = function reset() {
    lockCount = 0;

    if (lockDeferred) {
      lockDeferred.resolve();
    }
  };

  return {
    obtain: obtain,
    release: release,
    promise: promise,
    reset: reset
  };
}();

exports.processRequestResultLock = processRequestResultLock;

function isDisjunctiveOperator(condition) {
  return /^(or|\|\||\|)$/i.test(condition);
}

function isConjunctiveOperator(condition) {
  return /^(and|&&|&)$/i.test(condition);
}

var keysEqual = function keysEqual(keyExpr, key1, key2) {
  if (Array.isArray(keyExpr)) {
    var names = (0, _iterator.map)(key1, function (v, k) {
      return k;
    });
    var name;

    for (var i = 0; i < names.length; i++) {
      name = names[i];

      if (!(0, _common.equalByValue)(key1[name], key2[name], 0, false)) {
        return false;
      }
    }

    return true;
  }

  return (0, _common.equalByValue)(key1, key2, 0, false);
};

exports.keysEqual = keysEqual;
var BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

var base64_encode = function base64_encode(input) {
  if (!Array.isArray(input)) {
    input = stringToByteArray(String(input));
  }

  var result = '';

  function getBase64Char(index) {
    return BASE64_CHARS.charAt(index);
  }

  for (var i = 0; i < input.length; i += 3) {
    var octet1 = input[i];
    var octet2 = input[i + 1];
    var octet3 = input[i + 2];
    result += (0, _iterator.map)([octet1 >> 2, (octet1 & 3) << 4 | octet2 >> 4, isNaN(octet2) ? 64 : (octet2 & 15) << 2 | octet3 >> 6, isNaN(octet3) ? 64 : octet3 & 63], getBase64Char).join('');
  }

  return result;
};

exports.base64_encode = base64_encode;

function stringToByteArray(str) {
  var bytes = [];
  var code;
  var i;

  for (i = 0; i < str.length; i++) {
    code = str.charCodeAt(i);

    if (code < 128) {
      bytes.push(code);
    } else if (code < 2048) {
      bytes.push(192 + (code >> 6), 128 + (code & 63));
    } else if (code < 65536) {
      bytes.push(224 + (code >> 12), 128 + (code >> 6 & 63), 128 + (code & 63));
    } else if (code < 2097152) {
      bytes.push(240 + (code >> 18), 128 + (code >> 12 & 63), 128 + (code >> 6 & 63), 128 + (code & 63));
    }
  }

  return bytes;
}

var isUnaryOperation = function isUnaryOperation(crit) {
  return crit[0] === '!' && Array.isArray(crit[1]);
};

exports.isUnaryOperation = isUnaryOperation;

var isGroupOperator = function isGroupOperator(value) {
  return value === 'and' || value === 'or';
};

var isGroupCriterion = function isGroupCriterion(crit) {
  var first = crit[0];
  var second = crit[1];

  if (Array.isArray(first)) {
    return true;
  }

  if ((0, _type.isFunction)(first)) {
    if (Array.isArray(second) || (0, _type.isFunction)(second) || isGroupOperator(second)) {
      return true;
    }
  }

  return false;
};

exports.isGroupCriterion = isGroupCriterion;

var trivialPromise = function trivialPromise() {
  var d = new _deferred.Deferred();
  return d.resolve.apply(d, arguments).promise();
};

exports.trivialPromise = trivialPromise;

var rejectedPromise = function rejectedPromise() {
  var d = new _deferred.Deferred();
  return d.reject.apply(d, arguments).promise();
};

exports.rejectedPromise = rejectedPromise;

function throttle(func, timeout) {
  var timeoutId;
  var lastArgs;
  return function () {
    var _this = this;

    lastArgs = arguments;

    if (!timeoutId) {
      timeoutId = setTimeout(function () {
        timeoutId = undefined;

        if (lastArgs) {
          func.call(_this, lastArgs);
        }
      }, (0, _type.isFunction)(timeout) ? timeout() : timeout);
    }

    return timeoutId;
  };
}

function throttleChanges(func, timeout) {
  var cache = [];
  var throttled = throttle(function () {
    func.call(this, cache);
    cache = [];
  }, timeout);
  return function (changes) {
    if (Array.isArray(changes)) {
      var _cache;

      (_cache = cache).push.apply(_cache, _toConsumableArray(changes));
    }

    return throttled.call(this, cache);
  };
}
/**
* @name Utils
*/

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _error = _interopRequireDefault(__webpack_require__(71));

var _errors = _interopRequireDefault(__webpack_require__(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @docid
* @name ErrorsUIWidgets
*/
var _default = (0, _error.default)(_errors.default.ERROR_MESSAGES, {
  /**
  * @name ErrorsUIWidgets.E1001
  */
  E1001: 'Module \'{0}\'. Controller \'{1}\' is already registered',

  /**
  * @name ErrorsUIWidgets.E1002
  */
  E1002: 'Module \'{0}\'. Controller \'{1}\' does not inherit from DevExpress.ui.dxDataGrid.Controller',

  /**
  * @name ErrorsUIWidgets.E1003
  */
  E1003: 'Module \'{0}\'. View \'{1}\' is already registered',

  /**
  * @name ErrorsUIWidgets.E1004
  */
  E1004: 'Module \'{0}\'. View \'{1}\' does not inherit from DevExpress.ui.dxDataGrid.View',

  /**
  * @name ErrorsUIWidgets.E1005
  */
  E1005: 'Public method \'{0}\' is already registered',

  /**
  * @name ErrorsUIWidgets.E1006
  */
  E1006: 'Public method \'{0}.{1}\' does not exist',

  /**
  * @name ErrorsUIWidgets.E1007
  */
  E1007: 'State storing cannot be provided due to the restrictions of the browser',

  /**
  * @name ErrorsUIWidgets.E1010
  */
  E1010: 'The template does not contain the TextBox widget',

  /**
  * @name ErrorsUIWidgets.E1011
  */
  E1011: 'Items cannot be deleted from the List. Implement the "remove" function in the data store',

  /**
  * @name ErrorsUIWidgets.E1012
  */
  E1012: 'Editing type \'{0}\' with the name \'{1}\' is unsupported',

  /**
  * @name ErrorsUIWidgets.E1016
  */
  E1016: 'Unexpected type of data source is provided for a lookup column',

  /**
  * @name ErrorsUIWidgets.E1018
  */
  E1018: 'The \'collapseAll\' method cannot be called if you use a remote data source',

  /**
  * @name ErrorsUIWidgets.E1019
  */
  E1019: 'Search mode \'{0}\' is unavailable',

  /**
  * @name ErrorsUIWidgets.E1020
  */
  E1020: 'The type cannot be changed after initialization',

  /**
  * @name ErrorsUIWidgets.E1021
  */
  E1021: '{0} \'{1}\' you are trying to remove does not exist',

  /**
  * @name ErrorsUIWidgets.E1022
  */
  E1022: 'The "markers" option is given an invalid value. Assign an array instead',

  /**
  * @name ErrorsUIWidgets.E1023
  */
  E1023: 'The "routes" option is given an invalid value. Assign an array instead',

  /**
  * @name ErrorsUIWidgets.E1025
  */
  E1025: 'This layout is too complex to render',

  /**
  * @name ErrorsUIWidgets.E1026
  */
  E1026: 'The "calculateCustomSummary" function is missing from a field whose "summaryType" option is set to "custom"',

  /**
  * @name ErrorsUIWidgets.E1031
  */
  E1031: 'Unknown subscription in the Scheduler widget: \'{0}\'',

  /**
  * @name ErrorsUIWidgets.E1032
  */
  E1032: 'Unknown start date in an appointment: \'{0}\'',

  /**
  * @name ErrorsUIWidgets.E1033
  */
  E1033: 'Unknown step in the date navigator: \'{0}\'',

  /**
  * @name ErrorsUIWidgets.E1034
  */
  E1034: 'The browser does not implement an API for saving files',

  /**
   * @name ErrorsUIWidgets.E1035
   */
  E1035: 'The editor cannot be created because of an internal error: {0}',

  /**
   * @name ErrorsUIWidgets.E1037
   */
  E1037: 'Invalid structure of grouped data',

  /**
   * @name ErrorsUIWidgets.E1038
   */
  E1038: 'The browser does not support local storages for local web pages',

  /**
  * @name ErrorsUIWidgets.E1039
  */
  E1039: 'A cell\'s position cannot be calculated',

  /**
   * @name ErrorsUIWidgets.E1040
   */
  E1040: 'The \'{0}\' key value is not unique within the data array',

  /**
   * @name ErrorsUIWidgets.E1041
   */
  E1041: 'The \'{0}\' script is referenced after the DevExtreme scripts or not referenced at all',

  /**
  * @name ErrorsUIWidgets.E1042
  */
  E1042: '{0} requires the key field to be specified',

  /**
  * @name ErrorsUIWidgets.E1043
  */
  E1043: 'Changes cannot be processed due to the incorrectly set key',

  /**
  * @name ErrorsUIWidgets.E1044
  */
  E1044: 'The key field specified by the keyExpr option does not match the key field specified in the data store',

  /**
  * @name ErrorsUIWidgets.E1045
  */
  E1045: 'Editing requires the key field to be specified in the data store',

  /**
  * @name ErrorsUIWidgets.E1046
  */
  E1046: 'The \'{0}\' key field is not found in data objects',

  /**
  * @name ErrorsUIWidgets.E1047
  */
  E1047: 'The "{0}" field is not found in the fields array',

  /**
  * @name ErrorsUIWidgets.E1048
  */
  E1048: 'The "{0}" operation is not found in the filterOperations array',

  /**
  * @name ErrorsUIWidgets.E1049
  */
  E1049: 'Column \'{0}\': filtering is allowed but the \'dataField\' or \'name\' option is not specified',

  /**
  * @name ErrorsUIWidgets.E1050
  */
  E1050: 'The validationRules option does not apply to third-party editors defined in the editCellTemplate',

  /**
   * @name ErrorsUIWidgets.E1051
   */
  E1051: 'HtmlEditor\'s valueType is "{0}", but the {0} converter was not imported.',

  /**
  * @name ErrorsUIWidgets.E1052
  */
  E1052: '{0} should have the "dataSource" option specified',

  /**
  * @name ErrorsUIWidgets.E1053
  */
  E1053: 'The "buttons" option accepts an array that contains only objects or string values',

  /**
  * @name ErrorsUIWidgets.E1054
  */
  E1054: 'All text editor buttons must have names',

  /**
  * @name ErrorsUIWidgets.E1055
  */
  E1055: 'One or several text editor buttons have invalid or non-unique "name" values',

  /**
  * @name ErrorsUIWidgets.E1056
  */
  E1056: 'The {0} widget does not support buttons of the "{1}" type',
  // NOTE:
  // E1057 is reserved. See https://js.devexpress.com/Documentation/19_2/ApiReference/UI_Widgets/Errors_and_Warnings/#E1057

  /**
  * @name ErrorsUIWidgets.E1058
  */
  E1058: 'The "startDayHour" must be earlier than the "endDayHour"',

  /**
  * @name ErrorsUIWidgets.E1059
  */
  E1059: 'The following column names are not unique: {0}',

  /**
  * @name ErrorsUIWidgets.E1060
  */
  E1060: 'All editable columns must have names',

  /**
  * @name ErrorsUIWidgets.W1001
  */
  W1001: 'The "key" option cannot be modified after initialization',

  /**
  * @name ErrorsUIWidgets.W1002
  */
  W1002: 'An item with the key \'{0}\' does not exist',

  /**
  * @name ErrorsUIWidgets.W1003
  */
  W1003: 'A group with the key \'{0}\' in which you are trying to select items does not exist',

  /**
  * @name ErrorsUIWidgets.W1004
  */
  W1004: 'The item \'{0}\' you are trying to select in the group \'{1}\' does not exist',

  /**
  * @name ErrorsUIWidgets.W1005
  */
  W1005: 'Due to column data types being unspecified, data has been loaded twice in order to apply initial filter settings. To resolve this issue, specify data types for all grid columns.',

  /**
  * @name ErrorsUIWidgets.W1006
  */
  W1006: 'The map service returned the following error: \'{0}\'',

  /**
   * @name ErrorsUIWidgets.W1007
   */
  W1007: 'No item with key {0} was found in the data source, but this key was used as the parent key for item {1}',

  /**
   * @name ErrorsUIWidgets.W1008
   */
  W1008: 'Cannot scroll to the \'{0}\' date because it does not exist on the current view',

  /**
   * @name ErrorsUIWidgets.W1009
   */
  W1009: 'Searching works only if data is specified using the dataSource option',

  /**
   * @name ErrorsUIWidgets.W1010
   */
  W1010: 'The capability to select all items works with source data of plain structure only',

  /**
   * @name ErrorsUIWidgets.W1011
   */
  W1011: 'The "keyExpr" option is not applied when dataSource is not an array',
  W1012: 'The \'{0}\' key field is not found in data objects',

  /**
  * @name ErrorsUIWidgets.W1013
  */
  W1013: 'The "message" field in the dialog component was renamed to "messageHtml". Change your code correspondingly. In addition, if you used HTML code in the message, make sure that it is secure',

  /**
  * @name ErrorsUIWidgets.W1014
  */
  W1014: 'The Floating Action Button exceeds the recommended speed dial action count. If you need to display more speed dial actions, increase the maxSpeedDialActionCount option value in the global config.',

  /**
  * @name ErrorsUIWidgets.W1015
  */
  W1015: 'The "cellDuration" should divide the range from the "startDayHour" to the "endDayHour" into even intervals',

  /**
  * @name ErrorsUIWidgets.W1016
  */
  W1016: 'The \'{0}\' field in the HTML Editor toolbar item configuration was renamed to \'{1}\'. Please make a corresponding change in your code.',

  /**
  * @name ErrorsUIWidgets.W1017
  */
  W1017: 'The \'key\' property is not specified for a lookup data source. Please specify it to prevent requests for the entire dataset when users filter data.',

  /**
  * @name ErrorsUIWidgets.W1018
  */
  W1018: 'Infinite scrolling may not work properly with multiple selection. To use these features together, set \'selection.deferred\' to true or set \'selection.selectAllMode\' to \'page\'.',

  /**
  * @name ErrorsUIWidgets.W1019
  */
  W1019: 'Filter query string exceeds maximum length limit of {0} characters.'
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.getElementsFromPoint = exports.getDefaultAlignment = exports.getBoundingRect = void 0;

var _config = _interopRequireDefault(__webpack_require__(18));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _browser = _interopRequireDefault(__webpack_require__(19));

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getDefaultAlignment = function getDefaultAlignment(isRtlEnabled) {
  var rtlEnabled = isRtlEnabled !== null && isRtlEnabled !== void 0 ? isRtlEnabled : (0, _config.default)().rtlEnabled;
  return rtlEnabled ? 'right' : 'left';
};

exports.getDefaultAlignment = getDefaultAlignment;

var getElementsFromPoint = function getElementsFromPoint(x, y) {
  var document = _dom_adapter.default.getDocument();

  if (_browser.default.msie) {
    var result = document.msElementsFromPoint(x, y);

    if (result) {
      return Array.prototype.slice.call(result);
    }

    return [];
  }

  return document.elementsFromPoint(x, y);
};

exports.getElementsFromPoint = getElementsFromPoint;

var getBoundingRect = function getBoundingRect(element) {
  if ((0, _type.isWindow)(element)) {
    return {
      width: element.outerWidth,
      height: element.outerHeight
    };
  }

  var rect;

  try {
    rect = element.getBoundingClientRect();
  } catch (e) {
    // NOTE: IE throws 'Unspecified error' if there is no such element on the page DOM
    rect = {
      width: 0,
      height: 0,
      bottom: 0,
      top: 0,
      left: 0,
      right: 0
    };
  }

  return rect;
};

exports.getBoundingRect = getBoundingRect;

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.useNativeClick = exports.misc = exports.name = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _dom = __webpack_require__(21);

var _frame = __webpack_require__(55);

var _index = __webpack_require__(6);

var _event_nodes_disposing = __webpack_require__(142);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _emitter = _interopRequireDefault(__webpack_require__(58));

var _emitter_registrator = _interopRequireDefault(__webpack_require__(39));

var _version = __webpack_require__(76);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CLICK_EVENT_NAME = 'dxclick';
exports.name = CLICK_EVENT_NAME;
var TOUCH_BOUNDARY = 10;
var abs = Math.abs;

var isInput = function isInput(element) {
  return (0, _renderer.default)(element).is('input, textarea, select, button ,:focus, :focus *');
};

var misc = {
  requestAnimationFrame: _frame.requestAnimationFrame,
  cancelAnimationFrame: _frame.cancelAnimationFrame
};
exports.misc = misc;

var ClickEmitter = _emitter.default.inherit({
  ctor: function ctor(element) {
    this.callBase(element);

    this._makeElementClickable((0, _renderer.default)(element));
  },
  _makeElementClickable: function _makeElementClickable($element) {
    if (!$element.attr('onclick')) {
      $element.attr('onclick', 'void(0)');
    }
  },
  start: function start(e) {
    this._blurPrevented = e.isDefaultPrevented();
    this._startTarget = e.target;
    this._startEventData = (0, _index.eventData)(e);
  },
  end: function end(e) {
    if (this._eventOutOfElement(e, this.getElement().get(0)) || e.type === _pointer.default.cancel) {
      this._cancel(e);

      return;
    }

    if (!isInput(e.target) && !this._blurPrevented) {
      (0, _dom.resetActiveElement)();
    }

    this._accept(e);

    this._clickAnimationFrame = misc.requestAnimationFrame(function () {
      this._fireClickEvent(e);
    }.bind(this));
  },
  _eventOutOfElement: function _eventOutOfElement(e, element) {
    var target = e.target;
    var targetChanged = !(0, _dom.contains)(element, target) && element !== target;
    var gestureDelta = (0, _index.eventDelta)((0, _index.eventData)(e), this._startEventData);
    var boundsExceeded = abs(gestureDelta.x) > TOUCH_BOUNDARY || abs(gestureDelta.y) > TOUCH_BOUNDARY;
    return targetChanged || boundsExceeded;
  },
  _fireClickEvent: function _fireClickEvent(e) {
    this._fireEvent(CLICK_EVENT_NAME, e, {
      target: (0, _dom.closestCommonParent)(this._startTarget, e.target)
    });
  },
  dispose: function dispose() {
    misc.cancelAnimationFrame(this._clickAnimationFrame);
  }
}); // NOTE: native strategy for desktop, iOS 9.3+, Android 5+


var realDevice = _devices.default.real();

var useNativeClick = realDevice.generic || realDevice.ios && (0, _version.compare)(realDevice.version, [9, 3]) >= 0 || realDevice.android && (0, _version.compare)(realDevice.version, [5]) >= 0;
exports.useNativeClick = useNativeClick;

(function () {
  var NATIVE_CLICK_CLASS = 'dx-native-click';

  var isNativeClickEvent = function isNativeClickEvent(target) {
    return useNativeClick || (0, _renderer.default)(target).closest('.' + NATIVE_CLICK_CLASS).length;
  };

  var prevented = null;
  var lastFiredEvent = null;

  function onNodeRemove() {
    lastFiredEvent = null;
  }

  var clickHandler = function clickHandler(e) {
    var originalEvent = e.originalEvent;
    var eventAlreadyFired = lastFiredEvent === originalEvent || originalEvent && originalEvent.DXCLICK_FIRED;
    var leftButton = !e.which || e.which === 1;

    if (leftButton && !prevented && isNativeClickEvent(e.target) && !eventAlreadyFired) {
      if (originalEvent) {
        originalEvent.DXCLICK_FIRED = true;
      }

      (0, _event_nodes_disposing.unsubscribeNodesDisposing)(lastFiredEvent, onNodeRemove);
      lastFiredEvent = originalEvent;
      (0, _event_nodes_disposing.subscribeNodesDisposing)(lastFiredEvent, onNodeRemove);
      (0, _index.fireEvent)({
        type: CLICK_EVENT_NAME,
        originalEvent: e
      });
    }
  };

  ClickEmitter = ClickEmitter.inherit({
    _makeElementClickable: function _makeElementClickable($element) {
      if (!isNativeClickEvent($element)) {
        this.callBase($element);
      }

      _events_engine.default.on($element, 'click', clickHandler);
    },
    configure: function configure(data) {
      this.callBase(data);

      if (data.useNative) {
        this.getElement().addClass(NATIVE_CLICK_CLASS);
      }
    },
    start: function start(e) {
      prevented = null;

      if (!isNativeClickEvent(e.target)) {
        this.callBase(e);
      }
    },
    end: function end(e) {
      if (!isNativeClickEvent(e.target)) {
        this.callBase(e);
      }
    },
    cancel: function cancel() {
      prevented = true;
    },
    dispose: function dispose() {
      this.callBase();

      _events_engine.default.off(this.getElement(), 'click', clickHandler);
    }
  });
})(); // NOTE: fixes native click blur on slow devices


(function () {
  var desktopDevice = _devices.default.real().generic;

  if (!desktopDevice) {
    var startTarget = null;
    var blurPrevented = false;

    var pointerDownHandler = function pointerDownHandler(e) {
      startTarget = e.target;
      blurPrevented = e.isDefaultPrevented();
    };

    var clickHandler = function clickHandler(e) {
      var $target = (0, _renderer.default)(e.target);

      if (!blurPrevented && startTarget && !$target.is(startTarget) && !(0, _renderer.default)(startTarget).is('label') && isInput($target)) {
        (0, _dom.resetActiveElement)();
      }

      startTarget = null;
      blurPrevented = false;
    };

    var NATIVE_CLICK_FIXER_NAMESPACE = 'NATIVE_CLICK_FIXER';

    var document = _dom_adapter.default.getDocument();

    _events_engine.default.subscribeGlobal(document, (0, _index.addNamespace)(_pointer.default.down, NATIVE_CLICK_FIXER_NAMESPACE), pointerDownHandler);

    _events_engine.default.subscribeGlobal(document, (0, _index.addNamespace)('click', NATIVE_CLICK_FIXER_NAMESPACE), clickHandler);
  }
})();
/**
  * @name UI Events.dxclick
  * @type eventType
  * @type_function_param1 event:event
  * @module events/click
*/


(0, _emitter_registrator.default)({
  emitter: ClickEmitter,
  bubble: true,
  events: [CLICK_EVENT_NAME]
}); ///#ENDDEBUG

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.waitForThemeLoad = waitForThemeLoad;
exports.isPendingThemeLoaded = isPendingThemeLoaded;
exports.init = init;
exports.current = current;
exports.attachCssClasses = attachCssClasses;
exports.detachCssClasses = detachCssClasses;
exports.isMaterial = isMaterial;
exports.isGeneric = isGeneric;
exports.isDark = isDark;
exports.isWebFontLoaded = isWebFontLoaded;
exports.waitWebFont = waitWebFont;
exports.ready = themeReady;
exports.resetTheme = resetTheme;
exports.initialized = initialized;
exports.setDefaultTimeout = setDefaultTimeout;
exports.default = void 0;

var _devices = _interopRequireDefault(__webpack_require__(10));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _promise = _interopRequireDefault(__webpack_require__(51));

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _deferred = __webpack_require__(9);

var _html_parser = __webpack_require__(89);

var _iterator = __webpack_require__(4);

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _view_port = __webpack_require__(50);

var _window = __webpack_require__(7);

var _themes_callback = __webpack_require__(147);

var _ui = _interopRequireDefault(__webpack_require__(28));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)();
var ready = _ready_callbacks.default.add;
var viewPort = _view_port.value;
var viewPortChanged = _view_port.changeCallback;
var initDeferred = new _deferred.Deferred();
var DX_LINK_SELECTOR = 'link[rel=dx-theme]';
var THEME_ATTR = 'data-theme';
var ACTIVE_ATTR = 'data-active';
var DX_HAIRLINES_CLASS = 'dx-hairlines';
var ANY_THEME = 'any';
var context;
var $activeThemeLink;
var knownThemes;
var currentThemeName;
var pendingThemeName;
var defaultTimeout = 15000;
var THEME_MARKER_PREFIX = 'dx.';

function readThemeMarker() {
  if (!(0, _window.hasWindow)()) {
    return null;
  }

  var element = (0, _renderer.default)('<div>', context).addClass('dx-theme-marker').appendTo(context.documentElement);
  var result;

  try {
    result = window.getComputedStyle(element.get(0))['fontFamily'];

    if (!result) {
      return null;
    }

    result = result.replace(/["']/g, '');

    if (result.substr(0, THEME_MARKER_PREFIX.length) !== THEME_MARKER_PREFIX) {
      return null;
    }

    return result.substr(THEME_MARKER_PREFIX.length);
  } finally {
    element.remove();
  }
} // FYI
// http://stackoverflow.com/q/2635814
// http://stackoverflow.com/a/3078636


function waitForThemeLoad(themeName) {
  var waitStartTime;
  var timerId;
  var intervalCleared = true;
  pendingThemeName = themeName;

  function handleLoaded() {
    pendingThemeName = null;
    clearInterval(timerId);
    intervalCleared = true;

    _themes_callback.themeReadyCallback.fire();

    _themes_callback.themeReadyCallback.empty();

    initDeferred.resolve();
  }

  if (isPendingThemeLoaded() || !defaultTimeout) {
    handleLoaded();
  } else {
    if (!intervalCleared) {
      if (pendingThemeName) {
        pendingThemeName = themeName;
      }

      return;
    }

    waitStartTime = Date.now();
    intervalCleared = false;
    timerId = setInterval(function () {
      var isLoaded = isPendingThemeLoaded();
      var isTimeout = !isLoaded && Date.now() - waitStartTime > defaultTimeout;

      if (isTimeout) {
        _ui.default.log('W0004', pendingThemeName);
      }

      if (isLoaded || isTimeout) {
        handleLoaded();
      }
    }, 10);
  }
}

function isPendingThemeLoaded() {
  if (!pendingThemeName) {
    return true;
  }

  var anyThemePending = pendingThemeName === ANY_THEME;

  if (initDeferred.state() === 'resolved' && anyThemePending) {
    return true;
  }

  var themeMarker = readThemeMarker();

  if (themeMarker && anyThemePending) {
    return true;
  }

  return themeMarker === pendingThemeName;
}

function processMarkup() {
  var $allThemeLinks = (0, _renderer.default)(DX_LINK_SELECTOR, context);

  if (!$allThemeLinks.length) {
    return;
  }

  knownThemes = {};
  $activeThemeLink = (0, _renderer.default)((0, _html_parser.parseHTML)('<link rel=stylesheet>'), context);
  $allThemeLinks.each(function () {
    var link = (0, _renderer.default)(this, context);
    var fullThemeName = link.attr(THEME_ATTR);
    var url = link.attr('href');
    var isActive = link.attr(ACTIVE_ATTR) === 'true';
    knownThemes[fullThemeName] = {
      url: url,
      isActive: isActive
    };
  });
  $allThemeLinks.last().after($activeThemeLink);
  $allThemeLinks.remove();
}

function resolveFullThemeName(desiredThemeName) {
  var desiredThemeParts = desiredThemeName ? desiredThemeName.split('.') : [];
  var result = null;

  if (knownThemes) {
    if (desiredThemeName in knownThemes) {
      return desiredThemeName;
    }

    (0, _iterator.each)(knownThemes, function (knownThemeName, themeData) {
      var knownThemeParts = knownThemeName.split('.');

      if (desiredThemeParts[0] && knownThemeParts[0] !== desiredThemeParts[0]) {
        return;
      }

      if (desiredThemeParts[1] && desiredThemeParts[1] !== knownThemeParts[1]) {
        return;
      }

      if (desiredThemeParts[2] && desiredThemeParts[2] !== knownThemeParts[2]) {
        return;
      }

      if (!result || themeData.isActive) {
        result = knownThemeName;
      }

      if (themeData.isActive) {
        return false;
      }
    });
  }

  return result;
}

function initContext(newContext) {
  try {
    if (newContext !== context) {
      knownThemes = null;
    }
  } catch (x) {
    // Cross-origin permission error
    knownThemes = null;
  }

  context = newContext;
}

function init(options) {
  options = options || {};
  initContext(options.context || _dom_adapter.default.getDocument());
  if (!context) return;
  processMarkup();
  currentThemeName = undefined;
  current(options);
}

function current(options) {
  if (!arguments.length) {
    currentThemeName = currentThemeName || readThemeMarker();
    return currentThemeName;
  }

  detachCssClasses(viewPort());
  options = options || {};

  if (typeof options === 'string') {
    options = {
      theme: options
    };
  }

  var isAutoInit = options._autoInit;
  var loadCallback = options.loadCallback;
  var currentThemeData;
  currentThemeName = resolveFullThemeName(options.theme || currentThemeName);

  if (currentThemeName) {
    currentThemeData = knownThemes[currentThemeName];
  }

  if (loadCallback) {
    _themes_callback.themeReadyCallback.add(loadCallback);
  }

  if (currentThemeData) {
    // NOTE:
    // 1. <link> element re-creation leads to incorrect CSS rules priority in Internet Explorer (T246821).
    // 2. We have no reliable info, why this hack has been applied and whether it is still relevant.
    // 3. This hack leads Internet Explorer crashing after icon font has been implemented.
    //    $activeThemeLink.removeAttr("href"); // this is for IE, to stop loading prev CSS
    $activeThemeLink.attr('href', knownThemes[currentThemeName].url);

    if (_themes_callback.themeReadyCallback.has() || initDeferred.state() !== 'resolved' || options._forceTimeout) {
      waitForThemeLoad(currentThemeName);
    }
  } else {
    if (isAutoInit) {
      if ((0, _window.hasWindow)()) {
        waitForThemeLoad(ANY_THEME);
      }

      _themes_callback.themeReadyCallback.fire();

      _themes_callback.themeReadyCallback.empty();
    } else {
      throw _ui.default.Error('E0021', currentThemeName);
    }
  }

  initDeferred.done(function () {
    return attachCssClasses((0, _view_port.originalViewPort)(), currentThemeName);
  });
}

function getCssClasses(themeName) {
  themeName = themeName || current();
  var result = [];
  var themeNameParts = themeName && themeName.split('.');

  if (themeNameParts) {
    result.push('dx-theme-' + themeNameParts[0], 'dx-theme-' + themeNameParts[0] + '-typography');

    if (themeNameParts.length > 1) {
      result.push('dx-color-scheme-' + themeNameParts[1] + (isMaterial(themeName) ? '-' + themeNameParts[2] : ''));
    }
  }

  return result;
}

var themeClasses;

function attachCssClasses(element, themeName) {
  themeClasses = getCssClasses(themeName).join(' ');
  (0, _renderer.default)(element).addClass(themeClasses);

  var activateHairlines = function activateHairlines() {
    var pixelRatio = (0, _window.hasWindow)() && window.devicePixelRatio;

    if (!pixelRatio || pixelRatio < 2) {
      return;
    }

    var $tester = (0, _renderer.default)('<div>');
    $tester.css('border', '.5px solid transparent');
    (0, _renderer.default)('body').append($tester);

    if ($tester.outerHeight() === 1) {
      (0, _renderer.default)(element).addClass(DX_HAIRLINES_CLASS);
      themeClasses += ' ' + DX_HAIRLINES_CLASS;
    }

    $tester.remove();
  };

  activateHairlines();
}

function detachCssClasses(element) {
  (0, _renderer.default)(element).removeClass(themeClasses);
}

function themeReady(callback) {
  _themes_callback.themeReadyCallback.add(callback);
}

function isTheme(themeRegExp, themeName) {
  if (!themeName) {
    themeName = currentThemeName || readThemeMarker();
  }

  return new RegExp(themeRegExp).test(themeName);
}

function isMaterial(themeName) {
  return isTheme('material', themeName);
}

function isGeneric(themeName) {
  return isTheme('generic', themeName);
}

function isDark(themeName) {
  return isTheme('dark', themeName);
}

function isWebFontLoaded(text, fontWeight) {
  var testedFont = 'Roboto, RobotoFallback, Arial';
  var etalonFont = 'Arial';

  var document = _dom_adapter.default.getDocument();

  var testElement = document.createElement('span');
  testElement.style.position = 'absolute';
  testElement.style.top = '-9999px';
  testElement.style.left = '-9999px';
  testElement.style.visibility = 'hidden';
  testElement.style.fontFamily = etalonFont;
  testElement.style.fontSize = '250px';
  testElement.style.fontWeight = fontWeight;
  testElement.innerHTML = text;
  document.body.appendChild(testElement);
  var etalonFontWidth = testElement.offsetWidth;
  testElement.style.fontFamily = testedFont;
  var testedFontWidth = testElement.offsetWidth;
  testElement.parentNode.removeChild(testElement);
  return etalonFontWidth !== testedFontWidth;
}

function waitWebFont(text, fontWeight) {
  var interval = 15;
  var timeout = 2000;
  return new _promise.default(function (resolve) {
    var check = function check() {
      if (isWebFontLoaded(text, fontWeight)) {
        clear();
      }
    };

    var clear = function clear() {
      clearInterval(intervalId);
      clearTimeout(timeoutId);
      resolve();
    };

    var intervalId = setInterval(check, interval);
    var timeoutId = setTimeout(clear, timeout);
  });
}

function autoInit() {
  init({
    _autoInit: true,
    _forceTimeout: true
  });

  if ((0, _renderer.default)(DX_LINK_SELECTOR, context).length) {
    throw _ui.default.Error('E0022');
  }
}

if ((0, _window.hasWindow)()) {
  autoInit();
} else {
  ready(autoInit);
}

viewPortChanged.add(function (viewPort, prevViewPort) {
  initDeferred.done(function () {
    detachCssClasses(prevViewPort);
    attachCssClasses(viewPort);
  });
});

_devices.default.changed.add(function () {
  init({
    _autoInit: true
  });
});

function resetTheme() {
  $activeThemeLink && $activeThemeLink.attr('href', 'about:blank');
  currentThemeName = null;
  pendingThemeName = null;
  initDeferred = new _deferred.Deferred();
}

function initialized(callback) {
  initDeferred.done(callback);
}

function setDefaultTimeout(timeout) {
  defaultTimeout = timeout;
}
/**
 * Added default export according to our documentation
 * https://js.devexpress.com/Documentation/ApiReference/Common/Utils/ui/themes/
 * */


var _default = {
  setDefaultTimeout: setDefaultTimeout,
  initialized: initialized,
  resetTheme: resetTheme,
  ready: themeReady,
  waitWebFont: waitWebFont,
  isWebFontLoaded: isWebFontLoaded,
  isDark: isDark,
  isGeneric: isGeneric,
  isMaterial: isMaterial,
  detachCssClasses: detachCssClasses,
  attachCssClasses: attachCssClasses,
  current: current,
  waitForThemeLoad: waitForThemeLoad,
  isPendingThemeLoaded: isPendingThemeLoaded
};
exports.default = _default;

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var callOnce = function callOnce(handler) {
  var result;

  var _wrappedHandler = function wrappedHandler() {
    result = handler.apply(this, arguments);

    _wrappedHandler = function wrappedHandler() {
      return result;
    };

    return result;
  };

  return function () {
    return _wrappedHandler.apply(this, arguments);
  };
};

var _default = callOnce;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.register = register;
exports.registry = void 0;

var _extend = __webpack_require__(2);

var registry = {};
exports.registry = registry;

function register(option, type, decoratorClass) {
  var decoratorsRegistry = registry;
  var decoratorConfig = {};
  decoratorConfig[option] = decoratorsRegistry[option] ? decoratorsRegistry[option] : {};
  decoratorConfig[option][type] = decoratorClass;
  (0, _extend.extend)(decoratorsRegistry, decoratorConfig);
}

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "stylePropPrefix", {
  enumerable: true,
  get: function get() {
    return _style.stylePropPrefix;
  }
});
Object.defineProperty(exports, "styleProp", {
  enumerable: true,
  get: function get() {
    return _style.styleProp;
  }
});
exports.nativeScrolling = exports.animation = exports.transitionEndEventName = exports.transition = exports.touch = exports.inputType = exports.supportProp = exports.pointerEvents = exports.touchEvents = exports.detectPointerEvent = exports.detectTouchEvents = void 0;

var _array = __webpack_require__(12);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _common = __webpack_require__(3);

var _call_once = _interopRequireDefault(__webpack_require__(32));

var _window = __webpack_require__(7);

var _devices = _interopRequireDefault(__webpack_require__(10));

var _style = __webpack_require__(73);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _getNavigator = (0, _window.getNavigator)(),
    maxTouchPoints = _getNavigator.maxTouchPoints,
    msMaxTouchPoints = _getNavigator.msMaxTouchPoints,
    pointerEnabled = _getNavigator.pointerEnabled;

var transitionEndEventNames = {
  'webkitTransition': 'webkitTransitionEnd',
  'MozTransition': 'transitionend',
  'OTransition': 'oTransitionEnd',
  'msTransition': 'MsTransitionEnd',
  'transition': 'transitionend'
};

var supportProp = function supportProp(prop) {
  return !!(0, _style.styleProp)(prop);
};

exports.supportProp = supportProp;

var isNativeScrollingSupported = function isNativeScrollingSupported() {
  var _devices$real = _devices.default.real(),
      platform = _devices$real.platform,
      version = _devices$real.version,
      isMac = _devices$real.mac;

  var isObsoleteAndroid = version && version[0] < 4 && platform === 'android';
  var isNativeScrollDevice = !isObsoleteAndroid && (0, _array.inArray)(platform, ['ios', 'android']) > -1 || isMac;
  return isNativeScrollDevice;
};

var inputType = function inputType(type) {
  if (type === 'text') {
    return true;
  }

  var input = _dom_adapter.default.createElement('input');

  try {
    input.setAttribute('type', type);
    input.value = 'wrongValue';
    return !input.value;
  } catch (e) {
    return false;
  }
};

exports.inputType = inputType;

var detectTouchEvents = function detectTouchEvents(hasWindowProperty, maxTouchPoints) {
  return (hasWindowProperty('ontouchstart') || !!maxTouchPoints) && !hasWindowProperty('callPhantom');
};

exports.detectTouchEvents = detectTouchEvents;

var detectPointerEvent = function detectPointerEvent(hasWindowProperty, pointerEnabled) {
  // TODO: remove the check of the 'pointerEnabled' when we drop IE support
  var isPointerEnabled = (0, _common.ensureDefined)(pointerEnabled, true);
  var canUsePointerEvent = (0, _common.ensureDefined)(pointerEnabled, false);
  return hasWindowProperty('PointerEvent') && isPointerEnabled || canUsePointerEvent;
};

exports.detectPointerEvent = detectPointerEvent;
var touchEvents = detectTouchEvents(_window.hasProperty, maxTouchPoints);
exports.touchEvents = touchEvents;
var pointerEvents = detectPointerEvent(_window.hasProperty, pointerEnabled);
exports.pointerEvents = pointerEvents;
var touchPointersPresent = !!maxTouchPoints || !!msMaxTouchPoints; ///#DEBUG

var touch = touchEvents || pointerEvents && touchPointersPresent;
exports.touch = touch;
var transition = (0, _call_once.default)(function () {
  return supportProp('transition');
});
exports.transition = transition;
var transitionEndEventName = (0, _call_once.default)(function () {
  return transitionEndEventNames[(0, _style.styleProp)('transition')];
});
exports.transitionEndEventName = transitionEndEventName;
var animation = (0, _call_once.default)(function () {
  return supportProp('animation');
});
exports.animation = animation;
var nativeScrolling = isNativeScrollingSupported();
exports.nativeScrolling = nativeScrolling;

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.focused = exports.tabbable = exports.focusable = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var focusableFn = function focusableFn(element, tabIndex) {
  if (!visible(element)) {
    return false;
  }

  var nodeName = element.nodeName.toLowerCase();
  var isTabIndexNotNaN = !isNaN(tabIndex);
  var isDisabled = element.disabled;
  var isDefaultFocus = /^(input|select|textarea|button|object|iframe)$/.test(nodeName);
  var isHyperlink = nodeName === 'a';
  var isFocusable = true;
  var isContentEditable = element.isContentEditable;

  if (isDefaultFocus || isContentEditable) {
    isFocusable = !isDisabled;
  } else {
    if (isHyperlink) {
      isFocusable = element.href || isTabIndexNotNaN;
    } else {
      isFocusable = isTabIndexNotNaN;
    }
  }

  return isFocusable;
};

function visible(element) {
  var $element = (0, _renderer.default)(element);
  return $element.is(':visible') && $element.css('visibility') !== 'hidden' && $element.parents().css('visibility') !== 'hidden';
}

var focusable = function focusable(index, element) {
  return focusableFn(element, (0, _renderer.default)(element).attr('tabIndex'));
};

exports.focusable = focusable;

var tabbable = function tabbable(index, element) {
  var tabIndex = (0, _renderer.default)(element).attr('tabIndex');
  return (isNaN(tabIndex) || tabIndex >= 0) && focusableFn(element, tabIndex);
}; // note: use this method instead of is(":focus")


exports.tabbable = tabbable;

var focused = function focused($element) {
  var element = (0, _renderer.default)($element).get(0);
  return _dom_adapter.default.getActiveElement() === element;
};

exports.focused = focused;

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.setErrorHandler = exports.handleError = exports.errorHandler = exports.errors = void 0;

var _error = _interopRequireDefault(__webpack_require__(71));

var _errors = _interopRequireDefault(__webpack_require__(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* @docid
* @name ErrorsData
*/
var errors = (0, _error.default)(_errors.default.ERROR_MESSAGES, {
  /**
  * @name ErrorsData.E4000
  */
  E4000: '[DevExpress.data]: {0}',

  /**
    * @name ErrorsData.E4001
    */
  E4001: 'Unknown aggregating function is detected: \'{0}\'',

  /**
  * @name ErrorsData.E4002
  */
  E4002: 'Unsupported OData protocol version is used',

  /**
  * @name ErrorsData.E4003
  */
  E4003: 'Unknown filter operation is used: {0}',

  /**
  * @name ErrorsData.E4004
  */
  E4004: 'The thenby() method is called before the sortby() method',

  /**
  * @name ErrorsData.E4005
  */
  E4005: 'Store requires a key expression for this operation',

  /**
  * @name ErrorsData.E4006
  */
  E4006: 'ArrayStore \'data\' option must be an array',

  /**
  * @name ErrorsData.E4007
  */
  E4007: 'Compound keys cannot be auto-generated',

  /**
  * @name ErrorsData.E4008
  */
  E4008: 'Attempt to insert an item with a duplicated key',

  /**
  * @name ErrorsData.E4009
  */
  E4009: 'Data item cannot be found',

  /**
  * @name ErrorsData.E4010
  */
  E4010: 'CustomStore does not support creating queries',

  /**
  * @name ErrorsData.E4011
  */
  E4011: 'Custom Store method is not implemented or is not a function: {0}',

  /**
  * @name ErrorsData.E4012
  */
  E4012: 'Custom Store method returns an invalid value: {0}',

  /**
  * @name ErrorsData.E4013
  */
  E4013: 'Local Store requires the \'name\' configuration option is specified',

  /**
  * @name ErrorsData.E4014
  */
  E4014: 'Unknown data type is specified for ODataStore: {0}',

  /**
  * @name ErrorsData.E4015
  */
  E4015: 'Unknown entity name or alias is used: {0}',

  /**
  * @name ErrorsData.E4016
  */
  E4016: 'The compileSetter(expr) method is called with \'self\' passed as a parameter',

  /**
  * @name ErrorsData.E4017
  */
  E4017: 'Keys cannot be modified',

  /**
  * @name ErrorsData.E4018
  */
  E4018: 'The server has returned a non-numeric value in a response to an item count request',

  /**
  * @name ErrorsData.E4019
  */
  E4019: 'Mixing of group operators inside a single group of filter expression is not allowed',

  /**
  * @name ErrorsData.E4020
  */
  E4020: 'Unknown store type is detected: {0}',

  /**
  * @name ErrorsData.E4021
  */
  E4021: 'The server response does not provide the totalCount value',

  /**
  * @name ErrorsData.E4022
  */
  E4022: 'The server response does not provide the groupCount value',

  /**
  * @name ErrorsData.E4023
  */
  E4023: 'Could not parse the following XML: {0}',

  /**
  * @name ErrorsData.E4024
  */
  E4024: 'String function {0} cannot be used with the data field {1} of type {2}.',

  /**
  * @name ErrorsData.W4000
  */
  W4000: 'Data returned from the server has an incorrect structure',

  /**
  * @name ErrorsData.W4001
  */
  W4001: 'The {0} field is listed in both "keyType" and "fieldTypes". The value of "fieldTypes" is used.',

  /**
  * @name ErrorsData.W4002
  */
  W4002: 'Data loading has failed for some cells due to the following error: {0}'
});
exports.errors = errors;
var errorHandler = null;
exports.errorHandler = errorHandler;

var handleError = function handleError(error) {
  var _errorHandler;

  ///#DEBUG
  var id = error && '__id' in error ? error.__id : 'E4000';
  errors.log(id, error); ///#ENDDEBUG

  (_errorHandler = errorHandler) === null || _errorHandler === void 0 ? void 0 : _errorHandler(error);
};

exports.handleError = handleError;

var setErrorHandler = function setErrorHandler(handler) {
  return exports.errorHandler = errorHandler = handler;
};

exports.setErrorHandler = setErrorHandler;

/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _window = __webpack_require__(7);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _errors = _interopRequireDefault(__webpack_require__(13));

var _element = __webpack_require__(20);

var _extend = __webpack_require__(2);

var _type = __webpack_require__(1);

var _iterator = __webpack_require__(4);

var _translator = __webpack_require__(16);

var _easing = __webpack_require__(140);

var _frame = __webpack_require__(55);

var _support = __webpack_require__(34);

var _position = _interopRequireDefault(__webpack_require__(56));

var _remove_event = __webpack_require__(75);

var _index = __webpack_require__(6);

var _deferred = __webpack_require__(9);

var _common = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var window = (0, _window.getWindow)();
var removeEventName = (0, _index.addNamespace)(_remove_event.removeEvent, 'dxFX');
var RELATIVE_VALUE_REGEX = /^([+-])=(.*)/i;
var ANIM_DATA_KEY = 'dxAnimData';
var ANIM_QUEUE_KEY = 'dxAnimQueue';
var TRANSFORM_PROP = 'transform';
var TransitionAnimationStrategy = {
  initAnimation: function initAnimation($element, config) {
    $element.css({
      'transitionProperty': 'none'
    });

    if (typeof config.from === 'string') {
      $element.addClass(config.from);
    } else {
      setProps($element, config.from);
    }

    var that = this;
    var deferred = new _deferred.Deferred();
    var cleanupWhen = config.cleanupWhen;
    config.transitionAnimation = {
      deferred: deferred,
      finish: function finish() {
        that._finishTransition($element);

        if (cleanupWhen) {
          (0, _deferred.when)(deferred, cleanupWhen).always(function () {
            that._cleanup($element, config);
          });
        } else {
          that._cleanup($element, config);
        }

        deferred.resolveWith($element, [config, $element]);
      }
    };

    this._completeAnimationCallback($element, config).done(function () {
      config.transitionAnimation.finish();
    }).fail(function () {
      deferred.rejectWith($element, [config, $element]);
    });

    if (!config.duration) {
      config.transitionAnimation.finish();
    } // NOTE: Hack for setting 'from' css by browser before run animation
    //       Do not move this hack to initAnimation since some css props can be changed in the 'start' callback (T231434)
    //       Unfortunately this can't be unit tested
    // TODO: find better way if possible


    $element.css('transform');
  },
  animate: function animate($element, config) {
    this._startAnimation($element, config);

    return config.transitionAnimation.deferred.promise();
  },
  _completeAnimationCallback: function _completeAnimationCallback($element, config) {
    var that = this;
    var startTime = Date.now() + config.delay;
    var deferred = new _deferred.Deferred();
    var transitionEndFired = new _deferred.Deferred();
    var simulatedTransitionEndFired = new _deferred.Deferred();
    var simulatedEndEventTimer;
    var transitionEndEventFullName = (0, _support.transitionEndEventName)() + '.dxFX';

    config.transitionAnimation.cleanup = function () {
      clearTimeout(simulatedEndEventTimer);
      clearTimeout(waitForJSCompleteTimer);

      _events_engine.default.off($element, transitionEndEventFullName);

      _events_engine.default.off($element, removeEventName);
    };

    _events_engine.default.one($element, transitionEndEventFullName, function () {
      // NOTE: prevent native transitionEnd event from previous animation in queue (Chrome)
      if (Date.now() - startTime >= config.duration) {
        transitionEndFired.reject();
      }
    });

    _events_engine.default.off($element, removeEventName);

    _events_engine.default.on($element, removeEventName, function () {
      that.stop($element, config);
      deferred.reject();
    });

    var waitForJSCompleteTimer = setTimeout(function () {
      // Fix for a visual bug (T244514): do not setup the timer until all js code has finished working
      simulatedEndEventTimer = setTimeout(function () {
        simulatedTransitionEndFired.reject();
      }, config.duration + config.delay + fx._simulatedTransitionEndDelay
      /* T255863 */
      );
      (0, _deferred.when)(transitionEndFired, simulatedTransitionEndFired).fail(function () {
        deferred.resolve();
      }.bind(this));
    });
    return deferred.promise();
  },
  _startAnimation: function _startAnimation($element, config) {
    $element.css({
      'transitionProperty': 'all',
      'transitionDelay': config.delay + 'ms',
      'transitionDuration': config.duration + 'ms',
      'transitionTimingFunction': config.easing
    });

    if (typeof config.to === 'string') {
      $element[0].className += ' ' + config.to; // Do not uncomment: performance critical
      // $element.addClass(config.to);
    } else if (config.to) {
      setProps($element, config.to);
    }
  },
  _finishTransition: function _finishTransition($element) {
    $element.css('transition', 'none');
  },
  _cleanup: function _cleanup($element, config) {
    config.transitionAnimation.cleanup();

    if (typeof config.from === 'string') {
      $element.removeClass(config.from);
      $element.removeClass(config.to);
    }
  },
  stop: function stop($element, config, jumpToEnd) {
    if (!config) {
      return;
    }

    if (jumpToEnd) {
      config.transitionAnimation.finish();
    } else {
      if ((0, _type.isPlainObject)(config.to)) {
        (0, _iterator.each)(config.to, function (key) {
          $element.css(key, $element.css(key));
        });
      }

      this._finishTransition($element);

      this._cleanup($element, config);
    }
  }
};
var FrameAnimationStrategy = {
  initAnimation: function initAnimation($element, config) {
    setProps($element, config.from);
  },
  animate: function animate($element, config) {
    var deferred = new _deferred.Deferred();
    var that = this;

    if (!config) {
      return deferred.reject().promise();
    }

    (0, _iterator.each)(config.to, function (prop) {
      if (config.from[prop] === undefined) {
        config.from[prop] = that._normalizeValue($element.css(prop));
      }
    });

    if (config.to[TRANSFORM_PROP]) {
      config.from[TRANSFORM_PROP] = that._parseTransform(config.from[TRANSFORM_PROP]);
      config.to[TRANSFORM_PROP] = that._parseTransform(config.to[TRANSFORM_PROP]);
    }

    config.frameAnimation = {
      to: config.to,
      from: config.from,
      currentValue: config.from,
      easing: (0, _easing.convertTransitionTimingFuncToEasing)(config.easing),
      duration: config.duration,
      startTime: new Date().valueOf(),
      finish: function finish() {
        this.currentValue = this.to;
        this.draw();
        (0, _frame.cancelAnimationFrame)(config.frameAnimation.animationFrameId);
        deferred.resolve();
      },
      draw: function draw() {
        if (config.draw) {
          config.draw(this.currentValue);
          return;
        }

        var currentValue = (0, _extend.extend)({}, this.currentValue);

        if (currentValue[TRANSFORM_PROP]) {
          currentValue[TRANSFORM_PROP] = (0, _iterator.map)(currentValue[TRANSFORM_PROP], function (value, prop) {
            if (prop === 'translate') {
              return (0, _translator.getTranslateCss)(value);
            } else if (prop === 'scale') {
              return 'scale(' + value + ')';
            } else if (prop.substr(0, prop.length - 1) === 'rotate') {
              return prop + '(' + value + 'deg)';
            }
          }).join(' ');
        }

        $element.css(currentValue);
      }
    };

    if (config.delay) {
      config.frameAnimation.startTime += config.delay;
      config.frameAnimation.delayTimeout = setTimeout(function () {
        that._startAnimation($element, config);
      }, config.delay);
    } else {
      that._startAnimation($element, config);
    }

    return deferred.promise();
  },
  _startAnimation: function _startAnimation($element, config) {
    _events_engine.default.off($element, removeEventName);

    _events_engine.default.on($element, removeEventName, function () {
      if (config.frameAnimation) {
        (0, _frame.cancelAnimationFrame)(config.frameAnimation.animationFrameId);
      }
    });

    this._animationStep($element, config);
  },
  _parseTransform: function _parseTransform(transformString) {
    var result = {};
    (0, _iterator.each)(transformString.match(/\w+\d*\w*\([^)]*\)\s*/g), function (i, part) {
      var translateData = (0, _translator.parseTranslate)(part);
      var scaleData = part.match(/scale\((.+?)\)/);
      var rotateData = part.match(/(rotate.)\((.+)deg\)/);

      if (translateData) {
        result.translate = translateData;
      }

      if (scaleData && scaleData[1]) {
        result.scale = parseFloat(scaleData[1]);
      }

      if (rotateData && rotateData[1]) {
        result[rotateData[1]] = parseFloat(rotateData[2]);
      }
    });
    return result;
  },
  stop: function stop($element, config, jumpToEnd) {
    var frameAnimation = config && config.frameAnimation;

    if (!frameAnimation) {
      return;
    }

    (0, _frame.cancelAnimationFrame)(frameAnimation.animationFrameId);
    clearTimeout(frameAnimation.delayTimeout);

    if (jumpToEnd) {
      frameAnimation.finish();
    }

    delete config.frameAnimation;
  },
  _animationStep: function _animationStep($element, config) {
    var frameAnimation = config && config.frameAnimation;

    if (!frameAnimation) {
      return;
    }

    var now = new Date().valueOf();

    if (now >= frameAnimation.startTime + frameAnimation.duration) {
      frameAnimation.finish();
      return;
    }

    frameAnimation.currentValue = this._calcStepValue(frameAnimation, now - frameAnimation.startTime);
    frameAnimation.draw();
    var that = this;
    frameAnimation.animationFrameId = (0, _frame.requestAnimationFrame)(function () {
      that._animationStep($element, config);
    });
  },
  _calcStepValue: function _calcStepValue(frameAnimation, currentDuration) {
    var calcValueRecursively = function calcValueRecursively(from, to) {
      var result = Array.isArray(to) ? [] : {};

      var calcEasedValue = function calcEasedValue(propName) {
        var x = currentDuration / frameAnimation.duration;
        var t = currentDuration;
        var b = 1 * from[propName];
        var c = to[propName] - from[propName];
        var d = frameAnimation.duration;
        return (0, _easing.getEasing)(frameAnimation.easing)(x, t, b, c, d);
      };

      (0, _iterator.each)(to, function (propName, endPropValue) {
        if (typeof endPropValue === 'string' && parseFloat(endPropValue, 10) === false) {
          return true;
        }

        result[propName] = _typeof(endPropValue) === 'object' ? calcValueRecursively(from[propName], endPropValue) : calcEasedValue(propName);
      });
      return result;
    };

    return calcValueRecursively(frameAnimation.from, frameAnimation.to);
  },
  _normalizeValue: function _normalizeValue(value) {
    var numericValue = parseFloat(value, 10);

    if (numericValue === false) {
      return value;
    }

    return numericValue;
  }
};
var FallbackToNoAnimationStrategy = {
  initAnimation: function initAnimation() {},
  animate: function animate() {
    return new _deferred.Deferred().resolve().promise();
  },
  stop: _common.noop,
  isSynchronous: true
};

var getAnimationStrategy = function getAnimationStrategy(config) {
  config = config || {};
  var animationStrategies = {
    'transition': (0, _support.transition)() ? TransitionAnimationStrategy : FrameAnimationStrategy,
    'frame': FrameAnimationStrategy,
    'noAnimation': FallbackToNoAnimationStrategy
  };
  var strategy = config.strategy || 'transition';

  if (config.type === 'css' && !(0, _support.transition)()) {
    strategy = 'noAnimation';
  }

  return animationStrategies[strategy];
};

var baseConfigValidator = function baseConfigValidator(config, animationType, validate, typeMessage) {
  (0, _iterator.each)(['from', 'to'], function () {
    if (!validate(config[this])) {
      throw _errors.default.Error('E0010', animationType, this, typeMessage);
    }
  });
};

var isObjectConfigValidator = function isObjectConfigValidator(config, animationType) {
  return baseConfigValidator(config, animationType, function (target) {
    return (0, _type.isPlainObject)(target);
  }, 'a plain object');
};

var isStringConfigValidator = function isStringConfigValidator(config, animationType) {
  return baseConfigValidator(config, animationType, function (target) {
    return typeof target === 'string';
  }, 'a string');
};

var CustomAnimationConfigurator = {
  setup: function setup() {}
};
var CssAnimationConfigurator = {
  validateConfig: function validateConfig(config) {
    isStringConfigValidator(config, 'css');
  },
  setup: function setup() {}
};
var positionAliases = {
  'top': {
    my: 'bottom center',
    at: 'top center'
  },
  'bottom': {
    my: 'top center',
    at: 'bottom center'
  },
  'right': {
    my: 'left center',
    at: 'right center'
  },
  'left': {
    my: 'right center',
    at: 'left center'
  }
};
var SlideAnimationConfigurator = {
  validateConfig: function validateConfig(config) {
    isObjectConfigValidator(config, 'slide');
  },
  setup: function setup($element, config) {
    var location = (0, _translator.locate)($element);

    if (config.type !== 'slide') {
      var positioningConfig = config.type === 'slideIn' ? config.from : config.to;
      positioningConfig.position = (0, _extend.extend)({
        of: window
      }, positionAliases[config.direction]);
      setupPosition($element, positioningConfig);
    }

    this._setUpConfig(location, config.from);

    this._setUpConfig(location, config.to);

    (0, _translator.clearCache)($element);
  },
  _setUpConfig: function _setUpConfig(location, config) {
    config.left = 'left' in config ? config.left : '+=0';
    config.top = 'top' in config ? config.top : '+=0';

    this._initNewPosition(location, config);
  },
  _initNewPosition: function _initNewPosition(location, config) {
    var position = {
      left: config.left,
      top: config.top
    };
    delete config.left;
    delete config.top;

    var relativeValue = this._getRelativeValue(position.left);

    if (relativeValue !== undefined) {
      position.left = relativeValue + location.left;
    } else {
      config.left = 0;
    }

    relativeValue = this._getRelativeValue(position.top);

    if (relativeValue !== undefined) {
      position.top = relativeValue + location.top;
    } else {
      config.top = 0;
    }

    config[TRANSFORM_PROP] = (0, _translator.getTranslateCss)({
      x: position.left,
      y: position.top
    });
  },
  _getRelativeValue: function _getRelativeValue(value) {
    var relativeValue;

    if (typeof value === 'string' && (relativeValue = RELATIVE_VALUE_REGEX.exec(value))) {
      return parseInt(relativeValue[1] + '1') * relativeValue[2];
    }
  }
};
var FadeAnimationConfigurator = {
  setup: function setup($element, config) {
    var from = config.from;
    var fromOpacity = (0, _type.isPlainObject)(from) ? config.skipElementInitialStyles ? 0 : $element.css('opacity') : String(from);
    var toOpacity;

    switch (config.type) {
      case 'fadeIn':
        toOpacity = 1;
        break;

      case 'fadeOut':
        toOpacity = 0;
        break;

      default:
        toOpacity = String(config.to);
    }

    config.from = {
      visibility: 'visible',
      opacity: fromOpacity
    };
    config.to = {
      opacity: toOpacity
    };
  }
};
var PopAnimationConfigurator = {
  validateConfig: function validateConfig(config) {
    isObjectConfigValidator(config, 'pop');
  },
  setup: function setup($element, config) {
    var from = config.from;
    var to = config.to;
    var fromOpacity = 'opacity' in from ? from.opacity : $element.css('opacity');
    var toOpacity = 'opacity' in to ? to.opacity : 1;
    var fromScale = 'scale' in from ? from.scale : 0;
    var toScale = 'scale' in to ? to.scale : 1;
    config.from = {
      opacity: fromOpacity
    };
    var translate = (0, _translator.getTranslate)($element);
    config.from[TRANSFORM_PROP] = this._getCssTransform(translate, fromScale);
    config.to = {
      opacity: toOpacity
    };
    config.to[TRANSFORM_PROP] = this._getCssTransform(translate, toScale);
  },
  _getCssTransform: function _getCssTransform(translate, scale) {
    return (0, _translator.getTranslateCss)(translate) + 'scale(' + scale + ')';
  }
};
var animationConfigurators = {
  'custom': CustomAnimationConfigurator,
  'slide': SlideAnimationConfigurator,
  'slideIn': SlideAnimationConfigurator,
  'slideOut': SlideAnimationConfigurator,
  'fade': FadeAnimationConfigurator,
  'fadeIn': FadeAnimationConfigurator,
  'fadeOut': FadeAnimationConfigurator,
  'pop': PopAnimationConfigurator,
  'css': CssAnimationConfigurator
};

var getAnimationConfigurator = function getAnimationConfigurator(config) {
  var result = animationConfigurators[config.type];

  if (!result) {
    throw _errors.default.Error('E0011', config.type);
  }

  return result;
};

var defaultJSConfig = {
  type: 'custom',
  from: {},
  to: {},
  duration: 400,
  start: _common.noop,
  complete: _common.noop,
  easing: 'ease',
  delay: 0
};
var defaultCssConfig = {
  duration: 400,
  easing: 'ease',
  delay: 0
};

function setupAnimationOnElement() {
  var animation = this;
  var $element = animation.element;
  var config = animation.config;
  setupPosition($element, config.from);
  setupPosition($element, config.to);
  animation.configurator.setup($element, config);
  $element.data(ANIM_DATA_KEY, animation);

  if (fx.off) {
    config.duration = 0;
    config.delay = 0;
  }

  animation.strategy.initAnimation($element, config);

  if (config.start) {
    var element = (0, _element.getPublicElement)($element);
    config.start.apply(this, [element, config]);
  }
}

var onElementAnimationComplete = function onElementAnimationComplete(animation) {
  var $element = animation.element;
  var config = animation.config;
  $element.removeData(ANIM_DATA_KEY);

  if (config.complete) {
    var element = (0, _element.getPublicElement)($element);
    config.complete.apply(this, [element, config]);
  }

  animation.deferred.resolveWith(this, [$element, config]);
};

var startAnimationOnElement = function startAnimationOnElement() {
  var animation = this;
  var $element = animation.element;
  var config = animation.config;
  animation.isStarted = true;
  return animation.strategy.animate($element, config).done(function () {
    onElementAnimationComplete(animation);
  }).fail(function () {
    animation.deferred.rejectWith(this, [$element, config]);
  });
};

var stopAnimationOnElement = function stopAnimationOnElement(jumpToEnd) {
  var animation = this;
  var $element = animation.element;
  var config = animation.config;
  clearTimeout(animation.startTimeout);

  if (!animation.isStarted) {
    animation.start();
  }

  animation.strategy.stop($element, config, jumpToEnd);
};

var scopedRemoveEvent = (0, _index.addNamespace)(_remove_event.removeEvent, 'dxFXStartAnimation');

var subscribeToRemoveEvent = function subscribeToRemoveEvent(animation) {
  _events_engine.default.off(animation.element, scopedRemoveEvent);

  _events_engine.default.on(animation.element, scopedRemoveEvent, function () {
    fx.stop(animation.element);
  });

  animation.deferred.always(function () {
    _events_engine.default.off(animation.element, scopedRemoveEvent);
  });
};

var createAnimation = function createAnimation(element, initialConfig) {
  var defaultConfig = initialConfig.type === 'css' ? defaultCssConfig : defaultJSConfig;
  var config = (0, _extend.extend)(true, {}, defaultConfig, initialConfig);
  var configurator = getAnimationConfigurator(config);
  var strategy = getAnimationStrategy(config);
  var animation = {
    element: (0, _renderer.default)(element),
    config: config,
    configurator: configurator,
    strategy: strategy,
    isSynchronous: strategy.isSynchronous,
    setup: setupAnimationOnElement,
    start: startAnimationOnElement,
    stop: stopAnimationOnElement,
    deferred: new _deferred.Deferred()
  };

  if ((0, _type.isFunction)(configurator.validateConfig)) {
    configurator.validateConfig(config);
  }

  subscribeToRemoveEvent(animation);
  return animation;
};

var animate = function animate(element, config) {
  var $element = (0, _renderer.default)(element);

  if (!$element.length) {
    return new _deferred.Deferred().resolve().promise();
  }

  var animation = createAnimation($element, config);
  pushInAnimationQueue($element, animation);
  return animation.deferred.promise();
};

function pushInAnimationQueue($element, animation) {
  var queueData = getAnimQueueData($element);
  writeAnimQueueData($element, queueData);
  queueData.push(animation);

  if (!isAnimating($element)) {
    shiftFromAnimationQueue($element, queueData);
  }
}

function getAnimQueueData($element) {
  return $element.data(ANIM_QUEUE_KEY) || [];
}

function writeAnimQueueData($element, queueData) {
  $element.data(ANIM_QUEUE_KEY, queueData);
}

var destroyAnimQueueData = function destroyAnimQueueData($element) {
  $element.removeData(ANIM_QUEUE_KEY);
};

function isAnimating($element) {
  return !!$element.data(ANIM_DATA_KEY);
}

function shiftFromAnimationQueue($element, queueData) {
  queueData = getAnimQueueData($element);

  if (!queueData.length) {
    return;
  }

  var animation = queueData.shift();

  if (queueData.length === 0) {
    destroyAnimQueueData($element);
  }

  executeAnimation(animation).done(function () {
    if (!isAnimating($element)) {
      shiftFromAnimationQueue($element);
    }
  });
}

function executeAnimation(animation) {
  animation.setup();

  if (fx.off || animation.isSynchronous) {
    animation.start();
  } else {
    animation.startTimeout = setTimeout(function () {
      animation.start();
    });
  }

  return animation.deferred.promise();
}

function setupPosition($element, config) {
  if (!config || !config.position) {
    return;
  }

  var win = (0, _renderer.default)(window);
  var left = 0;
  var top = 0;

  var position = _position.default.calculate($element, config.position);

  var offset = $element.offset();
  var currentPosition = $element.position();

  if (currentPosition.top > offset.top) {
    top = win.scrollTop();
  }

  if (currentPosition.left > offset.left) {
    left = win.scrollLeft();
  }

  (0, _extend.extend)(config, {
    left: position.h.location - offset.left + currentPosition.left - left,
    top: position.v.location - offset.top + currentPosition.top - top
  });
  delete config.position;
}

function setProps($element, props) {
  (0, _iterator.each)(props, function (key, value) {
    try {
      $element.css(key, (0, _type.isFunction)(value) ? value() : value);
    } catch (e) {}
  });
}

var stop = function stop(element, jumpToEnd) {
  var $element = (0, _renderer.default)(element);
  var queueData = getAnimQueueData($element); // TODO: think about complete all animation in queue

  (0, _iterator.each)(queueData, function (_, animation) {
    animation.config.delay = 0;
    animation.config.duration = 0;
    animation.isSynchronous = true;
  });

  if (!isAnimating($element)) {
    shiftFromAnimationQueue($element, queueData);
  }

  var animation = $element.data(ANIM_DATA_KEY);

  if (animation) {
    animation.stop(jumpToEnd);
  }

  $element.removeData(ANIM_DATA_KEY);
  destroyAnimQueueData($element);
};

var fx = {
  off: false,
  animationTypes: animationConfigurators,
  animate: animate,
  createAnimation: createAnimation,
  isAnimating: isAnimating,
  stop: stop,
  _simulatedTransitionEndDelay: 100
};
var _default = fx;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _iterator = __webpack_require__(4);

var _event_registrator_callbacks = _interopRequireDefault(__webpack_require__(87));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var registerEvent = function registerEvent(name, eventObject) {
  var strategy = {};

  if ('noBubble' in eventObject) {
    strategy.noBubble = eventObject.noBubble;
  }

  if ('bindType' in eventObject) {
    strategy.bindType = eventObject.bindType;
  }

  if ('delegateType' in eventObject) {
    strategy.delegateType = eventObject.delegateType;
  }

  (0, _iterator.each)(['setup', 'teardown', 'add', 'remove', 'trigger', 'handle', '_default', 'dispose'], function (_, methodName) {
    if (!eventObject[methodName]) {
      return;
    }

    strategy[methodName] = function () {
      var args = [].slice.call(arguments);
      args.unshift(this);
      return eventObject[methodName].apply(eventObject, args);
    };
  });

  _event_registrator_callbacks.default.fire(name, strategy);
};

registerEvent.callbacks = _event_registrator_callbacks.default;
var _default = registerEvent;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _element_data = __webpack_require__(25);

var _class = _interopRequireDefault(__webpack_require__(11));

var _extend = __webpack_require__(2);

var _array = __webpack_require__(12);

var _iterator = __webpack_require__(4);

var _event_registrator = _interopRequireDefault(__webpack_require__(38));

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _wheel = __webpack_require__(98);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MANAGER_EVENT = 'dxEventManager';
var EMITTER_DATA = 'dxEmitter';

var EventManager = _class.default.inherit({
  ctor: function ctor() {
    this._attachHandlers();

    this.reset();
    this._proxiedCancelHandler = this._cancelHandler.bind(this);
    this._proxiedAcceptHandler = this._acceptHandler.bind(this);
  },
  _attachHandlers: function _attachHandlers() {
    _ready_callbacks.default.add(function () {
      var document = _dom_adapter.default.getDocument();

      _events_engine.default.subscribeGlobal(document, (0, _index.addNamespace)(_pointer.default.down, MANAGER_EVENT), this._pointerDownHandler.bind(this));

      _events_engine.default.subscribeGlobal(document, (0, _index.addNamespace)(_pointer.default.move, MANAGER_EVENT), this._pointerMoveHandler.bind(this));

      _events_engine.default.subscribeGlobal(document, (0, _index.addNamespace)([_pointer.default.up, _pointer.default.cancel].join(' '), MANAGER_EVENT), this._pointerUpHandler.bind(this));

      _events_engine.default.subscribeGlobal(document, (0, _index.addNamespace)(_wheel.name, MANAGER_EVENT), this._mouseWheelHandler.bind(this));
    }.bind(this));
  },
  _eachEmitter: function _eachEmitter(callback) {
    var activeEmitters = this._activeEmitters || [];
    var i = 0;

    while (activeEmitters.length > i) {
      var emitter = activeEmitters[i];

      if (callback(emitter) === false) {
        break;
      }

      if (activeEmitters[i] === emitter) {
        i++;
      }
    }
  },
  _applyToEmitters: function _applyToEmitters(method, arg) {
    this._eachEmitter(function (emitter) {
      emitter[method].call(emitter, arg);
    });
  },
  reset: function reset() {
    this._eachEmitter(this._proxiedCancelHandler);

    this._activeEmitters = [];
  },
  resetEmitter: function resetEmitter(emitter) {
    this._proxiedCancelHandler(emitter);
  },
  _pointerDownHandler: function _pointerDownHandler(e) {
    if ((0, _index.isMouseEvent)(e) && e.which > 1) {
      return;
    }

    this._updateEmitters(e);
  },
  _updateEmitters: function _updateEmitters(e) {
    if (!this._isSetChanged(e)) {
      return;
    }

    this._cleanEmitters(e);

    this._fetchEmitters(e);
  },
  _isSetChanged: function _isSetChanged(e) {
    var currentSet = this._closestEmitter(e);

    var previousSet = this._emittersSet || [];
    var setChanged = currentSet.length !== previousSet.length;
    (0, _iterator.each)(currentSet, function (index, emitter) {
      setChanged = setChanged || previousSet[index] !== emitter;
      return !setChanged;
    });
    this._emittersSet = currentSet;
    return setChanged;
  },
  _closestEmitter: function _closestEmitter(e) {
    var that = this;
    var result = [];
    var $element = (0, _renderer.default)(e.target);

    function handleEmitter(_, emitter) {
      if (!!emitter && emitter.validatePointers(e) && emitter.validate(e)) {
        emitter.addCancelCallback(that._proxiedCancelHandler);
        emitter.addAcceptCallback(that._proxiedAcceptHandler);
        result.push(emitter);
      }
    }

    while ($element.length) {
      var emitters = (0, _element_data.data)($element.get(0), EMITTER_DATA) || [];
      (0, _iterator.each)(emitters, handleEmitter);
      $element = $element.parent();
    }

    return result;
  },
  _acceptHandler: function _acceptHandler(acceptedEmitter, e) {
    var that = this;

    this._eachEmitter(function (emitter) {
      if (emitter !== acceptedEmitter) {
        that._cancelEmitter(emitter, e);
      }
    });
  },
  _cancelHandler: function _cancelHandler(canceledEmitter, e) {
    this._cancelEmitter(canceledEmitter, e);
  },
  _cancelEmitter: function _cancelEmitter(emitter, e) {
    var activeEmitters = this._activeEmitters;

    if (e) {
      emitter.cancel(e);
    } else {
      emitter.reset();
    }

    emitter.removeCancelCallback();
    emitter.removeAcceptCallback();
    var emitterIndex = (0, _array.inArray)(emitter, activeEmitters);

    if (emitterIndex > -1) {
      activeEmitters.splice(emitterIndex, 1);
    }
  },
  _cleanEmitters: function _cleanEmitters(e) {
    this._applyToEmitters('end', e);

    this.reset(e);
  },
  _fetchEmitters: function _fetchEmitters(e) {
    this._activeEmitters = this._emittersSet.slice();

    this._applyToEmitters('start', e);
  },
  _pointerMoveHandler: function _pointerMoveHandler(e) {
    this._applyToEmitters('move', e);
  },
  _pointerUpHandler: function _pointerUpHandler(e) {
    this._updateEmitters(e);
  },
  _mouseWheelHandler: function _mouseWheelHandler(e) {
    if (!this._allowInterruptionByMouseWheel()) {
      return;
    }

    e.pointers = [null];

    this._pointerDownHandler(e);

    this._adjustWheelEvent(e);

    this._pointerMoveHandler(e);

    e.pointers = [];

    this._pointerUpHandler(e);
  },
  _allowInterruptionByMouseWheel: function _allowInterruptionByMouseWheel() {
    var allowInterruption = true;

    this._eachEmitter(function (emitter) {
      allowInterruption = emitter.allowInterruptionByMouseWheel() && allowInterruption;
      return allowInterruption;
    });

    return allowInterruption;
  },
  _adjustWheelEvent: function _adjustWheelEvent(e) {
    var closestGestureEmitter = null;

    this._eachEmitter(function (emitter) {
      if (!emitter.gesture) {
        return;
      }

      var direction = emitter.getDirection(e);

      if (direction !== 'horizontal' && !e.shiftKey || direction !== 'vertical' && e.shiftKey) {
        closestGestureEmitter = emitter;
        return false;
      }
    });

    if (!closestGestureEmitter) {
      return;
    }

    var direction = closestGestureEmitter.getDirection(e);
    var verticalGestureDirection = direction === 'both' && !e.shiftKey || direction === 'vertical';
    var prop = verticalGestureDirection ? 'pageY' : 'pageX';
    e[prop] += e.delta;
  },
  isActive: function isActive(element) {
    var result = false;

    this._eachEmitter(function (emitter) {
      result = result || emitter.getElement().is(element);
    });

    return result;
  }
});

var eventManager = new EventManager();
var EMITTER_SUBSCRIPTION_DATA = 'dxEmitterSubscription';

var registerEmitter = function registerEmitter(emitterConfig) {
  var emitterClass = emitterConfig.emitter;
  var emitterName = emitterConfig.events[0];
  var emitterEvents = emitterConfig.events;
  (0, _iterator.each)(emitterEvents, function (_, eventName) {
    (0, _event_registrator.default)(eventName, {
      noBubble: !emitterConfig.bubble,
      setup: function setup(element) {
        var subscriptions = (0, _element_data.data)(element, EMITTER_SUBSCRIPTION_DATA) || {};
        var emitters = (0, _element_data.data)(element, EMITTER_DATA) || {};
        var emitter = emitters[emitterName] || new emitterClass(element);
        subscriptions[eventName] = true;
        emitters[emitterName] = emitter;
        (0, _element_data.data)(element, EMITTER_DATA, emitters);
        (0, _element_data.data)(element, EMITTER_SUBSCRIPTION_DATA, subscriptions);
      },
      add: function add(element, handleObj) {
        var emitters = (0, _element_data.data)(element, EMITTER_DATA);
        var emitter = emitters[emitterName];
        emitter.configure((0, _extend.extend)({
          delegateSelector: handleObj.selector
        }, handleObj.data), handleObj.type);
      },
      teardown: function teardown(element) {
        var subscriptions = (0, _element_data.data)(element, EMITTER_SUBSCRIPTION_DATA);
        var emitters = (0, _element_data.data)(element, EMITTER_DATA);
        var emitter = emitters[emitterName];
        delete subscriptions[eventName];
        var disposeEmitter = true;
        (0, _iterator.each)(emitterEvents, function (_, eventName) {
          disposeEmitter = disposeEmitter && !subscriptions[eventName];
          return disposeEmitter;
        });

        if (disposeEmitter) {
          if (eventManager.isActive(element)) {
            eventManager.resetEmitter(emitter);
          }

          emitter && emitter.dispose();
          delete emitters[emitterName];
        }
      }
    });
  });
};

var _default = registerEmitter;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.adjust = adjust;
exports.getPrecision = getPrecision;
exports.getExponent = getExponent;
exports.getRoot = getRoot;
exports.solveCubicEquation = solveCubicEquation;
exports.trunc = trunc;
exports.roundFloatPart = roundFloatPart;
exports.getExponentLength = getExponentLength;
exports.getRemainderByDivision = getRemainderByDivision;
exports.inRange = exports.fitIntoRange = exports.sign = void 0;

var _type = __webpack_require__(1);

var sign = function sign(value) {
  if (value === 0) {
    return 0;
  }

  return value / Math.abs(value);
};

exports.sign = sign;

var fitIntoRange = function fitIntoRange(value, minValue, maxValue) {
  var isMinValueUndefined = !minValue && minValue !== 0;
  var isMaxValueUndefined = !maxValue && maxValue !== 0;
  isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);
  isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);
  return Math.min(Math.max(value, minValue), maxValue);
};

exports.fitIntoRange = fitIntoRange;

var inRange = function inRange(value, minValue, maxValue) {
  return value >= minValue && value <= maxValue;
};

exports.inRange = inRange;

function getExponent(value) {
  return Math.abs(parseInt(value.toExponential().split('e')[1]));
} // T570217


function _isEdgeBug() {
  var value = 0.0003;
  var correctValue = '0.000300';
  var precisionValue = 3;
  return correctValue !== value.toPrecision(precisionValue);
}

function adjust(value, interval) {
  var precision = getPrecision(interval || 0) + 2;
  var separatedValue = value.toString().split('.');
  var sourceValue = value;
  var absValue = Math.abs(value);
  var separatedAdjustedValue;
  var isExponentValue = (0, _type.isExponential)(value);
  var integerPart = absValue > 1 ? 10 : 0;

  if (separatedValue.length === 1) {
    return value;
  }

  if (!isExponentValue) {
    if ((0, _type.isExponential)(interval)) {
      precision = separatedValue[0].length + getExponent(interval);
    }

    value = absValue;
    value = value - Math.floor(value) + integerPart;
  }

  precision = _isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7; // fix toPrecision() bug in Edge (T570217)

  if (!isExponentValue) {
    separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split('.');

    if (separatedAdjustedValue[0] === integerPart.toString()) {
      return parseFloat(separatedValue[0] + '.' + separatedAdjustedValue[1]);
    }
  }

  return parseFloat(sourceValue.toPrecision(precision));
}

function getPrecision(value) {
  var str = value.toString();

  if (str.indexOf('.') < 0) {
    return 0;
  }

  var mantissa = str.split('.');
  var positionOfDelimiter = mantissa[1].indexOf('e');
  return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length;
}

function getRoot(x, n) {
  if (x < 0 && n % 2 !== 1) {
    return NaN;
  }

  var y = Math.pow(Math.abs(x), 1 / n);
  return n % 2 === 1 && x < 0 ? -y : y;
}

function solveCubicEquation(a, b, c, d) {
  var min = 1e-8;

  if (Math.abs(a) < min) {
    a = b;
    b = c;
    c = d;

    if (Math.abs(a) < min) {
      a = b;
      b = c;

      if (Math.abs(a) < min) {
        return [];
      }

      return [-b / a];
    }

    var D2 = b * b - 4 * a * c;

    if (Math.abs(D2) < min) {
      return [-b / (2 * a)];
    } else if (D2 > 0) {
      return [(-b + Math.sqrt(D2)) / (2 * a), (-b - Math.sqrt(D2)) / (2 * a)];
    }

    return [];
  }

  var p = (3 * a * c - b * b) / (3 * a * a);
  var q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);
  var roots;
  var u;

  if (Math.abs(p) < min) {
    roots = [getRoot(-q, 3)];
  } else if (Math.abs(q) < min) {
    roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);
  } else {
    var D3 = q * q / 4 + p * p * p / 27;

    if (Math.abs(D3) < min) {
      roots = [-1.5 * q / p, 3 * q / p];
    } else if (D3 > 0) {
      u = getRoot(-q / 2 - Math.sqrt(D3), 3);
      roots = [u - p / (3 * u)];
    } else {
      u = 2 * Math.sqrt(-p / 3);
      var t = Math.acos(3 * q / p / u) / 3;
      var k = 2 * Math.PI / 3;
      roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)];
    }
  }

  for (var i = 0; i < roots.length; i++) {
    roots[i] -= b / (3 * a);
  }

  return roots;
}

function trunc(value) {
  return Math.trunc ? Math.trunc(value) : value > 0 ? Math.floor(value) : Math.ceil(value);
}

function getRemainderByDivision(dividend, divider, digitsCount) {
  if (divider === parseInt(divider)) {
    return dividend % divider;
  }

  var quotient = roundFloatPart(dividend / divider, digitsCount);
  return (quotient - parseInt(quotient)) * divider;
}

function getExponentLength(value) {
  var _valueString$split$;

  var valueString = value.toString();
  return ((_valueString$split$ = valueString.split('.')[1]) === null || _valueString$split$ === void 0 ? void 0 : _valueString$split$.length) || parseInt(valueString.split('e-')[1]) || 0;
}

function roundFloatPart(value) {
  var digitsCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return parseFloat(value.toFixed(digitsCount));
}

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _utils = __webpack_require__(59);

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _themes = __webpack_require__(31);

var _action = _interopRequireDefault(__webpack_require__(61));

var _validation_engine = _interopRequireDefault(__webpack_require__(101));

var _ui = _interopRequireDefault(__webpack_require__(42));

var _short = __webpack_require__(64);

var _extend = __webpack_require__(2);

var _function_template = __webpack_require__(103);

var _icon = __webpack_require__(93);

var _element = __webpack_require__(20);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// STYLE button
var ANONYMOUS_TEMPLATE_NAME = 'content';

var Button = /*#__PURE__*/function (_Widget) {
  _inheritsLoose(Button, _Widget);

  function Button() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _Widget.call.apply(_Widget, [this].concat(args)) || this;
    _this._feedbackHideTimeout = 100;
    return _this;
  }

  var _proto = Button.prototype;

  _proto._$content = function _$content() {
    return this.$element().find('.dx-button-content');
  };

  _proto._$submitInput = function _$submitInput() {
    return this.$element().find('.dx-button-submit-input');
  };

  _proto._attachActiveEvents = function _attachActiveEvents(active, inactive) {
    var $el = this._eventBindingTarget();

    var namespace = 'inkRipple';
    var selector = this._activeStateUnit;

    _short.active.off($el, {
      namespace: namespace,
      selector: selector
    });

    _short.active.on($el, new _action.default(active), new _action.default(inactive, {
      excludeValidators: ['disabled', 'readOnly']
    }), {
      showTimeout: this._feedbackShowTimeout,
      hideTimeout: this._feedbackHideTimeout,
      selector: selector,
      namespace: namespace
    });
  };

  _proto._defaultOptionsRules = function _defaultOptionsRules() {
    return _Widget.prototype._defaultOptionsRules.call(this).concat([{
      device: function device() {
        return _devices.default.real().deviceType === 'desktop' && !_devices.default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }, {
      device: function device() {
        return (0, _themes.isMaterial)((0, _themes.current)());
      },
      options: {
        useInkRipple: true
      }
    }]);
  };

  _proto._executeClickAction = function _executeClickAction(event) {
    this._clickAction({
      validationGroup: this._validationGroupConfig,
      event: event
    });
  };

  _proto._findGroup = function _findGroup() {
    var $element = this.$element();

    var model = this._modelByElement($element);

    var _this$option = this.option(),
        validationGroup = _this$option.validationGroup;

    return validationGroup || _validation_engine.default.findGroup($element, model);
  };

  _proto._getContentData = function _getContentData() {
    var _this$option2 = this.option(),
        icon = _this$option2.icon,
        text = _this$option2.text,
        type = _this$option2.type,
        _templateData = _this$option2._templateData;

    return (0, _extend.extend)({
      icon: type === 'back' && !icon ? 'back' : icon,
      text: text
    }, _templateData);
  };

  _proto._getDefaultOptions = function _getDefaultOptions() {
    return (0, _extend.extend)(_Widget.prototype._getDefaultOptions.call(this), {
      hoverStateEnabled: true,
      onClick: null,
      type: 'normal',
      text: '',
      icon: '',
      iconPosition: 'left',
      validationGroup: undefined,
      activeStateEnabled: true,
      template: 'content',
      useSubmitBehavior: false,
      useInkRipple: false,
      _templateData: {},
      stylingMode: 'contained'
    });
  };

  _proto._getSubmitAction = function _getSubmitAction() {
    var _this2 = this;

    var needValidate = true;
    var validationStatus = 'valid';
    return this._createAction(function (_ref) {
      var event = _ref.event;

      if (needValidate) {
        var validationGroup = _this2._validationGroupConfig;

        if (validationGroup) {
          var _validationGroup$vali = validationGroup.validate(),
              status = _validationGroup$vali.status,
              complete = _validationGroup$vali.complete;

          validationStatus = status;

          if (status === 'pending') {
            needValidate = false;

            _this2.option('disabled', true);

            complete.then(function (_ref2) {
              var status = _ref2.status;

              _this2.option('disabled', false);

              validationStatus = status;
              validationStatus === 'valid' && _this2._submitInput().click();
              needValidate = true;
            });
          }
        }
      }

      validationStatus !== 'valid' && event.preventDefault();
      event.stopPropagation();
    });
  };

  _proto._initMarkup = function _initMarkup() {
    this.$element().addClass('dx-button');

    this._renderType();

    this._renderStylingMode();

    this._renderInkRipple();

    this._renderClick();

    this._updateAriaLabel();

    _Widget.prototype._initMarkup.call(this);

    this._updateContent();

    this.setAria('role', 'button');
  };

  _proto._getAnonymousTemplateName = function _getAnonymousTemplateName() {
    return ANONYMOUS_TEMPLATE_NAME;
  };

  _proto._initTemplates = function _initTemplates() {
    var _this3 = this;

    this._templateManager.addDefaultTemplates({
      content: new _function_template.FunctionTemplate(function (_ref3) {
        var _ref3$model = _ref3.model,
            model = _ref3$model === void 0 ? {} : _ref3$model,
            container = _ref3.container;
        var text = model.text,
            icon = model.icon;

        var _this3$option = _this3.option(),
            iconPosition = _this3$option.iconPosition;

        var $icon = (0, _icon.getImageContainer)(icon);
        var $textContainer = text && (0, _renderer.default)('<span>').text(text).addClass('dx-button-text');
        var $container = (0, _renderer.default)(container);
        $container.append($textContainer);

        if (iconPosition === 'left') {
          $container.prepend($icon);
        } else {
          $icon.addClass('dx-icon-right');
          $container.append($icon);
        }
      })
    });

    _Widget.prototype._initTemplates.call(this);
  };

  _proto._optionChanged = function _optionChanged(args) {
    var name = args.name;

    switch (name) {
      case 'onClick':
        this._updateClick();

        break;

      case 'icon':
      case 'text':
        this._updateContent();

        this._updateAriaLabel();

        break;

      case 'type':
        this._updateType();

        this._updateContent();

        break;

      case '_templateData':
        break;

      case 'template':
      case 'iconPosition':
        this._updateContent();

        break;

      case 'stylingMode':
        this._updateStylingMode();

        break;

      case 'useSubmitBehavior':
        this._updateSubmitInput();

        break;

      case 'useInkRipple':
        this._invalidate();

        break;

      default:
        _Widget.prototype._optionChanged.call(this, args);

    }
  };

  _proto._renderClick = function _renderClick() {
    var _this4 = this;

    var $el = this.$element();

    _short.dxClick.off($el, {
      namespace: this.NAME
    });

    _short.dxClick.on($el, function (event) {
      return _this4._executeClickAction(event);
    }, {
      namespace: this.NAME
    });

    this._updateClick();
  };

  _proto._renderInkRipple = function _renderInkRipple() {
    var _this5 = this;

    var _this$option3 = this.option(),
        text = _this$option3.text,
        icon = _this$option3.icon,
        type = _this$option3.type,
        useInkRipple = _this$option3.useInkRipple;

    if (useInkRipple) {
      var isOnlyIconButton = !text && icon || type === 'back';

      var _inkRipple = (0, _utils.render)(isOnlyIconButton ? {
        waveSizeCoefficient: 1,
        useHoldAnimation: false,
        isCentered: true
      } : {});

      var changeWaveVisibility = function changeWaveVisibility(event, visible) {
        var _this5$option = _this5.option(),
            activeStateEnabled = _this5$option.activeStateEnabled,
            useInkRipple = _this5$option.useInkRipple;

        if (useInkRipple && activeStateEnabled && !_this5._disposed) {
          var config = {
            element: _this5._$content(),
            event: event
          };
          visible ? _inkRipple.showWave(config) : _inkRipple.hideWave(config);
        }
      };

      this._attachActiveEvents(function (_ref4) {
        var event = _ref4.event;
        return changeWaveVisibility(event, true);
      }, function (_ref5) {
        var event = _ref5.event;
        return changeWaveVisibility(event);
      });
    }
  };

  _proto._renderStylingMode = function _renderStylingMode() {
    var $element = this.$element();

    var _this$option4 = this.option(),
        stylingMode = _this$option4.stylingMode;

    if (['contained', 'text', 'outlined'].indexOf(stylingMode) === -1) {
      stylingMode = this._getDefaultOptions().stylingMode;
    }

    $element.addClass("dx-button-mode-".concat(stylingMode));
  };

  _proto._renderSubmitInput = function _renderSubmitInput() {
    var _this$option5 = this.option(),
        useSubmitBehavior = _this$option5.useSubmitBehavior;

    if (useSubmitBehavior) {
      var submitAction = this._getSubmitAction();

      var $content = this._$content();

      (0, _renderer.default)('<input>').attr('type', 'submit').attr('tabindex', -1).addClass('dx-button-submit-input').appendTo($content);

      _short.click.on(this._$submitInput(), function (event) {
        return submitAction({
          event: event
        });
      });
    }
  };

  _proto._renderType = function _renderType() {
    var _this$option6 = this.option(),
        type = _this$option6.type;

    var $element = this.$element();
    type && $element.addClass("dx-button-".concat(type));
  };

  _proto._submitInput = function _submitInput() {
    return this._$submitInput().get(0);
  };

  _proto._supportedKeys = function _supportedKeys() {
    var _this6 = this;

    var click = function click(e) {
      e.preventDefault();

      _this6._executeClickAction(e);
    };

    return (0, _extend.extend)(_Widget.prototype._supportedKeys.call(this), {
      space: click,
      enter: click
    });
  };

  _proto._updateAriaLabel = function _updateAriaLabel() {
    var ariaTarget = this._getAriaTarget();

    var _this$option7 = this.option(),
        icon = _this$option7.icon,
        text = _this$option7.text;

    if (!text) {
      if ((0, _icon.getImageSourceType)(icon) === 'image') {
        icon = icon.indexOf('base64') === -1 ? icon.replace(/.+\/([^.]+)\..+$/, '$1') : 'Base64';
      }

      text = icon || '';
    }

    ariaTarget.attr('aria-label', text || null);
  };

  _proto._updateClick = function _updateClick() {
    var _this7 = this;

    this._clickAction = this._createActionByOption('onClick', {
      excludeValidators: ['readOnly'],
      afterExecute: function afterExecute() {
        var _this7$option = _this7.option(),
            useSubmitBehavior = _this7$option.useSubmitBehavior;

        useSubmitBehavior && setTimeout(function () {
          return _this7._submitInput().click();
        });
      }
    });
  };

  _proto._updateContent = function _updateContent() {
    var $element = this.$element();

    var $content = this._$content();

    var data = this._getContentData();

    var _this$option8 = this.option(),
        template = _this$option8.template,
        iconPosition = _this$option8.iconPosition;

    var icon = data.icon,
        text = data.text;
    $content.length ? $content.empty() : $content = (0, _renderer.default)('<div>').addClass('dx-button-content').appendTo($element);
    $element.toggleClass('dx-button-has-icon', !!icon).toggleClass('dx-button-icon-right', !!icon && iconPosition !== 'left').toggleClass('dx-button-has-text', !!text);
    var $template = (0, _renderer.default)(this._getTemplateByOption('template').render({
      model: data,
      container: (0, _element.getPublicElement)($content),
      transclude: this._templateManager.anonymousTemplateName === template
    }));

    if ($template.hasClass('dx-template-wrapper')) {
      $template.addClass('dx-button-content');
      $content.replaceWith($template);
    }

    this._updateSubmitInput();
  };

  _proto._updateSubmitInput = function _updateSubmitInput() {
    var _this$option9 = this.option(),
        useSubmitBehavior = _this$option9.useSubmitBehavior;

    var $submitInput = this._$submitInput();

    if (!useSubmitBehavior && $submitInput.length) {
      $submitInput.remove();
    } else if (useSubmitBehavior && !$submitInput.length) {
      this._renderSubmitInput();
    }
  };

  _proto._updateStylingMode = function _updateStylingMode() {
    var $element = this.$element();
    ['contained', 'text', 'outlined'].map(function (mode) {
      return "dx-button-mode-".concat(mode);
    }).forEach(function (className) {
      $element.removeClass(className);
    });

    this._renderStylingMode();
  };

  _proto._updateType = function _updateType() {
    var $element = this.$element();
    ['back', 'danger', 'default', 'normal', 'success'].map(function (type) {
      return "dx-button-".concat(type);
    }).forEach(function (className) {
      $element.removeClass(className);
    });

    this._renderType();
  };

  _createClass(Button, [{
    key: "_validationGroupConfig",
    get: function get() {
      return _validation_engine.default.getGroupConfig(this._findGroup());
    }
  }]);

  return Button;
}(_ui.default);

(0, _component_registrator.default)('dxButton', Button);
var _default = Button;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _action = _interopRequireDefault(__webpack_require__(61));

var _dom_component = _interopRequireDefault(__webpack_require__(62));

var _short = __webpack_require__(64);

var _common = __webpack_require__(3);

var _iterator = __webpack_require__(4);

var _extend2 = __webpack_require__(2);

var _selectors = __webpack_require__(35);

var _array = __webpack_require__(12);

var _type = __webpack_require__(1);

__webpack_require__(30);

__webpack_require__(79);

__webpack_require__(106);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function setAttribute(name, value, target) {
  name = name === 'role' || name === 'id' ? name : "aria-".concat(name);
  value = (0, _type.isDefined)(value) ? value.toString() : null;
  target.attr(name, value);
}

var Widget = _dom_component.default.inherit({
  _feedbackHideTimeout: 400,
  _feedbackShowTimeout: 30,
  _supportedKeys: function _supportedKeys() {
    return {};
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend2.extend)(this.callBase(), {
      hoveredElement: null,
      isActive: false,
      disabled: false,
      visible: true,
      hint: undefined,
      activeStateEnabled: false,
      onContentReady: null,
      hoverStateEnabled: false,
      focusStateEnabled: false,
      tabIndex: 0,
      accessKey: undefined,

      /**
      * @name WidgetOptions.onFocusIn
      * @extends Action
      * @action
      * @hidden
      */
      onFocusIn: null,

      /**
      * @name WidgetOptions.onFocusOut
      * @extends Action
      * @action
      * @hidden
      */
      onFocusOut: null,
      onKeyboardHandled: null,
      ignoreParentReadOnly: false
    });
  },
  _init: function _init() {
    this.callBase();

    this._initContentReadyAction();
  },
  _innerWidgetOptionChanged: function _innerWidgetOptionChanged(innerWidget, args) {
    var options = Widget.getOptionsFromContainer(args);
    innerWidget && innerWidget.option(options);

    this._options.cache(args.name, options);
  },
  _bindInnerWidgetOptions: function _bindInnerWidgetOptions(innerWidget, optionsContainer) {
    var _this = this;

    var syncOptions = function syncOptions() {
      return _this._options.silent(optionsContainer, (0, _extend2.extend)({}, innerWidget.option()));
    };

    syncOptions();
    innerWidget.on('optionChanged', syncOptions);
  },
  _getAriaTarget: function _getAriaTarget() {
    return this._focusTarget();
  },
  _initContentReadyAction: function _initContentReadyAction() {
    this._contentReadyAction = this._createActionByOption('onContentReady', {
      excludeValidators: ['disabled', 'readOnly']
    });
  },
  _initMarkup: function _initMarkup() {
    var _this$option = this.option(),
        disabled = _this$option.disabled,
        visible = _this$option.visible;

    this.$element().addClass('dx-widget');

    this._toggleDisabledState(disabled);

    this._toggleVisibility(visible);

    this._renderHint();

    this._isFocusable() && this._renderFocusTarget();
    this.callBase();
  },
  _render: function _render() {
    this.callBase();

    this._renderContent();

    this._renderFocusState();

    this._attachFeedbackEvents();

    this._attachHoverEvents();

    this._toggleIndependentState();
  },
  _renderHint: function _renderHint() {
    var _this$option2 = this.option(),
        hint = _this$option2.hint;

    this.$element().attr('title', hint || null);
  },
  _renderContent: function _renderContent() {
    var _this2 = this;

    (0, _common.deferRender)(function () {
      return !_this2._disposed ? _this2._renderContentImpl() : void 0;
    }).done(function () {
      return !_this2._disposed ? _this2._fireContentReadyAction() : void 0;
    });
  },
  _renderContentImpl: _common.noop,
  _fireContentReadyAction: (0, _common.deferRenderer)(function () {
    return this._contentReadyAction();
  }),
  _dispose: function _dispose() {
    this._contentReadyAction = null;

    this._detachKeyboardEvents();

    this.callBase();
  },
  _resetActiveState: function _resetActiveState() {
    this._toggleActiveState(this._eventBindingTarget(), false);
  },
  _clean: function _clean() {
    this._cleanFocusState();

    this._resetActiveState();

    this.callBase();
    this.$element().empty();
  },
  _toggleVisibility: function _toggleVisibility(visible) {
    this.$element().toggleClass('dx-state-invisible', !visible);
    this.setAria('hidden', !visible || void 0);
  },
  _renderFocusState: function _renderFocusState() {
    this._attachKeyboardEvents();

    if (this._isFocusable()) {
      this._renderFocusTarget();

      this._attachFocusEvents();

      this._renderAccessKey();
    }
  },
  _renderAccessKey: function _renderAccessKey() {
    var $el = this._focusTarget();

    var _this$option3 = this.option(),
        accessKey = _this$option3.accessKey;

    $el.attr('accesskey', accessKey);
  },
  _isFocusable: function _isFocusable() {
    var _this$option4 = this.option(),
        focusStateEnabled = _this$option4.focusStateEnabled,
        disabled = _this$option4.disabled;

    return focusStateEnabled && !disabled;
  },
  _eventBindingTarget: function _eventBindingTarget() {
    return this.$element();
  },
  _focusTarget: function _focusTarget() {
    return this._getActiveElement();
  },
  _getActiveElement: function _getActiveElement() {
    var activeElement = this._eventBindingTarget();

    if (this._activeStateUnit) {
      return activeElement.find(this._activeStateUnit).not('.dx-state-disabled');
    }

    return activeElement;
  },
  _renderFocusTarget: function _renderFocusTarget() {
    var _this$option5 = this.option(),
        tabIndex = _this$option5.tabIndex;

    this._focusTarget().attr('tabIndex', tabIndex);
  },
  _keyboardEventBindingTarget: function _keyboardEventBindingTarget() {
    return this._eventBindingTarget();
  },
  _refreshFocusEvent: function _refreshFocusEvent() {
    this._detachFocusEvents();

    this._attachFocusEvents();
  },
  _focusEventTarget: function _focusEventTarget() {
    return this._focusTarget();
  },
  _focusInHandler: function _focusInHandler(event) {
    var _this3 = this;

    if (!event.isDefaultPrevented()) {
      this._createActionByOption('onFocusIn', {
        beforeExecute: function beforeExecute() {
          return _this3._updateFocusState(event, true);
        },
        excludeValidators: ['readOnly']
      })({
        event: event
      });
    }
  },
  _focusOutHandler: function _focusOutHandler(event) {
    var _this4 = this;

    if (!event.isDefaultPrevented()) {
      this._createActionByOption('onFocusOut', {
        beforeExecute: function beforeExecute() {
          return _this4._updateFocusState(event, false);
        },
        excludeValidators: ['readOnly', 'disabled']
      })({
        event: event
      });
    }
  },
  _updateFocusState: function _updateFocusState(_ref, isFocused) {
    var target = _ref.target;

    if ((0, _array.inArray)(target, this._focusTarget()) !== -1) {
      this._toggleFocusClass(isFocused, (0, _renderer.default)(target));
    }
  },
  _toggleFocusClass: function _toggleFocusClass(isFocused, $element) {
    var $focusTarget = $element && $element.length ? $element : this._focusTarget();
    $focusTarget.toggleClass('dx-state-focused', isFocused);
  },
  _hasFocusClass: function _hasFocusClass(element) {
    var $focusTarget = (0, _renderer.default)(element || this._focusTarget());
    return $focusTarget.hasClass('dx-state-focused');
  },
  _isFocused: function _isFocused() {
    return this._hasFocusClass();
  },
  _getKeyboardListeners: function _getKeyboardListeners() {
    return [];
  },
  _attachKeyboardEvents: function _attachKeyboardEvents() {
    var _this5 = this;

    this._detachKeyboardEvents();

    var _this$option6 = this.option(),
        focusStateEnabled = _this$option6.focusStateEnabled,
        onKeyboardHandled = _this$option6.onKeyboardHandled;

    var hasChildListeners = this._getKeyboardListeners().length;

    var hasKeyboardEventHandler = !!onKeyboardHandled;
    var shouldAttach = focusStateEnabled || hasChildListeners || hasKeyboardEventHandler;

    if (shouldAttach) {
      this._keyboardListenerId = _short.keyboard.on(this._keyboardEventBindingTarget(), this._focusTarget(), function (opts) {
        return _this5._keyboardHandler(opts);
      });
    }
  },
  _keyboardHandler: function _keyboardHandler(options, onlyChildProcessing) {
    if (!onlyChildProcessing) {
      var originalEvent = options.originalEvent,
          keyName = options.keyName,
          which = options.which;

      var keys = this._supportedKeys(originalEvent);

      var func = keys[keyName] || keys[which];

      if (func !== undefined) {
        var handler = func.bind(this);
        var result = handler(originalEvent, options);

        if (!result) {
          return false;
        }
      }
    }

    var keyboardListeners = this._getKeyboardListeners();

    var _this$option7 = this.option(),
        onKeyboardHandled = _this$option7.onKeyboardHandled;

    keyboardListeners.forEach(function (listener) {
      return listener && listener._keyboardHandler(options);
    });
    onKeyboardHandled && onKeyboardHandled(options);
    return true;
  },
  _refreshFocusState: function _refreshFocusState() {
    this._cleanFocusState();

    this._renderFocusState();
  },
  _cleanFocusState: function _cleanFocusState() {
    var $element = this._focusTarget();

    $element.removeAttr('tabIndex');

    this._toggleFocusClass(false);

    this._detachFocusEvents();

    this._detachKeyboardEvents();
  },
  _detachKeyboardEvents: function _detachKeyboardEvents() {
    _short.keyboard.off(this._keyboardListenerId);

    this._keyboardListenerId = null;
  },
  _attachHoverEvents: function _attachHoverEvents() {
    var _this6 = this;

    var _this$option8 = this.option(),
        hoverStateEnabled = _this$option8.hoverStateEnabled;

    var selector = this._activeStateUnit;
    var namespace = 'UIFeedback';

    var $el = this._eventBindingTarget();

    _short.hover.off($el, {
      selector: selector,
      namespace: namespace
    });

    if (hoverStateEnabled) {
      _short.hover.on($el, new _action.default(function (_ref2) {
        var event = _ref2.event,
            element = _ref2.element;

        _this6._hoverStartHandler(event);

        _this6.option('hoveredElement', (0, _renderer.default)(element));
      }, {
        excludeValidators: ['readOnly']
      }), function (event) {
        _this6.option('hoveredElement', null);

        _this6._hoverEndHandler(event);
      }, {
        selector: selector,
        namespace: namespace
      });
    }
  },
  _attachFeedbackEvents: function _attachFeedbackEvents() {
    var _this7 = this;

    var _this$option9 = this.option(),
        activeStateEnabled = _this$option9.activeStateEnabled;

    var selector = this._activeStateUnit;
    var namespace = 'UIFeedback';

    var $el = this._eventBindingTarget();

    _short.active.off($el, {
      namespace: namespace,
      selector: selector
    });

    if (activeStateEnabled) {
      _short.active.on($el, new _action.default(function (_ref3) {
        var event = _ref3.event,
            element = _ref3.element;
        return _this7._toggleActiveState((0, _renderer.default)(element), true, event);
      }), new _action.default(function (_ref4) {
        var event = _ref4.event,
            element = _ref4.element;
        return _this7._toggleActiveState((0, _renderer.default)(element), false, event);
      }, {
        excludeValidators: ['disabled', 'readOnly']
      }), {
        showTimeout: this._feedbackShowTimeout,
        hideTimeout: this._feedbackHideTimeout,
        selector: selector,
        namespace: namespace
      });
    }
  },
  _detachFocusEvents: function _detachFocusEvents() {
    var $el = this._focusEventTarget();

    _short.focus.off($el, {
      namespace: "".concat(this.NAME, "Focus")
    });
  },
  _attachFocusEvents: function _attachFocusEvents() {
    var _this8 = this;

    var $el = this._focusEventTarget();

    _short.focus.on($el, function (e) {
      return _this8._focusInHandler(e);
    }, function (e) {
      return _this8._focusOutHandler(e);
    }, {
      namespace: "".concat(this.NAME, "Focus"),
      isFocusable: function isFocusable(index, el) {
        return (0, _renderer.default)(el).is(_selectors.focusable);
      }
    });
  },
  _hoverStartHandler: _common.noop,
  _hoverEndHandler: _common.noop,
  _toggleActiveState: function _toggleActiveState($element, value) {
    this.option('isActive', value);
    $element.toggleClass('dx-state-active', value);
  },
  _updatedHover: function _updatedHover() {
    var hoveredElement = this._options.silent('hoveredElement');

    this._hover(hoveredElement, hoveredElement);
  },
  _findHoverTarget: function _findHoverTarget($el) {
    return $el && $el.closest(this._activeStateUnit || this._eventBindingTarget());
  },
  _hover: function _hover($el, $previous) {
    var _this$option10 = this.option(),
        hoverStateEnabled = _this$option10.hoverStateEnabled,
        disabled = _this$option10.disabled,
        isActive = _this$option10.isActive;

    $previous = this._findHoverTarget($previous);
    $previous && $previous.toggleClass('dx-state-hover', false);

    if ($el && hoverStateEnabled && !disabled && !isActive) {
      var newHoveredElement = this._findHoverTarget($el);

      newHoveredElement && newHoveredElement.toggleClass('dx-state-hover', true);
    }
  },
  _toggleDisabledState: function _toggleDisabledState(value) {
    this.$element().toggleClass('dx-state-disabled', Boolean(value));
    this.setAria('disabled', value || undefined);
  },
  _toggleIndependentState: function _toggleIndependentState() {
    this.$element().toggleClass('dx-state-independent', this.option('ignoreParentReadOnly'));
  },
  _setWidgetOption: function _setWidgetOption(widgetName, args) {
    var _this9 = this;

    if (!this[widgetName]) {
      return;
    }

    if ((0, _type.isPlainObject)(args[0])) {
      (0, _iterator.each)(args[0], function (option, value) {
        return _this9._setWidgetOption(widgetName, [option, value]);
      });
      return;
    }

    var optionName = args[0];
    var value = args[1];

    if (args.length === 1) {
      value = this.option(optionName);
    }

    var widgetOptionMap = this["".concat(widgetName, "OptionMap")];
    this[widgetName].option(widgetOptionMap ? widgetOptionMap(optionName) : optionName, value);
  },
  _optionChanged: function _optionChanged(args) {
    var name = args.name,
        value = args.value,
        previousValue = args.previousValue;

    switch (name) {
      case 'disabled':
        this._toggleDisabledState(value);

        this._updatedHover();

        this._refreshFocusState();

        break;

      case 'hint':
        this._renderHint();

        break;

      case 'ignoreParentReadOnly':
        this._toggleIndependentState();

        break;

      case 'activeStateEnabled':
        this._attachFeedbackEvents();

        break;

      case 'hoverStateEnabled':
        this._attachHoverEvents();

        this._updatedHover();

        break;

      case 'tabIndex':
      case 'focusStateEnabled':
        this._refreshFocusState();

        break;

      case 'onFocusIn':
      case 'onFocusOut':
        break;

      case 'accessKey':
        this._renderAccessKey();

        break;

      case 'hoveredElement':
        this._hover(value, previousValue);

        break;

      case 'isActive':
        this._updatedHover();

        break;

      case 'visible':
        this._toggleVisibility(value);

        if (this._isVisibilityChangeSupported()) {
          // TODO hiding works wrong
          this._checkVisibilityChanged(value ? 'shown' : 'hiding');
        }

        break;

      case 'onKeyboardHandled':
        this._attachKeyboardEvents();

        break;

      case 'onContentReady':
        this._initContentReadyAction();

        break;

      default:
        this.callBase(args);
    }
  },
  _isVisible: function _isVisible() {
    var _this$option11 = this.option(),
        visible = _this$option11.visible;

    return this.callBase() && visible;
  },
  beginUpdate: function beginUpdate() {
    this._ready(false);

    this.callBase();
  },
  endUpdate: function endUpdate() {
    this.callBase();

    if (this._initialized) {
      this._ready(true);
    }
  },
  _ready: function _ready(value) {
    if (arguments.length === 0) {
      return this._isReady;
    }

    this._isReady = value;
  },
  setAria: function setAria() {
    if (!(0, _type.isPlainObject)(arguments.length <= 0 ? undefined : arguments[0])) {
      setAttribute(arguments.length <= 0 ? undefined : arguments[0], arguments.length <= 1 ? undefined : arguments[1], (arguments.length <= 2 ? undefined : arguments[2]) || this._getAriaTarget());
    } else {
      var target = (arguments.length <= 1 ? undefined : arguments[1]) || this._getAriaTarget();

      (0, _iterator.each)(arguments.length <= 0 ? undefined : arguments[0], function (name, value) {
        return setAttribute(name, value, target);
      });
    }
  },
  isReady: function isReady() {
    return this._ready();
  },
  repaint: function repaint() {
    this._refresh();
  },
  focus: function focus() {
    _short.focus.trigger(this._focusTarget());
  },
  registerKeyHandler: function registerKeyHandler(key, handler) {
    var currentKeys = this._supportedKeys();

    this._supportedKeys = function () {
      return (0, _extend2.extend)(currentKeys, _defineProperty({}, key, handler));
    };
  }
});

Widget.getOptionsFromContainer = function (_ref5) {
  var name = _ref5.name,
      fullName = _ref5.fullName,
      value = _ref5.value;
  var options = {};

  if (name === fullName) {
    options = value;
  } else {
    var option = fullName.split('.').pop();
    options[option] = value;
  }

  return options;
};

var _default = Widget;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.TemplateBase = exports.renderedCallbacks = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _dom = __webpack_require__(21);

var _visibility_change = __webpack_require__(63);

var _errors = _interopRequireDefault(__webpack_require__(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var renderedCallbacks = (0, _callbacks.default)({
  syncStrategy: true
});
exports.renderedCallbacks = renderedCallbacks;

var TemplateBase = /*#__PURE__*/function () {
  function TemplateBase() {}

  var _proto = TemplateBase.prototype;

  _proto.render = function render(options) {
    options = options || {};
    var onRendered = options.onRendered;
    delete options.onRendered;

    var $result = this._renderCore(options);

    this._ensureResultInContainer($result, options.container);

    renderedCallbacks.fire($result, options.container);
    onRendered && onRendered();
    return $result;
  };

  _proto._ensureResultInContainer = function _ensureResultInContainer($result, container) {
    if (!container) {
      return;
    }

    var $container = (0, _renderer.default)(container);
    var resultInContainer = (0, _dom.contains)($container.get(0), $result.get(0));
    $container.append($result);

    if (resultInContainer) {
      return;
    }

    var resultInBody = _dom_adapter.default.getBody().contains($container.get(0));

    if (!resultInBody) {
      return;
    }

    (0, _visibility_change.triggerShownEvent)($result);
  };

  _proto._renderCore = function _renderCore() {
    throw _errors.default.Error('E0001');
  };

  return TemplateBase;
}();

exports.TemplateBase = TemplateBase;

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _window = __webpack_require__(7);

var _support = __webpack_require__(34);

var _themes = __webpack_require__(31);

var _extend = __webpack_require__(2);

var _devices = _interopRequireDefault(__webpack_require__(10));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _ui = _interopRequireDefault(__webpack_require__(42));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var navigator = (0, _window.getNavigator)();
// STYLE loadIndicator
var LOADINDICATOR_CLASS = 'dx-loadindicator';
var LOADINDICATOR_WRAPPER_CLASS = 'dx-loadindicator-wrapper';
var LOADINDICATOR_CONTENT_CLASS = 'dx-loadindicator-content';
var LOADINDICATOR_ICON_CLASS = 'dx-loadindicator-icon';
var LOADINDICATOR_SEGMENT_CLASS = 'dx-loadindicator-segment';
var LOADINDICATOR_SEGMENT_INNER_CLASS = 'dx-loadindicator-segment-inner';
var LOADINDICATOR_IMAGE_CLASS = 'dx-loadindicator-image';

var LoadIndicator = _ui.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      indicatorSrc: '',

      /**
      * @name dxLoadIndicatorOptions.disabled
      * @hidden
      */

      /**
      * @name dxLoadIndicatorOptions.activeStateEnabled
      * @hidden
      */
      activeStateEnabled: false,

      /**
       * @name dxLoadIndicatorOptions.hoverStateEnabled
       * @default false
       * @hidden
      */
      hoverStateEnabled: false,

      /**
      * @name dxLoadIndicatorOptions.focusStateEnabled
      * @hidden
      */

      /**
      * @name dxLoadIndicatorOptions.accessKey
      * @hidden
      */

      /**
      * @name dxLoadIndicatorOptions.tabIndex
      * @hidden
      */
      _animatingSegmentCount: 1,
      _animatingSegmentInner: false
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    var themeName = (0, _themes.current)();
    return this.callBase().concat([{
      device: function device() {
        var realDevice = _devices.default.real();

        var obsoleteAndroid = realDevice.platform === 'android' && !/chrome/i.test(navigator.userAgent);
        return obsoleteAndroid;
      },
      options: {
        viaImage: true
      }
    }, {
      device: function device() {
        return (0, _themes.isMaterial)(themeName);
      },
      options: {
        _animatingSegmentCount: 2,
        _animatingSegmentInner: true
      }
    }, {
      device: function device() {
        return (0, _themes.isGeneric)(themeName);
      },
      options: {
        _animatingSegmentCount: 7
      }
    }]);
  },
  _useTemplates: function _useTemplates() {
    return false;
  },
  _init: function _init() {
    this.callBase();
    this.$element().addClass(LOADINDICATOR_CLASS);
  },
  _initMarkup: function _initMarkup() {
    this.callBase();

    this._renderWrapper();

    this._renderIndicatorContent();

    this._renderMarkup();
  },
  _renderWrapper: function _renderWrapper() {
    this._$wrapper = (0, _renderer.default)('<div>').addClass(LOADINDICATOR_WRAPPER_CLASS);
    this.$element().append(this._$wrapper);
  },
  _renderIndicatorContent: function _renderIndicatorContent() {
    this._$content = (0, _renderer.default)('<div>').addClass(LOADINDICATOR_CONTENT_CLASS);

    this._$wrapper.append(this._$content);
  },
  _renderMarkup: function _renderMarkup() {
    if ((0, _support.animation)() && !this.option('viaImage') && !this.option('indicatorSrc')) {
      // B236922
      this._renderMarkupForAnimation();
    } else {
      this._renderMarkupForImage();
    }
  },
  _renderMarkupForAnimation: function _renderMarkupForAnimation() {
    var animatingSegmentInner = this.option('_animatingSegmentInner');
    this._$indicator = (0, _renderer.default)('<div>').addClass(LOADINDICATOR_ICON_CLASS);

    this._$content.append(this._$indicator); // Indicator markup


    for (var i = this.option('_animatingSegmentCount'); i >= 0; --i) {
      var $segment = (0, _renderer.default)('<div>').addClass(LOADINDICATOR_SEGMENT_CLASS).addClass(LOADINDICATOR_SEGMENT_CLASS + i);

      if (animatingSegmentInner) {
        $segment.append((0, _renderer.default)('<div>').addClass(LOADINDICATOR_SEGMENT_INNER_CLASS));
      }

      this._$indicator.append($segment);
    }
  },
  _renderMarkupForImage: function _renderMarkupForImage() {
    var indicatorSrc = this.option('indicatorSrc');

    this._$wrapper.addClass(LOADINDICATOR_IMAGE_CLASS);

    if (indicatorSrc) {
      this._$wrapper.css('backgroundImage', 'url(' + indicatorSrc + ')');
    }
  },
  _renderDimensions: function _renderDimensions() {
    this.callBase();

    this._updateContentSizeForAnimation();
  },
  _updateContentSizeForAnimation: function _updateContentSizeForAnimation() {
    if (!this._$indicator) {
      return;
    }

    var width = this.option('width');
    var height = this.option('height');

    if (width || height) {
      width = this.$element().width();
      height = this.$element().height();
      var minDimension = Math.min(height, width);

      this._$wrapper.css({
        height: minDimension,
        width: minDimension,
        fontSize: minDimension
      });
    }
  },
  _clean: function _clean() {
    this.callBase();

    this._removeMarkupForAnimation();

    this._removeMarkupForImage();
  },
  _removeMarkupForAnimation: function _removeMarkupForAnimation() {
    if (!this._$indicator) {
      return;
    }

    this._$indicator.remove();

    delete this._$indicator;
  },
  _removeMarkupForImage: function _removeMarkupForImage() {
    this._$wrapper.css('backgroundImage', 'none');
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case '_animatingSegmentCount':
      case '_animatingSegmentInner':
      case 'indicatorSrc':
        this._invalidate();

        break;

      default:
        this.callBase(args);
    }
  }
  /**
  * @name dxLoadIndicator.registerKeyHandler
  * @publicName registerKeyHandler(key, handler)
  * @hidden
  */

  /**
  * @name dxLoadIndicator.focus
  * @publicName focus()
  * @hidden
  */

});

(0, _component_registrator.default)('dxLoadIndicator', LoadIndicator);
var _default = LoadIndicator;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _common = __webpack_require__(3);

var _class = _interopRequireDefault(__webpack_require__(11));

var _swipe = __webpack_require__(99);

var _index = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIST_EDIT_DECORATOR = 'dxListEditDecorator';
var SWIPE_START_EVENT_NAME = (0, _index.addNamespace)(_swipe.start, LIST_EDIT_DECORATOR);
var SWIPE_UPDATE_EVENT_NAME = (0, _index.addNamespace)(_swipe.swipe, LIST_EDIT_DECORATOR);
var SWIPE_END_EVENT_NAME = (0, _index.addNamespace)(_swipe.end, LIST_EDIT_DECORATOR);

var EditDecorator = _class.default.inherit({
  ctor: function ctor(list) {
    this._list = list;

    this._init();
  },
  _init: _common.noop,
  _shouldHandleSwipe: false,
  _attachSwipeEvent: function _attachSwipeEvent(config) {
    var swipeConfig = {
      itemSizeFunc: function () {
        if (this._clearSwipeCache) {
          this._itemWidthCache = this._list.$element().width();
          this._clearSwipeCache = false;
        }

        return this._itemWidthCache;
      }.bind(this)
    };

    _events_engine.default.on(config.$itemElement, SWIPE_START_EVENT_NAME, swipeConfig, this._itemSwipeStartHandler.bind(this));

    _events_engine.default.on(config.$itemElement, SWIPE_UPDATE_EVENT_NAME, this._itemSwipeUpdateHandler.bind(this));

    _events_engine.default.on(config.$itemElement, SWIPE_END_EVENT_NAME, this._itemSwipeEndHandler.bind(this));
  },
  _itemSwipeStartHandler: function _itemSwipeStartHandler(e) {
    var $itemElement = (0, _renderer.default)(e.currentTarget);

    if ($itemElement.is('.dx-state-disabled, .dx-state-disabled *')) {
      e.cancel = true;
      return;
    }

    clearTimeout(this._list._inkRippleTimer);

    this._swipeStartHandler($itemElement, e);
  },
  _itemSwipeUpdateHandler: function _itemSwipeUpdateHandler(e) {
    var $itemElement = (0, _renderer.default)(e.currentTarget);

    this._swipeUpdateHandler($itemElement, e);
  },
  _itemSwipeEndHandler: function _itemSwipeEndHandler(e) {
    var $itemElement = (0, _renderer.default)(e.currentTarget);

    this._swipeEndHandler($itemElement, e);

    this._clearSwipeCache = true;
  },
  beforeBag: _common.noop,
  afterBag: _common.noop,
  _commonOptions: function _commonOptions() {
    return {
      activeStateEnabled: this._list.option('activeStateEnabled'),
      hoverStateEnabled: this._list.option('hoverStateEnabled'),
      focusStateEnabled: this._list.option('focusStateEnabled')
    };
  },
  modifyElement: function modifyElement(config) {
    if (this._shouldHandleSwipe) {
      this._attachSwipeEvent(config);

      this._clearSwipeCache = true;
    }
  },
  afterRender: _common.noop,
  handleClick: _common.noop,
  handleKeyboardEvents: _common.noop,
  handleEnterPressing: _common.noop,
  handleContextMenu: _common.noop,
  _swipeStartHandler: _common.noop,
  _swipeUpdateHandler: _common.noop,
  _swipeEndHandler: _common.noop,
  visibilityChange: _common.noop,
  getExcludedSelectors: _common.noop,
  dispose: _common.noop
});

var _default = EditDecorator;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.format = format;
exports.isEmpty = exports.replaceAll = exports.quadToObject = exports.encodeHtml = void 0;

var _type = __webpack_require__(1);

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var encodeHtml = function () {
  var encodeRegExp = [new RegExp('&', 'g'), new RegExp('"', 'g'), new RegExp('\'', 'g'), new RegExp('<', 'g'), new RegExp('>', 'g')];
  return function (str) {
    return String(str).replace(encodeRegExp[0], '&amp;').replace(encodeRegExp[1], '&quot;').replace(encodeRegExp[2], '&#39;').replace(encodeRegExp[3], '&lt;').replace(encodeRegExp[4], '&gt;');
  };
}();

exports.encodeHtml = encodeHtml;

var splitQuad = function splitQuad(raw) {
  switch (_typeof(raw)) {
    case 'string':
      return raw.split(/\s+/, 4);

    case 'object':
      return [raw.x || raw.h || raw.left, raw.y || raw.v || raw.top, raw.x || raw.h || raw.right, raw.y || raw.v || raw.bottom];

    case 'number':
      return [raw];

    default:
      return raw;
  }
};

var quadToObject = function quadToObject(raw) {
  var quad = splitQuad(raw);
  var left = parseInt(quad && quad[0], 10);
  var top = parseInt(quad && quad[1], 10);
  var right = parseInt(quad && quad[2], 10);
  var bottom = parseInt(quad && quad[3], 10);

  if (!isFinite(left)) {
    left = 0;
  }

  if (!isFinite(top)) {
    top = left;
  }

  if (!isFinite(right)) {
    right = left;
  }

  if (!isFinite(bottom)) {
    bottom = top;
  }

  return {
    top: top,
    right: right,
    bottom: bottom,
    left: left
  };
};

exports.quadToObject = quadToObject;

function format(template) {
  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  if ((0, _type.isFunction)(template)) {
    return template.apply(void 0, values);
  }

  values.forEach(function (value, index) {
    if ((0, _type.isString)(value)) {
      value = value.replace(/\$/g, '$$$$');
    }

    var placeholderReg = new RegExp('\\{' + index + '\\}', 'gm');
    template = template.replace(placeholderReg, value);
  });
  return template;
}

var replaceAll = function () {
  var quote = function quote(str) {
    return (str + '').replace(/([+*?.[^\]$(){}><|=!:])/g, '\\$1'); // lgtm[js/incomplete-sanitization]
  };

  return function (text, searchToken, replacementToken) {
    return text.replace(new RegExp('(' + quote(searchToken) + ')', 'gi'), replacementToken);
  };
}();

exports.replaceAll = replaceAll;

var isEmpty = function () {
  var SPACE_REGEXP = /\s/g;
  return function (text) {
    return !text || !text.replace(SPACE_REGEXP, '');
  };
}();

exports.isEmpty = isEmpty;

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.captionize = exports.titleize = exports.humanize = exports.camelize = exports.underscore = exports.dasherize = void 0;

var _iterator = __webpack_require__(4);

var _normalize = function _normalize(text) {
  if (text === undefined || text === null) {
    return '';
  }

  return String(text);
};

var _upperCaseFirst = function _upperCaseFirst(text) {
  return _normalize(text).charAt(0).toUpperCase() + text.substr(1);
};

var _chop = function _chop(text) {
  return _normalize(text).replace(/([a-z\d])([A-Z])/g, '$1 $2').split(/[\s_-]+/);
};

var dasherize = function dasherize(text) {
  return (0, _iterator.map)(_chop(text), function (p) {
    return p.toLowerCase();
  }).join('-');
};

exports.dasherize = dasherize;

var underscore = function underscore(text) {
  return dasherize(text).replace(/-/g, '_');
};

exports.underscore = underscore;

var camelize = function camelize(text, upperFirst) {
  return (0, _iterator.map)(_chop(text), function (p, i) {
    p = p.toLowerCase();

    if (upperFirst || i > 0) {
      p = _upperCaseFirst(p);
    }

    return p;
  }).join('');
};

exports.camelize = camelize;

var humanize = function humanize(text) {
  return _upperCaseFirst(dasherize(text).replace(/-/g, ' '));
};

exports.humanize = humanize;

var titleize = function titleize(text) {
  return (0, _iterator.map)(_chop(text), function (p) {
    return _upperCaseFirst(p.toLowerCase());
  }).join(' ');
};

exports.titleize = titleize;
var DIGIT_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];

var captionize = function captionize(name) {
  var captionList = [];
  var i;
  var char;
  var isPrevCharNewWord = false;
  var isNewWord = false;

  for (i = 0; i < name.length; i++) {
    char = name.charAt(i);
    isNewWord = char === char.toUpperCase() && char !== '-' && char !== ')' && char !== '/' || char in DIGIT_CHARS;

    if (char === '_' || char === '.') {
      char = ' ';
      isNewWord = true;
    } else if (i === 0) {
      char = char.toUpperCase();
      isNewWord = true;
    } else if (!isPrevCharNewWord && isNewWord) {
      if (captionList.length > 0) {
        captionList.push(' ');
      }
    }

    captionList.push(char);
    isPrevCharNewWord = isNewWord;
  }

  return captionList.join('');
};

exports.captionize = captionize;

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _query_implementation = __webpack_require__(132);

var query = function query() {
  var impl = Array.isArray(arguments[0]) ? 'array' : 'remote';
  return _query_implementation.queryImpl[impl].apply(this, arguments);
};

var _default = query;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.EventsStrategy = void 0;

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _iterator = __webpack_require__(4);

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EventsStrategy = /*#__PURE__*/function () {
  function EventsStrategy(owner) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this._events = {};
    this._owner = owner;
    this._options = options;
  }

  EventsStrategy.create = function create(owner, strategy) {
    if (strategy) {
      return (0, _type.isFunction)(strategy) ? strategy(owner) : strategy;
    } else {
      return new EventsStrategy(owner);
    }
  };

  var _proto = EventsStrategy.prototype;

  _proto.hasEvent = function hasEvent(eventName) {
    var callbacks = this._events[eventName];
    return callbacks ? callbacks.has() : false;
  };

  _proto.fireEvent = function fireEvent(eventName, eventArgs) {
    var callbacks = this._events[eventName];

    if (callbacks) {
      callbacks.fireWith(this._owner, eventArgs);
    }

    return this._owner;
  };

  _proto.on = function on(eventName, eventHandler) {
    var _this = this;

    if ((0, _type.isPlainObject)(eventName)) {
      (0, _iterator.each)(eventName, function (e, h) {
        _this.on(e, h);
      });
    } else {
      var callbacks = this._events[eventName];

      if (!callbacks) {
        callbacks = (0, _callbacks.default)({
          syncStrategy: this._options.syncStrategy
        });
        this._events[eventName] = callbacks;
      }

      var addFn = callbacks.originalAdd || callbacks.add;
      addFn.call(callbacks, eventHandler);
    }
  };

  _proto.off = function off(eventName, eventHandler) {
    var callbacks = this._events[eventName];

    if (callbacks) {
      if ((0, _type.isFunction)(eventHandler)) {
        callbacks.remove(eventHandler);
      } else {
        callbacks.empty();
      }
    }
  };

  _proto.dispose = function dispose() {
    (0, _iterator.each)(this._events, function (eventName, event) {
      event.empty();
    });
  };

  return EventsStrategy;
}();

exports.EventsStrategy = EventsStrategy;

/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.originalViewPort = originalViewPort;
exports.changeCallback = exports.value = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ready = _ready_callbacks.default.add;
var changeCallback = (0, _callbacks.default)();
exports.changeCallback = changeCallback;
var $originalViewPort = (0, _renderer.default)();

var value = function () {
  var $current;
  return function (element) {
    if (!arguments.length) {
      return $current;
    }

    var $element = (0, _renderer.default)(element);
    $originalViewPort = $element;
    var isNewViewportFound = !!$element.length;
    var prevViewPort = value();
    $current = isNewViewportFound ? $element : (0, _renderer.default)('body');
    changeCallback.fire(isNewViewportFound ? value() : (0, _renderer.default)(), prevViewPort);
  };
}();

exports.value = value;
ready(function () {
  value('.dx-viewport');
});

function originalViewPort() {
  return $originalViewPort;
}

/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _deferred = __webpack_require__(9);

var _window = __webpack_require__(7);

var promise = (0, _window.hasWindow)() ? (0, _window.getWindow)().Promise : Promise;

if (!promise) {
  // NOTE: This is an incomplete Promise polyfill but it is enough for creation purposes
  promise = function promise(resolver) {
    var d = new _deferred.Deferred();
    resolver(d.resolve.bind(this), d.reject.bind(this));
    return d.promise();
  };

  promise.resolve = function (val) {
    return new _deferred.Deferred().resolve(val).promise();
  };

  promise.reject = function (val) {
    return new _deferred.Deferred().reject(val).promise();
  };

  promise.all = function (promises) {
    return _deferred.when.apply(this, promises).then(function () {
      return [].slice.call(arguments);
    });
  };
}

var _default = promise;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.EmptyTemplate = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _template_base = __webpack_require__(43);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var EmptyTemplate = /*#__PURE__*/function (_TemplateBase) {
  _inheritsLoose(EmptyTemplate, _TemplateBase);

  function EmptyTemplate() {
    return _TemplateBase.apply(this, arguments) || this;
  }

  var _proto = EmptyTemplate.prototype;

  _proto._renderCore = function _renderCore() {
    return (0, _renderer.default)();
  };

  return EmptyTemplate;
}(_template_base.TemplateBase);

exports.EmptyTemplate = EmptyTemplate;

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _class = _interopRequireDefault(__webpack_require__(11));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Guid = _class.default.inherit({
  /**
  * @name Guid.ctor
  * @publicName ctor()
  */

  /**
  * @name Guid.ctor
  * @publicName ctor(value)
  * @param1 value:string
  */
  ctor: function ctor(value) {
    if (value) {
      value = String(value);
    }

    this._value = this._normalize(value || this._generate());
  },
  _normalize: function _normalize(value) {
    value = value.replace(/[^a-f0-9]/ig, '').toLowerCase();

    while (value.length < 32) {
      value += '0';
    }

    return [value.substr(0, 8), value.substr(8, 4), value.substr(12, 4), value.substr(16, 4), value.substr(20, 12)].join('-');
  },
  _generate: function _generate() {
    var value = '';

    for (var i = 0; i < 32; i++) {
      value += Math.round(Math.random() * 15).toString(16);
    }

    return value;
  },
  toString: function toString() {
    return this._value;
  },
  valueOf: function valueOf() {
    return this._value;
  },
  toJSON: function toJSON() {
    return this._value;
  }
});

var _default = Guid;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _class = _interopRequireDefault(__webpack_require__(11));

var _type = __webpack_require__(1);

var _iterator = __webpack_require__(4);

var _data = __webpack_require__(23);

var _deferred = __webpack_require__(9);

var _errors = __webpack_require__(36);

var _utils = __webpack_require__(27);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Iterator = _class.default.inherit({
  toArray: function toArray() {
    var result = [];
    this.reset();

    while (this.next()) {
      result.push(this.current());
    }

    return result;
  },
  countable: function countable() {
    return false;
  }
});

var ArrayIterator = Iterator.inherit({
  ctor: function ctor(array) {
    this.array = array;
    this.index = -1;
  },
  next: function next() {
    if (this.index + 1 < this.array.length) {
      this.index++;
      return true;
    }

    return false;
  },
  current: function current() {
    return this.array[this.index];
  },
  reset: function reset() {
    this.index = -1;
  },
  toArray: function toArray() {
    return this.array.slice(0);
  },
  countable: function countable() {
    return true;
  },
  count: function count() {
    return this.array.length;
  }
});
var WrappedIterator = Iterator.inherit({
  ctor: function ctor(iter) {
    this.iter = iter;
  },
  next: function next() {
    return this.iter.next();
  },
  current: function current() {
    return this.iter.current();
  },
  reset: function reset() {
    return this.iter.reset();
  }
});
var MapIterator = WrappedIterator.inherit({
  ctor: function ctor(iter, mapper) {
    this.callBase(iter);
    this.index = -1;
    this.mapper = mapper;
  },
  current: function current() {
    return this.mapper(this.callBase(), this.index);
  },
  next: function next() {
    var hasNext = this.callBase();

    if (hasNext) {
      this.index++;
    }

    return hasNext;
  }
});

var defaultCompare = function defaultCompare(xValue, yValue) {
  xValue = (0, _data.toComparable)(xValue);
  yValue = (0, _data.toComparable)(yValue);

  if (xValue === null && yValue !== null) {
    return -1;
  }

  if (xValue !== null && yValue === null) {
    return 1;
  }

  if (xValue === undefined && yValue !== undefined) {
    return 1;
  }

  if (xValue !== undefined && yValue === undefined) {
    return -1;
  }

  if (xValue < yValue) {
    return -1;
  }

  if (xValue > yValue) {
    return 1;
  }

  return 0;
};

var SortIterator = Iterator.inherit({
  ctor: function ctor(iter, getter, desc, compare) {
    if (!(iter instanceof MapIterator)) {
      iter = new MapIterator(iter, this._wrap);
    }

    this.iter = iter;
    this.rules = [{
      getter: getter,
      desc: desc,
      compare: compare
    }];
  },
  thenBy: function thenBy(getter, desc, compare) {
    var result = new SortIterator(this.sortedIter || this.iter, getter, desc, compare);

    if (!this.sortedIter) {
      result.rules = this.rules.concat(result.rules);
    }

    return result;
  },
  next: function next() {
    this._ensureSorted();

    return this.sortedIter.next();
  },
  current: function current() {
    this._ensureSorted();

    return this.sortedIter.current();
  },
  reset: function reset() {
    delete this.sortedIter;
  },
  countable: function countable() {
    return this.sortedIter || this.iter.countable();
  },
  count: function count() {
    if (this.sortedIter) {
      return this.sortedIter.count();
    }

    return this.iter.count();
  },
  _ensureSorted: function _ensureSorted() {
    var that = this;

    if (that.sortedIter) {
      return;
    }

    (0, _iterator.each)(that.rules, function () {
      this.getter = (0, _data.compileGetter)(this.getter);
    });
    that.sortedIter = new MapIterator(new ArrayIterator(this.iter.toArray().sort(function (x, y) {
      return that._compare(x, y);
    })), that._unwrap);
  },
  _wrap: function _wrap(record, index) {
    return {
      index: index,
      value: record
    };
  },
  _unwrap: function _unwrap(wrappedItem) {
    return wrappedItem.value;
  },
  _compare: function _compare(x, y) {
    var xIndex = x.index;
    var yIndex = y.index;
    x = x.value;
    y = y.value;

    if (x === y) {
      return xIndex - yIndex;
    }

    for (var i = 0, rulesCount = this.rules.length; i < rulesCount; i++) {
      var rule = this.rules[i];
      var xValue = rule.getter(x);
      var yValue = rule.getter(y);
      var compare = rule.compare || defaultCompare;
      var compareResult = compare(xValue, yValue);

      if (compareResult) {
        return rule.desc ? -compareResult : compareResult;
      }
    }

    return xIndex - yIndex;
  }
});

var compileCriteria = function () {
  var compileGroup = function compileGroup(crit) {
    var ops = [];
    var isConjunctiveOperator = false;
    var isConjunctiveNextOperator = false;
    (0, _iterator.each)(crit, function () {
      if (Array.isArray(this) || (0, _type.isFunction)(this)) {
        if (ops.length > 1 && isConjunctiveOperator !== isConjunctiveNextOperator) {
          throw new _errors.errors.Error('E4019');
        }

        ops.push(compileCriteria(this));
        isConjunctiveOperator = isConjunctiveNextOperator;
        isConjunctiveNextOperator = true;
      } else {
        isConjunctiveNextOperator = (0, _utils.isConjunctiveOperator)(this);
      }
    });
    return function (d) {
      var result = isConjunctiveOperator;

      for (var i = 0; i < ops.length; i++) {
        if (ops[i](d) !== isConjunctiveOperator) {
          result = !isConjunctiveOperator;
          break;
        }
      }

      return result;
    };
  };

  var toString = function toString(value) {
    return (0, _type.isDefined)(value) ? value.toString() : '';
  };

  var compileBinary = function compileBinary(crit) {
    crit = (0, _utils.normalizeBinaryCriterion)(crit);
    var getter = (0, _data.compileGetter)(crit[0]);
    var op = crit[1];
    var value = crit[2];
    value = (0, _data.toComparable)(value);

    switch (op.toLowerCase()) {
      case '=':
        return compileEquals(getter, value);

      case '<>':
        return compileEquals(getter, value, true);

      case '>':
        return function (obj) {
          return (0, _data.toComparable)(getter(obj)) > value;
        };

      case '<':
        return function (obj) {
          return (0, _data.toComparable)(getter(obj)) < value;
        };

      case '>=':
        return function (obj) {
          return (0, _data.toComparable)(getter(obj)) >= value;
        };

      case '<=':
        return function (obj) {
          return (0, _data.toComparable)(getter(obj)) <= value;
        };

      case 'startswith':
        return function (obj) {
          return (0, _data.toComparable)(toString(getter(obj))).indexOf(value) === 0;
        };

      case 'endswith':
        return function (obj) {
          var getterValue = (0, _data.toComparable)(toString(getter(obj)));
          var searchValue = toString(value);

          if (getterValue.length < searchValue.length) {
            return false;
          }

          var index = getterValue.lastIndexOf(value);
          return index !== -1 && index === getterValue.length - value.length;
        };

      case 'contains':
        return function (obj) {
          return (0, _data.toComparable)(toString(getter(obj))).indexOf(value) > -1;
        };

      case 'notcontains':
        return function (obj) {
          return (0, _data.toComparable)(toString(getter(obj))).indexOf(value) === -1;
        };
    }

    throw _errors.errors.Error('E4003', op);
  };

  function compileEquals(getter, value, negate) {
    return function (obj) {
      obj = (0, _data.toComparable)(getter(obj)); // eslint-disable-next-line eqeqeq

      var result = useStrictComparison(value) ? obj === value : obj == value;

      if (negate) {
        result = !result;
      }

      return result;
    };
  }

  function useStrictComparison(value) {
    return value === '' || value === 0 || value === false;
  }

  function compileUnary(crit) {
    var op = crit[0];
    var criteria = compileCriteria(crit[1]);

    if (op === '!') {
      return function (obj) {
        return !criteria(obj);
      };
    }

    throw _errors.errors.Error('E4003', op);
  }

  return function (crit) {
    if ((0, _type.isFunction)(crit)) {
      return crit;
    }

    if ((0, _utils.isGroupCriterion)(crit)) {
      return compileGroup(crit);
    }

    if ((0, _utils.isUnaryOperation)(crit)) {
      return compileUnary(crit);
    }

    return compileBinary(crit);
  };
}();

var FilterIterator = WrappedIterator.inherit({
  ctor: function ctor(iter, criteria) {
    this.callBase(iter);
    this.criteria = compileCriteria(criteria);
  },
  next: function next() {
    while (this.iter.next()) {
      if (this.criteria(this.current())) {
        return true;
      }
    }

    return false;
  }
});
var GroupIterator = Iterator.inherit({
  ctor: function ctor(iter, getter) {
    this.iter = iter;
    this.getter = getter;
  },
  next: function next() {
    this._ensureGrouped();

    return this.groupedIter.next();
  },
  current: function current() {
    this._ensureGrouped();

    return this.groupedIter.current();
  },
  reset: function reset() {
    delete this.groupedIter;
  },
  countable: function countable() {
    return !!this.groupedIter;
  },
  count: function count() {
    return this.groupedIter.count();
  },
  _ensureGrouped: function _ensureGrouped() {
    if (this.groupedIter) {
      return;
    }

    var hash = {};
    var keys = [];
    var iter = this.iter;
    var getter = (0, _data.compileGetter)(this.getter);
    iter.reset();

    while (iter.next()) {
      var current = iter.current();
      var key = getter(current);

      if (key in hash) {
        hash[key].push(current);
      } else {
        hash[key] = [current];
        keys.push(key);
      }
    }

    this.groupedIter = new ArrayIterator((0, _iterator.map)(keys, function (key) {
      return {
        key: key,
        items: hash[key]
      };
    }));
  }
});
var SelectIterator = WrappedIterator.inherit({
  ctor: function ctor(iter, getter) {
    this.callBase(iter);
    this.getter = (0, _data.compileGetter)(getter);
  },
  current: function current() {
    return this.getter(this.callBase());
  },
  countable: function countable() {
    return this.iter.countable();
  },
  count: function count() {
    return this.iter.count();
  }
});
var SliceIterator = WrappedIterator.inherit({
  ctor: function ctor(iter, skip, take) {
    this.callBase(iter);
    this.skip = Math.max(0, skip);
    this.take = Math.max(0, take);
    this.pos = 0;
  },
  next: function next() {
    if (this.pos >= this.skip + this.take) {
      return false;
    }

    while (this.pos < this.skip && this.iter.next()) {
      this.pos++;
    }

    this.pos++;
    return this.iter.next();
  },
  reset: function reset() {
    this.callBase();
    this.pos = 0;
  },
  countable: function countable() {
    return this.iter.countable();
  },
  count: function count() {
    return Math.min(this.iter.count() - this.skip, this.take);
  }
});

var arrayQueryImpl = function arrayQueryImpl(iter, queryOptions) {
  queryOptions = queryOptions || {};

  if (!(iter instanceof Iterator)) {
    iter = new ArrayIterator(iter);
  }

  var handleError = function handleError(error) {
    var handler = queryOptions.errorHandler;

    if (handler) {
      handler(error);
    }

    (0, _errors.handleError)(error);
  };

  var aggregateCore = function aggregateCore(aggregator) {
    var d = new _deferred.Deferred().fail(handleError);
    var seed;
    var step = aggregator.step;
    var finalize = aggregator.finalize;

    try {
      iter.reset();

      if ('seed' in aggregator) {
        seed = aggregator.seed;
      } else {
        seed = iter.next() ? iter.current() : NaN;
      }

      var accumulator = seed;

      while (iter.next()) {
        accumulator = step(accumulator, iter.current());
      }

      d.resolve(finalize ? finalize(accumulator) : accumulator);
    } catch (x) {
      d.reject(x);
    }

    return d.promise();
  };

  var aggregate = function aggregate(seed, step, finalize) {
    if (arguments.length < 2) {
      return aggregateCore({
        step: arguments[0]
      });
    }

    return aggregateCore({
      seed: seed,
      step: step,
      finalize: finalize
    });
  };

  var standardAggregate = function standardAggregate(name) {
    return aggregateCore(_utils.aggregators[name]);
  };

  var select = function select(getter) {
    if (!(0, _type.isFunction)(getter) && !Array.isArray(getter)) {
      getter = [].slice.call(arguments);
    }

    return chainQuery(new SelectIterator(iter, getter));
  };

  var selectProp = function selectProp(name) {
    return select((0, _data.compileGetter)(name));
  };

  function chainQuery(iter) {
    return arrayQueryImpl(iter, queryOptions);
  }

  return {
    toArray: function toArray() {
      return iter.toArray();
    },
    enumerate: function enumerate() {
      var d = new _deferred.Deferred().fail(handleError);

      try {
        d.resolve(iter.toArray());
      } catch (x) {
        d.reject(x);
      }

      return d.promise();
    },
    sortBy: function sortBy(getter, desc, compare) {
      return chainQuery(new SortIterator(iter, getter, desc, compare));
    },
    thenBy: function thenBy(getter, desc, compare) {
      if (iter instanceof SortIterator) {
        return chainQuery(iter.thenBy(getter, desc, compare));
      }

      throw _errors.errors.Error('E4004');
    },
    filter: function filter(criteria) {
      if (!Array.isArray(criteria)) {
        criteria = [].slice.call(arguments);
      }

      return chainQuery(new FilterIterator(iter, criteria));
    },
    slice: function slice(skip, take) {
      if (take === undefined) {
        take = Number.MAX_VALUE;
      }

      return chainQuery(new SliceIterator(iter, skip, take));
    },
    select: select,
    groupBy: function groupBy(getter) {
      return chainQuery(new GroupIterator(iter, getter));
    },
    aggregate: aggregate,
    count: function count() {
      if (iter.countable()) {
        var d = new _deferred.Deferred().fail(handleError);

        try {
          d.resolve(iter.count());
        } catch (x) {
          d.reject(x);
        }

        return d.promise();
      }

      return standardAggregate('count');
    },
    sum: function sum(getter) {
      if (getter) {
        return selectProp(getter).sum();
      }

      return standardAggregate('sum');
    },
    min: function min(getter) {
      if (getter) {
        return selectProp(getter).min();
      }

      return standardAggregate('min');
    },
    max: function max(getter) {
      if (getter) {
        return selectProp(getter).max();
      }

      return standardAggregate('max');
    },
    avg: function avg(getter) {
      if (getter) {
        return selectProp(getter).avg();
      }

      return standardAggregate('avg');
    }
  };
};

var _default = arrayQueryImpl;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.requestAnimationFrame = requestAnimationFrame;
exports.cancelAnimationFrame = cancelAnimationFrame;

var _window = __webpack_require__(7);

var _call_once = _interopRequireDefault(__webpack_require__(32));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.hasWindow)() ? (0, _window.getWindow)() : {};
var FRAME_ANIMATION_STEP_TIME = 1000 / 60;

var request = function request(callback) {
  return setTimeout(callback, FRAME_ANIMATION_STEP_TIME);
};

var cancel = function cancel(requestID) {
  clearTimeout(requestID);
};

var setAnimationFrameMethods = (0, _call_once.default)(function () {
  var nativeRequest = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
  var nativeCancel = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;

  if (nativeRequest && nativeCancel) {
    request = nativeRequest;
    cancel = nativeCancel;
  }

  if (nativeRequest && !nativeCancel) {
    // NOTE: https://code.google.com/p/android/issues/detail?id=66243
    var canceledRequests = {};

    request = function request(callback) {
      var requestId = nativeRequest.call(window, function () {
        try {
          if (requestId in canceledRequests) {
            return;
          }

          callback.apply(this, arguments);
        } finally {
          delete canceledRequests[requestId];
        }
      });
      return requestId;
    };

    cancel = function cancel(requestId) {
      canceledRequests[requestId] = true;
    };
  }
});

function requestAnimationFrame() {
  setAnimationFrameMethods();
  return request.apply(window, arguments);
}

function cancelAnimationFrame() {
  setAnimationFrameMethods();
  cancel.apply(window, arguments);
}

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _common = __webpack_require__(3);

var _iterator = __webpack_require__(4);

var _window = __webpack_require__(7);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _type = __webpack_require__(1);

var _extend = __webpack_require__(2);

var _position = __webpack_require__(29);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _translator = __webpack_require__(16);

var _support = __webpack_require__(34);

var _devices = _interopRequireDefault(__webpack_require__(10));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)();
var horzRe = /left|right/;
var vertRe = /top|bottom/;
var collisionRe = /fit|flip|none/;
var scaleRe = /scale(.+)/;
var IS_SAFARI = _browser.default.safari;

var normalizeAlign = function normalizeAlign(raw) {
  var result = {
    h: 'center',
    v: 'center'
  };
  var pair = (0, _common.splitPair)(raw);

  if (pair) {
    (0, _iterator.each)(pair, function () {
      var w = String(this).toLowerCase();

      if (horzRe.test(w)) {
        result.h = w;
      } else if (vertRe.test(w)) {
        result.v = w;
      }
    });
  }

  return result;
};

var normalizeOffset = function normalizeOffset(raw) {
  return (0, _common.pairToObject)(raw);
};

var normalizeCollision = function normalizeCollision(raw) {
  var pair = (0, _common.splitPair)(raw);
  var h = String(pair && pair[0]).toLowerCase();
  var v = String(pair && pair[1]).toLowerCase();

  if (!collisionRe.test(h)) {
    h = 'none';
  }

  if (!collisionRe.test(v)) {
    v = h;
  }

  return {
    h: h,
    v: v
  };
};

var getAlignFactor = function getAlignFactor(align) {
  switch (align) {
    case 'center':
      return 0.5;

    case 'right':
    case 'bottom':
      return 1;

    default:
      return 0;
  }
};

var inverseAlign = function inverseAlign(align) {
  switch (align) {
    case 'left':
      return 'right';

    case 'right':
      return 'left';

    case 'top':
      return 'bottom';

    case 'bottom':
      return 'top';

    default:
      return align;
  }
};

var calculateOversize = function calculateOversize(data, bounds) {
  var oversize = 0;

  if (data.myLocation < bounds.min) {
    oversize += bounds.min - data.myLocation;
  }

  if (data.myLocation > bounds.max) {
    oversize += data.myLocation - bounds.max;
  }

  return oversize;
};

var collisionSide = function collisionSide(direction, data, bounds) {
  if (data.myLocation < bounds.min) {
    return direction === 'h' ? 'left' : 'top';
  }

  if (data.myLocation > bounds.max) {
    return direction === 'h' ? 'right' : 'bottom';
  }

  return 'none';
}; // TODO: rename?


var initMyLocation = function initMyLocation(data) {
  data.myLocation = data.atLocation + getAlignFactor(data.atAlign) * data.atSize - getAlignFactor(data.myAlign) * data.mySize + data.offset;
};

var collisionResolvers = {
  'fit': function fit(data, bounds) {
    var result = false;

    if (data.myLocation > bounds.max) {
      data.myLocation = bounds.max;
      result = true;
    }

    if (data.myLocation < bounds.min) {
      data.myLocation = bounds.min;
      result = true;
    }

    data.fit = result;
  },
  'flip': function flip(data, bounds) {
    data.flip = false;

    if (data.myAlign === 'center' && data.atAlign === 'center') {
      return;
    }

    if (data.myLocation < bounds.min || data.myLocation > bounds.max) {
      var inverseData = (0, _extend.extend)({}, data, {
        myAlign: inverseAlign(data.myAlign),
        atAlign: inverseAlign(data.atAlign),
        offset: -data.offset
      });
      initMyLocation(inverseData);
      inverseData.oversize = calculateOversize(inverseData, bounds);

      if (inverseData.myLocation >= bounds.min && inverseData.myLocation <= bounds.max || data.oversize > inverseData.oversize) {
        data.myLocation = inverseData.myLocation;
        data.oversize = inverseData.oversize;
        data.flip = true;
      }
    }
  },
  'flipfit': function flipfit(data, bounds) {
    this.flip(data, bounds);
    this.fit(data, bounds);
  },
  'none': function none(data) {
    data.oversize = 0;
  }
};
var scrollbarWidth;

var calculateScrollbarWidth = function calculateScrollbarWidth() {
  var $scrollDiv = (0, _renderer.default)('<div>').css({
    width: 100,
    height: 100,
    overflow: 'scroll',
    position: 'absolute',
    top: -9999
  }).appendTo((0, _renderer.default)('body'));
  var result = $scrollDiv.get(0).offsetWidth - $scrollDiv.get(0).clientWidth;
  $scrollDiv.remove();
  scrollbarWidth = result;
};

var defaultPositionResult = {
  h: {
    location: 0,
    flip: false,
    fit: false,
    oversize: 0
  },
  v: {
    location: 0,
    flip: false,
    fit: false,
    oversize: 0
  }
};

var calculatePosition = function calculatePosition(what, options) {
  var $what = (0, _renderer.default)(what);
  var currentOffset = $what.offset();
  var result = (0, _extend.extend)(true, {}, defaultPositionResult, {
    h: {
      location: currentOffset.left
    },
    v: {
      location: currentOffset.top
    }
  });

  if (!options) {
    return result;
  }

  var my = normalizeAlign(options.my);
  var at = normalizeAlign(options.at);
  var of = (0, _renderer.default)(options.of).length && options.of || window;
  var offset = normalizeOffset(options.offset);
  var collision = normalizeCollision(options.collision);
  var boundary = options.boundary;
  var boundaryOffset = normalizeOffset(options.boundaryOffset);
  var h = {
    mySize: $what.outerWidth(),
    myAlign: my.h,
    atAlign: at.h,
    offset: offset.h,
    collision: collision.h,
    boundaryOffset: boundaryOffset.h
  };
  var v = {
    mySize: $what.outerHeight(),
    myAlign: my.v,
    atAlign: at.v,
    offset: offset.v,
    collision: collision.v,
    boundaryOffset: boundaryOffset.v
  };

  if (of.preventDefault) {
    h.atLocation = of.pageX;
    v.atLocation = of.pageY;
    h.atSize = 0;
    v.atSize = 0;
  } else {
    of = (0, _renderer.default)(of);

    if ((0, _type.isWindow)(of[0])) {
      h.atLocation = of.scrollLeft();
      v.atLocation = of.scrollTop();

      if (_devices.default.real().deviceType === 'phone' && of[0].visualViewport) {
        h.atLocation = Math.max(h.atLocation, of[0].visualViewport.offsetLeft);
        v.atLocation = Math.max(v.atLocation, of[0].visualViewport.offsetTop);
        h.atSize = of[0].visualViewport.width;
        v.atSize = of[0].visualViewport.height;
      } else {
        h.atSize = of[0].innerWidth > of[0].outerWidth ? of[0].innerWidth : of.width();
        v.atSize = of[0].innerHeight > of[0].outerHeight || IS_SAFARI ? of[0].innerHeight : of.height();
      }
    } else if (of[0].nodeType === 9) {
      h.atLocation = 0;
      v.atLocation = 0;
      h.atSize = of.width();
      v.atSize = of.height();
    } else {
      var ofRect = (0, _position.getBoundingRect)(of.get(0));
      var o = getOffsetWithoutScale(of);
      h.atLocation = o.left;
      v.atLocation = o.top;
      h.atSize = Math.max(ofRect.width, of.outerWidth());
      v.atSize = Math.max(ofRect.height, of.outerHeight());
    }
  }

  initMyLocation(h);
  initMyLocation(v);

  var bounds = function () {
    var win = (0, _renderer.default)(window);
    var windowWidth = win.width();
    var windowHeight = win.height();
    var left = win.scrollLeft();
    var top = win.scrollTop();

    var documentElement = _dom_adapter.default.getDocumentElement();

    var hZoomLevel = _support.touch ? documentElement.clientWidth / windowWidth : 1;
    var vZoomLevel = _support.touch ? documentElement.clientHeight / windowHeight : 1;

    if (scrollbarWidth === undefined) {
      calculateScrollbarWidth();
    }

    var boundaryWidth = windowWidth;
    var boundaryHeight = windowHeight;

    if (boundary) {
      var $boundary = (0, _renderer.default)(boundary);
      var boundaryPosition = $boundary.offset();
      left = boundaryPosition.left;
      top = boundaryPosition.top;
      boundaryWidth = $boundary.width();
      boundaryHeight = $boundary.height();
    }

    return {
      h: {
        min: left + h.boundaryOffset,
        max: left + boundaryWidth / hZoomLevel - h.mySize - h.boundaryOffset
      },
      v: {
        min: top + v.boundaryOffset,
        max: top + boundaryHeight / vZoomLevel - v.mySize - v.boundaryOffset
      }
    };
  }();

  h.oversize = calculateOversize(h, bounds.h);
  v.oversize = calculateOversize(v, bounds.v);
  h.collisionSide = collisionSide('h', h, bounds.h);
  v.collisionSide = collisionSide('v', v, bounds.v);

  if (collisionResolvers[h.collision]) {
    collisionResolvers[h.collision](h, bounds.h);
  }

  if (collisionResolvers[v.collision]) {
    collisionResolvers[v.collision](v, bounds.v);
  }

  var preciser = function preciser(number) {
    return options.precise ? number : Math.round(number);
  };

  (0, _extend.extend)(true, result, {
    h: {
      location: preciser(h.myLocation),
      oversize: preciser(h.oversize),
      fit: h.fit,
      flip: h.flip,
      collisionSide: h.collisionSide
    },
    v: {
      location: preciser(v.myLocation),
      oversize: preciser(v.oversize),
      fit: v.fit,
      flip: v.flip,
      collisionSide: v.collisionSide
    },
    precise: options.precise
  });
  return result;
};

var getOffsetWithoutScale = function getOffsetWithoutScale($startElement) {
  var _currentElement$getAt, _style$match;

  var $currentElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : $startElement;
  var currentElement = $currentElement.get(0);

  if (!currentElement) {
    return $startElement.offset();
  }

  var style = ((_currentElement$getAt = currentElement.getAttribute) === null || _currentElement$getAt === void 0 ? void 0 : _currentElement$getAt.call(currentElement, 'style')) || '';
  var scale = (_style$match = style.match(scaleRe)) === null || _style$match === void 0 ? void 0 : _style$match[0];
  var offset;

  if (scale) {
    currentElement.setAttribute('style', style.replace(scale, ''));
    offset = getOffsetWithoutScale($startElement, $currentElement.parent());
    currentElement.setAttribute('style', style);
  } else {
    offset = getOffsetWithoutScale($startElement, $currentElement.parent());
  }

  return offset;
};

var position = function position(what, options) {
  var $what = (0, _renderer.default)(what);

  if (!options) {
    return $what.offset();
  }

  (0, _translator.resetPosition)($what, true);
  var offset = getOffsetWithoutScale($what);
  var targetPosition = options.h && options.v ? options : calculatePosition($what, options);

  var preciser = function preciser(number) {
    return options.precise ? number : Math.round(number);
  };

  (0, _translator.move)($what, {
    left: targetPosition.h.location - preciser(offset.left),
    top: targetPosition.v.location - preciser(offset.top)
  });
  return targetPosition;
};

var offset = function offset(element) {
  element = (0, _renderer.default)(element).get(0);

  if ((0, _type.isWindow)(element)) {
    return null;
  } else if (element && 'pageY' in element && 'pageX' in element) {
    return {
      top: element.pageY,
      left: element.pageX
    };
  }

  return (0, _renderer.default)(element).offset();
};

if (!position.inverseAlign) {
  position.inverseAlign = inverseAlign;
}

if (!position.normalizeAlign) {
  position.normalizeAlign = normalizeAlign;
}

var _default = {
  calculateScrollbarWidth: calculateScrollbarWidth,
  calculate: calculatePosition,
  setup: position,
  offset: offset
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _browser = _interopRequireDefault(__webpack_require__(19));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _class = _interopRequireDefault(__webpack_require__(11));

var _index = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var POINTER_EVENTS_NAMESPACE = 'dxPointerEvents';

var BaseStrategy = _class.default.inherit({
  ctor: function ctor(eventName, originalEvents) {
    this._eventName = eventName;
    this._originalEvents = (0, _index.addNamespace)(originalEvents, POINTER_EVENTS_NAMESPACE);
    this._handlerCount = 0;
    this.noBubble = this._isNoBubble();
  },
  _isNoBubble: function _isNoBubble() {
    var eventName = this._eventName;
    return eventName === 'dxpointerenter' || eventName === 'dxpointerleave';
  },
  _handler: function _handler(e) {
    var delegateTarget = this._getDelegateTarget(e);

    return this._fireEvent({
      type: this._eventName,
      pointerType: e.pointerType || (0, _index.eventSource)(e),
      originalEvent: e,
      delegateTarget: delegateTarget,
      // NOTE: TimeStamp normalization (FF bug #238041) (T277118)
      timeStamp: _browser.default.mozilla ? new Date().getTime() : e.timeStamp
    });
  },
  _getDelegateTarget: function _getDelegateTarget(e) {
    var delegateTarget;

    if (this.noBubble) {
      delegateTarget = e.delegateTarget;
    }

    return delegateTarget;
  },
  _fireEvent: function _fireEvent(args) {
    return (0, _index.fireEvent)(args);
  },
  _setSelector: function _setSelector(handleObj) {
    this._selector = this.noBubble && handleObj ? handleObj.selector : null;
  },
  _getSelector: function _getSelector() {
    return this._selector;
  },
  setup: function setup() {
    return true;
  },
  add: function add(element, handleObj) {
    if (this._handlerCount <= 0 || this.noBubble) {
      element = this.noBubble ? element : _dom_adapter.default.getDocument();

      this._setSelector(handleObj);

      var that = this;

      _events_engine.default.on(element, this._originalEvents, this._getSelector(), function (e) {
        that._handler(e);
      });
    }

    if (!this.noBubble) {
      this._handlerCount++;
    }
  },
  remove: function remove(handleObj) {
    this._setSelector(handleObj);

    if (!this.noBubble) {
      this._handlerCount--;
    }
  },
  teardown: function teardown(element) {
    if (this._handlerCount && !this.noBubble) {
      return;
    }

    element = this.noBubble ? element : _dom_adapter.default.getDocument();

    if (this._originalEvents !== '.' + POINTER_EVENTS_NAMESPACE) {
      _events_engine.default.off(element, this._originalEvents, this._getSelector());
    }
  },
  dispose: function dispose(element) {
    element = this.noBubble ? element : _dom_adapter.default.getDocument();

    _events_engine.default.off(element, this._originalEvents);
  }
});

var _default = BaseStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _common = __webpack_require__(3);

var _class = _interopRequireDefault(__webpack_require__(11));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _extend = __webpack_require__(2);

var _index = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Emitter = _class.default.inherit({
  ctor: function ctor(element) {
    this._$element = (0, _renderer.default)(element);
    this._cancelCallback = (0, _callbacks.default)();
    this._acceptCallback = (0, _callbacks.default)();
  },
  getElement: function getElement() {
    return this._$element;
  },
  validate: function validate(e) {
    return !(0, _index.isDxMouseWheelEvent)(e);
  },
  validatePointers: function validatePointers(e) {
    return (0, _index.hasTouches)(e) === 1;
  },
  allowInterruptionByMouseWheel: function allowInterruptionByMouseWheel() {
    return true;
  },
  configure: function configure(data) {
    (0, _extend.extend)(this, data);
  },
  addCancelCallback: function addCancelCallback(callback) {
    this._cancelCallback.add(callback);
  },
  removeCancelCallback: function removeCancelCallback() {
    this._cancelCallback.empty();
  },
  _cancel: function _cancel(e) {
    this._cancelCallback.fire(this, e);
  },
  addAcceptCallback: function addAcceptCallback(callback) {
    this._acceptCallback.add(callback);
  },
  removeAcceptCallback: function removeAcceptCallback() {
    this._acceptCallback.empty();
  },
  _accept: function _accept(e) {
    this._acceptCallback.fire(this, e);
  },
  _requestAccept: function _requestAccept(e) {
    this._acceptRequestEvent = e;
  },
  _forgetAccept: function _forgetAccept() {
    this._accept(this._acceptRequestEvent);

    this._acceptRequestEvent = null;
  },
  start: _common.noop,
  move: _common.noop,
  end: _common.noop,
  cancel: _common.noop,
  reset: function reset() {
    if (this._acceptRequestEvent) {
      this._accept(this._acceptRequestEvent);
    }
  },
  _fireEvent: function _fireEvent(eventName, e, params) {
    var eventData = (0, _extend.extend)({
      type: eventName,
      originalEvent: e,
      target: this._getEmitterTarget(e),
      delegateTarget: this.getElement().get(0)
    }, params);
    e = (0, _index.fireEvent)(eventData);

    if (e.cancel) {
      this._cancel(e);
    }

    return e;
  },
  _getEmitterTarget: function _getEmitterTarget(e) {
    return (this.delegateSelector ? (0, _renderer.default)(e.target).closest(this.delegateSelector) : this.getElement()).get(0);
  },
  dispose: _common.noop
});

var _default = Emitter;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.showWave = showWave;
exports.hideWave = hideWave;
exports.render = exports.initConfig = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INKRIPPLE_CLASS = 'dx-inkripple';
var INKRIPPLE_WAVE_CLASS = 'dx-inkripple-wave';
var INKRIPPLE_SHOWING_CLASS = 'dx-inkripple-showing';
var INKRIPPLE_HIDING_CLASS = 'dx-inkripple-hiding';
var DEFAULT_WAVE_SIZE_COEFFICIENT = 2;
var MAX_WAVE_SIZE = 4000; // NOTE: incorrect scaling of ink with big size (T310238)

var ANIMATION_DURATION = 300;
var HOLD_ANIMATION_DURATION = 1000;
var DEFAULT_WAVE_INDEX = 0;

var initConfig = function initConfig() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var useHoldAnimation = config.useHoldAnimation,
      waveSizeCoefficient = config.waveSizeCoefficient,
      isCentered = config.isCentered,
      wavesNumber = config.wavesNumber;
  return {
    waveSizeCoefficient: waveSizeCoefficient || DEFAULT_WAVE_SIZE_COEFFICIENT,
    isCentered: isCentered || false,
    wavesNumber: wavesNumber || 1,
    durations: getDurations(useHoldAnimation !== null && useHoldAnimation !== void 0 ? useHoldAnimation : true)
  };
};

exports.initConfig = initConfig;

var render = function render(args) {
  var config = initConfig(args);
  return {
    showWave: showWave.bind(this, config),
    hideWave: hideWave.bind(this, config)
  };
};

exports.render = render;

var getInkRipple = function getInkRipple(element) {
  var result = element.children('.' + INKRIPPLE_CLASS);

  if (result.length === 0) {
    result = (0, _renderer.default)('<div>').addClass(INKRIPPLE_CLASS).appendTo(element);
  }

  return result;
};

var getWaves = function getWaves(element, wavesNumber) {
  var inkRipple = getInkRipple((0, _renderer.default)(element));
  var result = inkRipple.children('.' + INKRIPPLE_WAVE_CLASS).toArray();

  for (var i = result.length; i < wavesNumber; i++) {
    var $currentWave = (0, _renderer.default)('<div>').appendTo(inkRipple).addClass(INKRIPPLE_WAVE_CLASS);
    result.push($currentWave[0]);
  }

  return (0, _renderer.default)(result);
};

var getWaveStyleConfig = function getWaveStyleConfig(args, config) {
  var element = (0, _renderer.default)(config.element);
  var elementWidth = element.outerWidth();
  var elementHeight = element.outerHeight();
  var elementDiagonal = parseInt(Math.sqrt(elementWidth * elementWidth + elementHeight * elementHeight));
  var waveSize = Math.min(MAX_WAVE_SIZE, parseInt(elementDiagonal * args.waveSizeCoefficient));
  var left;
  var top;

  if (args.isCentered) {
    left = (elementWidth - waveSize) / 2;
    top = (elementHeight - waveSize) / 2;
  } else {
    var event = config.event;
    var position = element.offset();
    var x = event.pageX - position.left;
    var y = event.pageY - position.top;
    left = x - waveSize / 2;
    top = y - waveSize / 2;
  }

  return {
    left: left,
    top: top,
    height: waveSize,
    width: waveSize
  };
};

function showWave(args, config) {
  var $wave = getWaves(config.element, args.wavesNumber).eq(config.wave || DEFAULT_WAVE_INDEX);
  args.hidingTimeout && clearTimeout(args.hidingTimeout);
  hideSelectedWave($wave);
  $wave.css(getWaveStyleConfig(args, config));
  args.showingTimeout = setTimeout(showingWaveHandler.bind(this, args, $wave), 0);
}

function showingWaveHandler(args, $wave) {
  var durationCss = args.durations.showingScale + 'ms';
  $wave.addClass(INKRIPPLE_SHOWING_CLASS).css('transitionDuration', durationCss);
}

function getDurations(useHoldAnimation) {
  return {
    showingScale: useHoldAnimation ? HOLD_ANIMATION_DURATION : ANIMATION_DURATION,
    hidingScale: ANIMATION_DURATION,
    hidingOpacity: ANIMATION_DURATION
  };
}

function hideSelectedWave($wave) {
  $wave.removeClass(INKRIPPLE_HIDING_CLASS).css('transitionDuration', '');
}

function hideWave(args, config) {
  args.showingTimeout && clearTimeout(args.showingTimeout);
  var $wave = getWaves(config.element, config.wavesNumber).eq(config.wave || DEFAULT_WAVE_INDEX);
  var durations = args.durations;
  var durationCss = durations.hidingScale + 'ms, ' + durations.hidingOpacity + 'ms';
  $wave.addClass(INKRIPPLE_HIDING_CLASS).removeClass(INKRIPPLE_SHOWING_CLASS).css('transitionDuration', durationCss);
  var animationDuration = Math.max(durations.hidingScale, durations.hidingOpacity);
  args.hidingTimeout = setTimeout(hideSelectedWave.bind(this, $wave), animationDuration);
}

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.attachInstanceToElement = attachInstanceToElement;
exports.getInstanceByElement = getInstanceByElement;
exports.name = void 0;

var _element_data = __webpack_require__(25);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _weak_map = _interopRequireDefault(__webpack_require__(69));

var _type = __webpack_require__(1);

var _remove_event = __webpack_require__(75);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COMPONENT_NAMES_DATA_KEY = 'dxComponents';
var ANONYMOUS_COMPONENT_DATA_KEY = 'dxPrivateComponent';
var componentNames = new _weak_map.default();
var nextAnonymousComponent = 0;

var getName = function getName(componentClass, newName) {
  if ((0, _type.isDefined)(newName)) {
    componentNames.set(componentClass, newName);
    return;
  }

  if (!componentNames.has(componentClass)) {
    var generatedName = ANONYMOUS_COMPONENT_DATA_KEY + nextAnonymousComponent++;
    componentNames.set(componentClass, generatedName);
    return generatedName;
  }

  return componentNames.get(componentClass);
};

exports.name = getName;

function attachInstanceToElement($element, componentInstance, disposeFn) {
  var data = (0, _element_data.data)($element.get(0));
  var name = getName(componentInstance.constructor);
  data[name] = componentInstance;

  if (disposeFn) {
    _events_engine.default.one($element, _remove_event.removeEvent, function () {
      disposeFn.call(componentInstance);
    });
  }

  if (!data[COMPONENT_NAMES_DATA_KEY]) {
    data[COMPONENT_NAMES_DATA_KEY] = [];
  }

  data[COMPONENT_NAMES_DATA_KEY].push(name);
}

function getInstanceByElement($element, componentClass) {
  var name = getName(componentClass);
  return (0, _element_data.data)($element.get(0), name);
}

/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _window = __webpack_require__(7);

var _type = __webpack_require__(1);

var _iterator = __webpack_require__(4);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Action = /*#__PURE__*/function () {
  function Action(action, config) {
    config = config || {};
    this._action = action;
    this._context = config.context || (0, _window.getWindow)();
    this._beforeExecute = config.beforeExecute;
    this._afterExecute = config.afterExecute;
    this._component = config.component;
    this._validatingTargetName = config.validatingTargetName;
    var excludeValidators = this._excludeValidators = {};

    if (config.excludeValidators) {
      for (var i = 0; i < config.excludeValidators.length; i++) {
        excludeValidators[config.excludeValidators[i]] = true;
      }
    }
  }

  var _proto = Action.prototype;

  _proto.execute = function execute() {
    var e = {
      action: this._action,
      args: Array.prototype.slice.call(arguments),
      context: this._context,
      component: this._component,
      validatingTargetName: this._validatingTargetName,
      cancel: false,
      handled: false
    };
    var beforeExecute = this._beforeExecute;
    var afterExecute = this._afterExecute;
    var argsBag = e.args[0] || {};

    if (!this._validateAction(e)) {
      return;
    }

    beforeExecute === null || beforeExecute === void 0 ? void 0 : beforeExecute.call(this._context, e);

    if (e.cancel) {
      return;
    }

    var result = this._executeAction(e);

    if (argsBag.cancel) {
      return;
    }

    afterExecute === null || afterExecute === void 0 ? void 0 : afterExecute.call(this._context, e);
    return result;
  };

  _proto._validateAction = function _validateAction(e) {
    var excludeValidators = this._excludeValidators;
    var executors = Action.executors;

    for (var name in executors) {
      if (!excludeValidators[name]) {
        var _executor$validate;

        var executor = executors[name];
        (_executor$validate = executor.validate) === null || _executor$validate === void 0 ? void 0 : _executor$validate.call(executor, e);

        if (e.cancel) {
          return false;
        }
      }
    }

    return true;
  };

  _proto._executeAction = function _executeAction(e) {
    var result;
    var executors = Action.executors;

    for (var name in executors) {
      var _executor$execute;

      var executor = executors[name];
      (_executor$execute = executor.execute) === null || _executor$execute === void 0 ? void 0 : _executor$execute.call(executor, e);

      if (e.handled) {
        result = e.result;
        break;
      }
    }

    return result;
  };

  Action.registerExecutor = function registerExecutor(name, executor) {
    if ((0, _type.isPlainObject)(name)) {
      (0, _iterator.each)(name, Action.registerExecutor);
      return;
    }

    Action.executors[name] = executor;
  };

  Action.unregisterExecutor = function unregisterExecutor() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    (0, _iterator.each)(args, function () {
      delete Action.executors[this];
    });
  };

  return Action;
}();

exports.default = Action;
Action.executors = {};

var createValidatorByTargetElement = function createValidatorByTargetElement(condition) {
  return function (e) {
    if (!e.args.length) {
      return;
    }

    var args = e.args[0];
    var element = args[e.validatingTargetName] || args.element;

    if (element && condition((0, _renderer.default)(element))) {
      e.cancel = true;
    }
  };
};

Action.registerExecutor({
  'disabled': {
    validate: createValidatorByTargetElement(function ($target) {
      return $target.is('.dx-state-disabled, .dx-state-disabled *');
    })
  },
  'readOnly': {
    validate: createValidatorByTargetElement(function ($target) {
      return $target.is('.dx-state-readonly, .dx-state-readonly *:not(.dx-state-independent)');
    })
  },
  'undefined': {
    execute: function execute(e) {
      if (!e.action) {
        e.result = undefined;
        e.handled = true;
      }
    }
  },
  'func': {
    execute: function execute(e) {
      if ((0, _type.isFunction)(e.action)) {
        e.result = e.action.call(e.context, e.args[0]);
        e.handled = true;
      }
    }
  }
});
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _config = _interopRequireDefault(__webpack_require__(18));

var _errors = _interopRequireDefault(__webpack_require__(13));

var _resize_callbacks = _interopRequireDefault(__webpack_require__(94));

var _component = __webpack_require__(154);

var _template_manager = __webpack_require__(159);

var _public_component = __webpack_require__(60);

var _element_data = __webpack_require__(25);

var _iterator = __webpack_require__(4);

var _extend = __webpack_require__(2);

var _element = __webpack_require__(20);

var _common = __webpack_require__(3);

var _array = __webpack_require__(12);

var _type = __webpack_require__(1);

var _window = __webpack_require__(7);

var _short = __webpack_require__(64);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var abstract = _component.Component.abstract;

var DOMComponent = _component.Component.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      width: undefined,
      height: undefined,
      rtlEnabled: (0, _config.default)().rtlEnabled,
      elementAttr: {},
      disabled: false,
      integrationOptions: {}
    }, this._useTemplates() ? _template_manager.TemplateManager.createDefaultOptions() : {});
  },

  /**
  * @name DOMComponent.ctor
  * @publicName ctor(element,options)
  * @param1 element:Element|JQuery
  * @param2 options:DOMComponentOptions|undefined
  * @hidden
  */
  ctor: function ctor(element, options) {
    this._customClass = null;

    this._createElement(element);

    (0, _public_component.attachInstanceToElement)(this._$element, this, this._dispose);
    this.callBase(options);
  },
  _createElement: function _createElement(element) {
    this._$element = (0, _renderer.default)(element);
  },
  _getSynchronizableOptionsForCreateComponent: function _getSynchronizableOptionsForCreateComponent() {
    return ['rtlEnabled', 'disabled', 'templatesRenderAsynchronously'];
  },
  _visibilityChanged: abstract,
  _dimensionChanged: abstract,
  _init: function _init() {
    this.callBase();

    this._attachWindowResizeCallback();

    this._initTemplateManager();
  },
  _setOptionsByDevice: function _setOptionsByDevice(instanceCustomRules) {
    this.callBase([].concat(this.constructor._classCustomRules || [], instanceCustomRules || []));
  },
  _isInitialOptionValue: function _isInitialOptionValue(name) {
    var isCustomOption = this.constructor._classCustomRules && Object.prototype.hasOwnProperty.call(this._convertRulesToOptions(this.constructor._classCustomRules), name);
    return !isCustomOption && this.callBase(name);
  },
  _attachWindowResizeCallback: function _attachWindowResizeCallback() {
    if (this._isDimensionChangeSupported()) {
      var windowResizeCallBack = this._windowResizeCallBack = this._dimensionChanged.bind(this);

      _resize_callbacks.default.add(windowResizeCallBack);
    }
  },
  _isDimensionChangeSupported: function _isDimensionChangeSupported() {
    return this._dimensionChanged !== abstract;
  },
  _renderComponent: function _renderComponent() {
    this._initMarkup();

    (0, _window.hasWindow)() && this._render();
  },
  _initMarkup: function _initMarkup() {
    var _ref = this.option() || {},
        rtlEnabled = _ref.rtlEnabled;

    this._renderElementAttributes();

    this._toggleRTLDirection(rtlEnabled);

    this._renderVisibilityChange();

    this._renderDimensions();
  },
  _render: function _render() {
    this._attachVisibilityChangeHandlers();
  },
  _renderElementAttributes: function _renderElementAttributes() {
    var _ref2 = this.option() || {},
        elementAttr = _ref2.elementAttr;

    var attributes = (0, _extend.extend)({}, elementAttr);
    var classNames = attributes.class;
    delete attributes.class;
    this.$element().attr(attributes).removeClass(this._customClass).addClass(classNames);
    this._customClass = classNames;
  },
  _renderVisibilityChange: function _renderVisibilityChange() {
    if (this._isDimensionChangeSupported()) {
      this._attachDimensionChangeHandlers();
    }

    if (this._isVisibilityChangeSupported()) {
      var $element = this.$element();
      $element.addClass('dx-visibility-change-handler');
    }
  },
  _renderDimensions: function _renderDimensions() {
    var $element = this.$element();
    var element = $element.get(0);

    var width = this._getOptionValue('width', element);

    var height = this._getOptionValue('height', element);

    if (this._isCssUpdateRequired(element, height, width)) {
      $element.css({
        width: width === null ? '' : width,
        height: height === null ? '' : height
      });
    }
  },
  _isCssUpdateRequired: function _isCssUpdateRequired(element, height, width) {
    return !!((0, _type.isDefined)(width) || (0, _type.isDefined)(height) || element.style.width || element.style.height);
  },
  _attachDimensionChangeHandlers: function _attachDimensionChangeHandlers() {
    var _this = this;

    var $el = this.$element();
    var namespace = "".concat(this.NAME, "VisibilityChange");

    _short.resize.off($el, {
      namespace: namespace
    });

    _short.resize.on($el, function () {
      return _this._dimensionChanged();
    }, {
      namespace: namespace
    });
  },
  _attachVisibilityChangeHandlers: function _attachVisibilityChangeHandlers() {
    var _this2 = this;

    if (this._isVisibilityChangeSupported()) {
      var $el = this.$element();
      var namespace = "".concat(this.NAME, "VisibilityChange");
      this._isHidden = !this._isVisible();

      _short.visibility.off($el, {
        namespace: namespace
      });

      _short.visibility.on($el, function () {
        return _this2._checkVisibilityChanged('shown');
      }, function () {
        return _this2._checkVisibilityChanged('hiding');
      }, {
        namespace: namespace
      });
    }
  },
  _isVisible: function _isVisible() {
    var $element = this.$element();
    return $element.is(':visible');
  },
  _checkVisibilityChanged: function _checkVisibilityChanged(action) {
    var isVisible = this._isVisible();

    if (isVisible) {
      if (action === 'hiding' && !this._isHidden) {
        this._visibilityChanged(false);

        this._isHidden = true;
      } else if (action === 'shown' && this._isHidden) {
        this._isHidden = false;

        this._visibilityChanged(true);
      }
    }
  },
  _isVisibilityChangeSupported: function _isVisibilityChangeSupported() {
    return this._visibilityChanged !== abstract && (0, _window.hasWindow)();
  },
  _clean: _common.noop,
  _modelByElement: function _modelByElement() {
    var _this$option = this.option(),
        modelByElement = _this$option.modelByElement;

    var $element = this.$element();
    return modelByElement ? modelByElement($element) : undefined;
  },
  _invalidate: function _invalidate() {
    if (this._isUpdateAllowed()) {
      throw _errors.default.Error('E0007');
    }

    this._requireRefresh = true;
  },
  _refresh: function _refresh() {
    this._clean();

    this._renderComponent();
  },
  _dispose: function _dispose() {
    this._templateManager && this._templateManager.dispose();
    this.callBase();

    this._clean();

    this._detachWindowResizeCallback();
  },
  _detachWindowResizeCallback: function _detachWindowResizeCallback() {
    if (this._isDimensionChangeSupported()) {
      _resize_callbacks.default.remove(this._windowResizeCallBack);
    }
  },
  _toggleRTLDirection: function _toggleRTLDirection(rtl) {
    var $element = this.$element();
    $element.toggleClass('dx-rtl', rtl);
  },
  _createComponent: function _createComponent(element, component) {
    var _this3 = this;

    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var synchronizableOptions = (0, _common.grep)(this._getSynchronizableOptionsForCreateComponent(), function (value) {
      return !(value in config);
    });

    var _this$option2 = this.option(),
        integrationOptions = _this$option2.integrationOptions;

    var _this$option3 = this.option(),
        nestedComponentOptions = _this$option3.nestedComponentOptions;

    nestedComponentOptions = nestedComponentOptions || _common.noop;
    var nestedComponentConfig = (0, _extend.extend)({
      integrationOptions: integrationOptions
    }, nestedComponentOptions(this));
    synchronizableOptions.forEach(function (optionName) {
      return nestedComponentConfig[optionName] = _this3.option(optionName);
    });

    this._extendConfig(config, nestedComponentConfig);

    var instance = void 0;

    if ((0, _type.isString)(component)) {
      var $element = (0, _renderer.default)(element)[component](config);
      instance = $element[component]('instance');
    } else if (element) {
      instance = component.getInstance(element);

      if (instance) {
        instance.option(config);
      } else {
        instance = new component(element, config);
      }
    }

    if (instance) {
      var optionChangedHandler = function optionChangedHandler(_ref3) {
        var name = _ref3.name,
            value = _ref3.value;

        if ((0, _array.inArray)(name, synchronizableOptions) >= 0) {
          instance.option(name, value);
        }
      };

      this.on('optionChanged', optionChangedHandler);
      instance.on('disposing', function () {
        return _this3.off('optionChanged', optionChangedHandler);
      });
    }

    return instance;
  },
  _extendConfig: function _extendConfig(config, extendConfig) {
    (0, _iterator.each)(extendConfig, function (key, value) {
      !Object.prototype.hasOwnProperty.call(config, key) && (config[key] = value);
    });
  },
  _defaultActionConfig: function _defaultActionConfig() {
    var $element = this.$element();

    var context = this._modelByElement($element);

    return (0, _extend.extend)(this.callBase(), {
      context: context
    });
  },

  /**
  * @pseudo Action
  * @section Utils
  * @type function
  * @default null
  * @type_function_param1 e:object
  * @type_function_param1_field1 component:this
  * @type_function_param1_field2 element:DxElement
  * @type_function_param1_field3 model:object
  **/
  _defaultActionArgs: function _defaultActionArgs() {
    var $element = this.$element();

    var model = this._modelByElement($element);

    var element = this.element();
    return (0, _extend.extend)(this.callBase(), {
      element: element,
      model: model
    });
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'width':
      case 'height':
        this._renderDimensions();

        break;

      case 'rtlEnabled':
        this._invalidate();

        break;

      case 'elementAttr':
        this._renderElementAttributes();

        break;

      case 'disabled':
      case 'integrationOptions':
        break;

      default:
        this.callBase(args);
        break;
    }
  },
  _removeAttributes: function _removeAttributes(element) {
    var attrs = element.attributes;

    for (var i = attrs.length - 1; i >= 0; i--) {
      var attr = attrs[i];

      if (attr) {
        var name = attr.name;

        if (!name.indexOf('aria-') || name.indexOf('dx-') !== -1 || name === 'role' || name === 'style' || name === 'tabindex') {
          element.removeAttribute(name);
        }
      }
    }
  },
  _removeClasses: function _removeClasses(element) {
    element.className = element.className.split(' ').filter(function (cssClass) {
      return cssClass.lastIndexOf('dx-', 0) !== 0;
    }).join(' ');
  },
  _updateDOMComponent: function _updateDOMComponent(renderRequired) {
    if (renderRequired) {
      this._renderComponent();
    } else if (this._requireRefresh) {
      this._requireRefresh = false;

      this._refresh();
    }
  },
  endUpdate: function endUpdate() {
    var renderRequired = this._isInitializingRequired();

    this.callBase();
    this._isUpdateAllowed() && this._updateDOMComponent(renderRequired);
  },
  $element: function $element() {
    return this._$element;
  },
  element: function element() {
    var $element = this.$element();
    return (0, _element.getPublicElement)($element);
  },
  dispose: function dispose() {
    var element = this.$element().get(0);
    (0, _element_data.cleanDataRecursive)(element, true);
    element.textContent = '';

    this._removeAttributes(element);

    this._removeClasses(element);
  },
  resetOption: function resetOption(optionName) {
    this.callBase(optionName);

    if (optionName === 'width' || optionName === 'height') {
      var initialOption = this.initialOption(optionName);
      !(0, _type.isDefined)(initialOption) && this.$element().css(optionName, '');
    }
  },
  _getAnonymousTemplateName: function _getAnonymousTemplateName() {
    return void 0;
  },
  _initTemplateManager: function _initTemplateManager() {
    if (this._templateManager || !this._useTemplates()) return void 0;

    var _this$option4 = this.option(),
        _this$option4$integra = _this$option4.integrationOptions,
        integrationOptions = _this$option4$integra === void 0 ? {} : _this$option4$integra;

    var createTemplate = integrationOptions.createTemplate;
    this._templateManager = new _template_manager.TemplateManager(createTemplate, this._getAnonymousTemplateName());

    this._initTemplates();
  },
  _initTemplates: function _initTemplates() {
    var _this4 = this;

    var _this$_templateManage = this._templateManager.extractTemplates(this.$element()),
        templates = _this$_templateManage.templates,
        anonymousTemplateMeta = _this$_templateManage.anonymousTemplateMeta;

    var anonymousTemplate = this.option("integrationOptions.templates.".concat(anonymousTemplateMeta.name));
    templates.forEach(function (_ref4) {
      var name = _ref4.name,
          template = _ref4.template;

      _this4._options.silent("integrationOptions.templates.".concat(name), template);
    });

    if (anonymousTemplateMeta.name && !anonymousTemplate) {
      this._options.silent("integrationOptions.templates.".concat(anonymousTemplateMeta.name), anonymousTemplateMeta.template);

      this._options.silent('_hasAnonymousTemplateContent', true);
    }
  },
  _getTemplateByOption: function _getTemplateByOption(optionName) {
    return this._getTemplate(this.option(optionName));
  },
  _getTemplate: function _getTemplate(templateSource) {
    var templates = this.option('integrationOptions.templates');
    var isAsyncTemplate = this.option('templatesRenderAsynchronously');
    var skipTemplates = this.option('integrationOptions.skipTemplates');
    return this._templateManager.getTemplate(templateSource, templates, {
      isAsyncTemplate: isAsyncTemplate,
      skipTemplates: skipTemplates
    }, this);
  },
  _saveTemplate: function _saveTemplate(name, template) {
    this._setOptionWithoutOptionChange('integrationOptions.templates.' + name, this._templateManager._createTemplate(template));
  },
  _useTemplates: function _useTemplates() {
    return true;
  }
});

DOMComponent.getInstance = function (element) {
  return (0, _public_component.getInstanceByElement)((0, _renderer.default)(element), this);
};

DOMComponent.defaultOptions = function (rule) {
  this._classCustomRules = this._classCustomRules || [];

  this._classCustomRules.push(rule);
};

var _default = DOMComponent;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.triggerResizeEvent = exports.triggerHidingEvent = exports.triggerShownEvent = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var triggerVisibilityChangeEvent = function triggerVisibilityChangeEvent(eventName) {
  var VISIBILITY_CHANGE_SELECTOR = '.dx-visibility-change-handler';
  return function (element) {
    var $element = (0, _renderer.default)(element || 'body');
    var changeHandlers = $element.filter(VISIBILITY_CHANGE_SELECTOR).add($element.find(VISIBILITY_CHANGE_SELECTOR));

    for (var i = 0; i < changeHandlers.length; i++) {
      _events_engine.default.triggerHandler(changeHandlers[i], eventName);
    }
  };
};

var triggerShownEvent = triggerVisibilityChangeEvent('dxshown');
exports.triggerShownEvent = triggerShownEvent;
var triggerHidingEvent = triggerVisibilityChangeEvent('dxhiding');
exports.triggerHidingEvent = triggerHidingEvent;
var triggerResizeEvent = triggerVisibilityChangeEvent('dxresize');
exports.triggerResizeEvent = triggerResizeEvent;

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.keyboard = exports.dxPointerUp = exports.dxPointerDown = exports.dxScrollCancel = exports.dxScrollStop = exports.dxScrollEnd = exports.dxScrollMove = exports.dxScrollStart = exports.dxScrollInit = exports.click = exports.dxClick = exports.focus = exports.visibility = exports.hover = exports.resize = exports.active = void 0;

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _keyboard_processor = _interopRequireDefault(__webpack_require__(163));

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function addNamespace(event, namespace) {
  return namespace ? (0, _index.addNamespace)(event, namespace) : event;
}

function executeAction(action, args) {
  return typeof action === 'function' ? action(args) : action.execute(args);
}

var active = {
  on: function on($el, active, inactive, opts) {
    var selector = opts.selector,
        showTimeout = opts.showTimeout,
        hideTimeout = opts.hideTimeout,
        namespace = opts.namespace;

    _events_engine.default.on($el, addNamespace('dxactive', namespace), selector, {
      timeout: showTimeout
    }, function (event) {
      return executeAction(active, {
        event: event,
        element: event.currentTarget
      });
    });

    _events_engine.default.on($el, addNamespace('dxinactive', namespace), selector, {
      timeout: hideTimeout
    }, function (event) {
      return executeAction(inactive, {
        event: event,
        element: event.currentTarget
      });
    });
  },
  off: function off($el, _ref) {
    var namespace = _ref.namespace,
        selector = _ref.selector;

    _events_engine.default.off($el, addNamespace('dxactive', namespace), selector);

    _events_engine.default.off($el, addNamespace('dxinactive', namespace), selector);
  }
};
exports.active = active;
var resize = {
  on: function on($el, resize) {
    var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref2.namespace;

    _events_engine.default.on($el, addNamespace('dxresize', namespace), resize);
  },
  off: function off($el) {
    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref3.namespace;

    _events_engine.default.off($el, addNamespace('dxresize', namespace));
  }
};
exports.resize = resize;
var hover = {
  on: function on($el, start, end, _ref4) {
    var selector = _ref4.selector,
        namespace = _ref4.namespace;

    _events_engine.default.on($el, addNamespace('dxhoverend', namespace), selector, function (event) {
      return end(event);
    });

    _events_engine.default.on($el, addNamespace('dxhoverstart', namespace), selector, function (event) {
      return executeAction(start, {
        element: event.target,
        event: event
      });
    });
  },
  off: function off($el, _ref5) {
    var selector = _ref5.selector,
        namespace = _ref5.namespace;

    _events_engine.default.off($el, addNamespace('dxhoverstart', namespace), selector);

    _events_engine.default.off($el, addNamespace('dxhoverend', namespace), selector);
  }
};
exports.hover = hover;
var visibility = {
  on: function on($el, shown, hiding, _ref6) {
    var namespace = _ref6.namespace;

    _events_engine.default.on($el, addNamespace('dxhiding', namespace), hiding);

    _events_engine.default.on($el, addNamespace('dxshown', namespace), shown);
  },
  off: function off($el, _ref7) {
    var namespace = _ref7.namespace;

    _events_engine.default.off($el, addNamespace('dxhiding', namespace));

    _events_engine.default.off($el, addNamespace('dxshown', namespace));
  }
};
exports.visibility = visibility;
var focus = {
  on: function on($el, focusIn, focusOut, _ref8) {
    var namespace = _ref8.namespace,
        isFocusable = _ref8.isFocusable;

    _events_engine.default.on($el, addNamespace('focusin', namespace), focusIn);

    _events_engine.default.on($el, addNamespace('focusout', namespace), focusOut);

    if (_dom_adapter.default.hasDocumentProperty('onbeforeactivate')) {
      _events_engine.default.on($el, addNamespace('beforeactivate', namespace), function (e) {
        return isFocusable(null, e.target) || e.preventDefault();
      });
    }
  },
  off: function off($el, _ref9) {
    var namespace = _ref9.namespace;

    _events_engine.default.off($el, addNamespace('focusin', namespace));

    _events_engine.default.off($el, addNamespace('focusout', namespace));

    if (_dom_adapter.default.hasDocumentProperty('onbeforeactivate')) {
      _events_engine.default.off($el, addNamespace('beforeactivate', namespace));
    }
  },
  trigger: function trigger($el) {
    return _events_engine.default.trigger($el, 'focus');
  }
};
exports.focus = focus;
var dxClick = {
  on: function on($el, click) {
    var _ref10 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref10.namespace;

    _events_engine.default.on($el, addNamespace('dxclick', namespace), click);
  },
  off: function off($el) {
    var _ref11 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref11.namespace;

    _events_engine.default.off($el, addNamespace('dxclick', namespace));
  }
};
exports.dxClick = dxClick;
var click = {
  on: function on($el, click) {
    var _ref12 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref12.namespace;

    _events_engine.default.on($el, addNamespace('click', namespace), click);
  },
  off: function off($el) {
    var _ref13 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref13.namespace;

    _events_engine.default.off($el, addNamespace('click', namespace));
  }
};
exports.click = click;
var dxScrollInit = {
  on: function on($el, onInit, eventData) {
    var _ref14 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
        namespace = _ref14.namespace;

    _events_engine.default.on($el, addNamespace('dxscrollinit', namespace), eventData, onInit);
  },
  off: function off($el) {
    var _ref15 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref15.namespace;

    _events_engine.default.off($el, addNamespace('dxscrollinit', namespace));
  }
};
exports.dxScrollInit = dxScrollInit;
var dxScrollStart = {
  on: function on($el, onStart) {
    var _ref16 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref16.namespace;

    _events_engine.default.on($el, addNamespace('dxscrollstart', namespace), onStart);
  },
  off: function off($el) {
    var _ref17 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref17.namespace;

    _events_engine.default.off($el, addNamespace('dxscrollstart', namespace));
  }
};
exports.dxScrollStart = dxScrollStart;
var dxScrollMove = {
  on: function on($el, onScroll) {
    var _ref18 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref18.namespace;

    _events_engine.default.on($el, addNamespace('dxscroll', namespace), onScroll);
  },
  off: function off($el) {
    var _ref19 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref19.namespace;

    _events_engine.default.off($el, addNamespace('dxscroll', namespace));
  }
};
exports.dxScrollMove = dxScrollMove;
var dxScrollEnd = {
  on: function on($el, onEnd) {
    var _ref20 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref20.namespace;

    _events_engine.default.on($el, addNamespace('dxscrollend', namespace), onEnd);
  },
  off: function off($el) {
    var _ref21 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref21.namespace;

    _events_engine.default.off($el, addNamespace('dxscrollend', namespace));
  }
};
exports.dxScrollEnd = dxScrollEnd;
var dxScrollStop = {
  on: function on($el, onStop) {
    var _ref22 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref22.namespace;

    _events_engine.default.on($el, addNamespace('dxscrollstop', namespace), onStop);
  },
  off: function off($el) {
    var _ref23 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref23.namespace;

    _events_engine.default.off($el, addNamespace('dxscrollstop', namespace));
  }
};
exports.dxScrollStop = dxScrollStop;
var dxScrollCancel = {
  on: function on($el, onCancel) {
    var _ref24 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref24.namespace;

    _events_engine.default.on($el, addNamespace('dxscrollcancel', namespace), onCancel);
  },
  off: function off($el) {
    var _ref25 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref25.namespace;

    _events_engine.default.off($el, addNamespace('dxscrollcancel', namespace));
  }
};
exports.dxScrollCancel = dxScrollCancel;
var dxPointerDown = {
  on: function on($el, onPointerDown) {
    var _ref26 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref26.namespace;

    _events_engine.default.on($el, addNamespace(_pointer.default.down, namespace), onPointerDown);
  },
  off: function off($el) {
    var _ref27 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref27.namespace;

    _events_engine.default.off($el, addNamespace(_pointer.default.down, namespace));
  }
};
exports.dxPointerDown = dxPointerDown;
var dxPointerUp = {
  on: function on($el, onPointerUp) {
    var _ref28 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
        namespace = _ref28.namespace;

    _events_engine.default.on($el, addNamespace(_pointer.default.up, namespace), onPointerUp);
  },
  off: function off($el) {
    var _ref29 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        namespace = _ref29.namespace;

    _events_engine.default.off($el, addNamespace(_pointer.default.up, namespace));
  }
};
exports.dxPointerUp = dxPointerUp;
var index = 0;
var keyboardProcessors = {};

var generateListenerId = function generateListenerId() {
  return "keyboardProcessorId".concat(index++);
};

var keyboard = {
  on: function on(element, focusTarget, handler) {
    var listenerId = generateListenerId();
    keyboardProcessors[listenerId] = new _keyboard_processor.default({
      element: element,
      focusTarget: focusTarget,
      handler: handler
    });
    return listenerId;
  },
  off: function off(listenerId) {
    if (listenerId && keyboardProcessors[listenerId]) {
      keyboardProcessors[listenerId].dispose();
      delete keyboardProcessors[listenerId];
    }
  },
  // NOTE: For tests
  _getProcessor: function _getProcessor(listenerId) {
    return keyboardProcessors[listenerId];
  }
};
exports.keyboard = keyboard;

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _fx = _interopRequireDefault(__webpack_require__(37));

var _position = _interopRequireDefault(__webpack_require__(56));

var _translator = __webpack_require__(16);

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _element = __webpack_require__(20);

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _empty_template = __webpack_require__(52);

var _array = __webpack_require__(12);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _common = __webpack_require__(3);

var _deferred = __webpack_require__(9);

var _dom = __webpack_require__(21);

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _math = __webpack_require__(40);

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _type = __webpack_require__(1);

var _view_port = __webpack_require__(50);

var _window = __webpack_require__(7);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _drag = __webpack_require__(81);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _short = __webpack_require__(64);

var _index = __webpack_require__(6);

var _visibility_change = __webpack_require__(63);

var _hide_callback = __webpack_require__(172);

var _resizable = _interopRequireDefault(__webpack_require__(173));

var _selectors = __webpack_require__(35);

var _swatch_container = _interopRequireDefault(__webpack_require__(174));

var _ui = _interopRequireDefault(__webpack_require__(42));

var zIndexPool = _interopRequireWildcard(__webpack_require__(175));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var ready = _ready_callbacks.default.add;
var window = (0, _window.getWindow)();
var viewPortChanged = _view_port.changeCallback;
var OVERLAY_CLASS = 'dx-overlay';
var OVERLAY_WRAPPER_CLASS = 'dx-overlay-wrapper';
var OVERLAY_CONTENT_CLASS = 'dx-overlay-content';
var OVERLAY_SHADER_CLASS = 'dx-overlay-shader';
var OVERLAY_MODAL_CLASS = 'dx-overlay-modal';
var INNER_OVERLAY_CLASS = 'dx-inner-overlay';
var INVISIBLE_STATE_CLASS = 'dx-state-invisible';
var ANONYMOUS_TEMPLATE_NAME = 'content';
var RTL_DIRECTION_CLASS = 'dx-rtl';
var ACTIONS = ['onShowing', 'onShown', 'onHiding', 'onHidden', 'onPositioned', 'onResizeStart', 'onResize', 'onResizeEnd'];
var OVERLAY_STACK = [];
var DISABLED_STATE_CLASS = 'dx-state-disabled';
var PREVENT_SAFARI_SCROLLING_CLASS = 'dx-prevent-safari-scrolling';
var TAB_KEY = 'tab';
var POSITION_ALIASES = {
  'top': {
    my: 'top center',
    at: 'top center'
  },
  'bottom': {
    my: 'bottom center',
    at: 'bottom center'
  },
  'right': {
    my: 'right center',
    at: 'right center'
  },
  'left': {
    my: 'left center',
    at: 'left center'
  },
  'center': {
    my: 'center',
    at: 'center'
  },
  'right bottom': {
    my: 'right bottom',
    at: 'right bottom'
  },
  'right top': {
    my: 'right top',
    at: 'right top'
  },
  'left bottom': {
    my: 'left bottom',
    at: 'left bottom'
  },
  'left top': {
    my: 'left top',
    at: 'left top'
  }
};

var realDevice = _devices.default.real();

var firefoxDesktop = _browser.default.mozilla && realDevice.deviceType === 'desktop';
var iOS = realDevice.platform === 'ios';
var hasSafariAddressBar = _browser.default.safari && realDevice.deviceType !== 'desktop';

var forceRepaint = function forceRepaint($element) {
  // NOTE: force layout recalculation on FF desktop (T581681)
  if (firefoxDesktop) {
    $element.width();
  }
};

var getElement = function getElement(value) {
  if ((0, _type.isEvent)(value)) {
    value = value.target;
  }

  return (0, _renderer.default)(value);
};

ready(function () {
  _events_engine.default.subscribeGlobal(_dom_adapter.default.getDocument(), _pointer.default.down, function (e) {
    for (var i = OVERLAY_STACK.length - 1; i >= 0; i--) {
      if (!OVERLAY_STACK[i]._proxiedDocumentDownHandler(e)) {
        return;
      }
    }
  });
});

var Overlay = _ui.default.inherit({
  _supportedKeys: function _supportedKeys() {
    var offsetSize = 5;

    var move = function move(top, left, e) {
      if (!this.option('dragEnabled')) {
        return;
      }

      e.preventDefault();
      e.stopPropagation();

      var allowedOffsets = this._allowedOffsets();

      var offset = {
        top: (0, _math.fitIntoRange)(top, -allowedOffsets.top, allowedOffsets.bottom),
        left: (0, _math.fitIntoRange)(left, -allowedOffsets.left, allowedOffsets.right)
      };

      this._changePosition(offset);
    };

    return (0, _extend.extend)(this.callBase(), {
      escape: function escape() {
        this.hide();
      },
      upArrow: move.bind(this, -offsetSize, 0),
      downArrow: move.bind(this, offsetSize, 0),
      leftArrow: move.bind(this, 0, -offsetSize),
      rightArrow: move.bind(this, 0, offsetSize)
    });
  },
  _getDefaultOptions: function _getDefaultOptions() {
    var _this = this;

    return (0, _extend.extend)(this.callBase(), {
      /**
      * @name dxOverlayOptions.activeStateEnabled
      * @hidden
      */
      activeStateEnabled: false,
      visible: false,
      deferRendering: true,
      shading: true,
      shadingColor: '',
      position: {
        my: 'center',
        at: 'center'
      },
      width: function width() {
        return (0, _renderer.default)(window).width() * 0.8;
      },
      minWidth: null,
      maxWidth: null,
      height: function height() {
        return (0, _renderer.default)(window).height() * 0.8;
      },
      minHeight: null,
      maxHeight: null,
      animation: {
        show: {
          type: 'pop',
          duration: 300,
          from: {
            scale: 0.55
          }
        },
        hide: {
          type: 'pop',
          duration: 300,
          to: {
            opacity: 0,
            scale: 0.55
          },
          from: {
            opacity: 1,
            scale: 1
          }
        }
      },
      closeOnOutsideClick: false,
      onShowing: null,
      onShown: null,
      onHiding: null,
      onHidden: null,
      contentTemplate: 'content',
      dragEnabled: false,
      resizeEnabled: false,
      onResizeStart: null,
      onResize: null,
      onResizeEnd: null,
      innerOverlay: false,
      // NOTE: private options
      target: undefined,
      container: undefined,
      hideTopOverlayHandler: function hideTopOverlayHandler() {
        _this.hide();
      },
      closeOnTargetScroll: false,
      onPositioned: null,
      boundaryOffset: {
        h: 0,
        v: 0
      },
      propagateOutsideClick: false,
      ignoreChildEvents: true,
      _checkParentVisibility: true,
      _fixedPosition: false
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat([{
      device: function device() {
        return !(0, _window.hasWindow)();
      },
      options: {
        width: null,
        height: null,
        animation: null,
        _checkParentVisibility: false
      }
    }]);
  },
  _setOptionsByReference: function _setOptionsByReference() {
    this.callBase();
    (0, _extend.extend)(this._optionsByReference, {
      animation: true
    });
  },
  $wrapper: function $wrapper() {
    return this._$wrapper;
  },
  _eventBindingTarget: function _eventBindingTarget() {
    return this._$content;
  },
  _init: function _init() {
    this.callBase();

    this._initActions();

    this._initCloseOnOutsideClickHandler();

    this._initTabTerminatorHandler();

    this._$wrapper = (0, _renderer.default)('<div>').addClass(OVERLAY_WRAPPER_CLASS);
    this._$content = (0, _renderer.default)('<div>').addClass(OVERLAY_CONTENT_CLASS);

    this._initInnerOverlayClass();

    var $element = this.$element();

    this._$wrapper.addClass($element.attr('class'));

    $element.addClass(OVERLAY_CLASS);

    this._$wrapper.attr('data-bind', 'dxControlsDescendantBindings: true'); // NOTE: hack to fix B251087


    _events_engine.default.on(this._$wrapper, 'MSPointerDown', _common.noop); // NOTE: bootstrap integration T342292


    _events_engine.default.on(this._$wrapper, 'focusin', function (e) {
      e.stopPropagation();
    });

    this._toggleViewPortSubscription(true);

    this._initHideTopOverlayHandler(this.option('hideTopOverlayHandler'));
  },
  _initOptions: function _initOptions(options) {
    this._initTarget(options.target);

    var container = options.container === undefined ? this.option('container') : options.container;

    this._initContainer(container);

    this.callBase(options);
  },
  _initInnerOverlayClass: function _initInnerOverlayClass() {
    this._$content.toggleClass(INNER_OVERLAY_CLASS, this.option('innerOverlay'));
  },
  _initTarget: function _initTarget(target) {
    if (!(0, _type.isDefined)(target)) {
      return;
    }

    var options = this.option();
    (0, _iterator.each)(['position.of', 'animation.show.from.position.of', 'animation.show.to.position.of', 'animation.hide.from.position.of', 'animation.hide.to.position.of'], function (_, path) {
      var pathParts = path.split('.');
      var option = options;

      while (option) {
        if (pathParts.length === 1) {
          if ((0, _type.isPlainObject)(option)) {
            option[pathParts.shift()] = target;
          }

          break;
        } else {
          option = option[pathParts.shift()];
        }
      }
    });
  },
  _initContainer: function _initContainer(container) {
    container = container === undefined ? (0, _view_port.value)() : container;
    var $element = this.$element();
    var $container = $element.closest(container);

    if (!$container.length) {
      $container = (0, _renderer.default)(container).first();
    }

    this._$container = $container.length ? $container : $element.parent();
  },
  _initHideTopOverlayHandler: function _initHideTopOverlayHandler(handler) {
    this._hideTopOverlayHandler = handler;
  },
  _initActions: function _initActions() {
    var _this2 = this;

    this._actions = {};
    (0, _iterator.each)(ACTIONS, function (_, action) {
      _this2._actions[action] = _this2._createActionByOption(action, {
        excludeValidators: ['disabled', 'readOnly']
      }) || _common.noop;
    });
  },
  _initCloseOnOutsideClickHandler: function _initCloseOnOutsideClickHandler() {
    var that = this;

    this._proxiedDocumentDownHandler = function () {
      return that._documentDownHandler.apply(that, arguments);
    };
  },
  _documentDownHandler: function _documentDownHandler(e) {
    if (this._showAnimationProcessing) {
      this._stopAnimation();
    }

    var closeOnOutsideClick = this.option('closeOnOutsideClick');

    if ((0, _type.isFunction)(closeOnOutsideClick)) {
      closeOnOutsideClick = closeOnOutsideClick(e);
    }

    var $container = this._$content;
    var isAttachedTarget = (0, _renderer.default)(window.document).is(e.target) || (0, _dom.contains)(window.document, e.target);
    var isInnerOverlay = (0, _renderer.default)(e.target).closest('.' + INNER_OVERLAY_CLASS).length;
    var outsideClick = isAttachedTarget && !isInnerOverlay && !($container.is(e.target) || (0, _dom.contains)($container.get(0), e.target));

    if (outsideClick && closeOnOutsideClick) {
      this._outsideClickHandler(e);
    }

    return this.option('propagateOutsideClick');
  },
  _outsideClickHandler: function _outsideClickHandler(e) {
    if (this.option('shading')) {
      e.preventDefault();
    }

    this.hide();
  },
  _getAnonymousTemplateName: function _getAnonymousTemplateName() {
    return ANONYMOUS_TEMPLATE_NAME;
  },
  _initTemplates: function _initTemplates() {
    this._templateManager.addDefaultTemplates({
      content: new _empty_template.EmptyTemplate()
    });

    this.callBase();
  },
  _isTopOverlay: function _isTopOverlay() {
    var overlayStack = this._overlayStack();

    for (var i = overlayStack.length - 1; i >= 0; i--) {
      var tabbableElements = overlayStack[i]._findTabbableBounds();

      if (tabbableElements.first || tabbableElements.last) {
        return overlayStack[i] === this;
      }
    }

    return false;
  },
  _overlayStack: function _overlayStack() {
    return OVERLAY_STACK;
  },
  _zIndexInitValue: function _zIndexInitValue() {
    return Overlay.baseZIndex();
  },
  _toggleViewPortSubscription: function _toggleViewPortSubscription(toggle) {
    viewPortChanged.remove(this._viewPortChangeHandle);

    if (toggle) {
      this._viewPortChangeHandle = this._viewPortChangeHandler.bind(this);
      viewPortChanged.add(this._viewPortChangeHandle);
    }
  },
  _viewPortChangeHandler: function _viewPortChangeHandler() {
    this._initContainer(this.option('container'));

    this._refresh();
  },
  _renderVisibilityAnimate: function _renderVisibilityAnimate(visible) {
    this._stopAnimation();

    return visible ? this._show() : this._hide();
  },
  _normalizePosition: function _normalizePosition() {
    var position = this.option('position');
    this._position = typeof position === 'function' ? position() : position;
  },
  _getAnimationConfig: function _getAnimationConfig() {
    var animation = this.option('animation');
    if ((0, _type.isFunction)(animation)) animation = animation.call(this);
    return animation;
  },
  _show: function _show() {
    var _this3 = this;

    var that = this;
    var deferred = new _deferred.Deferred();
    this._parentHidden = this._isParentHidden();
    deferred.done(function () {
      delete that._parentHidden;
    });

    if (this._parentHidden) {
      this._isHidden = true;
      return deferred.resolve();
    }

    if (this._currentVisible) {
      return new _deferred.Deferred().resolve().promise();
    }

    this._currentVisible = true;
    this._isShown = false;

    this._normalizePosition();

    var animation = that._getAnimationConfig() || {};

    var showAnimation = this._normalizeAnimation(animation.show, 'to');

    var startShowAnimation = showAnimation && showAnimation.start || _common.noop;
    var completeShowAnimation = showAnimation && showAnimation.complete || _common.noop;

    if (this._isHidingActionCanceled) {
      delete this._isHidingActionCanceled;
      deferred.resolve();
    } else {
      var show = function show() {
        _this3._renderVisibility(true);

        if (_this3._isShowingActionCanceled) {
          delete _this3._isShowingActionCanceled;
          deferred.resolve();
          return;
        }

        _this3._animate(showAnimation, function () {
          if (that.option('focusStateEnabled')) {
            _events_engine.default.trigger(that._focusTarget(), 'focus');
          }

          completeShowAnimation.apply(this, arguments);
          that._showAnimationProcessing = false;
          that._isShown = true;

          that._actions.onShown();

          that._toggleSafariScrolling(false);

          deferred.resolve();
        }, function () {
          startShowAnimation.apply(this, arguments);
          that._showAnimationProcessing = true;
        });
      };

      if (this.option('templatesRenderAsynchronously')) {
        this._stopShowTimer();

        this._asyncShowTimeout = setTimeout(show);
      } else {
        show();
      }
    }

    return deferred.promise();
  },
  _normalizeAnimation: function _normalizeAnimation(animation, prop) {
    if (animation) {
      animation = (0, _extend.extend)({
        type: 'slide'
      }, animation);

      if (animation[prop] && _typeof(animation[prop]) === 'object') {
        (0, _extend.extend)(animation[prop], {
          position: this._position
        });
      }
    }

    return animation;
  },
  _hide: function _hide() {
    if (!this._currentVisible) {
      return new _deferred.Deferred().resolve().promise();
    }

    this._currentVisible = false;
    var that = this;
    var deferred = new _deferred.Deferred();
    var animation = that._getAnimationConfig() || {};

    var hideAnimation = this._normalizeAnimation(animation.hide, 'from');

    var startHideAnimation = hideAnimation && hideAnimation.start || _common.noop;
    var completeHideAnimation = hideAnimation && hideAnimation.complete || _common.noop;
    var hidingArgs = {
      cancel: false
    };

    if (this._isShowingActionCanceled) {
      deferred.resolve();
    } else {
      this._actions.onHiding(hidingArgs);

      that._toggleSafariScrolling(true);

      if (hidingArgs.cancel) {
        this._isHidingActionCanceled = true;
        this.option('visible', true);
        deferred.resolve();
      } else {
        this._forceFocusLost();

        this._toggleShading(false);

        this._toggleSubscriptions(false);

        this._stopShowTimer();

        this._animate(hideAnimation, function () {
          var _that$_actions;

          that._$content.css('pointerEvents', '');

          that._renderVisibility(false);

          completeHideAnimation.apply(this, arguments);
          that._hideAnimationProcessing = false;
          (_that$_actions = that._actions) === null || _that$_actions === void 0 ? void 0 : _that$_actions.onHidden();
          deferred.resolve();
        }, function () {
          that._$content.css('pointerEvents', 'none');

          startHideAnimation.apply(this, arguments);
          that._hideAnimationProcessing = true;
        });
      }
    }

    return deferred.promise();
  },
  _forceFocusLost: function _forceFocusLost() {
    var activeElement = _dom_adapter.default.getActiveElement();

    var shouldResetActiveElement = !!this._$content.find(activeElement).length;

    if (shouldResetActiveElement) {
      (0, _dom.resetActiveElement)();
    }
  },
  _animate: function _animate(animation, completeCallback, startCallback) {
    if (animation) {
      startCallback = startCallback || animation.start || _common.noop;

      _fx.default.animate(this._$content, (0, _extend.extend)({}, animation, {
        start: startCallback,
        complete: completeCallback
      }));
    } else {
      completeCallback();
    }
  },
  _stopAnimation: function _stopAnimation() {
    _fx.default.stop(this._$content, true);
  },
  _renderVisibility: function _renderVisibility(visible) {
    if (visible && this._isParentHidden()) {
      return;
    }

    this._currentVisible = visible;

    this._stopAnimation();

    if (!visible) {
      (0, _visibility_change.triggerHidingEvent)(this._$content);
    }

    this._toggleVisibility(visible);

    this._$content.toggleClass(INVISIBLE_STATE_CLASS, !visible);

    this._updateZIndexStackPosition(visible);

    if (visible) {
      this._renderContent();

      var showingArgs = {
        cancel: false
      };

      this._actions.onShowing(showingArgs);

      if (showingArgs.cancel) {
        this._toggleVisibility(false);

        this._$content.toggleClass(INVISIBLE_STATE_CLASS, true);

        this._updateZIndexStackPosition(false);

        this._moveFromContainer();

        this._isShowingActionCanceled = true;
        this.option('visible', false);
        return;
      }

      this._moveToContainer();

      this._renderGeometry();

      (0, _visibility_change.triggerShownEvent)(this._$content);
      (0, _visibility_change.triggerResizeEvent)(this._$content);
    } else {
      this._moveFromContainer();
    }

    this._toggleShading(visible);

    this._toggleSubscriptions(visible);
  },
  _updateZIndexStackPosition: function _updateZIndexStackPosition(pushToStack) {
    var overlayStack = this._overlayStack();

    var index = (0, _array.inArray)(this, overlayStack);

    if (pushToStack) {
      if (index === -1) {
        this._zIndex = zIndexPool.create(this._zIndexInitValue());
        overlayStack.push(this);
      }

      this._$wrapper.css('zIndex', this._zIndex);

      this._$content.css('zIndex', this._zIndex);
    } else if (index !== -1) {
      overlayStack.splice(index, 1);
      zIndexPool.remove(this._zIndex);
    }
  },
  _toggleShading: function _toggleShading(visible) {
    this._$wrapper.toggleClass(OVERLAY_MODAL_CLASS, this.option('shading') && !this.option('container'));

    this._$wrapper.toggleClass(OVERLAY_SHADER_CLASS, visible && this.option('shading'));

    this._$wrapper.css('backgroundColor', this.option('shading') ? this.option('shadingColor') : '');

    this._toggleTabTerminator(visible && this.option('shading'));
  },
  _initTabTerminatorHandler: function _initTabTerminatorHandler() {
    var that = this;

    this._proxiedTabTerminatorHandler = function () {
      that._tabKeyHandler.apply(that, arguments);
    };
  },
  _toggleTabTerminator: function _toggleTabTerminator(enabled) {
    var eventName = (0, _index.addNamespace)('keydown', this.NAME);

    if (enabled) {
      _events_engine.default.on(_dom_adapter.default.getDocument(), eventName, this._proxiedTabTerminatorHandler);
    } else {
      _events_engine.default.off(_dom_adapter.default.getDocument(), eventName, this._proxiedTabTerminatorHandler);
    }
  },
  _findTabbableBounds: function _findTabbableBounds() {
    var $elements = this._$wrapper.find('*');

    var elementsCount = $elements.length - 1;
    var result = {
      first: null,
      last: null
    };

    for (var i = 0; i <= elementsCount; i++) {
      if (!result.first && $elements.eq(i).is(_selectors.tabbable)) {
        result.first = $elements.eq(i);
      }

      if (!result.last && $elements.eq(elementsCount - i).is(_selectors.tabbable)) {
        result.last = $elements.eq(elementsCount - i);
      }

      if (result.first && result.last) {
        break;
      }
    }

    return result;
  },
  _tabKeyHandler: function _tabKeyHandler(e) {
    if ((0, _index.normalizeKeyName)(e) !== TAB_KEY || !this._isTopOverlay()) {
      return;
    }

    var tabbableElements = this._findTabbableBounds();

    var $firstTabbable = tabbableElements.first;
    var $lastTabbable = tabbableElements.last;
    var isTabOnLast = !e.shiftKey && e.target === $lastTabbable.get(0);
    var isShiftTabOnFirst = e.shiftKey && e.target === $firstTabbable.get(0);
    var isEmptyTabList = tabbableElements.length === 0;
    var isOutsideTarget = !(0, _dom.contains)(this._$wrapper.get(0), e.target);

    if (isTabOnLast || isShiftTabOnFirst || isEmptyTabList || isOutsideTarget) {
      e.preventDefault();
      var $focusElement = e.shiftKey ? $lastTabbable : $firstTabbable;

      _events_engine.default.trigger($focusElement, 'focusin');

      _events_engine.default.trigger($focusElement, 'focus');
    }
  },
  _toggleSubscriptions: function _toggleSubscriptions(enabled) {
    if ((0, _window.hasWindow)()) {
      this._toggleHideTopOverlayCallback(enabled);

      this._toggleParentsScrollSubscription(enabled);
    }
  },
  _toggleHideTopOverlayCallback: function _toggleHideTopOverlayCallback(subscribe) {
    if (!this._hideTopOverlayHandler) {
      return;
    }

    if (subscribe) {
      _hide_callback.hideCallback.add(this._hideTopOverlayHandler);
    } else {
      _hide_callback.hideCallback.remove(this._hideTopOverlayHandler);
    }
  },
  _toggleParentsScrollSubscription: function _toggleParentsScrollSubscription(subscribe) {
    var _this4 = this;

    if (!this._position) {
      return;
    }

    var target = this._position.of || (0, _renderer.default)();
    var closeOnScroll = this.option('closeOnTargetScroll');
    var $parents = getElement(target).parents();
    var scrollEvent = (0, _index.addNamespace)('scroll', this.NAME);

    if (_devices.default.real().deviceType === 'desktop') {
      $parents = $parents.add(window);
    }

    this._proxiedTargetParentsScrollHandler = this._proxiedTargetParentsScrollHandler || function (e) {
      _this4._targetParentsScrollHandler(e);
    };

    _events_engine.default.off((0, _renderer.default)().add(this._$prevTargetParents), scrollEvent, this._proxiedTargetParentsScrollHandler);

    if (subscribe && closeOnScroll) {
      _events_engine.default.on($parents, scrollEvent, this._proxiedTargetParentsScrollHandler);

      this._$prevTargetParents = $parents;
    }
  },
  _targetParentsScrollHandler: function _targetParentsScrollHandler(e) {
    var closeHandled = false;
    var closeOnScroll = this.option('closeOnTargetScroll');

    if ((0, _type.isFunction)(closeOnScroll)) {
      closeHandled = closeOnScroll(e);
    }

    if (!closeHandled && !this._showAnimationProcessing) {
      this.hide();
    }
  },
  _render: function _render() {
    this.callBase();

    this._appendContentToElement();

    this._renderVisibilityAnimate(this.option('visible'));
  },
  _appendContentToElement: function _appendContentToElement() {
    if (!this._$content.parent().is(this.$element())) {
      this._$content.appendTo(this.$element());
    }
  },
  _renderContent: function _renderContent() {
    var shouldDeferRendering = !this._currentVisible && this.option('deferRendering');

    var isParentHidden = this.option('visible') && this._isParentHidden();

    if (isParentHidden) {
      this._isHidden = true;
      return;
    }

    if (this._contentAlreadyRendered || shouldDeferRendering) {
      return;
    }

    this._contentAlreadyRendered = true;

    this._appendContentToElement();

    this.callBase();
  },
  _isParentHidden: function _isParentHidden() {
    if (!this.option('_checkParentVisibility')) {
      return false;
    }

    if (this._parentHidden !== undefined) {
      return this._parentHidden;
    }

    var $parent = this.$element().parent();

    if ($parent.is(':visible')) {
      return false;
    }

    var isHidden = false;
    $parent.add($parent.parents()).each(function () {
      var $element = (0, _renderer.default)(this);

      if ($element.css('display') === 'none') {
        isHidden = true;
        return false;
      }
    });
    return isHidden || !_dom_adapter.default.getBody().contains($parent.get(0));
  },
  _renderContentImpl: function _renderContentImpl() {
    var _this5 = this;

    var whenContentRendered = new _deferred.Deferred();
    var contentTemplateOption = this.option('contentTemplate');

    var contentTemplate = this._getTemplate(contentTemplateOption);

    var transclude = this._templateManager.anonymousTemplateName === contentTemplateOption;
    contentTemplate && contentTemplate.render({
      container: (0, _element.getPublicElement)(this.$content()),
      noModel: true,
      transclude: transclude,
      onRendered: function onRendered() {
        whenContentRendered.resolve();
      }
    });

    this._renderDrag();

    this._renderResize();

    this._renderScrollTerminator();

    whenContentRendered.done(function () {
      if (_this5.option('visible')) {
        _this5._moveToContainer();
      }
    });
    return whenContentRendered.promise();
  },
  _renderDrag: function _renderDrag() {
    var $dragTarget = this._getDragTarget();

    if (!$dragTarget) {
      return;
    }

    var startEventName = (0, _index.addNamespace)(_drag.start, this.NAME);
    var updateEventName = (0, _index.addNamespace)(_drag.move, this.NAME);

    _events_engine.default.off($dragTarget, startEventName);

    _events_engine.default.off($dragTarget, updateEventName);

    if (!this.option('dragEnabled')) {
      return;
    }

    _events_engine.default.on($dragTarget, startEventName, this._dragStartHandler.bind(this));

    _events_engine.default.on($dragTarget, updateEventName, this._dragUpdateHandler.bind(this));
  },
  _renderResize: function _renderResize() {
    this._resizable = this._createComponent(this._$content, _resizable.default, {
      handles: this.option('resizeEnabled') ? 'all' : 'none',
      onResizeEnd: this._resizeEndHandler.bind(this),
      onResize: this._actions.onResize.bind(this),
      onResizeStart: this._actions.onResizeStart.bind(this),
      minHeight: 100,
      minWidth: 100,
      area: this._getDragResizeContainer()
    });
  },
  _resizeEndHandler: function _resizeEndHandler() {
    this._positionChangeHandled = true;

    var width = this._resizable.option('width');

    var height = this._resizable.option('height');

    width && this.option('width', width);
    height && this.option('height', height);

    this._actions.onResizeEnd();
  },
  _renderScrollTerminator: function _renderScrollTerminator() {
    var $scrollTerminator = this._$wrapper;
    var terminatorEventName = (0, _index.addNamespace)(_drag.move, this.NAME);

    _events_engine.default.off($scrollTerminator, terminatorEventName);

    _events_engine.default.on($scrollTerminator, terminatorEventName, {
      validate: function validate() {
        return true;
      },
      getDirection: function getDirection() {
        return 'both';
      },
      _toggleGestureCover: function _toggleGestureCover(toggle) {
        if (!toggle) {
          this._toggleGestureCoverImpl(toggle);
        }
      },
      _clearSelection: _common.noop,
      isNative: true
    }, function (e) {
      var originalEvent = e.originalEvent.originalEvent;

      var _ref = originalEvent || {},
          type = _ref.type;

      var isWheel = type === 'wheel';
      var isMouseMove = type === 'mousemove';
      var isScrollByWheel = isWheel && !(0, _index.isCommandKeyPressed)(e);
      e._cancelPreventDefault = true;

      if (originalEvent && e.cancelable !== false && (!isMouseMove && !isWheel || isScrollByWheel)) {
        e.preventDefault();
      }
    });
  },
  _getDragTarget: function _getDragTarget() {
    return this.$content();
  },
  _dragStartHandler: function _dragStartHandler(e) {
    e.targetElements = [];
    this._prevOffset = {
      x: 0,
      y: 0
    };

    var allowedOffsets = this._allowedOffsets();

    e.maxTopOffset = allowedOffsets.top;
    e.maxBottomOffset = allowedOffsets.bottom;
    e.maxLeftOffset = allowedOffsets.left;
    e.maxRightOffset = allowedOffsets.right;
  },
  _getDragResizeContainer: function _getDragResizeContainer() {
    var isContainerDefined = (0, _view_port.originalViewPort)().get(0) || this.option('container');
    var $container = !isContainerDefined ? (0, _renderer.default)(window) : this._$container;
    return $container;
  },
  _deltaSize: function _deltaSize() {
    var $content = this._$content;

    var $container = this._getDragResizeContainer();

    var contentWidth = $content.outerWidth();
    var contentHeight = $content.outerHeight();
    var containerWidth = $container.outerWidth();
    var containerHeight = $container.outerHeight();

    if (this._isWindow($container)) {
      var document = _dom_adapter.default.getDocument();

      var fullPageHeight = Math.max((0, _renderer.default)(document).outerHeight(), containerHeight);
      var fullPageWidth = Math.max((0, _renderer.default)(document).outerWidth(), containerWidth);
      containerHeight = fullPageHeight;
      containerWidth = fullPageWidth;
    }

    return {
      width: containerWidth - contentWidth,
      height: containerHeight - contentHeight
    };
  },
  _dragUpdateHandler: function _dragUpdateHandler(e) {
    var offset = e.offset;
    var prevOffset = this._prevOffset;
    var targetOffset = {
      top: offset.y - prevOffset.y,
      left: offset.x - prevOffset.x
    };

    this._changePosition(targetOffset);

    this._prevOffset = offset;
  },
  _changePosition: function _changePosition(offset) {
    var position = (0, _translator.locate)(this._$content);
    (0, _translator.move)(this._$content, {
      left: position.left + offset.left,
      top: position.top + offset.top
    });
    this._positionChangeHandled = true;
  },
  _allowedOffsets: function _allowedOffsets() {
    var position = (0, _translator.locate)(this._$content);

    var deltaSize = this._deltaSize();

    var isAllowedDrag = deltaSize.height >= 0 && deltaSize.width >= 0;
    var shaderOffset = this.option('shading') && !this.option('container') && !this._isWindow(this._getContainer()) ? (0, _translator.locate)(this._$wrapper) : {
      top: 0,
      left: 0
    };
    var boundaryOffset = this.option('boundaryOffset');
    return {
      top: isAllowedDrag ? position.top + shaderOffset.top + boundaryOffset.v : 0,
      bottom: isAllowedDrag ? -position.top - shaderOffset.top + deltaSize.height - boundaryOffset.v : 0,
      left: isAllowedDrag ? position.left + shaderOffset.left + boundaryOffset.h : 0,
      right: isAllowedDrag ? -position.left - shaderOffset.left + deltaSize.width - boundaryOffset.h : 0
    };
  },
  _moveFromContainer: function _moveFromContainer() {
    this._$content.appendTo(this.$element());

    this._detachWrapperToContainer();
  },
  _detachWrapperToContainer: function _detachWrapperToContainer() {
    this._$wrapper.detach();
  },
  _moveToContainer: function _moveToContainer() {
    this._attachWrapperToContainer();

    this._$content.appendTo(this._$wrapper);
  },
  _attachWrapperToContainer: function _attachWrapperToContainer() {
    var $element = this.$element();
    var containerDefined = this.option('container') !== undefined;
    var renderContainer = containerDefined ? this._$container : _swatch_container.default.getSwatchContainer($element);

    if (renderContainer && renderContainer[0] === $element.parent()[0]) {
      renderContainer = $element;
    }

    this._$wrapper.appendTo(renderContainer);
  },
  _fixHeightAfterSafariAddressBarResizing: function _fixHeightAfterSafariAddressBarResizing() {
    if (this._isWindow(this._getContainer()) && hasSafariAddressBar) {
      this._$wrapper.css('minHeight', window.innerHeight);
    }
  },
  _renderGeometry: function _renderGeometry(isDimensionChanged) {
    if (this.option('visible') && (0, _window.hasWindow)()) {
      this._renderGeometryImpl(isDimensionChanged);
    }
  },
  _renderGeometryImpl: function _renderGeometryImpl(isDimensionChanged) {
    this._stopAnimation();

    this._normalizePosition();

    this._renderWrapper();

    this._fixHeightAfterSafariAddressBarResizing();

    this._renderDimensions();

    var resultPosition = this._renderPosition();

    this._actions.onPositioned({
      position: resultPosition
    });
  },
  _fixWrapperPosition: function _fixWrapperPosition() {
    this._$wrapper.css('position', this._useFixedPosition() ? 'fixed' : 'absolute');
  },
  _useFixedPosition: function _useFixedPosition() {
    return this._shouldFixBodyPosition() || this.option('_fixedPosition');
  },
  _shouldFixBodyPosition: function _shouldFixBodyPosition() {
    var $container = this._getContainer();

    return this._isWindow($container) && (!iOS || this._bodyScrollTop !== undefined);
  },
  _toggleSafariScrolling: function _toggleSafariScrolling(scrollingEnabled) {
    if (iOS && this._shouldFixBodyPosition()) {
      var body = _dom_adapter.default.getBody();

      if (scrollingEnabled) {
        (0, _renderer.default)(body).removeClass(PREVENT_SAFARI_SCROLLING_CLASS);
        window.scrollTo(0, this._bodyScrollTop);
        this._bodyScrollTop = undefined;
      } else if (this.option('visible')) {
        this._bodyScrollTop = window.pageYOffset;
        (0, _renderer.default)(body).addClass(PREVENT_SAFARI_SCROLLING_CLASS);
      }
    }
  },
  _renderWrapper: function _renderWrapper() {
    this._fixWrapperPosition();

    this._renderWrapperDimensions();

    this._renderWrapperPosition();
  },
  _renderWrapperDimensions: function _renderWrapperDimensions() {
    var wrapperWidth;
    var wrapperHeight;

    var $container = this._getContainer();

    if (!$container) {
      return;
    }

    var isWindow = this._isWindow($container);

    wrapperWidth = isWindow ? '' : $container.outerWidth(), wrapperHeight = isWindow ? '' : $container.outerHeight();

    this._$wrapper.css({
      width: wrapperWidth,
      height: wrapperHeight
    });
  },
  _isWindow: function _isWindow($element) {
    return !!$element && (0, _type.isWindow)($element.get(0));
  },
  _renderWrapperPosition: function _renderWrapperPosition() {
    var $container = this._getContainer();

    if ($container) {
      _position.default.setup(this._$wrapper, {
        my: 'top left',
        at: 'top left',
        of: $container
      });
    }
  },
  _getContainer: function _getContainer() {
    var position = this._position;
    var container = this.option('container');
    var positionOf = null;

    if (!container && position) {
      positionOf = (0, _type.isEvent)(position.of) ? window : position.of || window;
    }

    return getElement(container || positionOf);
  },
  _renderDimensions: function _renderDimensions() {
    var content = this._$content.get(0);

    this._$content.css({
      minWidth: this._getOptionValue('minWidth', content),
      maxWidth: this._getOptionValue('maxWidth', content),
      minHeight: this._getOptionValue('minHeight', content),
      maxHeight: this._getOptionValue('maxHeight', content),
      width: this._getOptionValue('width', content),
      height: this._getOptionValue('height', content)
    });
  },
  _renderPosition: function _renderPosition() {
    if (this._positionChangeHandled) {
      var allowedOffsets = this._allowedOffsets();

      this._changePosition({
        top: (0, _math.fitIntoRange)(0, -allowedOffsets.top, allowedOffsets.bottom),
        left: (0, _math.fitIntoRange)(0, -allowedOffsets.left, allowedOffsets.right)
      });
    } else {
      this._renderOverlayBoundaryOffset();

      (0, _translator.resetPosition)(this._$content);

      var position = this._transformStringPosition(this._position, POSITION_ALIASES);

      var resultPosition = _position.default.setup(this._$content, position);

      forceRepaint(this._$content);
      return resultPosition;
    }
  },
  _transformStringPosition: function _transformStringPosition(position, positionAliases) {
    if ((0, _type.isString)(position)) {
      position = (0, _extend.extend)({}, positionAliases[position]);
    }

    return position;
  },
  _renderOverlayBoundaryOffset: function _renderOverlayBoundaryOffset() {
    var boundaryOffset = this.option('boundaryOffset');

    this._$content.css('margin', boundaryOffset.v + 'px ' + boundaryOffset.h + 'px');
  },
  _focusTarget: function _focusTarget() {
    return this._$content;
  },
  _attachKeyboardEvents: function _attachKeyboardEvents() {
    var _this6 = this;

    this._keyboardListenerId = _short.keyboard.on(this._$content, null, function (opts) {
      return _this6._keyboardHandler(opts);
    });
  },
  _keyboardHandler: function _keyboardHandler(options) {
    var e = options.originalEvent;
    var $target = (0, _renderer.default)(e.target);

    if ($target.is(this._$content) || !this.option('ignoreChildEvents')) {
      this.callBase.apply(this, arguments);
    }
  },
  _isVisible: function _isVisible() {
    return this.option('visible');
  },
  _visibilityChanged: function _visibilityChanged(visible) {
    if (visible) {
      if (this.option('visible')) {
        this._renderVisibilityAnimate(visible);
      }
    } else {
      this._renderVisibilityAnimate(visible);
    }
  },
  _dimensionChanged: function _dimensionChanged() {
    this._renderGeometry(true);
  },
  _clean: function _clean() {
    if (!this._contentAlreadyRendered) {
      this.$content().empty();
    }

    this._renderVisibility(false);

    this._stopShowTimer();

    this._cleanFocusState();
  },
  _stopShowTimer: function _stopShowTimer() {
    if (this._asyncShowTimeout) {
      clearTimeout(this._asyncShowTimeout);
    }

    this._asyncShowTimeout = null;
  },
  _dispose: function _dispose() {
    _fx.default.stop(this._$content, false);

    clearTimeout(this._deferShowTimer);

    this._toggleViewPortSubscription(false);

    this._toggleSubscriptions(false);

    this._updateZIndexStackPosition(false);

    this._toggleTabTerminator(false);

    this._toggleSafariScrolling(true);

    this._actions = null;
    this.callBase();
    zIndexPool.remove(this._zIndex);

    this._$wrapper.remove();

    this._$content.remove();
  },
  _toggleDisabledState: function _toggleDisabledState(value) {
    this.callBase.apply(this, arguments);

    this._$content.toggleClass(DISABLED_STATE_CLASS, Boolean(value));
  },
  _toggleRTLDirection: function _toggleRTLDirection(rtl) {
    this._$content.toggleClass(RTL_DIRECTION_CLASS, rtl);
  },
  _optionChanged: function _optionChanged(args) {
    var _this7 = this;

    var value = args.value;

    if ((0, _array.inArray)(args.name, ACTIONS) > -1) {
      this._initActions();

      return;
    }

    switch (args.name) {
      case 'dragEnabled':
        this._renderDrag();

        this._renderGeometry();

        break;

      case 'resizeEnabled':
        this._renderResize();

        this._renderGeometry();

        break;

      case 'shading':
      case 'shadingColor':
        this._toggleShading(this.option('visible'));

        break;

      case 'width':
      case 'height':
      case 'minWidth':
      case 'maxWidth':
      case 'minHeight':
      case 'maxHeight':
      case 'boundaryOffset':
        this._renderGeometry();

        break;

      case 'position':
        this._positionChangeHandled = false;

        this._renderGeometry();

        break;

      case 'visible':
        this._renderVisibilityAnimate(value).done(function () {
          if (!_this7._animateDeferred) {
            return;
          }

          _this7._animateDeferred.resolveWith(_this7);
        });

        break;

      case 'target':
        this._initTarget(value);

        this._invalidate();

        break;

      case 'container':
        this._initContainer(value);

        this._invalidate();

        break;

      case 'innerOverlay':
        this._initInnerOverlayClass();

        break;

      case 'deferRendering':
      case 'contentTemplate':
        this._contentAlreadyRendered = false;

        this._clean();

        this._invalidate();

        break;

      case 'hideTopOverlayHandler':
        this._toggleHideTopOverlayCallback(false);

        this._initHideTopOverlayHandler(args.value);

        this._toggleHideTopOverlayCallback(this.option('visible'));

        break;

      case 'closeOnTargetScroll':
        this._toggleParentsScrollSubscription(this.option('visible'));

        break;

      case 'closeOnOutsideClick':
      case 'animation':
      case 'propagateOutsideClick':
        break;

      case 'rtlEnabled':
        this._contentAlreadyRendered = false;
        this.callBase(args);
        break;

      case '_fixedPosition':
        this._fixWrapperPosition();

        break;

      default:
        this.callBase(args);
    }
  },
  toggle: function toggle(showing) {
    var _this8 = this;

    showing = showing === undefined ? !this.option('visible') : showing;
    var result = new _deferred.Deferred();

    if (showing === this.option('visible')) {
      return result.resolveWith(this, [showing]).promise();
    }

    var animateDeferred = new _deferred.Deferred();
    this._animateDeferred = animateDeferred;
    this.option('visible', showing);
    animateDeferred.promise().done(function () {
      delete _this8._animateDeferred;
      result.resolveWith(_this8, [_this8.option('visible')]);
    });
    return result.promise();
  },
  $content: function $content() {
    return this._$content;
  },
  show: function show() {
    return this.toggle(true);
  },
  hide: function hide() {
    return this.toggle(false);
  },
  content: function content() {
    return (0, _element.getPublicElement)(this._$content);
  },
  repaint: function repaint() {
    if (this._contentAlreadyRendered) {
      this._renderGeometry();

      (0, _visibility_change.triggerResizeEvent)(this._$content);
    } else {
      this.callBase();
    }
  }
});
/**
* @name ui.dxOverlay
* @section utils
*/


Overlay.baseZIndex = function (zIndex) {
  return zIndexPool.base(zIndex);
};

(0, _component_registrator.default)('dxOverlay', Overlay);
var _default = Overlay;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.applyBatch = applyBatch;
exports.createObjectWithChanges = createObjectWithChanges;
exports.update = update;
exports.insert = insert;
exports.remove = remove;
exports.indexByKey = indexByKey;
exports.applyChanges = applyChanges;

var _type = __webpack_require__(1);

var _config = _interopRequireDefault(__webpack_require__(18));

var _guid = _interopRequireDefault(__webpack_require__(53));

var _extend = __webpack_require__(2);

var _errors = __webpack_require__(36);

var _object = __webpack_require__(70);

var _data = __webpack_require__(23);

var _utils = __webpack_require__(27);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function hasKey(target, keyOrKeys) {
  var key;
  var keys = typeof keyOrKeys === 'string' ? keyOrKeys.split() : keyOrKeys.slice();

  while (keys.length) {
    key = keys.shift();

    if (key in target) {
      return true;
    }
  }

  return false;
}

function findItems(keyInfo, items, key, groupCount) {
  var childItems;
  var result;

  if (groupCount) {
    for (var i = 0; i < items.length; i++) {
      childItems = items[i].items || items[i].collapsedItems || [];
      result = findItems(keyInfo, childItems || [], key, groupCount - 1);

      if (result) {
        return result;
      }
    }
  } else if (indexByKey(keyInfo, items, key) >= 0) {
    return items;
  }
}

function getItems(keyInfo, items, key, groupCount) {
  if (groupCount) {
    return findItems(keyInfo, items, key, groupCount) || [];
  }

  return items;
}

function generateDataByKeyMap(keyInfo, array) {
  if (keyInfo.key() && (!array._dataByKeyMap || array._dataByKeyMapLength !== array.length)) {
    var dataByKeyMap = {};
    var arrayLength = array.length;

    for (var i = 0; i < arrayLength; i++) {
      dataByKeyMap[JSON.stringify(keyInfo.keyOf(array[i]))] = array[i];
    }

    array._dataByKeyMap = dataByKeyMap;
    array._dataByKeyMapLength = arrayLength;
  }
}

function getCacheValue(array, key) {
  if (array._dataByKeyMap) {
    return array._dataByKeyMap[JSON.stringify(key)];
  }
}

function getHasKeyCacheValue(array, key) {
  if (array._dataByKeyMap) {
    return array._dataByKeyMap[JSON.stringify(key)];
  }

  return true;
}

function setDataByKeyMapValue(array, key, data) {
  if (array._dataByKeyMap) {
    array._dataByKeyMap[JSON.stringify(key)] = data;
    array._dataByKeyMapLength += data ? 1 : -1;
  }
}

function cloneInstance(instance) {
  var result = instance ? Object.create(Object.getPrototypeOf(instance)) : {};
  var instanceWithoutPrototype = (0, _extend.extendFromObject)({}, instance);

  for (var name in instanceWithoutPrototype) {
    var prop = instanceWithoutPrototype[name];

    if ((0, _type.isObject)(prop) && !(0, _type.isPlainObject)(prop)) {
      instanceWithoutPrototype[name] = cloneInstance(prop);
    }
  }

  (0, _object.deepExtendArraySafe)(result, instanceWithoutPrototype, true, true);
  return result;
}

function createObjectWithChanges(target, changes) {
  var result = cloneInstance(target);
  return (0, _object.deepExtendArraySafe)(result, changes, true, true);
}

function applyBatch(_ref) {
  var keyInfo = _ref.keyInfo,
      data = _ref.data,
      changes = _ref.changes,
      groupCount = _ref.groupCount,
      useInsertIndex = _ref.useInsertIndex,
      immutable = _ref.immutable,
      disableCache = _ref.disableCache,
      logError = _ref.logError;
  var resultItems = immutable === true ? _toConsumableArray(data) : data;
  changes.forEach(function (item) {
    var items = item.type === 'insert' ? resultItems : getItems(keyInfo, resultItems, item.key, groupCount);
    !disableCache && generateDataByKeyMap(keyInfo, items);

    switch (item.type) {
      case 'update':
        update(keyInfo, items, item.key, item.data, true, immutable, logError);
        break;

      case 'insert':
        insert(keyInfo, items, item.data, useInsertIndex && (0, _type.isDefined)(item.index) ? item.index : -1, true, logError);
        break;

      case 'remove':
        remove(keyInfo, items, item.key, true, logError);
        break;
    }
  });
  return resultItems;
}

function getErrorResult(isBatch, logError, errorCode) {
  return !isBatch ? (0, _utils.rejectedPromise)(_errors.errors.Error(errorCode)) : logError && _errors.errors.log(errorCode);
}

function applyChanges(data, changes) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$keyExpr = options.keyExpr,
      keyExpr = _options$keyExpr === void 0 ? 'id' : _options$keyExpr,
      _options$immutable = options.immutable,
      immutable = _options$immutable === void 0 ? true : _options$immutable;
  var keyGetter = (0, _data.compileGetter)(keyExpr);
  var keyInfo = {
    key: function key() {
      return keyExpr;
    },
    keyOf: function keyOf(obj) {
      return keyGetter(obj);
    }
  };
  return applyBatch({
    keyInfo: keyInfo,
    data: data,
    changes: changes,
    immutable: immutable,
    disableCache: true,
    logError: true
  });
}

function update(keyInfo, array, key, data, isBatch, immutable, logError) {
  var target;
  var extendComplexObject = true;
  var keyExpr = keyInfo.key();

  if (keyExpr) {
    if (hasKey(data, keyExpr) && !(0, _utils.keysEqual)(keyExpr, key, keyInfo.keyOf(data))) {
      return getErrorResult(isBatch, logError, 'E4017');
    }

    target = getCacheValue(array, key);

    if (!target) {
      var index = indexByKey(keyInfo, array, key);

      if (index < 0) {
        return getErrorResult(isBatch, logError, 'E4009');
      }

      target = array[index];

      if (immutable === true && (0, _type.isDefined)(target)) {
        var newTarget = createObjectWithChanges(target, data);
        array[index] = newTarget;
        return !isBatch && (0, _utils.trivialPromise)(newTarget, key);
      }
    }
  } else {
    target = key;
  }

  (0, _object.deepExtendArraySafe)(target, data, extendComplexObject);

  if (!isBatch) {
    if ((0, _config.default)().useLegacyStoreResult) {
      return (0, _utils.trivialPromise)(key, data);
    } else {
      return (0, _utils.trivialPromise)(target, key);
    }
  }
}

function insert(keyInfo, array, data, index, isBatch, logError) {
  var keyValue;
  var keyExpr = keyInfo.key();
  var obj = (0, _type.isPlainObject)(data) ? (0, _extend.extend)({}, data) : data;

  if (keyExpr) {
    keyValue = keyInfo.keyOf(obj);

    if (keyValue === undefined || _typeof(keyValue) === 'object' && (0, _type.isEmptyObject)(keyValue)) {
      if (Array.isArray(keyExpr)) {
        throw _errors.errors.Error('E4007');
      }

      keyValue = obj[keyExpr] = String(new _guid.default());
    } else {
      if (array[indexByKey(keyInfo, array, keyValue)] !== undefined) {
        return getErrorResult(isBatch, logError, 'E4008');
      }
    }
  } else {
    keyValue = obj;
  }

  if (index >= 0) {
    array.splice(index, 0, obj);
  } else {
    array.push(obj);
  }

  setDataByKeyMapValue(array, keyValue, obj);

  if (!isBatch) {
    return (0, _utils.trivialPromise)((0, _config.default)().useLegacyStoreResult ? data : obj, keyValue);
  }
}

function remove(keyInfo, array, key, isBatch, logError) {
  var index = indexByKey(keyInfo, array, key);

  if (index > -1) {
    array.splice(index, 1);
    setDataByKeyMapValue(array, key, null);
  }

  if (!isBatch) {
    return (0, _utils.trivialPromise)(key);
  } else if (index < 0) {
    return getErrorResult(isBatch, logError, 'E4009');
  }
}

function indexByKey(keyInfo, array, key) {
  var keyExpr = keyInfo.key();

  if (!getHasKeyCacheValue(array, key)) {
    return -1;
  }

  for (var i = 0, arrayLength = array.length; i < arrayLength; i++) {
    if ((0, _utils.keysEqual)(keyExpr, keyInfo.keyOf(array[i]), key)) {
      return i;
    }
  }

  return -1;
}

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.normalizeDataSourceOptions = exports.normalizeLoadResult = exports.mapDataRespectingGrouping = exports.normalizeStoreLoadOptionAccessorArguments = exports.isPending = exports.CANCELED_TOKEN = void 0;

var _ajax = _interopRequireDefault(__webpack_require__(181));

var _abstract_store = _interopRequireDefault(__webpack_require__(83));

var _array_store = _interopRequireDefault(__webpack_require__(183));

var _iterator = __webpack_require__(4);

var _custom_store = _interopRequireDefault(__webpack_require__(113));

var _extend = __webpack_require__(2);

var _type = __webpack_require__(1);

var _utils = __webpack_require__(27);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var CANCELED_TOKEN = 'canceled';
exports.CANCELED_TOKEN = CANCELED_TOKEN;

var isPending = function isPending(deferred) {
  return deferred.state() === 'pending';
};

exports.isPending = isPending;

var normalizeStoreLoadOptionAccessorArguments = function normalizeStoreLoadOptionAccessorArguments(originalArguments) {
  switch (originalArguments.length) {
    case 0:
      return undefined;

    case 1:
      return originalArguments[0];
  }

  return [].slice.call(originalArguments);
};

exports.normalizeStoreLoadOptionAccessorArguments = normalizeStoreLoadOptionAccessorArguments;

var mapGroup = function mapGroup(group, level, mapper) {
  return (0, _iterator.map)(group, function (item) {
    var items = item.items,
        restItem = _objectWithoutProperties(item, ["items"]);

    return _extends({}, restItem, {
      items: mapRecursive(item.items, level - 1, mapper)
    });
  });
};

var mapRecursive = function mapRecursive(items, level, mapper) {
  if (!Array.isArray(items)) return items;
  return level ? mapGroup(items, level, mapper) : (0, _iterator.map)(items, mapper);
};

var mapDataRespectingGrouping = function mapDataRespectingGrouping(items, mapper, groupInfo) {
  var level = groupInfo ? (0, _utils.normalizeSortingInfo)(groupInfo).length : 0;
  return mapRecursive(items, level, mapper);
};

exports.mapDataRespectingGrouping = mapDataRespectingGrouping;

var normalizeLoadResult = function normalizeLoadResult(data, extra) {
  var _data;

  if ((_data = data) !== null && _data !== void 0 && _data.data) {
    extra = data;
    data = data.data;
  }

  if (!Array.isArray(data)) {
    data = [data];
  }

  return {
    data: data,
    extra: extra
  };
};

exports.normalizeLoadResult = normalizeLoadResult;

var createCustomStoreFromLoadFunc = function createCustomStoreFromLoadFunc(options) {
  var storeConfig = {};
  (0, _iterator.each)(['useDefaultSearch', 'key', 'load', 'loadMode', 'cacheRawData', 'byKey', 'lookup', 'totalCount', 'insert', 'update', 'remove'], function () {
    storeConfig[this] = options[this];
    delete options[this];
  });
  return new _custom_store.default(storeConfig);
};

var createStoreFromConfig = function createStoreFromConfig(storeConfig) {
  var alias = storeConfig.type;
  delete storeConfig.type;
  return _abstract_store.default.create(alias, storeConfig);
};

var createCustomStoreFromUrl = function createCustomStoreFromUrl(url, normalizationOptions) {
  return new _custom_store.default({
    load: function load() {
      return _ajax.default.sendRequest({
        url: url,
        dataType: 'json'
      });
    },
    loadMode: normalizationOptions === null || normalizationOptions === void 0 ? void 0 : normalizationOptions.fromUrlLoadMode
  });
};

var normalizeDataSourceOptions = function normalizeDataSourceOptions(options, normalizationOptions) {
  var store;

  if (typeof options === 'string') {
    options = {
      paginate: false,
      store: createCustomStoreFromUrl(options, normalizationOptions)
    };
  }

  if (options === undefined) {
    options = [];
  }

  if (Array.isArray(options) || options instanceof _abstract_store.default) {
    options = {
      store: options
    };
  } else {
    options = (0, _extend.extend)({}, options);
  }

  if (options.store === undefined) {
    options.store = [];
  }

  store = options.store;

  if ('load' in options) {
    store = createCustomStoreFromLoadFunc(options);
  } else if (Array.isArray(store)) {
    store = new _array_store.default(store);
  } else if ((0, _type.isPlainObject)(store)) {
    store = createStoreFromConfig((0, _extend.extend)({}, store));
  }

  options.store = store;
  return options;
};

exports.normalizeDataSourceOptions = normalizeDataSourceOptions;

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.BindableTemplate = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _template_base = __webpack_require__(43);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _remove_event = __webpack_require__(75);

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var watchChanges = function () {
  var globalWatch = function globalWatch(data, watchMethod, callback) {
    return watchMethod(function () {
      return data;
    }, callback);
  };

  var fieldsWatch = function fieldsWatch(data, watchMethod, fields, fieldsMap, callback) {
    var resolvedData = {};
    var missedFields = fields.slice();
    var watchHandlers = fields.map(function (name) {
      var fieldGetter = fieldsMap[name];
      return watchMethod(fieldGetter ? function () {
        return fieldGetter(data);
      } : function () {
        return data[name];
      }, function (value) {
        resolvedData[name] = value;

        if (missedFields.length) {
          var index = missedFields.indexOf(name);

          if (index >= 0) {
            missedFields.splice(index, 1);
          }
        }

        if (!missedFields.length) {
          callback(resolvedData);
        }
      });
    });
    return function () {
      watchHandlers.forEach(function (dispose) {
        return dispose();
      });
    };
  };

  return function (rawData, watchMethod, fields, fieldsMap, callback) {
    var fieldsDispose;
    var globalDispose = globalWatch(rawData, watchMethod, function (dataWithRawFields) {
      fieldsDispose && fieldsDispose();

      if ((0, _type.isPrimitive)(dataWithRawFields)) {
        callback(dataWithRawFields);
        return;
      }

      fieldsDispose = fieldsWatch(dataWithRawFields, watchMethod, fields, fieldsMap, callback);
    });
    return function () {
      fieldsDispose && fieldsDispose();
      globalDispose && globalDispose();
    };
  };
}();

var BindableTemplate = /*#__PURE__*/function (_TemplateBase) {
  _inheritsLoose(BindableTemplate, _TemplateBase);

  function BindableTemplate(render, fields, watchMethod, fieldsMap) {
    var _this;

    _this = _TemplateBase.call(this) || this;
    _this._render = render;
    _this._fields = fields;
    _this._fieldsMap = fieldsMap || {};
    _this._watchMethod = watchMethod;
    return _this;
  }

  var _proto = BindableTemplate.prototype;

  _proto._renderCore = function _renderCore(options) {
    var _this2 = this;

    var $container = (0, _renderer.default)(options.container);
    var dispose = watchChanges(options.model, this._watchMethod, this._fields, this._fieldsMap, function (data) {
      $container.empty();

      _this2._render($container, data, options.model);
    });

    _events_engine.default.on($container, _remove_event.removeEvent, dispose);

    return $container.contents();
  };

  return BindableTemplate;
}(_template_base.TemplateBase);

exports.BindableTemplate = BindableTemplate;

/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _array = __webpack_require__(12);

var _window = __webpack_require__(7);

var weakMap = (0, _window.hasWindow)() ? (0, _window.getWindow)().WeakMap : WeakMap;

if (!weakMap) {
  // NOTE: This is an incomplete WeakMap polyfill but it is enough for creation purposes
  weakMap = function weakMap() {
    var keys = [];
    var values = [];

    this.set = function (key, value) {
      var index = (0, _array.inArray)(key, keys);

      if (index === -1) {
        keys.push(key);
        values.push(value);
      } else {
        values[index] = value;
      }
    };

    this.get = function (key) {
      var index = (0, _array.inArray)(key, keys);

      if (index === -1) {
        return undefined;
      }

      return values[index];
    };

    this.has = function (key) {
      var index = (0, _array.inArray)(key, keys);

      if (index === -1) {
        return false;
      }

      return true;
    };

    this.delete = function (key) {
      var index = (0, _array.inArray)(key, keys);

      if (index === -1) {
        return;
      }

      keys.splice(index, 1);
      values.splice(index, 1);
    };
  };
}

var _default = weakMap;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.deepExtendArraySafe = exports.orderEach = exports.clone = void 0;

var _type = __webpack_require__(1);

var _variable_wrapper = _interopRequireDefault(__webpack_require__(85));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var clone = function () {
  function Clone() {}

  return function (obj) {
    Clone.prototype = obj;
    return new Clone();
  };
}();

exports.clone = clone;

var orderEach = function orderEach(map, func) {
  var keys = [];
  var key;
  var i;

  for (key in map) {
    if (Object.prototype.hasOwnProperty.call(map, key)) {
      keys.push(key);
    }
  }

  keys.sort(function (x, y) {
    var isNumberX = (0, _type.isNumeric)(x);
    var isNumberY = (0, _type.isNumeric)(y);
    if (isNumberX && isNumberY) return x - y;
    if (isNumberX && !isNumberY) return -1;
    if (!isNumberX && isNumberY) return 1;
    if (x < y) return -1;
    if (x > y) return 1;
    return 0;
  });

  for (i = 0; i < keys.length; i++) {
    key = keys[i];
    func(key, map[key]);
  }
};

exports.orderEach = orderEach;

var assignValueToProperty = function assignValueToProperty(target, property, value, assignByReference) {
  if (!assignByReference && _variable_wrapper.default.isWrapped(target[property])) {
    _variable_wrapper.default.assign(target[property], value);
  } else {
    target[property] = value;
  }
}; // B239679, http://bugs.jquery.com/ticket/9477


var deepExtendArraySafe = function deepExtendArraySafe(target, changes, extendComplexObject, assignByReference) {
  var prevValue;
  var newValue;

  for (var name in changes) {
    prevValue = target[name];
    newValue = changes[name];

    if (name === '__proto__' || name === 'constructor' || target === newValue) {
      continue;
    }

    if ((0, _type.isPlainObject)(newValue)) {
      var goDeeper = extendComplexObject ? (0, _type.isObject)(prevValue) : (0, _type.isPlainObject)(prevValue);
      newValue = deepExtendArraySafe(goDeeper ? prevValue : {}, newValue, extendComplexObject, assignByReference);
    }

    if (newValue !== undefined && prevValue !== newValue) {
      assignValueToProperty(target, name, newValue, assignByReference);
    }
  }

  return target;
};

exports.deepExtendArraySafe = deepExtendArraySafe;

/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = _default;

var _extend = __webpack_require__(2);

var _console = __webpack_require__(86);

var _string = __webpack_require__(46);

var _version = __webpack_require__(128);

/* eslint-disable import/no-commonjs */
var ERROR_URL = 'http://js.devexpress.com/error/' + _version.version.split('.').slice(0, 2).join('_') + '/';

function _default(baseErrors, errors) {
  var exports = {
    ERROR_MESSAGES: (0, _extend.extend)(errors, baseErrors),
    Error: function Error() {
      return makeError([].slice.call(arguments));
    },
    log: function log(id) {
      var method = 'log';

      if (/^E\d+$/.test(id)) {
        method = 'error';
      } else if (/^W\d+$/.test(id)) {
        method = 'warn';
      }

      _console.logger[method](method === 'log' ? id : combineMessage([].slice.call(arguments)));
    }
  };

  function combineMessage(args) {
    var id = args[0];
    args = args.slice(1);
    return formatMessage(id, formatDetails(id, args));
  }

  function formatDetails(id, args) {
    args = [exports.ERROR_MESSAGES[id]].concat(args);
    return _string.format.apply(this, args).replace(/\.*\s*?$/, '');
  }

  function formatMessage(id, details) {
    return _string.format.apply(this, ['{0} - {1}. See:\n{2}', id, details, getErrorUrl(id)]);
  }

  function makeError(args) {
    var id = args[0];
    args = args.slice(1);
    var details = formatDetails(id, args);
    var url = getErrorUrl(id);
    var message = formatMessage(id, details);
    return (0, _extend.extend)(new Error(message), {
      __id: id,
      __details: details,
      url: url
    });
  }

  function getErrorUrl(id) {
    return ERROR_URL + id;
  }

  return exports;
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _iterator = __webpack_require__(4);

var _callbacks = _interopRequireDefault(__webpack_require__(15));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MemorizedCallbacks = /*#__PURE__*/function () {
  function MemorizedCallbacks() {
    this.memory = [];
    this.callbacks = (0, _callbacks.default)();
  }

  var _proto = MemorizedCallbacks.prototype;

  _proto.add = function add(fn) {
    (0, _iterator.each)(this.memory, function (_, item) {
      return fn.apply(fn, item);
    });
    this.callbacks.add(fn);
  };

  _proto.remove = function remove(fn) {
    this.callbacks.remove(fn);
  };

  _proto.fire = function fire() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.memory.push(args);
    this.callbacks.fire.apply(this.callbacks, args);
  };

  return MemorizedCallbacks;
}();

exports.default = MemorizedCallbacks;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.setHeight = exports.setWidth = exports.normalizeStyleProp = exports.stylePropPrefix = exports.styleProp = void 0;

var _inflector = __webpack_require__(47);

var _call_once = _interopRequireDefault(__webpack_require__(32));

var _type = __webpack_require__(1);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var jsPrefixes = ['', 'Webkit', 'Moz', 'O', 'Ms'];
var cssPrefixes = {
  '': '',
  'Webkit': '-webkit-',
  'Moz': '-moz-',
  'O': '-o-',
  'ms': '-ms-'
};
var getStyles = (0, _call_once.default)(function () {
  return _dom_adapter.default.createElement('dx').style;
});

var forEachPrefixes = function forEachPrefixes(prop, callBack) {
  prop = (0, _inflector.camelize)(prop, true);
  var result;

  for (var i = 0, cssPrefixesCount = jsPrefixes.length; i < cssPrefixesCount; i++) {
    var jsPrefix = jsPrefixes[i];
    var prefixedProp = jsPrefix + prop;
    var lowerPrefixedProp = (0, _inflector.camelize)(prefixedProp);
    result = callBack(lowerPrefixedProp, jsPrefix);

    if (result === undefined) {
      result = callBack(prefixedProp, jsPrefix);
    }

    if (result !== undefined) {
      break;
    }
  }

  return result || '';
};

var styleProp = function styleProp(name) {
  if (name in getStyles()) {
    return name;
  }

  var originalName = name;
  name = name.charAt(0).toUpperCase() + name.substr(1);

  for (var i = 1; i < jsPrefixes.length; i++) {
    var prefixedProp = jsPrefixes[i].toLowerCase() + name;

    if (prefixedProp in getStyles()) {
      return prefixedProp;
    }
  }

  return originalName;
};

exports.styleProp = styleProp;

var stylePropPrefix = function stylePropPrefix(prop) {
  return forEachPrefixes(prop, function (specific, jsPrefix) {
    if (specific in getStyles()) {
      return cssPrefixes[jsPrefix];
    }
  });
};

exports.stylePropPrefix = stylePropPrefix;
var pxExceptions = ['fillOpacity', 'columnCount', 'flexGrow', 'flexShrink', 'fontWeight', 'lineHeight', 'opacity', 'zIndex', 'zoom'];

var normalizeStyleProp = function normalizeStyleProp(prop, value) {
  if ((0, _type.isNumeric)(value) && pxExceptions.indexOf(prop) === -1) {
    value += 'px';
  }

  return value;
};

exports.normalizeStyleProp = normalizeStyleProp;

var setDimensionProperty = function setDimensionProperty(elements, propertyName, value) {
  if (elements) {
    value = (0, _type.isNumeric)(value) ? value += 'px' : value;

    for (var i = 0; i < elements.length; ++i) {
      elements[i].style[propertyName] = value;
    }
  }
};

var setWidth = function setWidth(elements, value) {
  setDimensionProperty(elements, 'width', value);
};

exports.setWidth = setWidth;

var setHeight = function setHeight(elements, value) {
  setDimensionProperty(elements, 'height', value);
};

exports.setHeight = setHeight;

/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _common = __webpack_require__(3);

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _array_query = _interopRequireDefault(__webpack_require__(54));

var _utils = __webpack_require__(27);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function multiLevelGroup(query, groupInfo) {
  query = query.groupBy(groupInfo[0].selector);

  if (groupInfo.length > 1) {
    query = query.select(function (g) {
      return (0, _extend.extend)({}, g, {
        items: multiLevelGroup((0, _array_query.default)(g.items), groupInfo.slice(1)).toArray()
      });
    });
  }

  return query;
}

function arrangeSortingInfo(groupInfo, sortInfo) {
  var filteredGroup = [];
  (0, _iterator.each)(groupInfo, function (_, group) {
    var collision = (0, _common.grep)(sortInfo, function (sort) {
      return group.selector === sort.selector;
    });

    if (collision.length < 1) {
      filteredGroup.push(group);
    }
  });
  return filteredGroup.concat(sortInfo);
}

function queryByOptions(query, options, isCountQuery) {
  options = options || {};
  var filter = options.filter;

  if (filter) {
    query = query.filter(filter);
  }

  if (isCountQuery) {
    return query;
  }

  var sort = options.sort;
  var select = options.select;
  var group = options.group;
  var skip = options.skip;
  var take = options.take;

  if (group) {
    group = (0, _utils.normalizeSortingInfo)(group);
    group.keepInitialKeyOrder = !!options.group.keepInitialKeyOrder;
  }

  if (sort || group) {
    sort = (0, _utils.normalizeSortingInfo)(sort || []);

    if (group && !group.keepInitialKeyOrder) {
      sort = arrangeSortingInfo(group, sort);
    }

    (0, _iterator.each)(sort, function (index) {
      query = query[index ? 'thenBy' : 'sortBy'](this.selector, this.desc, this.compare);
    });
  }

  if (select) {
    query = query.select(select);
  }

  if (group) {
    query = multiLevelGroup(query, group);
  }

  if (take || skip) {
    query = query.slice(skip || 0, take);
  }

  return query;
}

var _default = {
  multiLevelGroup: multiLevelGroup,
  arrangeSortingInfo: arrangeSortingInfo,
  queryByOptions: queryByOptions
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.removeEvent = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _element_data = __webpack_require__(25);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _event_registrator = _interopRequireDefault(__webpack_require__(38));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var removeEvent = 'dxremove';
exports.removeEvent = removeEvent;
var eventPropName = 'dxRemoveEvent';
/**
  * @name UI Events.dxremove
  * @type eventType
  * @type_function_param1 event:event
  * @module events/remove
*/

(0, _element_data.beforeCleanData)(function (elements) {
  elements = [].slice.call(elements);

  for (var i = 0; i < elements.length; i++) {
    var $element = (0, _renderer.default)(elements[i]);

    if ($element.prop(eventPropName)) {
      $element[0][eventPropName] = null;

      _events_engine.default.triggerHandler($element, removeEvent);
    }
  }
});
(0, _event_registrator.default)(removeEvent, {
  noBubble: true,
  setup: function setup(element) {
    (0, _renderer.default)(element).prop(eventPropName, true);
  }
});

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.compare = compare;

function compare(x, y, maxLevel) {
  function normalizeArg(value) {
    if (typeof value === 'string') {
      return value.split('.');
    }

    if (typeof value === 'number') {
      return [value];
    }

    return value;
  }

  x = normalizeArg(x);
  y = normalizeArg(y);
  var length = Math.max(x.length, y.length);

  if (isFinite(maxLevel)) {
    length = Math.min(length, maxLevel);
  }

  for (var i = 0; i < length; i++) {
    var xItem = parseInt(x[i] || 0, 10);
    var yItem = parseInt(y[i] || 0, 10);

    if (xItem < yItem) {
      return -1;
    }

    if (xItem > yItem) {
      return 1;
    }
  }

  return 0;
}

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _style = __webpack_require__(73);

var _call_once = _interopRequireDefault(__webpack_require__(32));

var _dom = __webpack_require__(21);

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _math = __webpack_require__(40);

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _index = __webpack_require__(6);

var _emitter = _interopRequireDefault(__webpack_require__(58));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ready = _ready_callbacks.default.add;
var abs = Math.abs;
var SLEEP = 0;
var INITED = 1;
var STARTED = 2;
var TOUCH_BOUNDARY = 10;
var IMMEDIATE_TOUCH_BOUNDARY = 0;
var IMMEDIATE_TIMEOUT = 180;

var supportPointerEvents = function supportPointerEvents() {
  return (0, _style.styleProp)('pointer-events');
};

var setGestureCover = (0, _call_once.default)(function () {
  var GESTURE_COVER_CLASS = 'dx-gesture-cover';
  var isDesktop = _devices.default.real().deviceType === 'desktop';

  if (!supportPointerEvents() || !isDesktop) {
    return _common.noop;
  }

  var $cover = (0, _renderer.default)('<div>').addClass(GESTURE_COVER_CLASS).css('pointerEvents', 'none');

  _events_engine.default.subscribeGlobal($cover, 'dxmousewheel', function (e) {
    e.preventDefault();
  });

  ready(function () {
    $cover.appendTo('body');
  });
  return function (toggle, cursor) {
    $cover.css('pointerEvents', toggle ? 'all' : 'none');
    toggle && $cover.css('cursor', cursor);
  };
});

var gestureCover = function gestureCover(toggle, cursor) {
  var gestureCoverStrategy = setGestureCover();
  gestureCoverStrategy(toggle, cursor);
};

var GestureEmitter = _emitter.default.inherit({
  gesture: true,
  configure: function configure(data) {
    this.getElement().css('msTouchAction', data.immediate ? 'pinch-zoom' : '');
    this.callBase(data);
  },
  allowInterruptionByMouseWheel: function allowInterruptionByMouseWheel() {
    return this._stage !== STARTED;
  },
  getDirection: function getDirection() {
    return this.direction;
  },
  _cancel: function _cancel() {
    this.callBase.apply(this, arguments);

    this._toggleGestureCover(false);

    this._stage = SLEEP;
  },
  start: function start(e) {
    if (e._needSkipEvent || (0, _index.needSkipEvent)(e)) {
      this._cancel(e);

      return;
    }

    this._startEvent = (0, _index.createEvent)(e);
    this._startEventData = (0, _index.eventData)(e);
    this._stage = INITED;

    this._init(e);

    this._setupImmediateTimer();
  },
  _setupImmediateTimer: function _setupImmediateTimer() {
    clearTimeout(this._immediateTimer);
    this._immediateAccepted = false;

    if (!this.immediate) {
      return;
    }

    this._immediateTimer = setTimeout(function () {
      this._immediateAccepted = true;
    }.bind(this), IMMEDIATE_TIMEOUT);
  },
  move: function move(e) {
    if (this._stage === INITED && this._directionConfirmed(e)) {
      this._stage = STARTED;

      this._resetActiveElement();

      this._toggleGestureCover(true);

      this._clearSelection(e);

      this._adjustStartEvent(e);

      this._start(this._startEvent);

      if (this._stage === SLEEP) {
        return;
      }

      this._requestAccept(e);

      this._move(e);

      this._forgetAccept();
    } else if (this._stage === STARTED) {
      this._clearSelection(e);

      this._move(e);
    }
  },
  _directionConfirmed: function _directionConfirmed(e) {
    var touchBoundary = this._getTouchBoundary(e);

    var delta = (0, _index.eventDelta)(this._startEventData, (0, _index.eventData)(e));
    var deltaX = abs(delta.x);
    var deltaY = abs(delta.y);

    var horizontalMove = this._validateMove(touchBoundary, deltaX, deltaY);

    var verticalMove = this._validateMove(touchBoundary, deltaY, deltaX);

    var direction = this.getDirection(e);
    var bothAccepted = direction === 'both' && (horizontalMove || verticalMove);
    var horizontalAccepted = direction === 'horizontal' && horizontalMove;
    var verticalAccepted = direction === 'vertical' && verticalMove;
    return bothAccepted || horizontalAccepted || verticalAccepted || this._immediateAccepted;
  },
  _validateMove: function _validateMove(touchBoundary, mainAxis, crossAxis) {
    return mainAxis && mainAxis >= touchBoundary && (this.immediate ? mainAxis >= crossAxis : true);
  },
  _getTouchBoundary: function _getTouchBoundary(e) {
    return this.immediate || (0, _index.isDxMouseWheelEvent)(e) ? IMMEDIATE_TOUCH_BOUNDARY : TOUCH_BOUNDARY;
  },
  _adjustStartEvent: function _adjustStartEvent(e) {
    var touchBoundary = this._getTouchBoundary(e);

    var delta = (0, _index.eventDelta)(this._startEventData, (0, _index.eventData)(e));
    this._startEvent.pageX += (0, _math.sign)(delta.x) * touchBoundary;
    this._startEvent.pageY += (0, _math.sign)(delta.y) * touchBoundary;
  },
  _resetActiveElement: function _resetActiveElement() {
    if (_devices.default.real().platform === 'ios' && this.getElement().find(':focus').length) {
      (0, _dom.resetActiveElement)();
    }
  },
  _toggleGestureCover: function _toggleGestureCover(toggle) {
    this._toggleGestureCoverImpl(toggle);
  },
  _toggleGestureCoverImpl: function _toggleGestureCoverImpl(toggle) {
    var isStarted = this._stage === STARTED;

    if (isStarted) {
      gestureCover(toggle, this.getElement().css('cursor'));
    }
  },
  _clearSelection: function _clearSelection(e) {
    if ((0, _index.isDxMouseWheelEvent)(e) || (0, _index.isTouchEvent)(e)) {
      return;
    }

    (0, _dom.clearSelection)();
  },
  end: function end(e) {
    this._toggleGestureCover(false);

    if (this._stage === STARTED) {
      this._end(e);
    } else if (this._stage === INITED) {
      this._stop(e);
    }

    this._stage = SLEEP;
  },
  dispose: function dispose() {
    clearTimeout(this._immediateTimer);
    this.callBase.apply(this, arguments);

    this._toggleGestureCover(false);
  },
  _init: _common.noop,
  _start: _common.noop,
  _move: _common.noop,
  _stop: _common.noop,
  _end: _common.noop
});

GestureEmitter.initialTouchBoundary = TOUCH_BOUNDARY;

GestureEmitter.touchBoundary = function (newBoundary) {
  if ((0, _type.isDefined)(newBoundary)) {
    TOUCH_BOUNDARY = newBoundary;
    return;
  }

  return TOUCH_BOUNDARY;
};

var _default = GestureEmitter;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.createDefaultOptionRules = exports.getNestedOptionValue = exports.getParentName = exports.getFieldName = exports.deviceMatch = exports.normalizeOptions = exports.convertRulesToOptions = void 0;

var _devices = _interopRequireDefault(__webpack_require__(10));

var _type = __webpack_require__(1);

var _common = __webpack_require__(3);

var _extend = __webpack_require__(2);

var _data = __webpack_require__(23);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var cachedGetters = {};

var convertRulesToOptions = function convertRulesToOptions(rules) {
  var currentDevice = _devices.default.current();

  return rules.reduce(function (options, _ref) {
    var device = _ref.device,
        ruleOptions = _ref.options;
    var deviceFilter = device || {};
    var match = (0, _type.isFunction)(deviceFilter) ? deviceFilter(currentDevice) : deviceMatch(currentDevice, deviceFilter);

    if (match) {
      (0, _extend.extend)(true, options, ruleOptions);
    }

    return options;
  }, {});
};

exports.convertRulesToOptions = convertRulesToOptions;

var normalizeOptions = function normalizeOptions(options, value) {
  return typeof options !== 'string' ? options : _defineProperty({}, options, value);
};

exports.normalizeOptions = normalizeOptions;

var deviceMatch = function deviceMatch(device, filter) {
  return (0, _type.isEmptyObject)(filter) || (0, _common.findBestMatches)(device, [filter]).length > 0;
};

exports.deviceMatch = deviceMatch;

var getFieldName = function getFieldName(fullName) {
  return fullName.substr(fullName.lastIndexOf('.') + 1);
};

exports.getFieldName = getFieldName;

var getParentName = function getParentName(fullName) {
  return fullName.substr(0, fullName.lastIndexOf('.'));
};

exports.getParentName = getParentName;

var getNestedOptionValue = function getNestedOptionValue(optionsObject, name) {
  cachedGetters[name] = cachedGetters[name] || (0, _data.compileGetter)(name);
  return cachedGetters[name](optionsObject, {
    functionsAsIs: true
  });
};

exports.getNestedOptionValue = getNestedOptionValue;

var createDefaultOptionRules = function createDefaultOptionRules() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  return options;
};

exports.createDefaultOptionRules = createDefaultOptionRules;

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.inactive = exports.active = exports.lock = void 0;

var _class = _interopRequireDefault(__webpack_require__(11));

var _common = __webpack_require__(3);

var _dom = __webpack_require__(21);

var _devices = _interopRequireDefault(__webpack_require__(10));

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _emitter = _interopRequireDefault(__webpack_require__(58));

var _emitter_registrator = _interopRequireDefault(__webpack_require__(39));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ACTIVE_EVENT_NAME = 'dxactive';
exports.active = ACTIVE_EVENT_NAME;
var INACTIVE_EVENT_NAME = 'dxinactive';
exports.inactive = INACTIVE_EVENT_NAME;
var ACTIVE_TIMEOUT = 30;
var INACTIVE_TIMEOUT = 400;

var FeedbackEvent = _class.default.inherit({
  ctor: function ctor(timeout, fire) {
    this._timeout = timeout;
    this._fire = fire;
  },
  start: function start() {
    var that = this;

    this._schedule(function () {
      that.force();
    });
  },
  _schedule: function _schedule(fn) {
    this.stop();
    this._timer = setTimeout(fn, this._timeout);
  },
  stop: function stop() {
    clearTimeout(this._timer);
  },
  force: function force() {
    if (this._fired) {
      return;
    }

    this.stop();

    this._fire();

    this._fired = true;
  },
  fired: function fired() {
    return this._fired;
  }
});

var activeFeedback;

var FeedbackEmitter = _emitter.default.inherit({
  ctor: function ctor() {
    this.callBase.apply(this, arguments);
    this._active = new FeedbackEvent(0, _common.noop);
    this._inactive = new FeedbackEvent(0, _common.noop);
  },
  configure: function configure(data, eventName) {
    switch (eventName) {
      case ACTIVE_EVENT_NAME:
        data.activeTimeout = data.timeout;
        break;

      case INACTIVE_EVENT_NAME:
        data.inactiveTimeout = data.timeout;
        break;
    }

    this.callBase(data);
  },
  start: function start(e) {
    if (activeFeedback) {
      var activeChildExists = (0, _dom.contains)(this.getElement().get(0), activeFeedback.getElement().get(0));
      var childJustActivated = !activeFeedback._active.fired();

      if (activeChildExists && childJustActivated) {
        this._cancel();

        return;
      }

      activeFeedback._inactive.force();
    }

    activeFeedback = this;

    this._initEvents(e);

    this._active.start();
  },
  _initEvents: function _initEvents(e) {
    var that = this;

    var eventTarget = this._getEmitterTarget(e);

    var mouseEvent = (0, _index.isMouseEvent)(e);

    var isSimulator = _devices.default.isSimulator();

    var deferFeedback = isSimulator || !mouseEvent;
    var activeTimeout = (0, _common.ensureDefined)(this.activeTimeout, ACTIVE_TIMEOUT);
    var inactiveTimeout = (0, _common.ensureDefined)(this.inactiveTimeout, INACTIVE_TIMEOUT);
    this._active = new FeedbackEvent(deferFeedback ? activeTimeout : 0, function () {
      that._fireEvent(ACTIVE_EVENT_NAME, e, {
        target: eventTarget
      });
    });
    this._inactive = new FeedbackEvent(deferFeedback ? inactiveTimeout : 0, function () {
      that._fireEvent(INACTIVE_EVENT_NAME, e, {
        target: eventTarget
      });

      activeFeedback = null;
    });
  },
  cancel: function cancel(e) {
    this.end(e);
  },
  end: function end(e) {
    var skipTimers = e.type !== _pointer.default.up;

    if (skipTimers) {
      this._active.stop();
    } else {
      this._active.force();
    }

    this._inactive.start();

    if (skipTimers) {
      this._inactive.force();
    }
  },
  dispose: function dispose() {
    this._active.stop();

    this._inactive.stop();

    if (activeFeedback === this) {
      activeFeedback = null;
    }

    this.callBase();
  },
  lockInactive: function lockInactive() {
    this._active.force();

    this._inactive.stop();

    activeFeedback = null;

    this._cancel();

    return this._inactive.force.bind(this._inactive);
  }
});

FeedbackEmitter.lock = function (deferred) {
  var lockInactive = activeFeedback ? activeFeedback.lockInactive() : _common.noop;
  deferred.done(lockInactive);
};

(0, _emitter_registrator.default)({
  emitter: FeedbackEmitter,
  events: [ACTIVE_EVENT_NAME, INACTIVE_EVENT_NAME]
});
var lock = FeedbackEmitter.lock;
exports.lock = lock;

/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _index = __webpack_require__(6);

var _common = __webpack_require__(3);

var _iterator = __webpack_require__(4);

var _devices = _interopRequireDefault(__webpack_require__(10));

var _class = _interopRequireDefault(__webpack_require__(11));

var _ui = _interopRequireDefault(__webpack_require__(107));

var _scroll_rtl_behavior = _interopRequireDefault(__webpack_require__(108));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SCROLLABLE_NATIVE = 'dxNativeScrollable';
var SCROLLABLE_NATIVE_CLASS = 'dx-scrollable-native';
var SCROLLABLE_SCROLLBAR_SIMULATED = 'dx-scrollable-scrollbar-simulated';
var SCROLLABLE_SCROLLBARS_HIDDEN = 'dx-scrollable-scrollbars-hidden';
var VERTICAL = 'vertical';
var HORIZONTAL = 'horizontal';
var HIDE_SCROLLBAR_TIMEOUT = 500;

var NativeStrategy = _class.default.inherit({
  ctor: function ctor(scrollable) {
    this._init(scrollable);
  },
  _init: function _init(scrollable) {
    this._component = scrollable;
    this._$element = scrollable.$element();
    this._$container = (0, _renderer.default)(scrollable.container());
    this._$content = scrollable.$content();
    this._direction = scrollable.option('direction');
    this._useSimulatedScrollbar = scrollable.option('useSimulatedScrollbar');
    this.option = scrollable.option.bind(scrollable);
    this._createActionByOption = scrollable._createActionByOption.bind(scrollable);
    this._isLocked = scrollable._isLocked.bind(scrollable);
    this._isDirection = scrollable._isDirection.bind(scrollable);
    this._allowedDirection = scrollable._allowedDirection.bind(scrollable);
    this._getMaxOffset = scrollable._getMaxOffset.bind(scrollable);
    this._isScrollInverted = scrollable._isScrollInverted.bind(scrollable);
  },
  render: function render() {
    var device = _devices.default.real();

    var deviceType = device.platform;

    this._$element.addClass(SCROLLABLE_NATIVE_CLASS).addClass(SCROLLABLE_NATIVE_CLASS + '-' + deviceType).toggleClass(SCROLLABLE_SCROLLBARS_HIDDEN, !this._isScrollbarVisible());

    if (this._isScrollbarVisible() && this._useSimulatedScrollbar) {
      this._renderScrollbars();
    }
  },
  updateRtlPosition: function updateRtlPosition(isFirstRender) {
    if (isFirstRender && this.option('rtlEnabled')) {
      if (this._isScrollbarVisible() && this._useSimulatedScrollbar) {
        this._moveScrollbars();
      }
    }
  },
  _renderScrollbars: function _renderScrollbars() {
    this._scrollbars = {};
    this._hideScrollbarTimeout = 0;

    this._$element.addClass(SCROLLABLE_SCROLLBAR_SIMULATED);

    this._renderScrollbar(VERTICAL);

    this._renderScrollbar(HORIZONTAL);
  },
  _renderScrollbar: function _renderScrollbar(direction) {
    if (!this._isDirection(direction)) {
      return;
    }

    this._scrollbars[direction] = new _ui.default((0, _renderer.default)('<div>').appendTo(this._$element), {
      direction: direction,
      expandable: this._component.option('scrollByThumb')
    });
  },
  handleInit: _common.noop,
  handleStart: _common.noop,
  handleMove: function handleMove(e) {
    if (this._isLocked()) {
      e.cancel = true;
      return;
    }

    if (this._allowedDirection()) {
      e.originalEvent.isScrollingEvent = true;
    }
  },
  handleEnd: _common.noop,
  handleCancel: _common.noop,
  handleStop: _common.noop,
  _eachScrollbar: function _eachScrollbar(callback) {
    callback = callback.bind(this);
    (0, _iterator.each)(this._scrollbars || {}, function (direction, scrollbar) {
      callback(scrollbar, direction);
    });
  },
  createActions: function createActions() {
    this._scrollAction = this._createActionByOption('onScroll');
    this._updateAction = this._createActionByOption('onUpdated');
  },
  _createActionArgs: function _createActionArgs() {
    var _this$location = this.location(),
        left = _this$location.left,
        top = _this$location.top;

    return {
      event: this._eventForUserAction,
      scrollOffset: this._getScrollOffset(),
      reachedLeft: this._isScrollInverted() ? this._isReachedRight(-left) : this._isReachedLeft(left),
      reachedRight: this._isScrollInverted() ? this._isReachedLeft(-Math.abs(left)) : this._isReachedRight(left),
      reachedTop: this._isDirection(VERTICAL) ? top >= 0 : undefined,
      reachedBottom: this._isDirection(VERTICAL) ? Math.abs(top) >= this._getMaxOffset().top : undefined
    };
  },
  _getScrollOffset: function _getScrollOffset() {
    var _this$location2 = this.location(),
        top = _this$location2.top,
        left = _this$location2.left;

    return {
      top: -top,
      left: this._normalizeOffsetLeft(-left)
    };
  },
  _normalizeOffsetLeft: function _normalizeOffsetLeft(scrollLeft) {
    if (this._isScrollInverted()) {
      if ((0, _scroll_rtl_behavior.default)().positive) {
        // for ie11 support
        return this._getMaxOffset().left - scrollLeft;
      }

      return this._getMaxOffset().left + scrollLeft;
    }

    return scrollLeft;
  },
  _isReachedLeft: function _isReachedLeft(left) {
    return this._isDirection(HORIZONTAL) ? left >= 0 : undefined;
  },
  _isReachedRight: function _isReachedRight(left) {
    return this._isDirection(HORIZONTAL) ? Math.abs(left) >= this._getMaxOffset().left : undefined;
  },
  _isScrollbarVisible: function _isScrollbarVisible() {
    var _this$option = this.option(),
        showScrollbar = _this$option.showScrollbar;

    return showScrollbar !== 'never' && showScrollbar !== false;
  },
  handleScroll: function handleScroll(e) {
    this._eventForUserAction = e;

    this._moveScrollbars();

    this._scrollAction(this._createActionArgs());
  },
  _moveScrollbars: function _moveScrollbars() {
    var _this$_getScrollOffse = this._getScrollOffset(),
        top = _this$_getScrollOffse.top,
        left = _this$_getScrollOffse.left;

    this._eachScrollbar(function (scrollbar) {
      scrollbar.moveTo({
        top: -top,
        left: -left
      });
      scrollbar.option('visible', true);
    });

    this._hideScrollbars();
  },
  _hideScrollbars: function _hideScrollbars() {
    clearTimeout(this._hideScrollbarTimeout);
    this._hideScrollbarTimeout = setTimeout(function () {
      this._eachScrollbar(function (scrollbar) {
        scrollbar.option('visible', false);
      });
    }.bind(this), HIDE_SCROLLBAR_TIMEOUT);
  },
  location: function location() {
    return {
      left: -this._$container.scrollLeft(),
      top: -this._$container.scrollTop()
    };
  },
  disabledChanged: _common.noop,
  update: function update() {
    this._update();

    this._updateAction(this._createActionArgs());
  },
  _update: function _update() {
    this._updateDimensions();

    this._updateScrollbars();
  },
  _updateDimensions: function _updateDimensions() {
    this._containerSize = {
      height: this._$container.height(),
      width: this._$container.width()
    };
    this._componentContentSize = {
      height: this._component.$content().height(),
      width: this._component.$content().width()
    };
    this._contentSize = {
      height: this._$content.height(),
      width: this._$content.width()
    };
  },
  _updateScrollbars: function _updateScrollbars() {
    this._eachScrollbar(function (scrollbar, direction) {
      var dimension = direction === VERTICAL ? 'height' : 'width';
      scrollbar.option({
        containerSize: this._containerSize[dimension],
        contentSize: this._componentContentSize[dimension]
      });
      scrollbar.update();
    });
  },
  _allowedDirections: function _allowedDirections() {
    return {
      vertical: this._isDirection(VERTICAL) && this._contentSize.height > this._containerSize.height,
      horizontal: this._isDirection(HORIZONTAL) && this._contentSize.width > this._containerSize.width
    };
  },
  dispose: function dispose() {
    var className = this._$element.get(0).className;

    var scrollableNativeRegexp = new RegExp(SCROLLABLE_NATIVE_CLASS + '\\S*', 'g');

    if (scrollableNativeRegexp.test(className)) {
      this._$element.removeClass(className.match(scrollableNativeRegexp).join(' '));
    }

    _events_engine.default.off(this._$element, '.' + SCROLLABLE_NATIVE);

    _events_engine.default.off(this._$container, '.' + SCROLLABLE_NATIVE);

    this._removeScrollbars();

    clearTimeout(this._hideScrollbarTimeout);
  },
  _removeScrollbars: function _removeScrollbars() {
    this._eachScrollbar(function (scrollbar) {
      scrollbar.$element().remove();
    });
  },
  scrollBy: function scrollBy(distance) {
    var location = this.location();

    this._$container.scrollTop(Math.round(-location.top - distance.top));

    this._$container.scrollLeft(Math.round(-location.left - this._getScrollSign() * distance.left));
  },
  _getScrollSign: function _getScrollSign() {
    return this._isScrollInverted() && (0, _scroll_rtl_behavior.default)().positive ? -1 : 1;
  },
  validate: function validate(e) {
    if (this.option('disabled')) {
      return false;
    }

    if ((0, _index.isDxMouseWheelEvent)(e) && this._isScrolledInMaxDirection(e)) {
      return false;
    }

    return !!this._allowedDirection();
  },
  // TODO: rtl
  // TODO: horizontal scroll when shift is pressed
  _isScrolledInMaxDirection: function _isScrolledInMaxDirection(e) {
    var container = this._$container.get(0);

    var result;

    if (e.delta > 0) {
      result = e.shiftKey ? !container.scrollLeft : !container.scrollTop;
    } else {
      if (e.shiftKey) {
        result = container.scrollLeft >= this._getMaxOffset().left;
      } else {
        result = container.scrollTop >= this._getMaxOffset().top;
      }
    }

    return result;
  },
  getDirection: function getDirection() {
    return this._allowedDirection();
  }
});

var _default = NativeStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

exports.drop = exports.leave = exports.enter = exports.end = exports.start = exports.move = exports.dropTargets = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _element_data = __webpack_require__(25);

var _array = __webpack_require__(12);

var iteratorUtils = _interopRequireWildcard(__webpack_require__(4));

var _dom = __webpack_require__(21);

var _event_registrator = _interopRequireDefault(__webpack_require__(38));

var _index = __webpack_require__(6);

var _emitter = _interopRequireDefault(__webpack_require__(77));

var _emitter_registrator = _interopRequireDefault(__webpack_require__(39));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DRAG_START_EVENT = 'dxdragstart';
exports.start = DRAG_START_EVENT;
var DRAG_EVENT = 'dxdrag';
exports.move = DRAG_EVENT;
var DRAG_END_EVENT = 'dxdragend';
exports.end = DRAG_END_EVENT;
var DRAG_ENTER_EVENT = 'dxdragenter';
exports.enter = DRAG_ENTER_EVENT;
var DRAG_LEAVE_EVENT = 'dxdragleave';
exports.leave = DRAG_LEAVE_EVENT;
var DROP_EVENT = 'dxdrop';
exports.drop = DROP_EVENT;
var DX_DRAG_EVENTS_COUNT_KEY = 'dxDragEventsCount';
var knownDropTargets = [];
exports.dropTargets = knownDropTargets;
var knownDropTargetSelectors = [];
var knownDropTargetConfigs = [];
var dropTargetRegistration = {
  setup: function setup(element, data) {
    var knownDropTarget = (0, _array.inArray)(element, knownDropTargets) !== -1;

    if (!knownDropTarget) {
      knownDropTargets.push(element);
      knownDropTargetSelectors.push([]);
      knownDropTargetConfigs.push(data || {});
    }
  },
  add: function add(element, handleObj) {
    var index = (0, _array.inArray)(element, knownDropTargets);
    this.updateEventsCounter(element, handleObj.type, 1);
    var selector = handleObj.selector;

    if ((0, _array.inArray)(selector, knownDropTargetSelectors[index]) === -1) {
      knownDropTargetSelectors[index].push(selector);
    }
  },
  updateEventsCounter: function updateEventsCounter(element, event, value) {
    if ([DRAG_ENTER_EVENT, DRAG_LEAVE_EVENT, DROP_EVENT].indexOf(event) > -1) {
      var eventsCount = (0, _element_data.data)(element, DX_DRAG_EVENTS_COUNT_KEY) || 0;
      (0, _element_data.data)(element, DX_DRAG_EVENTS_COUNT_KEY, Math.max(0, eventsCount + value));
    }
  },
  remove: function remove(element, handleObj) {
    this.updateEventsCounter(element, handleObj.type, -1);
  },
  teardown: function teardown(element) {
    var handlersCount = (0, _element_data.data)(element, DX_DRAG_EVENTS_COUNT_KEY);

    if (!handlersCount) {
      var index = (0, _array.inArray)(element, knownDropTargets);
      knownDropTargets.splice(index, 1);
      knownDropTargetSelectors.splice(index, 1);
      knownDropTargetConfigs.splice(index, 1);
      (0, _element_data.removeData)(element, DX_DRAG_EVENTS_COUNT_KEY);
    }
  }
};
/**
* @name UI Events.dxdragenter
* @type eventType
* @type_function_param1 event:event
* @type_function_param1_field1 draggingElement:Element
* @module events/drag
*/

/**
* @name UI Events.dxdrop
* @type eventType
* @type_function_param1 event:event
* @type_function_param1_field1 draggingElement:Element
* @module events/drag
*/

/**
* @name UI Events.dxdragleave
* @type eventType
* @type_function_param1 event:event
* @type_function_param1_field1 draggingElement:Element
* @module events/drag
*/

(0, _event_registrator.default)(DRAG_ENTER_EVENT, dropTargetRegistration);
(0, _event_registrator.default)(DRAG_LEAVE_EVENT, dropTargetRegistration);
(0, _event_registrator.default)(DROP_EVENT, dropTargetRegistration);

var getItemDelegatedTargets = function getItemDelegatedTargets($element) {
  var dropTargetIndex = (0, _array.inArray)($element.get(0), knownDropTargets);
  var dropTargetSelectors = knownDropTargetSelectors[dropTargetIndex].filter(function (selector) {
    return selector;
  });
  var $delegatedTargets = $element.find(dropTargetSelectors.join(', '));

  if ((0, _array.inArray)(undefined, knownDropTargetSelectors[dropTargetIndex]) !== -1) {
    $delegatedTargets = $delegatedTargets.add($element);
  }

  return $delegatedTargets;
};

var getItemConfig = function getItemConfig($element) {
  var dropTargetIndex = (0, _array.inArray)($element.get(0), knownDropTargets);
  return knownDropTargetConfigs[dropTargetIndex];
};

var getItemPosition = function getItemPosition(dropTargetConfig, $element) {
  if (dropTargetConfig.itemPositionFunc) {
    return dropTargetConfig.itemPositionFunc($element);
  } else {
    return $element.offset();
  }
};

var getItemSize = function getItemSize(dropTargetConfig, $element) {
  if (dropTargetConfig.itemSizeFunc) {
    return dropTargetConfig.itemSizeFunc($element);
  }

  return {
    width: $element.get(0).getBoundingClientRect().width,
    height: $element.get(0).getBoundingClientRect().height
  };
};

var DragEmitter = _emitter.default.inherit({
  ctor: function ctor(element) {
    this.callBase(element);
    this.direction = 'both';
  },
  _init: function _init(e) {
    this._initEvent = e;
  },
  _start: function _start(e) {
    e = this._fireEvent(DRAG_START_EVENT, this._initEvent);
    this._maxLeftOffset = e.maxLeftOffset;
    this._maxRightOffset = e.maxRightOffset;
    this._maxTopOffset = e.maxTopOffset;
    this._maxBottomOffset = e.maxBottomOffset;
    var dropTargets = (0, _array.wrapToArray)(e.targetElements || (e.targetElements === null ? [] : knownDropTargets));
    this._dropTargets = iteratorUtils.map(dropTargets, function (element) {
      return (0, _renderer.default)(element).get(0);
    });
  },
  _move: function _move(e) {
    var eventData = (0, _index.eventData)(e);

    var dragOffset = this._calculateOffset(eventData);

    e = this._fireEvent(DRAG_EVENT, e, {
      offset: dragOffset
    });

    this._processDropTargets(e);

    if (!e._cancelPreventDefault) {
      e.preventDefault();
    }
  },
  _calculateOffset: function _calculateOffset(eventData) {
    return {
      x: this._calculateXOffset(eventData),
      y: this._calculateYOffset(eventData)
    };
  },
  _calculateXOffset: function _calculateXOffset(eventData) {
    if (this.direction !== 'vertical') {
      var offset = eventData.x - this._startEventData.x;
      return this._fitOffset(offset, this._maxLeftOffset, this._maxRightOffset);
    }

    return 0;
  },
  _calculateYOffset: function _calculateYOffset(eventData) {
    if (this.direction !== 'horizontal') {
      var offset = eventData.y - this._startEventData.y;
      return this._fitOffset(offset, this._maxTopOffset, this._maxBottomOffset);
    }

    return 0;
  },
  _fitOffset: function _fitOffset(offset, minOffset, maxOffset) {
    if (minOffset != null) {
      offset = Math.max(offset, -minOffset);
    }

    if (maxOffset != null) {
      offset = Math.min(offset, maxOffset);
    }

    return offset;
  },
  _processDropTargets: function _processDropTargets(e) {
    var target = this._findDropTarget(e);

    var sameTarget = target === this._currentDropTarget;

    if (!sameTarget) {
      this._fireDropTargetEvent(e, DRAG_LEAVE_EVENT);

      this._currentDropTarget = target;

      this._fireDropTargetEvent(e, DRAG_ENTER_EVENT);
    }
  },
  _fireDropTargetEvent: function _fireDropTargetEvent(event, eventName) {
    if (!this._currentDropTarget) {
      return;
    }

    var eventData = {
      type: eventName,
      originalEvent: event,
      draggingElement: this._$element.get(0),
      target: this._currentDropTarget
    };
    (0, _index.fireEvent)(eventData);
  },
  _findDropTarget: function _findDropTarget(e) {
    var that = this;
    var result;
    iteratorUtils.each(knownDropTargets, function (_, target) {
      if (!that._checkDropTargetActive(target)) {
        return;
      }

      var $target = (0, _renderer.default)(target);
      iteratorUtils.each(getItemDelegatedTargets($target), function (_, delegatedTarget) {
        var $delegatedTarget = (0, _renderer.default)(delegatedTarget);

        if (that._checkDropTarget(getItemConfig($target), $delegatedTarget, (0, _renderer.default)(result), e)) {
          result = delegatedTarget;
        }
      });
    });
    return result;
  },
  _checkDropTargetActive: function _checkDropTargetActive(target) {
    var active = false;
    iteratorUtils.each(this._dropTargets, function (_, activeTarget) {
      active = active || activeTarget === target || (0, _dom.contains)(activeTarget, target);
      return !active;
    });
    return active;
  },
  _checkDropTarget: function _checkDropTarget(config, $target, $prevTarget, e) {
    var isDraggingElement = $target.get(0) === (0, _renderer.default)(e.target).get(0);

    if (isDraggingElement) {
      return false;
    }

    var targetPosition = getItemPosition(config, $target);

    if (e.pageX < targetPosition.left) {
      return false;
    }

    if (e.pageY < targetPosition.top) {
      return false;
    }

    var targetSize = getItemSize(config, $target);

    if (e.pageX > targetPosition.left + targetSize.width) {
      return false;
    }

    if (e.pageY > targetPosition.top + targetSize.height) {
      return false;
    }

    if ($prevTarget.length && $prevTarget.closest($target).length) {
      return false;
    }

    if (config.checkDropTarget && !config.checkDropTarget($target, e)) {
      return false;
    }

    return $target;
  },
  _end: function _end(e) {
    var eventData = (0, _index.eventData)(e);

    this._fireEvent(DRAG_END_EVENT, e, {
      offset: this._calculateOffset(eventData)
    });

    this._fireDropTargetEvent(e, DROP_EVENT);

    delete this._currentDropTarget;
  }
});
/**
 * @name UI Events.dxdragstart
 * @type eventType
 * @type_function_param1 event:event
 * @type_function_param1_field1 cancel:boolean
 * @module events/drag
*/

/**
  * @name UI Events.dxdrag
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 offset:number
  * @type_function_param1_field2 cancel:boolean
  * @module events/drag
*/

/**
  * @name UI Events.dxdragend
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 offset:number
  * @type_function_param1_field2 cancel:boolean
  * @module events/drag
*/


(0, _emitter_registrator.default)({
  emitter: DragEmitter,
  events: [DRAG_START_EVENT, DRAG_EVENT, DRAG_END_EVENT]
}); ///#DEBUG

/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _uiCollection_widget = _interopRequireDefault(__webpack_require__(177));

var _ui = _interopRequireDefault(__webpack_require__(28));

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _uiCollection_widgetEditStrategy = _interopRequireDefault(__webpack_require__(90));

var _data = __webpack_require__(23);

var _data_source = __webpack_require__(112);

var _utils = __webpack_require__(67);

var _selection = _interopRequireDefault(__webpack_require__(185));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var ITEM_DELETING_DATA_KEY = 'dxItemDeleting';
var NOT_EXISTING_INDEX = -1;

var indexExists = function indexExists(index) {
  return index !== NOT_EXISTING_INDEX;
};

var CollectionWidget = _uiCollection_widget.default.inherit({
  _setOptionsByReference: function _setOptionsByReference() {
    this.callBase();
    (0, _extend.extend)(this._optionsByReference, {
      selectedItem: true
    });
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      /**
      * @name CollectionWidgetOptions.selectionMode
      * @type string
      * @default 'none'
      * @acceptValues 'multiple'|'single'|'all'|'none'
      * @hidden
      */
      selectionMode: 'none',

      /**
      * @name CollectionWidgetOptions.selectionRequired
      * @type boolean
      * @default false
      * @hidden
      */
      selectionRequired: false,

      /**
      * @name CollectionWidgetOptions.selectionByClick
      * @type boolean
      * @default true
      * @hidden
      */
      selectionByClick: true,
      selectedItems: [],
      selectedItemKeys: [],
      maxFilterLengthInRequest: 1500,
      keyExpr: null,
      selectedIndex: NOT_EXISTING_INDEX,
      selectedItem: null,
      onSelectionChanged: null,

      /**
      * @name CollectionWidgetOptions.onItemReordered
      * @extends Action
      * @type function(e)
      * @type_function_param1 e:object
      * @type_function_param1_field4 itemData:object
      * @type_function_param1_field5 itemElement:DxElement
      * @type_function_param1_field6 itemIndex:number | object
      * @type_function_param1_field7 fromIndex:number
      * @type_function_param1_field8 toIndex:number
      * @action
      * @hidden
      */
      onItemReordered: null,

      /**
      * @name CollectionWidgetOptions.onItemDeleting
      * @extends Action
      * @type function(e)
      * @type_function_param1 e:object
      * @type_function_param1_field4 itemData:object
      * @type_function_param1_field5 itemElement:DxElement
      * @type_function_param1_field6 itemIndex:number | object
      * @type_function_param1_field7 cancel:boolean | Promise<void>
      * @action
      * @hidden
      */
      onItemDeleting: null,

      /**
      * @name CollectionWidgetOptions.onItemDeleted
      * @extends Action
      * @type function(e)
      * @type_function_param1 e:object
      * @type_function_param1_field4 itemData:object
      * @type_function_param1_field5 itemElement:DxElement
      * @type_function_param1_field6 itemIndex:number | object
      * @action
      * @hidden
      */
      onItemDeleted: null
    });
  },
  ctor: function ctor(element, options) {
    this._userOptions = options || {};
    this.callBase(element, options);
  },
  _init: function _init() {
    this._initEditStrategy();

    this.callBase();

    this._initKeyGetter();

    this._initSelectionModule();
  },
  _initKeyGetter: function _initKeyGetter() {
    this._keyGetter = (0, _data.compileGetter)(this.option('keyExpr'));
  },
  _getKeysByItems: function _getKeysByItems(selectedItems) {
    return this._editStrategy.getKeysByItems(selectedItems);
  },
  _getItemsByKeys: function _getItemsByKeys(selectedItemKeys, selectedItems) {
    return this._editStrategy.getItemsByKeys(selectedItemKeys, selectedItems);
  },
  _getKeyByIndex: function _getKeyByIndex(index) {
    return this._editStrategy.getKeyByIndex(index);
  },
  _getIndexByKey: function _getIndexByKey(key) {
    return this._editStrategy.getIndexByKey(key);
  },
  _getIndexByItemData: function _getIndexByItemData(itemData) {
    return this._editStrategy.getIndexByItemData(itemData);
  },
  _isKeySpecified: function _isKeySpecified() {
    return !!(this._dataSource && this._dataSource.key());
  },
  _getCombinedFilter: function _getCombinedFilter() {
    return this._dataSource && this._dataSource.filter();
  },
  key: function key() {
    if (this.option('keyExpr')) return this.option('keyExpr');
    return this._dataSource && this._dataSource.key();
  },
  keyOf: function keyOf(item) {
    var key = item;

    var store = this._dataSource && this._dataSource.store();

    if (this.option('keyExpr')) {
      key = this._keyGetter(item);
    } else if (store) {
      key = store.keyOf(item);
    }

    return key;
  },
  _nullValueSelectionSupported: function _nullValueSelectionSupported() {
    return false;
  },
  _initSelectionModule: function _initSelectionModule() {
    var that = this;
    var itemsGetter = that._editStrategy.itemsGetter;
    this._selection = new _selection.default({
      allowNullValue: this._nullValueSelectionSupported(),
      mode: this.option('selectionMode'),
      maxFilterLengthInRequest: this.option('maxFilterLengthInRequest'),
      equalByReference: !this._isKeySpecified(),
      onSelectionChanged: function onSelectionChanged(args) {
        if (args.addedItemKeys.length || args.removedItemKeys.length) {
          that.option('selectedItems', that._getItemsByKeys(args.selectedItemKeys, args.selectedItems));

          that._updateSelectedItems(args);
        }
      },
      filter: that._getCombinedFilter.bind(that),
      totalCount: function totalCount() {
        var items = that.option('items');
        var dataSource = that._dataSource;
        return dataSource && dataSource.totalCount() >= 0 ? dataSource.totalCount() : items.length;
      },
      key: that.key.bind(that),
      keyOf: that.keyOf.bind(that),
      load: function load(options) {
        if (that._dataSource) {
          var loadOptions = that._dataSource.loadOptions();

          options.customQueryParams = loadOptions.customQueryParams;
          options.userData = that._dataSource._userData;
        }

        var store = that._dataSource && that._dataSource.store();

        if (store) {
          return store.load(options).done(function (loadResult) {
            if (that._disposed) {
              return;
            }

            var items = (0, _utils.normalizeLoadResult)(loadResult).data;

            that._dataSource._applyMapFunction(items);
          });
        } else {
          return new _deferred.Deferred().resolve(this.plainItems());
        }
      },
      dataFields: function dataFields() {
        return that._dataSource && that._dataSource.select();
      },
      plainItems: itemsGetter.bind(that._editStrategy)
    });
  },
  _initEditStrategy: function _initEditStrategy() {
    var Strategy = _uiCollection_widgetEditStrategy.default;
    this._editStrategy = new Strategy(this);
  },
  _getSelectedItemIndices: function _getSelectedItemIndices(keys) {
    var that = this;
    var indices = [];
    keys = keys || this._selection.getSelectedItemKeys();

    that._editStrategy.beginCache();

    (0, _iterator.each)(keys, function (_, key) {
      var selectedIndex = that._getIndexByKey(key);

      if (indexExists(selectedIndex)) {
        indices.push(selectedIndex);
      }
    });

    that._editStrategy.endCache();

    return indices;
  },
  _initMarkup: function _initMarkup() {
    var _this = this;

    this._rendering = true;

    if (!this._dataSource || !this._dataSource.isLoading()) {
      this._syncSelectionOptions().done(function () {
        return _this._normalizeSelectedItems();
      });
    }

    this.callBase();
  },
  _render: function _render() {
    this.callBase();
    this._rendering = false;
  },
  _fireContentReadyAction: function _fireContentReadyAction() {
    this._rendering = false;
    this._rendered = true;
    this.callBase.apply(this, arguments);
  },
  _syncSelectionOptions: function _syncSelectionOptions(byOption) {
    byOption = byOption || this._chooseSelectOption();
    var selectedItem;
    var selectedIndex;
    var selectedItemKeys;
    var selectedItems;

    switch (byOption) {
      case 'selectedIndex':
        selectedItem = this._editStrategy.getItemDataByIndex(this.option('selectedIndex'));

        if ((0, _type.isDefined)(selectedItem)) {
          this._setOptionWithoutOptionChange('selectedItems', [selectedItem]);

          this._setOptionWithoutOptionChange('selectedItem', selectedItem);

          this._setOptionWithoutOptionChange('selectedItemKeys', this._editStrategy.getKeysByItems([selectedItem]));
        } else {
          this._setOptionWithoutOptionChange('selectedItems', []);

          this._setOptionWithoutOptionChange('selectedItemKeys', []);

          this._setOptionWithoutOptionChange('selectedItem', null);
        }

        break;

      case 'selectedItems':
        selectedItems = this.option('selectedItems') || [];
        selectedIndex = selectedItems.length ? this._editStrategy.getIndexByItemData(selectedItems[0]) : NOT_EXISTING_INDEX;

        if (this.option('selectionRequired') && !indexExists(selectedIndex)) {
          return this._syncSelectionOptions('selectedIndex');
        }

        this._setOptionWithoutOptionChange('selectedItem', selectedItems[0]);

        this._setOptionWithoutOptionChange('selectedIndex', selectedIndex);

        this._setOptionWithoutOptionChange('selectedItemKeys', this._editStrategy.getKeysByItems(selectedItems));

        break;

      case 'selectedItem':
        selectedItem = this.option('selectedItem');
        selectedIndex = this._editStrategy.getIndexByItemData(selectedItem);

        if (this.option('selectionRequired') && !indexExists(selectedIndex)) {
          return this._syncSelectionOptions('selectedIndex');
        }

        if ((0, _type.isDefined)(selectedItem)) {
          this._setOptionWithoutOptionChange('selectedItems', [selectedItem]);

          this._setOptionWithoutOptionChange('selectedIndex', selectedIndex);

          this._setOptionWithoutOptionChange('selectedItemKeys', this._editStrategy.getKeysByItems([selectedItem]));
        } else {
          this._setOptionWithoutOptionChange('selectedItems', []);

          this._setOptionWithoutOptionChange('selectedItemKeys', []);

          this._setOptionWithoutOptionChange('selectedIndex', NOT_EXISTING_INDEX);
        }

        break;

      case 'selectedItemKeys':
        selectedItemKeys = this.option('selectedItemKeys');

        if (this.option('selectionRequired')) {
          var selectedItemIndex = this._getIndexByKey(selectedItemKeys[0]);

          if (!indexExists(selectedItemIndex)) {
            return this._syncSelectionOptions('selectedIndex');
          }
        }

        return this._selection.setSelection(selectedItemKeys);
    }

    return new _deferred.Deferred().resolve().promise();
  },
  _chooseSelectOption: function _chooseSelectOption() {
    var optionName = 'selectedIndex';

    var isOptionDefined = function (optionName) {
      var optionValue = this.option(optionName);
      var length = (0, _type.isDefined)(optionValue) && optionValue.length;
      return length || optionName in this._userOptions;
    }.bind(this);

    if (isOptionDefined('selectedItems')) {
      optionName = 'selectedItems';
    } else if (isOptionDefined('selectedItem')) {
      optionName = 'selectedItem';
    } else if (isOptionDefined('selectedItemKeys')) {
      optionName = 'selectedItemKeys';
    }

    return optionName;
  },
  _compareKeys: function _compareKeys(oldKeys, newKeys) {
    if (oldKeys.length !== newKeys.length) {
      return false;
    }

    for (var i = 0; i < newKeys.length; i++) {
      if (oldKeys[i] !== newKeys[i]) {
        return false;
      }
    }

    return true;
  },
  _normalizeSelectedItems: function _normalizeSelectedItems() {
    if (this.option('selectionMode') === 'none') {
      this._setOptionWithoutOptionChange('selectedItems', []);

      this._syncSelectionOptions('selectedItems');
    } else if (this.option('selectionMode') === 'single') {
      var newSelection = this.option('selectedItems');

      if (newSelection.length > 1 || !newSelection.length && this.option('selectionRequired') && this.option('items') && this.option('items').length) {
        var currentSelection = this._selection.getSelectedItems();

        var normalizedSelection = newSelection[0] === undefined ? currentSelection[0] : newSelection[0];

        if (normalizedSelection === undefined) {
          normalizedSelection = this._editStrategy.itemsGetter()[0];
        }

        if (this.option('grouped') && normalizedSelection && normalizedSelection.items) {
          normalizedSelection.items = [normalizedSelection.items[0]];
        }

        this._selection.setSelection(this._getKeysByItems([normalizedSelection]));

        this._setOptionWithoutOptionChange('selectedItems', [normalizedSelection]);

        return this._syncSelectionOptions('selectedItems');
      } else {
        this._selection.setSelection(this._getKeysByItems(newSelection));
      }
    } else {
      var newKeys = this._getKeysByItems(this.option('selectedItems'));

      var oldKeys = this._selection.getSelectedItemKeys();

      if (!this._compareKeys(oldKeys, newKeys)) {
        this._selection.setSelection(newKeys);
      }
    }

    return new _deferred.Deferred().resolve().promise();
  },
  _itemClickHandler: function _itemClickHandler(e) {
    this._createAction(function (e) {
      this._itemSelectHandler(e.event);
    }.bind(this), {
      validatingTargetName: 'itemElement'
    })({
      itemElement: (0, _renderer.default)(e.currentTarget),
      event: e
    });

    this.callBase.apply(this, arguments);
  },
  _itemSelectHandler: function _itemSelectHandler(e) {
    if (!this.option('selectionByClick')) {
      return;
    }

    var $itemElement = e.currentTarget;

    if (this.isItemSelected($itemElement)) {
      this.unselectItem(e.currentTarget);
    } else {
      this.selectItem(e.currentTarget);
    }
  },
  _selectedItemElement: function _selectedItemElement(index) {
    return this._itemElements().eq(index);
  },
  _postprocessRenderItem: function _postprocessRenderItem(args) {
    if (this.option('selectionMode') !== 'none') {
      var $itemElement = (0, _renderer.default)(args.itemElement);

      var normalizedItemIndex = this._editStrategy.getNormalizedIndex($itemElement);

      var isItemSelected = this._isItemSelected(normalizedItemIndex);

      this._processSelectableItem($itemElement, isItemSelected);
    }
  },
  _processSelectableItem: function _processSelectableItem($itemElement, isSelected) {
    $itemElement.toggleClass(this._selectedItemClass(), isSelected);

    this._setAriaSelected($itemElement, String(isSelected));
  },
  _updateSelectedItems: function _updateSelectedItems(args) {
    var that = this;
    var addedItemKeys = args.addedItemKeys;
    var removedItemKeys = args.removedItemKeys;

    if (that._rendered && (addedItemKeys.length || removedItemKeys.length)) {
      var selectionChangePromise = that._selectionChangePromise;

      if (!that._rendering) {
        var addedSelection = [];
        var normalizedIndex;
        var removedSelection = [];

        that._editStrategy.beginCache();

        for (var i = 0; i < addedItemKeys.length; i++) {
          normalizedIndex = that._getIndexByKey(addedItemKeys[i]);
          addedSelection.push(normalizedIndex);

          that._addSelection(normalizedIndex);
        }

        for (var _i = 0; _i < removedItemKeys.length; _i++) {
          normalizedIndex = that._getIndexByKey(removedItemKeys[_i]);
          removedSelection.push(normalizedIndex);

          that._removeSelection(normalizedIndex);
        }

        that._editStrategy.endCache();

        that._updateSelection(addedSelection, removedSelection);
      }

      (0, _deferred.when)(selectionChangePromise).done(function () {
        that._fireSelectionChangeEvent(args.addedItems, args.removedItems);
      });
    }
  },
  _fireSelectionChangeEvent: function _fireSelectionChangeEvent(addedItems, removedItems) {
    this._createActionByOption('onSelectionChanged', {
      excludeValidators: ['disabled', 'readOnly']
    })({
      addedItems: addedItems,
      removedItems: removedItems
    });
  },
  _updateSelection: _common.noop,
  _setAriaSelected: function _setAriaSelected($target, value) {
    this.setAria('selected', value, $target);
  },
  _removeSelection: function _removeSelection(normalizedIndex) {
    var $itemElement = this._editStrategy.getItemElement(normalizedIndex);

    if (indexExists(normalizedIndex)) {
      this._processSelectableItem($itemElement, false);

      _events_engine.default.triggerHandler($itemElement, 'stateChanged', false);
    }
  },
  _addSelection: function _addSelection(normalizedIndex) {
    var $itemElement = this._editStrategy.getItemElement(normalizedIndex);

    if (indexExists(normalizedIndex)) {
      this._processSelectableItem($itemElement, true);

      _events_engine.default.triggerHandler($itemElement, 'stateChanged', true);
    }
  },
  _isItemSelected: function _isItemSelected(index) {
    var key = this._getKeyByIndex(index);

    return this._selection.isItemSelected(key, {
      checkPending: true
    });
  },
  _optionChanged: function _optionChanged(args) {
    var _this2 = this;

    switch (args.name) {
      case 'selectionMode':
        this._invalidate();

        break;

      case 'dataSource':
        if (!args.value || Array.isArray(args.value) && !args.value.length) {
          this.option('selectedItemKeys', []);
        }

        this.callBase(args);
        break;

      case 'selectedIndex':
      case 'selectedItem':
      case 'selectedItems':
      case 'selectedItemKeys':
        this._syncSelectionOptions(args.name).done(function () {
          return _this2._normalizeSelectedItems();
        });

        break;

      case 'keyExpr':
        this._initKeyGetter();

        break;

      case 'selectionRequired':
        this._normalizeSelectedItems();

        break;

      case 'selectionByClick':
      case 'onSelectionChanged':
      case 'onItemDeleting':
      case 'onItemDeleted':
      case 'onItemReordered':
      case 'maxFilterLengthInRequest':
        break;

      default:
        this.callBase(args);
    }
  },
  _clearSelectedItems: function _clearSelectedItems() {
    this._setOptionWithoutOptionChange('selectedItems', []);

    this._syncSelectionOptions('selectedItems');
  },
  _waitDeletingPrepare: function _waitDeletingPrepare($itemElement) {
    if ($itemElement.data(ITEM_DELETING_DATA_KEY)) {
      return new _deferred.Deferred().resolve().promise();
    }

    $itemElement.data(ITEM_DELETING_DATA_KEY, true);
    var deferred = new _deferred.Deferred();
    var deletingActionArgs = {
      cancel: false
    };

    var deletePromise = this._itemEventHandler($itemElement, 'onItemDeleting', deletingActionArgs, {
      excludeValidators: ['disabled', 'readOnly']
    });

    (0, _deferred.when)(deletePromise).always(function (value) {
      var deletePromiseExists = !deletePromise;
      var deletePromiseResolved = !deletePromiseExists && deletePromise.state() === 'resolved';
      var argumentsSpecified = !!arguments.length;
      var shouldDelete = deletePromiseExists || deletePromiseResolved && !argumentsSpecified || deletePromiseResolved && value;
      (0, _deferred.when)((0, _deferred.fromPromise)(deletingActionArgs.cancel)).always(function () {
        $itemElement.data(ITEM_DELETING_DATA_KEY, false);
      }).done(function (cancel) {
        shouldDelete && !cancel ? deferred.resolve() : deferred.reject();
      }).fail(deferred.reject);
    }.bind(this));
    return deferred.promise();
  },
  _deleteItemFromDS: function _deleteItemFromDS($item) {
    if (!this._dataSource) {
      return new _deferred.Deferred().resolve().promise();
    }

    var deferred = new _deferred.Deferred();
    var disabledState = this.option('disabled');

    var dataStore = this._dataSource.store();

    this.option('disabled', true);

    if (!dataStore.remove) {
      throw _ui.default.Error('E1011');
    }

    dataStore.remove(dataStore.keyOf(this._getItemData($item))).done(function (key) {
      if (key !== undefined) {
        deferred.resolve();
      } else {
        deferred.reject();
      }
    }).fail(function () {
      deferred.reject();
    });
    deferred.always(function () {
      this.option('disabled', disabledState);
    }.bind(this));
    return deferred;
  },
  _tryRefreshLastPage: function _tryRefreshLastPage() {
    var deferred = new _deferred.Deferred();

    if (this._isLastPage() || this.option('grouped')) {
      deferred.resolve();
    } else {
      this._refreshLastPage().done(function () {
        deferred.resolve();
      });
    }

    return deferred.promise();
  },
  _refreshLastPage: function _refreshLastPage() {
    this._expectLastItemLoading();

    return this._dataSource.load();
  },
  _updateSelectionAfterDelete: function _updateSelectionAfterDelete(index) {
    var key = this._getKeyByIndex(index);

    this._selection.deselect([key]);
  },
  _updateIndicesAfterIndex: function _updateIndicesAfterIndex(index) {
    var itemElements = this._itemElements();

    for (var i = index + 1; i < itemElements.length; i++) {
      (0, _renderer.default)(itemElements[i]).data(this._itemIndexKey(), i - 1);
    }
  },
  _simulateOptionChange: function _simulateOptionChange(optionName) {
    var optionValue = this.option(optionName);

    if (optionValue instanceof _data_source.DataSource) {
      return;
    }

    this._optionChangedAction({
      name: optionName,
      fullName: optionName,
      value: optionValue
    });
  },

  /**
  * @name CollectionWidget.isItemSelected
  * @publicName isItemSelected(itemElement)
  * @param1 itemElement:Element
  * @return boolean
  * @hidden
  */
  isItemSelected: function isItemSelected(itemElement) {
    return this._isItemSelected(this._editStrategy.getNormalizedIndex(itemElement));
  },

  /**
  * @name CollectionWidget.selectItem
  * @publicName selectItem(itemElement)
  * @param1 itemElement:Element
  * @hidden
  */
  selectItem: function selectItem(itemElement) {
    if (this.option('selectionMode') === 'none') return;

    var itemIndex = this._editStrategy.getNormalizedIndex(itemElement);

    if (!indexExists(itemIndex)) {
      return;
    }

    var key = this._getKeyByIndex(itemIndex);

    if (this._selection.isItemSelected(key)) {
      return;
    }

    if (this.option('selectionMode') === 'single') {
      this._selection.setSelection([key]);
    } else {
      var selectedItemKeys = this.option('selectedItemKeys') || [];

      this._selection.setSelection([].concat(_toConsumableArray(selectedItemKeys), [key]), [key]);
    }
  },

  /**
  * @name CollectionWidget.unselectItem
  * @publicName unselectItem(itemElement)
  * @param1 itemElement:Element
  * @hidden
  */
  unselectItem: function unselectItem(itemElement) {
    var itemIndex = this._editStrategy.getNormalizedIndex(itemElement);

    if (!indexExists(itemIndex)) {
      return;
    }

    var selectedItemKeys = this._selection.getSelectedItemKeys();

    if (this.option('selectionRequired') && selectedItemKeys.length <= 1) {
      return;
    }

    var key = this._getKeyByIndex(itemIndex);

    if (!this._selection.isItemSelected(key, {
      checkPending: true
    })) {
      return;
    }

    this._selection.deselect([key]);
  },
  _deleteItemElementByIndex: function _deleteItemElementByIndex(index) {
    this._updateSelectionAfterDelete(index);

    this._updateIndicesAfterIndex(index);

    this._editStrategy.deleteItemAtIndex(index);
  },
  _afterItemElementDeleted: function _afterItemElementDeleted($item, deletedActionArgs) {
    var changingOption = this._dataSource ? 'dataSource' : 'items';

    this._simulateOptionChange(changingOption);

    this._itemEventHandler($item, 'onItemDeleted', deletedActionArgs, {
      beforeExecute: function beforeExecute() {
        $item.remove();
      },
      excludeValidators: ['disabled', 'readOnly']
    });

    this._renderEmptyMessage();
  },

  /**
  * @name CollectionWidget.deleteItem
  * @publicName deleteItem(itemElement)
  * @param1 itemElement:Element
  * @return Promise<void>
  * @hidden
  */
  deleteItem: function deleteItem(itemElement) {
    var that = this;
    var deferred = new _deferred.Deferred();

    var $item = this._editStrategy.getItemElement(itemElement);

    var index = this._editStrategy.getNormalizedIndex(itemElement);

    var itemResponseWaitClass = this._itemResponseWaitClass();

    if (indexExists(index)) {
      this._waitDeletingPrepare($item).done(function () {
        $item.addClass(itemResponseWaitClass);

        var deletedActionArgs = that._extendActionArgs($item);

        that._deleteItemFromDS($item).done(function () {
          that._deleteItemElementByIndex(index);

          that._afterItemElementDeleted($item, deletedActionArgs);

          that._tryRefreshLastPage().done(function () {
            deferred.resolveWith(that);
          });
        }).fail(function () {
          $item.removeClass(itemResponseWaitClass);
          deferred.rejectWith(that);
        });
      }).fail(function () {
        deferred.rejectWith(that);
      });
    } else {
      deferred.rejectWith(that);
    }

    return deferred.promise();
  },

  /**
  * @name CollectionWidget.reorderItem
  * @publicName reorderItem(itemElement, toItemElement)
  * @param1 itemElement:Element
  * @param2 toItemElement:Element
  * @return Promise<void>
  * @hidden
  */
  reorderItem: function reorderItem(itemElement, toItemElement) {
    var deferred = new _deferred.Deferred();
    var that = this;
    var strategy = this._editStrategy;
    var $movingItem = strategy.getItemElement(itemElement);
    var $destinationItem = strategy.getItemElement(toItemElement);
    var movingIndex = strategy.getNormalizedIndex(itemElement);
    var destinationIndex = strategy.getNormalizedIndex(toItemElement);
    var changingOption = this._dataSource ? 'dataSource' : 'items';
    var canMoveItems = indexExists(movingIndex) && indexExists(destinationIndex) && movingIndex !== destinationIndex;

    if (canMoveItems) {
      deferred.resolveWith(this);
    } else {
      deferred.rejectWith(this);
    }

    return deferred.promise().done(function () {
      $destinationItem[strategy.itemPlacementFunc(movingIndex, destinationIndex)]($movingItem);
      strategy.moveItemAtIndexToIndex(movingIndex, destinationIndex);

      this._updateIndicesAfterIndex(movingIndex);

      that.option('selectedItems', that._getItemsByKeys(that._selection.getSelectedItemKeys(), that._selection.getSelectedItems()));

      if (changingOption === 'items') {
        that._simulateOptionChange(changingOption);
      }

      that._itemEventHandler($movingItem, 'onItemReordered', {
        fromIndex: strategy.getIndex(movingIndex),
        toIndex: strategy.getIndex(destinationIndex)
      }, {
        excludeValidators: ['disabled', 'readOnly']
      });
    });
  }
});

var _default = CollectionWidget;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _class = _interopRequireDefault(__webpack_require__(11));

var _events_strategy = __webpack_require__(49);

var _iterator = __webpack_require__(4);

var _errors = __webpack_require__(36);

var _utils = __webpack_require__(27);

var _data = __webpack_require__(23);

var _store_helper = _interopRequireDefault(__webpack_require__(74));

var _deferred = __webpack_require__(9);

var _common = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var abstract = _class.default.abstract;
var queryByOptions = _store_helper.default.queryByOptions;
var storeImpl = {};

var Store = _class.default.inherit({
  ctor: function ctor(options) {
    var that = this;
    options = options || {};
    this._eventsStrategy = new _events_strategy.EventsStrategy(this);
    (0, _iterator.each)(['onLoaded', 'onLoading', 'onInserted', 'onInserting', 'onUpdated', 'onUpdating', 'onPush', 'onRemoved', 'onRemoving', 'onModified', 'onModifying'], function (_, optionName) {
      if (optionName in options) {
        that.on(optionName.slice(2).toLowerCase(), options[optionName]);
      }
    });
    this._key = options.key;
    this._errorHandler = options.errorHandler;
    this._useDefaultSearch = true;
  },
  _customLoadOptions: function _customLoadOptions() {
    return null;
  },
  key: function key() {
    return this._key;
  },
  keyOf: function keyOf(obj) {
    if (!this._keyGetter) {
      this._keyGetter = (0, _data.compileGetter)(this.key());
    }

    return this._keyGetter(obj);
  },
  _requireKey: function _requireKey() {
    if (!this.key()) {
      throw _errors.errors.Error('E4005');
    }
  },
  load: function load(options) {
    var that = this;
    options = options || {};

    this._eventsStrategy.fireEvent('loading', [options]);

    return this._withLock(this._loadImpl(options)).done(function (result) {
      that._eventsStrategy.fireEvent('loaded', [result, options]);
    });
  },
  _loadImpl: function _loadImpl(options) {
    return queryByOptions(this.createQuery(options), options).enumerate();
  },
  _withLock: function _withLock(task) {
    var result = new _deferred.Deferred();
    task.done(function () {
      var that = this;
      var args = arguments;

      _utils.processRequestResultLock.promise().done(function () {
        result.resolveWith(that, args);
      });
    }).fail(function () {
      result.rejectWith(this, arguments);
    });
    return result;
  },
  createQuery: abstract,
  totalCount: function totalCount(options) {
    return this._totalCountImpl(options);
  },
  _totalCountImpl: function _totalCountImpl(options) {
    return queryByOptions(this.createQuery(options), options, true).count();
  },
  byKey: function byKey(key, extraOptions) {
    return this._addFailHandlers(this._withLock(this._byKeyImpl(key, extraOptions)));
  },
  _byKeyImpl: abstract,
  insert: function insert(values) {
    var that = this;

    that._eventsStrategy.fireEvent('modifying');

    that._eventsStrategy.fireEvent('inserting', [values]);

    return that._addFailHandlers(that._insertImpl(values).done(function (callbackValues, callbackKey) {
      that._eventsStrategy.fireEvent('inserted', [callbackValues, callbackKey]);

      that._eventsStrategy.fireEvent('modified');
    }));
  },
  _insertImpl: abstract,
  update: function update(key, values) {
    var that = this;

    that._eventsStrategy.fireEvent('modifying');

    that._eventsStrategy.fireEvent('updating', [key, values]);

    return that._addFailHandlers(that._updateImpl(key, values).done(function () {
      that._eventsStrategy.fireEvent('updated', [key, values]);

      that._eventsStrategy.fireEvent('modified');
    }));
  },
  _updateImpl: abstract,
  push: function push(changes) {
    var _this = this;

    var beforePushArgs = {
      changes: changes,
      waitFor: []
    };

    this._eventsStrategy.fireEvent('beforePush', [beforePushArgs]);

    _deferred.when.apply(void 0, _toConsumableArray(beforePushArgs.waitFor)).done(function () {
      _this._pushImpl(changes);

      _this._eventsStrategy.fireEvent('push', [changes]);
    });
  },
  _pushImpl: _common.noop,
  remove: function remove(key) {
    var that = this;

    that._eventsStrategy.fireEvent('modifying');

    that._eventsStrategy.fireEvent('removing', [key]);

    return that._addFailHandlers(that._removeImpl(key).done(function (callbackKey) {
      that._eventsStrategy.fireEvent('removed', [callbackKey]);

      that._eventsStrategy.fireEvent('modified');
    }));
  },
  _removeImpl: abstract,
  _addFailHandlers: function _addFailHandlers(deferred) {
    return deferred.fail(this._errorHandler).fail(_errors.handleError);
  },
  on: function on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);

    return this;
  },
  off: function off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);

    return this;
  }
});

Store.create = function (alias, options) {
  if (!(alias in storeImpl)) {
    throw _errors.errors.Error('E4020', alias);
  }

  return new storeImpl[alias](options);
};

Store.registerClass = function (type, alias) {
  if (alias) {
    storeImpl[alias] = type;
  }

  return type;
};

Store.inherit = function (inheritor) {
  return function (members, alias) {
    var type = inheritor.apply(this, [members]);
    Store.registerClass(type, alias);
    return type;
  };
}(Store.inherit);

var _default = Store;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _element_data = __webpack_require__(25);

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _window = __webpack_require__(7);

var _index = __webpack_require__(6);

var _extend = __webpack_require__(2);

var _ui = _interopRequireDefault(__webpack_require__(42));

var _validation_engine = _interopRequireDefault(__webpack_require__(101));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _validation_message = _interopRequireDefault(__webpack_require__(199));

var _guid = _interopRequireDefault(__webpack_require__(53));

var _common = __webpack_require__(3);

var _dom = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INVALID_MESSAGE_AUTO = 'dx-invalid-message-auto';
var READONLY_STATE_CLASS = 'dx-state-readonly';
var INVALID_CLASS = 'dx-invalid';
var DX_INVALID_BADGE_CLASS = 'dx-show-invalid-badge';
var VALIDATION_TARGET = 'dx-validation-target';
var VALIDATION_STATUS_VALID = 'valid';
var VALIDATION_STATUS_INVALID = 'invalid';
var READONLY_NAMESPACE = 'editorReadOnly';
var ALLOWED_STYLING_MODES = ['outlined', 'filled', 'underlined'];
var VALIDATION_MESSAGE_KEYS_MAP = {
  validationMessageMode: 'mode',
  validationMessageOffset: 'offset',
  validationBoundary: 'boundary'
};

var Editor = _ui.default.inherit({
  ctor: function ctor() {
    this.showValidationMessageTimeout = null;
    this.validationRequest = (0, _callbacks.default)();
    this.callBase.apply(this, arguments);
  },
  _createElement: function _createElement(element) {
    this.callBase(element);
    var $element = this.$element();

    if ($element) {
      (0, _element_data.data)($element[0], VALIDATION_TARGET, this);
    }
  },
  _initOptions: function _initOptions(options) {
    this.callBase.apply(this, arguments);
    this.option(_validation_engine.default.initValidationOptions(options));
  },
  _init: function _init() {
    this.callBase();

    this._options.cache('validationTooltipOptions', this.option('validationTooltipOptions'));

    var $element = this.$element();
    $element.addClass(DX_INVALID_BADGE_CLASS);
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      value: null,

      /**
      * @name EditorOptions.name
      * @type string
      * @default ""
      * @hidden
      */
      name: '',
      onValueChanged: null,
      readOnly: false,
      isValid: true,
      validationError: null,
      validationErrors: null,
      validationStatus: VALIDATION_STATUS_VALID,
      validationMessageMode: 'auto',
      validationBoundary: undefined,
      validationMessageOffset: {
        h: 0,
        v: 0
      },
      validationTooltipOptions: {}
    });
  },
  _attachKeyboardEvents: function _attachKeyboardEvents() {
    if (!this.option('readOnly')) {
      this.callBase();
    }
  },
  _setOptionsByReference: function _setOptionsByReference() {
    this.callBase();
    (0, _extend.extend)(this._optionsByReference, {
      validationError: true
    });
  },
  _createValueChangeAction: function _createValueChangeAction() {
    this._valueChangeAction = this._createActionByOption('onValueChanged', {
      excludeValidators: ['disabled', 'readOnly']
    });
  },
  _suppressValueChangeAction: function _suppressValueChangeAction() {
    this._valueChangeActionSuppressed = true;
  },
  _resumeValueChangeAction: function _resumeValueChangeAction() {
    this._valueChangeActionSuppressed = false;
  },
  _initMarkup: function _initMarkup() {
    this._toggleReadOnlyState();

    this._setSubmitElementName(this.option('name'));

    this.callBase();

    this._renderValidationState();
  },
  _raiseValueChangeAction: function _raiseValueChangeAction(value, previousValue) {
    if (!this._valueChangeAction) {
      this._createValueChangeAction();
    }

    this._valueChangeAction(this._valueChangeArgs(value, previousValue));
  },
  _valueChangeArgs: function _valueChangeArgs(value, previousValue) {
    return {
      value: value,
      previousValue: previousValue,
      event: this._valueChangeEventInstance
    };
  },
  _saveValueChangeEvent: function _saveValueChangeEvent(e) {
    this._valueChangeEventInstance = e;
  },
  _focusInHandler: function _focusInHandler(e) {
    var isValidationMessageShownOnFocus = this.option('validationMessageMode') === 'auto'; // NOTE: The click should be processed before the validation message is shown because
    // it can change the editor's value

    if (this._canValueBeChangedByClick() && isValidationMessageShownOnFocus) {
      var _this$_validationMess;

      // NOTE: Prevent the validation message from showing
      var $validationMessageWrapper = (_this$_validationMess = this._validationMessage) === null || _this$_validationMess === void 0 ? void 0 : _this$_validationMess.$wrapper();
      $validationMessageWrapper === null || $validationMessageWrapper === void 0 ? void 0 : $validationMessageWrapper.removeClass(INVALID_MESSAGE_AUTO);
      clearTimeout(this.showValidationMessageTimeout); // NOTE: Show the validation message after a click changes the value

      this.showValidationMessageTimeout = setTimeout(function () {
        return $validationMessageWrapper === null || $validationMessageWrapper === void 0 ? void 0 : $validationMessageWrapper.addClass(INVALID_MESSAGE_AUTO);
      }, 150);
    }

    return this.callBase(e);
  },
  _canValueBeChangedByClick: function _canValueBeChangedByClick() {
    return false;
  },
  _getStylingModePrefix: function _getStylingModePrefix() {
    return 'dx-editor-';
  },
  _renderStylingMode: function _renderStylingMode() {
    var _this = this;

    var optionName = 'stylingMode';
    var optionValue = this.option(optionName);

    var prefix = this._getStylingModePrefix();

    var allowedStylingClasses = ALLOWED_STYLING_MODES.map(function (mode) {
      return prefix + mode;
    });
    allowedStylingClasses.forEach(function (className) {
      return _this.$element().removeClass(className);
    });
    var stylingModeClass = prefix + optionValue;

    if (allowedStylingClasses.indexOf(stylingModeClass) === -1) {
      var defaultOptionValue = this._getDefaultOptions()[optionName];

      var platformOptionValue = this._convertRulesToOptions(this._defaultOptionsRules())[optionName];

      stylingModeClass = prefix + (platformOptionValue || defaultOptionValue);
    }

    this.$element().addClass(stylingModeClass);
  },
  _getValidationErrors: function _getValidationErrors() {
    var validationErrors = this.option('validationErrors');

    if (!validationErrors && this.option('validationError')) {
      validationErrors = [this.option('validationError')];
    }

    return validationErrors;
  },
  _disposeValidationMessage: function _disposeValidationMessage() {
    if (this._$validationMessage) {
      this._$validationMessage.remove();

      this.setAria('describedby', null);
      this._$validationMessage = undefined;
      this._validationMessage = undefined;
    }
  },
  _toggleValidationClasses: function _toggleValidationClasses(isInvalid) {
    this.$element().toggleClass(INVALID_CLASS, isInvalid);
    this.setAria(VALIDATION_STATUS_INVALID, isInvalid || undefined);
  },
  _renderValidationState: function _renderValidationState() {
    var isValid = this.option('isValid') && this.option('validationStatus') !== VALIDATION_STATUS_INVALID;

    var validationErrors = this._getValidationErrors();

    var $element = this.$element();

    this._toggleValidationClasses(!isValid);

    if (!(0, _window.hasWindow)()) {
      return;
    }

    this._disposeValidationMessage();

    if (!isValid && validationErrors) {
      var _this$option = this.option(),
          validationMessageMode = _this$option.validationMessageMode,
          validationMessageOffset = _this$option.validationMessageOffset,
          validationBoundary = _this$option.validationBoundary,
          rtlEnabled = _this$option.rtlEnabled;

      this._$validationMessage = (0, _renderer.default)('<div>').appendTo($element);
      this.setAria('describedby', 'dx-' + new _guid.default());
      this._validationMessage = new _validation_message.default(this._$validationMessage, (0, _extend.extend)({
        validationErrors: validationErrors,
        rtlEnabled: rtlEnabled,
        target: this._getValidationMessageTarget(),
        container: $element,
        mode: validationMessageMode,
        positionRequest: 'below',
        offset: validationMessageOffset,
        boundary: validationBoundary,
        describedElement: this._focusTarget()
      }, this._options.cache('validationTooltipOptions')));

      this._bindInnerWidgetOptions(this._validationMessage, 'validationTooltipOptions');
    }
  },
  _getValidationMessageTarget: function _getValidationMessageTarget() {
    return this.$element();
  },
  _toggleReadOnlyState: function _toggleReadOnlyState() {
    var readOnly = this.option('readOnly');

    this._toggleBackspaceHandler(readOnly);

    this.$element().toggleClass(READONLY_STATE_CLASS, !!readOnly);
    this.setAria('readonly', readOnly || undefined);
  },
  _toggleBackspaceHandler: function _toggleBackspaceHandler(isReadOnly) {
    var $eventTarget = this._keyboardEventBindingTarget();

    var eventName = (0, _index.addNamespace)('keydown', READONLY_NAMESPACE);

    _events_engine.default.off($eventTarget, eventName);

    if (isReadOnly) {
      _events_engine.default.on($eventTarget, eventName, function (e) {
        if ((0, _index.normalizeKeyName)(e) === 'backspace') {
          e.preventDefault();
        }
      });
    }
  },
  _dispose: function _dispose() {
    var element = this.$element()[0];
    (0, _element_data.data)(element, VALIDATION_TARGET, null);
    clearTimeout(this.showValidationMessageTimeout);

    this._disposeValidationMessage();

    this.callBase();
  },
  _setSubmitElementName: function _setSubmitElementName(name) {
    var $submitElement = this._getSubmitElement();

    if (!$submitElement) {
      return;
    }

    if (name.length > 0) {
      $submitElement.attr('name', name);
    } else {
      $submitElement.removeAttr('name');
    }
  },
  _getSubmitElement: function _getSubmitElement() {
    return null;
  },
  _setValidationMessageOption: function _setValidationMessageOption(_ref) {
    var _this$_validationMess2;

    var name = _ref.name,
        value = _ref.value;
    var optionKey = VALIDATION_MESSAGE_KEYS_MAP[name] ? VALIDATION_MESSAGE_KEYS_MAP[name] : name;
    (_this$_validationMess2 = this._validationMessage) === null || _this$_validationMess2 === void 0 ? void 0 : _this$_validationMess2.option(optionKey, value);
  },
  _hasActiveElement: _common.noop,
  _optionChanged: function _optionChanged(args) {
    var _this$_validationMess3;

    switch (args.name) {
      case 'onValueChanged':
        this._createValueChangeAction();

        break;

      case 'readOnly':
        this._toggleReadOnlyState();

        this._refreshFocusState();

        break;

      case 'value':
        if (args.value != args.previousValue) {
          // eslint-disable-line eqeqeq
          this.validationRequest.fire({
            value: args.value,
            editor: this
          });
        }

        if (!this._valueChangeActionSuppressed) {
          this._raiseValueChangeAction(args.value, args.previousValue);

          this._saveValueChangeEvent(undefined);
        }

        break;

      case 'width':
        this.callBase(args);
        (_this$_validationMess3 = this._validationMessage) === null || _this$_validationMess3 === void 0 ? void 0 : _this$_validationMess3.updateMaxWidth();
        break;

      case 'name':
        this._setSubmitElementName(args.value);

        break;

      case 'isValid':
      case 'validationError':
      case 'validationErrors':
      case 'validationStatus':
        this.option(_validation_engine.default.synchronizeValidationOptions(args, this.option()));

        this._renderValidationState();

        break;

      case 'validationBoundary':
      case 'validationMessageMode':
      case 'validationMessageOffset':
        this._setValidationMessageOption(args);

        break;

      case 'rtlEnabled':
        this._setValidationMessageOption(args);

        this.callBase(args);
        break;

      case 'validationTooltipOptions':
        this._innerWidgetOptionChanged(this._validationMessage, args);

        break;

      default:
        this.callBase(args);
    }
  },
  blur: function blur() {
    if (this._hasActiveElement()) {
      (0, _dom.resetActiveElement)();
    }
  },
  reset: function reset() {
    var defaultOptions = this._getDefaultOptions();

    this.option('value', defaultOptions.value);
  }
});

Editor.isEditor = function (instance) {
  return instance instanceof Editor;
};

var _default = Editor;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _console = __webpack_require__(86);

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (0, _dependency_injector.default)({
  isWrapped: function isWrapped() {
    return false;
  },
  isWritableWrapped: function isWritableWrapped() {
    return false;
  },
  wrap: function wrap(value) {
    return value;
  },
  unwrap: function unwrap(value) {
    return value;
  },
  assign: function assign() {
    _console.logger.error('Method \'assign\' should not be used for not wrapped variables. Use \'isWrapped\' method for ensuring.');
  }
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.debug = exports.logger = void 0;

var _type = __webpack_require__(1);

/* global console */

/* eslint no-console: off */
var noop = function noop() {};

var getConsoleMethod = function getConsoleMethod(method) {
  if (typeof console === 'undefined' || !(0, _type.isFunction)(console[method])) {
    return noop;
  }

  return console[method].bind(console);
};

var logger = {
  info: getConsoleMethod('info'),
  warn: getConsoleMethod('warn'),
  error: getConsoleMethod('error')
};
exports.logger = logger;

var debug = function () {
  function assert(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }

  function assertParam(parameter, message) {
    assert(parameter !== null && parameter !== undefined, message);
  }

  return {
    assert: assert,
    assertParam: assertParam
  };
}();

exports.debug = debug;

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _memorized_callbacks = _interopRequireDefault(__webpack_require__(72));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new _memorized_callbacks.default();

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.parseHeight = exports.getVisibleHeight = exports.getVerticalOffsets = exports.addOffsetToMinHeight = exports.addOffsetToMaxHeight = exports.getElementBoxParams = exports.getSize = void 0;

var _window = __webpack_require__(7);

var _type = __webpack_require__(1);

var window = (0, _window.getWindow)();
var SPECIAL_HEIGHT_VALUES = ['auto', 'none', 'inherit', 'initial'];

var getSizeByStyles = function getSizeByStyles(elementStyles, styles) {
  var result = 0;
  styles.forEach(function (style) {
    result += parseFloat(elementStyles[style]) || 0;
  });
  return result;
};

var getElementBoxParams = function getElementBoxParams(name, elementStyles) {
  var beforeName = name === 'width' ? 'Left' : 'Top';
  var afterName = name === 'width' ? 'Right' : 'Bottom';
  return {
    padding: getSizeByStyles(elementStyles, ['padding' + beforeName, 'padding' + afterName]),
    border: getSizeByStyles(elementStyles, ['border' + beforeName + 'Width', 'border' + afterName + 'Width']),
    margin: getSizeByStyles(elementStyles, ['margin' + beforeName, 'margin' + afterName])
  };
};

exports.getElementBoxParams = getElementBoxParams;

var getBoxSizingOffset = function getBoxSizingOffset(name, elementStyles, boxParams) {
  var size = elementStyles[name];

  if (elementStyles.boxSizing === 'border-box' && size.length && size[size.length - 1] !== '%') {
    return boxParams.border + boxParams.padding;
  }

  return 0;
};

var getSize = function getSize(element, name, include) {
  var elementStyles = window.getComputedStyle(element);
  var boxParams = getElementBoxParams(name, elementStyles);
  var clientRect = element.getClientRects().length;
  var boundingClientRect = element.getBoundingClientRect()[name];
  var result = clientRect ? boundingClientRect : 0;

  if (result <= 0) {
    result = parseFloat(elementStyles[name] || element.style[name]) || 0;
    result -= getBoxSizingOffset(name, elementStyles, boxParams);
  } else {
    result -= boxParams.padding + boxParams.border;
  }

  if (include.paddings) {
    result += boxParams.padding;
  }

  if (include.borders) {
    result += boxParams.border;
  }

  if (include.margins) {
    result += boxParams.margin;
  }

  return result;
};

exports.getSize = getSize;

var getContainerHeight = function getContainerHeight(container) {
  return (0, _type.isWindow)(container) ? container.innerHeight : container.offsetHeight;
};

var parseHeight = function parseHeight(value, container) {
  if (value.indexOf('px') > 0) {
    value = parseInt(value.replace('px', ''));
  } else if (value.indexOf('%') > 0) {
    value = parseInt(value.replace('%', '')) * getContainerHeight(container) / 100;
  } else if (!isNaN(value)) {
    value = parseInt(value);
  }

  return value;
};

exports.parseHeight = parseHeight;

var getHeightWithOffset = function getHeightWithOffset(value, offset, container) {
  if (!value) {
    return null;
  }

  if (SPECIAL_HEIGHT_VALUES.indexOf(value) > -1) {
    return offset ? null : value;
  }

  if ((0, _type.isString)(value)) {
    value = parseHeight(value, container);
  }

  if ((0, _type.isNumeric)(value)) {
    return Math.max(0, value + offset);
  }

  var operationString = offset < 0 ? ' - ' : ' ';
  return 'calc(' + value + operationString + Math.abs(offset) + 'px)';
};

var addOffsetToMaxHeight = function addOffsetToMaxHeight(value, offset, container) {
  var maxHeight = getHeightWithOffset(value, offset, container);
  return maxHeight !== null ? maxHeight : 'none';
};

exports.addOffsetToMaxHeight = addOffsetToMaxHeight;

var addOffsetToMinHeight = function addOffsetToMinHeight(value, offset, container) {
  var minHeight = getHeightWithOffset(value, offset, container);
  return minHeight !== null ? minHeight : 0;
};

exports.addOffsetToMinHeight = addOffsetToMinHeight;

var getVerticalOffsets = function getVerticalOffsets(element, withMargins) {
  if (!element) {
    return 0;
  }

  var boxParams = getElementBoxParams('height', window.getComputedStyle(element));
  return boxParams.padding + boxParams.border + (withMargins ? boxParams.margin : 0);
};

exports.getVerticalOffsets = getVerticalOffsets;

var getVisibleHeight = function getVisibleHeight(element) {
  if (element) {
    var boundingClientRect = element.getBoundingClientRect();

    if (boundingClientRect.height) {
      return boundingClientRect.height;
    }
  }

  return 0;
};

exports.getVisibleHeight = getVisibleHeight;

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.isTablePart = exports.parseHTML = void 0;

var _array = __webpack_require__(12);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isTagName = /<([a-z][^/\0>\x20\t\r\n\f]+)/i;
var tagWrappers = {
  default: {
    tagsCount: 0,
    startTags: '',
    endTags: ''
  },
  thead: {
    tagsCount: 1,
    startTags: '<table>',
    endTags: '</table>'
  },
  td: {
    tagsCount: 3,
    startTags: '<table><tbody><tr>',
    endTags: '</tr></tbody></table>'
  },
  col: {
    tagsCount: 2,
    startTags: '<table><colgroup>',
    endTags: '</colgroup></table>'
  },
  tr: {
    tagsCount: 2,
    startTags: '<table><tbody>',
    endTags: '</tbody></table>'
  }
};
tagWrappers.tbody = tagWrappers.colgroup = tagWrappers.caption = tagWrappers.tfoot = tagWrappers.thead;
tagWrappers.th = tagWrappers.td;

var parseHTML = function parseHTML(html) {
  if (typeof html !== 'string') {
    return null;
  }

  var fragment = _dom_adapter.default.createDocumentFragment();

  var container = fragment.appendChild(_dom_adapter.default.createElement('div'));
  var tags = isTagName.exec(html);
  var firstRootTag = tags && tags[1].toLowerCase();
  var tagWrapper = tagWrappers[firstRootTag] || tagWrappers.default;
  container.innerHTML = tagWrapper.startTags + html + tagWrapper.endTags;

  for (var i = 0; i < tagWrapper.tagsCount; i++) {
    container = container.lastChild;
  }

  return (0, _array.merge)([], container.childNodes);
};

exports.parseHTML = parseHTML;

var isTablePart = function isTablePart(html) {
  var tags = isTagName.exec(html);
  return tags && tags[1] in tagWrappers;
};

exports.isTablePart = isTablePart;

/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _array = __webpack_require__(12);

var _uiCollection_widgetEdit = _interopRequireDefault(__webpack_require__(135));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var PlainEditStrategy = _uiCollection_widgetEdit.default.inherit({
  _getPlainItems: function _getPlainItems() {
    return this._collectionWidget.option('items') || [];
  },
  getIndexByItemData: function getIndexByItemData(itemData) {
    var keyOf = this._collectionWidget.keyOf.bind(this._collectionWidget);

    if (keyOf) {
      return this.getIndexByKey(keyOf(itemData));
    } else {
      return (0, _array.inArray)(itemData, this._getPlainItems());
    }
  },
  getItemDataByIndex: function getItemDataByIndex(index) {
    return this._getPlainItems()[index];
  },
  deleteItemAtIndex: function deleteItemAtIndex(index) {
    this._getPlainItems().splice(index, 1);
  },
  itemsGetter: function itemsGetter() {
    return this._getPlainItems();
  },
  getKeysByItems: function getKeysByItems(items) {
    var keyOf = this._collectionWidget.keyOf.bind(this._collectionWidget);

    var result = items;

    if (keyOf) {
      result = [];

      for (var i = 0; i < items.length; i++) {
        result.push(keyOf(items[i]));
      }
    }

    return result;
  },
  getIndexByKey: function getIndexByKey(key) {
    var cache = this._cache;
    var keys = cache && cache.keys || this.getKeysByItems(this._getPlainItems());

    if (cache && !cache.keys) {
      cache.keys = keys;
    }

    if (_typeof(key) === 'object') {
      for (var i = 0, length = keys.length; i < length; i++) {
        if (this._equalKeys(key, keys[i])) return i;
      }
    } else {
      return keys.indexOf(key);
    }

    return -1;
  },
  getItemsByKeys: function getItemsByKeys(keys, items) {
    return (items || keys).slice();
  },
  moveItemAtIndexToIndex: function moveItemAtIndexToIndex(movingIndex, destinationIndex) {
    var items = this._getPlainItems();

    var movedItemData = items[movingIndex];
    items.splice(movingIndex, 1);
    items.splice(destinationIndex, 0, movedItemData);
  },
  _isItemIndex: function _isItemIndex(index) {
    return typeof index === 'number' && Math.round(index) === index;
  },
  _getNormalizedItemIndex: function _getNormalizedItemIndex(itemElement) {
    return this._collectionWidget._itemElements().index(itemElement);
  },
  _normalizeItemIndex: function _normalizeItemIndex(index) {
    return index;
  },
  _denormalizeItemIndex: function _denormalizeItemIndex(index) {
    return index;
  },
  _getItemByNormalizedIndex: function _getItemByNormalizedIndex(index) {
    return index > -1 ? this._collectionWidget._itemElements().eq(index) : null;
  },
  _itemsFromSameParent: function _itemsFromSameParent() {
    return true;
  }
});

var _default = PlainEditStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

var _parent_locales = _interopRequireDefault(__webpack_require__(136));

var _parentLocale = _interopRequireDefault(__webpack_require__(137));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_LOCALE = 'en';

var _default = (0, _dependency_injector.default)({
  locale: function () {
    var currentLocale = DEFAULT_LOCALE;
    return function (locale) {
      if (!locale) {
        return currentLocale;
      }

      currentLocale = locale;
    };
  }(),
  getValueByClosestLocale: function getValueByClosestLocale(getter) {
    var locale = this.locale();
    var value = getter(locale);
    var isRootLocale;

    while (!value && !isRootLocale) {
      locale = (0, _parentLocale.default)(_parent_locales.default, locale);

      if (locale) {
        value = getter(locale);
      } else {
        isRootLocale = true;
      }
    }

    if (value === undefined && locale !== DEFAULT_LOCALE) {
      return getter(DEFAULT_LOCALE);
    }

    return value;
  }
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.setScrollView = setScrollView;
exports.ListBase = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _icon = __webpack_require__(93);

var _element = __webpack_require__(20);

var _iterator = __webpack_require__(4);

var _data = __webpack_require__(23);

var _extend = __webpack_require__(2);

var _fx = _interopRequireDefault(__webpack_require__(37));

var _click = __webpack_require__(30);

var _swipe = __webpack_require__(99);

var _support = __webpack_require__(34);

var _message = _interopRequireDefault(__webpack_require__(17));

var _utils = __webpack_require__(59);

var _devices = _interopRequireDefault(__webpack_require__(10));

var _item = _interopRequireDefault(__webpack_require__(145));

var _button = _interopRequireDefault(__webpack_require__(41));

var _index = __webpack_require__(6);

var _themes = __webpack_require__(31);

var _window = __webpack_require__(7);

var _scroll_view = _interopRequireDefault(__webpack_require__(164));

var _uiScrollable = __webpack_require__(111);

var _uiCollection_widget = _interopRequireDefault(__webpack_require__(176));

var _bindable_template = __webpack_require__(68);

var _deferred = __webpack_require__(9);

var _grouped_data_converter_mixin = _interopRequireDefault(__webpack_require__(189));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIST_CLASS = 'dx-list';
var LIST_ITEM_CLASS = 'dx-list-item';
var LIST_ITEM_SELECTOR = '.' + LIST_ITEM_CLASS;
var LIST_ITEM_ICON_CONTAINER_CLASS = 'dx-list-item-icon-container';
var LIST_ITEM_ICON_CLASS = 'dx-list-item-icon';
var LIST_GROUP_CLASS = 'dx-list-group';
var LIST_GROUP_HEADER_CLASS = 'dx-list-group-header';
var LIST_GROUP_BODY_CLASS = 'dx-list-group-body';
var LIST_COLLAPSIBLE_GROUPS_CLASS = 'dx-list-collapsible-groups';
var LIST_GROUP_COLLAPSED_CLASS = 'dx-list-group-collapsed';
var LIST_GROUP_HEADER_INDICATOR_CLASS = 'dx-list-group-header-indicator';
var LIST_HAS_NEXT_CLASS = 'dx-has-next';
var LIST_NEXT_BUTTON_CLASS = 'dx-list-next-button';
var WRAP_ITEM_TEXT_CLASS = 'dx-wrap-item-text';
var SELECT_ALL_ITEM_SELECTOR = '.dx-list-select-all';
var LIST_ITEM_DATA_KEY = 'dxListItemData';
var LIST_FEEDBACK_SHOW_TIMEOUT = 70;
var groupItemsGetter = (0, _data.compileGetter)('items');

var _scrollView;

var ListBase = _uiCollection_widget.default.inherit({
  _activeStateUnit: [LIST_ITEM_SELECTOR, SELECT_ALL_ITEM_SELECTOR].join(','),
  _supportedKeys: function _supportedKeys() {
    var that = this;

    var moveFocusPerPage = function moveFocusPerPage(direction) {
      var $item = getEdgeVisibleItem(direction);
      var isFocusedItem = $item.is(that.option('focusedElement'));

      if (isFocusedItem) {
        scrollListTo($item, direction);
        $item = getEdgeVisibleItem(direction);
      }

      that.option('focusedElement', (0, _element.getPublicElement)($item));
      that.scrollToItem($item);
    };

    function getEdgeVisibleItem(direction) {
      var scrollTop = that.scrollTop();
      var containerHeight = that.$element().height();
      var $item = (0, _renderer.default)(that.option('focusedElement'));
      var isItemVisible = true;

      if (!$item.length) {
        return (0, _renderer.default)();
      }

      while (isItemVisible) {
        var $nextItem = $item[direction]();

        if (!$nextItem.length) {
          break;
        }

        var nextItemLocation = $nextItem.position().top + $nextItem.outerHeight() / 2;
        isItemVisible = nextItemLocation < containerHeight + scrollTop && nextItemLocation > scrollTop;

        if (isItemVisible) {
          $item = $nextItem;
        }
      }

      return $item;
    }

    function scrollListTo($item, direction) {
      var resultPosition = $item.position().top;

      if (direction === 'prev') {
        resultPosition = $item.position().top - that.$element().height() + $item.outerHeight();
      }

      that.scrollTo(resultPosition);
    }

    return (0, _extend.extend)(this.callBase(), {
      leftArrow: _common.noop,
      rightArrow: _common.noop,
      pageUp: function pageUp() {
        moveFocusPerPage('prev');
        return false;
      },
      pageDown: function pageDown() {
        moveFocusPerPage('next');
        return false;
      }
    });
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      hoverStateEnabled: true,
      pullRefreshEnabled: false,
      scrollingEnabled: true,
      showScrollbar: 'onScroll',
      useNativeScrolling: true,
      bounceEnabled: true,
      scrollByContent: true,
      scrollByThumb: false,
      pullingDownText: _message.default.format('dxList-pullingDownText'),
      pulledDownText: _message.default.format('dxList-pulledDownText'),
      refreshingText: _message.default.format('dxList-refreshingText'),
      pageLoadingText: _message.default.format('dxList-pageLoadingText'),
      onScroll: null,
      onPullRefresh: null,
      onPageLoading: null,
      pageLoadMode: 'scrollBottom',
      nextButtonText: _message.default.format('dxList-nextButtonText'),
      onItemSwipe: null,
      grouped: false,
      onGroupRendered: null,
      collapsibleGroups: false,
      groupTemplate: 'group',
      indicateLoading: true,

      /**
      * @name dxListOptions.selectedIndex
      * @type number
      * @default -1
      * @hidden
      */

      /**
      * @name dxListOptions.selectedItem
      * @hidden
      */
      activeStateEnabled: true,
      _itemAttributes: {
        'role': 'option'
      },
      _listAttributes: {
        'role': 'listbox'
      },
      useInkRipple: false,
      wrapItemText: false,
      _swipeEnabled: true,
      _revertPageOnEmptyLoad: false,
      showChevronExpr: function showChevronExpr(data) {
        return data ? data.showChevron : undefined;
      },
      badgeExpr: function badgeExpr(data) {
        return data ? data.badge : undefined;
      }
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    var themeName = (0, _themes.current)();
    return this.callBase().concat((0, _uiScrollable.deviceDependentOptions)(), [{
      device: function device() {
        return !_support.nativeScrolling;
      },
      options: {
        useNativeScrolling: false
      }
    }, {
      device: function device(_device) {
        return !_support.nativeScrolling && !_devices.default.isSimulator() && _devices.default.real().deviceType === 'desktop' && _device.platform === 'generic';
      },
      options: {
        showScrollbar: 'onHover',
        pageLoadMode: 'nextButton'
      }
    }, {
      device: function device() {
        return _devices.default.real().deviceType === 'desktop' && !_devices.default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }, {
      device: function device() {
        return (0, _themes.isMaterial)(themeName);
      },
      options: {
        pullingDownText: '',
        pulledDownText: '',
        refreshingText: '',
        pageLoadingText: '',
        useInkRipple: true
      }
    }]);
  },
  _visibilityChanged: function _visibilityChanged(visible) {
    if (visible) {
      this._updateLoadingState(true);
    }
  },
  _itemClass: function _itemClass() {
    return LIST_ITEM_CLASS;
  },
  _itemDataKey: function _itemDataKey() {
    return LIST_ITEM_DATA_KEY;
  },
  _itemContainer: function _itemContainer() {
    return this._$container;
  },
  _saveSelectionChangeEvent: function _saveSelectionChangeEvent(e) {
    this._selectionChangeEventInstance = e;
  },
  _getSelectionChangeEvent: function _getSelectionChangeEvent() {
    return this._selectionChangeEventInstance;
  },
  _refreshItemElements: function _refreshItemElements() {
    if (!this.option('grouped')) {
      this._itemElementsCache = this._itemContainer().children(this._itemSelector());
    } else {
      this._itemElementsCache = this._itemContainer().children('.' + LIST_GROUP_CLASS).children('.' + LIST_GROUP_BODY_CLASS).children(this._itemSelector());
    }
  },
  _modifyByChanges: function _modifyByChanges() {
    this.callBase.apply(this, arguments);

    this._refreshItemElements();

    this._updateLoadingState(true);
  },
  reorderItem: function reorderItem(itemElement, toItemElement) {
    var promise = this.callBase(itemElement, toItemElement);
    return promise.done(function () {
      this._refreshItemElements();
    });
  },
  deleteItem: function deleteItem(itemElement) {
    var promise = this.callBase(itemElement);
    return promise.done(function () {
      this._refreshItemElements();
    });
  },
  _itemElements: function _itemElements() {
    return this._itemElementsCache;
  },
  _itemSelectHandler: function _itemSelectHandler(e) {
    if (this.option('selectionMode') === 'single' && this.isItemSelected(e.currentTarget)) {
      return;
    }

    this.callBase(e);
  },
  _allowDynamicItemsAppend: function _allowDynamicItemsAppend() {
    return true;
  },
  _resetDataSourcePageIndex: function _resetDataSourcePageIndex() {
    var currentDataSource = this.getDataSource();

    if (currentDataSource && currentDataSource.pageIndex() !== 0) {
      currentDataSource.pageIndex(0);
      currentDataSource.load();
    }
  },
  _init: function _init() {
    this.callBase();

    this._resetDataSourcePageIndex();

    this._$container = this.$element();

    this._initScrollView();

    this._feedbackShowTimeout = LIST_FEEDBACK_SHOW_TIMEOUT;

    this._createGroupRenderAction();
  },
  _scrollBottomMode: function _scrollBottomMode() {
    return this.option('pageLoadMode') === 'scrollBottom';
  },
  _nextButtonMode: function _nextButtonMode() {
    return this.option('pageLoadMode') === 'nextButton';
  },
  _dataSourceOptions: function _dataSourceOptions() {
    var scrollBottom = this._scrollBottomMode();

    var nextButton = this._nextButtonMode();

    return (0, _extend.extend)(this.callBase(), {
      paginate: (0, _common.ensureDefined)(scrollBottom || nextButton, true)
    });
  },
  _getGroupedOption: function _getGroupedOption() {
    return this.option('grouped');
  },
  _getGroupContainerByIndex: function _getGroupContainerByIndex(groupIndex) {
    return this._itemContainer().find(".".concat(LIST_GROUP_CLASS)).eq(groupIndex).find(".".concat(LIST_GROUP_BODY_CLASS));
  },
  _dataSourceFromUrlLoadMode: function _dataSourceFromUrlLoadMode() {
    return 'raw';
  },
  _initScrollView: function _initScrollView() {
    var scrollingEnabled = this.option('scrollingEnabled');
    var pullRefreshEnabled = scrollingEnabled && this.option('pullRefreshEnabled');
    var autoPagingEnabled = scrollingEnabled && this._scrollBottomMode() && !!this._dataSource;
    this._scrollView = this._createComponent(this.$element(), getScrollView(), {
      disabled: this.option('disabled') || !scrollingEnabled,
      onScroll: this._scrollHandler.bind(this),
      onPullDown: pullRefreshEnabled ? this._pullDownHandler.bind(this) : null,
      onReachBottom: autoPagingEnabled ? this._scrollBottomHandler.bind(this) : null,
      showScrollbar: this.option('showScrollbar'),
      useNative: this.option('useNativeScrolling'),
      bounceEnabled: this.option('bounceEnabled'),
      scrollByContent: this.option('scrollByContent'),
      scrollByThumb: this.option('scrollByThumb'),
      pullingDownText: this.option('pullingDownText'),
      pulledDownText: this.option('pulledDownText'),
      refreshingText: this.option('refreshingText'),
      reachBottomText: this.option('pageLoadingText'),
      useKeyboard: false
    });
    this._$container = (0, _renderer.default)(this._scrollView.content());

    if (this.option('wrapItemText')) {
      this._$container.addClass(WRAP_ITEM_TEXT_CLASS);
    }

    this._createScrollViewActions();
  },
  _createScrollViewActions: function _createScrollViewActions() {
    this._scrollAction = this._createActionByOption('onScroll');
    this._pullRefreshAction = this._createActionByOption('onPullRefresh');
    this._pageLoadingAction = this._createActionByOption('onPageLoading');
  },
  _scrollHandler: function _scrollHandler(e) {
    this._scrollAction && this._scrollAction(e);
  },
  _initTemplates: function _initTemplates() {
    this._templateManager.addDefaultTemplates({
      group: new _bindable_template.BindableTemplate(function ($container, data) {
        if ((0, _type.isPlainObject)(data)) {
          if (data.key) {
            $container.text(data.key);
          }
        } else {
          $container.text(String(data));
        }
      }, ['key'], this.option('integrationOptions.watchMethod'))
    });

    this.callBase();
  },
  _prepareDefaultItemTemplate: function _prepareDefaultItemTemplate(data, $container) {
    this.callBase(data, $container);

    if (data.icon) {
      var $icon = (0, _icon.getImageContainer)(data.icon).addClass(LIST_ITEM_ICON_CLASS);
      var $iconContainer = (0, _renderer.default)('<div>').addClass(LIST_ITEM_ICON_CONTAINER_CLASS);
      $iconContainer.append($icon);
      $container.prepend($iconContainer);
    }
  },
  _getBindableFields: function _getBindableFields() {
    return ['text', 'html', 'icon'];
  },
  _updateLoadingState: function _updateLoadingState(tryLoadMore) {
    var isDataLoaded = !tryLoadMore || this._isLastPage();

    var scrollBottomMode = this._scrollBottomMode();

    var stopLoading = isDataLoaded || !scrollBottomMode;
    var hideLoadIndicator = stopLoading && !this._isDataSourceLoading();

    if (stopLoading || this._scrollViewIsFull()) {
      this._scrollView.release(hideLoadIndicator);

      this._toggleNextButton(this._shouldRenderNextButton() && !this._isLastPage());

      this._loadIndicationSuppressed(false);
    } else {
      this._infiniteDataLoading();
    }
  },
  _shouldRenderNextButton: function _shouldRenderNextButton() {
    return this._nextButtonMode() && this._dataSource && this._dataSource.isLoaded();
  },
  _isDataSourceFirstLoadCompleted: function _isDataSourceFirstLoadCompleted(newValue) {
    if ((0, _type.isDefined)(newValue)) {
      this._isFirstLoadCompleted = newValue;
    }

    return this._isFirstLoadCompleted;
  },
  _dataSourceLoadingChangedHandler: function _dataSourceLoadingChangedHandler(isLoading) {
    if (this._loadIndicationSuppressed()) {
      return;
    }

    if (isLoading && this.option('indicateLoading')) {
      this._showLoadingIndicatorTimer = setTimeout(function () {
        var isEmpty = !this._itemElements().length;

        var shouldIndicateLoading = !isEmpty || this._isDataSourceFirstLoadCompleted();

        if (shouldIndicateLoading) {
          var _this$_scrollView;

          (_this$_scrollView = this._scrollView) === null || _this$_scrollView === void 0 ? void 0 : _this$_scrollView.startLoading();
        }
      }.bind(this));
    } else {
      clearTimeout(this._showLoadingIndicatorTimer);
      this._scrollView && this._scrollView.finishLoading();
    }

    if (!isLoading) {
      this._isDataSourceFirstLoadCompleted(false);
    }
  },
  _dataSourceChangedHandler: function _dataSourceChangedHandler() {
    if (!this._shouldAppendItems() && (0, _window.hasWindow)()) {
      this._scrollView && this._scrollView.scrollTo(0);
    }

    this.callBase.apply(this, arguments);

    this._isDataSourceFirstLoadCompleted(true);
  },
  _refreshContent: function _refreshContent() {
    this._prepareContent();

    this._fireContentReadyAction();
  },
  _hideLoadingIfLoadIndicationOff: function _hideLoadingIfLoadIndicationOff() {
    if (!this.option('indicateLoading')) {
      this._dataSourceLoadingChangedHandler(false);
    }
  },
  _loadIndicationSuppressed: function _loadIndicationSuppressed(value) {
    if (!arguments.length) {
      return this._isLoadIndicationSuppressed;
    }

    this._isLoadIndicationSuppressed = value;
  },
  _scrollViewIsFull: function _scrollViewIsFull() {
    return !this._scrollView || this._scrollView.isFull();
  },
  _pullDownHandler: function _pullDownHandler(e) {
    this._pullRefreshAction(e);

    if (this._dataSource && !this._isDataSourceLoading()) {
      this._clearSelectedItems();

      this._dataSource.pageIndex(0);

      this._dataSource.reload();
    } else {
      this._updateLoadingState();
    }
  },
  _infiniteDataLoading: function _infiniteDataLoading() {
    var _this = this;

    var isElementVisible = this.$element().is(':visible');

    if (isElementVisible && !this._scrollViewIsFull() && !this._isDataSourceLoading() && !this._isLastPage()) {
      clearTimeout(this._loadNextPageTimer);
      this._loadNextPageTimer = setTimeout(function () {
        _this._loadNextPage().done(_this._setPreviousPageIfNewIsEmpty.bind(_this));
      });
    }
  },
  _setPreviousPageIfNewIsEmpty: function _setPreviousPageIfNewIsEmpty(result) {
    if (this.option('_revertPageOnEmptyLoad')) {
      var dataSource = this.getDataSource();
      var pageIndex = dataSource === null || dataSource === void 0 ? void 0 : dataSource.pageIndex();

      if ((result === null || result === void 0 ? void 0 : result.length) === 0 && pageIndex > 0) {
        this._fireContentReadyAction();

        dataSource.pageIndex(pageIndex - 1);
      }
    }
  },
  _scrollBottomHandler: function _scrollBottomHandler(e) {
    this._pageLoadingAction(e);

    if (!this._isDataSourceLoading() && !this._isLastPage()) {
      this._loadNextPage();
    } else {
      this._updateLoadingState();
    }
  },
  _renderItems: function _renderItems(items) {
    if (this.option('grouped')) {
      (0, _iterator.each)(items, this._renderGroup.bind(this));

      this._attachGroupCollapseEvent();

      this._renderEmptyMessage();

      if ((0, _themes.isMaterial)()) {
        this.attachGroupHeaderInkRippleEvents();
      }
    } else {
      this.callBase.apply(this, arguments);
    }

    this._refreshItemElements();

    this._updateLoadingState(true);
  },
  _attachGroupCollapseEvent: function _attachGroupCollapseEvent() {
    var eventName = (0, _index.addNamespace)(_click.name, this.NAME);
    var selector = '.' + LIST_GROUP_HEADER_CLASS;
    var $element = this.$element();
    var collapsibleGroups = this.option('collapsibleGroups');
    $element.toggleClass(LIST_COLLAPSIBLE_GROUPS_CLASS, collapsibleGroups);

    _events_engine.default.off($element, eventName, selector);

    if (collapsibleGroups) {
      _events_engine.default.on($element, eventName, selector, function (e) {
        this._createAction(function (e) {
          var $group = (0, _renderer.default)(e.event.currentTarget).parent();

          this._collapseGroupHandler($group);

          if (this.option('focusStateEnabled')) {
            this.option('focusedElement', (0, _element.getPublicElement)($group.find('.' + LIST_ITEM_CLASS).eq(0)));
          }
        }.bind(this), {
          validatingTargetName: 'element'
        })({
          event: e
        });
      }.bind(this));
    }
  },
  _collapseGroupHandler: function _collapseGroupHandler($group, toggle) {
    var deferred = new _deferred.Deferred();

    if ($group.hasClass(LIST_GROUP_COLLAPSED_CLASS) === toggle) {
      return deferred.resolve();
    }

    var $groupBody = $group.children('.' + LIST_GROUP_BODY_CLASS);
    var startHeight = $groupBody.outerHeight();
    var endHeight = startHeight === 0 ? $groupBody.height('auto').outerHeight() : 0;
    $group.toggleClass(LIST_GROUP_COLLAPSED_CLASS, toggle);

    _fx.default.animate($groupBody, {
      type: 'custom',
      from: {
        height: startHeight
      },
      to: {
        height: endHeight
      },
      duration: 200,
      complete: function () {
        this.updateDimensions();

        this._updateLoadingState();

        deferred.resolve();
      }.bind(this)
    });

    return deferred.promise();
  },
  _dataSourceLoadErrorHandler: function _dataSourceLoadErrorHandler() {
    this._forgetNextPageLoading();

    if (this._initialized) {
      this._renderEmptyMessage();

      this._updateLoadingState();
    }
  },
  _initMarkup: function _initMarkup() {
    this._itemElementsCache = (0, _renderer.default)();
    this.$element().addClass(LIST_CLASS);
    this.callBase();
    this.option('useInkRipple') && this._renderInkRipple();
    this.setAria('role', this.option('_listAttributes').role);
  },
  _renderInkRipple: function _renderInkRipple() {
    this._inkRipple = (0, _utils.render)();
  },
  _toggleActiveState: function _toggleActiveState($element, value, e) {
    this.callBase.apply(this, arguments);
    var that = this;

    if (!this._inkRipple) {
      return;
    }

    var config = {
      element: $element,
      event: e
    };

    if (value) {
      if ((0, _themes.isMaterial)()) {
        this._inkRippleTimer = setTimeout(function () {
          that._inkRipple.showWave(config);
        }, LIST_FEEDBACK_SHOW_TIMEOUT / 2);
      } else {
        that._inkRipple.showWave(config);
      }
    } else {
      clearTimeout(this._inkRippleTimer);

      this._inkRipple.hideWave(config);
    }
  },
  _postprocessRenderItem: function _postprocessRenderItem(args) {
    this._refreshItemElements();

    this.callBase.apply(this, arguments);

    if (this.option('_swipeEnabled')) {
      this._attachSwipeEvent((0, _renderer.default)(args.itemElement));
    }
  },
  _attachSwipeEvent: function _attachSwipeEvent($itemElement) {
    var endEventName = (0, _index.addNamespace)(_swipe.end, this.NAME);

    _events_engine.default.on($itemElement, endEventName, this._itemSwipeEndHandler.bind(this));
  },
  _itemSwipeEndHandler: function _itemSwipeEndHandler(e) {
    this._itemDXEventHandler(e, 'onItemSwipe', {
      direction: e.offset < 0 ? 'left' : 'right'
    });
  },
  _nextButtonHandler: function _nextButtonHandler(e) {
    this._pageLoadingAction(e);

    var source = this._dataSource;

    if (source && !source.isLoading()) {
      this._scrollView.toggleLoading(true);

      this._$nextButton.detach();

      this._loadIndicationSuppressed(true);

      this._loadNextPage();
    }
  },
  _renderGroup: function _renderGroup(index, group) {
    var $groupElement = (0, _renderer.default)('<div>').addClass(LIST_GROUP_CLASS).appendTo(this._itemContainer());
    var $groupHeaderElement = (0, _renderer.default)('<div>').addClass(LIST_GROUP_HEADER_CLASS).appendTo($groupElement);
    var groupTemplateName = this.option('groupTemplate');

    var groupTemplate = this._getTemplate(group.template || groupTemplateName, group, index, $groupHeaderElement);

    var renderArgs = {
      index: index,
      itemData: group,
      container: (0, _element.getPublicElement)($groupHeaderElement)
    };

    this._createItemByTemplate(groupTemplate, renderArgs);

    if ((0, _themes.isMaterial)()) {
      (0, _renderer.default)('<div>').addClass(LIST_GROUP_HEADER_INDICATOR_CLASS).prependTo($groupHeaderElement);
    }

    this._renderingGroupIndex = index;
    var $groupBody = (0, _renderer.default)('<div>').addClass(LIST_GROUP_BODY_CLASS).appendTo($groupElement);
    (0, _iterator.each)(groupItemsGetter(group) || [], function (index, item) {
      this._renderItem(index, item, $groupBody);
    }.bind(this));

    this._groupRenderAction({
      groupElement: (0, _element.getPublicElement)($groupElement),
      groupIndex: index,
      groupData: group
    });
  },
  downInkRippleHandler: function downInkRippleHandler(e) {
    this._toggleActiveState((0, _renderer.default)(e.currentTarget), true, e);
  },
  upInkRippleHandler: function upInkRippleHandler(e) {
    this._toggleActiveState((0, _renderer.default)(e.currentTarget), false);
  },
  attachGroupHeaderInkRippleEvents: function attachGroupHeaderInkRippleEvents() {
    var selector = '.' + LIST_GROUP_HEADER_CLASS;
    var $element = this.$element();
    this._downInkRippleHandler = this._downInkRippleHandler || this.downInkRippleHandler.bind(this);
    this._upInkRippleHandler = this._upInkRippleHandler || this.upInkRippleHandler.bind(this);
    var downArguments = [$element, 'dxpointerdown', selector, this._downInkRippleHandler];
    var upArguments = [$element, 'dxpointerup dxpointerout', selector, this._upInkRippleHandler];

    _events_engine.default.off.apply(_events_engine.default, downArguments);

    _events_engine.default.on.apply(_events_engine.default, downArguments);

    _events_engine.default.off.apply(_events_engine.default, upArguments);

    _events_engine.default.on.apply(_events_engine.default, upArguments);
  },
  _createGroupRenderAction: function _createGroupRenderAction() {
    this._groupRenderAction = this._createActionByOption('onGroupRendered');
  },
  _clean: function _clean() {
    clearTimeout(this._inkRippleTimer);

    if (this._$nextButton) {
      this._$nextButton.remove();

      this._$nextButton = null;
    }

    delete this._inkRipple;
    this.callBase.apply(this, arguments);
  },
  _dispose: function _dispose() {
    this._isDataSourceFirstLoadCompleted(false);

    clearTimeout(this._holdTimer);
    clearTimeout(this._loadNextPageTimer);
    clearTimeout(this._showLoadingIndicatorTimer);
    this.callBase();
  },
  _toggleDisabledState: function _toggleDisabledState(value) {
    this.callBase(value);

    this._scrollView.option('disabled', value || !this.option('scrollingEnabled'));
  },
  _toggleNextButton: function _toggleNextButton(value) {
    var dataSource = this._dataSource;

    var $nextButton = this._getNextButton();

    this.$element().toggleClass(LIST_HAS_NEXT_CLASS, value);

    if (value && dataSource && dataSource.isLoaded()) {
      $nextButton.appendTo(this._itemContainer());
    }

    if (!value) {
      $nextButton.detach();
    }
  },
  _getNextButton: function _getNextButton() {
    if (!this._$nextButton) {
      this._$nextButton = this._createNextButton();
    }

    return this._$nextButton;
  },
  _createNextButton: function _createNextButton() {
    var $result = (0, _renderer.default)('<div>').addClass(LIST_NEXT_BUTTON_CLASS);
    var $button = (0, _renderer.default)('<div>').appendTo($result);

    this._createComponent($button, _button.default, {
      text: this.option('nextButtonText'),
      onClick: this._nextButtonHandler.bind(this),
      type: (0, _themes.isMaterial)() ? 'default' : undefined,
      integrationOptions: {}
    });

    return $result;
  },
  _moveFocus: function _moveFocus() {
    this.callBase.apply(this, arguments);
    this.scrollToItem(this.option('focusedElement'));
  },
  _refresh: function _refresh() {
    if (!(0, _window.hasWindow)()) {
      this.callBase();
    } else {
      var scrollTop = this._scrollView.scrollTop();

      this.callBase();
      scrollTop && this._scrollView.scrollTo(scrollTop);
    }
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'pageLoadMode':
        this._toggleNextButton(args.value);

        this._initScrollView();

        break;

      case 'dataSource':
        this.callBase(args);

        this._initScrollView();

        this._isDataSourceFirstLoadCompleted(false);

        break;

      case 'items':
        this.callBase(args);

        this._isDataSourceFirstLoadCompleted(false);

        break;

      case 'pullingDownText':
      case 'pulledDownText':
      case 'refreshingText':
      case 'pageLoadingText':
      case 'showScrollbar':
      case 'bounceEnabled':
      case 'scrollByContent':
      case 'scrollByThumb':
      case 'useNativeScrolling':
      case 'scrollingEnabled':
      case 'pullRefreshEnabled':
        this._initScrollView();

        this._updateLoadingState();

        break;

      case 'nextButtonText':
      case 'onItemSwipe':
      case 'useInkRipple':
        this._invalidate();

        break;

      case 'onScroll':
      case 'onPullRefresh':
      case 'onPageLoading':
        this._createScrollViewActions();

        break;

      case 'grouped':
      case 'collapsibleGroups':
      case 'groupTemplate':
        this._invalidate();

        break;

      case 'wrapItemText':
        this._$container.toggleClass(WRAP_ITEM_TEXT_CLASS, args.value);

        break;

      case 'onGroupRendered':
        this._createGroupRenderAction();

        break;

      case 'width':
      case 'height':
        this.callBase(args);

        this._scrollView.update();

        break;

      case 'indicateLoading':
        this._hideLoadingIfLoadIndicationOff();

        break;

      case 'visible':
        this.callBase(args);

        this._scrollView.update();

        break;

      case 'rtlEnabled':
        this._initScrollView();

        this.callBase(args);
        break;

      case 'showChevronExpr':
      case 'badgeExpr':
        this._invalidate();

        break;

      case '_swipeEnabled':
      case '_revertPageOnEmptyLoad':
        break;

      case '_listAttributes':
        break;

      default:
        this.callBase(args);
    }
  },
  _extendActionArgs: function _extendActionArgs($itemElement) {
    if (!this.option('grouped')) {
      return this.callBase($itemElement);
    }

    var $group = $itemElement.closest('.' + LIST_GROUP_CLASS);
    var $item = $group.find('.' + LIST_ITEM_CLASS);
    return (0, _extend.extend)(this.callBase($itemElement), {
      itemIndex: {
        group: $group.index(),
        item: $item.index($itemElement)
      }
    });
  },
  expandGroup: function expandGroup(groupIndex) {
    var deferred = new _deferred.Deferred();

    var $group = this._itemContainer().find('.' + LIST_GROUP_CLASS).eq(groupIndex);

    this._collapseGroupHandler($group, false).done(function () {
      deferred.resolveWith(this);
    }.bind(this));

    return deferred.promise();
  },
  collapseGroup: function collapseGroup(groupIndex) {
    var deferred = new _deferred.Deferred();

    var $group = this._itemContainer().find('.' + LIST_GROUP_CLASS).eq(groupIndex);

    this._collapseGroupHandler($group, true).done(function () {
      deferred.resolveWith(this);
    }.bind(this));

    return deferred;
  },
  updateDimensions: function updateDimensions() {
    var that = this;
    var deferred = new _deferred.Deferred();

    if (that._scrollView) {
      that._scrollView.update().done(function () {
        !that._scrollViewIsFull() && that._updateLoadingState(true);
        deferred.resolveWith(that);
      });
    } else {
      deferred.resolveWith(that);
    }

    return deferred.promise();
  },
  reload: function reload() {
    this.callBase();
    this.scrollTo(0);

    this._pullDownHandler();
  },
  repaint: function repaint() {
    this.scrollTo(0);
    this.callBase();
  },
  scrollTop: function scrollTop() {
    return this._scrollView.scrollOffset().top;
  },
  clientHeight: function clientHeight() {
    return this._scrollView.clientHeight();
  },
  scrollHeight: function scrollHeight() {
    return this._scrollView.scrollHeight();
  },
  scrollBy: function scrollBy(distance) {
    this._scrollView.scrollBy(distance);
  },
  scrollTo: function scrollTo(location) {
    this._scrollView.scrollTo(location);
  },
  scrollToItem: function scrollToItem(itemElement) {
    var $item = this._editStrategy.getItemElement(itemElement);

    this._scrollView.scrollToElement($item);
  },
  _dimensionChanged: function _dimensionChanged() {
    this.updateDimensions();
  }
}).include(_grouped_data_converter_mixin.default);

exports.ListBase = ListBase;
ListBase.ItemClass = _item.default;

function getScrollView() {
  return _scrollView || _scroll_view.default;
}

function setScrollView(value) {
  _scrollView = value;
}

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.getImageContainer = exports.getImageSourceType = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ICON_CLASS = 'dx-icon';
var SVG_ICON_CLASS = 'dx-svg-icon';

var getImageSourceType = function getImageSourceType(source) {
  if (!source || typeof source !== 'string') {
    return false;
  }

  if (/^\s*<svg[^>]*>(.|\r?\n)*?<\/svg>\s*$/i.test(source)) {
    return 'svg';
  }

  if (/data:.*base64|\.|[^<\s]\//.test(source)) {
    return 'image';
  }

  if (/^[\w-_]+$/.test(source)) {
    return 'dxIcon';
  }

  if (/^\s?([\w-_]\s?)+$/.test(source)) {
    return 'fontIcon';
  }

  return false;
};

exports.getImageSourceType = getImageSourceType;

var getImageContainer = function getImageContainer(source) {
  switch (getImageSourceType(source)) {
    case 'image':
      return (0, _renderer.default)('<img>').attr('src', source).addClass(ICON_CLASS);

    case 'fontIcon':
      return (0, _renderer.default)('<i>').addClass("".concat(ICON_CLASS, " ").concat(source));

    case 'dxIcon':
      return (0, _renderer.default)('<i>').addClass("".concat(ICON_CLASS, " ").concat(ICON_CLASS, "-").concat(source));

    case 'svg':
      return (0, _renderer.default)('<i>').addClass("".concat(ICON_CLASS, " ").concat(SVG_ICON_CLASS)).append(source);

    default:
      return null;
  }
};

exports.getImageContainer = getImageContainer;

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _window = __webpack_require__(7);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _call_once = _interopRequireDefault(__webpack_require__(32));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var resizeCallbacks = function () {
  var prevSize;
  var callbacks = (0, _callbacks.default)();
  var originalCallbacksAdd = callbacks.add;
  var originalCallbacksRemove = callbacks.remove;

  if (!(0, _window.hasWindow)()) {
    return callbacks;
  }

  var formatSize = function formatSize() {
    var window = (0, _window.getWindow)();
    return {
      width: window.innerWidth,
      height: window.innerHeight
    };
  };

  var handleResize = function handleResize() {
    var now = formatSize();

    if (now.width === prevSize.width && now.height === prevSize.height) {
      return;
    }

    var changedDimension;

    if (now.width === prevSize.width) {
      changedDimension = 'height';
    }

    if (now.height === prevSize.height) {
      changedDimension = 'width';
    }

    prevSize = now;
    callbacks.fire(changedDimension);
  };

  var setPrevSize = (0, _call_once.default)(function () {
    prevSize = formatSize();
  });
  var removeListener;

  callbacks.add = function () {
    var result = originalCallbacksAdd.apply(callbacks, arguments);
    setPrevSize();

    _ready_callbacks.default.add(function () {
      if (!removeListener && callbacks.has()) {
        removeListener = _dom_adapter.default.listen((0, _window.getWindow)(), 'resize', handleResize);
      }
    });

    return result;
  };

  callbacks.remove = function () {
    var result = originalCallbacksRemove.apply(callbacks, arguments);

    if (!callbacks.has() && removeListener) {
      removeListener();
      removeListener = undefined;
    }

    return result;
  };

  return callbacks;
}();

var _default = resizeCallbacks;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _devices = _interopRequireDefault(__webpack_require__(10));

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _base = _interopRequireDefault(__webpack_require__(57));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventMap = {
  'dxpointerdown': 'touchstart',
  'dxpointermove': 'touchmove',
  'dxpointerup': 'touchend',
  'dxpointercancel': 'touchcancel',
  'dxpointerover': '',
  'dxpointerout': '',
  'dxpointerenter': '',
  'dxpointerleave': ''
};

var normalizeTouchEvent = function normalizeTouchEvent(e) {
  var pointers = [];
  (0, _iterator.each)(e.touches, function (_, touch) {
    pointers.push((0, _extend.extend)({
      pointerId: touch.identifier
    }, touch));
  });
  return {
    pointers: pointers,
    pointerId: e.changedTouches[0].identifier
  };
};

var skipTouchWithSameIdentifier = function skipTouchWithSameIdentifier(pointerEvent) {
  return _devices.default.real().platform === 'ios' && (pointerEvent === 'dxpointerdown' || pointerEvent === 'dxpointerup');
};

var TouchStrategy = _base.default.inherit({
  ctor: function ctor() {
    this.callBase.apply(this, arguments);
    this._pointerId = 0;
  },
  _handler: function _handler(e) {
    if (skipTouchWithSameIdentifier(this._eventName)) {
      var touch = e.changedTouches[0];

      if (this._pointerId === touch.identifier && this._pointerId !== 0) {
        return;
      }

      this._pointerId = touch.identifier;
    }

    return this.callBase.apply(this, arguments);
  },
  _fireEvent: function _fireEvent(args) {
    return this.callBase((0, _extend.extend)(normalizeTouchEvent(args.originalEvent), args));
  }
});

TouchStrategy.map = eventMap;
TouchStrategy.normalize = normalizeTouchEvent;
var _default = TouchStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _iterator = __webpack_require__(4);

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var addEventsListener = function addEventsListener(events, handler) {
  _ready_callbacks.default.add(function () {
    events.split(' ').forEach(function (event) {
      _dom_adapter.default.listen(_dom_adapter.default.getDocument(), event, handler, true);
    });
  });
};

var Observer = function Observer(eventMap, pointerEquals, onPointerAdding) {
  onPointerAdding = onPointerAdding || function () {};

  var pointers = [];

  var getPointerIndex = function getPointerIndex(e) {
    var index = -1;
    (0, _iterator.each)(pointers, function (i, pointer) {
      if (!pointerEquals(e, pointer)) {
        return true;
      }

      index = i;
      return false;
    });
    return index;
  };

  var addPointer = function addPointer(e) {
    if (getPointerIndex(e) === -1) {
      onPointerAdding(e);
      pointers.push(e);
    }
  };

  var removePointer = function removePointer(e) {
    var index = getPointerIndex(e);

    if (index > -1) {
      pointers.splice(index, 1);
    }
  };

  var updatePointer = function updatePointer(e) {
    pointers[getPointerIndex(e)] = e;
  };

  addEventsListener(eventMap['dxpointerdown'], addPointer);
  addEventsListener(eventMap['dxpointermove'], updatePointer);
  addEventsListener(eventMap['dxpointerup'], removePointer);
  addEventsListener(eventMap['dxpointercancel'], removePointer);

  this.pointers = function () {
    return pointers;
  };

  this.reset = function () {
    pointers = [];
  };
};

var _default = Observer;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _extend = __webpack_require__(2);

var _base = _interopRequireDefault(__webpack_require__(57));

var _observer = _interopRequireDefault(__webpack_require__(96));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventMap = {
  'dxpointerdown': 'mousedown',
  'dxpointermove': 'mousemove',
  'dxpointerup': 'mouseup',
  'dxpointercancel': '',
  'dxpointerover': 'mouseover',
  'dxpointerout': 'mouseout',
  'dxpointerenter': 'mouseenter',
  'dxpointerleave': 'mouseleave'
};

var normalizeMouseEvent = function normalizeMouseEvent(e) {
  e.pointerId = 1;
  return {
    pointers: observer.pointers(),
    pointerId: 1
  };
};

var observer;
var activated = false;

var activateStrategy = function activateStrategy() {
  if (activated) {
    return;
  }

  observer = new _observer.default(eventMap, function () {
    return true;
  });
  activated = true;
};

var MouseStrategy = _base.default.inherit({
  ctor: function ctor() {
    this.callBase.apply(this, arguments);
    activateStrategy();
  },
  _fireEvent: function _fireEvent(args) {
    return this.callBase((0, _extend.extend)(normalizeMouseEvent(args.originalEvent), args));
  }
});

MouseStrategy.map = eventMap;
MouseStrategy.normalize = normalizeMouseEvent;
MouseStrategy.activate = activateStrategy;

MouseStrategy.resetObserver = function () {
  observer.reset();
};

var _default = MouseStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.name = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _event_registrator = _interopRequireDefault(__webpack_require__(38));

var _index = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EVENT_NAME = 'dxmousewheel';
exports.name = EVENT_NAME;
var EVENT_NAMESPACE = 'dxWheel';
var NATIVE_EVENT_NAME = 'wheel';
var PIXEL_MODE = 0;
var DELTA_MUTLIPLIER = 30;
var wheel = {
  setup: function setup(element) {
    var $element = (0, _renderer.default)(element);

    _events_engine.default.on($element, (0, _index.addNamespace)(NATIVE_EVENT_NAME, EVENT_NAMESPACE), wheel._wheelHandler.bind(wheel));
  },
  teardown: function teardown(element) {
    _events_engine.default.off(element, ".".concat(EVENT_NAMESPACE));
  },
  _wheelHandler: function _wheelHandler(e) {
    var _e$originalEvent = e.originalEvent,
        deltaMode = _e$originalEvent.deltaMode,
        deltaY = _e$originalEvent.deltaY,
        deltaX = _e$originalEvent.deltaX,
        deltaZ = _e$originalEvent.deltaZ;
    (0, _index.fireEvent)({
      type: EVENT_NAME,
      originalEvent: e,
      delta: this._normalizeDelta(deltaY, deltaMode),
      deltaX: deltaX,
      deltaY: deltaY,
      deltaZ: deltaZ,
      deltaMode: deltaMode,
      pointerType: 'mouse'
    });
    e.stopPropagation();
  },
  _normalizeDelta: function _normalizeDelta(delta) {
    var deltaMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PIXEL_MODE;

    if (deltaMode === PIXEL_MODE) {
      return -delta;
    } else {
      // Use multiplier to get rough delta value in px for the LINE or PAGE mode
      // https://bugzilla.mozilla.org/show_bug.cgi?id=1392460
      return -DELTA_MUTLIPLIER * delta;
    }
  }
};
(0, _event_registrator.default)(EVENT_NAME, wheel);

/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.end = exports.start = exports.swipe = void 0;

var _index = __webpack_require__(6);

var _emitter = _interopRequireDefault(__webpack_require__(77));

var _emitter_registrator = _interopRequireDefault(__webpack_require__(39));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SWIPE_START_EVENT = 'dxswipestart';
exports.start = SWIPE_START_EVENT;
var SWIPE_EVENT = 'dxswipe';
exports.swipe = SWIPE_EVENT;
var SWIPE_END_EVENT = 'dxswipeend';
exports.end = SWIPE_END_EVENT;
var HorizontalStrategy = {
  defaultItemSizeFunc: function defaultItemSizeFunc() {
    return this.getElement().width();
  },
  getBounds: function getBounds() {
    return [this._maxLeftOffset, this._maxRightOffset];
  },
  calcOffsetRatio: function calcOffsetRatio(e) {
    var endEventData = (0, _index.eventData)(e);
    return (endEventData.x - (this._savedEventData && this._savedEventData.x || 0)) / this._itemSizeFunc().call(this, e);
  },
  isFastSwipe: function isFastSwipe(e) {
    var endEventData = (0, _index.eventData)(e);
    return this.FAST_SWIPE_SPEED_LIMIT * Math.abs(endEventData.x - this._tickData.x) >= endEventData.time - this._tickData.time;
  }
};
var VerticalStrategy = {
  defaultItemSizeFunc: function defaultItemSizeFunc() {
    return this.getElement().height();
  },
  getBounds: function getBounds() {
    return [this._maxTopOffset, this._maxBottomOffset];
  },
  calcOffsetRatio: function calcOffsetRatio(e) {
    var endEventData = (0, _index.eventData)(e);
    return (endEventData.y - (this._savedEventData && this._savedEventData.y || 0)) / this._itemSizeFunc().call(this, e);
  },
  isFastSwipe: function isFastSwipe(e) {
    var endEventData = (0, _index.eventData)(e);
    return this.FAST_SWIPE_SPEED_LIMIT * Math.abs(endEventData.y - this._tickData.y) >= endEventData.time - this._tickData.time;
  }
};
var STRATEGIES = {
  'horizontal': HorizontalStrategy,
  'vertical': VerticalStrategy
};

var SwipeEmitter = _emitter.default.inherit({
  TICK_INTERVAL: 300,
  FAST_SWIPE_SPEED_LIMIT: 10,
  ctor: function ctor(element) {
    this.callBase(element);
    this.direction = 'horizontal';
    this.elastic = true;
  },
  _getStrategy: function _getStrategy() {
    return STRATEGIES[this.direction];
  },
  _defaultItemSizeFunc: function _defaultItemSizeFunc() {
    return this._getStrategy().defaultItemSizeFunc.call(this);
  },
  _itemSizeFunc: function _itemSizeFunc() {
    return this.itemSizeFunc || this._defaultItemSizeFunc;
  },
  _init: function _init(e) {
    this._tickData = (0, _index.eventData)(e);
  },
  _start: function _start(e) {
    this._savedEventData = (0, _index.eventData)(e);
    e = this._fireEvent(SWIPE_START_EVENT, e);

    if (!e.cancel) {
      this._maxLeftOffset = e.maxLeftOffset;
      this._maxRightOffset = e.maxRightOffset;
      this._maxTopOffset = e.maxTopOffset;
      this._maxBottomOffset = e.maxBottomOffset;
    }
  },
  _move: function _move(e) {
    var strategy = this._getStrategy();

    var moveEventData = (0, _index.eventData)(e);
    var offset = strategy.calcOffsetRatio.call(this, e);
    offset = this._fitOffset(offset, this.elastic);

    if (moveEventData.time - this._tickData.time > this.TICK_INTERVAL) {
      this._tickData = moveEventData;
    }

    this._fireEvent(SWIPE_EVENT, e, {
      offset: offset
    });

    e.preventDefault();
  },
  _end: function _end(e) {
    var strategy = this._getStrategy();

    var offsetRatio = strategy.calcOffsetRatio.call(this, e);
    var isFast = strategy.isFastSwipe.call(this, e);
    var startOffset = offsetRatio;

    var targetOffset = this._calcTargetOffset(offsetRatio, isFast);

    startOffset = this._fitOffset(startOffset, this.elastic);
    targetOffset = this._fitOffset(targetOffset, false);

    this._fireEvent(SWIPE_END_EVENT, e, {
      offset: startOffset,
      targetOffset: targetOffset
    });
  },
  _fitOffset: function _fitOffset(offset, elastic) {
    var strategy = this._getStrategy();

    var bounds = strategy.getBounds.call(this);

    if (offset < -bounds[0]) {
      return elastic ? (-2 * bounds[0] + offset) / 3 : -bounds[0];
    }

    if (offset > bounds[1]) {
      return elastic ? (2 * bounds[1] + offset) / 3 : bounds[1];
    }

    return offset;
  },
  _calcTargetOffset: function _calcTargetOffset(offsetRatio, isFast) {
    var result;

    if (isFast) {
      result = Math.ceil(Math.abs(offsetRatio));

      if (offsetRatio < 0) {
        result = -result;
      }
    } else {
      result = Math.round(offsetRatio);
    }

    return result;
  }
});
/**
 * @name UI Events.dxswipestart
 * @type eventType
 * @type_function_param1 event:event
 * @type_function_param1_field1 cancel:boolean
 * @module events/swipe
*/

/**
  * @name UI Events.dxswipe
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 offset:number
  * @type_function_param1_field2 cancel:boolean
  * @module events/swipe
*/

/**
  * @name UI Events.dxswipeend
  * @type eventType
  * @type_function_param1 event:event
  * @type_function_param1_field1 offset:number
  * @type_function_param1_field2 targetOffset:number
  * @module events/swipe
*/


(0, _emitter_registrator.default)({
  emitter: SwipeEmitter,
  events: [SWIPE_START_EVENT, SWIPE_EVENT, SWIPE_END_EVENT]
});

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _class = _interopRequireDefault(__webpack_require__(11));

var _iterator = __webpack_require__(4);

var _public_component = __webpack_require__(60);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INVISIBLE_STATE_CLASS = 'dx-state-invisible';
var DISABLED_STATE_CLASS = 'dx-state-disabled';
var ITEM_CONTENT_PLACEHOLDER_CLASS = 'dx-item-content-placeholder';

var forcibleWatcher = function forcibleWatcher(watchMethod, fn, callback) {
  var filteredCallback = function () {
    var oldValue;
    return function (value) {
      if (oldValue !== value) {
        callback(value, oldValue);
        oldValue = value;
      }
    };
  }();

  return {
    dispose: watchMethod(fn, filteredCallback),
    force: function force() {
      filteredCallback(fn());
    }
  };
};

var CollectionItem = _class.default.inherit({
  ctor: function ctor($element, options, rawData) {
    this._$element = $element;
    this._options = options;
    this._rawData = rawData;
    (0, _public_component.attachInstanceToElement)($element, this, this._dispose);

    this._render();
  },
  _render: function _render() {
    var $placeholder = (0, _renderer.default)('<div>').addClass(ITEM_CONTENT_PLACEHOLDER_CLASS);

    this._$element.append($placeholder);

    this._watchers = [];

    this._renderWatchers();
  },
  _renderWatchers: function _renderWatchers() {
    this._startWatcher('disabled', this._renderDisabled.bind(this));

    this._startWatcher('visible', this._renderVisible.bind(this));
  },
  _startWatcher: function _startWatcher(field, render) {
    var rawData = this._rawData;

    var exprGetter = this._options.fieldGetter(field);

    var watcher = forcibleWatcher(this._options.watchMethod(), function () {
      return exprGetter(rawData);
    }, function (value, oldValue) {
      this._dirty = true;
      render(value, oldValue);
    }.bind(this));

    this._watchers.push(watcher);
  },
  setDataField: function setDataField() {
    this._dirty = false;
    (0, _iterator.each)(this._watchers, function (_, watcher) {
      watcher.force();
    });

    if (this._dirty) {
      return true;
    }
  },
  _renderDisabled: function _renderDisabled(value, oldValue) {
    this._$element.toggleClass(DISABLED_STATE_CLASS, !!value);

    this._updateOwnerFocus(value);
  },
  _updateOwnerFocus: function _updateOwnerFocus(isDisabled) {
    var ownerComponent = this._options.owner;

    if (ownerComponent && isDisabled) {
      ownerComponent._resetItemFocus(this._$element);
    }
  },
  _renderVisible: function _renderVisible(value, oldValue) {
    this._$element.toggleClass(INVISIBLE_STATE_CLASS, value !== undefined && !value);
  },
  _dispose: function _dispose() {
    (0, _iterator.each)(this._watchers, function (_, watcher) {
      watcher.dispose();
    });
  }
});

CollectionItem.getInstance = function ($element) {
  return (0, _public_component.getInstanceByElement)($element, this);
};

var _default = CollectionItem;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _class = _interopRequireDefault(__webpack_require__(11));

var _extend = __webpack_require__(2);

var _array = __webpack_require__(12);

var _iterator = __webpack_require__(4);

var _events_strategy = __webpack_require__(49);

var _errors = _interopRequireDefault(__webpack_require__(13));

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _number = _interopRequireDefault(__webpack_require__(148));

var _message = _interopRequireDefault(__webpack_require__(17));

var _promise = _interopRequireDefault(__webpack_require__(51));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// STYLE validation
var STATUS = {
  valid: 'valid',
  invalid: 'invalid',
  pending: 'pending'
};

var BaseRuleValidator = /*#__PURE__*/function () {
  function BaseRuleValidator() {
    this.NAME = 'base';
  }

  var _proto = BaseRuleValidator.prototype;

  _proto.defaultMessage = function defaultMessage(value) {
    return _message.default.getFormatter("validation-".concat(this.NAME))(value);
  };

  _proto.defaultFormattedMessage = function defaultFormattedMessage(value) {
    return _message.default.getFormatter("validation-".concat(this.NAME, "-formatted"))(value);
  };

  _proto._isValueEmpty = function _isValueEmpty(value) {
    return !rulesValidators.required.validate(value, {});
  };

  _proto.validate = function validate(value, rule) {
    var _this = this;

    var valueArray = Array.isArray(value) ? value : [value];
    var result = true;

    if (valueArray.length) {
      valueArray.every(function (itemValue) {
        result = _this._validate(itemValue, rule);
        return result;
      });
    } else {
      result = this._validate(null, rule);
    }

    return result;
  };

  return BaseRuleValidator;
}();

var RequiredRuleValidator = /*#__PURE__*/function (_BaseRuleValidator) {
  _inheritsLoose(RequiredRuleValidator, _BaseRuleValidator);

  function RequiredRuleValidator() {
    var _this2;

    _this2 = _BaseRuleValidator.call(this) || this;
    _this2.NAME = 'required';
    return _this2;
  }

  var _proto2 = RequiredRuleValidator.prototype;

  _proto2._validate = function _validate(value, rule) {
    if (!(0, _type.isDefined)(value)) return false;

    if (value === false) {
      return false;
    }

    value = String(value);

    if (rule.trim || !(0, _type.isDefined)(rule.trim)) {
      value = value.trim();
    }

    return value !== '';
  };

  return RequiredRuleValidator;
}(BaseRuleValidator);

var NumericRuleValidator = /*#__PURE__*/function (_BaseRuleValidator2) {
  _inheritsLoose(NumericRuleValidator, _BaseRuleValidator2);

  function NumericRuleValidator() {
    var _this3;

    _this3 = _BaseRuleValidator2.call(this) || this;
    _this3.NAME = 'numeric';
    return _this3;
  }

  var _proto3 = NumericRuleValidator.prototype;

  _proto3._validate = function _validate(value, rule) {
    if (rule.ignoreEmptyValue !== false && this._isValueEmpty(value)) {
      return true;
    }

    if (rule.useCultureSettings && (0, _type.isString)(value)) {
      return !isNaN(_number.default.parse(value));
    } else {
      return (0, _type.isNumeric)(value);
    }
  };

  return NumericRuleValidator;
}(BaseRuleValidator);

var RangeRuleValidator = /*#__PURE__*/function (_BaseRuleValidator3) {
  _inheritsLoose(RangeRuleValidator, _BaseRuleValidator3);

  function RangeRuleValidator() {
    var _this4;

    _this4 = _BaseRuleValidator3.call(this) || this;
    _this4.NAME = 'range';
    return _this4;
  }

  var _proto4 = RangeRuleValidator.prototype;

  _proto4._validate = function _validate(value, rule) {
    if (rule.ignoreEmptyValue !== false && this._isValueEmpty(value)) {
      return true;
    }

    var validNumber = rulesValidators['numeric'].validate(value, rule);
    var validValue = (0, _type.isDefined)(value) && value !== '';
    var number = validNumber ? parseFloat(value) : validValue && value.valueOf();
    var min = rule.min;
    var max = rule.max;

    if (!(validNumber || (0, _type.isDate)(value)) && !validValue) {
      return false;
    }

    if ((0, _type.isDefined)(min)) {
      if ((0, _type.isDefined)(max)) {
        return number >= min && number <= max;
      }

      return number >= min;
    } else {
      if ((0, _type.isDefined)(max)) {
        return number <= max;
      } else {
        throw _errors.default.Error('E0101');
      }
    }
  };

  return RangeRuleValidator;
}(BaseRuleValidator);

var StringLengthRuleValidator = /*#__PURE__*/function (_BaseRuleValidator4) {
  _inheritsLoose(StringLengthRuleValidator, _BaseRuleValidator4);

  function StringLengthRuleValidator() {
    var _this5;

    _this5 = _BaseRuleValidator4.call(this) || this;
    _this5.NAME = 'stringLength';
    return _this5;
  }

  var _proto5 = StringLengthRuleValidator.prototype;

  _proto5._validate = function _validate(value, rule) {
    var _value;

    value = String((_value = value) !== null && _value !== void 0 ? _value : '');

    if (rule.trim || !(0, _type.isDefined)(rule.trim)) {
      value = value.trim();
    }

    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {
      return true;
    }

    return rulesValidators.range.validate(value.length, (0, _extend.extend)({}, rule));
  };

  return StringLengthRuleValidator;
}(BaseRuleValidator);

var CustomRuleValidator = /*#__PURE__*/function (_BaseRuleValidator5) {
  _inheritsLoose(CustomRuleValidator, _BaseRuleValidator5);

  function CustomRuleValidator() {
    var _this6;

    _this6 = _BaseRuleValidator5.call(this) || this;
    _this6.NAME = 'custom';
    return _this6;
  }

  var _proto6 = CustomRuleValidator.prototype;

  _proto6.validate = function validate(value, rule) {
    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {
      return true;
    }

    var validator = rule.validator;
    var dataGetter = validator && (0, _type.isFunction)(validator.option) && validator.option('dataGetter');
    var extraParams = (0, _type.isFunction)(dataGetter) && dataGetter();
    var params = {
      value: value,
      validator: validator,
      rule: rule
    };

    if (extraParams) {
      (0, _extend.extend)(params, extraParams);
    }

    return rule.validationCallback(params);
  };

  return CustomRuleValidator;
}(BaseRuleValidator);

var AsyncRuleValidator = /*#__PURE__*/function (_CustomRuleValidator) {
  _inheritsLoose(AsyncRuleValidator, _CustomRuleValidator);

  function AsyncRuleValidator() {
    var _this7;

    _this7 = _CustomRuleValidator.call(this) || this;
    _this7.NAME = 'async';
    return _this7;
  }

  var _proto7 = AsyncRuleValidator.prototype;

  _proto7.validate = function validate(value, rule) {
    if (!(0, _type.isDefined)(rule.reevaluate)) {
      (0, _extend.extend)(rule, {
        reevaluate: true
      });
    }

    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {
      return true;
    }

    var validator = rule.validator;
    var dataGetter = validator && (0, _type.isFunction)(validator.option) && validator.option('dataGetter');
    var extraParams = (0, _type.isFunction)(dataGetter) && dataGetter();
    var params = {
      value: value,
      validator: validator,
      rule: rule
    };

    if (extraParams) {
      (0, _extend.extend)(params, extraParams);
    }

    var callbackResult = rule.validationCallback(params);

    if (!(0, _type.isPromise)(callbackResult)) {
      throw _errors.default.Error('E0103');
    }

    return this._getWrappedPromise((0, _deferred.fromPromise)(callbackResult).promise());
  };

  _proto7._getWrappedPromise = function _getWrappedPromise(promise) {
    var deferred = new _deferred.Deferred();
    promise.then(function (res) {
      deferred.resolve(res);
    }, function (err) {
      var res = {
        isValid: false
      };

      if ((0, _type.isDefined)(err)) {
        if ((0, _type.isString)(err)) {
          res.message = err;
        } else if ((0, _type.isObject)(err) && (0, _type.isDefined)(err.message) && (0, _type.isString)(err.message)) {
          res.message = err.message;
        }
      }

      deferred.resolve(res);
    });
    return deferred.promise();
  };

  return AsyncRuleValidator;
}(CustomRuleValidator);

var CompareRuleValidator = /*#__PURE__*/function (_BaseRuleValidator6) {
  _inheritsLoose(CompareRuleValidator, _BaseRuleValidator6);

  function CompareRuleValidator() {
    var _this8;

    _this8 = _BaseRuleValidator6.call(this) || this;
    _this8.NAME = 'compare';
    return _this8;
  }

  var _proto8 = CompareRuleValidator.prototype;

  _proto8._validate = function _validate(value, rule) {
    if (!rule.comparisonTarget) {
      throw _errors.default.Error('E0102');
    }

    if (rule.ignoreEmptyValue && this._isValueEmpty(value)) {
      return true;
    }

    (0, _extend.extend)(rule, {
      reevaluate: true
    });
    var otherValue = rule.comparisonTarget();
    var type = rule.comparisonType || '==';

    switch (type) {
      case '==':
        return value == otherValue;
      // eslint-disable-line eqeqeq

      case '!=':
        return value != otherValue;
      // eslint-disable-line eqeqeq

      case '===':
        return value === otherValue;

      case '!==':
        return value !== otherValue;

      case '>':
        return value > otherValue;

      case '>=':
        return value >= otherValue;

      case '<':
        return value < otherValue;

      case '<=':
        return value <= otherValue;
    }
  };

  return CompareRuleValidator;
}(BaseRuleValidator);

var PatternRuleValidator = /*#__PURE__*/function (_BaseRuleValidator7) {
  _inheritsLoose(PatternRuleValidator, _BaseRuleValidator7);

  function PatternRuleValidator() {
    var _this9;

    _this9 = _BaseRuleValidator7.call(this) || this;
    _this9.NAME = 'pattern';
    return _this9;
  }

  var _proto9 = PatternRuleValidator.prototype;

  _proto9._validate = function _validate(value, rule) {
    if (rule.ignoreEmptyValue !== false && this._isValueEmpty(value)) {
      return true;
    }

    var pattern = rule.pattern;

    if ((0, _type.isString)(pattern)) {
      pattern = new RegExp(pattern);
    }

    return pattern.test(value);
  };

  return PatternRuleValidator;
}(BaseRuleValidator);

var EmailRuleValidator = /*#__PURE__*/function (_BaseRuleValidator8) {
  _inheritsLoose(EmailRuleValidator, _BaseRuleValidator8);

  function EmailRuleValidator() {
    var _this10;

    _this10 = _BaseRuleValidator8.call(this) || this;
    _this10.NAME = 'email';
    return _this10;
  }

  var _proto10 = EmailRuleValidator.prototype;

  _proto10._validate = function _validate(value, rule) {
    if (rule.ignoreEmptyValue !== false && this._isValueEmpty(value)) {
      return true;
    }

    return rulesValidators.pattern.validate(value, (0, _extend.extend)({}, rule, {
      pattern: /^[\d\w._-]+@[\d\w._-]+\.[\w]+$/i
    }));
  };

  return EmailRuleValidator;
}(BaseRuleValidator);

var rulesValidators = {
  'required': new RequiredRuleValidator(),
  'numeric': new NumericRuleValidator(),
  'range': new RangeRuleValidator(),
  'stringLength': new StringLengthRuleValidator(),
  'custom': new CustomRuleValidator(),
  'async': new AsyncRuleValidator(),
  'compare': new CompareRuleValidator(),
  'pattern': new PatternRuleValidator(),
  'email': new EmailRuleValidator()
};

var GroupConfig = _class.default.inherit({
  ctor: function ctor(group) {
    this.group = group;
    this.validators = [];
    this._pendingValidators = [];
    this._onValidatorStatusChanged = this._onValidatorStatusChanged.bind(this);

    this._resetValidationInfo();

    this._eventsStrategy = new _events_strategy.EventsStrategy(this);
  },
  validate: function validate() {
    var _this11 = this;

    var result = {
      isValid: true,
      brokenRules: [],
      validators: [],
      status: STATUS.valid,
      complete: null
    };

    this._unsubscribeFromAllChangeEvents();

    this._pendingValidators = [];

    this._resetValidationInfo();

    (0, _iterator.each)(this.validators, function (_, validator) {
      var validatorResult = validator.validate();
      result.isValid = result.isValid && validatorResult.isValid;

      if (validatorResult.brokenRules) {
        result.brokenRules = result.brokenRules.concat(validatorResult.brokenRules);
      }

      result.validators.push(validator);

      if (validatorResult.status === STATUS.pending) {
        _this11._addPendingValidator(validator);
      }

      _this11._subscribeToChangeEvents(validator);
    });

    if (this._pendingValidators.length) {
      result.status = STATUS.pending;
    } else {
      result.status = result.isValid ? STATUS.valid : STATUS.invalid;

      this._unsubscribeFromAllChangeEvents();

      this._raiseValidatedEvent(result);
    }

    this._updateValidationInfo(result);

    return (0, _extend.extend)({}, this._validationInfo.result);
  },
  _subscribeToChangeEvents: function _subscribeToChangeEvents(validator) {
    validator.on('validating', this._onValidatorStatusChanged);
    validator.on('validated', this._onValidatorStatusChanged);
  },
  _unsubscribeFromChangeEvents: function _unsubscribeFromChangeEvents(validator) {
    validator.off('validating', this._onValidatorStatusChanged);
    validator.off('validated', this._onValidatorStatusChanged);
  },
  _unsubscribeFromAllChangeEvents: function _unsubscribeFromAllChangeEvents() {
    var _this12 = this;

    (0, _iterator.each)(this.validators, function (_, validator) {
      _this12._unsubscribeFromChangeEvents(validator);
    });
  },
  _updateValidationInfo: function _updateValidationInfo(result) {
    this._validationInfo.result = result;

    if (result.status !== STATUS.pending) {
      return;
    }

    if (!this._validationInfo.deferred) {
      this._validationInfo.deferred = new _deferred.Deferred();
      this._validationInfo.result.complete = this._validationInfo.deferred.promise();
    }
  },
  _addPendingValidator: function _addPendingValidator(validator) {
    var foundValidator = (0, _common.grep)(this._pendingValidators, function (val) {
      return val === validator;
    })[0];

    if (!foundValidator) {
      this._pendingValidators.push(validator);
    }
  },
  _removePendingValidator: function _removePendingValidator(validator) {
    var index = (0, _array.inArray)(validator, this._pendingValidators);

    if (index >= 0) {
      this._pendingValidators.splice(index, 1);
    }
  },
  _orderBrokenRules: function _orderBrokenRules(brokenRules) {
    var orderedRules = [];
    (0, _iterator.each)(this.validators, function (_, validator) {
      var foundRules = (0, _common.grep)(brokenRules, function (rule) {
        return rule.validator === validator;
      });

      if (foundRules.length) {
        orderedRules = orderedRules.concat(foundRules);
      }
    });
    return orderedRules;
  },
  _updateBrokenRules: function _updateBrokenRules(result) {
    if (!this._validationInfo.result) {
      return;
    }

    var brokenRules = this._validationInfo.result.brokenRules;
    var rules = (0, _common.grep)(brokenRules, function (rule) {
      return rule.validator !== result.validator;
    });

    if (result.brokenRules) {
      brokenRules = rules.concat(result.brokenRules);
    }

    this._validationInfo.result.brokenRules = this._orderBrokenRules(brokenRules);
  },
  _onValidatorStatusChanged: function _onValidatorStatusChanged(result) {
    if (result.status === STATUS.pending) {
      this._addPendingValidator(result.validator);

      return;
    }

    this._resolveIfComplete(result);
  },
  _resolveIfComplete: function _resolveIfComplete(result) {
    this._removePendingValidator(result.validator);

    this._updateBrokenRules(result);

    if (!this._pendingValidators.length) {
      this._unsubscribeFromAllChangeEvents();

      if (!this._validationInfo.result) {
        return;
      }

      this._validationInfo.result.status = this._validationInfo.result.brokenRules.length === 0 ? STATUS.valid : STATUS.invalid;
      this._validationInfo.result.isValid = this._validationInfo.result.status === STATUS.valid;
      var res = (0, _extend.extend)({}, this._validationInfo.result, {
        complete: null
      });
      var deferred = this._validationInfo.deferred;
      this._validationInfo.deferred = null;

      this._raiseValidatedEvent(res);

      deferred && setTimeout(function () {
        deferred.resolve(res);
      });
    }
  },
  _raiseValidatedEvent: function _raiseValidatedEvent(result) {
    this._eventsStrategy.fireEvent('validated', [result]);
  },
  _resetValidationInfo: function _resetValidationInfo() {
    this._validationInfo = {
      result: null,
      deferred: null
    };
  },
  _synchronizeValidationInfo: function _synchronizeValidationInfo() {
    if (this._validationInfo.result) {
      this._validationInfo.result.validators = this.validators;
    }
  },
  removeRegisteredValidator: function removeRegisteredValidator(validator) {
    var index = (0, _array.inArray)(validator, this.validators);

    if (index > -1) {
      this.validators.splice(index, 1);

      this._synchronizeValidationInfo();

      this._resolveIfComplete({
        validator: validator
      });
    }
  },
  registerValidator: function registerValidator(validator) {
    if ((0, _array.inArray)(validator, this.validators) < 0) {
      this.validators.push(validator);

      this._synchronizeValidationInfo();
    }
  },
  reset: function reset() {
    (0, _iterator.each)(this.validators, function (_, validator) {
      validator.reset();
    });
    this._pendingValidators = [];

    this._resetValidationInfo();
  },
  on: function on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);

    return this;
  },
  off: function off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);

    return this;
  }
});

var ValidationEngine = {
  groups: [],
  getGroupConfig: function getGroupConfig(group) {
    var result = (0, _common.grep)(this.groups, function (config) {
      return config.group === group;
    });

    if (result.length) {
      return result[0];
    }
  },
  findGroup: function findGroup($element, model) {
    // try to find out if this control is child of validation group
    var $dxGroup = $element.parents('.dx-validationgroup').first();

    if ($dxGroup.length) {
      return $dxGroup.dxValidationGroup('instance');
    } // Trick to be able to securely get ViewModel instance ($data) in Knockout


    return model;
  },
  initGroups: function initGroups() {
    this.groups = [];
    this.addGroup();
  },
  addGroup: function addGroup(group) {
    var config = this.getGroupConfig(group);

    if (!config) {
      config = new GroupConfig(group);
      this.groups.push(config);
    }

    return config;
  },
  removeGroup: function removeGroup(group) {
    var config = this.getGroupConfig(group);
    var index = (0, _array.inArray)(config, this.groups);

    if (index > -1) {
      this.groups.splice(index, 1);
    }

    return config;
  },
  _setDefaultMessage: function _setDefaultMessage(info) {
    var rule = info.rule,
        validator = info.validator,
        name = info.name;

    if (!(0, _type.isDefined)(rule.message)) {
      if (validator.defaultFormattedMessage && (0, _type.isDefined)(name)) {
        rule.message = validator.defaultFormattedMessage(name);
      } else {
        rule.message = validator.defaultMessage();
      }
    }
  },
  _addBrokenRule: function _addBrokenRule(info) {
    var result = info.result,
        rule = info.rule;

    if (!result.brokenRule) {
      result.brokenRule = rule;
    }

    if (!result.brokenRules) {
      result.brokenRules = [];
    }

    result.brokenRules.push(rule);
  },
  validate: function validate(value, rules, name) {
    var _rules$,
        _this13 = this;

    var result = {
      name: name,
      value: value,
      brokenRule: null,
      brokenRules: null,
      isValid: true,
      validationRules: rules,
      pendingRules: null,
      status: STATUS.valid,
      complete: null
    };
    var validator = rules === null || rules === void 0 ? void 0 : (_rules$ = rules[0]) === null || _rules$ === void 0 ? void 0 : _rules$.validator;
    var asyncRuleItems = [];
    (0, _iterator.each)(rules || [], function (_, rule) {
      var ruleValidator = rulesValidators[rule.type];
      var ruleValidationResult;

      if (ruleValidator) {
        if ((0, _type.isDefined)(rule.isValid) && rule.value === value && !rule.reevaluate) {
          if (!rule.isValid) {
            result.isValid = false;

            _this13._addBrokenRule({
              result: result,
              rule: rule
            });

            return false;
          }

          return true;
        }

        rule.value = value;

        if (rule.type === 'async') {
          asyncRuleItems.push({
            rule: rule,
            ruleValidator: ruleValidator
          });
          return true;
        }

        ruleValidationResult = ruleValidator.validate(value, rule);
        rule.isValid = ruleValidationResult;

        if (!ruleValidationResult) {
          result.isValid = false;

          _this13._setDefaultMessage({
            rule: rule,
            validator: ruleValidator,
            name: name
          });

          _this13._addBrokenRule({
            result: result,
            rule: rule
          });
        }

        if (!rule.isValid) {
          return false;
        }
      } else {
        throw _errors.default.Error('E0100');
      }
    });

    if (result.isValid && !result.brokenRules && asyncRuleItems.length) {
      result = this._validateAsyncRules({
        value: value,
        items: asyncRuleItems,
        result: result,
        name: name
      });
    }

    this._synchronizeGroupValidationInfo(validator, result);

    result.status = result.pendingRules ? STATUS.pending : result.isValid ? STATUS.valid : STATUS.invalid;
    return result;
  },
  _synchronizeGroupValidationInfo: function _synchronizeGroupValidationInfo(validator, result) {
    var _result$brokenRules;

    if (!validator) {
      return;
    }

    var groupConfig = ValidationEngine.getGroupConfig(validator._validationGroup);

    groupConfig._updateBrokenRules.call(groupConfig, {
      validator: validator,
      brokenRules: (_result$brokenRules = result.brokenRules) !== null && _result$brokenRules !== void 0 ? _result$brokenRules : []
    });
  },
  _validateAsyncRules: function _validateAsyncRules(_ref) {
    var _this14 = this;

    var result = _ref.result,
        value = _ref.value,
        items = _ref.items,
        name = _ref.name;
    var asyncResults = [];
    (0, _iterator.each)(items, function (_, item) {
      var validateResult = item.ruleValidator.validate(value, item.rule);

      if (!(0, _type.isPromise)(validateResult)) {
        _this14._updateRuleConfig({
          rule: item.rule,
          ruleResult: _this14._getPatchedRuleResult(validateResult),
          validator: item.ruleValidator,
          name: name
        });
      } else {
        if (!result.pendingRules) {
          result.pendingRules = [];
        }

        result.pendingRules.push(item.rule);
        var asyncResult = validateResult.then(function (res) {
          var ruleResult = _this14._getPatchedRuleResult(res);

          _this14._updateRuleConfig({
            rule: item.rule,
            ruleResult: ruleResult,
            validator: item.ruleValidator,
            name: name
          });

          return ruleResult;
        });
        asyncResults.push(asyncResult);
      }
    });

    if (asyncResults.length) {
      result.complete = _promise.default.all(asyncResults).then(function (values) {
        return _this14._getAsyncRulesResult({
          result: result,
          values: values
        });
      });
    }

    return result;
  },
  _updateRuleConfig: function _updateRuleConfig(_ref2) {
    var rule = _ref2.rule,
        ruleResult = _ref2.ruleResult,
        validator = _ref2.validator,
        name = _ref2.name;
    rule.isValid = ruleResult.isValid;

    if (!ruleResult.isValid) {
      if ((0, _type.isDefined)(ruleResult.message) && (0, _type.isString)(ruleResult.message) && ruleResult.message.length) {
        rule.message = ruleResult.message;
      } else {
        this._setDefaultMessage({
          rule: rule,
          validator: validator,
          name: name
        });
      }
    }
  },
  _getPatchedRuleResult: function _getPatchedRuleResult(ruleResult) {
    var result;
    var isValid = true;

    if ((0, _type.isObject)(ruleResult)) {
      result = (0, _extend.extend)({}, ruleResult);

      if (!(0, _type.isDefined)(result.isValid)) {
        result.isValid = isValid;
      }
    } else {
      result = {
        isValid: (0, _type.isBoolean)(ruleResult) ? ruleResult : isValid
      };
    }

    return result;
  },
  _getAsyncRulesResult: function _getAsyncRulesResult(_ref3) {
    var _this15 = this;

    var values = _ref3.values,
        result = _ref3.result;
    (0, _iterator.each)(values, function (index, val) {
      if (val.isValid === false) {
        result.isValid = val.isValid;
        var rule = result.pendingRules[index];

        _this15._addBrokenRule({
          result: result,
          rule: rule
        });
      }
    });
    result.pendingRules = null;
    result.complete = null;
    result.status = result.isValid ? STATUS.valid : STATUS.invalid;
    return result;
  },
  registerValidatorInGroup: function registerValidatorInGroup(group, validator) {
    var groupConfig = ValidationEngine.addGroup(group);
    groupConfig.registerValidator.call(groupConfig, validator);
  },
  _shouldRemoveGroup: function _shouldRemoveGroup(group, validatorsInGroup) {
    var isDefaultGroup = group === undefined;
    var isValidationGroupInstance = group && group.NAME === 'dxValidationGroup';
    return !isDefaultGroup && !isValidationGroupInstance && !validatorsInGroup.length;
  },
  removeRegisteredValidator: function removeRegisteredValidator(group, validator) {
    var config = ValidationEngine.getGroupConfig(group);

    if (config) {
      config.removeRegisteredValidator.call(config, validator);
      var validatorsInGroup = config.validators;

      if (this._shouldRemoveGroup(group, validatorsInGroup)) {
        this.removeGroup(group);
      }
    }
  },
  initValidationOptions: function initValidationOptions(options) {
    var _this16 = this;

    var initedOptions = {};

    if (options) {
      var syncOptions = ['isValid', 'validationStatus', 'validationError', 'validationErrors'];
      syncOptions.forEach(function (prop) {
        if (prop in options) {
          (0, _extend.extend)(initedOptions, _this16.synchronizeValidationOptions({
            name: prop,
            value: options[prop]
          }, options));
        }
      });
    }

    return initedOptions;
  },
  synchronizeValidationOptions: function synchronizeValidationOptions(_ref4, options) {
    var name = _ref4.name,
        value = _ref4.value;

    switch (name) {
      case 'validationStatus':
        {
          var isValid = value === STATUS.valid || value === STATUS.pending;
          return options.isValid !== isValid ? {
            isValid: isValid
          } : {};
        }

      case 'isValid':
        {
          var validationStatus = options.validationStatus;
          var newStatus = validationStatus;

          if (value && validationStatus === STATUS.invalid) {
            newStatus = STATUS.valid;
          } else if (!value && validationStatus !== STATUS.invalid) {
            newStatus = STATUS.invalid;
          }

          return newStatus !== validationStatus ? {
            validationStatus: newStatus
          } : {};
        }

      case 'validationErrors':
        {
          var validationError = !value || !value.length ? null : value[0];
          return options.validationError !== validationError ? {
            validationError: validationError
          } : {};
        }

      case 'validationError':
        {
          var validationErrors = options.validationErrors;

          if (!value && validationErrors) {
            return {
              validationErrors: null
            };
          } else if (value && !validationErrors) {
            return {
              validationErrors: [value]
            };
          } else if (value && validationErrors && value !== validationErrors[0]) {
            validationErrors[0] = value;
            return {
              validationErrors: validationErrors.slice()
            };
          }
        }
    }

    return {};
  },
  validateGroup: function validateGroup(group) {
    var groupConfig = ValidationEngine.getGroupConfig(group);

    if (!groupConfig) {
      throw _errors.default.Error('E0110');
    }

    return groupConfig.validate();
  },
  resetGroup: function resetGroup(group) {
    var groupConfig = ValidationEngine.getGroupConfig(group);

    if (!groupConfig) {
      throw _errors.default.Error('E0110');
    }

    return groupConfig.reset();
  }
};
ValidationEngine.initGroups();
var _default = ValidationEngine;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.toFixed = toFixed;

var _math = __webpack_require__(40);

var DECIMAL_BASE = 10;

function roundByAbs(value) {
  var valueSign = (0, _math.sign)(value);
  return valueSign * Math.round(Math.abs(value));
}

function adjustValue(value, precision) {
  var precisionMultiplier = Math.pow(DECIMAL_BASE, precision);
  var roundMultiplier = precisionMultiplier * DECIMAL_BASE;
  var intermediateValue = value * roundMultiplier / DECIMAL_BASE;
  return roundByAbs(intermediateValue) / precisionMultiplier;
}

function toFixed(value, precision) {
  var valuePrecision = precision || 0;
  var adjustedValue = valuePrecision > 0 ? adjustValue.apply(void 0, arguments) : value;
  return adjustedValue.toFixed(valuePrecision);
}

/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.FunctionTemplate = void 0;

var _template_base = __webpack_require__(43);

var _dom = __webpack_require__(21);

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var FunctionTemplate = /*#__PURE__*/function (_TemplateBase) {
  _inheritsLoose(FunctionTemplate, _TemplateBase);

  function FunctionTemplate(render) {
    var _this;

    _this = _TemplateBase.call(this) || this;
    _this._render = render;
    return _this;
  }

  var _proto = FunctionTemplate.prototype;

  _proto._renderCore = function _renderCore(options) {
    return (0, _dom.normalizeTemplateElement)(this._render(options));
  };

  return FunctionTemplate;
}(_template_base.TemplateBase);

exports.FunctionTemplate = FunctionTemplate;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.acquireTemplate = exports.acquireIntegrationTemplate = exports.defaultCreateElement = exports.templateKey = exports.validateTemplateSource = exports.getNormalizedTemplateArgs = exports.addOneRenderedCall = exports.suitableTemplatesByName = exports.findTemplates = void 0;

var _config = _interopRequireDefault(__webpack_require__(18));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _errors = _interopRequireDefault(__webpack_require__(13));

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _child_default_template = __webpack_require__(160);

var _empty_template = __webpack_require__(52);

var _template = __webpack_require__(161);

var _template_base = __webpack_require__(43);

var _array = __webpack_require__(12);

var _common = __webpack_require__(3);

var _dom = __webpack_require__(21);

var _extend = __webpack_require__(2);

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var findTemplates = function findTemplates(element, name) {
  var optionsAttributeName = 'data-options';
  var templates = (0, _renderer.default)(element).contents().filter("[".concat(optionsAttributeName, "*=\"").concat(name, "\"]"));
  return [].slice.call(templates).map(function (element) {
    var optionsString = (0, _renderer.default)(element).attr(optionsAttributeName) || '';
    return {
      element: element,
      options: (0, _config.default)().optionsParser(optionsString)[name]
    };
  }).filter(function (template) {
    return !!template.options;
  });
};

exports.findTemplates = findTemplates;

var suitableTemplatesByName = function suitableTemplatesByName(rawTemplates) {
  var templatesMap = (0, _array.groupBy)(rawTemplates, function (template) {
    return template.options.name;
  });

  if (templatesMap[undefined]) {
    throw _errors.default.Error('E0023');
  }

  var result = {};
  Object.keys(templatesMap).forEach(function (name) {
    var _findBestMatches$;

    var suitableTemplate = (_findBestMatches$ = (0, _common.findBestMatches)(_devices.default.current(), templatesMap[name], function (template) {
      return template.options;
    })[0]) === null || _findBestMatches$ === void 0 ? void 0 : _findBestMatches$.element;

    if (suitableTemplate) {
      result[name] = suitableTemplate;
    }
  });
  return result;
};

exports.suitableTemplatesByName = suitableTemplatesByName;

var addOneRenderedCall = function addOneRenderedCall(template) {
  var _render = template.render.bind(template);

  return (0, _extend.extend)({}, template, {
    render: function render(options) {
      var templateResult = _render(options);

      options && options.onRendered && options.onRendered();
      return templateResult;
    }
  });
};

exports.addOneRenderedCall = addOneRenderedCall;

var getNormalizedTemplateArgs = function getNormalizedTemplateArgs(options) {
  var args = [];

  if ('model' in options) {
    args.push(options.model);
  }

  if ('index' in options) {
    args.push(options.index);
  }

  args.push(options.container);
  return args;
};

exports.getNormalizedTemplateArgs = getNormalizedTemplateArgs;

var validateTemplateSource = function validateTemplateSource(templateSource) {
  return typeof templateSource === 'string' ? (0, _dom.normalizeTemplateElement)(templateSource) : templateSource;
};

exports.validateTemplateSource = validateTemplateSource;

var templateKey = function templateKey(templateSource) {
  return (0, _type.isRenderer)(templateSource) && templateSource[0] || templateSource;
};

exports.templateKey = templateKey;

var defaultCreateElement = function defaultCreateElement(element) {
  return new _template.Template(element);
};

exports.defaultCreateElement = defaultCreateElement;

var acquireIntegrationTemplate = function acquireIntegrationTemplate(templateSource, templates, isAsyncTemplate, skipTemplates) {
  var integrationTemplate = null;

  if (!skipTemplates || skipTemplates.indexOf(templateSource) === -1) {
    integrationTemplate = templates[templateSource];

    if (integrationTemplate && !(integrationTemplate instanceof _template_base.TemplateBase) && !isAsyncTemplate) {
      integrationTemplate = addOneRenderedCall(integrationTemplate);
    }
  }

  return integrationTemplate;
};

exports.acquireIntegrationTemplate = acquireIntegrationTemplate;

var acquireTemplate = function acquireTemplate(templateSource, createTemplate, templates, isAsyncTemplate, skipTemplates, defaultTemplates) {
  if (templateSource == null) {
    return new _empty_template.EmptyTemplate();
  }

  if (templateSource instanceof _child_default_template.ChildDefaultTemplate) {
    return defaultTemplates[templateSource.name];
  }

  if (templateSource instanceof _template_base.TemplateBase) {
    return templateSource;
  } // TODO: templateSource.render is needed for angular2 integration. Try to remove it after supporting TypeScript modules.


  if ((0, _type.isFunction)(templateSource.render) && !(0, _type.isRenderer)(templateSource)) {
    return isAsyncTemplate ? templateSource : addOneRenderedCall(templateSource);
  }

  if (templateSource.nodeType || (0, _type.isRenderer)(templateSource)) {
    return createTemplate((0, _renderer.default)(templateSource));
  }

  return acquireIntegrationTemplate(templateSource, templates, isAsyncTemplate, skipTemplates) || defaultTemplates[templateSource] || createTemplate(templateSource);
};

exports.acquireTemplate = acquireTemplate;

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.registerTemplateEngine = registerTemplateEngine;
exports.setTemplateEngine = setTemplateEngine;
exports.getCurrentTemplateEngine = getCurrentTemplateEngine;

var _type = __webpack_require__(1);

var _errors = _interopRequireDefault(__webpack_require__(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var templateEngines = {};
var currentTemplateEngine;

function registerTemplateEngine(name, templateEngine) {
  templateEngines[name] = templateEngine;
}

function setTemplateEngine(templateEngine) {
  if ((0, _type.isString)(templateEngine)) {
    currentTemplateEngine = templateEngines[templateEngine];

    if (!currentTemplateEngine) {
      throw _errors.default.Error('E0020', templateEngine);
    }
  } else {
    currentTemplateEngine = templateEngine;
  }
}

function getCurrentTemplateEngine() {
  return currentTemplateEngine;
}

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.end = exports.start = void 0;

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _element_data = __webpack_require__(25);

var _class = _interopRequireDefault(__webpack_require__(11));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _event_registrator = _interopRequireDefault(__webpack_require__(38));

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HOVERSTART_NAMESPACE = 'dxHoverStart';
var HOVERSTART = 'dxhoverstart';
exports.start = HOVERSTART;
var POINTERENTER_NAMESPACED_EVENT_NAME = (0, _index.addNamespace)(_pointer.default.enter, HOVERSTART_NAMESPACE);
var HOVEREND_NAMESPACE = 'dxHoverEnd';
var HOVEREND = 'dxhoverend';
exports.end = HOVEREND;
var POINTERLEAVE_NAMESPACED_EVENT_NAME = (0, _index.addNamespace)(_pointer.default.leave, HOVEREND_NAMESPACE);

var Hover = _class.default.inherit({
  noBubble: true,
  ctor: function ctor() {
    this._handlerArrayKeyPath = this._eventNamespace + '_HandlerStore';
  },
  setup: function setup(element) {
    (0, _element_data.data)(element, this._handlerArrayKeyPath, {});
  },
  add: function add(element, handleObj) {
    var that = this;

    var handler = function handler(e) {
      that._handler(e);
    };

    _events_engine.default.on(element, this._originalEventName, handleObj.selector, handler);

    (0, _element_data.data)(element, this._handlerArrayKeyPath)[handleObj.guid] = handler;
  },
  _handler: function _handler(e) {
    if ((0, _index.isTouchEvent)(e) || _devices.default.isSimulator()) {
      return;
    }

    (0, _index.fireEvent)({
      type: this._eventName,
      originalEvent: e,
      delegateTarget: e.delegateTarget
    });
  },
  remove: function remove(element, handleObj) {
    var handler = (0, _element_data.data)(element, this._handlerArrayKeyPath)[handleObj.guid];

    _events_engine.default.off(element, this._originalEventName, handleObj.selector, handler);
  },
  teardown: function teardown(element) {
    (0, _element_data.removeData)(element, this._handlerArrayKeyPath);
  }
});

var HoverStart = Hover.inherit({
  ctor: function ctor() {
    this._eventNamespace = HOVERSTART_NAMESPACE;
    this._eventName = HOVERSTART;
    this._originalEventName = POINTERENTER_NAMESPACED_EVENT_NAME;
    this.callBase();
  },
  _handler: function _handler(e) {
    var pointers = e.pointers || [];

    if (!pointers.length) {
      this.callBase(e);
    }
  }
});
var HoverEnd = Hover.inherit({
  ctor: function ctor() {
    this._eventNamespace = HOVEREND_NAMESPACE;
    this._eventName = HOVEREND;
    this._originalEventName = POINTERLEAVE_NAMESPACED_EVENT_NAME;
    this.callBase();
  }
});
/**
 * @name UI Events.dxhoverstart
 * @type eventType
 * @type_function_param1 event:event
 * @module events/hover
*/

/**
 * @name UI Events.dxhoverend
 * @type eventType
 * @type_function_param1 event:event
 * @module events/hover
*/

(0, _event_registrator.default)(HOVERSTART, new HoverStart());
(0, _event_registrator.default)(HOVEREND, new HoverEnd());

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _ready_callbacks = _interopRequireDefault(__webpack_require__(24));

var _translator = __webpack_require__(16);

var _ui = _interopRequireDefault(__webpack_require__(42));

var _index = __webpack_require__(6);

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _extend = __webpack_require__(2);

var _pointer = _interopRequireDefault(__webpack_require__(22));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SCROLLBAR = 'dxScrollbar';
var SCROLLABLE_SCROLLBAR_CLASS = 'dx-scrollable-scrollbar';
var SCROLLABLE_SCROLLBAR_ACTIVE_CLASS = "".concat(SCROLLABLE_SCROLLBAR_CLASS, "-active");
var SCROLLABLE_SCROLL_CLASS = 'dx-scrollable-scroll';
var SCROLLABLE_SCROLL_CONTENT_CLASS = 'dx-scrollable-scroll-content';
var HOVER_ENABLED_STATE = 'dx-scrollbar-hoverable';
var HORIZONTAL = 'horizontal';
var THUMB_MIN_SIZE = 15;
var SCROLLBAR_VISIBLE = {
  onScroll: 'onScroll',
  onHover: 'onHover',
  always: 'always',
  never: 'never'
};
var activeScrollbar = null;

var Scrollbar = _ui.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      direction: null,
      visible: false,
      activeStateEnabled: false,
      visibilityMode: SCROLLBAR_VISIBLE.onScroll,
      containerSize: 0,
      contentSize: 0,
      expandable: true,
      scaleRatio: 1
    });
  },
  _init: function _init() {
    this.callBase();
    this._isHovered = false;
  },
  _initMarkup: function _initMarkup() {
    this._renderThumb();

    this.callBase();
  },
  _render: function _render() {
    this.callBase();

    this._renderDirection();

    this._update();

    this._attachPointerDownHandler();

    this.option('hoverStateEnabled', this._isHoverMode());
    this.$element().toggleClass(HOVER_ENABLED_STATE, this.option('hoverStateEnabled'));
  },
  _renderThumb: function _renderThumb() {
    this._$thumb = (0, _renderer.default)('<div>').addClass(SCROLLABLE_SCROLL_CLASS);
    (0, _renderer.default)('<div>').addClass(SCROLLABLE_SCROLL_CONTENT_CLASS).appendTo(this._$thumb);
    this.$element().addClass(SCROLLABLE_SCROLLBAR_CLASS).append(this._$thumb);
  },
  isThumb: function isThumb($element) {
    return !!this.$element().find($element).length;
  },
  _isHoverMode: function _isHoverMode() {
    var visibilityMode = this.option('visibilityMode');
    return (visibilityMode === SCROLLBAR_VISIBLE.onHover || visibilityMode === SCROLLBAR_VISIBLE.always) && this.option('expandable');
  },
  _renderDirection: function _renderDirection() {
    var direction = this.option('direction');
    this.$element().addClass('dx-scrollbar-' + direction);
    this._dimension = direction === HORIZONTAL ? 'width' : 'height';
    this._prop = direction === HORIZONTAL ? 'left' : 'top';
  },
  _attachPointerDownHandler: function _attachPointerDownHandler() {
    _events_engine.default.on(this._$thumb, (0, _index.addNamespace)(_pointer.default.down, SCROLLBAR), this.feedbackOn.bind(this));
  },
  feedbackOn: function feedbackOn() {
    this.$element().addClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);
    activeScrollbar = this;
  },
  feedbackOff: function feedbackOff() {
    this.$element().removeClass(SCROLLABLE_SCROLLBAR_ACTIVE_CLASS);
    activeScrollbar = null;
  },
  cursorEnter: function cursorEnter() {
    this._isHovered = true;

    if (this._needScrollbar()) {
      this.option('visible', true);
    }
  },
  cursorLeave: function cursorLeave() {
    this._isHovered = false;
    this.option('visible', false);
  },
  _renderDimensions: function _renderDimensions() {
    this._$thumb.css({
      width: this.option('width'),
      height: this.option('height')
    });
  },
  _toggleVisibility: function _toggleVisibility(visible) {
    if (this.option('visibilityMode') === SCROLLBAR_VISIBLE.onScroll) {
      // NOTE: need to relayout thumb and show it instantly
      this._$thumb.css('opacity');
    }

    visible = this._adjustVisibility(visible);
    this.option().visible = visible;

    this._$thumb.toggleClass('dx-state-invisible', !visible);
  },
  _adjustVisibility: function _adjustVisibility(visible) {
    if (this._baseContainerToContentRatio && !this._needScrollbar()) {
      return false;
    }

    switch (this.option('visibilityMode')) {
      case SCROLLBAR_VISIBLE.onScroll:
        break;

      case SCROLLBAR_VISIBLE.onHover:
        visible = visible || !!this._isHovered;
        break;

      case SCROLLBAR_VISIBLE.never:
        visible = false;
        break;

      case SCROLLBAR_VISIBLE.always:
        visible = true;
        break;
    }

    return visible;
  },
  moveTo: function moveTo(location) {
    if (this._isHidden()) {
      return;
    }

    if ((0, _type.isPlainObject)(location)) {
      location = location[this._prop] || 0;
    }

    var scrollBarLocation = {};
    scrollBarLocation[this._prop] = this._calculateScrollBarPosition(location);
    (0, _translator.move)(this._$thumb, scrollBarLocation);
  },
  _calculateScrollBarPosition: function _calculateScrollBarPosition(location) {
    return -location * this._thumbRatio;
  },
  _update: function _update() {
    var containerSize = Math.round(this.option('containerSize'));
    var contentSize = Math.round(this.option('contentSize'));
    var baseContainerSize = Math.round(this.option('baseContainerSize'));
    var baseContentSize = Math.round(this.option('baseContentSize')); // NOTE: if current scrollbar's using outside of scrollable

    if (isNaN(baseContainerSize)) {
      baseContainerSize = containerSize;
      baseContentSize = contentSize;
    }

    this._baseContainerToContentRatio = baseContentSize ? baseContainerSize / baseContentSize : baseContainerSize;
    this._realContainerToContentRatio = contentSize ? containerSize / contentSize : containerSize;
    var thumbSize = Math.round(Math.max(Math.round(containerSize * this._realContainerToContentRatio), THUMB_MIN_SIZE));
    this._thumbRatio = (containerSize - thumbSize) / (this.option('scaleRatio') * (contentSize - containerSize));
    this.option(this._dimension, thumbSize / this.option('scaleRatio'));
    this.$element().css('display', this._needScrollbar() ? '' : 'none');
  },
  _isHidden: function _isHidden() {
    return this.option('visibilityMode') === SCROLLBAR_VISIBLE.never;
  },
  _needScrollbar: function _needScrollbar() {
    return !this._isHidden() && this._baseContainerToContentRatio < 1;
  },
  containerToContentRatio: function containerToContentRatio() {
    return this._realContainerToContentRatio;
  },
  _normalizeSize: function _normalizeSize(size) {
    return (0, _type.isPlainObject)(size) ? size[this._dimension] || 0 : size;
  },
  _clean: function _clean() {
    this.callBase();

    if (this === activeScrollbar) {
      activeScrollbar = null;
    }

    _events_engine.default.off(this._$thumb, '.' + SCROLLBAR);
  },
  _optionChanged: function _optionChanged(args) {
    if (this._isHidden()) {
      return;
    }

    switch (args.name) {
      case 'containerSize':
      case 'contentSize':
        this.option()[args.name] = this._normalizeSize(args.value);

        this._update();

        break;

      case 'baseContentSize':
      case 'baseContainerSize':
        this._update();

        break;

      case 'visibilityMode':
      case 'direction':
        this._invalidate();

        break;

      case 'scaleRatio':
        this._update();

        break;

      default:
        this.callBase.apply(this, arguments);
    }
  },
  update: (0, _common.deferRenderer)(function () {
    this._adjustVisibility() && this.option('visible', true);
  })
});

_ready_callbacks.default.add(function () {
  _events_engine.default.subscribeGlobal(_dom_adapter.default.getDocument(), (0, _index.addNamespace)(_pointer.default.up, SCROLLBAR), function () {
    if (activeScrollbar) {
      activeScrollbar.feedbackOff();
    }
  });
});

var _default = Scrollbar;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _call_once = _interopRequireDefault(__webpack_require__(32));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getScrollRtlBehavior = (0, _call_once.default)(function () {
  var document = _dom_adapter.default.getDocument();
  /* Append a RTL scrollable 1px square containing a 2px-wide child and check
     the initial scrollLeft and whether it's possible to set a negative one.*/


  document.body.insertAdjacentHTML('beforeend', "<div style='direction: rtl;\n       position: absolute; left: 0; top: -1; overflow: hidden; width: 1px;\n       height: 1px;'><div style='width: 2px; height: 1px;'></div></div>");
  var scroller = document.body.lastElementChild;
  var initiallyPositive = scroller.scrollLeft > 0;
  scroller.scrollLeft = -1;
  var hasNegative = scroller.scrollLeft < 0;
  var result = {
    'decreasing': hasNegative || initiallyPositive,
    'positive': !hasNegative
  };
  document.body.removeChild(scroller);
  return result;
});
var _default = getScrollRtlBehavior;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.FRAME_DURATION = exports.MIN_VELOCITY_LIMIT = exports.ACCELERATION = exports.SimulatedStrategy = exports.Scroller = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _inflector = __webpack_require__(47);

var _extend = __webpack_require__(2);

var _window = __webpack_require__(7);

var _iterator = __webpack_require__(4);

var _type = __webpack_require__(1);

var _position = __webpack_require__(29);

var _translator = __webpack_require__(16);

var _class = _interopRequireDefault(__webpack_require__(11));

var _animator = _interopRequireDefault(__webpack_require__(110));

var _index = __webpack_require__(6);

var _common = __webpack_require__(3);

var _ui = _interopRequireDefault(__webpack_require__(107));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SCROLLABLE_SIMULATED = 'dxSimulatedScrollable';
var SCROLLABLE_STRATEGY = 'dxScrollableStrategy';
var SCROLLABLE_SIMULATED_CURSOR = SCROLLABLE_SIMULATED + 'Cursor';
var SCROLLABLE_SIMULATED_KEYBOARD = SCROLLABLE_SIMULATED + 'Keyboard';
var SCROLLABLE_SIMULATED_CLASS = 'dx-scrollable-simulated';
var SCROLLABLE_SCROLLBARS_ALWAYSVISIBLE = 'dx-scrollable-scrollbars-alwaysvisible';
var SCROLLABLE_SCROLLBAR_CLASS = 'dx-scrollable-scrollbar';
var VERTICAL = 'vertical';
var HORIZONTAL = 'horizontal';
var ACCELERATION = 0.92;
exports.ACCELERATION = ACCELERATION;
var OUT_BOUNDS_ACCELERATION = 0.5;
var MIN_VELOCITY_LIMIT = 1;
exports.MIN_VELOCITY_LIMIT = MIN_VELOCITY_LIMIT;
var FRAME_DURATION = Math.round(1000 / 60);
exports.FRAME_DURATION = FRAME_DURATION;
var SCROLL_LINE_HEIGHT = 40;
var VALIDATE_WHEEL_TIMEOUT = 500;
var BOUNCE_MIN_VELOCITY_LIMIT = MIN_VELOCITY_LIMIT / 5;
var BOUNCE_DURATION = 400;
var BOUNCE_FRAMES = BOUNCE_DURATION / FRAME_DURATION;
var BOUNCE_ACCELERATION_SUM = (1 - Math.pow(ACCELERATION, BOUNCE_FRAMES)) / (1 - ACCELERATION);
var KEY_CODES = {
  PAGE_UP: 'pageUp',
  PAGE_DOWN: 'pageDown',
  END: 'end',
  HOME: 'home',
  LEFT: 'leftArrow',
  UP: 'upArrow',
  RIGHT: 'rightArrow',
  DOWN: 'downArrow',
  TAB: 'tab'
};

var InertiaAnimator = _animator.default.inherit({
  ctor: function ctor(scroller) {
    this.callBase();
    this.scroller = scroller;
  },
  VELOCITY_LIMIT: MIN_VELOCITY_LIMIT,
  _isFinished: function _isFinished() {
    return Math.abs(this.scroller._velocity) <= this.VELOCITY_LIMIT;
  },
  _step: function _step() {
    this.scroller._scrollStep(this.scroller._velocity);

    this.scroller._velocity *= this._acceleration();
  },
  _acceleration: function _acceleration() {
    return this.scroller._inBounds() ? ACCELERATION : OUT_BOUNDS_ACCELERATION;
  },
  _complete: function _complete() {
    this.scroller._scrollComplete();
  }
});

var BounceAnimator = InertiaAnimator.inherit({
  VELOCITY_LIMIT: BOUNCE_MIN_VELOCITY_LIMIT,
  _isFinished: function _isFinished() {
    return this.scroller._crossBoundOnNextStep() || this.callBase();
  },
  _acceleration: function _acceleration() {
    return ACCELERATION;
  },
  _complete: function _complete() {
    this.scroller._move(this.scroller._bounceLocation);

    this.callBase();
  }
});

var Scroller = _class.default.inherit({
  ctor: function ctor(options) {
    this._initOptions(options);

    this._initAnimators();

    this._initScrollbar();
  },
  _initOptions: function _initOptions(options) {
    var _this = this;

    this._location = 0;
    this._topReached = false;
    this._bottomReached = false;
    this._axis = options.direction === HORIZONTAL ? 'x' : 'y';
    this._prop = options.direction === HORIZONTAL ? 'left' : 'top';
    this._dimension = options.direction === HORIZONTAL ? 'width' : 'height';
    this._scrollProp = options.direction === HORIZONTAL ? 'scrollLeft' : 'scrollTop';
    (0, _iterator.each)(options, function (optionName, optionValue) {
      _this['_' + optionName] = optionValue;
    });
  },
  _initAnimators: function _initAnimators() {
    this._inertiaAnimator = new InertiaAnimator(this);
    this._bounceAnimator = new BounceAnimator(this);
  },
  _initScrollbar: function _initScrollbar() {
    this._scrollbar = new _ui.default((0, _renderer.default)('<div>').appendTo(this._$container), {
      direction: this._direction,
      visible: this._scrollByThumb,
      visibilityMode: this._visibilityModeNormalize(this._scrollbarVisible),
      expandable: this._scrollByThumb
    });
    this._$scrollbar = this._scrollbar.$element();
  },
  _visibilityModeNormalize: function _visibilityModeNormalize(mode) {
    return mode === true ? 'onScroll' : mode === false ? 'never' : mode;
  },
  _scrollStep: function _scrollStep(delta) {
    var prevLocation = this._location;
    this._location += delta;

    this._suppressBounce();

    this._move();

    if (Math.abs(prevLocation - this._location) < 1) {
      return;
    }

    _events_engine.default.triggerHandler(this._$container, {
      type: 'scroll'
    });
  },
  _suppressBounce: function _suppressBounce() {
    if (this._bounceEnabled || this._inBounds(this._location)) {
      return;
    }

    this._velocity = 0;
    this._location = this._boundLocation();
  },
  _boundLocation: function _boundLocation(location) {
    location = location !== undefined ? location : this._location;
    return Math.max(Math.min(location, this._maxOffset), this._minOffset);
  },
  _move: function _move(location) {
    this._location = location !== undefined ? location * this._getScaleRatio() : this._location;

    this._moveContent();

    this._moveScrollbar();
  },
  _moveContent: function _moveContent() {
    var location = this._location;

    this._$container[this._scrollProp](-location / this._getScaleRatio());

    this._moveContentByTranslator(location);
  },
  _getScaleRatio: function _getScaleRatio() {
    if ((0, _window.hasWindow)() && !this._scaleRatio) {
      var element = this._$element.get(0);

      var realDimension = this._getRealDimension(element, this._dimension);

      var baseDimension = this._getBaseDimension(element, this._dimension); // NOTE: Ratio can be a fractional number, which leads to inaccuracy in the calculation of sizes.
      //       We should round it to hundredths in order to reduce the inaccuracy and prevent the unexpected appearance of a scrollbar.


      this._scaleRatio = Math.round(realDimension / baseDimension * 100) / 100;
    }

    return this._scaleRatio || 1;
  },
  _getRealDimension: function _getRealDimension(element, dimension) {
    return Math.round((0, _position.getBoundingRect)(element)[dimension]);
  },
  _getBaseDimension: function _getBaseDimension(element, dimension) {
    var dimensionName = 'offset' + (0, _inflector.titleize)(dimension);
    return element[dimensionName];
  },
  _moveContentByTranslator: function _moveContentByTranslator(location) {
    var translateOffset;
    var minOffset = -this._maxScrollPropValue;

    if (location > 0) {
      translateOffset = location;
    } else if (location <= minOffset) {
      translateOffset = location - minOffset;
    } else {
      translateOffset = location % 1;
    }

    if (this._translateOffset === translateOffset) {
      return;
    }

    var targetLocation = {};
    targetLocation[this._prop] = translateOffset;
    this._translateOffset = translateOffset;

    if (translateOffset === 0) {
      (0, _translator.resetPosition)(this._$content);
      return;
    }

    (0, _translator.move)(this._$content, targetLocation);
  },
  _moveScrollbar: function _moveScrollbar() {
    this._scrollbar.moveTo(this._location);
  },
  _scrollComplete: function _scrollComplete() {
    if (this._inBounds()) {
      this._hideScrollbar();

      if (this._completeDeferred) {
        this._completeDeferred.resolve();
      }
    }

    this._scrollToBounds();
  },
  _scrollToBounds: function _scrollToBounds() {
    if (this._inBounds()) {
      return;
    }

    this._bounceAction();

    this._setupBounce();

    this._bounceAnimator.start();
  },
  _setupBounce: function _setupBounce() {
    var boundLocation = this._bounceLocation = this._boundLocation();

    var bounceDistance = boundLocation - this._location;
    this._velocity = bounceDistance / BOUNCE_ACCELERATION_SUM;
  },
  _inBounds: function _inBounds(location) {
    location = location !== undefined ? location : this._location;
    return this._boundLocation(location) === location;
  },
  _crossBoundOnNextStep: function _crossBoundOnNextStep() {
    var location = this._location;
    var nextLocation = location + this._velocity;
    return location < this._minOffset && nextLocation >= this._minOffset || location > this._maxOffset && nextLocation <= this._maxOffset;
  },
  _initHandler: function _initHandler(e) {
    this._stopScrolling();

    this._prepareThumbScrolling(e);
  },
  _stopScrolling: (0, _common.deferRenderer)(function () {
    this._hideScrollbar();

    this._inertiaAnimator.stop();

    this._bounceAnimator.stop();
  }),
  _prepareThumbScrolling: function _prepareThumbScrolling(e) {
    if ((0, _index.isDxMouseWheelEvent)(e.originalEvent)) {
      return;
    }

    var $target = (0, _renderer.default)(e.originalEvent.target);

    var scrollbarClicked = this._isScrollbar($target);

    if (scrollbarClicked) {
      this._moveToMouseLocation(e);
    }

    this._thumbScrolling = scrollbarClicked || this._isThumb($target);
    this._crossThumbScrolling = !this._thumbScrolling && this._isAnyThumbScrolling($target);

    if (this._thumbScrolling) {
      this._scrollbar.feedbackOn();
    }
  },
  _isThumbScrollingHandler: function _isThumbScrollingHandler($target) {
    return this._isThumb($target);
  },
  _moveToMouseLocation: function _moveToMouseLocation(e) {
    var mouseLocation = e['page' + this._axis.toUpperCase()] - this._$element.offset()[this._prop];

    var location = this._location + mouseLocation / this._containerToContentRatio() - this._$container.height() / 2;

    this._scrollStep(-Math.round(location));
  },
  _startHandler: function _startHandler() {
    this._showScrollbar();
  },
  _moveHandler: function _moveHandler(delta) {
    if (this._crossThumbScrolling) {
      return;
    }

    if (this._thumbScrolling) {
      delta[this._axis] = -Math.round(delta[this._axis] / this._containerToContentRatio());
    }

    this._scrollBy(delta);
  },
  _scrollBy: function _scrollBy(delta) {
    delta = delta[this._axis];

    if (!this._inBounds()) {
      delta *= OUT_BOUNDS_ACCELERATION;
    }

    this._scrollStep(delta);
  },
  _scrollByHandler: function _scrollByHandler(delta) {
    this._scrollBy(delta);

    this._scrollComplete();
  },
  _containerToContentRatio: function _containerToContentRatio() {
    return this._scrollbar.containerToContentRatio();
  },
  _endHandler: function _endHandler(velocity) {
    this._completeDeferred = new _deferred.Deferred();
    this._velocity = velocity[this._axis];

    this._inertiaHandler();

    this._resetThumbScrolling();

    return this._completeDeferred.promise();
  },
  _inertiaHandler: function _inertiaHandler() {
    this._suppressInertia();

    this._inertiaAnimator.start();
  },
  _suppressInertia: function _suppressInertia() {
    if (!this._inertiaEnabled || this._thumbScrolling) {
      this._velocity = 0;
    }
  },
  _resetThumbScrolling: function _resetThumbScrolling() {
    this._thumbScrolling = false;
    this._crossThumbScrolling = false;
  },
  _stopHandler: function _stopHandler() {
    if (this._thumbScrolling) {
      this._scrollComplete();
    }

    this._resetThumbScrolling();

    this._scrollToBounds();
  },
  _disposeHandler: function _disposeHandler() {
    this._stopScrolling();

    this._$scrollbar.remove();
  },
  _updateHandler: function _updateHandler() {
    this._update();

    this._moveToBounds();
  },
  _update: function _update() {
    var _this2 = this;

    this._stopScrolling();

    return (0, _common.deferUpdate)(function () {
      _this2._resetScaleRatio();

      _this2._updateLocation();

      _this2._updateBounds();

      _this2._updateScrollbar();

      (0, _common.deferRender)(function () {
        _this2._moveScrollbar();

        _this2._scrollbar.update();
      });
    });
  },
  _resetScaleRatio: function _resetScaleRatio() {
    this._scaleRatio = null;
  },
  _updateLocation: function _updateLocation() {
    this._location = ((0, _translator.locate)(this._$content)[this._prop] - this._$container[this._scrollProp]()) * this._getScaleRatio();
  },
  _updateBounds: function _updateBounds() {
    this._maxOffset = Math.round(this._getMaxOffset());
    this._minOffset = Math.round(this._getMinOffset());
  },
  _getMaxOffset: function _getMaxOffset() {
    return 0;
  },
  _getMinOffset: function _getMinOffset() {
    this._maxScrollPropValue = Math.max(this._contentSize() - this._containerSize(), 0);
    return -this._maxScrollPropValue;
  },
  _updateScrollbar: (0, _common.deferUpdater)(function () {
    var _this3 = this;

    var containerSize = this._containerSize();

    var contentSize = this._contentSize(); // NOTE: Real container and content sizes can be a fractional number when scaling.
    //       Let's save sizes when scale = 100% to decide whether it is necessary to show
    //       the scrollbar based on by more precise numbers. We can do it because the container
    //       size to content size ratio should remain approximately the same at any zoom.


    var baseContainerSize = this._getBaseDimension(this._$container.get(0), this._dimension);

    var baseContentSize = this._getBaseDimension(this._$content.get(0), this._dimension);

    (0, _common.deferRender)(function () {
      _this3._scrollbar.option({
        containerSize: containerSize,
        contentSize: contentSize,
        baseContainerSize: baseContainerSize,
        baseContentSize: baseContentSize,
        scaleRatio: _this3._getScaleRatio()
      });
    });
  }),
  _moveToBounds: (0, _common.deferRenderer)((0, _common.deferUpdater)((0, _common.deferRenderer)(function () {
    var location = this._boundLocation();

    var locationChanged = location !== this._location;
    this._location = location;

    this._move();

    if (locationChanged) {
      this._scrollAction();
    }
  }))),
  _createActionsHandler: function _createActionsHandler(actions) {
    this._scrollAction = actions.scroll;
    this._bounceAction = actions.bounce;
  },
  _showScrollbar: function _showScrollbar() {
    this._scrollbar.option('visible', true);
  },
  _hideScrollbar: function _hideScrollbar() {
    this._scrollbar.option('visible', false);
  },
  _containerSize: function _containerSize() {
    return this._getRealDimension(this._$container.get(0), this._dimension);
  },
  _contentSize: function _contentSize() {
    var isOverflowHidden = this._$content.css('overflow' + this._axis.toUpperCase()) === 'hidden';

    var contentSize = this._getRealDimension(this._$content.get(0), this._dimension);

    if (!isOverflowHidden) {
      var containerScrollSize = this._$content[0]['scroll' + (0, _inflector.titleize)(this._dimension)] * this._getScaleRatio();

      contentSize = Math.max(containerScrollSize, contentSize);
    }

    return contentSize;
  },
  _validateEvent: function _validateEvent(e) {
    var $target = (0, _renderer.default)(e.originalEvent.target);
    return this._isThumb($target) || this._isScrollbar($target) || this._isContent($target);
  },
  _isThumb: function _isThumb($element) {
    return this._scrollByThumb && this._scrollbar.isThumb($element);
  },
  _isScrollbar: function _isScrollbar($element) {
    return this._scrollByThumb && $element && $element.is(this._$scrollbar);
  },
  _isContent: function _isContent($element) {
    return this._scrollByContent && !!$element.closest(this._$element).length;
  },
  _reachedMin: function _reachedMin() {
    return this._location <= this._minOffset;
  },
  _reachedMax: function _reachedMax() {
    return this._location >= this._maxOffset;
  },
  _cursorEnterHandler: function _cursorEnterHandler() {
    this._resetScaleRatio();

    this._updateScrollbar();

    this._scrollbar.cursorEnter();
  },
  _cursorLeaveHandler: function _cursorLeaveHandler() {
    this._scrollbar.cursorLeave();
  },
  dispose: _common.noop
});

exports.Scroller = Scroller;
var hoveredScrollable;
var activeScrollable;

var SimulatedStrategy = _class.default.inherit({
  ctor: function ctor(scrollable) {
    this._init(scrollable);
  },
  _init: function _init(scrollable) {
    this._component = scrollable;
    this._$element = scrollable.$element();
    this._$container = (0, _renderer.default)(scrollable.container());
    this._$wrapper = scrollable._$wrapper;
    this._$content = scrollable.$content();
    this.option = scrollable.option.bind(scrollable);
    this._createActionByOption = scrollable._createActionByOption.bind(scrollable);
    this._isLocked = scrollable._isLocked.bind(scrollable);
    this._isDirection = scrollable._isDirection.bind(scrollable);
    this._allowedDirection = scrollable._allowedDirection.bind(scrollable);
    this._getMaxOffset = scrollable._getMaxOffset.bind(scrollable);
  },
  render: function render() {
    this._$element.addClass(SCROLLABLE_SIMULATED_CLASS);

    this._createScrollers();

    if (this.option('useKeyboard')) {
      this._$container.prop('tabIndex', 0);
    }

    this._attachKeyboardHandler();

    this._attachCursorHandlers();
  },
  _createScrollers: function _createScrollers() {
    this._scrollers = {};

    if (this._isDirection(HORIZONTAL)) {
      this._createScroller(HORIZONTAL);
    }

    if (this._isDirection(VERTICAL)) {
      this._createScroller(VERTICAL);
    }

    this._$element.toggleClass(SCROLLABLE_SCROLLBARS_ALWAYSVISIBLE, this.option('showScrollbar') === 'always');
  },
  _createScroller: function _createScroller(direction) {
    this._scrollers[direction] = new Scroller(this._scrollerOptions(direction));
  },
  _scrollerOptions: function _scrollerOptions(direction) {
    return {
      direction: direction,
      $content: this._$content,
      $container: this._$container,
      $wrapper: this._$wrapper,
      $element: this._$element,
      scrollByContent: this.option('scrollByContent'),
      scrollByThumb: this.option('scrollByThumb'),
      scrollbarVisible: this.option('showScrollbar'),
      bounceEnabled: this.option('bounceEnabled'),
      inertiaEnabled: this.option('inertiaEnabled'),
      isAnyThumbScrolling: this._isAnyThumbScrolling.bind(this)
    };
  },
  _applyScaleRatio: function _applyScaleRatio(targetLocation) {
    for (var direction in this._scrollers) {
      var prop = this._getPropByDirection(direction);

      if ((0, _type.isDefined)(targetLocation[prop])) {
        var scroller = this._scrollers[direction];
        targetLocation[prop] *= scroller._getScaleRatio();
      }
    }

    return targetLocation;
  },
  _isAnyThumbScrolling: function _isAnyThumbScrolling($target) {
    var result = false;

    this._eventHandler('isThumbScrolling', $target).done(function (isThumbScrollingVertical, isThumbScrollingHorizontal) {
      result = isThumbScrollingVertical || isThumbScrollingHorizontal;
    });

    return result;
  },
  handleInit: function handleInit(e) {
    this._suppressDirections(e);

    this._eventForUserAction = e;

    this._eventHandler('init', e);
  },
  _suppressDirections: function _suppressDirections(e) {
    if ((0, _index.isDxMouseWheelEvent)(e.originalEvent)) {
      this._prepareDirections(true);

      return;
    }

    this._prepareDirections();

    this._eachScroller(function (scroller, direction) {
      var isValid = scroller._validateEvent(e);

      this._validDirections[direction] = isValid;
    });
  },
  _prepareDirections: function _prepareDirections(value) {
    value = value || false;
    this._validDirections = {};
    this._validDirections[HORIZONTAL] = value;
    this._validDirections[VERTICAL] = value;
  },
  _eachScroller: function _eachScroller(callback) {
    callback = callback.bind(this);
    (0, _iterator.each)(this._scrollers, function (direction, scroller) {
      callback(scroller, direction);
    });
  },
  handleStart: function handleStart(e) {
    this._eventForUserAction = e;

    this._eventHandler('start').done(this._startAction);
  },
  _saveActive: function _saveActive() {
    activeScrollable = this;
  },
  _resetActive: function _resetActive() {
    if (activeScrollable === this) {
      activeScrollable = null;
    }
  },
  handleMove: function handleMove(e) {
    if (this._isLocked()) {
      e.cancel = true;

      this._resetActive();

      return;
    }

    this._saveActive();

    e.preventDefault && e.preventDefault();

    this._adjustDistance(e, e.delta);

    this._eventForUserAction = e;

    this._eventHandler('move', e.delta);
  },
  _adjustDistance: function _adjustDistance(e, distance) {
    distance.x *= this._validDirections[HORIZONTAL];
    distance.y *= this._validDirections[VERTICAL];

    var devicePixelRatio = this._tryGetDevicePixelRatio();

    if (devicePixelRatio && (0, _index.isDxMouseWheelEvent)(e.originalEvent)) {
      distance.x = Math.round(distance.x / devicePixelRatio * 100) / 100;
      distance.y = Math.round(distance.y / devicePixelRatio * 100) / 100;
    }
  },
  _tryGetDevicePixelRatio: function _tryGetDevicePixelRatio() {
    if ((0, _window.hasWindow)()) {
      return (0, _window.getWindow)().devicePixelRatio;
    }
  },
  handleEnd: function handleEnd(e) {
    this._resetActive();

    this._refreshCursorState(e.originalEvent && e.originalEvent.target);

    this._adjustDistance(e, e.velocity);

    this._eventForUserAction = e;
    return this._eventHandler('end', e.velocity).done(this._endAction);
  },
  handleCancel: function handleCancel(e) {
    this._resetActive();

    this._eventForUserAction = e;
    return this._eventHandler('end', {
      x: 0,
      y: 0
    });
  },
  handleStop: function handleStop() {
    this._resetActive();

    this._eventHandler('stop');
  },
  handleScroll: function handleScroll() {
    this._updateRtlConfig();

    this._scrollAction();
  },
  _attachKeyboardHandler: function _attachKeyboardHandler() {
    _events_engine.default.off(this._$element, ".".concat(SCROLLABLE_SIMULATED_KEYBOARD));

    if (!this.option('disabled') && this.option('useKeyboard')) {
      _events_engine.default.on(this._$element, (0, _index.addNamespace)('keydown', SCROLLABLE_SIMULATED_KEYBOARD), this._keyDownHandler.bind(this));
    }
  },
  _keyDownHandler: function _keyDownHandler(e) {
    var _this4 = this;

    clearTimeout(this._updateHandlerTimeout);
    this._updateHandlerTimeout = setTimeout(function () {
      if ((0, _index.normalizeKeyName)(e) === KEY_CODES.TAB) {
        _this4._eachScroller(function (scroller) {
          scroller._updateHandler();
        });
      }
    });

    if (!this._$container.is(_dom_adapter.default.getActiveElement())) {
      return;
    }

    var handled = true;

    switch ((0, _index.normalizeKeyName)(e)) {
      case KEY_CODES.DOWN:
        this._scrollByLine({
          y: 1
        });

        break;

      case KEY_CODES.UP:
        this._scrollByLine({
          y: -1
        });

        break;

      case KEY_CODES.RIGHT:
        this._scrollByLine({
          x: 1
        });

        break;

      case KEY_CODES.LEFT:
        this._scrollByLine({
          x: -1
        });

        break;

      case KEY_CODES.PAGE_DOWN:
        this._scrollByPage(1);

        break;

      case KEY_CODES.PAGE_UP:
        this._scrollByPage(-1);

        break;

      case KEY_CODES.HOME:
        this._scrollToHome();

        break;

      case KEY_CODES.END:
        this._scrollToEnd();

        break;

      default:
        handled = false;
        break;
    }

    if (handled) {
      e.stopPropagation();
      e.preventDefault();
    }
  },
  _scrollByLine: function _scrollByLine(lines) {
    var devicePixelRatio = this._tryGetDevicePixelRatio();

    var scrollOffset = SCROLL_LINE_HEIGHT;

    if (devicePixelRatio) {
      scrollOffset = Math.abs(scrollOffset / devicePixelRatio * 100) / 100;
    }

    this.scrollBy({
      top: (lines.y || 0) * -scrollOffset,
      left: (lines.x || 0) * -scrollOffset
    });
  },
  _scrollByPage: function _scrollByPage(page) {
    var prop = this._wheelProp();

    var dimension = this._dimensionByProp(prop);

    var distance = {};
    distance[prop] = page * -this._$container[dimension]();
    this.scrollBy(distance);
  },
  _dimensionByProp: function _dimensionByProp(prop) {
    return prop === 'left' ? 'width' : 'height';
  },
  _getPropByDirection: function _getPropByDirection(direction) {
    return direction === HORIZONTAL ? 'left' : 'top';
  },
  _scrollToHome: function _scrollToHome() {
    var prop = this._wheelProp();

    var distance = {};
    distance[prop] = 0;

    this._component.scrollTo(distance);
  },
  _scrollToEnd: function _scrollToEnd() {
    var prop = this._wheelProp();

    var dimension = this._dimensionByProp(prop);

    var distance = {};
    distance[prop] = this._$content[dimension]() - this._$container[dimension]();

    this._component.scrollTo(distance);
  },
  createActions: function createActions() {
    this._startAction = this._createActionHandler('onStart');
    this._endAction = this._createActionHandler('onEnd');
    this._updateAction = this._createActionHandler('onUpdated');

    this._createScrollerActions();
  },
  _createScrollerActions: function _createScrollerActions() {
    this._scrollAction = this._createActionHandler('onScroll');
    this._bounceAction = this._createActionHandler('onBounce');

    this._eventHandler('createActions', {
      scroll: this._scrollAction,
      bounce: this._bounceAction
    });
  },
  _createActionHandler: function _createActionHandler(optionName) {
    var _arguments = arguments,
        _this5 = this;

    var actionHandler = this._createActionByOption(optionName);

    return function () {
      actionHandler((0, _extend.extend)(_this5._createActionArgs(), _arguments));
    };
  },
  _createActionArgs: function _createActionArgs() {
    var _this$_scrollers = this._scrollers,
        scrollerX = _this$_scrollers.horizontal,
        scrollerY = _this$_scrollers.vertical;

    var offset = this._getScrollOffset();

    this._scrollOffset = {
      top: scrollerY && offset.top,
      left: scrollerX && offset.left
    };
    return {
      event: this._eventForUserAction,
      scrollOffset: this._scrollOffset,
      reachedLeft: scrollerX && scrollerX._reachedMax(),
      reachedRight: scrollerX && scrollerX._reachedMin(),
      reachedTop: scrollerY && scrollerY._reachedMax(),
      reachedBottom: scrollerY && scrollerY._reachedMin()
    };
  },
  _getScrollOffset: function _getScrollOffset() {
    return {
      top: -this.location().top,
      left: -this.location().left
    };
  },
  _eventHandler: function _eventHandler(eventName) {
    var args = [].slice.call(arguments).slice(1);
    var deferreds = (0, _iterator.map)(this._scrollers, function (scroller) {
      return scroller['_' + eventName + 'Handler'].apply(scroller, args);
    });
    return _deferred.when.apply(_renderer.default, deferreds).promise();
  },
  location: function location() {
    var location = (0, _translator.locate)(this._$content);
    location.top -= this._$container.scrollTop();
    location.left -= this._$container.scrollLeft();
    return location;
  },
  disabledChanged: function disabledChanged() {
    this._attachCursorHandlers();
  },
  _attachCursorHandlers: function _attachCursorHandlers() {
    _events_engine.default.off(this._$element, ".".concat(SCROLLABLE_SIMULATED_CURSOR));

    if (!this.option('disabled') && this._isHoverMode()) {
      _events_engine.default.on(this._$element, (0, _index.addNamespace)('mouseenter', SCROLLABLE_SIMULATED_CURSOR), this._cursorEnterHandler.bind(this));

      _events_engine.default.on(this._$element, (0, _index.addNamespace)('mouseleave', SCROLLABLE_SIMULATED_CURSOR), this._cursorLeaveHandler.bind(this));
    }
  },
  _isHoverMode: function _isHoverMode() {
    return this.option('showScrollbar') === 'onHover';
  },
  _cursorEnterHandler: function _cursorEnterHandler(e) {
    e = e || {};
    e.originalEvent = e.originalEvent || {};

    if (activeScrollable || e.originalEvent._hoverHandled) {
      return;
    }

    if (hoveredScrollable) {
      hoveredScrollable._cursorLeaveHandler();
    }

    hoveredScrollable = this;

    this._eventHandler('cursorEnter');

    e.originalEvent._hoverHandled = true;
  },
  _cursorLeaveHandler: function _cursorLeaveHandler(e) {
    if (hoveredScrollable !== this || activeScrollable === hoveredScrollable) {
      return;
    }

    this._eventHandler('cursorLeave');

    hoveredScrollable = null;

    this._refreshCursorState(e && e.relatedTarget);
  },
  _refreshCursorState: function _refreshCursorState(target) {
    if (!this._isHoverMode() && (!target || activeScrollable)) {
      return;
    }

    var $target = (0, _renderer.default)(target);
    var $scrollable = $target.closest(".".concat(SCROLLABLE_SIMULATED_CLASS, ":not(.dx-state-disabled)"));
    var targetScrollable = $scrollable.length && $scrollable.data(SCROLLABLE_STRATEGY);

    if (hoveredScrollable && hoveredScrollable !== targetScrollable) {
      hoveredScrollable._cursorLeaveHandler();
    }

    if (targetScrollable) {
      targetScrollable._cursorEnterHandler();
    }
  },
  update: function update() {
    var _this6 = this;

    var result = this._eventHandler('update').done(this._updateAction);

    return (0, _deferred.when)(result, (0, _common.deferUpdate)(function () {
      var allowedDirections = _this6._allowedDirections();

      (0, _common.deferRender)(function () {
        var touchDirection = allowedDirections.vertical ? 'pan-x' : '';
        touchDirection = allowedDirections.horizontal ? 'pan-y' : touchDirection;
        touchDirection = allowedDirections.vertical && allowedDirections.horizontal ? 'none' : touchDirection;

        _this6._$container.css('touchAction', touchDirection);
      });
      return (0, _deferred.when)().promise();
    }));
  },
  _allowedDirections: function _allowedDirections() {
    var bounceEnabled = this.option('bounceEnabled');
    var verticalScroller = this._scrollers[VERTICAL];
    var horizontalScroller = this._scrollers[HORIZONTAL];
    return {
      vertical: verticalScroller && (verticalScroller._minOffset < 0 || bounceEnabled),
      horizontal: horizontalScroller && (horizontalScroller._minOffset < 0 || bounceEnabled)
    };
  },
  _updateBounds: function _updateBounds() {
    this._scrollers[HORIZONTAL] && this._scrollers[HORIZONTAL]._updateBounds();
  },
  _isHorizontalAndRtlEnabled: function _isHorizontalAndRtlEnabled() {
    return this.option('rtlEnabled') && this.option('direction') !== VERTICAL;
  },
  updateRtlPosition: function updateRtlPosition(needInitializeRtlConfig) {
    var _this7 = this;

    if (needInitializeRtlConfig) {
      this._rtlConfig = {
        scrollRight: 0,
        clientWidth: this._$container.get(0).clientWidth,
        windowPixelRatio: this._getWindowDevicePixelRatio()
      };
    }

    this._updateBounds();

    if (this._isHorizontalAndRtlEnabled()) {
      (0, _common.deferUpdate)(function () {
        var scrollLeft = _this7._getMaxOffset().left - _this7._rtlConfig.scrollRight;

        if (scrollLeft <= 0) {
          scrollLeft = 0;
          _this7._rtlConfig.scrollRight = _this7._getMaxOffset().left;
        }

        (0, _common.deferRender)(function () {
          if (_this7._getScrollOffset().left !== scrollLeft) {
            _this7._rtlConfig.skipUpdating = true;

            _this7._component.scrollTo({
              left: scrollLeft
            });

            _this7._rtlConfig.skipUpdating = false;
          }
        });
      });
    }
  },
  _updateRtlConfig: function _updateRtlConfig() {
    if (this._isHorizontalAndRtlEnabled() && !this._rtlConfig.skipUpdating) {
      var _this$_$container$get = this._$container.get(0),
          clientWidth = _this$_$container$get.clientWidth,
          scrollLeft = _this$_$container$get.scrollLeft;

      var windowPixelRatio = this._getWindowDevicePixelRatio();

      if (this._rtlConfig.windowPixelRatio === windowPixelRatio && this._rtlConfig.clientWidth === clientWidth) {
        this._rtlConfig.scrollRight = this._getMaxOffset().left - scrollLeft;
      }

      this._rtlConfig.clientWidth = clientWidth;
      this._rtlConfig.windowPixelRatio = windowPixelRatio;
    }
  },
  _getWindowDevicePixelRatio: function _getWindowDevicePixelRatio() {
    return (0, _window.hasWindow)() ? (0, _window.getWindow)().devicePixelRatio : 1;
  },
  scrollBy: function scrollBy(distance) {
    var verticalScroller = this._scrollers[VERTICAL];
    var horizontalScroller = this._scrollers[HORIZONTAL];

    if (verticalScroller) {
      distance.top = verticalScroller._boundLocation(distance.top + verticalScroller._location) - verticalScroller._location;
    }

    if (horizontalScroller) {
      distance.left = horizontalScroller._boundLocation(distance.left + horizontalScroller._location) - horizontalScroller._location;
    }

    this._prepareDirections(true);

    this._startAction();

    this._eventHandler('scrollBy', {
      x: distance.left,
      y: distance.top
    });

    this._endAction();

    this._updateRtlConfig();
  },
  validate: function validate(e) {
    if ((0, _index.isDxMouseWheelEvent)(e) && (0, _index.isCommandKeyPressed)(e)) {
      return false;
    }

    if (this.option('disabled')) {
      return false;
    }

    if (this.option('bounceEnabled')) {
      return true;
    }

    return (0, _index.isDxMouseWheelEvent)(e) ? this._validateWheel(e) : this._validateMove(e);
  },
  _validateWheel: function _validateWheel(e) {
    var _this8 = this;

    var scroller = this._scrollers[this._wheelDirection(e)];

    var reachedMin = scroller._reachedMin();

    var reachedMax = scroller._reachedMax();

    var contentGreaterThanContainer = !reachedMin || !reachedMax;
    var locatedNotAtBound = !reachedMin && !reachedMax;
    var scrollFromMin = reachedMin && e.delta > 0;
    var scrollFromMax = reachedMax && e.delta < 0;
    var validated = contentGreaterThanContainer && (locatedNotAtBound || scrollFromMin || scrollFromMax);
    validated = validated || this._validateWheelTimer !== undefined;

    if (validated) {
      clearTimeout(this._validateWheelTimer);
      this._validateWheelTimer = setTimeout(function () {
        _this8._validateWheelTimer = undefined;
      }, VALIDATE_WHEEL_TIMEOUT);
    }

    return validated;
  },
  _validateMove: function _validateMove(e) {
    if (!this.option('scrollByContent') && !(0, _renderer.default)(e.target).closest(".".concat(SCROLLABLE_SCROLLBAR_CLASS)).length) {
      return false;
    }

    return this._allowedDirection();
  },
  getDirection: function getDirection(e) {
    return (0, _index.isDxMouseWheelEvent)(e) ? this._wheelDirection(e) : this._allowedDirection();
  },
  _wheelProp: function _wheelProp() {
    return this._wheelDirection() === HORIZONTAL ? 'left' : 'top';
  },
  _wheelDirection: function _wheelDirection(e) {
    switch (this.option('direction')) {
      case HORIZONTAL:
        return HORIZONTAL;

      case VERTICAL:
        return VERTICAL;

      default:
        return e && e.shiftKey ? HORIZONTAL : VERTICAL;
    }
  },
  dispose: function dispose() {
    this._resetActive();

    if (hoveredScrollable === this) {
      hoveredScrollable = null;
    }

    this._eventHandler('dispose');

    this._detachEventHandlers();

    this._$element.removeClass(SCROLLABLE_SIMULATED_CLASS);

    this._eventForUserAction = null;
    clearTimeout(this._validateWheelTimer);
    clearTimeout(this._updateHandlerTimeout);
  },
  _detachEventHandlers: function _detachEventHandlers() {
    _events_engine.default.off(this._$element, ".".concat(SCROLLABLE_SIMULATED_CURSOR));

    _events_engine.default.off(this._$container, ".".concat(SCROLLABLE_SIMULATED_KEYBOARD));
  }
}); ///#DEBUG
///#ENDDEBUG


exports.SimulatedStrategy = SimulatedStrategy;

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _common = __webpack_require__(3);

var _class = _interopRequireDefault(__webpack_require__(11));

var _frame = __webpack_require__(55);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var abstract = _class.default.abstract;

var Animator = _class.default.inherit({
  ctor: function ctor() {
    this._finished = true;
    this._stopped = false;
    this._proxiedStepCore = this._stepCore.bind(this);
  },
  start: function start() {
    this._stopped = false;
    this._finished = false;

    this._stepCore();
  },
  stop: function stop() {
    this._stopped = true;
    (0, _frame.cancelAnimationFrame)(this._stepAnimationFrame);
  },
  _stepCore: function _stepCore() {
    if (this._isStopped()) {
      this._stop();

      return;
    }

    if (this._isFinished()) {
      this._finished = true;

      this._complete();

      return;
    }

    this._step();

    this._stepAnimationFrame = (0, _frame.requestAnimationFrame)(this._proxiedStepCore);
  },
  _step: abstract,
  _isFinished: _common.noop,
  _stop: _common.noop,
  _complete: _common.noop,
  _isStopped: function _isStopped() {
    return this._stopped;
  },
  inProgress: function inProgress() {
    return !(this._stopped || this._finished);
  }
});

var _default = Animator;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.deviceDependentOptions = void 0;

var _devices = _interopRequireDefault(__webpack_require__(10));

var _support = __webpack_require__(34);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var deviceDependentOptions = function deviceDependentOptions() {
  return [{
    device: function device() {
      return !_support.nativeScrolling;
    },
    options: {
      useNative: false
    }
  }, {
    device: function device(_device) {
      return !_devices.default.isSimulator() && _devices.default.real().deviceType === 'desktop' && _device.platform === 'generic';
    },
    options: {
      bounceEnabled: false,
      scrollByThumb: true,
      scrollByContent: _support.touch,
      showScrollbar: 'onHover'
    }
  }];
};

exports.deviceDependentOptions = deviceDependentOptions;

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.DataSource = void 0;

var _class = _interopRequireDefault(__webpack_require__(11));

var _extend = __webpack_require__(2);

var _common = __webpack_require__(3);

var _iterator = __webpack_require__(4);

var _type = __webpack_require__(1);

var _utils = __webpack_require__(27);

var _array_utils = __webpack_require__(66);

var _custom_store = _interopRequireDefault(__webpack_require__(113));

var _events_strategy = __webpack_require__(49);

var _errors = __webpack_require__(36);

var _array = __webpack_require__(12);

var _queue = __webpack_require__(179);

var _deferred = __webpack_require__(9);

var _operation_manager = _interopRequireDefault(__webpack_require__(180));

var _utils2 = __webpack_require__(67);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var DataSource = _class.default.inherit({
  /**
  * @name DataSource.ctor
  * @publicName ctor(url)
  * @param1 url:string
  * @hidden
  */

  /**
  * @name DataSource.ctor
  * @publicName ctor(data)
  * @param1 data:Array<any>
  * @hidden
  */

  /**
  * @name DataSource.ctor
  * @publicName ctor(store)
  * @param1 store:Store
  * @hidden
  */

  /**
  * @name DataSource.ctor
  * @publicName ctor(options)
  * @param1 options:CustomStoreOptions|DataSourceOptions
  * @hidden
  */
  ctor: function ctor(options) {
    var _this = this,
        _options$reshapeOnPus;

    options = (0, _utils2.normalizeDataSourceOptions)(options);
    this._eventsStrategy = new _events_strategy.EventsStrategy(this, {
      syncStrategy: true
    });
    /**
    * @name DataSourceOptions.store.type
    * @type Enums.DataSourceStoreType
    */

    this._store = options.store;
    this._changedTime = 0;
    var needThrottling = options.pushAggregationTimeout !== 0;

    if (needThrottling) {
      var throttlingTimeout = options.pushAggregationTimeout === undefined ? function () {
        return _this._changedTime * 5;
      } : options.pushAggregationTimeout;
      var pushDeferred;
      var lastPushWaiters;
      var throttlingPushHandler = (0, _utils.throttleChanges)(function (changes) {
        pushDeferred.resolve();

        var storePushPending = _deferred.when.apply(void 0, _toConsumableArray(lastPushWaiters));

        storePushPending.done(function () {
          return _this._onPush(changes);
        });
        lastPushWaiters = undefined;
        pushDeferred = undefined;
      }, throttlingTimeout);

      this._onPushHandler = function (args) {
        _this._aggregationTimeoutId = throttlingPushHandler(args.changes);

        if (!pushDeferred) {
          pushDeferred = new _deferred.Deferred();
        }

        lastPushWaiters = args.waitFor;
        args.waitFor.push(pushDeferred.promise());
      };

      this._store.on('beforePush', this._onPushHandler);
    } else {
      this._onPushHandler = function (changes) {
        return _this._onPush(changes);
      };

      this._store.on('push', this._onPushHandler);
    }

    this._storeLoadOptions = this._extractLoadOptions(options);
    this._mapFunc = options.map;
    this._postProcessFunc = options.postProcess;
    this._pageIndex = options.pageIndex !== undefined ? options.pageIndex : 0;
    this._pageSize = options.pageSize !== undefined ? options.pageSize : 20;
    this._loadingCount = 0;
    this._loadQueue = this._createLoadQueue();
    this._searchValue = 'searchValue' in options ? options.searchValue : null;
    this._searchOperation = options.searchOperation || 'contains';
    this._searchExpr = options.searchExpr;
    this._paginate = options.paginate;
    this._reshapeOnPush = (_options$reshapeOnPus = options.reshapeOnPush) !== null && _options$reshapeOnPus !== void 0 ? _options$reshapeOnPus : false;
    (0, _iterator.each)(['onChanged', 'onLoadError', 'onLoadingChanged', 'onCustomizeLoadResult', 'onCustomizeStoreLoadOptions'], function (_, optionName) {
      if (optionName in options) {
        _this.on(optionName.substr(2, 1).toLowerCase() + optionName.substr(3), options[optionName]);
      }
    });
    this._operationManager = new _operation_manager.default();

    this._init();
  },
  _init: function _init() {
    this._items = [];
    this._userData = {};
    this._totalCount = -1;
    this._isLoaded = false;

    if (!(0, _type.isDefined)(this._paginate)) {
      this._paginate = !this.group();
    }

    this._isLastPage = !this._paginate;
  },
  dispose: function dispose() {
    var _this$_delayedLoadTas;

    this._store.off('beforePush', this._onPushHandler);

    this._store.off('push', this._onPushHandler);

    this._eventsStrategy.dispose();

    clearTimeout(this._aggregationTimeoutId);
    delete this._store;
    (_this$_delayedLoadTas = this._delayedLoadTask) === null || _this$_delayedLoadTas === void 0 ? void 0 : _this$_delayedLoadTas.abort();

    this._operationManager.cancelAll();

    this._disposed = true;
  },
  _extractLoadOptions: function _extractLoadOptions(options) {
    var result = {};
    var names = ['sort', 'filter', 'select', 'group', 'requireTotalCount'];

    var customNames = this._store._customLoadOptions();

    if (customNames) {
      names = names.concat(customNames);
    }

    (0, _iterator.each)(names, function () {
      result[this] = options[this];
    });
    return result;
  },
  loadOptions: function loadOptions() {
    return this._storeLoadOptions;
  },
  items: function items() {
    return this._items;
  },
  pageIndex: function pageIndex(newIndex) {
    if (!(0, _type.isNumeric)(newIndex)) {
      return this._pageIndex;
    }

    this._pageIndex = newIndex;
    this._isLastPage = !this._paginate;
  },
  paginate: function paginate(value) {
    if (!(0, _type.isBoolean)(value)) {
      return this._paginate;
    }

    if (this._paginate !== value) {
      this._paginate = value;
      this.pageIndex(0);
    }
  },
  pageSize: function pageSize(value) {
    if (!(0, _type.isNumeric)(value)) {
      return this._pageSize;
    }

    this._pageSize = value;
  },
  isLastPage: function isLastPage() {
    return this._isLastPage;
  },
  generateStoreLoadOptionAccessor: function generateStoreLoadOptionAccessor(optionName) {
    var _this2 = this;

    return function (args) {
      var normalizedArgs = (0, _utils2.normalizeStoreLoadOptionAccessorArguments)(args);

      if (normalizedArgs === undefined) {
        return _this2._storeLoadOptions[optionName];
      }

      _this2._storeLoadOptions[optionName] = normalizedArgs;
    };
  },
  sort: function sort() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return this.generateStoreLoadOptionAccessor('sort')(args);
  },
  filter: function filter() {
    var newFilter = (0, _utils2.normalizeStoreLoadOptionAccessorArguments)(arguments);

    if (newFilter === undefined) {
      return this._storeLoadOptions.filter;
    }

    this._storeLoadOptions.filter = newFilter;
    this.pageIndex(0);
  },
  group: function group() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return this.generateStoreLoadOptionAccessor('group')(args);
  },
  select: function select() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return this.generateStoreLoadOptionAccessor('select')(args);
  },
  requireTotalCount: function requireTotalCount(value) {
    if (!(0, _type.isBoolean)(value)) {
      return this._storeLoadOptions.requireTotalCount;
    }

    this._storeLoadOptions.requireTotalCount = value;
  },
  searchValue: function searchValue(value) {
    if (arguments.length < 1) {
      return this._searchValue;
    }

    this._searchValue = value;
    this.pageIndex(0);
  },
  searchOperation: function searchOperation(op) {
    if (!(0, _type.isString)(op)) {
      return this._searchOperation;
    }

    this._searchOperation = op;
    this.pageIndex(0);
  },
  searchExpr: function searchExpr(expr) {
    var argc = arguments.length;

    if (argc === 0) {
      return this._searchExpr;
    }

    if (argc > 1) {
      expr = [].slice.call(arguments);
    }

    this._searchExpr = expr;
    this.pageIndex(0);
  },
  store: function store() {
    return this._store;
  },
  key: function key() {
    var _this$_store;

    return (_this$_store = this._store) === null || _this$_store === void 0 ? void 0 : _this$_store.key();
  },
  totalCount: function totalCount() {
    return this._totalCount;
  },
  isLoaded: function isLoaded() {
    return this._isLoaded;
  },
  isLoading: function isLoading() {
    return this._loadingCount > 0;
  },
  beginLoading: function beginLoading() {
    this._changeLoadingCount(1);
  },
  endLoading: function endLoading() {
    this._changeLoadingCount(-1);
  },
  _createLoadQueue: function _createLoadQueue() {
    return (0, _queue.create)();
  },
  _changeLoadingCount: function _changeLoadingCount(increment) {
    var oldLoading = this.isLoading();
    this._loadingCount += increment;
    var newLoading = this.isLoading();

    if (oldLoading ^ newLoading) {
      this._eventsStrategy.fireEvent('loadingChanged', [newLoading]);
    }
  },
  _scheduleLoadCallbacks: function _scheduleLoadCallbacks(deferred) {
    var _this3 = this;

    this.beginLoading();
    deferred.always(function () {
      _this3.endLoading();
    });
  },
  _scheduleFailCallbacks: function _scheduleFailCallbacks(deferred) {
    var _this4 = this;

    deferred.fail(function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      if (args[0] === _utils2.CANCELED_TOKEN) {
        return;
      }

      _this4._eventsStrategy.fireEvent('loadError', args);
    });
  },
  _fireChanged: function _fireChanged(args) {
    var date = new Date();

    this._eventsStrategy.fireEvent('changed', args);

    this._changedTime = new Date() - date;
  },
  _scheduleChangedCallbacks: function _scheduleChangedCallbacks(deferred) {
    var _this5 = this;

    deferred.done(function () {
      return _this5._fireChanged();
    });
  },
  loadSingle: function loadSingle(propName, propValue) {
    var _this6 = this;

    var d = new _deferred.Deferred();
    var key = this.key();
    var store = this._store;

    var options = this._createStoreLoadOptions();

    var handleDone = function handleDone(data) {
      if (!(0, _type.isDefined)(data) || (0, _array.isEmpty)(data)) {
        d.reject(new _errors.errors.Error('E4009'));
      } else {
        if (!Array.isArray(data)) {
          data = [data];
        }

        d.resolve(_this6._applyMapFunction(data)[0]);
      }
    };

    this._scheduleFailCallbacks(d);

    if (arguments.length < 2) {
      propValue = propName;
      propName = key;
    }

    delete options.skip;
    delete options.group;
    delete options.refresh;
    delete options.pageIndex;
    delete options.searchString;

    var shouldForceByKey = function shouldForceByKey() {
      return store instanceof _custom_store.default && !store._byKeyViaLoad();
    };

    (function () {
      // NOTE for CustomStore always using byKey for backward compatibility with "old user datasource"
      if (propName === key || shouldForceByKey()) {
        return store.byKey(propValue, options);
      }

      options.take = 1;
      options.filter = options.filter ? [options.filter, [propName, propValue]] : [propName, propValue];
      return store.load(options);
    })().fail(d.reject).done(handleDone);
    return d.promise();
  },
  load: function load() {
    var _this7 = this;

    var d = new _deferred.Deferred();

    var loadTask = function loadTask() {
      if (_this7._disposed) {
        return undefined;
      }

      if (!(0, _utils2.isPending)(d)) {
        return;
      }

      return _this7._loadFromStore(loadOperation, d);
    };

    this._scheduleLoadCallbacks(d);

    this._scheduleFailCallbacks(d);

    this._scheduleChangedCallbacks(d);

    var loadOperation = this._createLoadOperation(d);

    this._eventsStrategy.fireEvent('customizeStoreLoadOptions', [loadOperation]);

    this._loadQueue.add(function () {
      if (typeof loadOperation.delay === 'number') {
        _this7._delayedLoadTask = (0, _common.executeAsync)(loadTask, loadOperation.delay);
      } else {
        loadTask();
      }

      return d.promise();
    });

    return d.promise({
      operationId: loadOperation.operationId
    });
  },
  _onPush: function _onPush(changes) {
    var _this8 = this;

    if (this._reshapeOnPush) {
      this.load();
    } else {
      this._eventsStrategy.fireEvent('changing', [{
        changes: changes
      }]);

      var group = this.group();
      var items = this.items();
      var groupLevel = 0;
      var dataSourceChanges = this.paginate() || group ? changes.filter(function (item) {
        return item.type === 'update';
      }) : changes;

      if (group) {
        groupLevel = Array.isArray(group) ? group.length : 1;
      }

      if (this._mapFunc) {
        dataSourceChanges.forEach(function (item) {
          if (item.type === 'insert') {
            item.data = _this8._mapFunc(item.data);
          }
        });
      }

      (0, _array_utils.applyBatch)({
        keyInfo: this.store(),
        data: items,
        changes: dataSourceChanges,
        groupCount: groupLevel,
        useInsertIndex: true
      });

      this._fireChanged([{
        changes: changes
      }]);
    }
  },
  _createLoadOperation: function _createLoadOperation(deferred) {
    var _this9 = this;

    var operationId = this._operationManager.add(deferred);

    var storeLoadOptions = this._createStoreLoadOptions();

    deferred.always(function () {
      return _this9._operationManager.remove(operationId);
    });
    return {
      operationId: operationId,
      storeLoadOptions: storeLoadOptions
    };
  },
  reload: function reload() {
    var store = this.store();

    if (store instanceof _custom_store.default) {
      store.clearRawDataCache();
    }

    this._init();

    return this.load();
  },
  cancel: function cancel(operationId) {
    return this._operationManager.cancel(operationId);
  },
  cancelAll: function cancelAll() {
    return this._operationManager.cancelAll();
  },
  _addSearchOptions: function _addSearchOptions(storeLoadOptions) {
    if (this._disposed) {
      return;
    }

    if (this.store()._useDefaultSearch) {
      this._addSearchFilter(storeLoadOptions);
    } else {
      storeLoadOptions.searchOperation = this._searchOperation;
      storeLoadOptions.searchValue = this._searchValue;
      storeLoadOptions.searchExpr = this._searchExpr;
    }
  },
  _createStoreLoadOptions: function _createStoreLoadOptions() {
    var result = (0, _extend.extend)({}, this._storeLoadOptions);

    this._addSearchOptions(result);

    if (this._paginate) {
      if (this._pageSize) {
        result.skip = this._pageIndex * this._pageSize;
        result.take = this._pageSize;
      }
    }

    result.userData = this._userData;
    return result;
  },
  _addSearchFilter: function _addSearchFilter(storeLoadOptions) {
    var value = this._searchValue;
    var op = this._searchOperation;
    var selector = this._searchExpr;
    var searchFilter = [];

    if (!value) {
      return;
    }

    if (!selector) {
      selector = 'this';
    }

    if (!Array.isArray(selector)) {
      selector = [selector];
    } // TODO optimize for byKey case


    (0, _iterator.each)(selector, function (i, item) {
      if (searchFilter.length) {
        searchFilter.push('or');
      }

      searchFilter.push([item, op, value]);
    });

    if (storeLoadOptions.filter) {
      storeLoadOptions.filter = [searchFilter, storeLoadOptions.filter];
    } else {
      storeLoadOptions.filter = searchFilter;
    }
  },
  _loadFromStore: function _loadFromStore(loadOptions, pendingDeferred) {
    var _this10 = this;

    var handleSuccess = function handleSuccess(data, extra) {
      if (_this10._disposed) {
        return;
      }

      if (!(0, _utils2.isPending)(pendingDeferred)) {
        return;
      } // Process result


      var loadResult = (0, _extend.extend)((0, _utils2.normalizeLoadResult)(data, extra), loadOptions);

      _this10._eventsStrategy.fireEvent('customizeLoadResult', [loadResult]);

      (0, _deferred.when)(loadResult.data).done(function (data) {
        loadResult.data = data;

        _this10._processStoreLoadResult(loadResult, pendingDeferred);
      }).fail(pendingDeferred.reject);
    };

    if (loadOptions.data) {
      return new _deferred.Deferred().resolve(loadOptions.data).done(handleSuccess);
    }

    return this.store().load(loadOptions.storeLoadOptions).done(handleSuccess).fail(pendingDeferred.reject);
  },
  _processStoreLoadResult: function _processStoreLoadResult(loadResult, pendingDeferred) {
    var _this11 = this;

    var data = loadResult.data;
    var extra = loadResult.extra;
    var storeLoadOptions = loadResult.storeLoadOptions;

    var resolvePendingDeferred = function resolvePendingDeferred() {
      _this11._isLoaded = true;
      _this11._totalCount = isFinite(extra.totalCount) ? extra.totalCount : -1;
      return pendingDeferred.resolve(data, extra);
    };

    var proceedLoadingTotalCount = function proceedLoadingTotalCount() {
      _this11.store().totalCount(storeLoadOptions).done(function (count) {
        extra.totalCount = count;
        resolvePendingDeferred();
      }).fail(pendingDeferred.reject);
    };

    if (this._disposed) {
      return;
    } // todo: if operation is canceled there is no need to do data transformation


    data = this._applyPostProcessFunction(this._applyMapFunction(data));

    if (!(0, _type.isPlainObject)(extra)) {
      extra = {};
    }

    this._items = data;

    if (!data.length || !this._paginate || this._pageSize && data.length < this._pageSize) {
      this._isLastPage = true;
    }

    if (storeLoadOptions.requireTotalCount && !isFinite(extra.totalCount)) {
      proceedLoadingTotalCount();
    } else {
      resolvePendingDeferred();
    }
  },
  _applyMapFunction: function _applyMapFunction(data) {
    if (this._mapFunc) {
      return (0, _utils2.mapDataRespectingGrouping)(data, this._mapFunc, this.group());
    }

    return data;
  },
  _applyPostProcessFunction: function _applyPostProcessFunction(data) {
    if (this._postProcessFunc) {
      return this._postProcessFunc(data);
    }

    return data;
  },
  on: function on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);

    return this;
  },
  off: function off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);

    return this;
  }
});

exports.DataSource = DataSource;

/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _utils = __webpack_require__(27);

var _array_utils = __webpack_require__(66);

var _type = __webpack_require__(1);

var _config = _interopRequireDefault(__webpack_require__(18));

var _errors = __webpack_require__(36);

var _abstract_store = _interopRequireDefault(__webpack_require__(83));

var _array_query = _interopRequireDefault(__webpack_require__(54));

var _store_helper = _interopRequireDefault(__webpack_require__(74));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TOTAL_COUNT = 'totalCount';
var LOAD = 'load';
var BY_KEY = 'byKey';
var INSERT = 'insert';
var UPDATE = 'update';
var REMOVE = 'remove';

function isPromise(obj) {
  return obj && (0, _type.isFunction)(obj.then);
}

function trivialPromise(value) {
  return new _deferred.Deferred().resolve(value).promise();
}

function ensureRequiredFuncOption(name, obj) {
  if (!(0, _type.isFunction)(obj)) {
    throw _errors.errors.Error('E4011', name);
  }
}

function throwInvalidUserFuncResult(name) {
  throw _errors.errors.Error('E4012', name);
}

function createUserFuncFailureHandler(pendingDeferred) {
  function errorMessageFromXhr(promiseArguments) {
    var xhr = promiseArguments[0];
    var textStatus = promiseArguments[1];

    if (!xhr || !xhr.getResponseHeader) {
      return null;
    }

    return (0, _utils.errorMessageFromXhr)(xhr, textStatus);
  }

  return function (arg) {
    var error;

    if (arg instanceof Error) {
      error = arg;
    } else {
      error = new Error(errorMessageFromXhr(arguments) || arg && String(arg) || 'Unknown error');
    }

    if (error.message !== _utils.XHR_ERROR_UNLOAD) {
      pendingDeferred.reject(error);
    }
  };
}

function invokeUserLoad(store, options) {
  var userFunc = store._loadFunc;
  var userResult;
  ensureRequiredFuncOption(LOAD, userFunc);
  userResult = userFunc.apply(store, [options]);

  if (Array.isArray(userResult)) {
    userResult = trivialPromise(userResult);
  } else if (userResult === null || userResult === undefined) {
    userResult = trivialPromise([]);
  } else {
    if (!isPromise(userResult)) {
      throwInvalidUserFuncResult(LOAD);
    }
  }

  return (0, _deferred.fromPromise)(userResult);
}

function invokeUserTotalCountFunc(store, options) {
  var userFunc = store._totalCountFunc;
  var userResult;

  if (!(0, _type.isFunction)(userFunc)) {
    throw _errors.errors.Error('E4021');
  }

  userResult = userFunc.apply(store, [options]);

  if (!isPromise(userResult)) {
    userResult = Number(userResult);

    if (!isFinite(userResult)) {
      throwInvalidUserFuncResult(TOTAL_COUNT);
    }

    userResult = trivialPromise(userResult);
  }

  return (0, _deferred.fromPromise)(userResult);
}

function invokeUserByKeyFunc(store, key, extraOptions) {
  var userFunc = store._byKeyFunc;
  var userResult;
  ensureRequiredFuncOption(BY_KEY, userFunc);
  userResult = userFunc.apply(store, [key, extraOptions]);

  if (!isPromise(userResult)) {
    userResult = trivialPromise(userResult);
  }

  return (0, _deferred.fromPromise)(userResult);
}

function runRawLoad(pendingDeferred, store, userFuncOptions, continuation) {
  if (store.__rawData) {
    continuation(store.__rawData);
  } else {
    var loadPromise = store.__rawDataPromise || invokeUserLoad(store, userFuncOptions);

    if (store._cacheRawData) {
      store.__rawDataPromise = loadPromise;
    }

    loadPromise.always(function () {
      delete store.__rawDataPromise;
    }).done(function (rawData) {
      if (store._cacheRawData) {
        store.__rawData = rawData;
      }

      continuation(rawData);
    }).fail(createUserFuncFailureHandler(pendingDeferred));
  }
}

function runRawLoadWithQuery(pendingDeferred, store, options, countOnly) {
  options = options || {};
  var userFuncOptions = {};

  if ('userData' in options) {
    userFuncOptions.userData = options.userData;
  }

  runRawLoad(pendingDeferred, store, userFuncOptions, function (rawData) {
    var rawDataQuery = (0, _array_query.default)(rawData, {
      errorHandler: store._errorHandler
    });
    var itemsQuery;
    var totalCountQuery;
    var waitList = [];
    var items;
    var totalCount;

    if (!countOnly) {
      itemsQuery = _store_helper.default.queryByOptions(rawDataQuery, options);

      if (itemsQuery === rawDataQuery) {
        items = rawData.slice(0);
      } else {
        waitList.push(itemsQuery.enumerate().done(function (asyncResult) {
          items = asyncResult;
        }));
      }
    }

    if (options.requireTotalCount || countOnly) {
      totalCountQuery = _store_helper.default.queryByOptions(rawDataQuery, options, true);

      if (totalCountQuery === rawDataQuery) {
        totalCount = rawData.length;
      } else {
        waitList.push(totalCountQuery.count().done(function (asyncResult) {
          totalCount = asyncResult;
        }));
      }
    }

    _deferred.when.apply(_renderer.default, waitList).done(function () {
      if (countOnly) {
        pendingDeferred.resolve(totalCount);
      } else if (options.requireTotalCount) {
        pendingDeferred.resolve(items, {
          totalCount: totalCount
        });
      } else {
        pendingDeferred.resolve(items);
      }
    }).fail(function (x) {
      pendingDeferred.reject(x);
    });
  });
}

function runRawLoadWithKey(pendingDeferred, store, key) {
  runRawLoad(pendingDeferred, store, {}, function (rawData) {
    var keyExpr = store.key();
    var item;

    for (var i = 0, len = rawData.length; i < len; i++) {
      item = rawData[i];

      if ((0, _utils.keysEqual)(keyExpr, store.keyOf(rawData[i]), key)) {
        pendingDeferred.resolve(item);
        return;
      }
    }

    pendingDeferred.reject(_errors.errors.Error('E4009'));
  });
}

var CustomStore = _abstract_store.default.inherit({
  ctor: function ctor(options) {
    options = options || {};
    this.callBase(options);
    this._useDefaultSearch = !!options.useDefaultSearch || options.loadMode === 'raw';
    this._loadMode = options.loadMode;
    this._cacheRawData = options.cacheRawData !== false;
    this._loadFunc = options[LOAD];
    this._totalCountFunc = options[TOTAL_COUNT];
    this._byKeyFunc = options[BY_KEY];
    this._insertFunc = options[INSERT];
    this._updateFunc = options[UPDATE];
    this._removeFunc = options[REMOVE];
  },
  createQuery: function createQuery() {
    throw _errors.errors.Error('E4010');
  },
  clearRawDataCache: function clearRawDataCache() {
    delete this.__rawData;
  },
  _totalCountImpl: function _totalCountImpl(options) {
    var d = new _deferred.Deferred();

    if (this._loadMode === 'raw' && !this._totalCountFunc) {
      runRawLoadWithQuery(d, this, options, true);
    } else {
      invokeUserTotalCountFunc(this, options).done(function (count) {
        d.resolve(Number(count));
      }).fail(createUserFuncFailureHandler(d));
      d = this._addFailHandlers(d);
    }

    return d.promise();
  },
  _pushImpl: function _pushImpl(changes) {
    if (this.__rawData) {
      (0, _array_utils.applyBatch)({
        keyInfo: this,
        data: this.__rawData,
        changes: changes
      });
    }
  },
  _loadImpl: function _loadImpl(options) {
    var d = new _deferred.Deferred();

    if (this._loadMode === 'raw') {
      runRawLoadWithQuery(d, this, options, false);
    } else {
      invokeUserLoad(this, options).done(function (data, extra) {
        d.resolve(data, extra);
      }).fail(createUserFuncFailureHandler(d));
      d = this._addFailHandlers(d);
    }

    return d.promise();
  },
  _byKeyImpl: function _byKeyImpl(key, extraOptions) {
    var d = new _deferred.Deferred();

    if (this._byKeyViaLoad()) {
      this._requireKey();

      runRawLoadWithKey(d, this, key);
    } else {
      invokeUserByKeyFunc(this, key, extraOptions).done(function (obj) {
        d.resolve(obj);
      }).fail(createUserFuncFailureHandler(d));
    }

    return d.promise();
  },
  _byKeyViaLoad: function _byKeyViaLoad() {
    return this._loadMode === 'raw' && !this._byKeyFunc;
  },
  _insertImpl: function _insertImpl(values) {
    var that = this;
    var userFunc = that._insertFunc;
    var userResult;
    var d = new _deferred.Deferred();
    ensureRequiredFuncOption(INSERT, userFunc);
    userResult = userFunc.apply(that, [values]); // should return key or data

    if (!isPromise(userResult)) {
      userResult = trivialPromise(userResult);
    }

    (0, _deferred.fromPromise)(userResult).done(function (serverResponse) {
      if ((0, _config.default)().useLegacyStoreResult) {
        d.resolve(values, serverResponse);
      } else {
        d.resolve(serverResponse || values, that.keyOf(serverResponse));
      }
    }).fail(createUserFuncFailureHandler(d));
    return d.promise();
  },
  _updateImpl: function _updateImpl(key, values) {
    var userFunc = this._updateFunc;
    var userResult;
    var d = new _deferred.Deferred();
    ensureRequiredFuncOption(UPDATE, userFunc);
    userResult = userFunc.apply(this, [key, values]);

    if (!isPromise(userResult)) {
      userResult = trivialPromise(userResult);
    }

    (0, _deferred.fromPromise)(userResult).done(function (serverResponse) {
      if ((0, _config.default)().useLegacyStoreResult) {
        d.resolve(key, values);
      } else {
        d.resolve(serverResponse || values, key);
      }
    }).fail(createUserFuncFailureHandler(d));
    return d.promise();
  },
  _removeImpl: function _removeImpl(key) {
    var userFunc = this._removeFunc;
    var userResult;
    var d = new _deferred.Deferred();
    ensureRequiredFuncOption(REMOVE, userFunc);
    userResult = userFunc.apply(this, [key]);

    if (!isPromise(userResult)) {
      userResult = trivialPromise();
    }

    (0, _deferred.fromPromise)(userResult).done(function () {
      d.resolve(key);
    }).fail(createUserFuncFailureHandler(d));
    return d.promise();
  }
});

var _default = CustomStore;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _index = __webpack_require__(6);

var _emitter = _interopRequireDefault(__webpack_require__(58));

var _emitter_registrator = _interopRequireDefault(__webpack_require__(39));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var abs = Math.abs;
var HOLD_EVENT_NAME = 'dxhold';
var HOLD_TIMEOUT = 750;
var TOUCH_BOUNDARY = 5;

var HoldEmitter = _emitter.default.inherit({
  start: function start(e) {
    this._startEventData = (0, _index.eventData)(e);

    this._startTimer(e);
  },
  _startTimer: function _startTimer(e) {
    var holdTimeout = 'timeout' in this ? this.timeout : HOLD_TIMEOUT;
    this._holdTimer = setTimeout(function () {
      this._requestAccept(e);

      this._fireEvent(HOLD_EVENT_NAME, e, {
        target: e.target
      });

      this._forgetAccept();
    }.bind(this), holdTimeout);
  },
  move: function move(e) {
    if (this._touchWasMoved(e)) {
      this._cancel(e);
    }
  },
  _touchWasMoved: function _touchWasMoved(e) {
    var delta = (0, _index.eventDelta)(this._startEventData, (0, _index.eventData)(e));
    return abs(delta.x) > TOUCH_BOUNDARY || abs(delta.y) > TOUCH_BOUNDARY;
  },
  end: function end() {
    this._stopTimer();
  },
  _stopTimer: function _stopTimer() {
    clearTimeout(this._holdTimer);
  },
  cancel: function cancel() {
    this._stopTimer();
  },
  dispose: function dispose() {
    this._stopTimer();
  }
});
/**
  * @name UI Events.dxhold
  * @type eventType
  * @type_function_param1 event:event
  * @module events/hold
*/


(0, _emitter_registrator.default)({
  emitter: HoldEmitter,
  bubble: true,
  events: [HOLD_EVENT_NAME]
});
var _default = {
  name: HOLD_EVENT_NAME
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _query = _interopRequireDefault(__webpack_require__(48));

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _class = _interopRequireDefault(__webpack_require__(11));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _class.default.inherit({
  ctor: function ctor(options) {
    this.options = options;

    this._setOption('disabledItemKeys', []);

    this._clearItemKeys();
  },
  _clearItemKeys: function _clearItemKeys() {
    this._setOption('addedItemKeys', []);

    this._setOption('removedItemKeys', []);

    this._setOption('removedItems', []);

    this._setOption('addedItems', []);
  },
  validate: _common.noop,
  _setOption: function _setOption(name, value) {
    this.options[name] = value;
  },
  onSelectionChanged: function onSelectionChanged() {
    var addedItemKeys = this.options.addedItemKeys;
    var removedItemKeys = this.options.removedItemKeys;
    var addedItems = this.options.addedItems;
    var removedItems = this.options.removedItems;
    var selectedItems = this.options.selectedItems;
    var selectedItemKeys = this.options.selectedItemKeys;
    var onSelectionChanged = this.options.onSelectionChanged || _common.noop;

    this._clearItemKeys();

    onSelectionChanged({
      selectedItems: selectedItems,
      selectedItemKeys: selectedItemKeys,
      addedItemKeys: addedItemKeys,
      removedItemKeys: removedItemKeys,
      addedItems: addedItems,
      removedItems: removedItems
    });
  },
  equalKeys: function equalKeys(key1, key2) {
    if (this.options.equalByReference) {
      if ((0, _type.isObject)(key1) && (0, _type.isObject)(key2)) {
        return key1 === key2;
      }
    }

    return (0, _common.equalByValue)(key1, key2);
  },
  getSelectableItems: function getSelectableItems(items) {
    return items.filter(function (item) {
      return !item.disabled;
    });
  },
  _clearSelection: function _clearSelection(keys, preserve, isDeselect, isSelectAll) {
    keys = keys || [];
    keys = Array.isArray(keys) ? keys : [keys];
    this.validate();
    return this.selectedItemKeys(keys, preserve, isDeselect, isSelectAll);
  },
  _loadFilteredData: function _loadFilteredData(remoteFilter, localFilter, select, isSelectAll) {
    var filterLength = encodeURI(JSON.stringify(remoteFilter)).length;
    var needLoadAllData = this.options.maxFilterLengthInRequest && filterLength > this.options.maxFilterLengthInRequest;
    var deferred = new _deferred.Deferred();
    var loadOptions = {
      filter: needLoadAllData ? undefined : remoteFilter,
      select: needLoadAllData ? this.options.dataFields() : select || this.options.dataFields()
    };

    if (remoteFilter && remoteFilter.length === 0) {
      deferred.resolve([]);
    } else {
      this.options.load(loadOptions).done(function (items) {
        var filteredItems = (0, _type.isPlainObject)(items) ? items.data : items;

        if (localFilter && !isSelectAll) {
          filteredItems = filteredItems.filter(localFilter);
        } else if (needLoadAllData) {
          filteredItems = (0, _query.default)(filteredItems).filter(remoteFilter).toArray();
        }

        deferred.resolve(filteredItems);
      }).fail(deferred.reject.bind(deferred));
    }

    return deferred;
  },
  updateSelectedItemKeyHash: function updateSelectedItemKeyHash(keys) {
    for (var i = 0; i < keys.length; i++) {
      var keyHash = (0, _common.getKeyHash)(keys[i]);

      if (!(0, _type.isObject)(keyHash)) {
        this.options.keyHashIndices[keyHash] = this.options.keyHashIndices[keyHash] || [];
        var keyIndices = this.options.keyHashIndices[keyHash];
        keyIndices.push(i);
      }
    }
  },
  _isAnyItemSelected: function _isAnyItemSelected(items) {
    for (var i = 0; i < items.length; i++) {
      if (this.options.isItemSelected(items[i])) {
        return undefined;
      }
    }

    return false;
  },
  _getFullSelectAllState: function _getFullSelectAllState() {
    var items = this.options.plainItems();
    var dataFilter = this.options.filter();
    var selectedItems = this.options.selectedItems;

    if (dataFilter) {
      selectedItems = (0, _query.default)(selectedItems).filter(dataFilter).toArray();
    }

    var selectedItemsLength = selectedItems.length;

    if (!selectedItemsLength) {
      return this._isAnyItemSelected(items);
    }

    if (selectedItemsLength >= this.options.totalCount() - this.options.disabledItemKeys.length) {
      return true;
    }

    return undefined;
  },
  _getVisibleSelectAllState: function _getVisibleSelectAllState() {
    var items = this.getSelectableItems(this.options.plainItems());
    var hasSelectedItems = false;
    var hasUnselectedItems = false;

    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var itemData = this.options.getItemData(item);
      var key = this.options.keyOf(itemData);

      if (this.options.isSelectableItem(item)) {
        if (this.isItemKeySelected(key)) {
          hasSelectedItems = true;
        } else {
          hasUnselectedItems = true;
        }
      }
    }

    if (hasSelectedItems) {
      return !hasUnselectedItems ? true : undefined;
    } else {
      return false;
    }
  }
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.findChanges = exports.isKeysEqual = void 0;

var _type = __webpack_require__(1);

var getKeyWrapper = function getKeyWrapper(item, getKey) {
  var key = getKey(item);

  if ((0, _type.isObject)(key)) {
    try {
      return JSON.stringify(key);
    } catch (e) {
      return key;
    }
  }

  return key;
};

var getSameNewByOld = function getSameNewByOld(oldItem, newItems, newIndexByKey, getKey) {
  var key = getKeyWrapper(oldItem, getKey);
  return newItems[newIndexByKey[key]];
};

var isKeysEqual = function isKeysEqual(oldKeys, newKeys) {
  if (oldKeys.length !== newKeys.length) {
    return false;
  }

  for (var i = 0; i < newKeys.length; i++) {
    if (oldKeys[i] !== newKeys[i]) {
      return false;
    }
  }

  return true;
};

exports.isKeysEqual = isKeysEqual;

var findChanges = function findChanges(oldItems, newItems, getKey, isItemEquals) {
  var oldIndexByKey = {};
  var newIndexByKey = {};
  var addedCount = 0;
  var removeCount = 0;
  var result = [];
  oldItems.forEach(function (item, index) {
    var key = getKeyWrapper(item, getKey);
    oldIndexByKey[key] = index;
  });
  newItems.forEach(function (item, index) {
    var key = getKeyWrapper(item, getKey);
    newIndexByKey[key] = index;
  });
  var itemCount = Math.max(oldItems.length, newItems.length);

  for (var index = 0; index < itemCount + addedCount; index++) {
    var newItem = newItems[index];
    var oldNextIndex = index - addedCount + removeCount;
    var nextOldItem = oldItems[oldNextIndex];
    var isRemoved = !newItem || nextOldItem && !getSameNewByOld(nextOldItem, newItems, newIndexByKey, getKey);

    if (isRemoved) {
      if (nextOldItem) {
        result.push({
          type: 'remove',
          key: getKey(nextOldItem),
          index: index,
          oldItem: nextOldItem
        });
        removeCount++;
        index--;
      }
    } else {
      var key = getKeyWrapper(newItem, getKey);
      var oldIndex = oldIndexByKey[key];
      var oldItem = oldItems[oldIndex];

      if (!oldItem) {
        addedCount++;
        result.push({
          type: 'insert',
          data: newItem,
          index: index
        });
      } else if (oldIndex === oldNextIndex) {
        if (!isItemEquals(oldItem, newItem)) {
          result.push({
            type: 'update',
            data: newItem,
            key: getKey(newItem),
            index: index,
            oldItem: oldItem
          });
        }
      } else {
        return;
      }
    }
  }

  return result;
};

exports.findChanges = findChanges;

/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TextEditorButton = /*#__PURE__*/function () {
  function TextEditorButton(name, editor, options) {
    this.instance = null;
    this.$container = null;
    this.$placeMarker = null;
    this.editor = editor;
    this.name = name;
    this.options = options || {};
  }

  var _proto = TextEditorButton.prototype;

  _proto._addPlaceMarker = function _addPlaceMarker($container) {
    this.$placeMarker = (0, _renderer.default)('<div>').appendTo($container);
  };

  _proto._addToContainer = function _addToContainer($element) {
    var $placeMarker = this.$placeMarker,
        $container = this.$container;
    $placeMarker ? $placeMarker.replaceWith($element) : $element.appendTo($container);
  };

  _proto._attachEvents = function _attachEvents()
  /* instance, $element */
  {
    throw 'Not implemented';
  };

  _proto._create = function _create() {
    throw 'Not implemented';
  };

  _proto._isRendered = function _isRendered() {
    return !!this.instance;
  };

  _proto._isVisible = function _isVisible() {
    var editor = this.editor,
        options = this.options;
    return options.visible || !editor.option('readOnly');
  };

  _proto._isDisabled = function _isDisabled() {
    throw 'Not implemented';
  };

  _proto._shouldRender = function _shouldRender() {
    return this._isVisible() && !this._isRendered();
  };

  _proto.dispose = function dispose() {
    var instance = this.instance,
        $placeMarker = this.$placeMarker;

    if (instance) {
      // TODO: instance.dispose()
      instance.dispose ? instance.dispose() : instance.remove();
      this.instance = null;
    }

    $placeMarker && $placeMarker.remove();
  };

  _proto.render = function render() {
    var $container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.$container;
    this.$container = $container;

    if (this._isVisible()) {
      var _this$_create = this._create(),
          instance = _this$_create.instance,
          $element = _this$_create.$element;

      this.instance = instance;

      this._attachEvents(instance, $element);
    } else {
      this._addPlaceMarker($container);
    }
  };

  _proto.update = function update() {
    if (this._shouldRender()) {
      this.render();
    }

    return !!this.instance;
  };

  return TextEditorButton;
}();

exports.default = TextEditorButton;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _index = __webpack_require__(6);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _array = __webpack_require__(12);

var _dom = __webpack_require__(21);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MASK_EVENT_NAMESPACE = 'dxMask';
var BLUR_EVENT = 'blur beforedeactivate';
var EMPTY_CHAR = ' ';

var BaseMaskStrategy = /*#__PURE__*/function () {
  function BaseMaskStrategy(editor) {
    this.editor = editor;
    this.DIRECTION = {
      FORWARD: 'forward',
      BACKWARD: 'backward'
    };
    this.NAME = this._getStrategyName();
  }

  var _proto = BaseMaskStrategy.prototype;

  _proto._getStrategyName = function _getStrategyName() {
    return 'base';
  };

  _proto.editorOption = function editorOption() {
    var _this$editor;

    return (_this$editor = this.editor).option.apply(_this$editor, arguments);
  };

  _proto.editorInput = function editorInput() {
    return this.editor._input();
  };

  _proto.editorCaret = function editorCaret(newCaret) {
    if (!newCaret) {
      return this.editor._caret();
    }

    this.editor._caret(newCaret);
  };

  _proto.getHandler = function getHandler(handlerName) {
    var handler = this["_".concat(handlerName, "Handler")] || function () {};

    return handler.bind(this);
  };

  _proto.attachEvents = function attachEvents() {
    var _this = this;

    var $input = this.editorInput();
    this.getHandleEventNames().forEach(function (eventName) {
      var subscriptionName = (0, _index.addNamespace)(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);

      _events_engine.default.on($input, subscriptionName, _this.getEventHandler(eventName));
    });

    this._attachChangeEventHandlers();
  };

  _proto.getHandleEventNames = function getHandleEventNames() {
    return ['focusIn', 'focusOut', 'keyDown', 'input', 'paste', 'cut', 'drop'];
  };

  _proto.getEventHandler = function getEventHandler(eventName) {
    return this["_".concat(eventName, "Handler")].bind(this);
  };

  _proto.detachEvents = function detachEvents() {
    _events_engine.default.off(this.editorInput(), ".".concat(MASK_EVENT_NAMESPACE));
  };

  _proto._attachChangeEventHandlers = function _attachChangeEventHandlers() {
    if ((0, _array.inArray)('change', this.editorOption('valueChangeEvent').split(' ')) === -1) {
      return;
    }

    _events_engine.default.on(this.editorInput(), (0, _index.addNamespace)(BLUR_EVENT, MASK_EVENT_NAMESPACE), function (e) {
      // NOTE: input is focused on caret changing in IE(T304159)
      this._suppressCaretChanging(this._changeHandler, [e]);

      this._changeHandler(e);
    }.bind(this.editor));
  };

  _proto._focusInHandler = function _focusInHandler() {
    this.editor._showMaskPlaceholder();

    this.editor._direction(this.DIRECTION.FORWARD);

    if (!this.editor._isValueEmpty() && this.editorOption('isValid')) {
      this.editor._adjustCaret();
    } else {
      var caret = this.editor._maskRulesChain.first();

      this._caretTimeout = setTimeout(function () {
        this._caret({
          start: caret,
          end: caret
        });
      }.bind(this.editor), 0);
    }
  };

  _proto._focusOutHandler = function _focusOutHandler(event) {
    this.editor._changeHandler(event);

    if (this.editorOption('showMaskMode') === 'onFocus' && this.editor._isValueEmpty()) {
      this.editorOption('text', '');

      this.editor._renderDisplayText('');
    }
  };

  _proto._cutHandler = function _cutHandler(event) {
    var caret = this.editorCaret();
    var selectedText = this.editorInput().val().substring(caret.start, caret.end);

    this.editor._maskKeyHandler(event, function () {
      return (0, _dom.clipboardText)(event, selectedText);
    });
  };

  _proto._dropHandler = function _dropHandler() {
    this._clearDragTimer();

    this._dragTimer = setTimeout(function () {
      this.option('value', this._convertToValue(this._input().val()));
    }.bind(this.editor));
  };

  _proto._clearDragTimer = function _clearDragTimer() {
    clearTimeout(this._dragTimer);
  };

  _proto._keyDownHandler = function _keyDownHandler() {
    this._keyPressHandled = false;
  };

  _proto._pasteHandler = function _pasteHandler(event) {
    var editor = this.editor;
    this._keyPressHandled = true;
    var caret = this.editorCaret();

    editor._maskKeyHandler(event, function () {
      var pastedText = (0, _dom.clipboardText)(event);

      var restText = editor._maskRulesChain.text().substring(caret.end);

      var accepted = editor._handleChain({
        text: pastedText,
        start: caret.start,
        length: pastedText.length
      });

      var newCaret = caret.start + accepted;

      editor._handleChain({
        text: restText,
        start: newCaret,
        length: restText.length
      });

      editor._caret({
        start: newCaret,
        end: newCaret
      });
    });
  };

  _proto._autoFillHandler = function _autoFillHandler(event) {
    var _this2 = this;

    var editor = this.editor;
    var inputVal = this.editorInput().val();
    this._inputHandlerTimer = setTimeout(function () {
      _this2._keyPressHandled = true;

      if (_this2._isAutoFill()) {
        _this2._keyPressHandled = true;

        editor._maskKeyHandler(event, function () {
          editor._handleChain({
            text: inputVal,
            start: 0,
            length: inputVal.length
          });
        });

        editor._validateMask();
      }
    });
  };

  _proto._isAutoFill = function _isAutoFill() {
    var $input = this.editor._input();

    var result = false;

    if (_browser.default.msie && _browser.default.version > 11) {
      result = $input.hasClass('edge-autofilled');
    } else if (_browser.default.webkit) {
      var input = $input.get(0);
      result = input && input.matches(':-webkit-autofill');
    }

    return result;
  };

  _proto.runWithoutEventProcessing = function runWithoutEventProcessing(action) {
    var keyPressHandled = this._keyPressHandled;
    this._keyPressHandled = true;
    action();
    this._keyPressHandled = keyPressHandled;
  };

  _proto._backspaceHandler = function _backspaceHandler() {};

  _proto._delHandler = function _delHandler(event) {
    var editor = this.editor;
    this._keyPressHandled = true;

    editor._maskKeyHandler(event, function () {
      return !editor._hasSelection() && editor._handleKey(EMPTY_CHAR);
    });
  };

  _proto.clean = function clean() {
    this._clearDragTimer();

    clearTimeout(this._backspaceHandlerTimeout);
    clearTimeout(this._caretTimeout);
    clearTimeout(this._inputHandlerTimer);
  };

  return BaseMaskStrategy;
}();

exports.default = BaseMaskStrategy;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _common = __webpack_require__(3);

var _uiListEdit = _interopRequireDefault(__webpack_require__(45));

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _emitter = __webpack_require__(79);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var abstract = _uiListEdit.default.abstract;
var LIST_EDIT_DECORATOR = 'dxListEditDecorator';
var POINTER_DOWN_EVENT_NAME = (0, _index.addNamespace)(_pointer.default.down, LIST_EDIT_DECORATOR);
var ACTIVE_EVENT_NAME = (0, _index.addNamespace)(_emitter.active, LIST_EDIT_DECORATOR);
var LIST_ITEM_CONTENT_CLASS = 'dx-list-item-content';
var SWITCHABLE_DELETE_READY_CLASS = 'dx-list-switchable-delete-ready';
var SWITCHABLE_MENU_SHIELD_POSITIONING_CLASS = 'dx-list-switchable-menu-shield-positioning';
var SWITCHABLE_DELETE_TOP_SHIELD_CLASS = 'dx-list-switchable-delete-top-shield';
var SWITCHABLE_DELETE_BOTTOM_SHIELD_CLASS = 'dx-list-switchable-delete-bottom-shield';
var SWITCHABLE_MENU_ITEM_SHIELD_POSITIONING_CLASS = 'dx-list-switchable-menu-item-shield-positioning';
var SWITCHABLE_DELETE_ITEM_CONTENT_SHIELD_CLASS = 'dx-list-switchable-delete-item-content-shield';
var SWITCHABLE_DELETE_BUTTON_CONTAINER_CLASS = 'dx-list-switchable-delete-button-container';

var SwitchableEditDecorator = _uiListEdit.default.inherit({
  _init: function _init() {
    this._$topShield = (0, _renderer.default)('<div>').addClass(SWITCHABLE_DELETE_TOP_SHIELD_CLASS);
    this._$bottomShield = (0, _renderer.default)('<div>').addClass(SWITCHABLE_DELETE_BOTTOM_SHIELD_CLASS);
    this._$itemContentShield = (0, _renderer.default)('<div>').addClass(SWITCHABLE_DELETE_ITEM_CONTENT_SHIELD_CLASS);

    _events_engine.default.on(this._$topShield, POINTER_DOWN_EVENT_NAME, this._cancelDeleteReadyItem.bind(this));

    _events_engine.default.on(this._$bottomShield, POINTER_DOWN_EVENT_NAME, this._cancelDeleteReadyItem.bind(this));

    this._list.$element().append(this._$topShield.toggle(false)).append(this._$bottomShield.toggle(false));
  },
  handleClick: function handleClick() {
    return this._cancelDeleteReadyItem();
  },
  _cancelDeleteReadyItem: function _cancelDeleteReadyItem() {
    if (!this._$readyToDeleteItem) {
      return false;
    }

    this._cancelDelete(this._$readyToDeleteItem);

    return true;
  },
  _cancelDelete: function _cancelDelete($itemElement) {
    this._toggleDeleteReady($itemElement, false);
  },
  _toggleDeleteReady: function _toggleDeleteReady($itemElement, readyToDelete) {
    if (readyToDelete === undefined) {
      readyToDelete = !this._isReadyToDelete($itemElement);
    }

    this._toggleShields($itemElement, readyToDelete);

    this._toggleScrolling(readyToDelete);

    this._cacheReadyToDeleteItem($itemElement, readyToDelete);

    this._animateToggleDelete($itemElement, readyToDelete);
  },
  _isReadyToDelete: function _isReadyToDelete($itemElement) {
    return $itemElement.hasClass(SWITCHABLE_DELETE_READY_CLASS);
  },
  _toggleShields: function _toggleShields($itemElement, enabled) {
    this._list.$element().toggleClass(SWITCHABLE_MENU_SHIELD_POSITIONING_CLASS, enabled);

    this._$topShield.toggle(enabled);

    this._$bottomShield.toggle(enabled);

    if (enabled) {
      this._updateShieldsHeight($itemElement);
    }

    this._toggleContentShield($itemElement, enabled);
  },
  _updateShieldsHeight: function _updateShieldsHeight($itemElement) {
    var $list = this._list.$element();

    var listTopOffset = $list.offset().top;
    var listHeight = $list.outerHeight();
    var itemTopOffset = $itemElement.offset().top;
    var itemHeight = $itemElement.outerHeight();
    var dirtyTopShieldHeight = itemTopOffset - listTopOffset;
    var dirtyBottomShieldHeight = listHeight - itemHeight - dirtyTopShieldHeight;

    this._$topShield.height(Math.max(dirtyTopShieldHeight, 0));

    this._$bottomShield.height(Math.max(dirtyBottomShieldHeight, 0));
  },
  _toggleContentShield: function _toggleContentShield($itemElement, enabled) {
    if (enabled) {
      $itemElement.find('.' + LIST_ITEM_CONTENT_CLASS).first().append(this._$itemContentShield);
    } else {
      this._$itemContentShield.detach();
    }
  },
  _toggleScrolling: function _toggleScrolling(readyToDelete) {
    var scrollView = this._list.$element().dxScrollView('instance');

    if (readyToDelete) {
      scrollView.on('start', this._cancelScrolling);
    } else {
      scrollView.off('start', this._cancelScrolling);
    }
  },
  _cancelScrolling: function _cancelScrolling(args) {
    args.event.cancel = true;
  },
  _cacheReadyToDeleteItem: function _cacheReadyToDeleteItem($itemElement, cache) {
    if (cache) {
      this._$readyToDeleteItem = $itemElement;
    } else {
      delete this._$readyToDeleteItem;
    }
  },
  _animateToggleDelete: function _animateToggleDelete($itemElement, readyToDelete) {
    if (readyToDelete) {
      this._enablePositioning($itemElement);

      this._prepareDeleteReady($itemElement);

      this._animatePrepareDeleteReady($itemElement);

      _events_engine.default.off($itemElement, _pointer.default.up);
    } else {
      this._forgetDeleteReady($itemElement);

      this._animateForgetDeleteReady($itemElement).done(this._disablePositioning.bind(this, $itemElement));
    }
  },
  _enablePositioning: function _enablePositioning($itemElement) {
    $itemElement.addClass(SWITCHABLE_MENU_ITEM_SHIELD_POSITIONING_CLASS);

    _events_engine.default.on($itemElement, ACTIVE_EVENT_NAME, _common.noop);

    _events_engine.default.one($itemElement, _pointer.default.up, this._disablePositioning.bind(this, $itemElement));
  },
  _disablePositioning: function _disablePositioning($itemElement) {
    $itemElement.removeClass(SWITCHABLE_MENU_ITEM_SHIELD_POSITIONING_CLASS);

    _events_engine.default.off($itemElement, ACTIVE_EVENT_NAME);
  },
  _prepareDeleteReady: function _prepareDeleteReady($itemElement) {
    $itemElement.addClass(SWITCHABLE_DELETE_READY_CLASS);
  },
  _forgetDeleteReady: function _forgetDeleteReady($itemElement) {
    $itemElement.removeClass(SWITCHABLE_DELETE_READY_CLASS);
  },
  _animatePrepareDeleteReady: abstract,
  _animateForgetDeleteReady: abstract,
  _getDeleteButtonContainer: function _getDeleteButtonContainer($itemElement) {
    $itemElement = $itemElement || this._$readyToDeleteItem;
    return $itemElement.children('.' + SWITCHABLE_DELETE_BUTTON_CONTAINER_CLASS);
  },
  _deleteItem: function _deleteItem($itemElement) {
    $itemElement = $itemElement || this._$readyToDeleteItem;

    this._getDeleteButtonContainer($itemElement).detach();

    if ($itemElement.is('.dx-state-disabled, .dx-state-disabled *')) {
      return;
    }

    this._list.deleteItem($itemElement).always(this._cancelDelete.bind(this, $itemElement));
  },
  _isRtlEnabled: function _isRtlEnabled() {
    return this._list.option('rtlEnabled');
  },
  dispose: function dispose() {
    if (this._$topShield) {
      this._$topShield.remove();
    }

    if (this._$bottomShield) {
      this._$bottomShield.remove();
    }

    this.callBase.apply(this, arguments);
  }
});

var _default = SwitchableEditDecorator;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;
var EditDecoratorMenuHelperMixin = {
  _menuEnabled: function _menuEnabled() {
    return !!this._menuItems().length;
  },
  _menuItems: function _menuItems() {
    return this._list.option('menuItems');
  },
  _deleteEnabled: function _deleteEnabled() {
    return this._list.option('allowItemDeleting');
  },
  _fireMenuAction: function _fireMenuAction($itemElement, action) {
    this._list._itemEventHandlerByHandler($itemElement, action, {}, {
      excludeValidators: ['disabled', 'readOnly']
    });
  }
};
var _default = EditDecoratorMenuHelperMixin;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _translator = __webpack_require__(16);

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _element = __webpack_require__(20);

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _empty_template = __webpack_require__(52);

var _array = __webpack_require__(12);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _common = __webpack_require__(3);

var _extend = __webpack_require__(2);

var _inflector = __webpack_require__(47);

var _iterator = __webpack_require__(4);

var _size = __webpack_require__(88);

var _position = __webpack_require__(29);

var _type = __webpack_require__(1);

var _version = __webpack_require__(76);

var _window = __webpack_require__(7);

var _visibility_change = __webpack_require__(63);

var _message = _interopRequireDefault(__webpack_require__(17));

var _button = _interopRequireDefault(__webpack_require__(41));

var _ui = _interopRequireDefault(__webpack_require__(65));

var _themes = __webpack_require__(31);

__webpack_require__(214);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)(); // STYLE popup

var POPUP_CLASS = 'dx-popup';
var POPUP_WRAPPER_CLASS = 'dx-popup-wrapper';
var POPUP_FULL_SCREEN_CLASS = 'dx-popup-fullscreen';
var POPUP_FULL_SCREEN_WIDTH_CLASS = 'dx-popup-fullscreen-width';
var POPUP_NORMAL_CLASS = 'dx-popup-normal';
var POPUP_CONTENT_CLASS = 'dx-popup-content';
var POPUP_DRAGGABLE_CLASS = 'dx-popup-draggable';
var POPUP_TITLE_CLASS = 'dx-popup-title';
var POPUP_TITLE_CLOSEBUTTON_CLASS = 'dx-closebutton';
var POPUP_BOTTOM_CLASS = 'dx-popup-bottom';
var POPUP_HAS_CLOSE_BUTTON_CLASS = 'dx-has-close-button';
var TEMPLATE_WRAPPER_CLASS = 'dx-template-wrapper';
var POPUP_CONTENT_FLEX_HEIGHT_CLASS = 'dx-popup-flex-height';
var POPUP_CONTENT_INHERIT_HEIGHT_CLASS = 'dx-popup-inherit-height';
var ALLOWED_TOOLBAR_ITEM_ALIASES = ['cancel', 'clear', 'done'];
var BUTTON_DEFAULT_TYPE = 'default';
var BUTTON_NORMAL_TYPE = 'normal';
var BUTTON_TEXT_MODE = 'text';
var BUTTON_CONTAINED_MODE = 'contained';
var IS_IE11 = _browser.default.msie && parseInt(_browser.default.version) === 11;
var IS_OLD_SAFARI = _browser.default.safari && (0, _version.compare)(_browser.default.version, [11]) < 0;
var HEIGHT_STRATEGIES = {
  static: '',
  inherit: POPUP_CONTENT_INHERIT_HEIGHT_CLASS,
  flex: POPUP_CONTENT_FLEX_HEIGHT_CLASS
};

var getButtonPlace = function getButtonPlace(name) {
  var device = _devices.default.current();

  var platform = device.platform;
  var toolbar = 'bottom';
  var location = 'before';

  if (platform === 'ios') {
    switch (name) {
      case 'cancel':
        toolbar = 'top';
        break;

      case 'clear':
        toolbar = 'top';
        location = 'after';
        break;

      case 'done':
        location = 'after';
        break;
    }
  } else if (platform === 'android' && device.version && parseInt(device.version[0]) > 4) {
    switch (name) {
      case 'cancel':
        location = 'after';
        break;

      case 'done':
        location = 'after';
        break;
    }
  }

  return {
    toolbar: toolbar,
    location: location
  };
};

var Popup = _ui.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      fullScreen: false,
      title: '',
      showTitle: true,
      titleTemplate: 'title',
      onTitleRendered: null,
      dragEnabled: false,
      toolbarItems: [],
      showCloseButton: false,
      bottomTemplate: 'bottom',
      useDefaultToolbarButtons: false,
      useFlatToolbarButtons: false,
      autoResizeEnabled: true
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    var themeName = (0, _themes.current)();
    return this.callBase().concat([{
      device: {
        platform: 'ios'
      },
      options: {
        animation: this._iosAnimation
      }
    }, {
      device: {
        platform: 'android'
      },
      options: {
        animation: this._androidAnimation
      }
    }, {
      device: {
        platform: 'generic'
      },
      options: {
        showCloseButton: true
      }
    }, {
      device: function device(_device) {
        return _devices.default.real().deviceType === 'desktop' && _device.platform === 'generic';
      },
      options: {
        dragEnabled: true
      }
    }, {
      device: function device() {
        return _devices.default.real().deviceType === 'desktop' && !_devices.default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }, {
      device: function device() {
        return (0, _themes.isMaterial)(themeName);
      },
      options: {
        useDefaultToolbarButtons: true,
        useFlatToolbarButtons: true
      }
    }]);
  },
  _iosAnimation: {
    show: {
      type: 'slide',
      duration: 400,
      from: {
        position: {
          my: 'top',
          at: 'bottom'
        }
      },
      to: {
        position: {
          my: 'center',
          at: 'center'
        }
      }
    },
    hide: {
      type: 'slide',
      duration: 400,
      from: {
        opacity: 1,
        position: {
          my: 'center',
          at: 'center'
        }
      },
      to: {
        opacity: 1,
        position: {
          my: 'top',
          at: 'bottom'
        }
      }
    }
  },
  _androidAnimation: function _androidAnimation() {
    var fullScreenConfig = {
      show: {
        type: 'slide',
        duration: 300,
        from: {
          top: '30%',
          opacity: 0
        },
        to: {
          top: 0,
          opacity: 1
        }
      },
      hide: {
        type: 'slide',
        duration: 300,
        from: {
          top: 0,
          opacity: 1
        },
        to: {
          top: '30%',
          opacity: 0
        }
      }
    };
    var defaultConfig = {
      show: {
        type: 'fade',
        duration: 400,
        from: 0,
        to: 1
      },
      hide: {
        type: 'fade',
        duration: 400,
        from: 1,
        to: 0
      }
    };
    return this.option('fullScreen') ? fullScreenConfig : defaultConfig;
  },
  _init: function _init() {
    this.callBase();
    this.$element().addClass(POPUP_CLASS);
    this.$wrapper().addClass(POPUP_WRAPPER_CLASS);
    this._$popupContent = this._$content.wrapInner((0, _renderer.default)('<div>').addClass(POPUP_CONTENT_CLASS)).children().eq(0);
  },
  _render: function _render() {
    var isFullscreen = this.option('fullScreen');

    this._toggleFullScreenClass(isFullscreen);

    this.callBase();
  },
  _toggleFullScreenClass: function _toggleFullScreenClass(value) {
    this.$overlayContent().toggleClass(POPUP_FULL_SCREEN_CLASS, value).toggleClass(POPUP_NORMAL_CLASS, !value);
  },
  _initTemplates: function _initTemplates() {
    this.callBase();

    this._templateManager.addDefaultTemplates({
      title: new _empty_template.EmptyTemplate(),
      bottom: new _empty_template.EmptyTemplate()
    });
  },
  _renderContentImpl: function _renderContentImpl() {
    this._renderTitle();

    this.callBase();

    this._renderBottom();
  },
  _renderTitle: function _renderTitle() {
    var items = this._getToolbarItems('top');

    var titleText = this.option('title');
    var showTitle = this.option('showTitle');

    if (showTitle && !!titleText) {
      items.unshift({
        location: _devices.default.current().ios ? 'center' : 'before',
        text: titleText
      });
    }

    if (showTitle || items.length > 0) {
      this._$title && this._$title.remove();
      var $title = (0, _renderer.default)('<div>').addClass(POPUP_TITLE_CLASS).insertBefore(this.$content());
      this._$title = this._renderTemplateByType('titleTemplate', items, $title).addClass(POPUP_TITLE_CLASS);

      this._renderDrag();

      this._executeTitleRenderAction(this._$title);

      this._$title.toggleClass(POPUP_HAS_CLOSE_BUTTON_CLASS, this._hasCloseButton());
    } else if (this._$title) {
      this._$title.detach();
    }
  },
  _renderTemplateByType: function _renderTemplateByType(optionName, data, $container, additionalToolbarOptions) {
    var template = this._getTemplateByOption(optionName);

    var toolbarTemplate = template instanceof _empty_template.EmptyTemplate;

    if (toolbarTemplate) {
      var integrationOptions = (0, _extend.extend)({}, this.option('integrationOptions'), {
        skipTemplates: ['content', 'title']
      });
      var toolbarOptions = (0, _extend.extend)(additionalToolbarOptions, {
        items: data,
        rtlEnabled: this.option('rtlEnabled'),
        useDefaultButtons: this.option('useDefaultToolbarButtons'),
        useFlatButtons: this.option('useFlatToolbarButtons'),
        integrationOptions: integrationOptions
      });

      this._getTemplate('dx-polymorph-widget').render({
        container: $container,
        model: {
          widget: 'dxToolbarBase',
          options: toolbarOptions
        }
      });

      var $toolbar = $container.children('div');
      $container.replaceWith($toolbar);
      return $toolbar;
    } else {
      var $result = (0, _renderer.default)(template.render({
        container: (0, _element.getPublicElement)($container)
      }));

      if ($result.hasClass(TEMPLATE_WRAPPER_CLASS)) {
        $container.replaceWith($result);
        $container = $result;
      }

      return $container;
    }
  },
  _executeTitleRenderAction: function _executeTitleRenderAction($titleElement) {
    this._getTitleRenderAction()({
      titleElement: (0, _element.getPublicElement)($titleElement)
    });
  },
  _getTitleRenderAction: function _getTitleRenderAction() {
    return this._titleRenderAction || this._createTitleRenderAction();
  },
  _createTitleRenderAction: function _createTitleRenderAction() {
    return this._titleRenderAction = this._createActionByOption('onTitleRendered', {
      element: this.element(),
      excludeValidators: ['disabled', 'readOnly']
    });
  },
  _getCloseButton: function _getCloseButton() {
    return {
      toolbar: 'top',
      location: 'after',
      template: this._getCloseButtonRenderer()
    };
  },
  _getCloseButtonRenderer: function _getCloseButtonRenderer() {
    var _this = this;

    return function (_, __, container) {
      var $button = (0, _renderer.default)('<div>').addClass(POPUP_TITLE_CLOSEBUTTON_CLASS);

      _this._createComponent($button, _button.default, {
        icon: 'close',
        onClick: _this._createToolbarItemAction(undefined),
        stylingMode: 'text',
        integrationOptions: {}
      });

      (0, _renderer.default)(container).append($button);
    };
  },
  _getToolbarItems: function _getToolbarItems(toolbar) {
    var _this2 = this;

    var toolbarItems = this.option('toolbarItems');
    var toolbarsItems = [];
    this._toolbarItemClasses = [];

    var currentPlatform = _devices.default.current().platform;

    var index = 0;
    (0, _iterator.each)(toolbarItems, function (_, data) {
      var isShortcut = (0, _type.isDefined)(data.shortcut);
      var item = isShortcut ? getButtonPlace(data.shortcut) : data;

      if (isShortcut && currentPlatform === 'ios' && index < 2) {
        item.toolbar = 'top';
        index++;
      }

      item.toolbar = data.toolbar || item.toolbar || 'top';

      if (item && item.toolbar === toolbar) {
        if (isShortcut) {
          (0, _extend.extend)(item, {
            location: data.location
          }, _this2._getToolbarItemByAlias(data));
        }

        var isLTROrder = currentPlatform === 'generic';

        if (data.shortcut === 'done' && isLTROrder || data.shortcut === 'cancel' && !isLTROrder) {
          toolbarsItems.unshift(item);
        } else {
          toolbarsItems.push(item);
        }
      }
    });

    if (toolbar === 'top' && this._hasCloseButton()) {
      toolbarsItems.push(this._getCloseButton());
    }

    return toolbarsItems;
  },
  _hasCloseButton: function _hasCloseButton() {
    return this.option('showCloseButton') && this.option('showTitle');
  },
  _getLocalizationKey: function _getLocalizationKey(itemType) {
    return itemType.toLowerCase() === 'done' ? 'OK' : (0, _inflector.camelize)(itemType, true);
  },
  _getToolbarItemByAlias: function _getToolbarItemByAlias(data) {
    var that = this;
    var itemType = data.shortcut;

    if ((0, _array.inArray)(itemType, ALLOWED_TOOLBAR_ITEM_ALIASES) < 0) {
      return false;
    }

    var itemConfig = (0, _extend.extend)({
      text: _message.default.format(this._getLocalizationKey(itemType)),
      onClick: this._createToolbarItemAction(data.onClick),
      integrationOptions: {},
      type: that.option('useDefaultToolbarButtons') ? BUTTON_DEFAULT_TYPE : BUTTON_NORMAL_TYPE,
      stylingMode: that.option('useFlatToolbarButtons') ? BUTTON_TEXT_MODE : BUTTON_CONTAINED_MODE
    }, data.options || {});
    var itemClass = POPUP_CLASS + '-' + itemType;

    this._toolbarItemClasses.push(itemClass);

    return {
      template: function template(_, __, container) {
        var $toolbarItem = (0, _renderer.default)('<div>').addClass(itemClass).appendTo(container);

        that._createComponent($toolbarItem, _button.default, itemConfig);
      }
    };
  },
  _createToolbarItemAction: function _createToolbarItemAction(clickAction) {
    return this._createAction(clickAction, {
      afterExecute: function afterExecute(e) {
        e.component.hide();
      }
    });
  },
  _renderBottom: function _renderBottom() {
    var items = this._getToolbarItems('bottom');

    if (items.length) {
      this._$bottom && this._$bottom.remove();
      var $bottom = (0, _renderer.default)('<div>').addClass(POPUP_BOTTOM_CLASS).insertAfter(this.$content());
      this._$bottom = this._renderTemplateByType('bottomTemplate', items, $bottom, {
        compactMode: true
      }).addClass(POPUP_BOTTOM_CLASS);

      this._toggleClasses();
    } else {
      this._$bottom && this._$bottom.detach();
    }
  },
  _toggleClasses: function _toggleClasses() {
    var _this3 = this;

    var aliases = ALLOWED_TOOLBAR_ITEM_ALIASES;
    (0, _iterator.each)(aliases, function (_, alias) {
      var className = POPUP_CLASS + '-' + alias;

      if ((0, _array.inArray)(className, _this3._toolbarItemClasses) >= 0) {
        _this3.$wrapper().addClass(className + '-visible');

        _this3._$bottom.addClass(className);
      } else {
        _this3.$wrapper().removeClass(className + '-visible');

        _this3._$bottom.removeClass(className);
      }
    });
  },
  _getContainer: function _getContainer() {
    if (this.option('fullScreen')) {
      return (0, _renderer.default)(window);
    }

    return this.callBase();
  },
  _getDragTarget: function _getDragTarget() {
    return this.topToolbar();
  },
  _renderGeometryImpl: function _renderGeometryImpl(isDimensionChanged) {
    if (!isDimensionChanged) {
      this._resetContentHeight();
    }

    this.callBase.apply(this, arguments);

    this._setContentHeight();
  },
  _resetContentHeight: function _resetContentHeight() {
    this.$content().css({
      'height': 'auto',
      'maxHeight': 'none'
    });
  },
  _renderDrag: function _renderDrag() {
    this.callBase();
    this.$overlayContent().toggleClass(POPUP_DRAGGABLE_CLASS, this.option('dragEnabled'));
  },
  _renderResize: function _renderResize() {
    this.callBase();

    this._resizable.option('onResize', function () {
      this._setContentHeight();

      this._actions.onResize(arguments);
    }.bind(this));
  },
  _setContentHeight: function _setContentHeight() {
    (this.option('forceApplyBindings') || _common.noop)();

    var overlayContent = this.$overlayContent().get(0);

    var currentHeightStrategyClass = this._chooseHeightStrategy(overlayContent);

    this.$content().css(this._getHeightCssStyles(currentHeightStrategyClass, overlayContent));

    this._setHeightClasses(this.$overlayContent(), currentHeightStrategyClass);
  },
  _heightStrategyChangeOffset: function _heightStrategyChangeOffset(currentHeightStrategyClass, popupVerticalPaddings) {
    return currentHeightStrategyClass === HEIGHT_STRATEGIES.flex ? -popupVerticalPaddings : 0;
  },
  _chooseHeightStrategy: function _chooseHeightStrategy(overlayContent) {
    var isAutoWidth = overlayContent.style.width === 'auto' || overlayContent.style.width === '';
    var currentHeightStrategyClass = HEIGHT_STRATEGIES.static;

    if (this._isAutoHeight() && this.option('autoResizeEnabled')) {
      if (isAutoWidth || IS_OLD_SAFARI) {
        if (!IS_IE11) {
          currentHeightStrategyClass = HEIGHT_STRATEGIES.inherit;
        }
      } else {
        currentHeightStrategyClass = HEIGHT_STRATEGIES.flex;
      }
    }

    return currentHeightStrategyClass;
  },
  _getHeightCssStyles: function _getHeightCssStyles(currentHeightStrategyClass, overlayContent) {
    var cssStyles = {};

    var contentMaxHeight = this._getOptionValue('maxHeight', overlayContent);

    var contentMinHeight = this._getOptionValue('minHeight', overlayContent);

    var popupHeightParts = this._splitPopupHeight();

    var toolbarsAndVerticalOffsetsHeight = popupHeightParts.header + popupHeightParts.footer + popupHeightParts.contentVerticalOffsets + popupHeightParts.popupVerticalOffsets + this._heightStrategyChangeOffset(currentHeightStrategyClass, popupHeightParts.popupVerticalPaddings);

    if (currentHeightStrategyClass === HEIGHT_STRATEGIES.static) {
      if (!this._isAutoHeight() || contentMaxHeight || contentMinHeight) {
        var overlayHeight = this.option('fullScreen') ? Math.min((0, _position.getBoundingRect)(overlayContent).height, (0, _window.getWindow)().innerHeight) : (0, _position.getBoundingRect)(overlayContent).height;
        var contentHeight = overlayHeight - toolbarsAndVerticalOffsetsHeight;
        cssStyles = {
          height: Math.max(0, contentHeight),
          minHeight: 'auto',
          maxHeight: 'auto'
        };
      }
    } else {
      var container = (0, _renderer.default)(this._getContainer()).get(0);
      var maxHeightValue = (0, _size.addOffsetToMaxHeight)(contentMaxHeight, -toolbarsAndVerticalOffsetsHeight, container);
      var minHeightValue = (0, _size.addOffsetToMinHeight)(contentMinHeight, -toolbarsAndVerticalOffsetsHeight, container);
      cssStyles = {
        height: 'auto',
        minHeight: minHeightValue,
        maxHeight: maxHeightValue
      };
    }

    return cssStyles;
  },
  _setHeightClasses: function _setHeightClasses($container, currentClass) {
    var excessClasses = '';

    for (var name in HEIGHT_STRATEGIES) {
      if (HEIGHT_STRATEGIES[name] !== currentClass) {
        excessClasses += ' ' + HEIGHT_STRATEGIES[name];
      }
    }

    $container.removeClass(excessClasses).addClass(currentClass);
  },
  _isAutoHeight: function _isAutoHeight() {
    return this.$overlayContent().get(0).style.height === 'auto';
  },
  _splitPopupHeight: function _splitPopupHeight() {
    var topToolbar = this.topToolbar();
    var bottomToolbar = this.bottomToolbar();
    return {
      header: (0, _size.getVisibleHeight)(topToolbar && topToolbar.get(0)),
      footer: (0, _size.getVisibleHeight)(bottomToolbar && bottomToolbar.get(0)),
      contentVerticalOffsets: (0, _size.getVerticalOffsets)(this.$overlayContent().get(0), true),
      popupVerticalOffsets: (0, _size.getVerticalOffsets)(this.$content().get(0), true),
      popupVerticalPaddings: (0, _size.getVerticalOffsets)(this.$content().get(0), false)
    };
  },
  _shouldFixBodyPosition: function _shouldFixBodyPosition() {
    return this.callBase() || this.option('fullScreen');
  },
  _toggleSafariFullScreen: function _toggleSafariFullScreen(value) {
    var toggleFullScreenBeforeShown = this._shouldFixBodyPosition() && value && !this._isShown;

    if (toggleFullScreenBeforeShown) {
      this._bodyScrollTop = value ? window.pageYOffset : undefined;
    } else {
      this._toggleSafariScrolling(!value);
    }
  },
  _renderDimensions: function _renderDimensions() {
    if (this.option('fullScreen')) {
      this.$overlayContent().css({
        width: '100%',
        height: '100%',
        minWidth: '',
        maxWidth: '',
        minHeight: '',
        maxHeight: ''
      });
    } else {
      this.callBase.apply(this, arguments);
    }

    if ((0, _window.hasWindow)()) {
      this._renderFullscreenWidthClass();
    }
  },
  _renderFullscreenWidthClass: function _renderFullscreenWidthClass() {
    this.$overlayContent().toggleClass(POPUP_FULL_SCREEN_WIDTH_CLASS, this.$overlayContent().outerWidth() === (0, _renderer.default)(window).width());
  },
  refreshPosition: function refreshPosition() {
    this._renderPosition();
  },
  _renderPosition: function _renderPosition() {
    if (this.option('fullScreen')) {
      (0, _translator.move)(this.$overlayContent(), {
        top: 0,
        left: 0
      });
    } else {
      (this.option('forceApplyBindings') || _common.noop)();

      return this.callBase.apply(this, arguments);
    }
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'showTitle':
      case 'title':
      case 'titleTemplate':
        this._renderTitle();

        this._renderGeometry();

        (0, _visibility_change.triggerResizeEvent)(this.$overlayContent());
        break;

      case 'bottomTemplate':
        this._renderBottom();

        this._renderGeometry();

        (0, _visibility_change.triggerResizeEvent)(this.$overlayContent());
        break;

      case 'onTitleRendered':
        this._createTitleRenderAction(args.value);

        break;

      case 'toolbarItems':
      case 'useDefaultToolbarButtons':
      case 'useFlatToolbarButtons':
        {
          // NOTE: Geometry rendering after "toolbarItems" runtime change breaks the popup animation first appereance.
          // But geometry rendering for options connected to the popup position still should be called.
          var shouldRenderGeometry = !args.fullName.match(/^toolbarItems((\[\d+\])(\.(options|visible).*)?)?$/);

          this._renderTitle();

          this._renderBottom();

          if (shouldRenderGeometry) {
            this._renderGeometry();

            (0, _visibility_change.triggerResizeEvent)(this.$overlayContent());
          }

          break;
        }

      case 'dragEnabled':
        this._renderDrag();

        break;

      case 'autoResizeEnabled':
        this._renderGeometry();

        (0, _visibility_change.triggerResizeEvent)(this.$overlayContent());
        break;

      case 'fullScreen':
        this._toggleFullScreenClass(args.value);

        this._toggleSafariFullScreen(args.value);

        this._renderGeometry();

        (0, _visibility_change.triggerResizeEvent)(this.$overlayContent());
        break;

      case 'showCloseButton':
        this._renderTitle();

        break;

      default:
        this.callBase(args);
    }
  },
  bottomToolbar: function bottomToolbar() {
    return this._$bottom;
  },
  topToolbar: function topToolbar() {
    return this._$title;
  },
  $content: function $content() {
    return this._$popupContent;
  },
  content: function content() {
    return (0, _element.getPublicElement)(this.$content());
  },
  $overlayContent: function $overlayContent() {
    return this._$content;
  }
});

(0, _component_registrator.default)('dxPopup', Popup);
var _default = Popup;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _renderer = _interopRequireDefault(__webpack_require__(0));

var _uiListEdit = _interopRequireDefault(__webpack_require__(120));

var _message = _interopRequireDefault(__webpack_require__(17));

var _uiListEdit2 = __webpack_require__(33);

var _uiListEdit3 = _interopRequireDefault(__webpack_require__(45));

var _ui = _interopRequireDefault(__webpack_require__(65));

var _uiList = __webpack_require__(92);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CONTEXTMENU_CLASS = 'dx-list-context-menu';
var CONTEXTMENU_MENUCONTENT_CLASS = 'dx-list-context-menucontent';
(0, _uiListEdit2.register)('menu', 'context', _uiListEdit3.default.inherit({
  _init: function _init() {
    var $menu = (0, _renderer.default)('<div>').addClass(CONTEXTMENU_CLASS);

    this._list.$element().append($menu);

    this._menu = this._renderOverlay($menu);
  },
  _renderOverlay: function _renderOverlay($element) {
    return this._list._createComponent($element, _ui.default, {
      shading: false,
      deferRendering: true,
      closeOnTargetScroll: true,
      closeOnOutsideClick: function closeOnOutsideClick(e) {
        return !(0, _renderer.default)(e.target).closest('.' + CONTEXTMENU_CLASS).length;
      },
      animation: {
        show: {
          type: 'slide',
          duration: 300,
          from: {
            height: 0,
            opacity: 1
          },
          to: {
            height: function () {
              return this._$menuList.outerHeight();
            }.bind(this),
            opacity: 1
          }
        },
        hide: {
          type: 'slide',
          duration: 0,
          from: {
            opacity: 1
          },
          to: {
            opacity: 0
          }
        }
      },
      height: function () {
        return this._$menuList ? this._$menuList.outerHeight() : 0;
      }.bind(this),
      width: function () {
        return this._list.$element().outerWidth();
      }.bind(this),
      onContentReady: this._renderMenuContent.bind(this)
    });
  },
  _renderMenuContent: function _renderMenuContent(e) {
    var $overlayContent = e.component.$content();

    var items = this._menuItems().slice();

    if (this._deleteEnabled()) {
      items.push({
        text: _message.default.format('dxListEditDecorator-delete'),
        action: this._deleteItem.bind(this)
      });
    }

    this._$menuList = (0, _renderer.default)('<div>');

    this._list._createComponent(this._$menuList, _uiList.ListBase, {
      items: items,
      onItemClick: this._menuItemClickHandler.bind(this),
      height: 'auto',
      integrationOptions: {}
    });

    $overlayContent.addClass(CONTEXTMENU_MENUCONTENT_CLASS);
    $overlayContent.append(this._$menuList);
  },
  _menuItemClickHandler: function _menuItemClickHandler(args) {
    this._menu.hide();

    this._fireMenuAction(this._$itemWithMenu, args.itemData.action);
  },
  _deleteItem: function _deleteItem() {
    this._list.deleteItem(this._$itemWithMenu);
  },
  handleContextMenu: function handleContextMenu($itemElement) {
    this._$itemWithMenu = $itemElement;

    this._menu.option({
      position: {
        my: 'top',
        at: 'bottom',
        of: $itemElement,
        collision: 'flip'
      }
    });

    this._menu.show();

    return true;
  },
  dispose: function dispose() {
    if (this._menu) {
      this._menu.$element().remove();
    }

    this.callBase.apply(this, arguments);
  }
}).include(_uiListEdit.default));

/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_devextreme_ui_list_light__ = __webpack_require__(124);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_devextreme_ui_list_light___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_devextreme_ui_list_light__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_devextreme_ui_list_modules_selection__ = __webpack_require__(205);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_devextreme_ui_list_modules_selection___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_devextreme_ui_list_modules_selection__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_devextreme_ui_list_modules_deleting__ = __webpack_require__(209);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_devextreme_ui_list_modules_deleting___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_devextreme_ui_list_modules_deleting__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_devextreme_ui_list_modules_dragging__ = __webpack_require__(220);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_devextreme_ui_list_modules_dragging___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_devextreme_ui_list_modules_dragging__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_devextreme_ui_list_modules_context__ = __webpack_require__(224);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_devextreme_ui_list_modules_context___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_devextreme_ui_list_modules_context__);

const container = document.getElementById('container');
const newElement = () => {
    const el = document.createElement('div');
    container.appendChild(el);
    return el;
};


new __WEBPACK_IMPORTED_MODULE_0_devextreme_ui_list_light___default.a(newElement(), {
    dataSource: [ 1, 2, 3],
    showSelectionControls: true,
    selectionMode: 'single'
});


new __WEBPACK_IMPORTED_MODULE_0_devextreme_ui_list_light___default.a(newElement(), {
    dataSource: [ 1, 2, 3],
    allowItemDeleting: true
});


new __WEBPACK_IMPORTED_MODULE_0_devextreme_ui_list_light___default.a(newElement(), {
    dataSource: [ 1, 2, 3],
    itemDragging: {
        allowReordering: true
    }
});


new __WEBPACK_IMPORTED_MODULE_0_devextreme_ui_list_light___default.a(newElement(), {
    dataSource: [ 1, 2, 3],
    menuItems: [
        { text: `I'm a context action` }
    ]
});


/***/ }),
/* 124 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _uiListEdit = _interopRequireDefault(__webpack_require__(125));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _component_registrator.default)('dxList', _uiListEdit.default);
var _default = _uiListEdit.default;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _uiList = _interopRequireDefault(__webpack_require__(126));

var _ui = _interopRequireDefault(__webpack_require__(190));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ListSearch = _uiList.default.inherit(_ui.default).inherit({
  _addWidgetPrefix: function _addWidgetPrefix(className) {
    return 'dx-list-' + className;
  },
  _getCombinedFilter: function _getCombinedFilter() {
    var filter;
    var storeLoadOptions;
    var dataSource = this._dataSource;

    if (dataSource) {
      storeLoadOptions = {
        filter: dataSource.filter()
      };

      dataSource._addSearchFilter(storeLoadOptions);

      filter = storeLoadOptions.filter;
    }

    return filter;
  },
  _initDataSource: function _initDataSource() {
    var value = this.option('searchValue');
    var expr = this.option('searchExpr');
    var mode = this.option('searchMode');
    this.callBase();

    if (this._dataSource) {
      value && value.length && this._dataSource.searchValue(value);
      mode.length && this._dataSource.searchOperation(_ui.default.getOperationBySearchMode(mode));
      expr && this._dataSource.searchExpr(expr);
    }
  }
});

var _default = ListSearch;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _index = __webpack_require__(6);

var _extend = __webpack_require__(2);

var _uiListEditStrategy = _interopRequireDefault(__webpack_require__(131));

var _message = _interopRequireDefault(__webpack_require__(17));

var _uiListEdit = _interopRequireDefault(__webpack_require__(139));

var _uiList = __webpack_require__(92);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIST_ITEM_SELECTED_CLASS = 'dx-list-item-selected';
var LIST_ITEM_RESPONSE_WAIT_CLASS = 'dx-list-item-response-wait';

var ListEdit = _uiList.ListBase.inherit({
  _supportedKeys: function _supportedKeys() {
    var _this = this;

    var that = this;
    var parent = this.callBase();

    var deleteFocusedItem = function deleteFocusedItem(e) {
      if (that.option('allowItemDeleting')) {
        e.preventDefault();
        that.deleteItem(that.option('focusedElement'));
      }
    };

    var moveFocusedItem = function moveFocusedItem(e, moveUp) {
      var editStrategy = _this._editStrategy;

      var focusedElement = _this.option('focusedElement');

      var focusedItemIndex = editStrategy.getNormalizedIndex(focusedElement);

      var isLastIndexFocused = focusedItemIndex === _this._getLastItemIndex();

      if (isLastIndexFocused && _this._isDataSourceLoading()) {
        return;
      }

      if (e.shiftKey && that.option('itemDragging.allowReordering')) {
        var nextItemIndex = focusedItemIndex + (moveUp ? -1 : 1);
        var $nextItem = editStrategy.getItemElement(nextItemIndex);

        _this.reorderItem(focusedElement, $nextItem);

        _this.scrollToItem(focusedElement);

        e.preventDefault();
      } else {
        var editProvider = _this._editProvider;
        var isInternalMoving = editProvider.handleKeyboardEvents(focusedItemIndex, moveUp);

        if (!isInternalMoving) {
          moveUp ? parent.upArrow(e) : parent.downArrow(e);
        }
      }
    };

    var enter = function enter(e) {
      if (!this._editProvider.handleEnterPressing(e)) {
        parent.enter.apply(this, arguments);
      }
    };

    var space = function space(e) {
      if (!this._editProvider.handleEnterPressing(e)) {
        parent.space.apply(this, arguments);
      }
    };

    return (0, _extend.extend)({}, parent, {
      del: deleteFocusedItem,
      upArrow: function upArrow(e) {
        return moveFocusedItem(e, true);
      },
      downArrow: function downArrow(e) {
        return moveFocusedItem(e);
      },
      enter: enter,
      space: space
    });
  },
  _updateSelection: function _updateSelection() {
    this._editProvider.afterItemsRendered();

    this.callBase();
  },
  _getLastItemIndex: function _getLastItemIndex() {
    return this._itemElements().length - 1;
  },
  _refreshItemElements: function _refreshItemElements() {
    this.callBase();

    var excludedSelectors = this._editProvider.getExcludedItemSelectors();

    if (excludedSelectors.length) {
      this._itemElementsCache = this._itemElementsCache.not(excludedSelectors);
    }
  },
  _isItemStrictEquals: function _isItemStrictEquals(item1, item2) {
    var privateKey = item1 && item1.__dx_key__;

    if (privateKey && !this.key() && this._selection.isItemSelected(privateKey)) {
      return false;
    }

    return this.callBase(item1, item2);
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      showSelectionControls: false,
      selectionMode: 'none',
      selectAllMode: 'page',
      onSelectAllValueChanged: null,

      /**
      * @name dxListOptions.selectAllText
      * @type string
      * @default "Select All"
      * @hidden
      */
      selectAllText: _message.default.format('dxList-selectAll'),
      menuItems: [],
      menuMode: 'context',
      allowItemDeleting: false,
      itemDeleteMode: 'static',
      itemDragging: {}
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat([{
      device: function device(_device) {
        return _device.platform === 'ios';
      },
      options: {
        menuMode: 'slide',
        itemDeleteMode: 'slideItem'
      }
    }, {
      device: {
        platform: 'android'
      },
      options: {
        itemDeleteMode: 'swipe'
      }
    }]);
  },
  _init: function _init() {
    this.callBase();

    this._initEditProvider();
  },
  _initDataSource: function _initDataSource() {
    this.callBase();

    if (!this._isPageSelectAll()) {
      this._dataSource && this._dataSource.requireTotalCount(true);
    }
  },
  _isPageSelectAll: function _isPageSelectAll() {
    return this.option('selectAllMode') === 'page';
  },
  _initEditProvider: function _initEditProvider() {
    this._editProvider = new _uiListEdit.default(this);
  },
  _disposeEditProvider: function _disposeEditProvider() {
    if (this._editProvider) {
      this._editProvider.dispose();
    }
  },
  _refreshEditProvider: function _refreshEditProvider() {
    this._disposeEditProvider();

    this._initEditProvider();
  },
  _initEditStrategy: function _initEditStrategy() {
    if (this.option('grouped')) {
      this._editStrategy = new _uiListEditStrategy.default(this);
    } else {
      this.callBase();
    }
  },
  _initMarkup: function _initMarkup() {
    this._refreshEditProvider();

    this.callBase();
  },
  _renderItems: function _renderItems() {
    this.callBase.apply(this, arguments);

    this._editProvider.afterItemsRendered();
  },
  _selectedItemClass: function _selectedItemClass() {
    return LIST_ITEM_SELECTED_CLASS;
  },
  _itemResponseWaitClass: function _itemResponseWaitClass() {
    return LIST_ITEM_RESPONSE_WAIT_CLASS;
  },
  _itemClickHandler: function _itemClickHandler(e) {
    var $itemElement = (0, _renderer.default)(e.currentTarget);

    if ($itemElement.is('.dx-state-disabled, .dx-state-disabled *')) {
      return;
    }

    var handledByEditProvider = this._editProvider.handleClick($itemElement, e);

    if (handledByEditProvider) {
      return;
    }

    this._saveSelectionChangeEvent(e);

    this.callBase.apply(this, arguments);
  },
  _shouldFireContextMenuEvent: function _shouldFireContextMenuEvent() {
    return this.callBase.apply(this, arguments) || this._editProvider.contextMenuHandlerExists();
  },
  _itemHoldHandler: function _itemHoldHandler(e) {
    var $itemElement = (0, _renderer.default)(e.currentTarget);

    if ($itemElement.is('.dx-state-disabled, .dx-state-disabled *')) {
      return;
    }

    var handledByEditProvider = (0, _index.isTouchEvent)(e) && this._editProvider.handleContextMenu($itemElement, e);

    if (handledByEditProvider) {
      e.handledByEditProvider = true;
      return;
    }

    this.callBase.apply(this, arguments);
  },
  _getItemContainer: function _getItemContainer(changeData) {
    if (this.option('grouped')) {
      var _this$_editStrategy$g;

      var groupIndex = (_this$_editStrategy$g = this._editStrategy.getIndexByItemData(changeData)) === null || _this$_editStrategy$g === void 0 ? void 0 : _this$_editStrategy$g.group;
      return this._getGroupContainerByIndex(groupIndex);
    } else {
      return this.callBase(changeData);
    }
  },
  _itemContextMenuHandler: function _itemContextMenuHandler(e) {
    var $itemElement = (0, _renderer.default)(e.currentTarget);

    if ($itemElement.is('.dx-state-disabled, .dx-state-disabled *')) {
      return;
    }

    var handledByEditProvider = !e.handledByEditProvider && this._editProvider.handleContextMenu($itemElement, e);

    if (handledByEditProvider) {
      e.preventDefault();
      return;
    }

    this.callBase.apply(this, arguments);
  },
  _postprocessRenderItem: function _postprocessRenderItem(args) {
    this.callBase.apply(this, arguments);

    this._editProvider.modifyItemElement(args);
  },
  _clean: function _clean() {
    this._disposeEditProvider();

    this.callBase();
  },
  focusListItem: function focusListItem(index) {
    var $item = this._editStrategy.getItemElement(index);

    this.option('focusedElement', $item);
    this.focus();
    this.scrollToItem(this.option('focusedElement'));
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'selectAllMode':
        this._initDataSource();

        this._dataSource.pageIndex(0);

        this._dataSource.load();

        break;

      case 'grouped':
        this._clearSelectedItems();

        delete this._renderingGroupIndex;

        this._initEditStrategy();

        this.callBase(args);
        break;

      case 'showSelectionControls':
      case 'menuItems':
      case 'menuMode':
      case 'allowItemDeleting':
      case 'itemDeleteMode':
      case 'itemDragging':
      case 'selectAllText':
        this._invalidate();

        break;

      case 'onSelectAllValueChanged':
        break;

      default:
        this.callBase(args);
    }
  },
  selectAll: function selectAll() {
    return this._selection.selectAll(this._isPageSelectAll());
  },
  unselectAll: function unselectAll() {
    return this._selection.deselectAll(this._isPageSelectAll());
  },
  isSelectAll: function isSelectAll() {
    return this._selection.getSelectAllState(this._isPageSelectAll());
  },

  /**
  * @name dxList.getFlatIndexByItemElement
  * @publicName getFlatIndexByItemElement(itemElement)
  * @param1 itemElement:Element
  * @return object
  * @hidden
  */
  getFlatIndexByItemElement: function getFlatIndexByItemElement(itemElement) {
    return this._itemElements().index(itemElement);
  },

  /**
  * @name dxList.getItemElementByFlatIndex
  * @publicName getItemElementByFlatIndex(flatIndex)
  * @param1 flatIndex:Number
  * @return Element
  * @hidden
  */
  getItemElementByFlatIndex: function getItemElementByFlatIndex(flatIndex) {
    var $itemElements = this._itemElements();

    if (flatIndex < 0 || flatIndex >= $itemElements.length) {
      return (0, _renderer.default)();
    }

    return $itemElements.eq(flatIndex);
  },

  /**
  * @name dxList.getItemByIndex
  * @publicName getItemByIndex(index)
  * @param1 index:Number
  * @return object
  * @hidden
  */
  getItemByIndex: function getItemByIndex(index) {
    return this._editStrategy.getItemDataByIndex(index);
  }
});

var _default = ListEdit;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _element_data = __webpack_require__(25);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _window = __webpack_require__(7);

var _type = __webpack_require__(1);

var _style = __webpack_require__(73);

var _size = __webpack_require__(88);

var _html_parser = __webpack_require__(89);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)();
var renderer;

var initRender = function initRender(selector, context) {
  if (!selector) {
    this.length = 0;
    return this;
  }

  if (typeof selector === 'string') {
    if (selector === 'body') {
      this[0] = context ? context.body : _dom_adapter.default.getBody();
      this.length = 1;
      return this;
    }

    context = context || _dom_adapter.default.getDocument();

    if (selector[0] === '<') {
      this[0] = _dom_adapter.default.createElement(selector.slice(1, -1), context);
      this.length = 1;
      return this;
    }

    [].push.apply(this, _dom_adapter.default.querySelectorAll(context, selector));
    return this;
  } else if (_dom_adapter.default.isNode(selector) || (0, _type.isWindow)(selector)) {
    this[0] = selector;
    this.length = 1;
    return this;
  } else if (Array.isArray(selector)) {
    [].push.apply(this, selector);
    return this;
  }

  return renderer(selector.toArray ? selector.toArray() : [selector]);
};

renderer = function renderer(selector, context) {
  return new initRender(selector, context);
};

renderer.fn = {
  dxRenderer: true
};
initRender.prototype = renderer.fn;

var repeatMethod = function repeatMethod(methodName, args) {
  for (var i = 0; i < this.length; i++) {
    var item = renderer(this[i]);
    item[methodName].apply(item, args);
  }

  return this;
};

var setAttributeValue = function setAttributeValue(element, attrName, value) {
  if (value !== undefined && value !== null) {
    _dom_adapter.default.setAttribute(element, attrName, value);
  } else {
    _dom_adapter.default.removeAttribute(element, attrName);
  }
};

initRender.prototype.show = function () {
  return this.toggle(true);
};

initRender.prototype.hide = function () {
  return this.toggle(false);
};

initRender.prototype.toggle = function (value) {
  if (this[0]) {
    this.toggleClass('dx-state-invisible', !value);
  }

  return this;
};

initRender.prototype.attr = function (attrName, value) {
  if (this.length > 1 && arguments.length > 1) return repeatMethod.call(this, 'attr', arguments);

  if (!this[0]) {
    if ((0, _type.isObject)(attrName) || value !== undefined) {
      return this;
    } else {
      return undefined;
    }
  }

  if (!this[0].getAttribute) {
    return this.prop(attrName, value);
  }

  if (typeof attrName === 'string' && arguments.length === 1) {
    var result = this[0].getAttribute(attrName);
    return result == null ? undefined : result;
  } else if ((0, _type.isPlainObject)(attrName)) {
    for (var key in attrName) {
      this.attr(key, attrName[key]);
    }
  } else {
    setAttributeValue(this[0], attrName, value);
  }

  return this;
};

initRender.prototype.removeAttr = function (attrName) {
  this[0] && _dom_adapter.default.removeAttribute(this[0], attrName);
  return this;
};

initRender.prototype.prop = function (propName, value) {
  if (!this[0]) return this;

  if (typeof propName === 'string' && arguments.length === 1) {
    return this[0][propName];
  } else if ((0, _type.isPlainObject)(propName)) {
    for (var key in propName) {
      this.prop(key, propName[key]);
    }
  } else {
    _dom_adapter.default.setProperty(this[0], propName, value);
  }

  return this;
};

initRender.prototype.addClass = function (className) {
  return this.toggleClass(className, true);
};

initRender.prototype.removeClass = function (className) {
  return this.toggleClass(className, false);
};

initRender.prototype.hasClass = function (className) {
  if (!this[0] || this[0].className === undefined) return false;
  var classNames = className.split(' ');

  for (var i = 0; i < classNames.length; i++) {
    if (this[0].classList) {
      if (this[0].classList.contains(classNames[i])) return true;
    } else {
      // IE9
      var _className = (0, _type.isString)(this[0].className) ? this[0].className : _dom_adapter.default.getAttribute(this[0], 'class');

      if ((_className || '').split(' ').indexOf(classNames[i]) >= 0) return true;
    }
  }

  return false;
};

initRender.prototype.toggleClass = function (className, value) {
  if (this.length > 1) {
    return repeatMethod.call(this, 'toggleClass', arguments);
  }

  if (!this[0] || !className) return this;
  value = value === undefined ? !this.hasClass(className) : value;
  var classNames = className.split(' ');

  for (var i = 0; i < classNames.length; i++) {
    _dom_adapter.default.setClass(this[0], classNames[i], value);
  }

  return this;
};

['width', 'height', 'outerWidth', 'outerHeight', 'innerWidth', 'innerHeight'].forEach(function (methodName) {
  var partialName = methodName.toLowerCase().indexOf('width') >= 0 ? 'Width' : 'Height';
  var propName = partialName.toLowerCase();
  var isOuter = methodName.indexOf('outer') === 0;
  var isInner = methodName.indexOf('inner') === 0;

  initRender.prototype[methodName] = function (value) {
    if (this.length > 1 && arguments.length > 0) {
      return repeatMethod.call(this, methodName, arguments);
    }

    var element = this[0];

    if (!element) {
      return;
    }

    if ((0, _type.isWindow)(element)) {
      return isOuter ? element['inner' + partialName] : _dom_adapter.default.getDocumentElement()['client' + partialName];
    }

    if (_dom_adapter.default.isDocument(element)) {
      var documentElement = _dom_adapter.default.getDocumentElement();

      var body = _dom_adapter.default.getBody();

      return Math.max(body['scroll' + partialName], body['offset' + partialName], documentElement['scroll' + partialName], documentElement['offset' + partialName], documentElement['client' + partialName]);
    }

    if (arguments.length === 0 || typeof value === 'boolean') {
      var include = {
        paddings: isInner || isOuter,
        borders: isOuter,
        margins: value
      };
      return (0, _size.getSize)(element, propName, include);
    }

    if (value === undefined || value === null) {
      return this;
    }

    if ((0, _type.isNumeric)(value)) {
      var elementStyles = window.getComputedStyle(element);
      var sizeAdjustment = (0, _size.getElementBoxParams)(propName, elementStyles);
      var isBorderBox = elementStyles.boxSizing === 'border-box';
      value = Number(value);

      if (isOuter) {
        value -= isBorderBox ? 0 : sizeAdjustment.border + sizeAdjustment.padding;
      } else if (isInner) {
        value += isBorderBox ? sizeAdjustment.border : -sizeAdjustment.padding;
      } else if (isBorderBox) {
        value += sizeAdjustment.border + sizeAdjustment.padding;
      }
    }

    value += (0, _type.isNumeric)(value) ? 'px' : '';

    _dom_adapter.default.setStyle(element, propName, value);

    return this;
  };
});

initRender.prototype.html = function (value) {
  if (!arguments.length) {
    return this[0].innerHTML;
  }

  this.empty();

  if (typeof value === 'string' && !(0, _html_parser.isTablePart)(value) || typeof value === 'number') {
    this[0].innerHTML = value;
    return this;
  }

  return this.append((0, _html_parser.parseHTML)(value));
};

var appendElements = function appendElements(element, nextSibling) {
  if (!this[0] || !element) return;

  if (typeof element === 'string') {
    element = (0, _html_parser.parseHTML)(element);
  } else if (element.nodeType) {
    element = [element];
  } else if ((0, _type.isNumeric)(element)) {
    element = [_dom_adapter.default.createTextNode(element)];
  }

  for (var i = 0; i < element.length; i++) {
    var item = element[i];
    var container = this[0];
    var wrapTR = container.tagName === 'TABLE' && item.tagName === 'TR';

    if (wrapTR && container.tBodies && container.tBodies.length) {
      container = container.tBodies[0];
    }

    _dom_adapter.default.insertElement(container, item.nodeType ? item : item[0], nextSibling);
  }
};

var setCss = function setCss(name, value) {
  if (!this[0] || !this[0].style) return;

  if (value === null || typeof value === 'number' && isNaN(value)) {
    return;
  }

  name = (0, _style.styleProp)(name);

  for (var i = 0; i < this.length; i++) {
    this[i].style[name] = (0, _style.normalizeStyleProp)(name, value);
  }
};

initRender.prototype.css = function (name, value) {
  if ((0, _type.isString)(name)) {
    if (arguments.length === 2) {
      setCss.call(this, name, value);
    } else {
      if (!this[0]) return;
      name = (0, _style.styleProp)(name);
      var result = window.getComputedStyle(this[0])[name] || this[0].style[name];
      return (0, _type.isNumeric)(result) ? result.toString() : result;
    }
  } else if ((0, _type.isPlainObject)(name)) {
    for (var key in name) {
      setCss.call(this, key, name[key]);
    }
  }

  return this;
};

initRender.prototype.prepend = function (element) {
  if (arguments.length > 1) {
    for (var i = 0; i < arguments.length; i++) {
      this.prepend(arguments[i]);
    }

    return this;
  }

  appendElements.apply(this, [element, this[0].firstChild]);
  return this;
};

initRender.prototype.append = function (element) {
  if (arguments.length > 1) {
    for (var i = 0; i < arguments.length; i++) {
      this.append(arguments[i]);
    }

    return this;
  }

  appendElements.apply(this, [element]);
  return this;
};

initRender.prototype.prependTo = function (element) {
  if (this.length > 1) {
    for (var i = this.length - 1; i >= 0; i--) {
      renderer(this[i]).prependTo(element);
    }

    return this;
  }

  element = renderer(element);

  if (element[0]) {
    _dom_adapter.default.insertElement(element[0], this[0], element[0].firstChild);
  }

  return this;
};

initRender.prototype.appendTo = function (element) {
  if (this.length > 1) {
    return repeatMethod.call(this, 'appendTo', arguments);
  }

  _dom_adapter.default.insertElement(renderer(element)[0], this[0]);

  return this;
};

initRender.prototype.insertBefore = function (element) {
  if (element && element[0]) {
    _dom_adapter.default.insertElement(element[0].parentNode, this[0], element[0]);
  }

  return this;
};

initRender.prototype.insertAfter = function (element) {
  if (element && element[0]) {
    _dom_adapter.default.insertElement(element[0].parentNode, this[0], element[0].nextSibling);
  }

  return this;
};

initRender.prototype.before = function (element) {
  if (this[0]) {
    _dom_adapter.default.insertElement(this[0].parentNode, element[0], this[0]);
  }

  return this;
};

initRender.prototype.after = function (element) {
  if (this[0]) {
    _dom_adapter.default.insertElement(this[0].parentNode, element[0], this[0].nextSibling);
  }

  return this;
};

initRender.prototype.wrap = function (wrapper) {
  if (this[0]) {
    var wrap = renderer(wrapper);
    wrap.insertBefore(this);
    wrap.append(this);
  }

  return this;
};

initRender.prototype.wrapInner = function (wrapper) {
  var contents = this.contents();

  if (contents.length) {
    contents.wrap(wrapper);
  } else {
    this.append(wrapper);
  }

  return this;
};

initRender.prototype.replaceWith = function (element) {
  if (!(element && element[0])) return;
  if (element.is(this)) return this;
  element.insertBefore(this);
  this.remove();
  return element;
};

initRender.prototype.remove = function () {
  if (this.length > 1) {
    return repeatMethod.call(this, 'remove', arguments);
  }

  (0, _element_data.cleanDataRecursive)(this[0], true);

  _dom_adapter.default.removeElement(this[0]);

  return this;
};

initRender.prototype.detach = function () {
  if (this.length > 1) {
    return repeatMethod.call(this, 'detach', arguments);
  }

  _dom_adapter.default.removeElement(this[0]);

  return this;
};

initRender.prototype.empty = function () {
  if (this.length > 1) {
    return repeatMethod.call(this, 'empty', arguments);
  }

  (0, _element_data.cleanDataRecursive)(this[0]);

  _dom_adapter.default.setText(this[0], '');

  return this;
};

initRender.prototype.clone = function () {
  var result = [];

  for (var i = 0; i < this.length; i++) {
    result.push(this[i].cloneNode(true));
  }

  return renderer(result);
};

initRender.prototype.text = function (value) {
  if (!arguments.length) {
    var result = '';

    for (var i = 0; i < this.length; i++) {
      result += this[i] && this[i].textContent || '';
    }

    return result;
  }

  var text = (0, _type.isFunction)(value) ? value() : value;
  (0, _element_data.cleanDataRecursive)(this[0], false);

  _dom_adapter.default.setText(this[0], (0, _type.isDefined)(text) ? text : '');

  return this;
};

initRender.prototype.val = function (value) {
  if (arguments.length === 1) {
    return this.prop('value', (0, _type.isDefined)(value) ? value : '');
  }

  return this.prop('value');
};

initRender.prototype.contents = function () {
  if (!this[0]) return renderer();
  var result = [];
  result.push.apply(result, this[0].childNodes);
  return renderer(result);
};

initRender.prototype.find = function (selector) {
  var result = renderer();

  if (!selector) {
    return result;
  }

  var nodes = [];
  var i;

  if (typeof selector === 'string') {
    selector = selector.trim();

    for (i = 0; i < this.length; i++) {
      var element = this[i];

      if (_dom_adapter.default.isElementNode(element)) {
        var elementId = element.getAttribute('id');
        var queryId = elementId || 'dx-query-children';

        if (!elementId) {
          setAttributeValue(element, 'id', queryId);
        }

        queryId = '[id=\'' + queryId + '\'] ';
        var querySelector = queryId + selector.replace(/([^\\])(,)/g, '$1, ' + queryId);
        nodes.push.apply(nodes, _dom_adapter.default.querySelectorAll(element, querySelector));
        setAttributeValue(element, 'id', elementId);
      } else if (_dom_adapter.default.isDocument(element)) {
        nodes.push.apply(nodes, _dom_adapter.default.querySelectorAll(element, selector));
      }
    }
  } else {
    for (i = 0; i < this.length; i++) {
      selector = _dom_adapter.default.isNode(selector) ? selector : selector[0];

      if (this[i] !== selector && this[i].contains(selector)) {
        nodes.push(selector);
      }
    }
  }

  return result.add(nodes);
};

var isVisible = function isVisible(_, element) {
  if (!element.nodeType) return true;
  return !!(element.offsetWidth || element.offsetHeight || element.getClientRects().length);
};

initRender.prototype.filter = function (selector) {
  if (!selector) return renderer();

  if (selector === ':visible') {
    return this.filter(isVisible);
  } else if (selector === ':hidden') {
    return this.filter(function (_, element) {
      return !isVisible(_, element);
    });
  }

  var result = [];

  for (var i = 0; i < this.length; i++) {
    var item = this[i];

    if (_dom_adapter.default.isElementNode(item) && (0, _type.type)(selector) === 'string') {
      _dom_adapter.default.elementMatches(item, selector) && result.push(item);
    } else if (_dom_adapter.default.isNode(selector) || (0, _type.isWindow)(selector)) {
      selector === item && result.push(item);
    } else if ((0, _type.isFunction)(selector)) {
      selector.call(item, i, item) && result.push(item);
    } else {
      for (var j = 0; j < selector.length; j++) {
        selector[j] === item && result.push(item);
      }
    }
  }

  return renderer(result);
};

initRender.prototype.not = function (selector) {
  var result = [];
  var nodes = this.filter(selector).toArray();

  for (var i = 0; i < this.length; i++) {
    if (nodes.indexOf(this[i]) === -1) {
      result.push(this[i]);
    }
  }

  return renderer(result);
};

initRender.prototype.is = function (selector) {
  return !!this.filter(selector).length;
};

initRender.prototype.children = function (selector) {
  var result = [];

  for (var i = 0; i < this.length; i++) {
    var nodes = this[i] ? this[i].childNodes : [];

    for (var j = 0; j < nodes.length; j++) {
      if (_dom_adapter.default.isElementNode(nodes[j])) {
        result.push(nodes[j]);
      }
    }
  }

  result = renderer(result);
  return selector ? result.filter(selector) : result;
};

initRender.prototype.siblings = function () {
  var element = this[0];

  if (!element || !element.parentNode) {
    return renderer();
  }

  var result = [];
  var parentChildNodes = element.parentNode.childNodes || [];

  for (var i = 0; i < parentChildNodes.length; i++) {
    var node = parentChildNodes[i];

    if (_dom_adapter.default.isElementNode(node) && node !== element) {
      result.push(node);
    }
  }

  return renderer(result);
};

initRender.prototype.each = function (callback) {
  for (var i = 0; i < this.length; i++) {
    if (callback.call(this[i], i, this[i]) === false) {
      break;
    }
  }
};

initRender.prototype.index = function (element) {
  if (!element) {
    return this.parent().children().index(this);
  }

  element = renderer(element);
  return this.toArray().indexOf(element[0]);
};

initRender.prototype.get = function (index) {
  return this[index < 0 ? this.length + index : index];
};

initRender.prototype.eq = function (index) {
  index = index < 0 ? this.length + index : index;
  return renderer(this[index]);
};

initRender.prototype.first = function () {
  return this.eq(0);
};

initRender.prototype.last = function () {
  return this.eq(-1);
};

initRender.prototype.parent = function (selector) {
  if (!this[0]) return renderer();
  var result = renderer(this[0].parentNode);
  return !selector || result.is(selector) ? result : renderer();
};

initRender.prototype.parents = function (selector) {
  var result = [];
  var parent = this.parent();

  while (parent && parent[0] && !_dom_adapter.default.isDocument(parent[0])) {
    if (_dom_adapter.default.isElementNode(parent[0])) {
      if (!selector || parent.is(selector)) {
        result.push(parent.get(0));
      }
    }

    parent = parent.parent();
  }

  return renderer(result);
};

initRender.prototype.closest = function (selector) {
  if (this.is(selector)) {
    return this;
  }

  var parent = this.parent();

  while (parent && parent.length) {
    if (parent.is(selector)) {
      return parent;
    }

    parent = parent.parent();
  }

  return renderer();
};

initRender.prototype.next = function (selector) {
  if (!this[0]) return renderer();
  var next = renderer(this[0].nextSibling);

  if (!arguments.length) {
    return next;
  }

  while (next && next.length) {
    if (next.is(selector)) return next;
    next = next.next();
  }

  return renderer();
};

initRender.prototype.prev = function () {
  if (!this[0]) return renderer();
  return renderer(this[0].previousSibling);
};

initRender.prototype.add = function (selector) {
  var targets = renderer(selector);
  var result = this.toArray();

  for (var i = 0; i < targets.length; i++) {
    var target = targets[i];

    if (result.indexOf(target) === -1) {
      result.push(target);
    }
  }

  return renderer(result);
};

var emptyArray = [];

initRender.prototype.splice = function () {
  return renderer(emptyArray.splice.apply(this, arguments));
};

initRender.prototype.slice = function () {
  return renderer(emptyArray.slice.apply(this, arguments));
};

initRender.prototype.toArray = function () {
  return emptyArray.slice.call(this);
};

var getWindowByElement = function getWindowByElement(element) {
  return (0, _type.isWindow)(element) ? element : element.defaultView;
};

initRender.prototype.offset = function () {
  if (!this[0]) return;

  if (!this[0].getClientRects().length) {
    return {
      top: 0,
      left: 0
    };
  }

  var rect = this[0].getBoundingClientRect();
  var win = getWindowByElement(this[0].ownerDocument);
  var docElem = this[0].ownerDocument.documentElement;
  return {
    top: rect.top + win.pageYOffset - docElem.clientTop,
    left: rect.left + win.pageXOffset - docElem.clientLeft
  };
};

initRender.prototype.offsetParent = function () {
  if (!this[0]) return renderer();
  var offsetParent = renderer(this[0].offsetParent);

  while (offsetParent[0] && offsetParent.css('position') === 'static') {
    offsetParent = renderer(offsetParent[0].offsetParent);
  }

  offsetParent = offsetParent[0] ? offsetParent : renderer(_dom_adapter.default.getDocumentElement());
  return offsetParent;
};

initRender.prototype.position = function () {
  if (!this[0]) return;
  var offset;
  var marginTop = parseFloat(this.css('marginTop'));
  var marginLeft = parseFloat(this.css('marginLeft'));

  if (this.css('position') === 'fixed') {
    offset = this[0].getBoundingClientRect();
    return {
      top: offset.top - marginTop,
      left: offset.left - marginLeft
    };
  }

  offset = this.offset();
  var offsetParent = this.offsetParent();
  var parentOffset = {
    top: 0,
    left: 0
  };

  if (offsetParent[0].nodeName !== 'HTML') {
    parentOffset = offsetParent.offset();
  }

  parentOffset = {
    top: parentOffset.top + parseFloat(offsetParent.css('borderTopWidth')),
    left: parentOffset.left + parseFloat(offsetParent.css('borderLeftWidth'))
  };
  return {
    top: offset.top - parentOffset.top - marginTop,
    left: offset.left - parentOffset.left - marginLeft
  };
};

[{
  name: 'scrollLeft',
  offsetProp: 'pageXOffset',
  scrollWindow: function scrollWindow(win, value) {
    win.scrollTo(value, win.pageYOffset);
  }
}, {
  name: 'scrollTop',
  offsetProp: 'pageYOffset',
  scrollWindow: function scrollWindow(win, value) {
    win.scrollTo(win.pageXOffset, value);
  }
}].forEach(function (directionStrategy) {
  var propName = directionStrategy.name;

  initRender.prototype[propName] = function (value) {
    if (!this[0]) {
      return;
    }

    var window = getWindowByElement(this[0]);

    if (value === undefined) {
      return window ? window[directionStrategy.offsetProp] : this[0][propName];
    }

    if (window) {
      directionStrategy.scrollWindow(window, value);
    } else {
      this[0][propName] = value;
    }

    return this;
  };
});

initRender.prototype.data = function (key, value) {
  if (!this[0]) return;

  if (arguments.length < 2) {
    return _element_data.data.call(renderer, this[0], key);
  }

  _element_data.data.call(renderer, this[0], key, value);

  return this;
};

initRender.prototype.removeData = function (key) {
  this[0] && (0, _element_data.removeData)(this[0], key);
  return this;
};

var rendererWrapper = function rendererWrapper() {
  return renderer.apply(this, arguments);
};

Object.defineProperty(rendererWrapper, 'fn', {
  enumerable: true,
  configurable: true,
  get: function get() {
    return renderer.fn;
  },
  set: function set(value) {
    renderer.fn = value;
  }
});
var _default = {
  set: function set(strategy) {
    renderer = strategy;
  },
  get: function get() {
    return rendererWrapper;
  }
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.version = void 0;
var version = '21.1.5';
exports.version = version;

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = _default;
var touchPropsToHook = ['pageX', 'pageY', 'screenX', 'screenY', 'clientX', 'clientY'];

var touchPropHook = function touchPropHook(name, event) {
  if (event[name] && !event.touches || !event.touches) {
    return event[name];
  }

  var touches = event.touches.length ? event.touches : event.changedTouches;

  if (!touches.length) {
    return;
  }

  return touches[0][name];
};

function _default(callback) {
  touchPropsToHook.forEach(function (name) {
    callback(name, function (event) {
      return touchPropHook(name, event);
    });
  }, this);
}

module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _errors = _interopRequireDefault(__webpack_require__(13));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var addNamespace = function addNamespace(eventNames, namespace) {
  if (!namespace) {
    throw _errors.default.Error('E0017');
  }

  if (Array.isArray(eventNames)) {
    return eventNames.map(function (eventName) {
      return addNamespace(eventName, namespace);
    }).join(' ');
  }

  if (eventNames.indexOf(' ') !== -1) {
    return addNamespace(eventNames.split(/\s+/g), namespace);
  }

  return "".concat(eventNames, ".").concat(namespace);
};

var _default = addNamespace;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _type = __webpack_require__(1);

var _iterator = __webpack_require__(4);

var _store_helper = _interopRequireDefault(__webpack_require__(74));

var _query = _interopRequireDefault(__webpack_require__(48));

var _uiCollection_widgetEditStrategy = _interopRequireDefault(__webpack_require__(90));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIST_ITEM_CLASS = 'dx-list-item';
var LIST_GROUP_CLASS = 'dx-list-group';
var SELECTION_SHIFT = 20;
var SELECTION_MASK = (1 << SELECTION_SHIFT) - 1;

var combineIndex = function combineIndex(indices) {
  return (indices.group << SELECTION_SHIFT) + indices.item;
};

var splitIndex = function splitIndex(combinedIndex) {
  return {
    group: combinedIndex >> SELECTION_SHIFT,
    item: combinedIndex & SELECTION_MASK
  };
};

var GroupedEditStrategy = _uiCollection_widgetEditStrategy.default.inherit({
  _groupElements: function _groupElements() {
    return this._collectionWidget._itemContainer().find('.' + LIST_GROUP_CLASS);
  },
  _groupItemElements: function _groupItemElements($group) {
    return $group.find('.' + LIST_ITEM_CLASS);
  },
  getIndexByItemData: function getIndexByItemData(itemData) {
    var groups = this._collectionWidget.option('items');

    var index = false;
    if (!itemData) return false;

    if (itemData.items && itemData.items.length) {
      itemData = itemData.items[0];
    }

    (0, _iterator.each)(groups, function (groupIndex, group) {
      if (!group.items) return false;
      (0, _iterator.each)(group.items, function (itemIndex, item) {
        if (item !== itemData) {
          return true;
        }

        index = {
          group: groupIndex,
          item: itemIndex
        };
        return false;
      });

      if (index) {
        return false;
      }
    });
    return index;
  },
  getItemDataByIndex: function getItemDataByIndex(index) {
    var items = this._collectionWidget.option('items');

    if ((0, _type.isNumeric)(index)) {
      return this.itemsGetter()[index];
    }

    return index && items[index.group] && items[index.group].items[index.item] || null;
  },
  itemsGetter: function itemsGetter() {
    var resultItems = [];

    var items = this._collectionWidget.option('items');

    for (var i = 0; i < items.length; i++) {
      if (items[i] && items[i].items) {
        resultItems = resultItems.concat(items[i].items);
      } else {
        resultItems.push(items[i]);
      }
    }

    return resultItems;
  },
  deleteItemAtIndex: function deleteItemAtIndex(index) {
    var indices = splitIndex(index);

    var itemGroup = this._collectionWidget.option('items')[indices.group].items;

    itemGroup.splice(indices.item, 1);
  },
  getKeysByItems: function getKeysByItems(items) {
    var plainItems = [];
    var i;

    for (i = 0; i < items.length; i++) {
      if (items[i] && items[i].items) {
        plainItems = plainItems.concat(items[i].items);
      } else {
        plainItems.push(items[i]);
      }
    }

    var result = [];

    for (i = 0; i < plainItems.length; i++) {
      result.push(this._collectionWidget.keyOf(plainItems[i]));
    }

    return result;
  },
  getIndexByKey: function getIndexByKey(key, items) {
    var groups = items || this._collectionWidget.option('items');

    var index = -1;
    var that = this;
    (0, _iterator.each)(groups, function (groupIndex, group) {
      if (!group.items) return;
      var keys = that.getKeysByItems(group.items);
      (0, _iterator.each)(keys, function (keyIndex, itemKey) {
        if (that._equalKeys(itemKey, key)) {
          index = {
            group: groupIndex,
            item: keyIndex
          };
          return false;
        }
      });

      if (index !== -1) {
        return false;
      }
    });
    return index;
  },
  _getGroups: function _getGroups(items) {
    var dataSource = this._collectionWidget.getDataSource();

    var group = dataSource && dataSource.group();

    if (group) {
      return _store_helper.default.queryByOptions((0, _query.default)(items), {
        group: group
      }).toArray();
    }

    return this._collectionWidget.option('items');
  },
  getItemsByKeys: function getItemsByKeys(keys, items) {
    var result = [];
    (0, _iterator.each)(keys, function (_, key) {
      var getItemMeta = function (groups) {
        var index = this.getIndexByKey(key, groups);
        var group = index && groups[index.group];
        if (!group) return;
        return {
          groupKey: group.key,
          item: group.items[index.item]
        };
      }.bind(this);

      var itemMeta = getItemMeta(this._getGroups(items));
      if (!itemMeta) return;
      var groupKey = itemMeta.groupKey;
      var item = itemMeta.item;
      var selectedGroup;
      (0, _iterator.each)(result, function (_, item) {
        if (item.key === groupKey) {
          selectedGroup = item;
          return false;
        }
      });

      if (!selectedGroup) {
        selectedGroup = {
          key: groupKey,
          items: []
        };
        result.push(selectedGroup);
      }

      selectedGroup.items.push(item);
    }.bind(this));
    return result;
  },
  moveItemAtIndexToIndex: function moveItemAtIndexToIndex(movingIndex, destinationIndex) {
    var items = this._collectionWidget.option('items');

    var movingIndices = splitIndex(movingIndex);
    var destinationIndices = splitIndex(destinationIndex);
    var movingItemGroup = items[movingIndices.group].items;
    var destinationItemGroup = items[destinationIndices.group].items;
    var movedItemData = movingItemGroup[movingIndices.item];
    movingItemGroup.splice(movingIndices.item, 1);
    destinationItemGroup.splice(destinationIndices.item, 0, movedItemData);
  },
  _isItemIndex: function _isItemIndex(index) {
    return index && (0, _type.isNumeric)(index.group) && (0, _type.isNumeric)(index.item);
  },
  _getNormalizedItemIndex: function _getNormalizedItemIndex(itemElement) {
    var $item = (0, _renderer.default)(itemElement);
    var $group = $item.closest('.' + LIST_GROUP_CLASS);

    if (!$group.length) {
      return -1;
    }

    return combineIndex({
      group: this._groupElements().index($group),
      item: this._groupItemElements($group).index($item)
    });
  },
  _normalizeItemIndex: function _normalizeItemIndex(index) {
    return combineIndex(index);
  },
  _denormalizeItemIndex: function _denormalizeItemIndex(index) {
    return splitIndex(index);
  },
  _getItemByNormalizedIndex: function _getItemByNormalizedIndex(index) {
    var indices = splitIndex(index);

    var $group = this._groupElements().eq(indices.group);

    return this._groupItemElements($group).eq(indices.item);
  },
  _itemsFromSameParent: function _itemsFromSameParent(firstIndex, secondIndex) {
    return splitIndex(firstIndex).group === splitIndex(secondIndex).group;
  }
});

var _default = GroupedEditStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.queryImpl = void 0;

var _array_query = _interopRequireDefault(__webpack_require__(54));

var _remote_query = _interopRequireDefault(__webpack_require__(133));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var queryImpl = {
  array: _array_query.default,
  remote: _remote_query.default
};
exports.queryImpl = queryImpl;

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _query_adapters = _interopRequireDefault(__webpack_require__(134));

var _errors = __webpack_require__(36);

var _iterator = __webpack_require__(4);

var _type = __webpack_require__(1);

var _deferred = __webpack_require__(9);

var _array_query = _interopRequireDefault(__webpack_require__(54));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var remoteQueryImpl = function remoteQueryImpl(url, queryOptions, tasks) {
  tasks = tasks || [];
  queryOptions = queryOptions || {};

  var createTask = function createTask(name, args) {
    return {
      name: name,
      args: args
    };
  };

  var exec = function exec(executorTask) {
    var d = new _deferred.Deferred();

    var _adapterFactory;

    var _adapter;

    var _taskQueue;

    var _currentTask;

    var _mergedSortArgs;

    var rejectWithNotify = function rejectWithNotify(error) {
      var handler = queryOptions.errorHandler;

      if (handler) {
        handler(error);
      }

      (0, _errors.handleError)(error);
      d.reject(error);
    };

    function mergeSortTask(task) {
      switch (task.name) {
        case 'sortBy':
          _mergedSortArgs = [task.args];
          return true;

        case 'thenBy':
          if (!_mergedSortArgs) {
            throw _errors.errors.Error('E4004');
          }

          _mergedSortArgs.push(task.args);

          return true;
      }

      return false;
    }

    function unmergeSortTasks() {
      var head = _taskQueue[0];
      var unmergedTasks = [];

      if (head && head.name === 'multiSort') {
        _taskQueue.shift();

        (0, _iterator.each)(head.args[0], function () {
          unmergedTasks.push(createTask(unmergedTasks.length ? 'thenBy' : 'sortBy', this));
        });
      }

      _taskQueue = unmergedTasks.concat(_taskQueue);
    }

    try {
      _adapterFactory = queryOptions.adapter;

      if (!(0, _type.isFunction)(_adapterFactory)) {
        _adapterFactory = _query_adapters.default[_adapterFactory];
      }

      _adapter = _adapterFactory(queryOptions);
      _taskQueue = [].concat(tasks).concat(executorTask);
      var optimize = _adapter.optimize;
      if (optimize) optimize(_taskQueue);

      while (_taskQueue.length) {
        _currentTask = _taskQueue[0];

        if (!mergeSortTask(_currentTask)) {
          if (_mergedSortArgs) {
            _taskQueue.unshift(createTask('multiSort', [_mergedSortArgs]));

            _mergedSortArgs = null;
            continue;
          }

          if (String(_currentTask.name) !== 'enumerate') {
            if (!_adapter[_currentTask.name] || _adapter[_currentTask.name].apply(_adapter, _currentTask.args) === false) {
              break;
            }
          }
        }

        _taskQueue.shift();
      }

      unmergeSortTasks();

      _adapter.exec(url).done(function (result, extra) {
        if (!_taskQueue.length) {
          d.resolve(result, extra);
        } else {
          var clientChain = (0, _array_query.default)(result, {
            errorHandler: queryOptions.errorHandler
          });
          (0, _iterator.each)(_taskQueue, function () {
            clientChain = clientChain[this.name].apply(clientChain, this.args);
          });
          clientChain.done(d.resolve).fail(d.reject);
        }
      }).fail(rejectWithNotify);
    } catch (x) {
      rejectWithNotify(x);
    }

    return d.promise();
  };

  var query = {};
  (0, _iterator.each)(['sortBy', 'thenBy', 'filter', 'slice', 'select', 'groupBy'], function () {
    var name = String(this);

    query[name] = function () {
      return remoteQueryImpl(url, queryOptions, tasks.concat(createTask(name, arguments)));
    };
  });
  (0, _iterator.each)(['count', 'min', 'max', 'sum', 'avg', 'aggregate', 'enumerate'], function () {
    var name = String(this);

    query[name] = function () {
      return exec.call(this, createTask(name, arguments));
    };
  });
  return query;
};

var _default = remoteQueryImpl;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;
var _default = {};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _class = _interopRequireDefault(__webpack_require__(11));

var _common = __webpack_require__(3);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var abstract = _class.default.abstract;

var EditStrategy = _class.default.inherit({
  ctor: function ctor(collectionWidget) {
    this._collectionWidget = collectionWidget;
  },
  getIndexByItemData: abstract,
  getItemDataByIndex: abstract,
  getKeysByItems: abstract,
  getItemsByKeys: abstract,
  itemsGetter: abstract,
  getKeyByIndex: function getKeyByIndex(index) {
    var resultIndex = this._denormalizeItemIndex(index);

    return this.getKeysByItems([this.getItemDataByIndex(resultIndex)])[0];
  },
  _equalKeys: function _equalKeys(key1, key2) {
    if (this._collectionWidget._isKeySpecified()) {
      return (0, _common.equalByValue)(key1, key2);
    } else {
      return key1 === key2;
    }
  },
  beginCache: function beginCache() {
    this._cache = {};
  },
  endCache: function endCache() {
    this._cache = null;
  },
  getIndexByKey: abstract,
  getNormalizedIndex: function getNormalizedIndex(value) {
    if (this._isNormalizedItemIndex(value)) {
      return value;
    }

    if (this._isItemIndex(value)) {
      return this._normalizeItemIndex(value);
    }

    if (this._isNode(value)) {
      return this._getNormalizedItemIndex(value);
    }

    return this._normalizeItemIndex(this.getIndexByItemData(value));
  },
  getIndex: function getIndex(value) {
    if (this._isNormalizedItemIndex(value)) {
      return this._denormalizeItemIndex(value);
    }

    if (this._isItemIndex(value)) {
      return value;
    }

    if (this._isNode(value)) {
      return this._denormalizeItemIndex(this._getNormalizedItemIndex(value));
    }

    return this.getIndexByItemData(value);
  },
  getItemElement: function getItemElement(value) {
    if (this._isNormalizedItemIndex(value)) {
      return this._getItemByNormalizedIndex(value);
    }

    if (this._isItemIndex(value)) {
      return this._getItemByNormalizedIndex(this._normalizeItemIndex(value));
    }

    if (this._isNode(value)) {
      return (0, _renderer.default)(value);
    }

    var normalizedItemIndex = this._normalizeItemIndex(this.getIndexByItemData(value));

    return this._getItemByNormalizedIndex(normalizedItemIndex);
  },
  _isNode: function _isNode(el) {
    return _dom_adapter.default.isNode(el && (0, _type.isRenderer)(el) ? el.get(0) : el);
  },
  deleteItemAtIndex: abstract,
  itemPlacementFunc: function itemPlacementFunc(movingIndex, destinationIndex) {
    return this._itemsFromSameParent(movingIndex, destinationIndex) && movingIndex < destinationIndex ? 'after' : 'before';
  },
  moveItemAtIndexToIndex: abstract,
  _isNormalizedItemIndex: function _isNormalizedItemIndex(index) {
    return typeof index === 'number' && Math.round(index) === index;
  },
  _isItemIndex: abstract,
  _getNormalizedItemIndex: abstract,
  _normalizeItemIndex: abstract,
  _denormalizeItemIndex: abstract,
  _getItemByNormalizedIndex: abstract,
  _itemsFromSameParent: abstract
});

var _default = EditStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

/* eslint-disable node/no-unsupported-features/es-syntax */
// !!! AUTO-GENERATED FILE, DO NOT EDIT
var _default = {
  "en-150": "en-001",
  "en-AG": "en-001",
  "en-AI": "en-001",
  "en-AU": "en-001",
  "en-BB": "en-001",
  "en-BM": "en-001",
  "en-BS": "en-001",
  "en-BW": "en-001",
  "en-BZ": "en-001",
  "en-CA": "en-001",
  "en-CC": "en-001",
  "en-CK": "en-001",
  "en-CM": "en-001",
  "en-CX": "en-001",
  "en-CY": "en-001",
  "en-DG": "en-001",
  "en-DM": "en-001",
  "en-ER": "en-001",
  "en-FJ": "en-001",
  "en-FK": "en-001",
  "en-FM": "en-001",
  "en-GB": "en-001",
  "en-GD": "en-001",
  "en-GG": "en-001",
  "en-GH": "en-001",
  "en-GI": "en-001",
  "en-GM": "en-001",
  "en-GY": "en-001",
  "en-HK": "en-001",
  "en-IE": "en-001",
  "en-IL": "en-001",
  "en-IM": "en-001",
  "en-IN": "en-001",
  "en-IO": "en-001",
  "en-JE": "en-001",
  "en-JM": "en-001",
  "en-KE": "en-001",
  "en-KI": "en-001",
  "en-KN": "en-001",
  "en-KY": "en-001",
  "en-LC": "en-001",
  "en-LR": "en-001",
  "en-LS": "en-001",
  "en-MG": "en-001",
  "en-MO": "en-001",
  "en-MS": "en-001",
  "en-MT": "en-001",
  "en-MU": "en-001",
  "en-MW": "en-001",
  "en-MY": "en-001",
  "en-NA": "en-001",
  "en-NF": "en-001",
  "en-NG": "en-001",
  "en-NR": "en-001",
  "en-NU": "en-001",
  "en-NZ": "en-001",
  "en-PG": "en-001",
  "en-PH": "en-001",
  "en-PK": "en-001",
  "en-PN": "en-001",
  "en-PW": "en-001",
  "en-RW": "en-001",
  "en-SB": "en-001",
  "en-SC": "en-001",
  "en-SD": "en-001",
  "en-SG": "en-001",
  "en-SH": "en-001",
  "en-SL": "en-001",
  "en-SS": "en-001",
  "en-SX": "en-001",
  "en-SZ": "en-001",
  "en-TC": "en-001",
  "en-TK": "en-001",
  "en-TO": "en-001",
  "en-TT": "en-001",
  "en-TV": "en-001",
  "en-TZ": "en-001",
  "en-UG": "en-001",
  "en-VC": "en-001",
  "en-VG": "en-001",
  "en-VU": "en-001",
  "en-WS": "en-001",
  "en-ZA": "en-001",
  "en-ZM": "en-001",
  "en-ZW": "en-001",
  "en-AT": "en-150",
  "en-BE": "en-150",
  "en-CH": "en-150",
  "en-DE": "en-150",
  "en-DK": "en-150",
  "en-FI": "en-150",
  "en-NL": "en-150",
  "en-SE": "en-150",
  "en-SI": "en-150",
  "es-AR": "es-419",
  "es-BO": "es-419",
  "es-BR": "es-419",
  "es-BZ": "es-419",
  "es-CL": "es-419",
  "es-CO": "es-419",
  "es-CR": "es-419",
  "es-CU": "es-419",
  "es-DO": "es-419",
  "es-EC": "es-419",
  "es-GT": "es-419",
  "es-HN": "es-419",
  "es-MX": "es-419",
  "es-NI": "es-419",
  "es-PA": "es-419",
  "es-PE": "es-419",
  "es-PR": "es-419",
  "es-PY": "es-419",
  "es-SV": "es-419",
  "es-US": "es-419",
  "es-UY": "es-419",
  "es-VE": "es-419",
  "pt-AO": "pt-PT",
  "pt-CH": "pt-PT",
  "pt-CV": "pt-PT",
  "pt-FR": "pt-PT",
  "pt-GQ": "pt-PT",
  "pt-GW": "pt-PT",
  "pt-LU": "pt-PT",
  "pt-MO": "pt-PT",
  "pt-MZ": "pt-PT",
  "pt-ST": "pt-PT",
  "pt-TL": "pt-PT",
  "az-Arab": "root",
  "az-Cyrl": "root",
  "blt-Latn": "root",
  "bm-Nkoo": "root",
  "bs-Cyrl": "root",
  "byn-Latn": "root",
  "cu-Glag": "root",
  "dje-Arab": "root",
  "dyo-Arab": "root",
  "en-Dsrt": "root",
  "en-Shaw": "root",
  "ff-Adlm": "root",
  "ff-Arab": "root",
  "ha-Arab": "root",
  "hi-Latn": "root",
  "iu-Latn": "root",
  "kk-Arab": "root",
  "ks-Deva": "root",
  "ku-Arab": "root",
  "ky-Arab": "root",
  "ky-Latn": "root",
  "ml-Arab": "root",
  "mn-Mong": "root",
  "mni-Mtei": "root",
  "ms-Arab": "root",
  "pa-Arab": "root",
  "sat-Deva": "root",
  "sd-Deva": "root",
  "sd-Khoj": "root",
  "sd-Sind": "root",
  "shi-Latn": "root",
  "so-Arab": "root",
  "sr-Latn": "root",
  "sw-Arab": "root",
  "tg-Arab": "root",
  "ug-Cyrl": "root",
  "uz-Arab": "root",
  "uz-Cyrl": "root",
  "vai-Latn": "root",
  "wo-Arab": "root",
  "yo-Arab": "root",
  "yue-Hans": "root",
  "zh-Hant": "root",
  "zh-Hant-MO": "zh-Hant-HK"
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

/* eslint-disable import/no-commonjs */
var PARENT_LOCALE_SEPARATOR = '-';

var _default = function _default(parentLocales, locale) {
  var parentLocale = parentLocales[locale];

  if (parentLocale) {
    return parentLocale !== 'root' && parentLocale;
  }

  return locale.substr(0, locale.lastIndexOf(PARENT_LOCALE_SEPARATOR));
};

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.defaultMessages = void 0;

/* eslint-disable node/no-unsupported-features/es-syntax */
// !!! AUTO-GENERATED FILE, DO NOT EDIT
var defaultMessages = {
  "en": {
    "Yes": "Yes",
    "No": "No",
    "Cancel": "Cancel",
    "Clear": "Clear",
    "Done": "Done",
    "Loading": "Loading...",
    "Select": "Select...",
    "Search": "Search",
    "Back": "Back",
    "OK": "OK",
    "dxCollectionWidget-noDataText": "No data to display",
    "dxDropDownEditor-selectLabel": "Select",
    "validation-required": "Required",
    "validation-required-formatted": "{0} is required",
    "validation-numeric": "Value must be a number",
    "validation-numeric-formatted": "{0} must be a number",
    "validation-range": "Value is out of range",
    "validation-range-formatted": "{0} is out of range",
    "validation-stringLength": "The length of the value is not correct",
    "validation-stringLength-formatted": "The length of {0} is not correct",
    "validation-custom": "Value is invalid",
    "validation-custom-formatted": "{0} is invalid",
    "validation-async": "Value is invalid",
    "validation-async-formatted": "{0} is invalid",
    "validation-compare": "Values do not match",
    "validation-compare-formatted": "{0} does not match",
    "validation-pattern": "Value does not match pattern",
    "validation-pattern-formatted": "{0} does not match pattern",
    "validation-email": "Email is invalid",
    "validation-email-formatted": "{0} is invalid",
    "validation-mask": "Value is invalid",
    "dxLookup-searchPlaceholder": "Minimum character number: {0}",
    "dxList-pullingDownText": "Pull down to refresh...",
    "dxList-pulledDownText": "Release to refresh...",
    "dxList-refreshingText": "Refreshing...",
    "dxList-pageLoadingText": "Loading...",
    "dxList-nextButtonText": "More",
    "dxList-selectAll": "Select All",
    "dxListEditDecorator-delete": "Delete",
    "dxListEditDecorator-more": "More",
    "dxScrollView-pullingDownText": "Pull down to refresh...",
    "dxScrollView-pulledDownText": "Release to refresh...",
    "dxScrollView-refreshingText": "Refreshing...",
    "dxScrollView-reachBottomText": "Loading...",
    "dxDateBox-simulatedDataPickerTitleTime": "Select time",
    "dxDateBox-simulatedDataPickerTitleDate": "Select date",
    "dxDateBox-simulatedDataPickerTitleDateTime": "Select date and time",
    "dxDateBox-validation-datetime": "Value must be a date or time",
    "dxFileUploader-selectFile": "Select file",
    "dxFileUploader-dropFile": "or Drop file here",
    "dxFileUploader-bytes": "bytes",
    "dxFileUploader-kb": "kb",
    "dxFileUploader-Mb": "Mb",
    "dxFileUploader-Gb": "Gb",
    "dxFileUploader-upload": "Upload",
    "dxFileUploader-uploaded": "Uploaded",
    "dxFileUploader-readyToUpload": "Ready to upload",
    "dxFileUploader-uploadAbortedMessage": "Upload cancelled",
    "dxFileUploader-uploadFailedMessage": "Upload failed",
    "dxFileUploader-invalidFileExtension": "File type is not allowed",
    "dxFileUploader-invalidMaxFileSize": "File is too large",
    "dxFileUploader-invalidMinFileSize": "File is too small",
    "dxRangeSlider-ariaFrom": "From",
    "dxRangeSlider-ariaTill": "Till",
    "dxSwitch-switchedOnText": "ON",
    "dxSwitch-switchedOffText": "OFF",
    "dxForm-optionalMark": "optional",
    "dxForm-requiredMessage": "{0} is required",
    "dxNumberBox-invalidValueMessage": "Value must be a number",
    "dxNumberBox-noDataText": "No data",
    "dxDataGrid-columnChooserTitle": "Column Chooser",
    "dxDataGrid-columnChooserEmptyText": "Drag a column here to hide it",
    "dxDataGrid-groupContinuesMessage": "Continues on the next page",
    "dxDataGrid-groupContinuedMessage": "Continued from the previous page",
    "dxDataGrid-groupHeaderText": "Group by This Column",
    "dxDataGrid-ungroupHeaderText": "Ungroup",
    "dxDataGrid-ungroupAllText": "Ungroup All",
    "dxDataGrid-editingEditRow": "Edit",
    "dxDataGrid-editingSaveRowChanges": "Save",
    "dxDataGrid-editingCancelRowChanges": "Cancel",
    "dxDataGrid-editingDeleteRow": "Delete",
    "dxDataGrid-editingUndeleteRow": "Undelete",
    "dxDataGrid-editingConfirmDeleteMessage": "Are you sure you want to delete this record?",
    "dxDataGrid-validationCancelChanges": "Cancel changes",
    "dxDataGrid-groupPanelEmptyText": "Drag a column header here to group by that column",
    "dxDataGrid-noDataText": "No data",
    "dxDataGrid-searchPanelPlaceholder": "Search...",
    "dxDataGrid-filterRowShowAllText": "(All)",
    "dxDataGrid-filterRowResetOperationText": "Reset",
    "dxDataGrid-filterRowOperationEquals": "Equals",
    "dxDataGrid-filterRowOperationNotEquals": "Does not equal",
    "dxDataGrid-filterRowOperationLess": "Less than",
    "dxDataGrid-filterRowOperationLessOrEquals": "Less than or equal to",
    "dxDataGrid-filterRowOperationGreater": "Greater than",
    "dxDataGrid-filterRowOperationGreaterOrEquals": "Greater than or equal to",
    "dxDataGrid-filterRowOperationStartsWith": "Starts with",
    "dxDataGrid-filterRowOperationContains": "Contains",
    "dxDataGrid-filterRowOperationNotContains": "Does not contain",
    "dxDataGrid-filterRowOperationEndsWith": "Ends with",
    "dxDataGrid-filterRowOperationBetween": "Between",
    "dxDataGrid-filterRowOperationBetweenStartText": "Start",
    "dxDataGrid-filterRowOperationBetweenEndText": "End",
    "dxDataGrid-applyFilterText": "Apply filter",
    "dxDataGrid-trueText": "true",
    "dxDataGrid-falseText": "false",
    "dxDataGrid-sortingAscendingText": "Sort Ascending",
    "dxDataGrid-sortingDescendingText": "Sort Descending",
    "dxDataGrid-sortingClearText": "Clear Sorting",
    "dxDataGrid-editingSaveAllChanges": "Save changes",
    "dxDataGrid-editingCancelAllChanges": "Discard changes",
    "dxDataGrid-editingAddRow": "Add a row",
    "dxDataGrid-summaryMin": "Min: {0}",
    "dxDataGrid-summaryMinOtherColumn": "Min of {1} is {0}",
    "dxDataGrid-summaryMax": "Max: {0}",
    "dxDataGrid-summaryMaxOtherColumn": "Max of {1} is {0}",
    "dxDataGrid-summaryAvg": "Avg: {0}",
    "dxDataGrid-summaryAvgOtherColumn": "Avg of {1} is {0}",
    "dxDataGrid-summarySum": "Sum: {0}",
    "dxDataGrid-summarySumOtherColumn": "Sum of {1} is {0}",
    "dxDataGrid-summaryCount": "Count: {0}",
    "dxDataGrid-columnFixingFix": "Fix",
    "dxDataGrid-columnFixingUnfix": "Unfix",
    "dxDataGrid-columnFixingLeftPosition": "To the left",
    "dxDataGrid-columnFixingRightPosition": "To the right",
    "dxDataGrid-exportTo": "Export",
    "dxDataGrid-exportToExcel": "Export to Excel file",
    "dxDataGrid-exporting": "Exporting...",
    "dxDataGrid-excelFormat": "Excel file",
    "dxDataGrid-selectedRows": "Selected rows",
    "dxDataGrid-exportSelectedRows": "Export selected rows",
    "dxDataGrid-exportAll": "Export all data",
    "dxDataGrid-headerFilterEmptyValue": "(Blanks)",
    "dxDataGrid-headerFilterOK": "OK",
    "dxDataGrid-headerFilterCancel": "Cancel",
    "dxDataGrid-ariaAdaptiveCollapse": "Hide additional data",
    "dxDataGrid-ariaAdaptiveExpand": "Display additional data",
    "dxDataGrid-ariaColumn": "Column",
    "dxDataGrid-ariaValue": "Value",
    "dxDataGrid-ariaFilterCell": "Filter cell",
    "dxDataGrid-ariaCollapse": "Collapse",
    "dxDataGrid-ariaExpand": "Expand",
    "dxDataGrid-ariaDataGrid": "Data grid",
    "dxDataGrid-ariaSearchInGrid": "Search in the data grid",
    "dxDataGrid-ariaSelectAll": "Select all",
    "dxDataGrid-ariaSelectRow": "Select row",
    "dxDataGrid-ariaToolbar": "Data grid toolbar",
    "dxDataGrid-filterBuilderPopupTitle": "Filter Builder",
    "dxDataGrid-filterPanelCreateFilter": "Create Filter",
    "dxDataGrid-filterPanelClearFilter": "Clear",
    "dxDataGrid-filterPanelFilterEnabledHint": "Enable the filter",
    "dxTreeList-ariaTreeList": "Tree list",
    "dxTreeList-ariaSearchInGrid": "Search in the tree list",
    "dxTreeList-ariaToolbar": "Tree list toolbar",
    "dxTreeList-editingAddRowToNode": "Add",
    "dxPager-infoText": "Page {0} of {1} ({2} items)",
    "dxPager-pagesCountText": "of",
    "dxPager-pageSizesAllText": "All",
    "dxPivotGrid-grandTotal": "Grand Total",
    "dxPivotGrid-total": "{0} Total",
    "dxPivotGrid-fieldChooserTitle": "Field Chooser",
    "dxPivotGrid-showFieldChooser": "Show Field Chooser",
    "dxPivotGrid-expandAll": "Expand All",
    "dxPivotGrid-collapseAll": "Collapse All",
    "dxPivotGrid-sortColumnBySummary": "Sort \"{0}\" by This Column",
    "dxPivotGrid-sortRowBySummary": "Sort \"{0}\" by This Row",
    "dxPivotGrid-removeAllSorting": "Remove All Sorting",
    "dxPivotGrid-dataNotAvailable": "N/A",
    "dxPivotGrid-rowFields": "Row Fields",
    "dxPivotGrid-columnFields": "Column Fields",
    "dxPivotGrid-dataFields": "Data Fields",
    "dxPivotGrid-filterFields": "Filter Fields",
    "dxPivotGrid-allFields": "All Fields",
    "dxPivotGrid-columnFieldArea": "Drop Column Fields Here",
    "dxPivotGrid-dataFieldArea": "Drop Data Fields Here",
    "dxPivotGrid-rowFieldArea": "Drop Row Fields Here",
    "dxPivotGrid-filterFieldArea": "Drop Filter Fields Here",
    "dxScheduler-editorLabelTitle": "Subject",
    "dxScheduler-editorLabelStartDate": "Start Date",
    "dxScheduler-editorLabelEndDate": "End Date",
    "dxScheduler-editorLabelDescription": "Description",
    "dxScheduler-editorLabelRecurrence": "Repeat",
    "dxScheduler-openAppointment": "Open appointment",
    "dxScheduler-recurrenceNever": "Never",
    "dxScheduler-recurrenceMinutely": "Every minute",
    "dxScheduler-recurrenceHourly": "Hourly",
    "dxScheduler-recurrenceDaily": "Daily",
    "dxScheduler-recurrenceWeekly": "Weekly",
    "dxScheduler-recurrenceMonthly": "Monthly",
    "dxScheduler-recurrenceYearly": "Yearly",
    "dxScheduler-recurrenceRepeatEvery": "Repeat Every",
    "dxScheduler-recurrenceRepeatOn": "Repeat On",
    "dxScheduler-recurrenceEnd": "End repeat",
    "dxScheduler-recurrenceAfter": "After",
    "dxScheduler-recurrenceOn": "On",
    "dxScheduler-recurrenceRepeatMinutely": "minute(s)",
    "dxScheduler-recurrenceRepeatHourly": "hour(s)",
    "dxScheduler-recurrenceRepeatDaily": "day(s)",
    "dxScheduler-recurrenceRepeatWeekly": "week(s)",
    "dxScheduler-recurrenceRepeatMonthly": "month(s)",
    "dxScheduler-recurrenceRepeatYearly": "year(s)",
    "dxScheduler-switcherDay": "Day",
    "dxScheduler-switcherWeek": "Week",
    "dxScheduler-switcherWorkWeek": "Work Week",
    "dxScheduler-switcherMonth": "Month",
    "dxScheduler-switcherAgenda": "Agenda",
    "dxScheduler-switcherTimelineDay": "Timeline Day",
    "dxScheduler-switcherTimelineWeek": "Timeline Week",
    "dxScheduler-switcherTimelineWorkWeek": "Timeline Work Week",
    "dxScheduler-switcherTimelineMonth": "Timeline Month",
    "dxScheduler-recurrenceRepeatOnDate": "on date",
    "dxScheduler-recurrenceRepeatCount": "occurrence(s)",
    "dxScheduler-allDay": "All day",
    "dxScheduler-confirmRecurrenceEditMessage": "Do you want to edit only this appointment or the whole series?",
    "dxScheduler-confirmRecurrenceDeleteMessage": "Do you want to delete only this appointment or the whole series?",
    "dxScheduler-confirmRecurrenceEditSeries": "Edit series",
    "dxScheduler-confirmRecurrenceDeleteSeries": "Delete series",
    "dxScheduler-confirmRecurrenceEditOccurrence": "Edit appointment",
    "dxScheduler-confirmRecurrenceDeleteOccurrence": "Delete appointment",
    "dxScheduler-noTimezoneTitle": "No timezone",
    "dxScheduler-moreAppointments": "{0} more",
    "dxCalendar-todayButtonText": "Today",
    "dxCalendar-ariaWidgetName": "Calendar",
    "dxColorView-ariaRed": "Red",
    "dxColorView-ariaGreen": "Green",
    "dxColorView-ariaBlue": "Blue",
    "dxColorView-ariaAlpha": "Transparency",
    "dxColorView-ariaHex": "Color code",
    "dxTagBox-selected": "{0} selected",
    "dxTagBox-allSelected": "All selected ({0})",
    "dxTagBox-moreSelected": "{0} more",
    "vizExport-printingButtonText": "Print",
    "vizExport-titleMenuText": "Exporting/Printing",
    "vizExport-exportButtonText": "{0} file",
    "dxFilterBuilder-and": "And",
    "dxFilterBuilder-or": "Or",
    "dxFilterBuilder-notAnd": "Not And",
    "dxFilterBuilder-notOr": "Not Or",
    "dxFilterBuilder-addCondition": "Add Condition",
    "dxFilterBuilder-addGroup": "Add Group",
    "dxFilterBuilder-enterValueText": "<enter a value>",
    "dxFilterBuilder-filterOperationEquals": "Equals",
    "dxFilterBuilder-filterOperationNotEquals": "Does not equal",
    "dxFilterBuilder-filterOperationLess": "Is less than",
    "dxFilterBuilder-filterOperationLessOrEquals": "Is less than or equal to",
    "dxFilterBuilder-filterOperationGreater": "Is greater than",
    "dxFilterBuilder-filterOperationGreaterOrEquals": "Is greater than or equal to",
    "dxFilterBuilder-filterOperationStartsWith": "Starts with",
    "dxFilterBuilder-filterOperationContains": "Contains",
    "dxFilterBuilder-filterOperationNotContains": "Does not contain",
    "dxFilterBuilder-filterOperationEndsWith": "Ends with",
    "dxFilterBuilder-filterOperationIsBlank": "Is blank",
    "dxFilterBuilder-filterOperationIsNotBlank": "Is not blank",
    "dxFilterBuilder-filterOperationBetween": "Is between",
    "dxFilterBuilder-filterOperationAnyOf": "Is any of",
    "dxFilterBuilder-filterOperationNoneOf": "Is none of",
    "dxHtmlEditor-dialogColorCaption": "Change Font Color",
    "dxHtmlEditor-dialogBackgroundCaption": "Change Background Color",
    "dxHtmlEditor-dialogLinkCaption": "Add Link",
    "dxHtmlEditor-dialogLinkUrlField": "URL",
    "dxHtmlEditor-dialogLinkTextField": "Text",
    "dxHtmlEditor-dialogLinkTargetField": "Open link in new window",
    "dxHtmlEditor-dialogImageCaption": "Add Image",
    "dxHtmlEditor-dialogImageUrlField": "URL",
    "dxHtmlEditor-dialogImageAltField": "Alternate text",
    "dxHtmlEditor-dialogImageWidthField": "Width (px)",
    "dxHtmlEditor-dialogImageHeightField": "Height (px)",
    "dxHtmlEditor-dialogInsertTableRowsField": "Rows",
    "dxHtmlEditor-dialogInsertTableColumnsField": "Columns",
    "dxHtmlEditor-dialogInsertTableCaption": "Insert Table",
    "dxHtmlEditor-heading": "Heading",
    "dxHtmlEditor-normalText": "Normal text",
    "dxHtmlEditor-background": "Background Color",
    "dxHtmlEditor-bold": "Bold",
    "dxHtmlEditor-color": "Font Color",
    "dxHtmlEditor-font": "Font",
    "dxHtmlEditor-italic": "Italic",
    "dxHtmlEditor-link": "Add Link",
    "dxHtmlEditor-image": "Add Image",
    "dxHtmlEditor-size": "Size",
    "dxHtmlEditor-strike": "Strikethrough",
    "dxHtmlEditor-subscript": "Subscript",
    "dxHtmlEditor-superscript": "Superscript",
    "dxHtmlEditor-underline": "Underline",
    "dxHtmlEditor-blockquote": "Blockquote",
    "dxHtmlEditor-header": "Header",
    "dxHtmlEditor-increaseIndent": "Increase Indent",
    "dxHtmlEditor-decreaseIndent": "Decrease Indent",
    "dxHtmlEditor-orderedList": "Ordered List",
    "dxHtmlEditor-bulletList": "Bullet List",
    "dxHtmlEditor-alignLeft": "Align Left",
    "dxHtmlEditor-alignCenter": "Align Center",
    "dxHtmlEditor-alignRight": "Align Right",
    "dxHtmlEditor-alignJustify": "Align Justify",
    "dxHtmlEditor-codeBlock": "Code Block",
    "dxHtmlEditor-variable": "Add Variable",
    "dxHtmlEditor-undo": "Undo",
    "dxHtmlEditor-redo": "Redo",
    "dxHtmlEditor-clear": "Clear Formatting",
    "dxHtmlEditor-insertTable": "Insert Table",
    "dxHtmlEditor-insertRowAbove": "Insert Row Above",
    "dxHtmlEditor-insertRowBelow": "Insert Row Below",
    "dxHtmlEditor-insertColumnLeft": "Insert Column Left",
    "dxHtmlEditor-insertColumnRight": "Insert Column Right",
    "dxHtmlEditor-deleteColumn": "Delete Column",
    "dxHtmlEditor-deleteRow": "Delete Row",
    "dxHtmlEditor-deleteTable": "Delete Table",
    "dxHtmlEditor-list": "List",
    "dxHtmlEditor-ordered": "Ordered",
    "dxHtmlEditor-bullet": "Bullet",
    "dxHtmlEditor-align": "Align",
    "dxHtmlEditor-center": "Center",
    "dxHtmlEditor-left": "Left",
    "dxHtmlEditor-right": "Right",
    "dxHtmlEditor-indent": "Indent",
    "dxHtmlEditor-justify": "Justify",
    "dxFileManager-newDirectoryName": "Untitled directory",
    "dxFileManager-rootDirectoryName": "Files",
    "dxFileManager-errorNoAccess": "Access Denied. Operation could not be completed.",
    "dxFileManager-errorDirectoryExistsFormat": "Directory '{0}' already exists.",
    "dxFileManager-errorFileExistsFormat": "File '{0}' already exists.",
    "dxFileManager-errorFileNotFoundFormat": "File '{0}' not found.",
    "dxFileManager-errorDirectoryNotFoundFormat": "Directory '{0}' not found.",
    "dxFileManager-errorWrongFileExtension": "File extension is not allowed.",
    "dxFileManager-errorMaxFileSizeExceeded": "File size exceeds the maximum allowed size.",
    "dxFileManager-errorInvalidSymbols": "This name contains invalid characters.",
    "dxFileManager-errorDefault": "Unspecified error.",
    "dxFileManager-errorDirectoryOpenFailed": "The directory cannot be opened",
    "dxFileManager-commandCreate": "New directory",
    "dxFileManager-commandRename": "Rename",
    "dxFileManager-commandMove": "Move to",
    "dxFileManager-commandCopy": "Copy to",
    "dxFileManager-commandDelete": "Delete",
    "dxFileManager-commandDownload": "Download",
    "dxFileManager-commandUpload": "Upload files",
    "dxFileManager-commandRefresh": "Refresh",
    "dxFileManager-commandThumbnails": "Thumbnails View",
    "dxFileManager-commandDetails": "Details View",
    "dxFileManager-commandClearSelection": "Clear selection",
    "dxFileManager-commandShowNavPane": "Toggle navigation pane",
    "dxFileManager-dialogDirectoryChooserMoveTitle": "Move to",
    "dxFileManager-dialogDirectoryChooserMoveButtonText": "Move",
    "dxFileManager-dialogDirectoryChooserCopyTitle": "Copy to",
    "dxFileManager-dialogDirectoryChooserCopyButtonText": "Copy",
    "dxFileManager-dialogRenameItemTitle": "Rename",
    "dxFileManager-dialogRenameItemButtonText": "Save",
    "dxFileManager-dialogCreateDirectoryTitle": "New directory",
    "dxFileManager-dialogCreateDirectoryButtonText": "Create",
    "dxFileManager-dialogDeleteItemTitle": "Delete",
    "dxFileManager-dialogDeleteItemButtonText": "Delete",
    "dxFileManager-dialogDeleteItemSingleItemConfirmation": "Are you sure you want to delete {0}?",
    "dxFileManager-dialogDeleteItemMultipleItemsConfirmation": "Are you sure you want to delete {0} items?",
    "dxFileManager-dialogButtonCancel": "Cancel",
    "dxFileManager-editingCreateSingleItemProcessingMessage": "Creating a directory inside {0}",
    "dxFileManager-editingCreateSingleItemSuccessMessage": "Created a directory inside {0}",
    "dxFileManager-editingCreateSingleItemErrorMessage": "Directory was not created",
    "dxFileManager-editingCreateCommonErrorMessage": "Directory was not created",
    "dxFileManager-editingRenameSingleItemProcessingMessage": "Renaming an item inside {0}",
    "dxFileManager-editingRenameSingleItemSuccessMessage": "Renamed an item inside {0}",
    "dxFileManager-editingRenameSingleItemErrorMessage": "Item was not renamed",
    "dxFileManager-editingRenameCommonErrorMessage": "Item was not renamed",
    "dxFileManager-editingDeleteSingleItemProcessingMessage": "Deleting an item from {0}",
    "dxFileManager-editingDeleteMultipleItemsProcessingMessage": "Deleting {0} items from {1}",
    "dxFileManager-editingDeleteSingleItemSuccessMessage": "Deleted an item from {0}",
    "dxFileManager-editingDeleteMultipleItemsSuccessMessage": "Deleted {0} items from {1}",
    "dxFileManager-editingDeleteSingleItemErrorMessage": "Item was not deleted",
    "dxFileManager-editingDeleteMultipleItemsErrorMessage": "{0} items were not deleted",
    "dxFileManager-editingDeleteCommonErrorMessage": "Some items were not deleted",
    "dxFileManager-editingMoveSingleItemProcessingMessage": "Moving an item to {0}",
    "dxFileManager-editingMoveMultipleItemsProcessingMessage": "Moving {0} items to {1}",
    "dxFileManager-editingMoveSingleItemSuccessMessage": "Moved an item to {0}",
    "dxFileManager-editingMoveMultipleItemsSuccessMessage": "Moved {0} items to {1}",
    "dxFileManager-editingMoveSingleItemErrorMessage": "Item was not moved",
    "dxFileManager-editingMoveMultipleItemsErrorMessage": "{0} items were not moved",
    "dxFileManager-editingMoveCommonErrorMessage": "Some items were not moved",
    "dxFileManager-editingCopySingleItemProcessingMessage": "Copying an item to {0}",
    "dxFileManager-editingCopyMultipleItemsProcessingMessage": "Copying {0} items to {1}",
    "dxFileManager-editingCopySingleItemSuccessMessage": "Copied an item to {0}",
    "dxFileManager-editingCopyMultipleItemsSuccessMessage": "Copied {0} items to {1}",
    "dxFileManager-editingCopySingleItemErrorMessage": "Item was not copied",
    "dxFileManager-editingCopyMultipleItemsErrorMessage": "{0} items were not copied",
    "dxFileManager-editingCopyCommonErrorMessage": "Some items were not copied",
    "dxFileManager-editingUploadSingleItemProcessingMessage": "Uploading an item to {0}",
    "dxFileManager-editingUploadMultipleItemsProcessingMessage": "Uploading {0} items to {1}",
    "dxFileManager-editingUploadSingleItemSuccessMessage": "Uploaded an item to {0}",
    "dxFileManager-editingUploadMultipleItemsSuccessMessage": "Uploaded {0} items to {1}",
    "dxFileManager-editingUploadSingleItemErrorMessage": "Item was not uploaded",
    "dxFileManager-editingUploadMultipleItemsErrorMessage": "{0} items were not uploaded",
    "dxFileManager-editingUploadCanceledMessage": "Canceled",
    "dxFileManager-listDetailsColumnCaptionName": "Name",
    "dxFileManager-listDetailsColumnCaptionDateModified": "Date Modified",
    "dxFileManager-listDetailsColumnCaptionFileSize": "File Size",
    "dxFileManager-listThumbnailsTooltipTextSize": "Size",
    "dxFileManager-listThumbnailsTooltipTextDateModified": "Date Modified",
    "dxFileManager-notificationProgressPanelTitle": "Progress",
    "dxFileManager-notificationProgressPanelEmptyListText": "No operations",
    "dxFileManager-notificationProgressPanelOperationCanceled": "Canceled",
    "dxDiagram-categoryGeneral": "General",
    "dxDiagram-categoryFlowchart": "Flowchart",
    "dxDiagram-categoryOrgChart": "Org Chart",
    "dxDiagram-categoryContainers": "Containers",
    "dxDiagram-categoryCustom": "Custom",
    "dxDiagram-commandExportToSvg": "Export to SVG",
    "dxDiagram-commandExportToPng": "Export to PNG",
    "dxDiagram-commandExportToJpg": "Export to JPEG",
    "dxDiagram-commandUndo": "Undo",
    "dxDiagram-commandRedo": "Redo",
    "dxDiagram-commandFontName": "Font Name",
    "dxDiagram-commandFontSize": "Font Size",
    "dxDiagram-commandBold": "Bold",
    "dxDiagram-commandItalic": "Italic",
    "dxDiagram-commandUnderline": "Underline",
    "dxDiagram-commandTextColor": "Font Color",
    "dxDiagram-commandLineColor": "Line Color",
    "dxDiagram-commandLineWidth": "Line Width",
    "dxDiagram-commandLineStyle": "Line Style",
    "dxDiagram-commandLineStyleSolid": "Solid",
    "dxDiagram-commandLineStyleDotted": "Dotted",
    "dxDiagram-commandLineStyleDashed": "Dashed",
    "dxDiagram-commandFillColor": "Fill Color",
    "dxDiagram-commandAlignLeft": "Align Left",
    "dxDiagram-commandAlignCenter": "Align Center",
    "dxDiagram-commandAlignRight": "Align Right",
    "dxDiagram-commandConnectorLineType": "Connector Line Type",
    "dxDiagram-commandConnectorLineStraight": "Straight",
    "dxDiagram-commandConnectorLineOrthogonal": "Orthogonal",
    "dxDiagram-commandConnectorLineStart": "Connector Line Start",
    "dxDiagram-commandConnectorLineEnd": "Connector Line End",
    "dxDiagram-commandConnectorLineNone": "None",
    "dxDiagram-commandConnectorLineArrow": "Arrow",
    "dxDiagram-commandFullscreen": "Full Screen",
    "dxDiagram-commandUnits": "Units",
    "dxDiagram-commandPageSize": "Page Size",
    "dxDiagram-commandPageOrientation": "Page Orientation",
    "dxDiagram-commandPageOrientationLandscape": "Landscape",
    "dxDiagram-commandPageOrientationPortrait": "Portrait",
    "dxDiagram-commandPageColor": "Page Color",
    "dxDiagram-commandShowGrid": "Show Grid",
    "dxDiagram-commandSnapToGrid": "Snap to Grid",
    "dxDiagram-commandGridSize": "Grid Size",
    "dxDiagram-commandZoomLevel": "Zoom Level",
    "dxDiagram-commandAutoZoom": "Auto Zoom",
    "dxDiagram-commandFitToContent": "Fit to Content",
    "dxDiagram-commandFitToWidth": "Fit to Width",
    "dxDiagram-commandAutoZoomByContent": "Auto Zoom by Content",
    "dxDiagram-commandAutoZoomByWidth": "Auto Zoom by Width",
    "dxDiagram-commandSimpleView": "Simple View",
    "dxDiagram-commandCut": "Cut",
    "dxDiagram-commandCopy": "Copy",
    "dxDiagram-commandPaste": "Paste",
    "dxDiagram-commandSelectAll": "Select All",
    "dxDiagram-commandDelete": "Delete",
    "dxDiagram-commandBringToFront": "Bring to Front",
    "dxDiagram-commandSendToBack": "Send to Back",
    "dxDiagram-commandLock": "Lock",
    "dxDiagram-commandUnlock": "Unlock",
    "dxDiagram-commandInsertShapeImage": "Insert Image...",
    "dxDiagram-commandEditShapeImage": "Change Image...",
    "dxDiagram-commandDeleteShapeImage": "Delete Image",
    "dxDiagram-commandLayoutLeftToRight": "Left-to-right",
    "dxDiagram-commandLayoutRightToLeft": "Right-to-left",
    "dxDiagram-commandLayoutTopToBottom": "Top-to-bottom",
    "dxDiagram-commandLayoutBottomToTop": "Bottom-to-top",
    "dxDiagram-unitIn": "in",
    "dxDiagram-unitCm": "cm",
    "dxDiagram-unitPx": "px",
    "dxDiagram-dialogButtonOK": "OK",
    "dxDiagram-dialogButtonCancel": "Cancel",
    "dxDiagram-dialogInsertShapeImageTitle": "Insert Image",
    "dxDiagram-dialogEditShapeImageTitle": "Change Image",
    "dxDiagram-dialogEditShapeImageSelectButton": "Select image",
    "dxDiagram-dialogEditShapeImageLabelText": "or drop file here",
    "dxDiagram-uiExport": "Export",
    "dxDiagram-uiProperties": "Properties",
    "dxDiagram-uiSettings": "Settings",
    "dxDiagram-uiShowToolbox": "Show Toolbox",
    "dxDiagram-uiSearch": "Search",
    "dxDiagram-uiStyle": "Style",
    "dxDiagram-uiLayout": "Layout",
    "dxDiagram-uiLayoutTree": "Tree",
    "dxDiagram-uiLayoutLayered": "Layered",
    "dxDiagram-uiDiagram": "Diagram",
    "dxDiagram-uiText": "Text",
    "dxDiagram-uiObject": "Object",
    "dxDiagram-uiConnector": "Connector",
    "dxDiagram-uiPage": "Page",
    "dxDiagram-shapeText": "Text",
    "dxDiagram-shapeRectangle": "Rectangle",
    "dxDiagram-shapeEllipse": "Ellipse",
    "dxDiagram-shapeCross": "Cross",
    "dxDiagram-shapeTriangle": "Triangle",
    "dxDiagram-shapeDiamond": "Diamond",
    "dxDiagram-shapeHeart": "Heart",
    "dxDiagram-shapePentagon": "Pentagon",
    "dxDiagram-shapeHexagon": "Hexagon",
    "dxDiagram-shapeOctagon": "Octagon",
    "dxDiagram-shapeStar": "Star",
    "dxDiagram-shapeArrowLeft": "Left Arrow",
    "dxDiagram-shapeArrowUp": "Up Arrow",
    "dxDiagram-shapeArrowRight": "Right Arrow",
    "dxDiagram-shapeArrowDown": "Down Arrow",
    "dxDiagram-shapeArrowUpDown": "Up Down Arrow",
    "dxDiagram-shapeArrowLeftRight": "Left Right Arrow",
    "dxDiagram-shapeProcess": "Process",
    "dxDiagram-shapeDecision": "Decision",
    "dxDiagram-shapeTerminator": "Terminator",
    "dxDiagram-shapePredefinedProcess": "Predefined Process",
    "dxDiagram-shapeDocument": "Document",
    "dxDiagram-shapeMultipleDocuments": "Multiple Documents",
    "dxDiagram-shapeManualInput": "Manual Input",
    "dxDiagram-shapePreparation": "Preparation",
    "dxDiagram-shapeData": "Data",
    "dxDiagram-shapeDatabase": "Database",
    "dxDiagram-shapeHardDisk": "Hard Disk",
    "dxDiagram-shapeInternalStorage": "Internal Storage",
    "dxDiagram-shapePaperTape": "Paper Tape",
    "dxDiagram-shapeManualOperation": "Manual Operation",
    "dxDiagram-shapeDelay": "Delay",
    "dxDiagram-shapeStoredData": "Stored Data",
    "dxDiagram-shapeDisplay": "Display",
    "dxDiagram-shapeMerge": "Merge",
    "dxDiagram-shapeConnector": "Connector",
    "dxDiagram-shapeOr": "Or",
    "dxDiagram-shapeSummingJunction": "Summing Junction",
    "dxDiagram-shapeContainerDefaultText": "Container",
    "dxDiagram-shapeVerticalContainer": "Vertical Container",
    "dxDiagram-shapeHorizontalContainer": "Horizontal Container",
    "dxDiagram-shapeCardDefaultText": "Person's Name",
    "dxDiagram-shapeCardWithImageOnLeft": "Card with Image on the Left",
    "dxDiagram-shapeCardWithImageOnTop": "Card with Image on the Top",
    "dxDiagram-shapeCardWithImageOnRight": "Card with Image on the Right",
    "dxGantt-dialogTitle": "Title",
    "dxGantt-dialogStartTitle": "Start",
    "dxGantt-dialogEndTitle": "End",
    "dxGantt-dialogProgressTitle": "Progress",
    "dxGantt-dialogResourcesTitle": "Resources",
    "dxGantt-dialogResourceManagerTitle": "Resource Manager",
    "dxGantt-dialogTaskDetailsTitle": "Task Details",
    "dxGantt-dialogEditResourceListHint": "Edit Resource List",
    "dxGantt-dialogEditNoResources": "No resources",
    "dxGantt-dialogButtonAdd": "Add",
    "dxGantt-contextMenuNewTask": "New Task",
    "dxGantt-contextMenuNewSubtask": "New Subtask",
    "dxGantt-contextMenuDeleteTask": "Delete Task",
    "dxGantt-contextMenuDeleteDependency": "Delete Dependency",
    "dxGantt-dialogTaskDeleteConfirmation": "Deleting a task also deletes all its dependencies and subtasks. Are you sure you want to delete this task?",
    "dxGantt-dialogDependencyDeleteConfirmation": "Are you sure you want to delete the dependency from the task?",
    "dxGantt-dialogResourcesDeleteConfirmation": "Deleting a resource also deletes it from tasks to which this resource is assigned. Are you sure you want to delete these resources? Resources: {0}",
    "dxGantt-dialogConstraintCriticalViolationMessage": "The task you are attempting to move is linked to a second task by a dependency relation. This change would conflict with dependency rules. How would you like to proceed?",
    "dxGantt-dialogConstraintViolationMessage": "The task you are attempting to move is linked to a second task by a dependency relation. How would you like to proceed?",
    "dxGantt-dialogCancelOperationMessage": "Cancel the operation",
    "dxGantt-dialogDeleteDependencyMessage": "Delete the dependency",
    "dxGantt-dialogMoveTaskAndKeepDependencyMessage": "Move the task and keep the dependency",
    "dxGantt-undo": "Undo",
    "dxGantt-redo": "Redo",
    "dxGantt-expandAll": "Expand All",
    "dxGantt-collapseAll": "Collapse All",
    "dxGantt-addNewTask": "Add New Task",
    "dxGantt-deleteSelectedTask": "Delete Selected Task",
    "dxGantt-zoomIn": "Zoom In",
    "dxGantt-zoomOut": "Zoom Out",
    "dxGantt-fullScreen": "Full Screen",
    "dxGantt-quarter": "Q{0}"
  }
};
exports.defaultMessages = defaultMessages;

/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _common = __webpack_require__(3);

var _class = _interopRequireDefault(__webpack_require__(11));

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _ui = _interopRequireDefault(__webpack_require__(28));

var _uiListEdit = __webpack_require__(33);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var editOptionsRegistry = [];

var registerOption = function registerOption(enabledFunc, decoratorTypeFunc, decoratorSubTypeFunc) {
  editOptionsRegistry.push({
    enabled: enabledFunc,
    decoratorType: decoratorTypeFunc,
    decoratorSubType: decoratorSubTypeFunc
  });
}; // NOTE: option registration order does matter


registerOption(function () {
  return this.option('menuItems').length;
}, function () {
  return 'menu';
}, function () {
  return this.option('menuMode');
});
registerOption(function () {
  return !this.option('menuItems').length && this.option('allowItemDeleting');
}, function () {
  var mode = this.option('itemDeleteMode');
  return mode === 'toggle' || mode === 'slideButton' || mode === 'swipe' || mode === 'static' ? 'delete' : 'menu';
}, function () {
  var mode = this.option('itemDeleteMode');

  if (mode === 'slideItem') {
    mode = 'slide';
  }

  if (mode === 'hold') {
    mode = 'context';
  }

  return mode;
});
registerOption(function () {
  return this.option('selectionMode') !== 'none' && this.option('showSelectionControls');
}, function () {
  return 'selection';
}, function () {
  return 'default';
});
registerOption(function () {
  return this.option('itemDragging.allowReordering') || this.option('itemDragging.allowDropInsideItem') || this.option('itemDragging.group');
}, function () {
  return 'reorder';
}, function () {
  return 'default';
});
var LIST_ITEM_BEFORE_BAG_CLASS = 'dx-list-item-before-bag';
var LIST_ITEM_AFTER_BAG_CLASS = 'dx-list-item-after-bag';
var DECORATOR_BEFORE_BAG_CREATE_METHOD = 'beforeBag';
var DECORATOR_AFTER_BAG_CREATE_METHOD = 'afterBag';
var DECORATOR_MODIFY_ELEMENT_METHOD = 'modifyElement';
var DECORATOR_AFTER_RENDER_METHOD = 'afterRender';
var DECORATOR_GET_EXCLUDED_SELECTORS_METHOD = 'getExcludedSelectors';

var EditProvider = _class.default.inherit({
  ctor: function ctor(list) {
    this._list = list;

    this._fetchRequiredDecorators();
  },
  dispose: function dispose() {
    if (this._decorators && this._decorators.length) {
      (0, _iterator.each)(this._decorators, function (_, decorator) {
        decorator.dispose();
      });
    }
  },
  _fetchRequiredDecorators: function _fetchRequiredDecorators() {
    this._decorators = [];
    (0, _iterator.each)(editOptionsRegistry, function (_, option) {
      var optionEnabled = option.enabled.call(this._list);

      if (optionEnabled) {
        var decoratorType = option.decoratorType.call(this._list);
        var decoratorSubType = option.decoratorSubType.call(this._list);

        var decorator = this._createDecorator(decoratorType, decoratorSubType);

        this._decorators.push(decorator);
      }
    }.bind(this));
  },
  _createDecorator: function _createDecorator(type, subType) {
    var decoratorClass = this._findDecorator(type, subType);

    return new decoratorClass(this._list);
  },
  _findDecorator: function _findDecorator(type, subType) {
    var _registry$type;

    var foundDecorator = (_registry$type = _uiListEdit.registry[type]) === null || _registry$type === void 0 ? void 0 : _registry$type[subType];

    if (!foundDecorator) {
      throw _ui.default.Error('E1012', type, subType);
    }

    return foundDecorator;
  },
  modifyItemElement: function modifyItemElement(args) {
    var $itemElement = (0, _renderer.default)(args.itemElement);
    var config = {
      $itemElement: $itemElement
    };

    this._prependBeforeBags($itemElement, config);

    this._appendAfterBags($itemElement, config);

    this._applyDecorators(DECORATOR_MODIFY_ELEMENT_METHOD, config);
  },
  afterItemsRendered: function afterItemsRendered() {
    this._applyDecorators(DECORATOR_AFTER_RENDER_METHOD);
  },
  _prependBeforeBags: function _prependBeforeBags($itemElement, config) {
    var $beforeBags = this._collectDecoratorsMarkup(DECORATOR_BEFORE_BAG_CREATE_METHOD, config, LIST_ITEM_BEFORE_BAG_CLASS);

    $itemElement.prepend($beforeBags);
  },
  _appendAfterBags: function _appendAfterBags($itemElement, config) {
    var $afterBags = this._collectDecoratorsMarkup(DECORATOR_AFTER_BAG_CREATE_METHOD, config, LIST_ITEM_AFTER_BAG_CLASS);

    $itemElement.append($afterBags);
  },
  _collectDecoratorsMarkup: function _collectDecoratorsMarkup(method, config, containerClass) {
    var $collector = (0, _renderer.default)('<div>');
    (0, _iterator.each)(this._decorators, function () {
      var $container = (0, _renderer.default)('<div>').addClass(containerClass);
      this[method]((0, _extend.extend)({
        $container: $container
      }, config));

      if ($container.children().length) {
        $collector.append($container);
      }
    });
    return $collector.children();
  },
  _applyDecorators: function _applyDecorators(method, config) {
    (0, _iterator.each)(this._decorators, function () {
      this[method](config);
    });
  },
  _handlerExists: function _handlerExists(name) {
    if (!this._decorators) {
      return false;
    }

    var decorators = this._decorators;
    var length = decorators.length;

    for (var i = 0; i < length; i++) {
      if (decorators[i][name] !== _common.noop) {
        return true;
      }
    }

    return false;
  },
  _eventHandler: function _eventHandler(name, $itemElement, e) {
    if (!this._decorators) {
      return false;
    }

    var response = false;
    var decorators = this._decorators;
    var length = decorators.length;

    for (var i = 0; i < length; i++) {
      response = decorators[i][name]($itemElement, e);

      if (response) {
        break;
      }
    }

    return response;
  },
  handleClick: function handleClick($itemElement, e) {
    return this._eventHandler('handleClick', $itemElement, e);
  },
  handleKeyboardEvents: function handleKeyboardEvents(currentFocusedIndex, moveFocusUp) {
    return this._eventHandler('handleKeyboardEvents', currentFocusedIndex, moveFocusUp);
  },
  handleEnterPressing: function handleEnterPressing(e) {
    return this._eventHandler('handleEnterPressing', e);
  },
  contextMenuHandlerExists: function contextMenuHandlerExists() {
    return this._handlerExists('handleContextMenu');
  },
  handleContextMenu: function handleContextMenu($itemElement, e) {
    return this._eventHandler('handleContextMenu', $itemElement, e);
  },
  getExcludedItemSelectors: function getExcludedItemSelectors() {
    var excludedSelectors = [];

    this._applyDecorators(DECORATOR_GET_EXCLUDED_SELECTORS_METHOD, excludedSelectors);

    return excludedSelectors.join(',');
  }
});

var _default = EditProvider;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.setEasing = setEasing;
exports.getEasing = getEasing;
exports.convertTransitionTimingFuncToEasing = void 0;

var _type = __webpack_require__(1);

var CSS_TRANSITION_EASING_REGEX = /cubic-bezier\((\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\)/;
var TransitionTimingFuncMap = {
  'linear': 'cubic-bezier(0, 0, 1, 1)',
  'swing': 'cubic-bezier(0.445, 0.05, 0.55, 0.95)',
  'ease': 'cubic-bezier(0.25, 0.1, 0.25, 1)',
  'ease-in': 'cubic-bezier(0.42, 0, 1, 1)',
  'ease-out': 'cubic-bezier(0, 0, 0.58, 1)',
  'ease-in-out': 'cubic-bezier(0.42, 0, 0.58, 1)'
};

var polynomBezier = function polynomBezier(x1, y1, x2, y2) {
  var Cx = 3 * x1;
  var Bx = 3 * (x2 - x1) - Cx;
  var Ax = 1 - Cx - Bx;
  var Cy = 3 * y1;
  var By = 3 * (y2 - y1) - Cy;
  var Ay = 1 - Cy - By;

  var bezierX = function bezierX(t) {
    return t * (Cx + t * (Bx + t * Ax));
  };

  var bezierY = function bezierY(t) {
    return t * (Cy + t * (By + t * Ay));
  };

  var derivativeX = function derivativeX(t) {
    return Cx + t * (2 * Bx + t * 3 * Ax);
  };

  var findXFor = function findXFor(t) {
    var x = t;
    var i = 0;
    var z;

    while (i < 14) {
      z = bezierX(x) - t;

      if (Math.abs(z) < 1e-3) {
        break;
      }

      x = x - z / derivativeX(x);
      i++;
    }

    return x;
  };

  return function (t) {
    return bezierY(findXFor(t));
  };
};

var easing = {};

var convertTransitionTimingFuncToEasing = function convertTransitionTimingFuncToEasing(cssTransitionEasing) {
  cssTransitionEasing = TransitionTimingFuncMap[cssTransitionEasing] || cssTransitionEasing;
  var coeffs = cssTransitionEasing.match(CSS_TRANSITION_EASING_REGEX);
  var forceName;

  if (!coeffs) {
    forceName = 'linear';
    coeffs = TransitionTimingFuncMap[forceName].match(CSS_TRANSITION_EASING_REGEX);
  }

  coeffs = coeffs.slice(1, 5);

  for (var i = 0; i < coeffs.length; i++) {
    coeffs[i] = parseFloat(coeffs[i]);
  }

  var easingName = forceName || 'cubicbezier_' + coeffs.join('_').replace(/\./g, 'p');

  if (!(0, _type.isFunction)(easing[easingName])) {
    easing[easingName] = function (x, t, b, c, d) {
      return c * polynomBezier(coeffs[0], coeffs[1], coeffs[2], coeffs[3])(t / d) + b;
    };
  }

  return easingName;
};

exports.convertTransitionTimingFuncToEasing = convertTransitionTimingFuncToEasing;

function setEasing(value) {
  easing = value;
}

function getEasing(name) {
  return easing[name];
}

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.sessionStorage = void 0;

var _window = __webpack_require__(7);

var window = (0, _window.getWindow)();

var getSessionStorage = function getSessionStorage() {
  var sessionStorage;

  try {
    sessionStorage = window.sessionStorage;
  } catch (e) {}

  return sessionStorage;
};

exports.sessionStorage = getSessionStorage;

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.unsubscribeNodesDisposing = exports.subscribeNodesDisposing = void 0;

var _events_engine = _interopRequireDefault(__webpack_require__(5));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REMOVE_EVENT_NAME = 'dxremove';

function nodesByEvent(event) {
  return event && [event.target, event.delegateTarget, event.relatedTarget, event.currentTarget].filter(function (node) {
    return !!node;
  });
}

var subscribeNodesDisposing = function subscribeNodesDisposing(event, callback) {
  _events_engine.default.one(nodesByEvent(event), REMOVE_EVENT_NAME, callback);
};

exports.subscribeNodesDisposing = subscribeNodesDisposing;

var unsubscribeNodesDisposing = function unsubscribeNodesDisposing(event, callback) {
  _events_engine.default.off(nodesByEvent(event), REMOVE_EVENT_NAME, callback);
};

exports.unsubscribeNodesDisposing = unsubscribeNodesDisposing;

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _base = _interopRequireDefault(__webpack_require__(57));

var _observer = _interopRequireDefault(__webpack_require__(96));

var _extend = __webpack_require__(2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventMap = {
  'dxpointerdown': 'pointerdown',
  'dxpointermove': 'pointermove',
  'dxpointerup': 'pointerup',
  'dxpointercancel': 'pointercancel',
  'dxpointerover': 'pointerover',
  'dxpointerout': 'pointerout',
  'dxpointerenter': 'pointerenter',
  'dxpointerleave': 'pointerleave'
};
var observer;
var activated = false;

var activateStrategy = function activateStrategy() {
  if (activated) {
    return;
  }

  observer = new _observer.default(eventMap, function (a, b) {
    return a.pointerId === b.pointerId;
  }, function (e) {
    if (e.isPrimary) observer.reset();
  });
  activated = true;
};

var MsPointerStrategy = _base.default.inherit({
  ctor: function ctor() {
    this.callBase.apply(this, arguments);
    activateStrategy();
  },
  _fireEvent: function _fireEvent(args) {
    return this.callBase((0, _extend.extend)({
      pointers: observer.pointers(),
      pointerId: args.originalEvent.pointerId
    }, args));
  }
});

MsPointerStrategy.map = eventMap;

MsPointerStrategy.resetObserver = function () {
  observer.reset();
};

var _default = MsPointerStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _extend = __webpack_require__(2);

var _base = _interopRequireDefault(__webpack_require__(57));

var _mouse = _interopRequireDefault(__webpack_require__(97));

var _touch = _interopRequireDefault(__webpack_require__(95));

var _index = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventMap = {
  'dxpointerdown': 'touchstart mousedown',
  'dxpointermove': 'touchmove mousemove',
  'dxpointerup': 'touchend mouseup',
  'dxpointercancel': 'touchcancel',
  'dxpointerover': 'mouseover',
  'dxpointerout': 'mouseout',
  'dxpointerenter': 'mouseenter',
  'dxpointerleave': 'mouseleave'
};
var activated = false;

var activateStrategy = function activateStrategy() {
  if (activated) {
    return;
  }

  _mouse.default.activate();

  activated = true;
};

var MouseAndTouchStrategy = _base.default.inherit({
  EVENT_LOCK_TIMEOUT: 100,
  ctor: function ctor() {
    this.callBase.apply(this, arguments);
    activateStrategy();
  },
  _handler: function _handler(e) {
    var isMouse = (0, _index.isMouseEvent)(e);

    if (!isMouse) {
      this._skipNextEvents = true;
    }

    if (isMouse && this._mouseLocked) {
      return;
    }

    if (isMouse && this._skipNextEvents) {
      this._skipNextEvents = false;
      this._mouseLocked = true;
      clearTimeout(this._unlockMouseTimer);
      var that = this;
      this._unlockMouseTimer = setTimeout(function () {
        that._mouseLocked = false;
      }, this.EVENT_LOCK_TIMEOUT);
      return;
    }

    return this.callBase(e);
  },
  _fireEvent: function _fireEvent(args) {
    var normalizer = (0, _index.isMouseEvent)(args.originalEvent) ? _mouse.default.normalize : _touch.default.normalize;
    return this.callBase((0, _extend.extend)(normalizer(args.originalEvent), args));
  },
  dispose: function dispose() {
    this.callBase();
    this._skipNextEvents = false;
    this._mouseLocked = false;
    clearTimeout(this._unlockMouseTimer);
  }
});

MouseAndTouchStrategy.map = eventMap;
MouseAndTouchStrategy.resetObserver = _mouse.default.resetObserver;
var _default = MouseAndTouchStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _item = _interopRequireDefault(__webpack_require__(100));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIST_ITEM_BADGE_CONTAINER_CLASS = 'dx-list-item-badge-container';
var LIST_ITEM_BADGE_CLASS = 'dx-list-item-badge';
var BADGE_CLASS = 'dx-badge';
var LIST_ITEM_CHEVRON_CONTAINER_CLASS = 'dx-list-item-chevron-container';
var LIST_ITEM_CHEVRON_CLASS = 'dx-list-item-chevron';

var ListItem = _item.default.inherit({
  _renderWatchers: function _renderWatchers() {
    this.callBase();

    this._startWatcher('badge', this._renderBadge.bind(this));

    this._startWatcher('showChevron', this._renderShowChevron.bind(this));
  },
  _renderBadge: function _renderBadge(badge) {
    this._$element.children('.' + LIST_ITEM_BADGE_CONTAINER_CLASS).remove();

    if (!badge) {
      return;
    }

    var $badge = (0, _renderer.default)('<div>').addClass(LIST_ITEM_BADGE_CONTAINER_CLASS).append((0, _renderer.default)('<div>').addClass(LIST_ITEM_BADGE_CLASS).addClass(BADGE_CLASS).text(badge));

    var $chevron = this._$element.children('.' + LIST_ITEM_CHEVRON_CONTAINER_CLASS).first();

    $chevron.length > 0 ? $badge.insertBefore($chevron) : $badge.appendTo(this._$element);
  },
  _renderShowChevron: function _renderShowChevron(showChevron) {
    this._$element.children('.' + LIST_ITEM_CHEVRON_CONTAINER_CLASS).remove();

    if (!showChevron) {
      return;
    }

    var $chevronContainer = (0, _renderer.default)('<div>').addClass(LIST_ITEM_CHEVRON_CONTAINER_CLASS);
    var $chevron = (0, _renderer.default)('<div>').addClass(LIST_ITEM_CHEVRON_CLASS);
    $chevronContainer.append($chevron).appendTo(this._$element);
  }
});

var _default = ListItem;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _memorized_callbacks = _interopRequireDefault(__webpack_require__(72));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new _memorized_callbacks.default();

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.themeReadyCallback = void 0;

var _callbacks = _interopRequireDefault(__webpack_require__(15));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var themeReadyCallback = new _callbacks.default();
exports.themeReadyCallback = themeReadyCallback;

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

var _array = __webpack_require__(12);

var _common = __webpack_require__(3);

var _iterator = __webpack_require__(4);

var _type = __webpack_require__(1);

var _number = __webpack_require__(149);

var _config = _interopRequireDefault(__webpack_require__(18));

var _errors = _interopRequireDefault(__webpack_require__(13));

var _utils = __webpack_require__(102);

var _currency = _interopRequireDefault(__webpack_require__(150));

var _number2 = _interopRequireDefault(__webpack_require__(151));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var hasIntl = typeof Intl !== 'undefined';
var MAX_LARGE_NUMBER_POWER = 4;
var DECIMAL_BASE = 10;
var NUMERIC_FORMATS = ['currency', 'fixedpoint', 'exponential', 'percent', 'decimal'];
var LargeNumberFormatPostfixes = {
  1: 'K',
  // kilo
  2: 'M',
  // mega
  3: 'B',
  // billions
  4: 'T' // tera

};
var LargeNumberFormatPowers = {
  'largenumber': 'auto',
  'thousands': 1,
  'millions': 2,
  'billions': 3,
  'trillions': 4
};
var numberLocalization = (0, _dependency_injector.default)({
  engine: function engine() {
    return 'base';
  },
  numericFormats: NUMERIC_FORMATS,
  defaultLargeNumberFormatPostfixes: LargeNumberFormatPostfixes,
  _parseNumberFormatString: function _parseNumberFormatString(formatType) {
    var formatObject = {};
    if (!formatType || typeof formatType !== 'string') return;
    var formatList = formatType.toLowerCase().split(' ');
    (0, _iterator.each)(formatList, function (index, value) {
      if ((0, _array.inArray)(value, NUMERIC_FORMATS) > -1) {
        formatObject.formatType = value;
      } else if (value in LargeNumberFormatPowers) {
        formatObject.power = LargeNumberFormatPowers[value];
      }
    });

    if (formatObject.power && !formatObject.formatType) {
      formatObject.formatType = 'fixedpoint';
    }

    if (formatObject.formatType) {
      return formatObject;
    }
  },
  _calculateNumberPower: function _calculateNumberPower(value, base, minPower, maxPower) {
    var number = Math.abs(value);
    var power = 0;

    if (number > 1) {
      while (number && number >= base && (maxPower === undefined || power < maxPower)) {
        power++;
        number = number / base;
      }
    } else if (number > 0 && number < 1) {
      while (number < 1 && (minPower === undefined || power > minPower)) {
        power--;
        number = number * base;
      }
    }

    return power;
  },
  _getNumberByPower: function _getNumberByPower(number, power, base) {
    var result = number;

    while (power > 0) {
      result = result / base;
      power--;
    }

    while (power < 0) {
      result = result * base;
      power++;
    }

    return result;
  },
  _formatNumber: function _formatNumber(value, formatObject, formatConfig) {
    if (formatObject.power === 'auto') {
      formatObject.power = this._calculateNumberPower(value, 1000, 0, MAX_LARGE_NUMBER_POWER);
    }

    if (formatObject.power) {
      value = this._getNumberByPower(value, formatObject.power, 1000);
    }

    var powerPostfix = this.defaultLargeNumberFormatPostfixes[formatObject.power] || '';

    var result = this._formatNumberCore(value, formatObject.formatType, formatConfig);

    result = result.replace(/(\d|.$)(\D*)$/, '$1' + powerPostfix + '$2');
    return result;
  },
  _formatNumberExponential: function _formatNumberExponential(value, formatConfig) {
    var power = this._calculateNumberPower(value, DECIMAL_BASE);

    var number = this._getNumberByPower(value, power, DECIMAL_BASE);

    if (formatConfig.precision === undefined) {
      formatConfig.precision = 1;
    }

    if (number.toFixed(formatConfig.precision || 0) >= DECIMAL_BASE) {
      power++;
      number = number / DECIMAL_BASE;
    }

    var powString = (power >= 0 ? '+' : '') + power.toString();
    return this._formatNumberCore(number, 'fixedpoint', formatConfig) + 'E' + powString;
  },
  _addZeroes: function _addZeroes(value, precision) {
    var multiplier = Math.pow(10, precision);
    var sign = value < 0 ? '-' : '';
    value = (Math.abs(value) * multiplier >>> 0) / multiplier;
    var result = value.toString();

    while (result.length < precision) {
      result = '0' + result;
    }

    return sign + result;
  },
  _addGroupSeparators: function _addGroupSeparators(value) {
    var parts = value.toString().split('.');
    return parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, (0, _config.default)().thousandsSeparator) + (parts[1] ? (0, _config.default)().decimalSeparator + parts[1] : '');
  },
  _formatNumberCore: function _formatNumberCore(value, format, formatConfig) {
    if (format === 'exponential') {
      return this._formatNumberExponential(value, formatConfig);
    }

    if (format !== 'decimal' && formatConfig.precision !== null) {
      formatConfig.precision = formatConfig.precision || 0;
    }

    if (format === 'percent') {
      value = value * 100;
    }

    if (formatConfig.precision !== undefined) {
      if (format === 'decimal') {
        value = this._addZeroes(value, formatConfig.precision);
      } else {
        value = formatConfig.precision === null ? value.toPrecision() : (0, _utils.toFixed)(value, formatConfig.precision);
      }
    }

    if (format !== 'decimal') {
      value = this._addGroupSeparators(value);
    } else {
      value = value.toString().replace('.', (0, _config.default)().decimalSeparator);
    }

    if (format === 'percent') {
      value += '%';
    }

    return value;
  },
  _normalizeFormat: function _normalizeFormat(format) {
    if (!format) {
      return {};
    }

    if (typeof format === 'function') {
      return format;
    }

    if (!(0, _type.isPlainObject)(format)) {
      format = {
        type: format
      };
    }

    return format;
  },
  _getSeparators: function _getSeparators() {
    return {
      decimalSeparator: this.getDecimalSeparator(),
      thousandsSeparator: this.getThousandsSeparator()
    };
  },
  getThousandsSeparator: function getThousandsSeparator() {
    return this.format(10000, 'fixedPoint')[2];
  },
  getDecimalSeparator: function getDecimalSeparator() {
    return this.format(1.2, {
      type: 'fixedPoint',
      precision: 1
    })[1];
  },
  convertDigits: function convertDigits(value, toStandard) {
    var digits = this.format(90, 'decimal');

    if (typeof value !== 'string' || digits[1] === '0') {
      return value;
    }

    var fromFirstDigit = toStandard ? digits[1] : '0';
    var toFirstDigit = toStandard ? '0' : digits[1];
    var fromLastDigit = toStandard ? digits[0] : '9';
    var regExp = new RegExp('[' + fromFirstDigit + '-' + fromLastDigit + ']', 'g');
    return value.replace(regExp, function (char) {
      return String.fromCharCode(char.charCodeAt(0) + (toFirstDigit.charCodeAt(0) - fromFirstDigit.charCodeAt(0)));
    });
  },
  getNegativeEtalonRegExp: function getNegativeEtalonRegExp(format) {
    var separators = this._getSeparators();

    var digitalRegExp = new RegExp('[0-9' + (0, _common.escapeRegExp)(separators.decimalSeparator + separators.thousandsSeparator) + ']+', 'g');
    var specialCharacters = ['\\', '(', ')', '[', ']', '*', '+', '$', '^', '?', '|', '{', '}'];
    var negativeEtalon = this.format(-1, format).replace(digitalRegExp, '1');
    specialCharacters.forEach(function (char) {
      negativeEtalon = negativeEtalon.replace(char, "\\".concat(char));
    });
    negativeEtalon = negativeEtalon.replace(' ', '\\s');
    negativeEtalon = negativeEtalon.replace('1', '.+');
    return new RegExp(negativeEtalon, 'g');
  },
  getSign: function getSign(text, format) {
    if (text.replace(/[^0-9-]/g, '').charAt(0) === '-') {
      return -1;
    }

    if (!format) {
      return 1;
    }

    var negativeEtalon = this.getNegativeEtalonRegExp(format);
    return text.match(negativeEtalon) ? -1 : 1;
  },
  format: function format(value, _format) {
    if (typeof value !== 'number') {
      return value;
    }

    if (typeof _format === 'number') {
      return value;
    }

    _format = _format && _format.formatter || _format;

    if (typeof _format === 'function') {
      return _format(value);
    }

    _format = this._normalizeFormat(_format);

    if (!_format.type) {
      _format.type = 'decimal';
    }

    var numberConfig = this._parseNumberFormatString(_format.type);

    if (!numberConfig) {
      var formatterConfig = this._getSeparators();

      formatterConfig.unlimitedIntegerDigits = _format.unlimitedIntegerDigits;
      return this.convertDigits((0, _number.getFormatter)(_format.type, formatterConfig)(value));
    }

    return this._formatNumber(value, numberConfig, _format);
  },
  parse: function parse(text, format) {
    if (!text) {
      return;
    }

    if (format && format.parser) {
      return format.parser(text);
    }

    text = this.convertDigits(text, true);

    if (format && typeof format !== 'string') {
      // Current parser functionality provided as-is and is independent of the most of capabilities of formatter.
      _errors.default.log('W0011');
    }

    var decimalSeparator = this.getDecimalSeparator();
    var regExp = new RegExp('[^0-9' + (0, _common.escapeRegExp)(decimalSeparator) + ']', 'g');
    var cleanedText = text.replace(regExp, '').replace(decimalSeparator, '.').replace(/\.$/g, '');

    if (cleanedText === '.' || cleanedText === '') {
      return null;
    }

    if (this._calcSignificantDigits(cleanedText) > 15) {
      return NaN;
    }

    var parsed = +cleanedText * this.getSign(text, format);
    format = this._normalizeFormat(format);

    var formatConfig = this._parseNumberFormatString(format.type);

    var power = formatConfig === null || formatConfig === void 0 ? void 0 : formatConfig.power;

    if (power) {
      if (power === 'auto') {
        var match = text.match(/\d(K|M|B|T)/);

        if (match) {
          power = (0, _array.find)(Object.keys(LargeNumberFormatPostfixes), function (power) {
            return LargeNumberFormatPostfixes[power] === match[1];
          });
        }
      }

      parsed = parsed * Math.pow(10, 3 * power);
    }

    if ((formatConfig === null || formatConfig === void 0 ? void 0 : formatConfig.formatType) === 'percent') {
      parsed /= 100;
    }

    return parsed;
  },
  _calcSignificantDigits: function _calcSignificantDigits(text) {
    var _text$split = text.split('.'),
        _text$split2 = _slicedToArray(_text$split, 2),
        integer = _text$split2[0],
        fractional = _text$split2[1];

    var calcDigitsAfterLeadingZeros = function calcDigitsAfterLeadingZeros(digits) {
      var index = -1;

      for (var i = 0; i < digits.length; i++) {
        if (digits[i] !== '0') {
          index = i;
          break;
        }
      }

      return index > -1 ? digits.length - index : 0;
    };

    var result = 0;

    if (integer) {
      result += calcDigitsAfterLeadingZeros(integer.split(''));
    }

    if (fractional) {
      result += calcDigitsAfterLeadingZeros(fractional.split('').reverse());
    }

    return result;
  }
});
numberLocalization.inject(_currency.default);

if (hasIntl) {
  numberLocalization.inject(_number2.default);
}

var _default = numberLocalization;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.getFormatter = getFormatter;
exports.getFormat = getFormat;

var _math = __webpack_require__(40);

var _utils = __webpack_require__(102);

var DEFAULT_CONFIG = {
  thousandsSeparator: ',',
  decimalSeparator: '.'
};
var ESCAPING_CHAR = '\'';
var MAXIMUM_NUMBER_LENGTH = 15;

function getGroupSizes(formatString) {
  return formatString.split(',').slice(1).map(function (str) {
    return str.split('').filter(function (char) {
      return char === '#' || char === '0';
    }).length;
  });
}

function getSignParts(format) {
  var signParts = format.split(';');

  if (signParts.length === 1) {
    signParts.push('-' + signParts[0]);
  }

  return signParts;
}

function reverseString(str) {
  return str.toString().split('').reverse().join('');
}

function isPercentFormat(format) {
  return format.indexOf('%') !== -1 && !format.match(/'[^']*%[^']*'/g);
}

function removeStubs(str) {
  return str.replace(/'.+'/g, '');
}

function getNonRequiredDigitCount(floatFormat) {
  if (!floatFormat) return 0;
  var format = removeStubs(floatFormat);
  return format.length - format.replace(/[#]/g, '').length;
}

function getRequiredDigitCount(floatFormat) {
  if (!floatFormat) return 0;
  var format = removeStubs(floatFormat);
  return format.length - format.replace(/[0]/g, '').length;
}

function normalizeValueString(valuePart, minDigitCount, maxDigitCount) {
  if (!valuePart) return '';

  if (valuePart.length > maxDigitCount) {
    valuePart = valuePart.substr(0, maxDigitCount);
  }

  while (valuePart.length > minDigitCount && valuePart.slice(-1) === '0') {
    valuePart = valuePart.substr(0, valuePart.length - 1);
  }

  while (valuePart.length < minDigitCount) {
    valuePart += '0';
  }

  return valuePart;
}

function applyGroups(valueString, groupSizes, thousandsSeparator) {
  if (!groupSizes.length) return valueString;
  var groups = [];
  var index = 0;

  while (valueString) {
    var groupSize = groupSizes[index];

    if (!groupSize) {
      break;
    }

    groups.push(valueString.slice(0, groupSize));
    valueString = valueString.slice(groupSize);

    if (index < groupSizes.length - 1) {
      index++;
    }
  }

  return groups.join(thousandsSeparator);
}

function formatNumberPart(format, valueString) {
  return format.split(ESCAPING_CHAR).map(function (formatPart, escapeIndex) {
    var isEscape = escapeIndex % 2;

    if (!formatPart && isEscape) {
      return ESCAPING_CHAR;
    }

    return isEscape ? formatPart : formatPart.replace(/[,#0]+/, valueString);
  }).join('');
}

function getFloatPointIndex(format) {
  var isEscape = false;

  for (var index = 0; index < format.length; index++) {
    if (format[index] === '\'') {
      isEscape = !isEscape;
    }

    if (format[index] === '.' && !isEscape) {
      return index;
    }
  }

  return format.length;
}

function getFormatter(format, config) {
  config = config || DEFAULT_CONFIG;
  return function (value) {
    if (typeof value !== 'number' || isNaN(value)) return '';
    var signFormatParts = getSignParts(format);
    var isPositiveZero = 1 / value === Infinity;
    var isPositive = value > 0 || isPositiveZero;
    var numberFormat = signFormatParts[isPositive ? 0 : 1];

    if (isPercentFormat(numberFormat)) {
      value = value * 100;
    }

    if (!isPositive) {
      value = -value;
    }

    var floatPointIndex = getFloatPointIndex(numberFormat);
    var floatFormatParts = [numberFormat.substr(0, floatPointIndex), numberFormat.substr(floatPointIndex + 1)];
    var minFloatPrecision = getRequiredDigitCount(floatFormatParts[1]);
    var maxFloatPrecision = minFloatPrecision + getNonRequiredDigitCount(floatFormatParts[1]);
    var minIntegerPrecision = getRequiredDigitCount(floatFormatParts[0]);
    var maxIntegerPrecision = getNonRequiredDigitCount(floatFormatParts[0]) || config.unlimitedIntegerDigits ? undefined : minIntegerPrecision;
    var integerLength = Math.floor(value).toString().length;
    var floatPrecision = (0, _math.fitIntoRange)(maxFloatPrecision, 0, MAXIMUM_NUMBER_LENGTH - integerLength);
    var groupSizes = getGroupSizes(floatFormatParts[0]).reverse();
    var valueParts = (0, _utils.toFixed)(value, floatPrecision < 0 ? 0 : floatPrecision).split('.');
    var valueIntegerPart = normalizeValueString(reverseString(valueParts[0]), minIntegerPrecision, maxIntegerPrecision);
    var valueFloatPart = normalizeValueString(valueParts[1], minFloatPrecision, maxFloatPrecision);
    valueIntegerPart = applyGroups(valueIntegerPart, groupSizes, config.thousandsSeparator);
    var integerString = reverseString(formatNumberPart(reverseString(floatFormatParts[0]), valueIntegerPart));
    var floatString = maxFloatPrecision ? formatNumberPart(floatFormatParts[1], valueFloatPart) : '';
    var result = integerString + (floatString.match(/\d/) ? config.decimalSeparator : '') + floatString;
    return result;
  };
}

function parseValue(text, isPercent, isNegative) {
  var value = (isPercent ? 0.01 : 1) * parseFloat(text) || 0;
  return isNegative ? -value : value;
}

function prepareValueText(valueText, formatter, isPercent, isIntegerPart) {
  var nextValueText = valueText;
  var char;
  var text;
  var nextText;

  do {
    if (nextText) {
      char = text.length === nextText.length ? '0' : '1';
      valueText = isIntegerPart ? char + valueText : valueText + char;
    }

    text = nextText || formatter(parseValue(nextValueText, isPercent));
    nextValueText = isIntegerPart ? '1' + nextValueText : nextValueText + '1';
    nextText = formatter(parseValue(nextValueText, isPercent));
  } while (text !== nextText && (isIntegerPart ? text.length === nextText.length : text.length <= nextText.length));

  if (isIntegerPart && nextText.length > text.length) {
    var hasGroups = formatter(12345).indexOf('12345') === -1;

    do {
      valueText = '1' + valueText;
    } while (hasGroups && parseValue(valueText, isPercent) < 100000);
  }

  return valueText;
}

function getFormatByValueText(valueText, formatter, isPercent, isNegative) {
  var format = formatter(parseValue(valueText, isPercent, isNegative));
  var valueTextParts = valueText.split('.');
  var valueTextWithModifiedFloat = valueTextParts[0] + '.3' + valueTextParts[1].slice(1);
  var valueWithModifiedFloat = parseValue(valueTextWithModifiedFloat, isPercent, isNegative);
  var decimalSeparatorIndex = formatter(valueWithModifiedFloat).indexOf('3') - 1;
  format = format.replace(/(\d)\D(\d)/g, '$1,$2');

  if (decimalSeparatorIndex >= 0) {
    format = format.slice(0, decimalSeparatorIndex) + '.' + format.slice(decimalSeparatorIndex + 1);
  }

  format = format.replace(/1+/, '1').replace(/1/g, '#');

  if (!isPercent) {
    format = format.replace('%', '\'%\''); // lgtm[js/incomplete-sanitization]
  }

  return format;
}

function getFormat(formatter) {
  var valueText = '.';
  var isPercent = formatter(1).indexOf('100') >= 0;
  valueText = prepareValueText(valueText, formatter, isPercent, true);
  valueText = prepareValueText(valueText, formatter, isPercent, false);
  var positiveFormat = getFormatByValueText(valueText, formatter, isPercent, false);
  var negativeFormat = getFormatByValueText(valueText, formatter, isPercent, true);
  return negativeFormat === '-' + positiveFormat ? positiveFormat : positiveFormat + ';' + negativeFormat;
}

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _extend = __webpack_require__(2);

var _default = {
  _formatNumberCore: function _formatNumberCore(value, format, formatConfig) {
    if (format === 'currency') {
      formatConfig.precision = formatConfig.precision || 0;
      var result = this.format(value, (0, _extend.extend)({}, formatConfig, {
        type: 'fixedpoint'
      }));
      var currencyPart = this.getCurrencySymbol().symbol.replace(/\$/g, '$$$$');
      result = result.replace(/^(\D*)(\d.*)/, '$1' + currencyPart + '$2');
      return result;
    }

    return this.callBase.apply(this, arguments);
  },
  getCurrencySymbol: function getCurrencySymbol() {
    return {
      symbol: '$'
    };
  },
  getOpenXmlCurrencyFormat: function getOpenXmlCurrencyFormat() {
    return '$#,##0{0}_);\\($#,##0{0}\\)';
  }
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _config = _interopRequireDefault(__webpack_require__(18));

var _core = _interopRequireDefault(__webpack_require__(91));

var _open_xml_currency_format = _interopRequireDefault(__webpack_require__(152));

var _accounting_formats = _interopRequireDefault(__webpack_require__(153));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* globals Intl */
var detectCurrencySymbolRegex = /([^\s0]+)?(\s*)0*[.,]*0*(\s*)([^\s0]+)?/;
var formattersCache = {};

var getFormatter = function getFormatter(format) {
  var key = _core.default.locale() + '/' + JSON.stringify(format);

  if (!formattersCache[key]) {
    formattersCache[key] = new Intl.NumberFormat(_core.default.locale(), format).format;
  }

  return formattersCache[key];
};

var getCurrencyFormatter = function getCurrencyFormatter(currency) {
  return new Intl.NumberFormat(_core.default.locale(), {
    style: 'currency',
    currency: currency
  });
};

var _default = {
  engine: function engine() {
    return 'intl';
  },
  _formatNumberCore: function _formatNumberCore(value, format, formatConfig) {
    if (format === 'exponential') {
      return this.callBase.apply(this, arguments);
    }

    return getFormatter(this._normalizeFormatConfig(format, formatConfig, value))(value);
  },
  _normalizeFormatConfig: function _normalizeFormatConfig(format, formatConfig, value) {
    var config;

    if (format === 'decimal') {
      config = {
        minimumIntegerDigits: formatConfig.precision || undefined,
        useGrouping: false,
        maximumFractionDigits: String(value).length,
        round: value < 0 ? 'ceil' : 'floor'
      };
    } else {
      config = this._getPrecisionConfig(formatConfig.precision);
    }

    if (format === 'percent') {
      config.style = 'percent';
    } else if (format === 'currency') {
      config.style = 'currency';
      config.currency = formatConfig.currency || (0, _config.default)().defaultCurrency;
    }

    return config;
  },
  _getPrecisionConfig: function _getPrecisionConfig(precision) {
    var config;

    if (precision === null) {
      config = {
        minimumFractionDigits: 0,
        maximumFractionDigits: 20
      };
    } else {
      config = {
        minimumFractionDigits: precision || 0,
        maximumFractionDigits: precision || 0
      };
    }

    return config;
  },
  format: function format(value, _format) {
    if ('number' !== typeof value) {
      return value;
    }

    _format = this._normalizeFormat(_format);

    if (_format.currency === 'default') {
      _format.currency = (0, _config.default)().defaultCurrency;
    }

    if (!_format || 'function' !== typeof _format && !_format.type && !_format.formatter) {
      return getFormatter(_format)(value);
    }

    return this.callBase.apply(this, arguments);
  },
  _getCurrencySymbolInfo: function _getCurrencySymbolInfo(currency) {
    var formatter = getCurrencyFormatter(currency);
    return this._extractCurrencySymbolInfo(formatter.format(0));
  },
  _extractCurrencySymbolInfo: function _extractCurrencySymbolInfo(currencyValueString) {
    var match = detectCurrencySymbolRegex.exec(currencyValueString) || [];
    var position = match[1] ? 'before' : 'after';
    var symbol = match[1] || match[4] || '';
    var delimiter = match[2] || match[3] || '';
    return {
      position: position,
      symbol: symbol,
      delimiter: delimiter
    };
  },
  getCurrencySymbol: function getCurrencySymbol(currency) {
    if (!currency) {
      currency = (0, _config.default)().defaultCurrency;
    }

    var symbolInfo = this._getCurrencySymbolInfo(currency);

    return {
      'symbol': symbolInfo.symbol
    };
  },
  getOpenXmlCurrencyFormat: function getOpenXmlCurrencyFormat(currency) {
    var targetCurrency = currency || (0, _config.default)().defaultCurrency;

    var currencySymbol = this._getCurrencySymbolInfo(targetCurrency).symbol;

    var closestAccountingFormat = _core.default.getValueByClosestLocale(function (locale) {
      return _accounting_formats.default[locale];
    });

    return (0, _open_xml_currency_format.default)(currencySymbol, closestAccountingFormat);
  }
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _default = function _default(currencySymbol, accountingFormat) {
  if (!accountingFormat) {
    return;
  }

  var encodedCurrencySymbol = currencySymbol;

  if (typeof currencySymbol === 'string') {
    encodedCurrencySymbol = '';

    for (var i = 0; i < currencySymbol.length; i++) {
      if (currencySymbol[i] !== '$') {
        encodedCurrencySymbol += '\\';
      }

      encodedCurrencySymbol += currencySymbol[i];
    }
  }

  var encodeSymbols = {
    '.00': '{0}',
    '\'': '\\\'',
    '\\(': '\\(',
    '\\)': '\\)',
    ' ': '\\ ',
    '"': '&quot;',
    '\\¤': encodedCurrencySymbol
  };
  var result = accountingFormat.split(';');

  for (var _i = 0; _i < result.length; _i++) {
    for (var symbol in encodeSymbols) {
      if (Object.prototype.hasOwnProperty.call(encodeSymbols, symbol)) {
        result[_i] = result[_i].replace(new RegExp(symbol, 'g'), encodeSymbols[symbol]);
      }
    }
  }

  return result.length === 2 ? result[0] + '_);' + result[1] : result[0];
};

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

/* eslint-disable node/no-unsupported-features/es-syntax */
// !!! AUTO-GENERATED FILE, DO NOT EDIT
var _default = {
  "af": "¤#,##0.00;(¤#,##0.00)",
  "af-NA": "¤#,##0.00;(¤#,##0.00)",
  "agq": "#,##0.00¤",
  "ak": "¤#,##0.00",
  "am": "¤#,##0.00;(¤#,##0.00)",
  "ar": "¤#,##0.00;(¤#,##0.00)",
  "ar-AE": "¤#,##0.00;(¤#,##0.00)",
  "ar-BH": "¤#,##0.00;(¤#,##0.00)",
  "ar-DJ": "¤#,##0.00;(¤#,##0.00)",
  "ar-DZ": "¤#,##0.00;(¤#,##0.00)",
  "ar-EG": "¤#,##0.00;(¤#,##0.00)",
  "ar-EH": "¤#,##0.00;(¤#,##0.00)",
  "ar-ER": "¤#,##0.00;(¤#,##0.00)",
  "ar-IL": "¤#,##0.00;(¤#,##0.00)",
  "ar-IQ": "¤#,##0.00;(¤#,##0.00)",
  "ar-JO": "¤#,##0.00;(¤#,##0.00)",
  "ar-KM": "¤#,##0.00;(¤#,##0.00)",
  "ar-KW": "¤#,##0.00;(¤#,##0.00)",
  "ar-LB": "¤#,##0.00;(¤#,##0.00)",
  "ar-LY": "¤#,##0.00;(¤#,##0.00)",
  "ar-MA": "¤#,##0.00;(¤#,##0.00)",
  "ar-MR": "¤#,##0.00;(¤#,##0.00)",
  "ar-OM": "¤#,##0.00;(¤#,##0.00)",
  "ar-PS": "¤#,##0.00;(¤#,##0.00)",
  "ar-QA": "¤#,##0.00;(¤#,##0.00)",
  "ar-SA": "¤#,##0.00;(¤#,##0.00)",
  "ar-SD": "¤#,##0.00;(¤#,##0.00)",
  "ar-SO": "¤#,##0.00;(¤#,##0.00)",
  "ar-SS": "¤#,##0.00;(¤#,##0.00)",
  "ar-SY": "¤#,##0.00;(¤#,##0.00)",
  "ar-TD": "¤#,##0.00;(¤#,##0.00)",
  "ar-TN": "¤#,##0.00;(¤#,##0.00)",
  "ar-YE": "¤#,##0.00;(¤#,##0.00)",
  "as": "¤ #,##,##0.00",
  "asa": "#,##0.00 ¤",
  "ast": "#,##0.00 ¤",
  "az": "#,##0.00 ¤",
  "az-Cyrl": "#,##0.00 ¤",
  "az-Latn": "#,##0.00 ¤",
  "bas": "#,##0.00 ¤",
  "be": "#,##0.00 ¤",
  "bem": "¤#,##0.00;(¤#,##0.00)",
  "bez": "#,##0.00¤",
  "bg": "0.00 ¤;(0.00 ¤)",
  "bm": "¤#,##0.00;(¤#,##0.00)",
  "bn": "#,##,##0.00¤;(#,##,##0.00¤)",
  "bn-IN": "#,##,##0.00¤;(#,##,##0.00¤)",
  "bo": "¤ #,##0.00",
  "bo-IN": "¤ #,##0.00",
  "br": "#,##0.00 ¤",
  "brx": "¤ #,##,##0.00",
  "bs": "#,##0.00 ¤",
  "bs-Cyrl": "#,##0.00 ¤",
  "bs-Latn": "#,##0.00 ¤",
  "ca": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ca-AD": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ca-ES-VALENCIA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ca-FR": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ca-IT": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ccp": "#,##,##0.00¤;(#,##,##0.00¤)",
  "ccp-IN": "#,##,##0.00¤;(#,##,##0.00¤)",
  "ce": "#,##0.00 ¤",
  "ceb": "¤#,##0.00;(¤#,##0.00)",
  "cgg": "¤#,##0.00",
  "chr": "¤#,##0.00;(¤#,##0.00)",
  "ckb": "¤ #,##0.00",
  "ckb-IR": "¤ #,##0.00",
  "cs": "#,##0.00 ¤",
  "cy": "¤#,##0.00;(¤#,##0.00)",
  "da": "#,##0.00 ¤",
  "da-GL": "#,##0.00 ¤",
  "dav": "¤#,##0.00;(¤#,##0.00)",
  "de": "#,##0.00 ¤",
  "de-AT": "#,##0.00 ¤",
  "de-BE": "#,##0.00 ¤",
  "de-CH": "#,##0.00 ¤",
  "de-IT": "#,##0.00 ¤",
  "de-LI": "#,##0.00 ¤",
  "de-LU": "#,##0.00 ¤",
  "dje": "#,##0.00¤",
  "doi": "¤#,##0.00",
  "dsb": "#,##0.00 ¤",
  "dua": "#,##0.00 ¤",
  "dyo": "#,##0.00 ¤",
  "dz": "¤#,##,##0.00",
  "ebu": "¤#,##0.00;(¤#,##0.00)",
  "ee": "¤#,##0.00;(¤#,##0.00)",
  "ee-TG": "¤#,##0.00;(¤#,##0.00)",
  "el": "#,##0.00 ¤",
  "el-CY": "#,##0.00 ¤",
  "en": "¤#,##0.00;(¤#,##0.00)",
  "en-001": "¤#,##0.00;(¤#,##0.00)",
  "en-150": "#,##0.00 ¤",
  "en-AE": "¤#,##0.00;(¤#,##0.00)",
  "en-AG": "¤#,##0.00;(¤#,##0.00)",
  "en-AI": "¤#,##0.00;(¤#,##0.00)",
  "en-AS": "¤#,##0.00;(¤#,##0.00)",
  "en-AT": "¤ #,##0.00",
  "en-AU": "¤#,##0.00;(¤#,##0.00)",
  "en-BB": "¤#,##0.00;(¤#,##0.00)",
  "en-BE": "#,##0.00 ¤",
  "en-BI": "¤#,##0.00;(¤#,##0.00)",
  "en-BM": "¤#,##0.00;(¤#,##0.00)",
  "en-BS": "¤#,##0.00;(¤#,##0.00)",
  "en-BW": "¤#,##0.00;(¤#,##0.00)",
  "en-BZ": "¤#,##0.00;(¤#,##0.00)",
  "en-CA": "¤#,##0.00;(¤#,##0.00)",
  "en-CC": "¤#,##0.00;(¤#,##0.00)",
  "en-CH": "¤ #,##0.00;¤-#,##0.00",
  "en-CK": "¤#,##0.00;(¤#,##0.00)",
  "en-CM": "¤#,##0.00;(¤#,##0.00)",
  "en-CX": "¤#,##0.00;(¤#,##0.00)",
  "en-CY": "¤#,##0.00;(¤#,##0.00)",
  "en-DE": "#,##0.00 ¤",
  "en-DG": "¤#,##0.00;(¤#,##0.00)",
  "en-DK": "#,##0.00 ¤",
  "en-DM": "¤#,##0.00;(¤#,##0.00)",
  "en-ER": "¤#,##0.00;(¤#,##0.00)",
  "en-FI": "#,##0.00 ¤",
  "en-FJ": "¤#,##0.00;(¤#,##0.00)",
  "en-FK": "¤#,##0.00;(¤#,##0.00)",
  "en-FM": "¤#,##0.00;(¤#,##0.00)",
  "en-GB": "¤#,##0.00;(¤#,##0.00)",
  "en-GD": "¤#,##0.00;(¤#,##0.00)",
  "en-GG": "¤#,##0.00;(¤#,##0.00)",
  "en-GH": "¤#,##0.00;(¤#,##0.00)",
  "en-GI": "¤#,##0.00;(¤#,##0.00)",
  "en-GM": "¤#,##0.00;(¤#,##0.00)",
  "en-GU": "¤#,##0.00;(¤#,##0.00)",
  "en-GY": "¤#,##0.00;(¤#,##0.00)",
  "en-HK": "¤#,##0.00;(¤#,##0.00)",
  "en-IE": "¤#,##0.00;(¤#,##0.00)",
  "en-IL": "¤#,##0.00;(¤#,##0.00)",
  "en-IM": "¤#,##0.00;(¤#,##0.00)",
  "en-IN": "¤#,##0.00;(¤#,##0.00)",
  "en-IO": "¤#,##0.00;(¤#,##0.00)",
  "en-JE": "¤#,##0.00;(¤#,##0.00)",
  "en-JM": "¤#,##0.00;(¤#,##0.00)",
  "en-KE": "¤#,##0.00;(¤#,##0.00)",
  "en-KI": "¤#,##0.00;(¤#,##0.00)",
  "en-KN": "¤#,##0.00;(¤#,##0.00)",
  "en-KY": "¤#,##0.00;(¤#,##0.00)",
  "en-LC": "¤#,##0.00;(¤#,##0.00)",
  "en-LR": "¤#,##0.00;(¤#,##0.00)",
  "en-LS": "¤#,##0.00;(¤#,##0.00)",
  "en-MG": "¤#,##0.00;(¤#,##0.00)",
  "en-MH": "¤#,##0.00;(¤#,##0.00)",
  "en-MO": "¤#,##0.00;(¤#,##0.00)",
  "en-MP": "¤#,##0.00;(¤#,##0.00)",
  "en-MS": "¤#,##0.00;(¤#,##0.00)",
  "en-MT": "¤#,##0.00;(¤#,##0.00)",
  "en-MU": "¤#,##0.00;(¤#,##0.00)",
  "en-MW": "¤#,##0.00;(¤#,##0.00)",
  "en-MY": "¤#,##0.00;(¤#,##0.00)",
  "en-NA": "¤#,##0.00;(¤#,##0.00)",
  "en-NF": "¤#,##0.00;(¤#,##0.00)",
  "en-NG": "¤#,##0.00;(¤#,##0.00)",
  "en-NL": "¤ #,##0.00;(¤ #,##0.00)",
  "en-NR": "¤#,##0.00;(¤#,##0.00)",
  "en-NU": "¤#,##0.00;(¤#,##0.00)",
  "en-NZ": "¤#,##0.00;(¤#,##0.00)",
  "en-PG": "¤#,##0.00;(¤#,##0.00)",
  "en-PH": "¤#,##0.00;(¤#,##0.00)",
  "en-PK": "¤#,##0.00;(¤#,##0.00)",
  "en-PN": "¤#,##0.00;(¤#,##0.00)",
  "en-PR": "¤#,##0.00;(¤#,##0.00)",
  "en-PW": "¤#,##0.00;(¤#,##0.00)",
  "en-RW": "¤#,##0.00;(¤#,##0.00)",
  "en-SB": "¤#,##0.00;(¤#,##0.00)",
  "en-SC": "¤#,##0.00;(¤#,##0.00)",
  "en-SD": "¤#,##0.00;(¤#,##0.00)",
  "en-SE": "#,##0.00 ¤",
  "en-SG": "¤#,##0.00;(¤#,##0.00)",
  "en-SH": "¤#,##0.00;(¤#,##0.00)",
  "en-SI": "#,##0.00 ¤;(#,##0.00 ¤)",
  "en-SL": "¤#,##0.00;(¤#,##0.00)",
  "en-SS": "¤#,##0.00;(¤#,##0.00)",
  "en-SX": "¤#,##0.00;(¤#,##0.00)",
  "en-SZ": "¤#,##0.00;(¤#,##0.00)",
  "en-TC": "¤#,##0.00;(¤#,##0.00)",
  "en-TK": "¤#,##0.00;(¤#,##0.00)",
  "en-TO": "¤#,##0.00;(¤#,##0.00)",
  "en-TT": "¤#,##0.00;(¤#,##0.00)",
  "en-TV": "¤#,##0.00;(¤#,##0.00)",
  "en-TZ": "¤#,##0.00;(¤#,##0.00)",
  "en-UG": "¤#,##0.00;(¤#,##0.00)",
  "en-UM": "¤#,##0.00;(¤#,##0.00)",
  "en-US-POSIX": "¤#,##0.00;(¤#,##0.00)",
  "en-VC": "¤#,##0.00;(¤#,##0.00)",
  "en-VG": "¤#,##0.00;(¤#,##0.00)",
  "en-VI": "¤#,##0.00;(¤#,##0.00)",
  "en-VU": "¤#,##0.00;(¤#,##0.00)",
  "en-WS": "¤#,##0.00;(¤#,##0.00)",
  "en-ZA": "¤#,##0.00;(¤#,##0.00)",
  "en-ZM": "¤#,##0.00;(¤#,##0.00)",
  "en-ZW": "¤#,##0.00;(¤#,##0.00)",
  "eo": "¤ #,##0.00",
  "es": "#,##0.00 ¤",
  "es-419": "¤#,##0.00",
  "es-AR": "¤ #,##0.00;(¤ #,##0.00)",
  "es-BO": "¤#,##0.00",
  "es-BR": "¤#,##0.00",
  "es-BZ": "¤#,##0.00",
  "es-CL": "¤#,##0.00",
  "es-CO": "¤#,##0.00",
  "es-CR": "¤#,##0.00",
  "es-CU": "¤#,##0.00",
  "es-DO": "¤#,##0.00;(¤#,##0.00)",
  "es-EA": "#,##0.00 ¤",
  "es-EC": "¤#,##0.00",
  "es-GQ": "#,##0.00 ¤",
  "es-GT": "¤#,##0.00",
  "es-HN": "¤#,##0.00",
  "es-IC": "#,##0.00 ¤",
  "es-MX": "¤#,##0.00",
  "es-NI": "¤#,##0.00",
  "es-PA": "¤#,##0.00",
  "es-PE": "¤#,##0.00",
  "es-PH": "#,##0.00 ¤",
  "es-PR": "¤#,##0.00",
  "es-PY": "¤#,##0.00",
  "es-SV": "¤#,##0.00",
  "es-US": "¤#,##0.00",
  "es-UY": "¤ #,##0.00;(¤ #,##0.00)",
  "es-VE": "¤#,##0.00",
  "et": "#,##0.00 ¤;(#,##0.00 ¤)",
  "eu": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ewo": "#,##0.00 ¤",
  "fa": "‎¤ #,##0.00;‎(¤ #,##0.00)",
  "fa-AF": "¤ #,##0.00;‎(¤ #,##0.00)",
  "ff": "#,##0.00 ¤",
  "ff-Adlm": "¤ #,##0.00",
  "ff-Adlm-BF": "¤ #,##0.00",
  "ff-Adlm-CM": "¤ #,##0.00",
  "ff-Adlm-GH": "¤ #,##0.00",
  "ff-Adlm-GM": "¤ #,##0.00",
  "ff-Adlm-GW": "¤ #,##0.00",
  "ff-Adlm-LR": "¤ #,##0.00",
  "ff-Adlm-MR": "¤ #,##0.00",
  "ff-Adlm-NE": "¤ #,##0.00",
  "ff-Adlm-NG": "¤ #,##0.00",
  "ff-Adlm-SL": "¤ #,##0.00",
  "ff-Adlm-SN": "¤ #,##0.00",
  "ff-Latn": "#,##0.00 ¤",
  "ff-Latn-BF": "#,##0.00 ¤",
  "ff-Latn-CM": "#,##0.00 ¤",
  "ff-Latn-GH": "#,##0.00 ¤",
  "ff-Latn-GM": "#,##0.00 ¤",
  "ff-Latn-GN": "#,##0.00 ¤",
  "ff-Latn-GW": "#,##0.00 ¤",
  "ff-Latn-LR": "#,##0.00 ¤",
  "ff-Latn-MR": "#,##0.00 ¤",
  "ff-Latn-NE": "#,##0.00 ¤",
  "ff-Latn-NG": "#,##0.00 ¤",
  "ff-Latn-SL": "#,##0.00 ¤",
  "fi": "#,##0.00 ¤",
  "fil": "¤#,##0.00;(¤#,##0.00)",
  "fo": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fo-DK": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BE": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BI": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BJ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-BL": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CD": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CG": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CH": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CI": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-CM": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-DJ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-DZ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GN": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GP": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-GQ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-HT": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-KM": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-LU": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MC": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MG": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-ML": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MQ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MR": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-MU": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-NC": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-NE": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-PF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-PM": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-RE": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-RW": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-SC": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-SN": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-SY": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-TD": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-TG": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-TN": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-VU": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-WF": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fr-YT": "#,##0.00 ¤;(#,##0.00 ¤)",
  "fur": "¤ #,##0.00",
  "fy": "¤ #,##0.00;(¤ #,##0.00)",
  "ga": "¤#,##0.00;(¤#,##0.00)",
  "ga-GB": "¤#,##0.00;(¤#,##0.00)",
  "gd": "¤#,##0.00;(¤#,##0.00)",
  "gl": "#,##0.00 ¤",
  "gsw": "#,##0.00 ¤",
  "gsw-FR": "#,##0.00 ¤",
  "gsw-LI": "#,##0.00 ¤",
  "gu": "¤#,##,##0.00;(¤#,##,##0.00)",
  "guz": "¤#,##0.00;(¤#,##0.00)",
  "gv": "¤#,##0.00",
  "ha": "¤ #,##0.00",
  "ha-GH": "¤ #,##0.00",
  "ha-NE": "¤ #,##0.00",
  "haw": "¤#,##0.00;(¤#,##0.00)",
  "he": "#,##0.00 ¤",
  "hi": "¤#,##,##0.00",
  "hr": "#,##0.00 ¤",
  "hr-BA": "#,##0.00 ¤",
  "hsb": "#,##0.00 ¤",
  "hu": "#,##0.00 ¤",
  "hy": "#,##0.00 ¤",
  "ia": "¤ #,##0.00;(¤ #,##0.00)",
  "id": "¤#,##0.00",
  "ig": "¤#,##0.00;(¤#,##0.00)",
  "ii": "¤ #,##0.00",
  "is": "#,##0.00 ¤",
  "it": "#,##0.00 ¤",
  "it-CH": "#,##0.00 ¤",
  "it-SM": "#,##0.00 ¤",
  "it-VA": "#,##0.00 ¤",
  "ja": "¤#,##0.00;(¤#,##0.00)",
  "jgo": "¤ #,##0.00",
  "jmc": "¤#,##0.00",
  "jv": "¤ #,##0.00",
  "ka": "#,##0.00 ¤",
  "kab": "#,##0.00¤",
  "kam": "¤#,##0.00;(¤#,##0.00)",
  "kde": "¤#,##0.00;(¤#,##0.00)",
  "kea": "#,##0.00 ¤;(#,##0.00 ¤)",
  "khq": "#,##0.00¤",
  "ki": "¤#,##0.00;(¤#,##0.00)",
  "kk": "#,##0.00 ¤",
  "kkj": "¤ #,##0.00",
  "kl": "¤#,##0.00;¤-#,##0.00",
  "kln": "¤#,##0.00;(¤#,##0.00)",
  "km": "#,##0.00¤;(#,##0.00¤)",
  "kn": "¤#,##0.00;(¤#,##0.00)",
  "ko": "¤#,##0.00;(¤#,##0.00)",
  "ko-KP": "¤#,##0.00;(¤#,##0.00)",
  "kok": "¤#,##0.00;(¤#,##0.00)",
  "ks": "¤ #,##,##0.00",
  "ks-Arab": "¤ #,##,##0.00",
  "ksb": "#,##0.00¤",
  "ksf": "#,##0.00 ¤",
  "ksh": "#,##0.00 ¤",
  "ku": "#,##0.00 ¤;(#,##0.00 ¤)",
  "kw": "¤#,##0.00",
  "ky": "#,##0.00 ¤",
  "lag": "¤ #,##0.00",
  "lb": "#,##0.00 ¤",
  "lg": "#,##0.00¤",
  "lkt": "¤ #,##0.00",
  "ln": "#,##0.00 ¤",
  "ln-AO": "#,##0.00 ¤",
  "ln-CF": "#,##0.00 ¤",
  "ln-CG": "#,##0.00 ¤",
  "lo": "¤#,##0.00;¤-#,##0.00",
  "lrc": "¤ #,##0.00",
  "lrc-IQ": "¤ #,##0.00",
  "lt": "#,##0.00 ¤",
  "lu": "#,##0.00¤",
  "luo": "#,##0.00¤",
  "luy": "¤#,##0.00;¤- #,##0.00",
  "lv": "#,##0.00 ¤",
  "mai": "¤ #,##0.00",
  "mas": "¤#,##0.00;(¤#,##0.00)",
  "mas-TZ": "¤#,##0.00;(¤#,##0.00)",
  "mer": "¤#,##0.00;(¤#,##0.00)",
  "mfe": "¤ #,##0.00",
  "mg": "¤#,##0.00",
  "mgh": "¤ #,##0.00",
  "mgo": "¤ #,##0.00",
  "mi": "¤ #,##0.00",
  "mk": "#,##0.00 ¤",
  "ml": "¤#,##0.00;(¤#,##0.00)",
  "mn": "¤ #,##0.00",
  "mni": "¤ #,##0.00",
  "mni-Beng": "¤ #,##0.00",
  "mr": "¤#,##0.00;(¤#,##0.00)",
  "ms": "¤#,##0.00;(¤#,##0.00)",
  "ms-BN": "¤#,##0.00;(¤#,##0.00)",
  "ms-ID": "¤#,##0.00",
  "ms-SG": "¤#,##0.00;(¤#,##0.00)",
  "mt": "¤#,##0.00",
  "mua": "¤#,##0.00;(¤#,##0.00)",
  "my": "¤ #,##0.00",
  "mzn": "¤ #,##0.00",
  "naq": "¤#,##0.00",
  "nb": "¤ #,##0.00",
  "nb-SJ": "¤ #,##0.00",
  "nd": "¤#,##0.00;(¤#,##0.00)",
  "nds": "¤ #,##0.00",
  "nds-NL": "¤ #,##0.00",
  "ne": "¤ #,##,##0.00",
  "ne-IN": "¤ #,##,##0.00",
  "nl": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-AW": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-BE": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-BQ": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-CW": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-SR": "¤ #,##0.00;(¤ #,##0.00)",
  "nl-SX": "¤ #,##0.00;(¤ #,##0.00)",
  "nmg": "#,##0.00 ¤",
  "nn": "#,##0.00 ¤",
  "nnh": "¤ #,##0.00",
  "nus": "¤#,##0.00;(¤#,##0.00)",
  "nyn": "¤#,##0.00",
  "om": "¤#,##0.00",
  "om-KE": "¤#,##0.00",
  "or": "¤#,##0.00;(¤#,##0.00)",
  "os": "¤ #,##0.00",
  "os-RU": "¤ #,##0.00",
  "pa": "¤ #,##0.00",
  "pa-Arab": "¤ #,##0.00",
  "pa-Guru": "¤ #,##0.00",
  "pcm": "¤#,##0.00",
  "pl": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ps": "¤#,##0.00;(¤#,##0.00)",
  "ps-PK": "¤#,##0.00;(¤#,##0.00)",
  "pt": "¤ #,##0.00",
  "pt-AO": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-CH": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-CV": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-GQ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-GW": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-LU": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-MO": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-MZ": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-PT": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-ST": "#,##0.00 ¤;(#,##0.00 ¤)",
  "pt-TL": "#,##0.00 ¤;(#,##0.00 ¤)",
  "qu": "¤ #,##0.00",
  "qu-BO": "¤ #,##0.00",
  "qu-EC": "¤ #,##0.00",
  "rm": "#,##0.00 ¤",
  "rn": "#,##0.00¤",
  "ro": "#,##0.00 ¤;(#,##0.00 ¤)",
  "ro-MD": "#,##0.00 ¤;(#,##0.00 ¤)",
  "rof": "¤#,##0.00",
  "root": "¤ #,##0.00",
  "ru": "#,##0.00 ¤",
  "ru-BY": "#,##0.00 ¤",
  "ru-KG": "#,##0.00 ¤",
  "ru-KZ": "#,##0.00 ¤",
  "ru-MD": "#,##0.00 ¤",
  "ru-UA": "#,##0.00 ¤",
  "rw": "¤ #,##0.00",
  "rwk": "#,##0.00¤",
  "sa": "¤ #,##0.00",
  "sah": "#,##0.00 ¤",
  "saq": "¤#,##0.00;(¤#,##0.00)",
  "sat": "¤ #,##0.00",
  "sat-Olck": "¤ #,##0.00",
  "sbp": "#,##0.00¤",
  "sd": "¤ #,##0.00",
  "sd-Arab": "¤ #,##0.00",
  "sd-Deva": "¤ #,##0.00",
  "se": "#,##0.00 ¤",
  "se-FI": "#,##0.00 ¤",
  "se-SE": "#,##0.00 ¤",
  "seh": "#,##0.00¤",
  "ses": "#,##0.00¤",
  "sg": "¤#,##0.00;¤-#,##0.00",
  "shi": "#,##0.00¤",
  "shi-Latn": "#,##0.00¤",
  "shi-Tfng": "#,##0.00¤",
  "si": "¤#,##0.00;(¤#,##0.00)",
  "sk": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sl": "#,##0.00 ¤;(#,##0.00 ¤)",
  "smn": "#,##0.00 ¤",
  "sn": "¤#,##0.00;(¤#,##0.00)",
  "so": "¤#,##0.00;(¤#,##0.00)",
  "so-DJ": "¤#,##0.00;(¤#,##0.00)",
  "so-ET": "¤#,##0.00;(¤#,##0.00)",
  "so-KE": "¤#,##0.00;(¤#,##0.00)",
  "sq": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sq-MK": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sq-XK": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Cyrl": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Cyrl-BA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Cyrl-ME": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Cyrl-XK": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Latn": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Latn-BA": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Latn-ME": "#,##0.00 ¤;(#,##0.00 ¤)",
  "sr-Latn-XK": "#,##0.00 ¤;(#,##0.00 ¤)",
  "su": "¤#,##0.00",
  "su-Latn": "¤#,##0.00",
  "sv": "#,##0.00 ¤",
  "sv-AX": "#,##0.00 ¤",
  "sv-FI": "#,##0.00 ¤",
  "sw": "¤ #,##0.00",
  "sw-CD": "¤ #,##0.00",
  "sw-KE": "¤ #,##0.00",
  "sw-UG": "¤ #,##0.00",
  "ta": "¤#,##0.00;(¤#,##0.00)",
  "ta-LK": "¤#,##0.00;(¤#,##0.00)",
  "ta-MY": "¤#,##0.00;(¤#,##0.00)",
  "ta-SG": "¤#,##0.00;(¤#,##0.00)",
  "te": "¤#,##0.00;(¤#,##0.00)",
  "teo": "¤#,##0.00;(¤#,##0.00)",
  "teo-KE": "¤#,##0.00;(¤#,##0.00)",
  "tg": "#,##0.00 ¤",
  "th": "¤#,##0.00;(¤#,##0.00)",
  "ti": "¤#,##0.00",
  "ti-ER": "¤#,##0.00",
  "tk": "#,##0.00 ¤",
  "to": "¤ #,##0.00",
  "tr": "¤#,##0.00;(¤#,##0.00)",
  "tr-CY": "¤#,##0.00;(¤#,##0.00)",
  "tt": "#,##0.00 ¤",
  "twq": "#,##0.00¤",
  "tzm": "#,##0.00 ¤",
  "ug": "¤#,##0.00;(¤#,##0.00)",
  "uk": "#,##0.00 ¤",
  "ur": "¤#,##0.00;(¤#,##0.00)",
  "ur-IN": "¤#,##0.00;(¤#,##0.00)",
  "uz": "#,##0.00 ¤",
  "uz-Arab": "¤ #,##0.00",
  "uz-Cyrl": "#,##0.00 ¤",
  "uz-Latn": "#,##0.00 ¤",
  "vai": "¤#,##0.00;(¤#,##0.00)",
  "vai-Latn": "¤#,##0.00;(¤#,##0.00)",
  "vai-Vaii": "¤#,##0.00;(¤#,##0.00)",
  "vi": "#,##0.00 ¤",
  "vun": "¤#,##0.00",
  "wae": "¤ #,##0.00",
  "wo": "¤ #,##0.00",
  "xh": "¤#,##0.00",
  "xog": "#,##0.00 ¤",
  "yav": "#,##0.00 ¤;(#,##0.00 ¤)",
  "yi": "¤ #,##0.00",
  "yo": "¤#,##0.00;(¤#,##0.00)",
  "yo-BJ": "¤#,##0.00;(¤#,##0.00)",
  "yue": "¤#,##0.00;(¤#,##0.00)",
  "yue-Hans": "¤#,##0.00;(¤#,##0.00)",
  "yue-Hant": "¤#,##0.00;(¤#,##0.00)",
  "zgh": "#,##0.00¤",
  "zh": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hans": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hans-HK": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hans-MO": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hans-SG": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hant": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hant-HK": "¤#,##0.00;(¤#,##0.00)",
  "zh-Hant-MO": "¤#,##0.00;(¤#,##0.00)",
  "zu": "¤#,##0.00;(¤#,##0.00)"
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.Component = void 0;

var _config = _interopRequireDefault(__webpack_require__(18));

var _extend = __webpack_require__(2);

var _index = __webpack_require__(155);

var _utils = __webpack_require__(78);

var _class = _interopRequireDefault(__webpack_require__(11));

var _action = _interopRequireDefault(__webpack_require__(61));

var _errors = _interopRequireDefault(__webpack_require__(13));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _events_strategy = __webpack_require__(49);

var _public_component = __webpack_require__(60);

var _postponed_operations = __webpack_require__(158);

var _type = __webpack_require__(1);

var _common = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var getEventName = function getEventName(actionName) {
  return actionName.charAt(2).toLowerCase() + actionName.substr(3);
};

var isInnerOption = function isInnerOption(optionName) {
  return optionName.indexOf('_', 0) === 0;
};

var Component = _class.default.inherit({
  _setDeprecatedOptions: function _setDeprecatedOptions() {
    this._deprecatedOptions = {};
  },
  _getDeprecatedOptions: function _getDeprecatedOptions() {
    return this._deprecatedOptions;
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return {
      onInitialized: null,
      onOptionChanged: null,
      onDisposing: null,
      defaultOptionsRules: null
    };
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return [];
  },
  _setOptionsByDevice: function _setOptionsByDevice(rules) {
    this._options.applyRules(rules);
  },
  _convertRulesToOptions: function _convertRulesToOptions(rules) {
    return (0, _utils.convertRulesToOptions)(rules);
  },
  _isInitialOptionValue: function _isInitialOptionValue(name) {
    return this._options.isInitial(name);
  },
  _setOptionsByReference: function _setOptionsByReference() {
    this._optionsByReference = {};
  },
  _getOptionsByReference: function _getOptionsByReference() {
    return this._optionsByReference;
  },

  /**
  * @name Component.ctor
  * @publicName ctor(options)
  * @param1 options:ComponentOptions|undefined
  * @hidden
  */
  ctor: function ctor() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _optionChangedCallbacks = options._optionChangedCallbacks,
        _disposingCallbacks = options._disposingCallbacks;
    this.NAME = (0, _public_component.name)(this.constructor);
    this._eventsStrategy = _events_strategy.EventsStrategy.create(this, options.eventsStrategy);
    this._updateLockCount = 0;
    this._optionChangedCallbacks = _optionChangedCallbacks || (0, _callbacks.default)();
    this._disposingCallbacks = _disposingCallbacks || (0, _callbacks.default)();
    this.postponedOperations = new _postponed_operations.PostponedOperations();

    this._createOptions(options);
  },
  _createOptions: function _createOptions(options) {
    var _this = this;

    this.beginUpdate();

    try {
      this._setOptionsByReference();

      this._setDeprecatedOptions();

      this._options = new _index.Options(this._getDefaultOptions(), this._getDefaultOptions(), this._getOptionsByReference(), this._getDeprecatedOptions());

      this._options.onChanging(function (name, previousValue, value) {
        return _this._initialized && _this._optionChanging(name, previousValue, value);
      });

      this._options.onDeprecated(function (option, info) {
        return _this._logDeprecatedOptionWarning(option, info);
      });

      this._options.onChanged(function (name, value, previousValue) {
        return _this._notifyOptionChanged(name, value, previousValue);
      });

      this._options.onStartChange(function () {
        return _this.beginUpdate();
      });

      this._options.onEndChange(function () {
        return _this.endUpdate();
      });

      this._options.addRules(this._defaultOptionsRules());

      if (options && options.onInitializing) {
        options.onInitializing.apply(this, [options]);
      }

      this._setOptionsByDevice(options.defaultOptionsRules);

      this._initOptions(options);
    } finally {
      this.endUpdate();
    }
  },
  _initOptions: function _initOptions(options) {
    this.option(options);
  },
  _init: function _init() {
    var _this2 = this;

    this._createOptionChangedAction();

    this.on('disposing', function (args) {
      _this2._disposingCallbacks.fireWith(_this2, [args]);
    });
  },
  _logDeprecatedOptionWarning: function _logDeprecatedOptionWarning(option, info) {
    var message = info.message || "Use the '".concat(info.alias, "' option instead");

    _errors.default.log('W0001', this.NAME, option, info.since, message);
  },
  _logDeprecatedComponentWarning: function _logDeprecatedComponentWarning(since, alias) {
    _errors.default.log('W0000', this.NAME, since, "Use the '".concat(alias, "' widget instead"));
  },
  _createOptionChangedAction: function _createOptionChangedAction() {
    this._optionChangedAction = this._createActionByOption('onOptionChanged', {
      excludeValidators: ['disabled', 'readOnly']
    });
  },
  _createDisposingAction: function _createDisposingAction() {
    this._disposingAction = this._createActionByOption('onDisposing', {
      excludeValidators: ['disabled', 'readOnly']
    });
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'onDisposing':
      case 'onInitialized':
        break;

      case 'onOptionChanged':
        this._createOptionChangedAction();

        break;

      case 'defaultOptionsRules':
        break;
    }
  },
  _dispose: function _dispose() {
    this._optionChangedCallbacks.empty();

    this._createDisposingAction();

    this._disposingAction();

    this._eventsStrategy.dispose();

    this._options.dispose();

    this._disposed = true;
  },
  _lockUpdate: function _lockUpdate() {
    this._updateLockCount++;
  },
  _unlockUpdate: function _unlockUpdate() {
    this._updateLockCount = Math.max(this._updateLockCount - 1, 0);
  },
  // TODO: remake as getter after ES6 refactor
  _isUpdateAllowed: function _isUpdateAllowed() {
    return this._updateLockCount === 0;
  },
  // TODO: remake as getter after ES6 refactor
  _isInitializingRequired: function _isInitializingRequired() {
    return !this._initializing && !this._initialized;
  },
  _commitUpdate: function _commitUpdate() {
    this.postponedOperations.callPostponedOperations();
    this._isInitializingRequired() && this._initializeComponent();
  },
  _initializeComponent: function _initializeComponent() {
    this._initializing = true;

    try {
      this._init();
    } finally {
      this._initializing = false;

      this._lockUpdate();

      this._createActionByOption('onInitialized', {
        excludeValidators: ['disabled', 'readOnly']
      })();

      this._unlockUpdate();

      this._initialized = true;
    }
  },
  instance: function instance() {
    return this;
  },
  beginUpdate: function beginUpdate() {
    this._lockUpdate();
  },
  endUpdate: function endUpdate() {
    this._unlockUpdate();

    this._isUpdateAllowed() && this._commitUpdate();
  },
  _optionChanging: _common.noop,
  _notifyOptionChanged: function _notifyOptionChanged(option, value, previousValue) {
    if (this._initialized) {
      var optionNames = [option].concat(this._options.getAliasesByName(option));

      for (var i = 0; i < optionNames.length; i++) {
        var name = optionNames[i];
        var args = {
          name: name.split(/[.[]/)[0],
          fullName: name,
          value: value,
          previousValue: previousValue
        };

        if (!isInnerOption(name)) {
          this._optionChangedCallbacks.fireWith(this, [(0, _extend.extend)(this._defaultActionArgs(), args)]);

          this._optionChangedAction((0, _extend.extend)({}, args));
        }

        if (!this._disposed && this._cancelOptionChange !== name) {
          this._optionChanged(args);
        }
      }
    }
  },
  initialOption: function initialOption(name) {
    return this._options.initial(name);
  },
  _defaultActionConfig: function _defaultActionConfig() {
    return {
      context: this,
      component: this
    };
  },
  _defaultActionArgs: function _defaultActionArgs() {
    return {
      component: this
    };
  },
  _createAction: function _createAction(actionSource, config) {
    var _this3 = this;

    var action;
    return function (e) {
      if (!(0, _type.isDefined)(e)) {
        e = {};
      }

      if (!(0, _type.isPlainObject)(e)) {
        e = {
          actionValue: e
        };
      }

      action = action || new _action.default(actionSource, (0, _extend.extend)(config, _this3._defaultActionConfig()));
      return action.execute.call(action, (0, _extend.extend)(e, _this3._defaultActionArgs()));
    };
  },
  _createActionByOption: function _createActionByOption(optionName, config) {
    var _this4 = this;

    var action;
    var eventName;
    var actionFunc;

    var result = function result() {
      if (!eventName) {
        config = config || {};

        if (typeof optionName !== 'string') {
          throw _errors.default.Error('E0008');
        }

        if (optionName.indexOf('on') === 0) {
          eventName = getEventName(optionName);
        } ///#DEBUG


        if (optionName.indexOf('on') !== 0) {
          throw Error("The '".concat(optionName, "' option name should start with 'on' prefix"));
        } ///#ENDDEBUG


        actionFunc = _this4.option(optionName);
      }

      if (!action && !actionFunc && !config.beforeExecute && !config.afterExecute && !_this4._eventsStrategy.hasEvent(eventName)) {
        return;
      }

      if (!action) {
        var beforeExecute = config.beforeExecute;

        config.beforeExecute = function () {
          for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            props[_key2] = arguments[_key2];
          }

          beforeExecute && beforeExecute.apply(_this4, props);

          _this4._eventsStrategy.fireEvent(eventName, props[0].args);
        };

        action = _this4._createAction(actionFunc, config);
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if ((0, _config.default)().wrapActionsBeforeExecute) {
        var beforeActionExecute = _this4.option('beforeActionExecute') || _common.noop;

        var wrappedAction = beforeActionExecute(_this4, action, config) || action;
        return wrappedAction.apply(_this4, args);
      }

      return action.apply(_this4, args);
    };

    if ((0, _config.default)().wrapActionsBeforeExecute) {
      return result;
    }

    var onActionCreated = this.option('onActionCreated') || _common.noop;

    return onActionCreated(this, result, config) || result;
  },
  on: function on(eventName, eventHandler) {
    this._eventsStrategy.on(eventName, eventHandler);

    return this;
  },
  off: function off(eventName, eventHandler) {
    this._eventsStrategy.off(eventName, eventHandler);

    return this;
  },
  hasActionSubscription: function hasActionSubscription(actionName) {
    return !!this._options.silent(actionName) || this._eventsStrategy.hasEvent(getEventName(actionName));
  },
  isOptionDeprecated: function isOptionDeprecated(name) {
    return this._options.isDeprecated(name);
  },
  _setOptionWithoutOptionChange: function _setOptionWithoutOptionChange(name, value) {
    this._cancelOptionChange = name;
    this.option(name, value);
    this._cancelOptionChange = false;
  },
  _getOptionValue: function _getOptionValue(name, context) {
    var value = this.option(name);

    if ((0, _type.isFunction)(value)) {
      return value.bind(context)();
    }

    return value;
  },
  option: function option() {
    var _this$_options;

    return (_this$_options = this._options).option.apply(_this$_options, arguments);
  },
  resetOption: function resetOption(name) {
    this.beginUpdate();

    this._options.reset(name);

    this.endUpdate();
  }
});
/**
 * @name Component
 * @module core/component
 * @export Component
 * @namespace DevExpress
 * @hidden
 * @wrappable
 */


exports.Component = Component;

/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.Options = void 0;

var _type = __webpack_require__(1);

var _common = __webpack_require__(3);

var _option_manager = __webpack_require__(156);

var _utils = __webpack_require__(78);

var _extend = __webpack_require__(2);

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Options = /*#__PURE__*/function () {
  function Options(options, defaultOptions, optionsByReference, deprecatedOptions) {
    var _this = this;

    this._deprecatedCallback;
    this._startChangeCallback;
    this._endChangeCallback;
    this._default = defaultOptions;
    this._deprecated = deprecatedOptions;
    this._deprecatedNames = [];

    this._initDeprecatedNames();

    this._optionManager = new _option_manager.OptionManager(options, optionsByReference);

    this._optionManager.onRelevantNamesPrepared(function (options, name, value, silent) {
      return _this._setRelevantNames(options, name, value, silent);
    });

    this._cachedOptions = {};
    this._rules = [];
  }

  var _proto = Options.prototype;

  _proto._initDeprecatedNames = function _initDeprecatedNames() {
    for (var optionName in this._deprecated) {
      this._deprecatedNames.push(optionName);
    }
  };

  _proto._getByRules = function _getByRules(rules) {
    rules = Array.isArray(rules) ? this._rules.concat(rules) : this._rules;
    return (0, _utils.convertRulesToOptions)(rules);
  };

  _proto._notifyDeprecated = function _notifyDeprecated(option) {
    var info = this._deprecated[option];

    if (info) {
      this._deprecatedCallback(option, info);
    }
  };

  _proto._setRelevantNames = function _setRelevantNames(options, name, value, silent) {
    if (name) {
      var normalizedName = this._normalizeName(name, silent);

      if (normalizedName && normalizedName !== name) {
        this._setField(options, normalizedName, value);

        this._clearField(options, name);
      }
    }
  };

  _proto._setField = function _setField(options, fullName, value) {
    var fieldName = '';
    var fieldObject = null;

    do {
      fieldName = fieldName ? ".".concat(fieldName) : '';
      fieldName = (0, _utils.getFieldName)(fullName) + fieldName;
      fullName = (0, _utils.getParentName)(fullName);
      fieldObject = fullName ? this._optionManager.get(options, fullName, false) : options;
    } while (!fieldObject);

    fieldObject[fieldName] = value;
  };

  _proto._clearField = function _clearField(options, name) {
    delete options[name];
    var previousFieldName = (0, _utils.getParentName)(name);
    var fieldObject = previousFieldName ? this._optionManager.get(options, previousFieldName, false) : options;

    if (fieldObject) {
      delete fieldObject[(0, _utils.getFieldName)(name)];
    }
  };

  _proto._normalizeName = function _normalizeName(name, silent) {
    if (this._deprecatedNames.length && name) {
      for (var i = 0; i < this._deprecatedNames.length; i++) {
        if (this._deprecatedNames[i] === name) {
          var deprecate = this._deprecated[name];

          if (deprecate) {
            !silent && this._notifyDeprecated(name);
            return deprecate.alias || name;
          }
        }
      }
    }

    return name;
  };

  _proto.addRules = function addRules(rules) {
    this._rules = rules.concat(this._rules);
  };

  _proto.applyRules = function applyRules(rules) {
    var options = this._getByRules(rules);

    this.silent(options);
  };

  _proto.dispose = function dispose() {
    this._deprecatedCallback = _common.noop;
    this._startChangeCallback = _common.noop;
    this._endChangeCallback = _common.noop;

    this._optionManager.dispose();
  };

  _proto.onChanging = function onChanging(callBack) {
    this._optionManager.onChanging(callBack);
  };

  _proto.onChanged = function onChanged(callBack) {
    this._optionManager.onChanged(callBack);
  };

  _proto.onDeprecated = function onDeprecated(callBack) {
    this._deprecatedCallback = callBack;
  };

  _proto.onStartChange = function onStartChange(callBack) {
    this._startChangeCallback = callBack;
  };

  _proto.onEndChange = function onEndChange(callBack) {
    this._endChangeCallback = callBack;
  };

  _proto.isInitial = function isInitial(name) {
    var value = this.silent(name);
    var initialValue = this.initial(name);
    var areFunctions = (0, _type.isFunction)(value) && (0, _type.isFunction)(initialValue);
    return areFunctions ? value.toString() === initialValue.toString() : (0, _common.equalByValue)(value, initialValue);
  };

  _proto.initial = function initial(name) {
    return (0, _utils.getNestedOptionValue)(this._initial, name);
  };

  _proto.option = function option(options, value) {
    var isGetter = arguments.length < 2 && (0, _type.type)(options) !== 'object';

    if (isGetter) {
      return this._optionManager.get(undefined, this._normalizeName(options));
    } else {
      this._startChangeCallback();

      try {
        this._optionManager.set(options, value);
      } finally {
        this._endChangeCallback();
      }
    }
  };

  _proto.silent = function silent(options, value) {
    var isGetter = arguments.length < 2 && (0, _type.type)(options) !== 'object';

    if (isGetter) {
      return this._optionManager.get(undefined, options, undefined, true);
    } else {
      this._optionManager.set(options, value, undefined, true);
    }
  };

  _proto.reset = function reset(name) {
    var _this2 = this;

    if (name) {
      var fullPath = name.replace(/\[([^\]])\]/g, '.$1').split('.');
      var value = fullPath.reduce(function (value, field) {
        return value ? value[field] : _this2.initial(field);
      }, null);
      var defaultValue = (0, _type.isObject)(value) ? _extends({}, value) : value;

      this._optionManager.set(name, defaultValue, false);
    }
  };

  _proto.getAliasesByName = function getAliasesByName(name) {
    var _this3 = this;

    return Object.keys(this._deprecated).filter(function (aliasName) {
      return name === _this3._deprecated[aliasName].alias;
    });
  };

  _proto.isDeprecated = function isDeprecated(name) {
    return Object.prototype.hasOwnProperty.call(this._deprecated, name);
  };

  _proto.cache = function cache(name, options) {
    var isGetter = arguments.length < 2;

    if (isGetter) {
      return this._cachedOptions[name];
    } else {
      this._cachedOptions[name] = (0, _extend.extend)(this._cachedOptions[name], options);
    }
  };

  _createClass(Options, [{
    key: "_initial",
    get: function get() {
      if (!this._initialOptions) {
        var rulesOptions = this._getByRules(this.silent('defaultOptionsRules'));

        this._initialOptions = this._default;

        this._optionManager._setByReference(this._initialOptions, rulesOptions);
      }

      return this._initialOptions;
    },
    set: function set(value) {
      this._initialOptions = value;
    }
  }]);

  return Options;
}();

exports.Options = Options;

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.OptionManager = void 0;

var _data = __webpack_require__(23);

var _common = __webpack_require__(3);

var _comparator = __webpack_require__(157);

var _extend = __webpack_require__(2);

var _type = __webpack_require__(1);

var _utils = __webpack_require__(78);

var cachedGetters = {};
var cachedSetters = {};

var OptionManager = /*#__PURE__*/function () {
  function OptionManager(options, optionsByReference) {
    this._options = options;
    this._optionsByReference = optionsByReference;
    this._changingCallback;
    this._changedCallback;
    this._namePreparedCallbacks;
  }

  var _proto = OptionManager.prototype;

  _proto._setByReference = function _setByReference(options, rulesOptions) {
    (0, _extend.extend)(true, options, rulesOptions);

    for (var fieldName in this._optionsByReference) {
      if (Object.prototype.hasOwnProperty.call(rulesOptions, fieldName)) {
        options[fieldName] = rulesOptions[fieldName];
      }
    }
  };

  _proto._setPreparedValue = function _setPreparedValue(name, value, merge, silent) {
    var previousValue = this.get(this._options, name, false);

    if (!(0, _comparator.equals)(previousValue, value)) {
      var path = name.split(/[.[]/);
      !silent && this._changingCallback(name, previousValue, value);
      cachedSetters[name] = cachedSetters[name] || (0, _data.compileSetter)(name);
      cachedSetters[name](this._options, value, {
        functionsAsIs: true,
        merge: (0, _type.isDefined)(merge) ? merge : !this._optionsByReference[name],
        unwrapObservables: path.length > 1 && !!this._optionsByReference[path[0]]
      });
      !silent && this._changedCallback(name, value, previousValue);
    }
  };

  _proto._prepareRelevantNames = function _prepareRelevantNames(options, name, value, silent) {
    if ((0, _type.isPlainObject)(value)) {
      for (var valueName in value) {
        this._prepareRelevantNames(options, "".concat(name, ".").concat(valueName), value[valueName]);
      }
    }

    this._namePreparedCallbacks(options, name, value, silent);
  };

  _proto.get = function get() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._options;
    var name = arguments.length > 1 ? arguments[1] : undefined;
    var unwrapObservables = arguments.length > 2 ? arguments[2] : undefined;
    cachedGetters[name] = cachedGetters[name] || (0, _data.compileGetter)(name);
    return cachedGetters[name](options, {
      functionsAsIs: true,
      unwrapObservables: unwrapObservables
    });
  };

  _proto.set = function set(options, value, merge, silent) {
    options = (0, _utils.normalizeOptions)(options, value);

    for (var name in options) {
      this._prepareRelevantNames(options, name, options[name], silent);
    }

    for (var _name in options) {
      this._setPreparedValue(_name, options[_name], merge, silent);
    }
  };

  _proto.onRelevantNamesPrepared = function onRelevantNamesPrepared(callBack) {
    this._namePreparedCallbacks = callBack;
  };

  _proto.onChanging = function onChanging(callBack) {
    this._changingCallback = callBack;
  };

  _proto.onChanged = function onChanged(callBack) {
    this._changedCallback = callBack;
  };

  _proto.dispose = function dispose() {
    this._changingCallback = _common.noop;
    this._changedCallback = _common.noop;
  };

  return OptionManager;
}();

exports.OptionManager = OptionManager;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.equals = void 0;

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _data = __webpack_require__(23);

var _type = __webpack_require__(1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var hasNegation = function hasNegation(oldValue, newValue) {
  return 1 / oldValue === 1 / newValue;
};

var equals = function equals(oldValue, newValue) {
  oldValue = (0, _data.toComparable)(oldValue, true);
  newValue = (0, _data.toComparable)(newValue, true);

  if (oldValue && newValue && (0, _type.isRenderer)(oldValue) && (0, _type.isRenderer)(newValue)) {
    return newValue.is(oldValue);
  }

  var oldValueIsNaN = oldValue !== oldValue;
  var newValueIsNaN = newValue !== newValue;

  if (oldValueIsNaN && newValueIsNaN) {
    return true;
  }

  if (oldValue === 0 && newValue === 0) {
    return hasNegation(oldValue, newValue);
  }

  if (oldValue === null || _typeof(oldValue) !== 'object' || _dom_adapter.default.isElementNode(oldValue)) {
    return oldValue === newValue;
  }

  return false;
};

exports.equals = equals;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.PostponedOperations = void 0;

var _deferred = __webpack_require__(9);

var _type = __webpack_require__(1);

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var PostponedOperations = /*#__PURE__*/function () {
  function PostponedOperations() {
    this._postponedOperations = {};
  }

  var _proto = PostponedOperations.prototype;

  _proto.add = function add(key, fn, postponedPromise) {
    if (key in this._postponedOperations) {
      postponedPromise && this._postponedOperations[key].promises.push(postponedPromise);
    } else {
      var completePromise = new _deferred.Deferred();
      this._postponedOperations[key] = {
        fn: fn,
        completePromise: completePromise,
        promises: postponedPromise ? [postponedPromise] : []
      };
    }

    return this._postponedOperations[key].completePromise.promise();
  };

  _proto.callPostponedOperations = function callPostponedOperations() {
    for (var key in this._postponedOperations) {
      var operation = this._postponedOperations[key];

      if ((0, _type.isDefined)(operation)) {
        if (operation.promises && operation.promises.length) {
          _deferred.when.apply(void 0, _toConsumableArray(operation.promises)).done(operation.fn).then(operation.completePromise.resolve);
        } else {
          operation.fn().done(operation.completePromise.resolve);
        }
      }
    }

    this._postponedOperations = {};
  };

  return PostponedOperations;
}();

exports.PostponedOperations = PostponedOperations;

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.TemplateManager = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _type = __webpack_require__(1);

var _common = __webpack_require__(3);

var _extend = __webpack_require__(2);

var _function_template = __webpack_require__(103);

var _empty_template = __webpack_require__(52);

var _template_manager = __webpack_require__(104);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TEXT_NODE = 3;
var ANONYMOUS_TEMPLATE_NAME = 'template';
var TEMPLATE_OPTIONS_NAME = 'dxTemplate';
var TEMPLATE_WRAPPER_CLASS = 'dx-template-wrapper';
var DX_POLYMORPH_WIDGET_TEMPLATE = new _function_template.FunctionTemplate(function (_ref) {
  var model = _ref.model,
      parent = _ref.parent;
  var widgetName = model.widget;
  if (!widgetName) return (0, _renderer.default)();
  var widgetElement = (0, _renderer.default)('<div>');
  var widgetOptions = model.options || {};

  if (parent) {
    parent._createComponent(widgetElement, widgetName, widgetOptions);
  } else {
    widgetElement[widgetName](widgetOptions);
  }

  return widgetElement;
});

var TemplateManager = /*#__PURE__*/function () {
  function TemplateManager(createElement, anonymousTemplateName) {
    this._tempTemplates = [];
    this._defaultTemplates = {};
    this._anonymousTemplateName = anonymousTemplateName || ANONYMOUS_TEMPLATE_NAME;
    this._createElement = createElement || _template_manager.defaultCreateElement;
    this._createTemplateIfNeeded = this._createTemplateIfNeeded.bind(this);
  }

  TemplateManager.createDefaultOptions = function createDefaultOptions() {
    return {
      integrationOptions: {
        watchMethod: function watchMethod(fn, callback) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

          if (!options.skipImmediate) {
            callback(fn());
          }

          return _common.noop;
        },
        templates: {
          'dx-polymorph-widget': DX_POLYMORPH_WIDGET_TEMPLATE
        },
        useDeferUpdateForTemplates: true
      }
    };
  };

  var _proto = TemplateManager.prototype;

  _proto.addDefaultTemplates = function addDefaultTemplates(templates) {
    this._defaultTemplates = (0, _extend.extend)({}, this._defaultTemplates, templates);
  };

  _proto.dispose = function dispose() {
    this._tempTemplates.forEach(function (tempTemplate) {
      tempTemplate.template.dispose && tempTemplate.template.dispose();
    });

    this._tempTemplates = [];
  };

  _proto.extractTemplates = function extractTemplates($el) {
    var templates = this._extractTemplates($el);

    var anonymousTemplateMeta = this._extractAnonymousTemplate($el);

    return {
      templates: templates,
      anonymousTemplateMeta: anonymousTemplateMeta
    };
  };

  _proto._extractTemplates = function _extractTemplates($el) {
    var _this = this;

    var templates = (0, _template_manager.findTemplates)($el, TEMPLATE_OPTIONS_NAME);
    var suitableTemplates = (0, _template_manager.suitableTemplatesByName)(templates);
    templates.forEach(function (_ref2) {
      var element = _ref2.element,
          name = _ref2.options.name;

      if (element === suitableTemplates[name]) {
        (0, _renderer.default)(element).addClass(TEMPLATE_WRAPPER_CLASS).detach();
      } else {
        (0, _renderer.default)(element).remove();
      }
    });
    return Object.keys(suitableTemplates).map(function (name) {
      return {
        name: name,
        template: _this._createTemplate(suitableTemplates[name])
      };
    });
  };

  _proto._extractAnonymousTemplate = function _extractAnonymousTemplate($el) {
    var $anonymousTemplate = $el.contents().detach();
    var $notJunkTemplateContent = $anonymousTemplate.filter(function (_, element) {
      var isTextNode = element.nodeType === TEXT_NODE;
      var isEmptyText = (0, _renderer.default)(element).text().trim().length < 1;
      return !(isTextNode && isEmptyText);
    });
    return $notJunkTemplateContent.length > 0 ? {
      template: this._createTemplate($anonymousTemplate),
      name: this._anonymousTemplateName
    } : {};
  };

  _proto._createTemplateIfNeeded = function _createTemplateIfNeeded(templateSource) {
    var cachedTemplate = this._tempTemplates.filter(function (tempTemplate) {
      return tempTemplate.source === (0, _template_manager.templateKey)(templateSource);
    })[0];

    if (cachedTemplate) return cachedTemplate.template;

    var template = this._createTemplate(templateSource);

    this._tempTemplates.push({
      template: template,
      source: (0, _template_manager.templateKey)(templateSource)
    });

    return template;
  };

  _proto._createTemplate = function _createTemplate(templateSource) {
    return this._createElement((0, _template_manager.validateTemplateSource)(templateSource));
  };

  _proto.getTemplate = function getTemplate(templateSource, templates, _ref3, context) {
    var _this2 = this;

    var isAsyncTemplate = _ref3.isAsyncTemplate,
        skipTemplates = _ref3.skipTemplates;

    if (!(0, _type.isFunction)(templateSource)) {
      return (0, _template_manager.acquireTemplate)(templateSource, this._createTemplateIfNeeded, templates, isAsyncTemplate, skipTemplates, this._defaultTemplates);
    }

    return new _function_template.FunctionTemplate(function (options) {
      var templateSourceResult = templateSource.apply(context, (0, _template_manager.getNormalizedTemplateArgs)(options));

      if (!(0, _type.isDefined)(templateSourceResult)) {
        return new _empty_template.EmptyTemplate();
      }

      var dispose = false;
      var template = (0, _template_manager.acquireTemplate)(templateSourceResult, function (templateSource) {
        if (templateSource.nodeType || (0, _type.isRenderer)(templateSource) && !(0, _renderer.default)(templateSource).is('script')) {
          return new _function_template.FunctionTemplate(function () {
            return templateSource;
          });
        }

        dispose = true;
        return _this2._createTemplate(templateSource);
      }, templates, isAsyncTemplate, skipTemplates, _this2._defaultTemplates);
      var result = template.render(options);
      dispose && template.dispose && template.dispose();
      return result;
    });
  };

  _createClass(TemplateManager, [{
    key: "anonymousTemplateName",
    get: function get() {
      return this._anonymousTemplateName;
    }
  }]);

  return TemplateManager;
}();

exports.TemplateManager = TemplateManager;

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.ChildDefaultTemplate = void 0;

var _template_base = __webpack_require__(43);

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ChildDefaultTemplate = /*#__PURE__*/function (_TemplateBase) {
  _inheritsLoose(ChildDefaultTemplate, _TemplateBase);

  function ChildDefaultTemplate(name) {
    var _this;

    _this = _TemplateBase.call(this) || this;
    _this.name = name;
    return _this;
  }

  return ChildDefaultTemplate;
}(_template_base.TemplateBase);

exports.ChildDefaultTemplate = ChildDefaultTemplate;

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.Template = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _template_base = __webpack_require__(43);

var _dom = __webpack_require__(21);

var _template_engine_registry = __webpack_require__(105);

__webpack_require__(162);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

(0, _template_engine_registry.registerTemplateEngine)('default', {
  compile: function compile(element) {
    return (0, _dom.normalizeTemplateElement)(element);
  },
  render: function render(template, model, index) {
    return template.clone();
  }
});
(0, _template_engine_registry.setTemplateEngine)('default');

var Template = /*#__PURE__*/function (_TemplateBase) {
  _inheritsLoose(Template, _TemplateBase);

  function Template(element) {
    var _this;

    _this = _TemplateBase.call(this) || this;
    _this._element = element;
    return _this;
  }

  var _proto = Template.prototype;

  _proto._renderCore = function _renderCore(options) {
    var transclude = options.transclude;

    if (!transclude && !this._compiledTemplate) {
      this._compiledTemplate = (0, _template_engine_registry.getCurrentTemplateEngine)().compile(this._element);
    }

    return (0, _renderer.default)('<div>').append(transclude ? this._element : (0, _template_engine_registry.getCurrentTemplateEngine)().render(this._compiledTemplate, options.model, options.index)).contents();
  };

  _proto.source = function source() {
    return (0, _renderer.default)(this._element).clone();
  };

  return Template;
}(_template_base.TemplateBase);

exports.Template = Template;

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _dom = __webpack_require__(21);

var _template_engine_registry = __webpack_require__(105);

(0, _template_engine_registry.registerTemplateEngine)('jquery-tmpl', {
  compile: function compile(element) {
    return (0, _dom.extractTemplateMarkup)(element);
  },
  render: function render(template, data) {
    /* global jQuery */
    return jQuery.tmpl(template, data);
  }
});
(0, _template_engine_registry.registerTemplateEngine)('jsrender', {
  compile: function compile(element) {
    /* global jsrender */
    return (jQuery ? jQuery : jsrender).templates((0, _dom.extractTemplateMarkup)(element));
  },
  render: function render(template, data) {
    return template.render(data);
  }
});
(0, _template_engine_registry.registerTemplateEngine)('mustache', {
  compile: function compile(element) {
    /* global Mustache */
    return (0, _dom.extractTemplateMarkup)(element);
  },
  render: function render(template, data) {
    return Mustache.render(template, data);
  }
});
(0, _template_engine_registry.registerTemplateEngine)('hogan', {
  compile: function compile(element) {
    /* global Hogan */
    return Hogan.compile((0, _dom.extractTemplateMarkup)(element));
  },
  render: function render(template, data) {
    return template.render(data);
  }
});
(0, _template_engine_registry.registerTemplateEngine)('underscore', {
  compile: function compile(element) {
    /* global _ */
    return _.template((0, _dom.extractTemplateMarkup)(element));
  },
  render: function render(template, data) {
    return template(data);
  }
});
(0, _template_engine_registry.registerTemplateEngine)('handlebars', {
  compile: function compile(element) {
    /* global Handlebars */
    return Handlebars.compile((0, _dom.extractTemplateMarkup)(element));
  },
  render: function render(template, data) {
    return template(data);
  }
});
(0, _template_engine_registry.registerTemplateEngine)('doT', {
  compile: function compile(element) {
    /* global doT */
    return doT.template((0, _dom.extractTemplateMarkup)(element));
  },
  render: function render(template, data) {
    return template(data);
  }
});

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _class = _interopRequireDefault(__webpack_require__(11));

var _array = __webpack_require__(12);

var _index = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COMPOSITION_START_EVENT = 'compositionstart';
var COMPOSITION_END_EVENT = 'compositionend';
var KEYDOWN_EVENT = 'keydown';
var NAMESPACE = 'KeyboardProcessor';

var KeyboardProcessor = _class.default.inherit({
  _keydown: (0, _index.addNamespace)(KEYDOWN_EVENT, NAMESPACE),
  _compositionStart: (0, _index.addNamespace)(COMPOSITION_START_EVENT, NAMESPACE),
  _compositionEnd: (0, _index.addNamespace)(COMPOSITION_END_EVENT, NAMESPACE),
  ctor: function ctor(options) {
    var _this = this;

    options = options || {};

    if (options.element) {
      this._element = (0, _renderer.default)(options.element);
    }

    if (options.focusTarget) {
      this._focusTarget = options.focusTarget;
    }

    this._handler = options.handler;

    if (this._element) {
      this._processFunction = function (e) {
        var isNotFocusTarget = _this._focusTarget && _this._focusTarget !== e.target && (0, _array.inArray)(e.target, (0, _renderer.default)(_this._focusTarget)) < 0;
        var shouldSkipProcessing = _this._isComposingJustFinished && e.which === 229 || _this._isComposing || isNotFocusTarget;
        _this._isComposingJustFinished = false;

        if (!shouldSkipProcessing) {
          _this.process(e);
        }
      };

      this._toggleProcessingWithContext = this.toggleProcessing.bind(this);

      _events_engine.default.on(this._element, this._keydown, this._processFunction);

      _events_engine.default.on(this._element, this._compositionStart, this._toggleProcessingWithContext);

      _events_engine.default.on(this._element, this._compositionEnd, this._toggleProcessingWithContext);
    }
  },
  dispose: function dispose() {
    if (this._element) {
      _events_engine.default.off(this._element, this._keydown, this._processFunction);

      _events_engine.default.off(this._element, this._compositionStart, this._toggleProcessingWithContext);

      _events_engine.default.off(this._element, this._compositionEnd, this._toggleProcessingWithContext);
    }

    this._element = undefined;
    this._handler = undefined;
  },
  process: function process(e) {
    this._handler({
      keyName: (0, _index.normalizeKeyName)(e),
      key: e.key,
      code: e.code,
      ctrl: e.ctrlKey,
      location: e.location,
      metaKey: e.metaKey,
      shift: e.shiftKey,
      alt: e.altKey,
      which: e.which,
      originalEvent: e
    });
  },
  toggleProcessing: function toggleProcessing(_ref) {
    var type = _ref.type;
    this._isComposing = type === COMPOSITION_START_EVENT;
    this._isComposingJustFinished = !this._isComposing;
  }
});

var _default = KeyboardProcessor;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _ui = _interopRequireDefault(__webpack_require__(165));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _ui.default;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 165 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _window = __webpack_require__(7);

var _message = _interopRequireDefault(__webpack_require__(17));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _element = __webpack_require__(20);

var _extend = __webpack_require__(2);

var _common = __webpack_require__(3);

var _uiScroll_viewNative = _interopRequireDefault(__webpack_require__(166));

var _uiScroll_viewNative2 = _interopRequireDefault(__webpack_require__(167));

var _uiScroll_view = _interopRequireDefault(__webpack_require__(168));

var _ui = _interopRequireDefault(__webpack_require__(169));

var _load_indicator = _interopRequireDefault(__webpack_require__(44));

var _themes = __webpack_require__(31);

var _load_panel = _interopRequireDefault(__webpack_require__(171));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// STYLE scrollView
var SCROLLVIEW_CLASS = 'dx-scrollview';
var SCROLLVIEW_CONTENT_CLASS = SCROLLVIEW_CLASS + '-content';
var SCROLLVIEW_TOP_POCKET_CLASS = SCROLLVIEW_CLASS + '-top-pocket';
var SCROLLVIEW_BOTTOM_POCKET_CLASS = SCROLLVIEW_CLASS + '-bottom-pocket';
var SCROLLVIEW_PULLDOWN_CLASS = SCROLLVIEW_CLASS + '-pull-down';
var SCROLLVIEW_REACHBOTTOM_CLASS = SCROLLVIEW_CLASS + '-scrollbottom';
var SCROLLVIEW_REACHBOTTOM_INDICATOR_CLASS = SCROLLVIEW_REACHBOTTOM_CLASS + '-indicator';
var SCROLLVIEW_REACHBOTTOM_TEXT_CLASS = SCROLLVIEW_REACHBOTTOM_CLASS + '-text';
var SCROLLVIEW_LOADPANEL = SCROLLVIEW_CLASS + '-loadpanel';
var refreshStrategies = {
  pullDown: _uiScroll_viewNative.default,
  swipeDown: _uiScroll_viewNative2.default,
  simulated: _uiScroll_view.default
};
var isServerSide = !(0, _window.hasWindow)();
var scrollViewServerConfig = {
  finishLoading: _common.noop,
  release: _common.noop,
  refresh: _common.noop,
  _optionChanged: function _optionChanged(args) {
    if (args.name !== 'onUpdated') {
      return this.callBase.apply(this, arguments);
    }
  }
};

var ScrollView = _ui.default.inherit(isServerSide ? scrollViewServerConfig : {
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      pullingDownText: _message.default.format('dxScrollView-pullingDownText'),
      pulledDownText: _message.default.format('dxScrollView-pulledDownText'),
      refreshingText: _message.default.format('dxScrollView-refreshingText'),
      reachBottomText: _message.default.format('dxScrollView-reachBottomText'),
      onPullDown: null,
      onReachBottom: null,
      refreshStrategy: 'pullDown'
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat([{
      device: function device() {
        var realDevice = _devices.default.real();

        return realDevice.platform === 'android';
      },
      options: {
        refreshStrategy: 'swipeDown'
      }
    }, {
      device: function device() {
        return (0, _themes.isMaterial)();
      },
      options: {
        pullingDownText: '',
        pulledDownText: '',
        refreshingText: '',
        reachBottomText: ''
      }
    }]);
  },
  _init: function _init() {
    this.callBase();
    this._loadingIndicatorEnabled = true;
  },
  _initScrollableMarkup: function _initScrollableMarkup() {
    this.callBase();
    this.$element().addClass(SCROLLVIEW_CLASS);

    this._initContent();

    this._initTopPocket();

    this._initBottomPocket();

    this._initLoadPanel();
  },
  _initContent: function _initContent() {
    var $content = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_CONTENT_CLASS);

    this._$content.wrapInner($content);
  },
  _initTopPocket: function _initTopPocket() {
    var $topPocket = this._$topPocket = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_TOP_POCKET_CLASS);
    var $pullDown = this._$pullDown = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_PULLDOWN_CLASS);
    $topPocket.append($pullDown);

    this._$content.prepend($topPocket);
  },
  _initBottomPocket: function _initBottomPocket() {
    var $bottomPocket = this._$bottomPocket = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_BOTTOM_POCKET_CLASS);
    var $reachBottom = this._$reachBottom = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_REACHBOTTOM_CLASS);
    var $loadContainer = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_REACHBOTTOM_INDICATOR_CLASS);
    var $loadIndicator = new _load_indicator.default((0, _renderer.default)('<div>')).$element();
    var $text = this._$reachBottomText = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_REACHBOTTOM_TEXT_CLASS);

    this._updateReachBottomText();

    $reachBottom.append($loadContainer.append($loadIndicator)).append($text);
    $bottomPocket.append($reachBottom);

    this._$content.append($bottomPocket);
  },
  _initLoadPanel: function _initLoadPanel() {
    var $loadPanelElement = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_LOADPANEL).appendTo(this.$element());
    var loadPanelOptions = {
      shading: false,
      delay: 400,
      message: this.option('refreshingText'),
      position: {
        of: this.$element()
      }
    };
    this._loadPanel = this._createComponent($loadPanelElement, _load_panel.default, loadPanelOptions);
  },
  _updateReachBottomText: function _updateReachBottomText() {
    this._$reachBottomText.text(this.option('reachBottomText'));
  },
  _createStrategy: function _createStrategy() {
    var strategyName = this.option('useNative') ? this.option('refreshStrategy') : 'simulated';
    var strategyClass = refreshStrategies[strategyName];
    this._strategy = new strategyClass(this);

    this._strategy.pullDownCallbacks.add(this._pullDownHandler.bind(this));

    this._strategy.releaseCallbacks.add(this._releaseHandler.bind(this));

    this._strategy.reachBottomCallbacks.add(this._reachBottomHandler.bind(this));
  },
  _createActions: function _createActions() {
    this.callBase();
    this._pullDownAction = this._createActionByOption('onPullDown');
    this._reachBottomAction = this._createActionByOption('onReachBottom');

    this._tryRefreshPocketState();
  },
  _tryRefreshPocketState: function _tryRefreshPocketState() {
    this._pullDownEnable(this.hasActionSubscription('onPullDown'));

    this._reachBottomEnable(this.hasActionSubscription('onReachBottom'));
  },
  on: function on(eventName) {
    var result = this.callBase.apply(this, arguments);

    if (eventName === 'pullDown' || eventName === 'reachBottom') {
      this._tryRefreshPocketState();
    }

    return result;
  },
  _pullDownEnable: function _pullDownEnable(enabled) {
    if (arguments.length === 0) {
      return this._pullDownEnabled;
    }

    if (this._$pullDown && this._strategy) {
      this._$pullDown.toggle(enabled);

      this._strategy.pullDownEnable(enabled);

      this._pullDownEnabled = enabled;
    }
  },
  _reachBottomEnable: function _reachBottomEnable(enabled) {
    if (arguments.length === 0) {
      return this._reachBottomEnabled;
    }

    if (this._$reachBottom && this._strategy) {
      this._$reachBottom.toggle(enabled);

      this._strategy.reachBottomEnable(enabled);

      this._reachBottomEnabled = enabled;
    }
  },
  _pullDownHandler: function _pullDownHandler() {
    this._loadingIndicator(false);

    this._pullDownLoading();
  },
  _loadingIndicator: function _loadingIndicator(value) {
    if (arguments.length < 1) {
      return this._loadingIndicatorEnabled;
    }

    this._loadingIndicatorEnabled = value;
  },
  _pullDownLoading: function _pullDownLoading() {
    this.startLoading();

    this._pullDownAction();
  },
  _reachBottomHandler: function _reachBottomHandler() {
    this._loadingIndicator(false);

    this._reachBottomLoading();
  },
  _reachBottomLoading: function _reachBottomLoading() {
    this.startLoading();

    this._reachBottomAction();
  },
  _releaseHandler: function _releaseHandler() {
    this.finishLoading();

    this._loadingIndicator(true);
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'onPullDown':
      case 'onReachBottom':
        this._createActions();

        break;

      case 'pullingDownText':
      case 'pulledDownText':
      case 'refreshingText':
      case 'refreshStrategy':
        this._invalidate();

        break;

      case 'reachBottomText':
        this._updateReachBottomText();

        break;

      default:
        this.callBase(args);
    }
  },
  content: function content() {
    return (0, _element.getPublicElement)(this._$content.children().eq(1));
  },
  release: function release(preventReachBottom) {
    if (preventReachBottom !== undefined) {
      this.toggleLoading(!preventReachBottom);
    }

    return this._strategy.release();
  },

  /**
  * @name dxScrollView.toggleLoading
  * @publicName toggleLoading(showOrHide)
  * @param1 showOrHide:boolean
  * @hidden
  */
  toggleLoading: function toggleLoading(showOrHide) {
    this._reachBottomEnable(showOrHide);
  },

  /**
  * @name dxScrollView.isFull
  * @publicName isFull()
  * @return boolean
  * @hidden
  */
  isFull: function isFull() {
    return (0, _renderer.default)(this.content()).height() > (0, _renderer.default)(this.container()).height();
  },
  refresh: function refresh() {
    if (!this.hasActionSubscription('onPullDown')) {
      return;
    }

    this._strategy.pendingRelease();

    this._pullDownLoading();
  },
  startLoading: function startLoading() {
    if (this._loadingIndicator() && this.$element().is(':visible')) {
      this._loadPanel.show();
    }

    this._lock();
  },
  finishLoading: function finishLoading() {
    this._loadPanel.hide();

    this._unlock();
  },
  _dispose: function _dispose() {
    this._strategy.dispose();

    this.callBase();

    if (this._loadPanel) {
      this._loadPanel.$element().remove();
    }
  }
});

(0, _component_registrator.default)('dxScrollView', ScrollView);
var _default = ScrollView;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _translator = __webpack_require__(16);

var _uiScrollable = _interopRequireDefault(__webpack_require__(80));

var _load_indicator = _interopRequireDefault(__webpack_require__(44));

var _iterator = __webpack_require__(4);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SCROLLVIEW_PULLDOWN_REFRESHING_CLASS = 'dx-scrollview-pull-down-loading';
var SCROLLVIEW_PULLDOWN_READY_CLASS = 'dx-scrollview-pull-down-ready';
var SCROLLVIEW_PULLDOWN_IMAGE_CLASS = 'dx-scrollview-pull-down-image';
var SCROLLVIEW_PULLDOWN_INDICATOR_CLASS = 'dx-scrollview-pull-down-indicator';
var SCROLLVIEW_PULLDOWN_TEXT_CLASS = 'dx-scrollview-pull-down-text';
var SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS = 'dx-scrollview-pull-down-text-visible';
var STATE_RELEASED = 0;
var STATE_READY = 1;
var STATE_REFRESHING = 2;
var STATE_LOADING = 3;
var PULLDOWN_RELEASE_TIME = 400;

var PullDownNativeScrollViewStrategy = _uiScrollable.default.inherit({
  _init: function _init(scrollView) {
    this.callBase(scrollView);
    this._$topPocket = scrollView._$topPocket;
    this._$pullDown = scrollView._$pullDown;
    this._$bottomPocket = scrollView._$bottomPocket;
    this._$refreshingText = scrollView._$refreshingText;
    this._$scrollViewContent = (0, _renderer.default)(scrollView.content());

    this._initCallbacks();
  },
  _initCallbacks: function _initCallbacks() {
    this.pullDownCallbacks = (0, _callbacks.default)();
    this.releaseCallbacks = (0, _callbacks.default)();
    this.reachBottomCallbacks = (0, _callbacks.default)();
  },
  render: function render() {
    this.callBase();

    this._renderPullDown();

    this._releaseState();
  },
  _renderPullDown: function _renderPullDown() {
    var $image = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_PULLDOWN_IMAGE_CLASS);
    var $loadContainer = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS);
    var $loadIndicator = new _load_indicator.default((0, _renderer.default)('<div>')).$element();
    var $text = this._$pullDownText = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_PULLDOWN_TEXT_CLASS);
    this._$pullingDownText = (0, _renderer.default)('<div>').text(this.option('pullingDownText')).appendTo($text);
    this._$pulledDownText = (0, _renderer.default)('<div>').text(this.option('pulledDownText')).appendTo($text);
    this._$refreshingText = (0, _renderer.default)('<div>').text(this.option('refreshingText')).appendTo($text);

    this._$pullDown.empty().append($image).append($loadContainer.append($loadIndicator)).append($text);
  },
  _releaseState: function _releaseState() {
    this._state = STATE_RELEASED;

    this._refreshPullDownText();
  },
  _refreshPullDownText: function _refreshPullDownText() {
    var that = this;
    var pullDownTextItems = [{
      element: this._$pullingDownText,
      visibleState: STATE_RELEASED
    }, {
      element: this._$pulledDownText,
      visibleState: STATE_READY
    }, {
      element: this._$refreshingText,
      visibleState: STATE_REFRESHING
    }];
    (0, _iterator.each)(pullDownTextItems, function (_, item) {
      var action = that._state === item.visibleState ? 'addClass' : 'removeClass';
      item.element[action](SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS);
    });
  },
  update: function update() {
    this.callBase();

    this._setTopPocketOffset();
  },
  _updateDimensions: function _updateDimensions() {
    this.callBase();
    this._topPocketSize = this._$topPocket.height();
    this._bottomPocketSize = this._$bottomPocket.height();

    if (_browser.default.msie) {
      this._scrollOffset = Math.round((this._$container.height() - this._$content.height()) * 100) / 100;
    } else {
      this._scrollOffset = this._$container.height() - this._$content.height();
    }
  },
  _allowedDirections: function _allowedDirections() {
    var allowedDirections = this.callBase();
    allowedDirections.vertical = allowedDirections.vertical || this._pullDownEnabled;
    return allowedDirections;
  },
  _setTopPocketOffset: function _setTopPocketOffset() {
    this._$topPocket.css({
      top: -this._topPocketSize
    });
  },
  handleEnd: function handleEnd() {
    this.callBase();

    this._complete();
  },
  handleStop: function handleStop() {
    this.callBase();

    this._complete();
  },
  _complete: function _complete() {
    if (this._state === STATE_READY) {
      this._setPullDownOffset(this._topPocketSize);

      clearTimeout(this._pullDownRefreshTimeout);
      this._pullDownRefreshTimeout = setTimeout(function () {
        this._pullDownRefreshing();
      }.bind(this), 400);
    }
  },
  _setPullDownOffset: function _setPullDownOffset(offset) {
    (0, _translator.move)(this._$topPocket, {
      top: offset
    });
    (0, _translator.move)(this._$scrollViewContent, {
      top: offset
    });
  },
  handleScroll: function handleScroll(e) {
    this.callBase(e); // TODO: replace with disabled check

    if (this._state === STATE_REFRESHING) {
      return;
    }

    var currentLocation = this.location().top;
    var scrollDelta = (this._location || 0) - currentLocation;
    this._location = currentLocation;

    if (this._isPullDown()) {
      this._pullDownReady();
    } else if (scrollDelta > 0 && this._isReachBottom()) {
      this._reachBottom();
    } else {
      this._stateReleased();
    }
  },
  _isPullDown: function _isPullDown() {
    return this._pullDownEnabled && this._location >= this._topPocketSize;
  },
  _isReachBottom: function _isReachBottom() {
    return this._reachBottomEnabled && this._location - (this._scrollOffset + this._bottomPocketSize) <= 0.5; // T858013
  },
  _reachBottom: function _reachBottom() {
    if (this._state === STATE_LOADING) {
      return;
    }

    this._state = STATE_LOADING;
    this.reachBottomCallbacks.fire();
  },
  _pullDownReady: function _pullDownReady() {
    if (this._state === STATE_READY) {
      return;
    }

    this._state = STATE_READY;

    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_READY_CLASS);

    this._refreshPullDownText();
  },
  _stateReleased: function _stateReleased() {
    if (this._state === STATE_RELEASED) {
      return;
    }

    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);

    this._releaseState();
  },
  _pullDownRefreshing: function _pullDownRefreshing() {
    if (this._state === STATE_REFRESHING) {
      return;
    }

    this._state = STATE_REFRESHING;

    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);

    this._refreshPullDownText();

    this.pullDownCallbacks.fire();
  },
  pullDownEnable: function pullDownEnable(enabled) {
    if (enabled) {
      this._updateDimensions();

      this._setTopPocketOffset();
    }

    this._pullDownEnabled = enabled;
  },
  reachBottomEnable: function reachBottomEnable(enabled) {
    this._reachBottomEnabled = enabled;
  },
  pendingRelease: function pendingRelease() {
    this._state = STATE_READY;
  },
  release: function release() {
    var deferred = new _deferred.Deferred();

    this._updateDimensions();

    clearTimeout(this._releaseTimeout);

    if (this._state === STATE_LOADING) {
      this._state = STATE_RELEASED;
    }

    this._releaseTimeout = setTimeout(function () {
      this._setPullDownOffset(0);

      this._stateReleased();

      this.releaseCallbacks.fire();

      this._updateAction();

      deferred.resolve();
    }.bind(this), PULLDOWN_RELEASE_TIME);
    return deferred.promise();
  },
  dispose: function dispose() {
    clearTimeout(this._pullDownRefreshTimeout);
    clearTimeout(this._releaseTimeout);
    this.callBase();
  }
});

var _default = PullDownNativeScrollViewStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _translator = __webpack_require__(16);

var _index = __webpack_require__(6);

var _uiScrollable = _interopRequireDefault(__webpack_require__(80));

var _load_indicator = _interopRequireDefault(__webpack_require__(44));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS = 'dx-scrollview-pull-down-loading';
var SCROLLVIEW_PULLDOWN_INDICATOR_CLASS = 'dx-scrollview-pull-down-indicator';
var SCROLLVIEW_PULLDOWN_REFRESHING_CLASS = 'dx-scrollview-pull-down-refreshing';
var PULLDOWN_ICON_CLASS = 'dx-icon-pulldown';
var STATE_RELEASED = 0;
var STATE_READY = 1;
var STATE_REFRESHING = 2;
var STATE_TOUCHED = 4;
var STATE_PULLED = 5;

var SwipeDownNativeScrollViewStrategy = _uiScrollable.default.inherit({
  _init: function _init(scrollView) {
    this.callBase(scrollView);
    this._$topPocket = scrollView._$topPocket;
    this._$bottomPocket = scrollView._$bottomPocket;
    this._$pullDown = scrollView._$pullDown;
    this._$scrollViewContent = scrollView.content();

    this._initCallbacks();

    this._location = 0;
  },
  _initCallbacks: function _initCallbacks() {
    this.pullDownCallbacks = (0, _callbacks.default)();
    this.releaseCallbacks = (0, _callbacks.default)();
    this.reachBottomCallbacks = (0, _callbacks.default)();
  },
  render: function render() {
    this.callBase();

    this._renderPullDown();

    this._releaseState();
  },
  _renderPullDown: function _renderPullDown() {
    var $loadContainer = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS);
    var $loadIndicator = new _load_indicator.default((0, _renderer.default)('<div>')).$element();
    this._$icon = (0, _renderer.default)('<div>').addClass(PULLDOWN_ICON_CLASS);

    this._$pullDown.empty().append(this._$icon).append($loadContainer.append($loadIndicator));
  },
  _releaseState: function _releaseState() {
    this._state = STATE_RELEASED;

    this._releasePullDown();

    this._updateDimensions();
  },
  _releasePullDown: function _releasePullDown() {
    this._$pullDown.css({
      opacity: 0
    });
  },
  _updateDimensions: function _updateDimensions() {
    this.callBase();
    this._topPocketSize = this._$topPocket.height();
    this._bottomPocketSize = this._$bottomPocket.height();
    this._scrollOffset = this._$container.height() - this._$content.height();
  },
  _allowedDirections: function _allowedDirections() {
    var allowedDirections = this.callBase();
    allowedDirections.vertical = allowedDirections.vertical || this._pullDownEnabled;
    return allowedDirections;
  },
  handleInit: function handleInit(e) {
    this.callBase(e);

    if (this._state === STATE_RELEASED && this._location === 0) {
      this._startClientY = (0, _index.eventData)(e.originalEvent).y;
      this._state = STATE_TOUCHED;
    }
  },
  handleMove: function handleMove(e) {
    this.callBase(e);
    this._deltaY = (0, _index.eventData)(e.originalEvent).y - this._startClientY;

    if (this._state === STATE_TOUCHED) {
      if (this._pullDownEnabled && this._deltaY > 0) {
        this._state = STATE_PULLED;
      } else {
        this._complete();
      }
    }

    if (this._state === STATE_PULLED) {
      e.preventDefault();

      this._movePullDown();
    }
  },
  _movePullDown: function _movePullDown() {
    var pullDownHeight = this._getPullDownHeight();

    var top = Math.min(pullDownHeight * 3, this._deltaY + this._getPullDownStartPosition());
    var angle = 180 * top / pullDownHeight / 3;

    this._$pullDown.css({
      opacity: 1
    }).toggleClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS, top < pullDownHeight);

    (0, _translator.move)(this._$pullDown, {
      top: top
    });

    this._$icon.css({
      transform: 'rotate(' + angle + 'deg)'
    });
  },
  _isPullDown: function _isPullDown() {
    return this._pullDownEnabled && this._state === STATE_PULLED && this._deltaY >= this._getPullDownHeight() - this._getPullDownStartPosition();
  },
  _getPullDownHeight: function _getPullDownHeight() {
    return Math.round(this._$element.outerHeight() * 0.05);
  },
  _getPullDownStartPosition: function _getPullDownStartPosition() {
    return -Math.round(this._$pullDown.outerHeight() * 1.5);
  },
  handleEnd: function handleEnd() {
    if (this._isPullDown()) {
      this._pullDownRefreshing();
    }

    this._complete();
  },
  handleStop: function handleStop() {
    this._complete();
  },
  _complete: function _complete() {
    if (this._state === STATE_TOUCHED || this._state === STATE_PULLED) {
      this._releaseState();
    }
  },
  handleScroll: function handleScroll(e) {
    this.callBase(e); // TODO: replace with disabled check

    if (this._state === STATE_REFRESHING) {
      return;
    }

    var currentLocation = this.location().top;
    var scrollDelta = this._location - currentLocation;
    this._location = currentLocation;

    if (scrollDelta > 0 && this._isReachBottom()) {
      this._reachBottom();
    } else {
      this._stateReleased();
    }
  },
  _isReachBottom: function _isReachBottom() {
    return this._reachBottomEnabled && this._location <= this._scrollOffset + this._bottomPocketSize;
  },
  _reachBottom: function _reachBottom() {
    this.reachBottomCallbacks.fire();
  },
  _stateReleased: function _stateReleased() {
    if (this._state === STATE_RELEASED) {
      return;
    }

    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS);

    this._releaseState();
  },
  _pullDownRefreshing: function _pullDownRefreshing() {
    this._state = STATE_REFRESHING;

    this._pullDownRefreshHandler();
  },
  _pullDownRefreshHandler: function _pullDownRefreshHandler() {
    this._refreshPullDown();

    this.pullDownCallbacks.fire();
  },
  _refreshPullDown: function _refreshPullDown() {
    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_DOWN_LOADING_CLASS);

    (0, _translator.move)(this._$pullDown, {
      top: this._getPullDownHeight()
    });
  },
  pullDownEnable: function pullDownEnable(enabled) {
    this._$topPocket.toggle(enabled);

    this._pullDownEnabled = enabled;
  },
  reachBottomEnable: function reachBottomEnable(enabled) {
    this._reachBottomEnabled = enabled;
  },
  pendingRelease: function pendingRelease() {
    this._state = STATE_READY;
  },
  release: function release() {
    var deferred = new _deferred.Deferred();

    this._updateDimensions();

    clearTimeout(this._releaseTimeout);
    this._releaseTimeout = setTimeout(function () {
      this._stateReleased();

      this.releaseCallbacks.fire();

      this._updateAction();

      deferred.resolve();
    }.bind(this), 800);
    return deferred.promise();
  },
  dispose: function dispose() {
    clearTimeout(this._pullDownRefreshTimeout);
    clearTimeout(this._releaseTimeout);
    this.callBase();
  }
});

var _default = SwipeDownNativeScrollViewStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 168 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _callbacks = _interopRequireDefault(__webpack_require__(15));

var _iterator = __webpack_require__(4);

var _common = __webpack_require__(3);

var _extend = __webpack_require__(2);

var _uiScrollable = __webpack_require__(109);

var _load_indicator = _interopRequireDefault(__webpack_require__(44));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var math = Math;
var SCROLLVIEW_PULLDOWN_REFRESHING_CLASS = 'dx-scrollview-pull-down-loading';
var SCROLLVIEW_PULLDOWN_READY_CLASS = 'dx-scrollview-pull-down-ready';
var SCROLLVIEW_PULLDOWN_IMAGE_CLASS = 'dx-scrollview-pull-down-image';
var SCROLLVIEW_PULLDOWN_INDICATOR_CLASS = 'dx-scrollview-pull-down-indicator';
var SCROLLVIEW_PULLDOWN_TEXT_CLASS = 'dx-scrollview-pull-down-text';
var SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS = 'dx-scrollview-pull-down-text-visible';
var STATE_RELEASED = 0;
var STATE_READY = 1;
var STATE_REFRESHING = 2;
var STATE_LOADING = 3;

var ScrollViewScroller = _uiScrollable.Scroller.inherit({
  ctor: function ctor() {
    this._topPocketSize = 0;
    this.callBase.apply(this, arguments);

    this._initCallbacks();

    this._releaseState();
  },
  _releaseState: function _releaseState() {
    this._state = STATE_RELEASED;

    this._refreshPullDownText();
  },
  _refreshPullDownText: function _refreshPullDownText() {
    var that = this;
    var pullDownTextItems = [{
      element: this._$pullingDownText,
      visibleState: STATE_RELEASED
    }, {
      element: this._$pulledDownText,
      visibleState: STATE_READY
    }, {
      element: this._$refreshingText,
      visibleState: STATE_REFRESHING
    }];
    (0, _iterator.each)(pullDownTextItems, function (_, item) {
      var action = that._state === item.visibleState ? 'addClass' : 'removeClass';
      item.element[action](SCROLLVIEW_PULLDOWN_VISIBLE_TEXT_CLASS);
    });
  },
  _initCallbacks: function _initCallbacks() {
    this.pullDownCallbacks = (0, _callbacks.default)();
    this.releaseCallbacks = (0, _callbacks.default)();
    this.reachBottomCallbacks = (0, _callbacks.default)();
  },
  _updateBounds: function _updateBounds() {
    var considerPockets = this._direction !== 'horizontal';
    this._topPocketSize = considerPockets ? Math.round(this._$topPocket[this._dimension]()) : 0;
    this._bottomPocketSize = considerPockets ? Math.round(this._$bottomPocket[this._dimension]()) : 0;
    this.callBase();
    this._bottomBound = this._minOffset + this._bottomPocketSize;
  },
  _updateScrollbar: function _updateScrollbar() {
    this._scrollbar.option({
      containerSize: this._containerSize(),
      contentSize: this._contentSize() - this._topPocketSize - this._bottomPocketSize,
      scaleRatio: this._getScaleRatio()
    });
  },
  _moveContent: function _moveContent() {
    this.callBase();

    if (this._isPullDown()) {
      this._pullDownReady();
    } else if (this._isReachBottom()) {
      this._reachBottomReady();
    } else if (this._state !== STATE_RELEASED) {
      this._stateReleased();
    }
  },
  _moveScrollbar: function _moveScrollbar() {
    this._scrollbar.moveTo(this._topPocketSize + this._location);
  },
  _isPullDown: function _isPullDown() {
    return this._pullDownEnabled && this._location >= 0;
  },
  _isReachBottom: function _isReachBottom() {
    return this._reachBottomEnabled && this._location - this._bottomBound <= 0.5; // T858013
  },
  _scrollComplete: function _scrollComplete() {
    if (this._inBounds() && this._state === STATE_READY) {
      this._pullDownRefreshing();
    } else if (this._inBounds() && this._state === STATE_LOADING) {
      this._reachBottomLoading();
    } else {
      this.callBase();
    }
  },
  _reachBottomReady: function _reachBottomReady() {
    if (this._state === STATE_LOADING) {
      return;
    }

    this._state = STATE_LOADING;
    this._minOffset = this._getMinOffset();
  },
  _getMaxOffset: function _getMaxOffset() {
    return -this._topPocketSize;
  },
  _getMinOffset: function _getMinOffset() {
    return math.min(this.callBase(), -this._topPocketSize);
  },
  _reachBottomLoading: function _reachBottomLoading() {
    this.reachBottomCallbacks.fire();
  },
  _pullDownReady: function _pullDownReady() {
    if (this._state === STATE_READY) {
      return;
    }

    this._state = STATE_READY;
    this._maxOffset = 0;

    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_READY_CLASS);

    this._refreshPullDownText();
  },
  _stateReleased: function _stateReleased() {
    if (this._state === STATE_RELEASED) {
      return;
    }

    this._releaseState();

    this._updateBounds();

    this._$pullDown.removeClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);

    this.releaseCallbacks.fire();
  },
  _pullDownRefreshing: function _pullDownRefreshing() {
    if (this._state === STATE_REFRESHING) {
      return;
    }

    this._state = STATE_REFRESHING;

    this._$pullDown.addClass(SCROLLVIEW_PULLDOWN_REFRESHING_CLASS).removeClass(SCROLLVIEW_PULLDOWN_READY_CLASS);

    this._refreshPullDownText();

    this.pullDownCallbacks.fire();
  },
  _releaseHandler: function _releaseHandler() {
    if (this._state === STATE_RELEASED) {
      this._moveToBounds();
    }

    this._update();

    if (this._releaseTask) {
      this._releaseTask.abort();
    }

    this._releaseTask = (0, _common.executeAsync)(this._release.bind(this));
    return this._releaseTask.promise;
  },
  _release: function _release() {
    this._stateReleased();

    this._scrollComplete();
  },
  _reachBottomEnablingHandler: function _reachBottomEnablingHandler(enabled) {
    if (this._reachBottomEnabled === enabled) {
      return;
    }

    this._reachBottomEnabled = enabled;

    this._updateBounds();
  },
  _pullDownEnablingHandler: function _pullDownEnablingHandler(enabled) {
    if (this._pullDownEnabled === enabled) {
      return;
    }

    this._pullDownEnabled = enabled;

    this._considerTopPocketChange();

    this._updateHandler();
  },
  _considerTopPocketChange: function _considerTopPocketChange() {
    this._location -= this._$topPocket.height() || -this._topPocketSize;
    this._maxOffset = 0;

    this._move();
  },
  _pendingReleaseHandler: function _pendingReleaseHandler() {
    this._state = STATE_READY;
  },
  dispose: function dispose() {
    if (this._releaseTask) {
      this._releaseTask.abort();
    }

    this.callBase();
  }
});

var SimulatedScrollViewStrategy = _uiScrollable.SimulatedStrategy.inherit({
  _init: function _init(scrollView) {
    this.callBase(scrollView);
    this._$pullDown = scrollView._$pullDown;
    this._$topPocket = scrollView._$topPocket;
    this._$bottomPocket = scrollView._$bottomPocket;

    this._initCallbacks();
  },
  _initCallbacks: function _initCallbacks() {
    this.pullDownCallbacks = (0, _callbacks.default)();
    this.releaseCallbacks = (0, _callbacks.default)();
    this.reachBottomCallbacks = (0, _callbacks.default)();
  },
  render: function render() {
    this._renderPullDown();

    this.callBase();
  },
  _renderPullDown: function _renderPullDown() {
    var $image = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_PULLDOWN_IMAGE_CLASS);
    var $loadContainer = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_PULLDOWN_INDICATOR_CLASS);
    var $loadIndicator = new _load_indicator.default((0, _renderer.default)('<div>')).$element();
    var $text = this._$pullDownText = (0, _renderer.default)('<div>').addClass(SCROLLVIEW_PULLDOWN_TEXT_CLASS);
    this._$pullingDownText = (0, _renderer.default)('<div>').text(this.option('pullingDownText')).appendTo($text);
    this._$pulledDownText = (0, _renderer.default)('<div>').text(this.option('pulledDownText')).appendTo($text);
    this._$refreshingText = (0, _renderer.default)('<div>').text(this.option('refreshingText')).appendTo($text);

    this._$pullDown.empty().append($image).append($loadContainer.append($loadIndicator)).append($text);
  },
  pullDownEnable: function pullDownEnable(enabled) {
    this._eventHandler('pullDownEnabling', enabled);
  },
  reachBottomEnable: function reachBottomEnable(enabled) {
    this._eventHandler('reachBottomEnabling', enabled);
  },
  _createScroller: function _createScroller(direction) {
    var that = this;
    var scroller = that._scrollers[direction] = new ScrollViewScroller(that._scrollerOptions(direction));
    scroller.pullDownCallbacks.add(function () {
      that.pullDownCallbacks.fire();
    });
    scroller.releaseCallbacks.add(function () {
      that.releaseCallbacks.fire();
    });
    scroller.reachBottomCallbacks.add(function () {
      that.reachBottomCallbacks.fire();
    });
  },
  _scrollerOptions: function _scrollerOptions(direction) {
    return (0, _extend.extend)(this.callBase(direction), {
      $topPocket: this._$topPocket,
      $bottomPocket: this._$bottomPocket,
      $pullDown: this._$pullDown,
      $pullDownText: this._$pullDownText,
      $pullingDownText: this._$pullingDownText,
      $pulledDownText: this._$pulledDownText,
      $refreshingText: this._$refreshingText
    });
  },
  pendingRelease: function pendingRelease() {
    this._eventHandler('pendingRelease');
  },
  release: function release() {
    return this._eventHandler('release').done(this._updateAction);
  },
  location: function location() {
    var location = this.callBase();
    location.top += this._$topPocket.height();
    return location;
  },
  dispose: function dispose() {
    (0, _iterator.each)(this._scrollers, function () {
      this.dispose();
    });
    this.callBase();
  }
});

var _default = SimulatedScrollViewStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _support = __webpack_require__(34);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _extend = __webpack_require__(2);

var _element = __webpack_require__(20);

var _window = __webpack_require__(7);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _dom_component = _interopRequireDefault(__webpack_require__(62));

var _selectors = __webpack_require__(35);

var _index = __webpack_require__(6);

var _uiEventsEmitterGesture = _interopRequireDefault(__webpack_require__(170));

var _uiScrollable = __webpack_require__(109);

var _uiScrollable2 = _interopRequireDefault(__webpack_require__(80));

var _uiScrollable3 = __webpack_require__(111);

var _deferred = __webpack_require__(9);

var _scroll_rtl_behavior = _interopRequireDefault(__webpack_require__(108));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SCROLLABLE = 'dxScrollable';
var SCROLLABLE_STRATEGY = 'dxScrollableStrategy';
var SCROLLABLE_CLASS = 'dx-scrollable';
var SCROLLABLE_DISABLED_CLASS = 'dx-scrollable-disabled';
var SCROLLABLE_CONTAINER_CLASS = 'dx-scrollable-container';
var SCROLLABLE_WRAPPER_CLASS = 'dx-scrollable-wrapper';
var SCROLLABLE_CONTENT_CLASS = 'dx-scrollable-content';
var VERTICAL = 'vertical';
var HORIZONTAL = 'horizontal';
var BOTH = 'both';

var Scrollable = _dom_component.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      disabled: false,
      onScroll: null,
      direction: VERTICAL,
      showScrollbar: 'onScroll',
      useNative: true,
      bounceEnabled: true,
      scrollByContent: true,
      scrollByThumb: false,
      onUpdated: null,
      onStart: null,
      onEnd: null,
      onBounce: null,
      useSimulatedScrollbar: false,
      useKeyboard: true,
      inertiaEnabled: true,
      updateManually: false
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat((0, _uiScrollable3.deviceDependentOptions)(), [{
      device: function device() {
        return _support.nativeScrolling && _devices.default.real().platform === 'android' && !_browser.default.mozilla;
      },
      options: {
        useSimulatedScrollbar: true
      }
    }]);
  },
  _initOptions: function _initOptions(options) {
    this.callBase(options);

    if (!('useSimulatedScrollbar' in options)) {
      this._setUseSimulatedScrollbar();
    }
  },
  _setUseSimulatedScrollbar: function _setUseSimulatedScrollbar() {
    if (!this.initialOption('useSimulatedScrollbar')) {
      this.option('useSimulatedScrollbar', !this.option('useNative'));
    }
  },
  _init: function _init() {
    this.callBase();

    this._initScrollableMarkup();

    this._locked = false;
  },
  _visibilityChanged: function _visibilityChanged(visible) {
    if (visible) {
      this.update();

      this._updateRtlPosition();

      this._savedScrollOffset && this.scrollTo(this._savedScrollOffset);
      delete this._savedScrollOffset;
    } else {
      this._savedScrollOffset = this.scrollOffset();
    }
  },
  _initScrollableMarkup: function _initScrollableMarkup() {
    var $element = this.$element().addClass(SCROLLABLE_CLASS);
    var $container = this._$container = (0, _renderer.default)('<div>').addClass(SCROLLABLE_CONTAINER_CLASS);
    var $wrapper = this._$wrapper = (0, _renderer.default)('<div>').addClass(SCROLLABLE_WRAPPER_CLASS);
    var $content = this._$content = (0, _renderer.default)('<div>').addClass(SCROLLABLE_CONTENT_CLASS);

    if (_dom_adapter.default.hasDocumentProperty('onbeforeactivate') && _browser.default.msie && _browser.default.version < 12) {
      _events_engine.default.on($element, (0, _index.addNamespace)('beforeactivate', SCROLLABLE), function (e) {
        if (!(0, _renderer.default)(e.target).is(_selectors.focusable)) {
          e.preventDefault();
        }
      });
    }

    $content.append($element.contents()).appendTo($container);
    $container.appendTo($wrapper);
    $wrapper.appendTo($element);
  },
  _dimensionChanged: function _dimensionChanged() {
    this.update();

    this._updateRtlPosition();
  },
  _initMarkup: function _initMarkup() {
    this.callBase();

    this._renderDirection();
  },
  _render: function _render() {
    this._renderStrategy();

    this._attachEventHandlers();

    this._renderDisabledState();

    this._createActions();

    this.update();
    this.callBase();

    this._updateRtlPosition(true);
  },
  _updateRtlPosition: function _updateRtlPosition(needInitializeRtlConfig) {
    this._strategy.updateRtlPosition(needInitializeRtlConfig);
  },
  _getMaxOffset: function _getMaxOffset() {
    var _$$get = (0, _renderer.default)(this.container()).get(0),
        scrollWidth = _$$get.scrollWidth,
        clientWidth = _$$get.clientWidth,
        scrollHeight = _$$get.scrollHeight,
        clientHeight = _$$get.clientHeight;

    return {
      left: scrollWidth - clientWidth,
      top: scrollHeight - clientHeight
    };
  },
  _attachEventHandlers: function _attachEventHandlers() {
    var strategy = this._strategy;
    var initEventData = {
      getDirection: strategy.getDirection.bind(strategy),
      validate: this._validate.bind(this),
      isNative: this.option('useNative'),
      scrollTarget: this._$container
    };

    _events_engine.default.off(this._$wrapper, '.' + SCROLLABLE);

    _events_engine.default.on(this._$wrapper, (0, _index.addNamespace)(_uiEventsEmitterGesture.default.init, SCROLLABLE), initEventData, this._initHandler.bind(this));

    _events_engine.default.on(this._$wrapper, (0, _index.addNamespace)(_uiEventsEmitterGesture.default.start, SCROLLABLE), strategy.handleStart.bind(strategy));

    _events_engine.default.on(this._$wrapper, (0, _index.addNamespace)(_uiEventsEmitterGesture.default.move, SCROLLABLE), strategy.handleMove.bind(strategy));

    _events_engine.default.on(this._$wrapper, (0, _index.addNamespace)(_uiEventsEmitterGesture.default.end, SCROLLABLE), strategy.handleEnd.bind(strategy));

    _events_engine.default.on(this._$wrapper, (0, _index.addNamespace)(_uiEventsEmitterGesture.default.cancel, SCROLLABLE), strategy.handleCancel.bind(strategy));

    _events_engine.default.on(this._$wrapper, (0, _index.addNamespace)(_uiEventsEmitterGesture.default.stop, SCROLLABLE), strategy.handleStop.bind(strategy));

    _events_engine.default.off(this._$container, '.' + SCROLLABLE);

    _events_engine.default.on(this._$container, (0, _index.addNamespace)('scroll', SCROLLABLE), strategy.handleScroll.bind(strategy));
  },
  _validate: function _validate(e) {
    if (this._isLocked()) {
      return false;
    }

    this._updateIfNeed();

    return this._strategy.validate(e);
  },
  _initHandler: function _initHandler() {
    var strategy = this._strategy;
    strategy.handleInit.apply(strategy, arguments);
  },
  _renderDisabledState: function _renderDisabledState() {
    this.$element().toggleClass(SCROLLABLE_DISABLED_CLASS, this.option('disabled'));

    if (this.option('disabled')) {
      this._lock();
    } else {
      this._unlock();
    }
  },
  _renderDirection: function _renderDirection() {
    this.$element().removeClass('dx-scrollable-' + HORIZONTAL).removeClass('dx-scrollable-' + VERTICAL).removeClass('dx-scrollable-' + BOTH).addClass('dx-scrollable-' + this.option('direction'));
  },
  _renderStrategy: function _renderStrategy() {
    this._createStrategy();

    this._strategy.render();

    this.$element().data(SCROLLABLE_STRATEGY, this._strategy);
  },
  _createStrategy: function _createStrategy() {
    this._strategy = this.option('useNative') ? new _uiScrollable2.default(this) : new _uiScrollable.SimulatedStrategy(this);
  },
  _createActions: function _createActions() {
    this._strategy && this._strategy.createActions();
  },
  _clean: function _clean() {
    this._strategy && this._strategy.dispose();
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'onStart':
      case 'onEnd':
      case 'onUpdated':
      case 'onScroll':
      case 'onBounce':
        this._createActions();

        break;

      case 'direction':
        this._resetInactiveDirection();

        this._invalidate();

        break;

      case 'useNative':
        this._setUseSimulatedScrollbar();

        this._invalidate();

        break;

      case 'inertiaEnabled':
      case 'scrollByContent':
      case 'scrollByThumb':
      case 'bounceEnabled':
      case 'useKeyboard':
      case 'showScrollbar':
      case 'useSimulatedScrollbar':
        this._invalidate();

        break;

      case 'disabled':
        this._renderDisabledState();

        this._strategy && this._strategy.disabledChanged();
        break;

      case 'updateManually':
        break;

      case 'width':
        this.callBase(args);

        this._updateRtlPosition();

        break;

      default:
        this.callBase(args);
    }
  },
  _resetInactiveDirection: function _resetInactiveDirection() {
    var inactiveProp = this._getInactiveProp();

    if (!inactiveProp || !(0, _window.hasWindow)()) {
      return;
    }

    var scrollOffset = this.scrollOffset();
    scrollOffset[inactiveProp] = 0;
    this.scrollTo(scrollOffset);
  },
  _getInactiveProp: function _getInactiveProp() {
    var direction = this.option('direction');

    if (direction === VERTICAL) {
      return 'left';
    }

    if (direction === HORIZONTAL) {
      return 'top';
    }
  },
  _location: function _location() {
    return this._strategy.location();
  },
  _normalizeLocation: function _normalizeLocation(location) {
    if ((0, _type.isPlainObject)(location)) {
      var left = (0, _common.ensureDefined)(location.left, location.x);
      var top = (0, _common.ensureDefined)(location.top, location.y);
      return {
        left: (0, _type.isDefined)(left) ? -left : undefined,
        top: (0, _type.isDefined)(top) ? -top : undefined
      };
    } else {
      var direction = this.option('direction');
      return {
        left: direction !== VERTICAL ? -location : undefined,
        top: direction !== HORIZONTAL ? -location : undefined
      };
    }
  },
  _isLocked: function _isLocked() {
    return this._locked;
  },
  _lock: function _lock() {
    this._locked = true;
  },
  _unlock: function _unlock() {
    if (!this.option('disabled')) {
      this._locked = false;
    }
  },
  _isDirection: function _isDirection(direction) {
    var current = this.option('direction');

    if (direction === VERTICAL) {
      return current !== HORIZONTAL;
    }

    if (direction === HORIZONTAL) {
      return current !== VERTICAL;
    }

    return current === direction;
  },
  _updateAllowedDirection: function _updateAllowedDirection() {
    var allowedDirections = this._strategy._allowedDirections();

    if (this._isDirection(BOTH) && allowedDirections.vertical && allowedDirections.horizontal) {
      this._allowedDirectionValue = BOTH;
    } else if (this._isDirection(HORIZONTAL) && allowedDirections.horizontal) {
      this._allowedDirectionValue = HORIZONTAL;
    } else if (this._isDirection(VERTICAL) && allowedDirections.vertical) {
      this._allowedDirectionValue = VERTICAL;
    } else {
      this._allowedDirectionValue = null;
    }
  },
  _allowedDirection: function _allowedDirection() {
    return this._allowedDirectionValue;
  },
  $content: function $content() {
    return this._$content;
  },
  content: function content() {
    return (0, _element.getPublicElement)(this._$content);
  },
  container: function container() {
    return (0, _element.getPublicElement)(this._$container);
  },
  scrollOffset: function scrollOffset() {
    return this._strategy._getScrollOffset();
  },
  _isRtlNativeStrategy: function _isRtlNativeStrategy() {
    var _this$option = this.option(),
        useNative = _this$option.useNative,
        rtlEnabled = _this$option.rtlEnabled;

    return useNative && rtlEnabled;
  },
  scrollTop: function scrollTop() {
    return this.scrollOffset().top;
  },
  scrollLeft: function scrollLeft() {
    return this.scrollOffset().left;
  },
  clientHeight: function clientHeight() {
    return this._$container.height();
  },
  scrollHeight: function scrollHeight() {
    return this.$content().outerHeight();
  },
  clientWidth: function clientWidth() {
    return this._$container.width();
  },
  scrollWidth: function scrollWidth() {
    return this.$content().outerWidth();
  },
  update: function update() {
    if (!this._strategy) {
      return;
    }

    return (0, _deferred.when)(this._strategy.update()).done(function () {
      this._updateAllowedDirection();
    }.bind(this));
  },
  scrollBy: function scrollBy(distance) {
    distance = this._normalizeLocation(distance);

    if (!distance.top && !distance.left) {
      return;
    }

    this._updateIfNeed();

    this._strategy.scrollBy(distance);
  },
  scrollTo: function scrollTo(targetLocation) {
    targetLocation = this._normalizeLocation(targetLocation);

    this._updateIfNeed();

    var location = this._location();

    if (!this.option('useNative')) {
      targetLocation = this._strategy._applyScaleRatio(targetLocation);
      location = this._strategy._applyScaleRatio(location);
    }

    if (this._isScrollInverted()) {
      location.left = this._getScrollSign() * location.left - this._getMaxOffset().left;
    }

    var distance = this._normalizeLocation({
      left: location.left - (0, _common.ensureDefined)(targetLocation.left, location.left),
      top: location.top - (0, _common.ensureDefined)(targetLocation.top, location.top)
    });

    if (!distance.top && !distance.left) {
      return;
    }

    this._strategy.scrollBy(distance);
  },
  _getScrollSign: function _getScrollSign() {
    return (0, _scroll_rtl_behavior.default)().positive ? -1 : 1;
  },
  _isScrollInverted: function _isScrollInverted() {
    var _this$option2 = this.option(),
        rtlEnabled = _this$option2.rtlEnabled,
        useNative = _this$option2.useNative;

    var _getScrollRtlBehavior = (0, _scroll_rtl_behavior.default)(),
        decreasing = _getScrollRtlBehavior.decreasing,
        positive = _getScrollRtlBehavior.positive;

    return useNative && rtlEnabled && decreasing ^ positive;
  },
  scrollToElement: function scrollToElement(element, offset) {
    var $element = (0, _renderer.default)(element);
    var elementInsideContent = this.$content().find(element).length;
    var elementIsInsideContent = $element.parents('.' + SCROLLABLE_CLASS).length - $element.parents('.' + SCROLLABLE_CONTENT_CLASS).length === 0;

    if (!elementInsideContent || !elementIsInsideContent) {
      return;
    }

    var scrollPosition = {
      top: 0,
      left: 0
    };
    var direction = this.option('direction');

    if (direction !== VERTICAL) {
      scrollPosition.left = this.getScrollElementPosition($element, HORIZONTAL, offset);
    }

    if (direction !== HORIZONTAL) {
      scrollPosition.top = this.getScrollElementPosition($element, VERTICAL, offset);
    }

    this.scrollTo(scrollPosition);
  },
  scrollToElementTopLeft: function scrollToElementTopLeft(element) {
    var $element = (0, _renderer.default)(element);
    var elementInsideContent = this.$content().find(element).length;
    var elementIsInsideContent = $element.parents('.' + SCROLLABLE_CLASS).length - $element.parents('.' + SCROLLABLE_CONTENT_CLASS).length === 0;

    if (!elementInsideContent || !elementIsInsideContent) {
      return;
    }

    var scrollPosition = {
      top: 0,
      left: 0
    };
    var direction = this.option('direction');

    if (direction !== VERTICAL) {
      var leftPosition = this._elementPositionRelativeToContent($element, 'left');

      scrollPosition.left = this.option('rtlEnabled') === true ? leftPosition + $element.outerWidth() - this.clientWidth() : leftPosition;

      if (this._isRtlNativeStrategy()) {
        var containerElement = (0, _renderer.default)(this.container()).get(0);
        var scrollbarWidth = containerElement.offsetWidth - containerElement.clientWidth;
        scrollPosition.left += scrollbarWidth;
      }
    }

    if (direction !== HORIZONTAL) {
      scrollPosition.top = this._elementPositionRelativeToContent($element, 'top');
    }

    this.scrollTo(scrollPosition);
  },
  getScrollElementPosition: function getScrollElementPosition($element, direction, offset) {
    offset = offset || {};
    var isVertical = direction === VERTICAL;
    var startOffset = (isVertical ? offset.top : offset.left) || 0;
    var endOffset = (isVertical ? offset.bottom : offset.right) || 0;

    var elementPositionRelativeToContent = this._elementPositionRelativeToContent($element, isVertical ? 'top' : 'left');

    var elementPosition = elementPositionRelativeToContent;
    var elementSize = $element[isVertical ? 'outerHeight' : 'outerWidth']();
    var scrollLocation = isVertical ? this.scrollTop() : this.scrollLeft();
    var clientSize = (0, _renderer.default)(this.container()).get(0)[isVertical ? 'clientHeight' : 'clientWidth'];
    var startDistance = scrollLocation - elementPosition + startOffset;
    var endDistance = scrollLocation - elementPosition - elementSize + clientSize - endOffset;

    if (startDistance <= 0 && endDistance >= 0) {
      return scrollLocation;
    }

    return scrollLocation - (Math.abs(startDistance) > Math.abs(endDistance) ? endDistance : startDistance);
  },
  _elementPositionRelativeToContent: function _elementPositionRelativeToContent($element, prop) {
    var result = 0;

    while (this._hasScrollContent($element)) {
      result += $element.position()[prop];
      $element = $element.offsetParent();
    }

    return result;
  },
  _hasScrollContent: function _hasScrollContent($element) {
    var $content = this.$content();
    return $element.closest($content).length && !$element.is($content);
  },
  _updateIfNeed: function _updateIfNeed() {
    if (!this.option('updateManually')) {
      this.update();
    }
  },
  _useTemplates: function _useTemplates() {
    return false;
  }
});

(0, _component_registrator.default)(SCROLLABLE, Scrollable);
var _default = Scrollable;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _class = _interopRequireDefault(__webpack_require__(11));

var _index = __webpack_require__(6);

var _emitter = _interopRequireDefault(__webpack_require__(77));

var _emitter_registrator = _interopRequireDefault(__webpack_require__(39));

var _frame = __webpack_require__(55);

var _devices = _interopRequireDefault(__webpack_require__(10));

var _version = __webpack_require__(76);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var abstract = _class.default.abstract;

var realDevice = _devices.default.real();

var SCROLL_INIT_EVENT = 'dxscrollinit';
var SCROLL_START_EVENT = 'dxscrollstart';
var SCROLL_MOVE_EVENT = 'dxscroll';
var SCROLL_END_EVENT = 'dxscrollend';
var SCROLL_STOP_EVENT = 'dxscrollstop';
var SCROLL_CANCEL_EVENT = 'dxscrollcancel';

var Locker = _class.default.inherit(function () {
  var NAMESPACED_SCROLL_EVENT = (0, _index.addNamespace)('scroll', 'dxScrollEmitter');
  return {
    ctor: function ctor(element) {
      this._element = element;
      this._locked = false;
      var that = this;

      this._proxiedScroll = function (e) {
        that._scroll(e);
      };

      _events_engine.default.on(this._element, NAMESPACED_SCROLL_EVENT, this._proxiedScroll);
    },
    _scroll: abstract,
    check: function check(e, callback) {
      if (this._locked) {
        callback();
      }
    },
    dispose: function dispose() {
      _events_engine.default.off(this._element, NAMESPACED_SCROLL_EVENT, this._proxiedScroll);
    }
  };
}());

var TimeoutLocker = Locker.inherit(function () {
  return {
    ctor: function ctor(element, timeout) {
      this.callBase(element);
      this._timeout = timeout;
    },
    _scroll: function _scroll() {
      this._prepare();

      this._forget();
    },
    _prepare: function _prepare() {
      if (this._timer) {
        this._clearTimer();
      }

      this._locked = true;
    },
    _clearTimer: function _clearTimer() {
      clearTimeout(this._timer);
      this._locked = false;
      this._timer = null;
    },
    _forget: function _forget() {
      var that = this;
      this._timer = setTimeout(function () {
        that._clearTimer();
      }, this._timeout);
    },
    dispose: function dispose() {
      this.callBase();

      this._clearTimer();
    }
  };
}());
var WheelLocker = TimeoutLocker.inherit(function () {
  var WHEEL_UNLOCK_TIMEOUT = 400;
  return {
    ctor: function ctor(element) {
      this.callBase(element, WHEEL_UNLOCK_TIMEOUT);
      this._lastWheelDirection = null;
    },
    check: function check(e, callback) {
      this._checkDirectionChanged(e);

      this.callBase(e, callback);
    },
    _checkDirectionChanged: function _checkDirectionChanged(e) {
      if (!(0, _index.isDxMouseWheelEvent)(e)) {
        this._lastWheelDirection = null;
        return;
      }

      var direction = e.shiftKey || false;
      var directionChange = this._lastWheelDirection !== null && direction !== this._lastWheelDirection;
      this._lastWheelDirection = direction;
      this._locked = this._locked && !directionChange;
    }
  };
}());
var PointerLocker = TimeoutLocker.inherit(function () {
  var POINTER_UNLOCK_TIMEOUT = 400;
  return {
    ctor: function ctor(element) {
      this.callBase(element, POINTER_UNLOCK_TIMEOUT);
    }
  };
}());

(function () {
  var ios8_greater = realDevice.ios && (0, _version.compare)(realDevice.version, [8]) >= 0;
  var android5_greater = realDevice.android && (0, _version.compare)(realDevice.version, [5]) >= 0;

  if (!(ios8_greater || android5_greater)) {
    return;
  }

  PointerLocker = Locker.inherit(function () {
    return {
      _scroll: function _scroll() {
        this._locked = true;
        var that = this;
        (0, _frame.cancelAnimationFrame)(this._scrollFrame);
        this._scrollFrame = (0, _frame.requestAnimationFrame)(function () {
          that._locked = false;
        });
      },
      check: function check(e, callback) {
        (0, _frame.cancelAnimationFrame)(this._scrollFrame);
        (0, _frame.cancelAnimationFrame)(this._checkFrame);
        var that = this;
        var callBase = this.callBase;
        this._checkFrame = (0, _frame.requestAnimationFrame)(function () {
          callBase.call(that, e, callback);
          that._locked = false;
        });
      },
      dispose: function dispose() {
        this.callBase();
        (0, _frame.cancelAnimationFrame)(this._scrollFrame);
        (0, _frame.cancelAnimationFrame)(this._checkFrame);
      }
    };
  }());
})();

var ScrollEmitter = _emitter.default.inherit(function () {
  var INERTIA_TIMEOUT = 100;
  var VELOCITY_CALC_TIMEOUT = 200;
  var FRAME_DURATION = Math.round(1000 / 60);
  return {
    ctor: function ctor(element) {
      this.callBase.apply(this, arguments);
      this.direction = 'both';
      this._pointerLocker = new PointerLocker(element);
      this._wheelLocker = new WheelLocker(element);
    },
    validate: function validate() {
      return true;
    },
    configure: function configure(data) {
      if (data.scrollTarget) {
        this._pointerLocker.dispose();

        this._wheelLocker.dispose();

        this._pointerLocker = new PointerLocker(data.scrollTarget);
        this._wheelLocker = new WheelLocker(data.scrollTarget);
      }

      this.callBase(data);
    },
    _init: function _init(e) {
      this._wheelLocker.check(e, function () {
        if ((0, _index.isDxMouseWheelEvent)(e)) {
          this._accept(e);
        }
      }.bind(this));

      this._pointerLocker.check(e, function () {
        var skipCheck = this.isNative && (0, _index.isMouseEvent)(e);

        if (!(0, _index.isDxMouseWheelEvent)(e) && !skipCheck) {
          this._accept(e);
        }
      }.bind(this));

      this._fireEvent(SCROLL_INIT_EVENT, e);

      this._prevEventData = (0, _index.eventData)(e);
    },
    move: function move(e) {
      this.callBase.apply(this, arguments);
      e.isScrollingEvent = this.isNative || e.isScrollingEvent;
    },
    _start: function _start(e) {
      this._savedEventData = (0, _index.eventData)(e);

      this._fireEvent(SCROLL_START_EVENT, e);

      this._prevEventData = (0, _index.eventData)(e);
    },
    _move: function _move(e) {
      var currentEventData = (0, _index.eventData)(e);

      this._fireEvent(SCROLL_MOVE_EVENT, e, {
        delta: (0, _index.eventDelta)(this._prevEventData, currentEventData)
      });

      var delta = (0, _index.eventDelta)(this._savedEventData, currentEventData);

      if (delta.time > VELOCITY_CALC_TIMEOUT) {
        this._savedEventData = this._prevEventData;
      }

      this._prevEventData = (0, _index.eventData)(e);
    },
    _end: function _end(e) {
      var endEventDelta = (0, _index.eventDelta)(this._prevEventData, (0, _index.eventData)(e));
      var velocity = {
        x: 0,
        y: 0
      };

      if (!(0, _index.isDxMouseWheelEvent)(e) && endEventDelta.time < INERTIA_TIMEOUT) {
        var delta = (0, _index.eventDelta)(this._savedEventData, this._prevEventData);
        var velocityMultiplier = FRAME_DURATION / delta.time;
        velocity = {
          x: delta.x * velocityMultiplier,
          y: delta.y * velocityMultiplier
        };
      }

      this._fireEvent(SCROLL_END_EVENT, e, {
        velocity: velocity
      });
    },
    _stop: function _stop(e) {
      this._fireEvent(SCROLL_STOP_EVENT, e);
    },
    cancel: function cancel(e) {
      this.callBase.apply(this, arguments);

      this._fireEvent(SCROLL_CANCEL_EVENT, e);
    },
    dispose: function dispose() {
      this.callBase.apply(this, arguments);

      this._pointerLocker.dispose();

      this._wheelLocker.dispose();
    },
    _clearSelection: function _clearSelection() {
      if (this.isNative) {
        return;
      }

      return this.callBase.apply(this, arguments);
    },
    _toggleGestureCover: function _toggleGestureCover() {
      if (this.isNative) {
        return;
      }

      return this.callBase.apply(this, arguments);
    }
  };
}());

(0, _emitter_registrator.default)({
  emitter: ScrollEmitter,
  events: [SCROLL_INIT_EVENT, SCROLL_START_EVENT, SCROLL_MOVE_EVENT, SCROLL_END_EVENT, SCROLL_STOP_EVENT, SCROLL_CANCEL_EVENT]
});
var _default = {
  init: SCROLL_INIT_EVENT,
  start: SCROLL_START_EVENT,
  move: SCROLL_MOVE_EVENT,
  end: SCROLL_END_EVENT,
  stop: SCROLL_STOP_EVENT,
  cancel: SCROLL_CANCEL_EVENT
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _common = __webpack_require__(3);

var _message = _interopRequireDefault(__webpack_require__(17));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _extend = __webpack_require__(2);

var _load_indicator = _interopRequireDefault(__webpack_require__(44));

var _ui = _interopRequireDefault(__webpack_require__(65));

var _deferred = __webpack_require__(9);

var _themes = __webpack_require__(31);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// STYLE loadPanel
var LOADPANEL_CLASS = 'dx-loadpanel';
var LOADPANEL_WRAPPER_CLASS = 'dx-loadpanel-wrapper';
var LOADPANEL_INDICATOR_CLASS = 'dx-loadpanel-indicator';
var LOADPANEL_MESSAGE_CLASS = 'dx-loadpanel-message';
var LOADPANEL_CONTENT_CLASS = 'dx-loadpanel-content';
var LOADPANEL_CONTENT_WRAPPER_CLASS = 'dx-loadpanel-content-wrapper';
var LOADPANEL_PANE_HIDDEN_CLASS = 'dx-loadpanel-pane-hidden';

var LoadPanel = _ui.default.inherit({
  _supportedKeys: function _supportedKeys() {
    return (0, _extend.extend)(this.callBase(), {
      escape: _common.noop
    });
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      message: _message.default.format('Loading'),
      width: 222,
      height: 90,
      animation: null,

      /**
      * @name dxLoadPanelOptions.disabled
      * @hidden
      */
      showIndicator: true,
      indicatorSrc: '',
      showPane: true,
      delay: 0,
      templatesRenderAsynchronously: false,
      hideTopOverlayHandler: null,

      /**
      * @name dxLoadPanelOptions.resizeEnabled
      * @hidden
      */
      resizeEnabled: false,
      focusStateEnabled: false
      /**
      * @name dxLoadPanelOptions.dragEnabled
      * @hidden
      */

      /**
      * @name dxLoadPanelOptions.contentTemplate
      * @hidden
      */

      /**
      * @name dxLoadPanelOptions.accessKey
      * @hidden
      */

      /**
      * @name dxLoadPanelOptions.tabIndex
      * @hidden
      */

    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat([{
      device: {
        platform: 'generic'
      },
      options: {
        shadingColor: 'transparent'
      }
    }, {
      device: function device() {
        return (0, _themes.isMaterial)();
      },
      options: {
        message: '',
        width: 60,
        height: 60,
        maxHeight: 60,
        maxWidth: 60
      }
    }]);
  },
  _init: function _init() {
    this.callBase.apply(this, arguments);
  },
  _render: function _render() {
    this.callBase();
    this.$element().addClass(LOADPANEL_CLASS);
    this.$wrapper().addClass(LOADPANEL_WRAPPER_CLASS);
  },
  _renderContentImpl: function _renderContentImpl() {
    this.callBase();
    this.$content().addClass(LOADPANEL_CONTENT_CLASS);
    this._$loadPanelContentWrapper = (0, _renderer.default)('<div>').addClass(LOADPANEL_CONTENT_WRAPPER_CLASS);

    this._$loadPanelContentWrapper.appendTo(this.$content());

    this._togglePaneVisible();

    this._cleanPreviousContent();

    this._renderLoadIndicator();

    this._renderMessage();
  },
  _show: function _show() {
    var delay = this.option('delay');

    if (!delay) {
      return this.callBase();
    }

    var deferred = new _deferred.Deferred();
    var callBase = this.callBase.bind(this);

    this._clearShowTimeout();

    this._showTimeout = setTimeout(function () {
      callBase().done(function () {
        deferred.resolve();
      });
    }, delay);
    return deferred.promise();
  },
  _hide: function _hide() {
    this._clearShowTimeout();

    return this.callBase();
  },
  _clearShowTimeout: function _clearShowTimeout() {
    clearTimeout(this._showTimeout);
  },
  _renderMessage: function _renderMessage() {
    if (!this._$loadPanelContentWrapper) {
      return;
    }

    var message = this.option('message');
    if (!message) return;
    var $message = (0, _renderer.default)('<div>').addClass(LOADPANEL_MESSAGE_CLASS).text(message);

    this._$loadPanelContentWrapper.append($message);
  },
  _renderLoadIndicator: function _renderLoadIndicator() {
    if (!this._$loadPanelContentWrapper || !this.option('showIndicator')) {
      return;
    }

    if (!this._$indicator) {
      this._$indicator = (0, _renderer.default)('<div>').addClass(LOADPANEL_INDICATOR_CLASS).appendTo(this._$loadPanelContentWrapper);
    }

    this._createComponent(this._$indicator, _load_indicator.default, {
      indicatorSrc: this.option('indicatorSrc')
    });
  },
  _cleanPreviousContent: function _cleanPreviousContent() {
    this.$content().find('.' + LOADPANEL_MESSAGE_CLASS).remove();
    this.$content().find('.' + LOADPANEL_INDICATOR_CLASS).remove();
    delete this._$indicator;
  },
  _togglePaneVisible: function _togglePaneVisible() {
    this.$content().toggleClass(LOADPANEL_PANE_HIDDEN_CLASS, !this.option('showPane'));
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'delay':
        break;

      case 'message':
      case 'showIndicator':
        this._cleanPreviousContent();

        this._renderLoadIndicator();

        this._renderMessage();

        break;

      case 'showPane':
        this._togglePaneVisible();

        break;

      case 'indicatorSrc':
        this._renderLoadIndicator();

        break;

      default:
        this.callBase(args);
    }
  },
  _dispose: function _dispose() {
    this._clearShowTimeout();

    this.callBase();
  }
  /**
  * @name dxLoadPanel.registerKeyHandler
  * @publicName registerKeyHandler(key, handler)
  * @hidden
  */

  /**
  * @name dxLoadPanel.focus
  * @publicName focus()
  * @hidden
  */

});

(0, _component_registrator.default)('dxLoadPanel', LoadPanel);
var _default = LoadPanel;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.hideCallback = void 0;

var _array = __webpack_require__(12);

var hideCallback = function () {
  var callbacks = [];
  return {
    add: function add(callback) {
      var indexOfCallback = (0, _array.inArray)(callback, callbacks);

      if (indexOfCallback === -1) {
        callbacks.push(callback);
      }
    },
    remove: function remove(callback) {
      var indexOfCallback = (0, _array.inArray)(callback, callbacks);

      if (indexOfCallback !== -1) {
        callbacks.splice(indexOfCallback, 1);
      }
    },
    fire: function fire() {
      var callback = callbacks.pop();
      var result = !!callback;

      if (result) {
        callback();
      }

      return result;
    },
    hasCallback: function hasCallback() {
      return callbacks.length > 0;
    } ///#DEBUG
    // eslint-disable-next-line comma-style
    ,
    reset: function reset() {
      callbacks = [];
    } ///#ENDDEBUG

  };
}();

exports.hideCallback = hideCallback;

/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _translator = __webpack_require__(16);

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _dom_component = _interopRequireDefault(__webpack_require__(62));

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _array = __webpack_require__(12);

var _common = __webpack_require__(3);

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _math = __webpack_require__(40);

var _type = __webpack_require__(1);

var _window = __webpack_require__(7);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _drag = __webpack_require__(81);

var _position = __webpack_require__(29);

var _index = __webpack_require__(6);

var _visibility_change = __webpack_require__(63);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RESIZABLE = 'dxResizable';
var RESIZABLE_CLASS = 'dx-resizable';
var RESIZABLE_RESIZING_CLASS = 'dx-resizable-resizing';
var RESIZABLE_HANDLE_CLASS = 'dx-resizable-handle';
var RESIZABLE_HANDLE_TOP_CLASS = 'dx-resizable-handle-top';
var RESIZABLE_HANDLE_BOTTOM_CLASS = 'dx-resizable-handle-bottom';
var RESIZABLE_HANDLE_LEFT_CLASS = 'dx-resizable-handle-left';
var RESIZABLE_HANDLE_RIGHT_CLASS = 'dx-resizable-handle-right';
var RESIZABLE_HANDLE_CORNER_CLASS = 'dx-resizable-handle-corner';
var DRAGSTART_START_EVENT_NAME = (0, _index.addNamespace)(_drag.start, RESIZABLE);
var DRAGSTART_EVENT_NAME = (0, _index.addNamespace)(_drag.move, RESIZABLE);
var DRAGSTART_END_EVENT_NAME = (0, _index.addNamespace)(_drag.end, RESIZABLE);
var SIDE_BORDER_WIDTH_STYLES = {
  'left': 'borderLeftWidth',
  'top': 'borderTopWidth',
  'right': 'borderRightWidth',
  'bottom': 'borderBottomWidth'
};

var Resizable = _dom_component.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      handles: 'all',
      step: '1',

      /**
      * @name dxResizableOptions.stepPrecision
      * @type string
      * @default "simple"
      * @acceptValues 'simple'|'strict'
      * @hidden
      */
      stepPrecision: 'simple',
      area: undefined,
      minWidth: 30,
      maxWidth: Infinity,
      minHeight: 30,
      maxHeight: Infinity,
      onResizeStart: null,
      onResize: null,
      onResizeEnd: null,
      roundStepValue: true
    });
  },
  _init: function _init() {
    this.callBase();
    this.$element().addClass(RESIZABLE_CLASS);
  },
  _initMarkup: function _initMarkup() {
    this.callBase();

    this._renderHandles();
  },
  _render: function _render() {
    this.callBase();

    this._renderActions();
  },
  _renderActions: function _renderActions() {
    this._resizeStartAction = this._createActionByOption('onResizeStart');
    this._resizeEndAction = this._createActionByOption('onResizeEnd');
    this._resizeAction = this._createActionByOption('onResize');
  },
  _renderHandles: function _renderHandles() {
    var _this = this;

    this._handles = [];
    var handles = this.option('handles');

    if (handles === 'none') {
      return;
    }

    var directions = handles === 'all' ? ['top', 'bottom', 'left', 'right'] : handles.split(' ');
    (0, _iterator.each)(directions, function (index, handleName) {
      _this._renderHandle(handleName);
    });
    (0, _array.inArray)('bottom', directions) + 1 && (0, _array.inArray)('right', directions) + 1 && this._renderHandle('corner-bottom-right');
    (0, _array.inArray)('bottom', directions) + 1 && (0, _array.inArray)('left', directions) + 1 && this._renderHandle('corner-bottom-left');
    (0, _array.inArray)('top', directions) + 1 && (0, _array.inArray)('right', directions) + 1 && this._renderHandle('corner-top-right');
    (0, _array.inArray)('top', directions) + 1 && (0, _array.inArray)('left', directions) + 1 && this._renderHandle('corner-top-left');

    this._attachEventHandlers();
  },
  _renderHandle: function _renderHandle(handleName) {
    var $handle = (0, _renderer.default)('<div>').addClass(RESIZABLE_HANDLE_CLASS).addClass(RESIZABLE_HANDLE_CLASS + '-' + handleName).appendTo(this.$element());

    this._handles.push($handle);
  },
  _attachEventHandlers: function _attachEventHandlers() {
    if (this.option('disabled')) {
      return;
    }

    var handlers = {};
    handlers[DRAGSTART_START_EVENT_NAME] = this._dragStartHandler.bind(this);
    handlers[DRAGSTART_EVENT_NAME] = this._dragHandler.bind(this);
    handlers[DRAGSTART_END_EVENT_NAME] = this._dragEndHandler.bind(this);

    this._handles.forEach(function (handleElement) {
      _events_engine.default.on(handleElement, handlers, {
        direction: 'both',
        immediate: true
      });
    });
  },
  _detachEventHandlers: function _detachEventHandlers() {
    this._handles.forEach(function (handleElement) {
      _events_engine.default.off(handleElement);
    });
  },
  _toggleEventHandlers: function _toggleEventHandlers(shouldAttachEvents) {
    shouldAttachEvents ? this._attachEventHandlers() : this._detachEventHandlers();
  },
  _dragStartHandler: function _dragStartHandler(e) {
    var $element = this.$element();

    if ($element.is('.dx-state-disabled, .dx-state-disabled *')) {
      e.cancel = true;
      return;
    }

    this._toggleResizingClass(true);

    this._movingSides = this._getMovingSides(e);
    this._elementLocation = (0, _translator.locate)($element);
    var elementRect = (0, _position.getBoundingRect)($element.get(0));
    this._elementSize = {
      width: elementRect.width,
      height: elementRect.height
    };

    this._renderDragOffsets(e);

    this._resizeStartAction({
      event: e,
      width: this._elementSize.width,
      height: this._elementSize.height,
      handles: this._movingSides
    });

    e.targetElements = null;
  },
  _toggleResizingClass: function _toggleResizingClass(value) {
    this.$element().toggleClass(RESIZABLE_RESIZING_CLASS, value);
  },
  _renderDragOffsets: function _renderDragOffsets(e) {
    var area = this._getArea();

    if (!area) {
      return;
    }

    var $handle = (0, _renderer.default)(e.target).closest('.' + RESIZABLE_HANDLE_CLASS);
    var handleWidth = $handle.outerWidth();
    var handleHeight = $handle.outerHeight();
    var handleOffset = $handle.offset();
    var areaOffset = area.offset;

    var scrollOffset = this._getAreaScrollOffset();

    e.maxLeftOffset = handleOffset.left - areaOffset.left - scrollOffset.scrollX;
    e.maxRightOffset = areaOffset.left + area.width - handleOffset.left - handleWidth + scrollOffset.scrollX;
    e.maxTopOffset = handleOffset.top - areaOffset.top - scrollOffset.scrollY;
    e.maxBottomOffset = areaOffset.top + area.height - handleOffset.top - handleHeight + scrollOffset.scrollY;
  },
  _getBorderWidth: function _getBorderWidth($element, direction) {
    if ((0, _type.isWindow)($element.get(0))) return 0;
    var borderWidth = $element.css(SIDE_BORDER_WIDTH_STYLES[direction]);
    return parseInt(borderWidth) || 0;
  },
  _dragHandler: function _dragHandler(e) {
    var $element = this.$element();
    var sides = this._movingSides;
    var location = this._elementLocation;
    var size = this._elementSize;

    var offset = this._getOffset(e);

    var width = size.width + offset.x * (sides.left ? -1 : 1);
    var height = size.height + offset.y * (sides.top ? -1 : 1);
    if (offset.x || this.option('stepPrecision') === 'strict') this._renderWidth(width);
    if (offset.y || this.option('stepPrecision') === 'strict') this._renderHeight(height);
    var elementRect = (0, _position.getBoundingRect)($element.get(0));
    var offsetTop = offset.y - ((elementRect.height || height) - height);
    var offsetLeft = offset.x - ((elementRect.width || width) - width);
    (0, _translator.move)($element, {
      top: location.top + (sides.top ? offsetTop : 0),
      left: location.left + (sides.left ? offsetLeft : 0)
    });

    this._resizeAction({
      event: e,
      width: this.option('width') || width,
      height: this.option('height') || height,
      handles: this._movingSides
    });

    (0, _visibility_change.triggerResizeEvent)($element);
  },
  _getOffset: function _getOffset(e) {
    var offset = e.offset;
    var steps = (0, _common.pairToObject)(this.option('step'), !this.option('roundStepValue'));

    var sides = this._getMovingSides(e);

    var strictPrecision = this.option('stepPrecision') === 'strict';
    if (!sides.left && !sides.right) offset.x = 0;
    if (!sides.top && !sides.bottom) offset.y = 0;
    return strictPrecision ? this._getStrictOffset(offset, steps, sides) : this._getSimpleOffset(offset, steps);
  },
  _getSimpleOffset: function _getSimpleOffset(offset, steps) {
    return {
      x: offset.x - offset.x % steps.h,
      y: offset.y - offset.y % steps.v
    };
  },
  _getStrictOffset: function _getStrictOffset(offset, steps, sides) {
    var location = this._elementLocation;
    var size = this._elementSize;
    var xPos = sides.left ? location.left : location.left + size.width;
    var yPos = sides.top ? location.top : location.top + size.height;
    var newXShift = (xPos + offset.x) % steps.h;
    var newYShift = (yPos + offset.y) % steps.v;

    var sign = Math.sign || function (x) {
      x = +x;

      if (x === 0 || isNaN(x)) {
        return x;
      }

      return x > 0 ? 1 : -1;
    };

    var separatorOffset = function separatorOffset(steps, offset) {
      return (1 + sign(offset) * 0.2) % 1 * steps;
    };

    var isSmallOffset = function isSmallOffset(offset, steps) {
      return Math.abs(offset) < 0.2 * steps;
    };

    var newOffsetX = offset.x - newXShift;
    var newOffsetY = offset.y - newYShift;

    if (newXShift > separatorOffset(steps.h, offset.x)) {
      newOffsetX += steps.h;
    }

    if (newYShift > separatorOffset(steps.v, offset.y)) {
      newOffsetY += steps.v;
    }

    return {
      x: (sides.left || sides.right) && !isSmallOffset(offset.x, steps.h) ? newOffsetX : 0,
      y: (sides.top || sides.bottom) && !isSmallOffset(offset.y, steps.v) ? newOffsetY : 0
    };
  },
  _getMovingSides: function _getMovingSides(e) {
    var $target = (0, _renderer.default)(e.target);
    var hasCornerTopLeftClass = $target.hasClass(RESIZABLE_HANDLE_CORNER_CLASS + '-top-left');
    var hasCornerTopRightClass = $target.hasClass(RESIZABLE_HANDLE_CORNER_CLASS + '-top-right');
    var hasCornerBottomLeftClass = $target.hasClass(RESIZABLE_HANDLE_CORNER_CLASS + '-bottom-left');
    var hasCornerBottomRightClass = $target.hasClass(RESIZABLE_HANDLE_CORNER_CLASS + '-bottom-right');
    return {
      'top': $target.hasClass(RESIZABLE_HANDLE_TOP_CLASS) || hasCornerTopLeftClass || hasCornerTopRightClass,
      'left': $target.hasClass(RESIZABLE_HANDLE_LEFT_CLASS) || hasCornerTopLeftClass || hasCornerBottomLeftClass,
      'bottom': $target.hasClass(RESIZABLE_HANDLE_BOTTOM_CLASS) || hasCornerBottomLeftClass || hasCornerBottomRightClass,
      'right': $target.hasClass(RESIZABLE_HANDLE_RIGHT_CLASS) || hasCornerTopRightClass || hasCornerBottomRightClass
    };
  },
  _getArea: function _getArea() {
    var area = this.option('area');

    if ((0, _type.isFunction)(area)) {
      area = area.call(this);
    }

    if ((0, _type.isPlainObject)(area)) {
      return this._getAreaFromObject(area);
    }

    return this._getAreaFromElement(area);
  },
  _getAreaScrollOffset: function _getAreaScrollOffset() {
    var area = this.option('area');
    var isElement = !(0, _type.isFunction)(area) && !(0, _type.isPlainObject)(area);
    var scrollOffset = {
      scrollY: 0,
      scrollX: 0
    };

    if (isElement) {
      var areaElement = (0, _renderer.default)(area)[0];

      if ((0, _type.isWindow)(areaElement)) {
        scrollOffset.scrollX = areaElement.pageXOffset;
        scrollOffset.scrollY = areaElement.pageYOffset;
      }
    }

    return scrollOffset;
  },
  _getAreaFromObject: function _getAreaFromObject(area) {
    var result = {
      width: area.right - area.left,
      height: area.bottom - area.top,
      offset: {
        left: area.left,
        top: area.top
      }
    };

    this._correctAreaGeometry(result);

    return result;
  },
  _getAreaFromElement: function _getAreaFromElement(area) {
    var $area = (0, _renderer.default)(area);
    var result;

    if ($area.length) {
      result = {
        width: $area.innerWidth(),
        height: $area.innerHeight(),
        offset: (0, _extend.extend)({
          top: 0,
          left: 0
        }, (0, _type.isWindow)($area[0]) ? {} : $area.offset())
      };

      this._correctAreaGeometry(result, $area);
    }

    return result;
  },
  _correctAreaGeometry: function _correctAreaGeometry(result, $area) {
    var areaBorderLeft = $area ? this._getBorderWidth($area, 'left') : 0;
    var areaBorderTop = $area ? this._getBorderWidth($area, 'top') : 0;
    result.offset.left += areaBorderLeft + this._getBorderWidth(this.$element(), 'left');
    result.offset.top += areaBorderTop + this._getBorderWidth(this.$element(), 'top');
    result.width -= this.$element().outerWidth() - this.$element().innerWidth();
    result.height -= this.$element().outerHeight() - this.$element().innerHeight();
  },
  _dragEndHandler: function _dragEndHandler(e) {
    var $element = this.$element();

    this._resizeEndAction({
      event: e,
      width: $element.outerWidth(),
      height: $element.outerHeight(),
      handles: this._movingSides
    });

    this._toggleResizingClass(false);
  },
  _renderWidth: function _renderWidth(width) {
    this.option('width', (0, _math.fitIntoRange)(width, this.option('minWidth'), this.option('maxWidth')));
  },
  _renderHeight: function _renderHeight(height) {
    this.option('height', (0, _math.fitIntoRange)(height, this.option('minHeight'), this.option('maxHeight')));
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'disabled':
        this._toggleEventHandlers(!args.value);

        this.callBase(args);
        break;

      case 'handles':
        this._invalidate();

        break;

      case 'minWidth':
      case 'maxWidth':
        (0, _window.hasWindow)() && this._renderWidth(this.$element().outerWidth());
        break;

      case 'minHeight':
      case 'maxHeight':
        (0, _window.hasWindow)() && this._renderHeight(this.$element().outerHeight());
        break;

      case 'onResize':
      case 'onResizeStart':
      case 'onResizeEnd':
        this._renderActions();

        break;

      case 'area':
      case 'stepPrecision':
      case 'step':
      case 'roundStepValue':
        break;

      default:
        this.callBase(args);
        break;
    }
  },
  _clean: function _clean() {
    this.$element().find('.' + RESIZABLE_HANDLE_CLASS).remove();
  },
  _useTemplates: function _useTemplates() {
    return false;
  }
});

(0, _component_registrator.default)(RESIZABLE, Resizable);
var _default = Resizable;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 174 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _view_port = __webpack_require__(50);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SWATCH_CONTAINER_CLASS_PREFIX = 'dx-swatch-';

var getSwatchContainer = function getSwatchContainer(element) {
  var $element = (0, _renderer.default)(element);
  var swatchContainer = $element.closest("[class^=\"".concat(SWATCH_CONTAINER_CLASS_PREFIX, "\"], [class*=\" ").concat(SWATCH_CONTAINER_CLASS_PREFIX, "\"]"));
  var viewport = (0, _view_port.value)();
  if (!swatchContainer.length) return viewport;
  var swatchClassRegex = new RegExp("(\\s|^)(".concat(SWATCH_CONTAINER_CLASS_PREFIX, ".*?)(\\s|$)"));
  var swatchClass = swatchContainer[0].className.match(swatchClassRegex)[2];
  var viewportSwatchContainer = viewport.children('.' + swatchClass);

  if (!viewportSwatchContainer.length) {
    viewportSwatchContainer = (0, _renderer.default)('<div>').addClass(swatchClass).appendTo(viewport);
  }

  return viewportSwatchContainer;
};

var _default = {
  getSwatchContainer: getSwatchContainer
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.clearStack = exports.remove = exports.create = exports.base = void 0;

var _common = __webpack_require__(3);

var baseZIndex = 1500;
var zIndexStack = [];

var base = function base(ZIndex) {
  baseZIndex = (0, _common.ensureDefined)(ZIndex, baseZIndex);
  return baseZIndex;
};

exports.base = base;

var create = function create() {
  var baseIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : baseZIndex;
  var length = zIndexStack.length;
  var index = (length ? zIndexStack[length - 1] : baseIndex) + 1;
  zIndexStack.push(index);
  return index;
};

exports.create = create;

var remove = function remove(zIndex) {
  var position = zIndexStack.indexOf(zIndex);

  if (position >= 0) {
    zIndexStack.splice(position, 1);
  }
};

exports.remove = remove;

var clearStack = function clearStack() {
  zIndexStack = [];
};

exports.clearStack = clearStack;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _uiCollection_widget = _interopRequireDefault(__webpack_require__(82));

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _array_utils = __webpack_require__(66);

var _utils = __webpack_require__(27);

var _deferred = __webpack_require__(9);

var _array_compare = __webpack_require__(116);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _common = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var PRIVATE_KEY_FIELD = '__dx_key__';

var _default = _uiCollection_widget.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      repaintChangesOnly: false
    });
  },
  ctor: function ctor() {
    var _this = this;

    this.callBase.apply(this, arguments);
    this._customizeStoreLoadOptions = function (e) {
      var dataSource = _this._dataSource;

      if (dataSource && !dataSource.isLoaded()) {
        _this._correctionIndex = 0;
      }

      if (_this._correctionIndex && e.storeLoadOptions) {
        e.storeLoadOptions.skip += _this._correctionIndex;
      }
    }, this._dataSource && this._dataSource.on('customizeStoreLoadOptions', this._customizeStoreLoadOptions);
  },
  reload: function reload() {
    this._correctionIndex = 0;
  },
  _init: function _init() {
    this.callBase();

    this._refreshItemsCache();

    this._correctionIndex = 0;
  },
  _findItemElementByKey: function _findItemElementByKey(key) {
    var _this2 = this;

    var result = (0, _renderer.default)();
    var keyExpr = this.key();
    this.itemElements().each(function (_, item) {
      var $item = (0, _renderer.default)(item);

      var itemData = _this2._getItemData($item);

      if (keyExpr ? (0, _utils.keysEqual)(keyExpr, _this2.keyOf(itemData), key) : _this2._isItemEquals(itemData, key)) {
        result = $item;
        return false;
      }
    });
    return result;
  },
  _dataSourceChangedHandler: function _dataSourceChangedHandler(newItems, e) {
    if (e !== null && e !== void 0 && e.changes) {
      this._modifyByChanges(e.changes);
    } else {
      this.callBase(newItems, e);

      this._refreshItemsCache();
    }
  },
  _isItemEquals: function _isItemEquals(item1, item2) {
    if (item1 && item1[PRIVATE_KEY_FIELD]) {
      item1 = item1.data;
    }

    try {
      return JSON.stringify(item1) === JSON.stringify(item2);
    } catch (e) {
      return item1 === item2;
    }
  },
  _isItemStrictEquals: function _isItemStrictEquals(item1, item2) {
    return this._isItemEquals(item1, item2);
  },
  _shouldAddNewGroup: function _shouldAddNewGroup(changes, items) {
    var result = false;

    if (this.option('grouped')) {
      (0, _iterator.each)(changes, function (i, change) {
        if (change.type === 'insert') {
          result = true;
          (0, _iterator.each)(items, function (_, item) {
            if (change.data.key === item.key) {
              result = false;
              return false;
            }
          });
        }
      });
    }

    return result;
  },
  _partialRefresh: function _partialRefresh() {
    var _this3 = this;

    if (this.option('repaintChangesOnly')) {
      var keyOf = function keyOf(data) {
        if (data && data[PRIVATE_KEY_FIELD] !== undefined) {
          return data[PRIVATE_KEY_FIELD];
        }

        return _this3.keyOf(data);
      };

      var result = (0, _array_compare.findChanges)(this._itemsCache, this._editStrategy.itemsGetter(), keyOf, this._isItemStrictEquals.bind(this));

      if (result && this._itemsCache.length && !this._shouldAddNewGroup(result, this._itemsCache)) {
        this._modifyByChanges(result, true);

        this._renderEmptyMessage();

        return true;
      } else {
        this._refreshItemsCache();
      }
    }

    return false;
  },
  _refreshItemsCache: function _refreshItemsCache() {
    if (this.option('repaintChangesOnly')) {
      var items = this._editStrategy.itemsGetter();

      try {
        this._itemsCache = (0, _extend.extend)(true, [], items);

        if (!this.key()) {
          this._itemsCache = this._itemsCache.map(function (itemCache, index) {
            var _ref;

            return _ref = {}, _defineProperty(_ref, PRIVATE_KEY_FIELD, items[index]), _defineProperty(_ref, "data", itemCache), _ref;
          });
        }
      } catch (e) {
        this._itemsCache = (0, _extend.extend)([], items);
      }
    }
  },
  _dispose: function _dispose() {
    this._dataSource && this._dataSource.off('customizeStoreLoadOptions', this._customizeStoreLoadOptions);
    this.callBase();
  },
  _updateByChange: function _updateByChange(keyInfo, items, change, isPartialRefresh) {
    var _this4 = this;

    if (isPartialRefresh) {
      this._renderItem(change.index, change.data, null, this._findItemElementByKey(change.key));
    } else {
      var changedItem = items[(0, _array_utils.indexByKey)(keyInfo, items, change.key)];

      if (changedItem) {
        (0, _array_utils.update)(keyInfo, items, change.key, change.data).done(function () {
          _this4._renderItem(items.indexOf(changedItem), changedItem, null, _this4._findItemElementByKey(change.key));
        });
      }
    }
  },
  _insertByChange: function _insertByChange(keyInfo, items, change, isPartialRefresh) {
    var _this5 = this;

    (0, _deferred.when)(isPartialRefresh || (0, _array_utils.insert)(keyInfo, items, change.data, change.index)).done(function () {
      var _change$index;

      _this5._beforeItemElementInserted(change);

      var $itemContainer = _this5._getItemContainer(change.data);

      _this5._renderItem((_change$index = change.index) !== null && _change$index !== void 0 ? _change$index : items.length, change.data, $itemContainer);

      _this5._afterItemElementInserted();

      _this5._correctionIndex++;
    });
  },
  _getItemContainer: function _getItemContainer(changeData) {
    return this._itemContainer();
  },
  _updateSelectionAfterRemoveByChange: function _updateSelectionAfterRemoveByChange(removeIndex) {
    var selectedIndex = this.option('selectedIndex');

    if (selectedIndex > removeIndex) {
      this.option('selectedIndex', selectedIndex - 1);
    } else if (selectedIndex === removeIndex && this.option('selectedItems').length === 1) {
      this.option('selectedItems', []);
    } else {
      this._normalizeSelectedItems();
    }
  },
  _beforeItemElementInserted: function _beforeItemElementInserted(change) {
    var selectedIndex = this.option('selectedIndex');

    if (change.index <= selectedIndex) {
      this.option('selectedIndex', selectedIndex + 1);
    }
  },
  _afterItemElementInserted: _common.noop,
  _removeByChange: function _removeByChange(keyInfo, items, change, isPartialRefresh) {
    var _this6 = this;

    var index = isPartialRefresh ? change.index : (0, _array_utils.indexByKey)(keyInfo, items, change.key);
    var removedItem = isPartialRefresh ? change.oldItem : items[index];

    if (removedItem) {
      var $removedItemElement = this._findItemElementByKey(change.key);

      var deletedActionArgs = this._extendActionArgs($removedItemElement);

      this._waitDeletingPrepare($removedItemElement).done(function () {
        if (isPartialRefresh) {
          _this6._updateIndicesAfterIndex(index - 1);

          _this6._afterItemElementDeleted($removedItemElement, deletedActionArgs);

          _this6._updateSelectionAfterRemoveByChange(index);
        } else {
          _this6._deleteItemElementByIndex(index);

          _this6._afterItemElementDeleted($removedItemElement, deletedActionArgs);
        }
      });

      this._correctionIndex--;
    }
  },
  _modifyByChanges: function _modifyByChanges(changes, isPartialRefresh) {
    var _this7 = this;

    var items = this._editStrategy.itemsGetter();

    var keyInfo = {
      key: this.key.bind(this),
      keyOf: this.keyOf.bind(this)
    };
    var dataSource = this._dataSource;
    var paginate = dataSource && dataSource.paginate();
    var group = dataSource && dataSource.group();

    if (paginate || group) {
      changes = changes.filter(function (item) {
        return item.type !== 'insert' || item.index !== undefined;
      });
    }

    changes.forEach(function (change) {
      return _this7["_".concat(change.type, "ByChange")](keyInfo, items, change, isPartialRefresh);
    });
    this._renderedItemsCount = items.length;

    this._refreshItemsCache();

    this._fireContentReadyAction();
  },
  _appendItemToContainer: function _appendItemToContainer($container, $itemFrame, index) {
    var nextSiblingElement = $container.children(this._itemSelector()).get(index);

    _dom_adapter.default.insertElement($container.get(0), $itemFrame.get(0), nextSiblingElement);
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'items':
        {
          var isItemsUpdated = this._partialRefresh(args.value);

          if (!isItemsUpdated) {
            this.callBase(args);
          }

          break;
        }

      case 'dataSource':
        if (!this.option('repaintChangesOnly') || !args.value) {
          this.option('items', []);
        }

        this.callBase(args);
        break;

      case 'repaintChangesOnly':
        break;

      default:
        this.callBase(args);
    }
  }
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _common = __webpack_require__(3);

var _template_manager = __webpack_require__(104);

var _element = __webpack_require__(20);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _type = __webpack_require__(1);

var _deferred = __webpack_require__(9);

var _extend = __webpack_require__(2);

var _array = __webpack_require__(12);

var _iterator = __webpack_require__(4);

var _action = _interopRequireDefault(__webpack_require__(61));

var _guid = _interopRequireDefault(__webpack_require__(53));

var _ui = _interopRequireDefault(__webpack_require__(42));

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _data_helper = _interopRequireDefault(__webpack_require__(178));

var _item = _interopRequireDefault(__webpack_require__(100));

var _selectors = __webpack_require__(35);

var _message = _interopRequireDefault(__webpack_require__(17));

var _hold = _interopRequireDefault(__webpack_require__(114));

var _data = __webpack_require__(23);

var _click = __webpack_require__(30);

var _contextmenu = __webpack_require__(184);

var _bindable_template = __webpack_require__(68);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var COLLECTION_CLASS = 'dx-collection';
var ITEM_CLASS = 'dx-item';
var CONTENT_CLASS_POSTFIX = '-content';
var ITEM_CONTENT_PLACEHOLDER_CLASS = 'dx-item-content-placeholder';
var ITEM_DATA_KEY = 'dxItemData';
var ITEM_INDEX_KEY = 'dxItemIndex';
var ITEM_TEMPLATE_ID_PREFIX = 'tmpl-';
var ITEMS_OPTIONS_NAME = 'dxItem';
var SELECTED_ITEM_CLASS = 'dx-item-selected';
var ITEM_RESPONSE_WAIT_CLASS = 'dx-item-response-wait';
var EMPTY_COLLECTION = 'dx-empty-collection';
var TEMPLATE_WRAPPER_CLASS = 'dx-template-wrapper';
var ITEM_PATH_REGEX = /^([^.]+\[\d+\]\.)+([\w.]+)$/;
var ANONYMOUS_TEMPLATE_NAME = 'item';
var FOCUS_UP = 'up';
var FOCUS_DOWN = 'down';
var FOCUS_LEFT = 'left';
var FOCUS_RIGHT = 'right';
var FOCUS_PAGE_UP = 'pageup';
var FOCUS_PAGE_DOWN = 'pagedown';
var FOCUS_LAST = 'last';
var FOCUS_FIRST = 'first';

var CollectionWidget = _ui.default.inherit({
  _activeStateUnit: '.' + ITEM_CLASS,
  _supportedKeys: function _supportedKeys() {
    var enter = function enter(e) {
      var $itemElement = (0, _renderer.default)(this.option('focusedElement'));

      if (!$itemElement.length) {
        return;
      }

      this._itemClickHandler((0, _extend.extend)({}, e, {
        target: $itemElement.get(0),
        currentTarget: $itemElement.get(0)
      }));
    };

    var space = function space(e) {
      e.preventDefault();
      enter.call(this, e);
    };

    var move = function move(location, e) {
      if (!(0, _index.isCommandKeyPressed)(e)) {
        e.preventDefault();
        e.stopPropagation();

        this._moveFocus(location, e);
      }
    };

    return (0, _extend.extend)(this.callBase(), {
      space: space,
      enter: enter,
      leftArrow: move.bind(this, FOCUS_LEFT),
      rightArrow: move.bind(this, FOCUS_RIGHT),
      upArrow: move.bind(this, FOCUS_UP),
      downArrow: move.bind(this, FOCUS_DOWN),
      pageUp: move.bind(this, FOCUS_UP),
      pageDown: move.bind(this, FOCUS_DOWN),
      home: move.bind(this, FOCUS_FIRST),
      end: move.bind(this, FOCUS_LAST)
    });
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      /**
      * @name CollectionWidgetOptions.selectOnFocus
      * @type boolean
      * @hidden
      */
      selectOnFocus: false,

      /**
      * @name CollectionWidgetOptions.loopItemFocus
      * @type boolean
      * @hidden
      */
      loopItemFocus: true,
      items: [],
      itemTemplate: 'item',
      onItemRendered: null,
      onItemClick: null,
      onItemHold: null,
      itemHoldTimeout: 750,
      onItemContextMenu: null,
      onFocusedItemChanged: null,
      noDataText: _message.default.format('dxCollectionWidget-noDataText'),
      dataSource: null,
      _itemAttributes: {},
      itemTemplateProperty: 'template',
      focusOnSelectedItem: true,

      /**
      * @name CollectionWidgetOptions.focusedElement
      * @type DxElement
      * @default null
      * @hidden
      */
      focusedElement: null,
      displayExpr: undefined,
      disabledExpr: function disabledExpr(data) {
        return data ? data.disabled : undefined;
      },
      visibleExpr: function visibleExpr(data) {
        return data ? data.visible : undefined;
      }
    });
  },
  _init: function _init() {
    this._compileDisplayGetter();

    this.callBase();

    this._cleanRenderedItems();

    this._refreshDataSource();
  },
  _compileDisplayGetter: function _compileDisplayGetter() {
    var displayExpr = this.option('displayExpr');
    this._displayGetter = displayExpr ? (0, _data.compileGetter)(this.option('displayExpr')) : undefined;
  },
  _initTemplates: function _initTemplates() {
    this._initItemsFromMarkup();

    this._initDefaultItemTemplate();

    this.callBase();
  },
  _getAnonymousTemplateName: function _getAnonymousTemplateName() {
    return ANONYMOUS_TEMPLATE_NAME;
  },
  _initDefaultItemTemplate: function _initDefaultItemTemplate() {
    var fieldsMap = this._getFieldsMap();

    this._templateManager.addDefaultTemplates({
      item: new _bindable_template.BindableTemplate(function ($container, data) {
        if ((0, _type.isPlainObject)(data)) {
          this._prepareDefaultItemTemplate(data, $container);
        } else {
          if (fieldsMap && (0, _type.isFunction)(fieldsMap.text)) {
            data = fieldsMap.text(data);
          }

          $container.text(String((0, _common.ensureDefined)(data, '')));
        }
      }.bind(this), this._getBindableFields(), this.option('integrationOptions.watchMethod'), fieldsMap)
    });
  },
  _getBindableFields: function _getBindableFields() {
    return ['text', 'html'];
  },
  _getFieldsMap: function _getFieldsMap() {
    if (this._displayGetter) {
      return {
        text: this._displayGetter
      };
    }
  },
  _prepareDefaultItemTemplate: function _prepareDefaultItemTemplate(data, $container) {
    if ((0, _type.isDefined)(data.text)) {
      $container.text(data.text);
    }

    if ((0, _type.isDefined)(data.html)) {
      $container.html(data.html);
    }
  },
  _initItemsFromMarkup: function _initItemsFromMarkup() {
    var _this = this;

    var rawItems = (0, _template_manager.findTemplates)(this.$element(), ITEMS_OPTIONS_NAME);

    if (!rawItems.length || this.option('items').length) {
      return;
    }

    var items = rawItems.map(function (_ref) {
      var element = _ref.element,
          options = _ref.options;
      var isTemplateRequired = /\S/.test(element.innerHTML) && !options.template;

      if (isTemplateRequired) {
        options.template = _this._prepareItemTemplate(element);
      } else {
        (0, _renderer.default)(element).remove();
      }

      return options;
    });
    this.option('items', items);
  },
  _prepareItemTemplate: function _prepareItemTemplate(item) {
    var templateId = ITEM_TEMPLATE_ID_PREFIX + new _guid.default();
    var $template = (0, _renderer.default)(item).detach().clone().removeAttr('data-options').addClass(TEMPLATE_WRAPPER_CLASS);

    this._saveTemplate(templateId, $template);

    return templateId;
  },
  _dataSourceOptions: function _dataSourceOptions() {
    return {
      paginate: false
    };
  },
  _cleanRenderedItems: function _cleanRenderedItems() {
    this._renderedItemsCount = 0;
  },
  _focusTarget: function _focusTarget() {
    return this.$element();
  },
  _focusInHandler: function _focusInHandler(e) {
    this.callBase.apply(this, arguments);

    if ((0, _array.inArray)(e.target, this._focusTarget()) === -1) {
      return;
    }

    var $focusedElement = (0, _renderer.default)(this.option('focusedElement'));

    if ($focusedElement.length) {
      this._setFocusedItem($focusedElement);
    } else {
      var $activeItem = this._getActiveItem();

      if ($activeItem.length) {
        this.option('focusedElement', (0, _element.getPublicElement)($activeItem));
      }
    }
  },
  _focusOutHandler: function _focusOutHandler() {
    this.callBase.apply(this, arguments);
    var $target = (0, _renderer.default)(this.option('focusedElement'));

    this._updateFocusedItemState($target, false);
  },
  _getActiveItem: function _getActiveItem(last) {
    var $focusedElement = (0, _renderer.default)(this.option('focusedElement'));

    if ($focusedElement.length) {
      return $focusedElement;
    }

    var index = this.option('focusOnSelectedItem') ? this.option('selectedIndex') : 0;

    var activeElements = this._getActiveElement();

    var lastIndex = activeElements.length - 1;

    if (index < 0) {
      index = last ? lastIndex : 0;
    }

    return activeElements.eq(index);
  },
  _moveFocus: function _moveFocus(location) {
    var $items = this._getAvailableItems();

    var $newTarget;

    switch (location) {
      case FOCUS_PAGE_UP:
      case FOCUS_UP:
        $newTarget = this._prevItem($items);
        break;

      case FOCUS_PAGE_DOWN:
      case FOCUS_DOWN:
        $newTarget = this._nextItem($items);
        break;

      case FOCUS_RIGHT:
        $newTarget = this.option('rtlEnabled') ? this._prevItem($items) : this._nextItem($items);
        break;

      case FOCUS_LEFT:
        $newTarget = this.option('rtlEnabled') ? this._nextItem($items) : this._prevItem($items);
        break;

      case FOCUS_FIRST:
        $newTarget = $items.first();
        break;

      case FOCUS_LAST:
        $newTarget = $items.last();
        break;

      default:
        return false;
    }

    if ($newTarget.length !== 0) {
      this.option('focusedElement', (0, _element.getPublicElement)($newTarget));
    }
  },
  _getVisibleItems: function _getVisibleItems($itemElements) {
    $itemElements = $itemElements || this._itemElements();
    return $itemElements.filter(':visible');
  },
  _getAvailableItems: function _getAvailableItems($itemElements) {
    return this._getVisibleItems($itemElements).not('.dx-state-disabled');
  },
  _prevItem: function _prevItem($items) {
    var $target = this._getActiveItem();

    var targetIndex = $items.index($target);
    var $last = $items.last();
    var $item = (0, _renderer.default)($items[targetIndex - 1]);
    var loop = this.option('loopItemFocus');

    if ($item.length === 0 && loop) {
      $item = $last;
    }

    return $item;
  },
  _nextItem: function _nextItem($items) {
    var $target = this._getActiveItem(true);

    var targetIndex = $items.index($target);
    var $first = $items.first();
    var $item = (0, _renderer.default)($items[targetIndex + 1]);
    var loop = this.option('loopItemFocus');

    if ($item.length === 0 && loop) {
      $item = $first;
    }

    return $item;
  },
  _selectFocusedItem: function _selectFocusedItem($target) {
    this.selectItem($target);
  },
  _updateFocusedItemState: function _updateFocusedItemState(target, isFocused, needCleanItemId) {
    var $target = (0, _renderer.default)(target);

    if ($target.length) {
      this._refreshActiveDescendant();

      this._refreshItemId($target, needCleanItemId);

      this._toggleFocusClass(isFocused, $target);
    }

    this._updateParentActiveDescendant();
  },
  _refreshActiveDescendant: function _refreshActiveDescendant($target) {
    this.setAria('activedescendant', (0, _type.isDefined)(this.option('focusedElement')) ? this.getFocusedItemId() : null, $target);
  },
  _refreshItemId: function _refreshItemId($target, needCleanItemId) {
    if (!needCleanItemId && this.option('focusedElement')) {
      this.setAria('id', this.getFocusedItemId(), $target);
    } else {
      this.setAria('id', null, $target);
    }
  },
  _setFocusedItem: function _setFocusedItem($target) {
    if (!$target || !$target.length) {
      return;
    }

    this._updateFocusedItemState($target, true);

    this.onFocusedItemChanged(this.getFocusedItemId());

    if (this.option('selectOnFocus')) {
      this._selectFocusedItem($target);
    }
  },
  _findItemElementByItem: function _findItemElementByItem(item) {
    var result = (0, _renderer.default)();
    var that = this;
    this.itemElements().each(function () {
      var $item = (0, _renderer.default)(this);

      if ($item.data(that._itemDataKey()) === item) {
        result = $item;
        return false;
      }
    });
    return result;
  },
  _getIndexByItem: function _getIndexByItem(item) {
    return this.option('items').indexOf(item);
  },
  _itemOptionChanged: function _itemOptionChanged(item, property, value, oldValue) {
    var $item = this._findItemElementByItem(item);

    if (!$item.length) {
      return;
    }

    if (!this.constructor.ItemClass.getInstance($item).setDataField(property, value)) {
      this._refreshItem($item, item);
    }

    var isDisabling = property === 'disabled' && value;

    if (isDisabling) {
      this._resetItemFocus($item);
    }
  },
  _resetItemFocus: function _resetItemFocus($item) {
    if ($item.is(this.option('focusedElement'))) {
      this.option('focusedElement', null);
    }
  },
  _refreshItem: function _refreshItem($item) {
    var itemData = this._getItemData($item);

    var index = $item.data(this._itemIndexKey());

    this._renderItem(this._renderedItemsCount + index, itemData, null, $item);
  },
  _updateParentActiveDescendant: _common.noop,
  _optionChanged: function _optionChanged(args) {
    if (args.name === 'items') {
      var matches = args.fullName.match(ITEM_PATH_REGEX);

      if (matches && matches.length) {
        var property = matches[matches.length - 1];
        var itemPath = args.fullName.replace('.' + property, '');
        var item = this.option(itemPath);

        this._itemOptionChanged(item, property, args.value, args.previousValue);

        return;
      }
    }

    switch (args.name) {
      case 'items':
      case '_itemAttributes':
      case 'itemTemplateProperty':
      case 'useItemTextAsTitle':
        this._cleanRenderedItems();

        this._invalidate();

        break;

      case 'dataSource':
        this._refreshDataSource();

        this._renderEmptyMessage();

        break;

      case 'noDataText':
        this._renderEmptyMessage();

        break;

      case 'itemTemplate':
        this._invalidate();

        break;

      case 'onItemRendered':
        this._createItemRenderAction();

        break;

      case 'onItemClick':
        break;

      case 'onItemHold':
      case 'itemHoldTimeout':
        this._attachHoldEvent();

        break;

      case 'onItemContextMenu':
        this._attachContextMenuEvent();

        break;

      case 'onFocusedItemChanged':
        this.onFocusedItemChanged = this._createActionByOption('onFocusedItemChanged');
        break;

      case 'selectOnFocus':
      case 'loopItemFocus':
      case 'focusOnSelectedItem':
        break;

      case 'focusedElement':
        this._updateFocusedItemState(args.previousValue, false, true);

        this._setFocusedItem((0, _renderer.default)(args.value));

        break;

      case 'displayExpr':
        this._compileDisplayGetter();

        this._initDefaultItemTemplate();

        this._invalidate();

        break;

      case 'visibleExpr':
      case 'disabledExpr':
        this._invalidate();

        break;

      default:
        this.callBase(args);
    }
  },
  _invalidate: function _invalidate() {
    this.option('focusedElement', null);
    return this.callBase.apply(this, arguments);
  },
  _loadNextPage: function _loadNextPage() {
    var dataSource = this._dataSource;

    this._expectNextPageLoading();

    dataSource.pageIndex(1 + dataSource.pageIndex());
    return dataSource.load();
  },
  _expectNextPageLoading: function _expectNextPageLoading() {
    this._startIndexForAppendedItems = 0;
  },
  _expectLastItemLoading: function _expectLastItemLoading() {
    this._startIndexForAppendedItems = -1;
  },
  _forgetNextPageLoading: function _forgetNextPageLoading() {
    this._startIndexForAppendedItems = null;
  },
  _dataSourceChangedHandler: function _dataSourceChangedHandler(newItems) {
    var items = this.option('items');

    if (this._initialized && items && this._shouldAppendItems()) {
      this._renderedItemsCount = items.length;

      if (!this._isLastPage() || this._startIndexForAppendedItems !== -1) {
        this.option().items = items.concat(newItems.slice(this._startIndexForAppendedItems));
      }

      this._forgetNextPageLoading();

      this._refreshContent();
    } else {
      this.option('items', newItems.slice());
    }
  },
  _refreshContent: function _refreshContent() {
    this._prepareContent();

    this._renderContent();
  },
  _dataSourceLoadErrorHandler: function _dataSourceLoadErrorHandler() {
    this._forgetNextPageLoading();

    this.option('items', this.option('items'));
  },
  _shouldAppendItems: function _shouldAppendItems() {
    return this._startIndexForAppendedItems != null && this._allowDynamicItemsAppend();
  },
  _allowDynamicItemsAppend: function _allowDynamicItemsAppend() {
    return false;
  },
  _clean: function _clean() {
    this._cleanFocusState();

    this._cleanItemContainer();
  },
  _cleanItemContainer: function _cleanItemContainer() {
    (0, _renderer.default)(this._itemContainer()).empty();
  },
  _dispose: function _dispose() {
    this.callBase();
    clearTimeout(this._itemFocusTimeout);
  },
  _refresh: function _refresh() {
    this._cleanRenderedItems();

    this.callBase.apply(this, arguments);
  },
  _itemContainer: function _itemContainer() {
    return this.$element();
  },
  _itemClass: function _itemClass() {
    return ITEM_CLASS;
  },
  _itemContentClass: function _itemContentClass() {
    return this._itemClass() + CONTENT_CLASS_POSTFIX;
  },
  _selectedItemClass: function _selectedItemClass() {
    return SELECTED_ITEM_CLASS;
  },
  _itemResponseWaitClass: function _itemResponseWaitClass() {
    return ITEM_RESPONSE_WAIT_CLASS;
  },
  _itemSelector: function _itemSelector() {
    return '.' + this._itemClass();
  },
  _itemDataKey: function _itemDataKey() {
    return ITEM_DATA_KEY;
  },
  _itemIndexKey: function _itemIndexKey() {
    return ITEM_INDEX_KEY;
  },
  _itemElements: function _itemElements() {
    return this._itemContainer().find(this._itemSelector());
  },
  _initMarkup: function _initMarkup() {
    this.callBase();
    this.onFocusedItemChanged = this._createActionByOption('onFocusedItemChanged');
    this.$element().addClass(COLLECTION_CLASS);

    this._prepareContent();
  },
  _prepareContent: (0, _common.deferRenderer)(function () {
    this._renderContentImpl();
  }),
  _renderContent: function _renderContent() {
    this._fireContentReadyAction();
  },
  _render: function _render() {
    this.callBase();

    this._attachClickEvent();

    this._attachHoldEvent();

    this._attachContextMenuEvent();
  },
  _attachClickEvent: function _attachClickEvent() {
    var itemSelector = this._itemSelector();

    var clickEventNamespace = (0, _index.addNamespace)(_click.name, this.NAME);
    var pointerDownEventNamespace = (0, _index.addNamespace)(_pointer.default.down, this.NAME);
    var that = this;
    var pointerDownAction = new _action.default(function (args) {
      var event = args.event;

      that._itemPointerDownHandler(event);
    });

    _events_engine.default.off(this._itemContainer(), clickEventNamespace, itemSelector);

    _events_engine.default.off(this._itemContainer(), pointerDownEventNamespace, itemSelector);

    _events_engine.default.on(this._itemContainer(), clickEventNamespace, itemSelector, function (e) {
      this._itemClickHandler(e);
    }.bind(this));

    _events_engine.default.on(this._itemContainer(), pointerDownEventNamespace, itemSelector, function (e) {
      pointerDownAction.execute({
        element: (0, _renderer.default)(e.target),
        event: e
      });
    });
  },
  _itemClickHandler: function _itemClickHandler(e, args, config) {
    this._itemDXEventHandler(e, 'onItemClick', args, config);
  },
  _itemPointerDownHandler: function _itemPointerDownHandler(e) {
    if (!this.option('focusStateEnabled')) {
      return;
    }

    this._itemFocusHandler = function () {
      clearTimeout(this._itemFocusTimeout);
      this._itemFocusHandler = null;

      if (e.isDefaultPrevented()) {
        return;
      }

      var $target = (0, _renderer.default)(e.target);
      var $closestItem = $target.closest(this._itemElements());

      var $closestFocusable = this._closestFocusable($target);

      if ($closestItem.length && $closestFocusable && (0, _array.inArray)($closestFocusable.get(0), this._focusTarget()) !== -1) {
        this.option('focusedElement', (0, _element.getPublicElement)($closestItem));
      }
    }.bind(this);

    this._itemFocusTimeout = setTimeout(this._forcePointerDownFocus.bind(this));
  },
  _closestFocusable: function _closestFocusable($target) {
    if ($target.is(_selectors.focusable)) {
      return $target;
    } else {
      $target = $target.parent();

      while ($target.length && !_dom_adapter.default.isDocument($target.get(0))) {
        if ($target.is(_selectors.focusable)) {
          return $target;
        }

        $target = $target.parent();
      }
    }
  },
  _forcePointerDownFocus: function _forcePointerDownFocus() {
    this._itemFocusHandler && this._itemFocusHandler();
  },
  _updateFocusState: function _updateFocusState() {
    this.callBase.apply(this, arguments);

    this._forcePointerDownFocus();
  },
  _attachHoldEvent: function _attachHoldEvent() {
    var $itemContainer = this._itemContainer();

    var itemSelector = this._itemSelector();

    var eventName = (0, _index.addNamespace)(_hold.default.name, this.NAME);

    _events_engine.default.off($itemContainer, eventName, itemSelector);

    _events_engine.default.on($itemContainer, eventName, itemSelector, {
      timeout: this._getHoldTimeout()
    }, this._itemHoldHandler.bind(this));
  },
  _getHoldTimeout: function _getHoldTimeout() {
    return this.option('itemHoldTimeout');
  },
  _shouldFireHoldEvent: function _shouldFireHoldEvent() {
    return this.hasActionSubscription('onItemHold');
  },
  _itemHoldHandler: function _itemHoldHandler(e) {
    if (this._shouldFireHoldEvent()) {
      this._itemDXEventHandler(e, 'onItemHold');
    } else {
      e.cancel = true;
    }
  },
  _attachContextMenuEvent: function _attachContextMenuEvent() {
    var $itemContainer = this._itemContainer();

    var itemSelector = this._itemSelector();

    var eventName = (0, _index.addNamespace)(_contextmenu.name, this.NAME);

    _events_engine.default.off($itemContainer, eventName, itemSelector);

    _events_engine.default.on($itemContainer, eventName, itemSelector, this._itemContextMenuHandler.bind(this));
  },
  _shouldFireContextMenuEvent: function _shouldFireContextMenuEvent() {
    return this.hasActionSubscription('onItemContextMenu');
  },
  _itemContextMenuHandler: function _itemContextMenuHandler(e) {
    if (this._shouldFireContextMenuEvent()) {
      this._itemDXEventHandler(e, 'onItemContextMenu');
    } else {
      e.cancel = true;
    }
  },
  _renderContentImpl: function _renderContentImpl() {
    var items = this.option('items') || [];

    if (this._renderedItemsCount) {
      this._renderItems(items.slice(this._renderedItemsCount));
    } else {
      this._renderItems(items);
    }
  },
  _renderItems: function _renderItems(items) {
    if (items.length) {
      (0, _iterator.each)(items, function (index, itemData) {
        this._renderItem(this._renderedItemsCount + index, itemData);
      }.bind(this));
    }

    this._renderEmptyMessage();
  },
  _renderItem: function _renderItem(index, itemData, $container, $itemToReplace) {
    $container = $container || this._itemContainer();

    var $itemFrame = this._renderItemFrame(index, itemData, $container, $itemToReplace);

    this._setElementData($itemFrame, itemData, index);

    $itemFrame.attr(this.option('_itemAttributes'));

    this._attachItemClickEvent(itemData, $itemFrame);

    var $itemContent = this._getItemContent($itemFrame);

    var renderContentPromise = this._renderItemContent({
      index: index,
      itemData: itemData,
      container: (0, _element.getPublicElement)($itemContent),
      contentClass: this._itemContentClass(),
      defaultTemplateName: this.option('itemTemplate')
    });

    var that = this;
    (0, _deferred.when)(renderContentPromise).done(function ($itemContent) {
      that._postprocessRenderItem({
        itemElement: $itemFrame,
        itemContent: $itemContent,
        itemData: itemData,
        itemIndex: index
      });

      that._executeItemRenderAction(index, itemData, (0, _element.getPublicElement)($itemFrame));
    });
    return $itemFrame;
  },
  _getItemContent: function _getItemContent($itemFrame) {
    var $itemContent = $itemFrame.find('.' + ITEM_CONTENT_PLACEHOLDER_CLASS);
    $itemContent.removeClass(ITEM_CONTENT_PLACEHOLDER_CLASS);
    return $itemContent;
  },
  _attachItemClickEvent: function _attachItemClickEvent(itemData, $itemElement) {
    if (!itemData || !itemData.onClick) {
      return;
    }

    _events_engine.default.on($itemElement, _click.name, function (e) {
      this._itemEventHandlerByHandler($itemElement, itemData.onClick, {
        event: e
      });
    }.bind(this));
  },
  _renderItemContent: function _renderItemContent(args) {
    var itemTemplateName = this._getItemTemplateName(args);

    var itemTemplate = this._getTemplate(itemTemplateName);

    this._addItemContentClasses(args);

    var $templateResult = (0, _renderer.default)(this._createItemByTemplate(itemTemplate, args));

    if (!$templateResult.hasClass(TEMPLATE_WRAPPER_CLASS)) {
      return args.container;
    }

    return this._renderItemContentByNode(args, $templateResult);
  },
  _renderItemContentByNode: function _renderItemContentByNode(args, $node) {
    (0, _renderer.default)(args.container).replaceWith($node);
    args.container = (0, _element.getPublicElement)($node);

    this._addItemContentClasses(args);

    return $node;
  },
  _addItemContentClasses: function _addItemContentClasses(args) {
    var classes = [ITEM_CLASS + CONTENT_CLASS_POSTFIX, args.contentClass];
    (0, _renderer.default)(args.container).addClass(classes.join(' '));
  },
  _appendItemToContainer: function _appendItemToContainer($container, $itemFrame, index) {
    $itemFrame.appendTo($container);
  },
  _renderItemFrame: function _renderItemFrame(index, itemData, $container, $itemToReplace) {
    var $itemFrame = (0, _renderer.default)('<div>');
    new this.constructor.ItemClass($itemFrame, this._itemOptions(), itemData || {});

    if ($itemToReplace && $itemToReplace.length) {
      $itemToReplace.replaceWith($itemFrame);
    } else {
      this._appendItemToContainer.call(this, $container, $itemFrame, index);
    }

    if (this.option('useItemTextAsTitle')) {
      var displayValue = this._displayGetter ? this._displayGetter(itemData) : itemData;
      $itemFrame.attr('title', displayValue);
    }

    return $itemFrame;
  },
  _itemOptions: function _itemOptions() {
    var that = this;
    return {
      watchMethod: function watchMethod() {
        return that.option('integrationOptions.watchMethod');
      },
      owner: that,
      fieldGetter: function fieldGetter(field) {
        var expr = that.option(field + 'Expr');
        var getter = (0, _data.compileGetter)(expr);
        return getter;
      }
    };
  },
  _postprocessRenderItem: _common.noop,
  _executeItemRenderAction: function _executeItemRenderAction(index, itemData, itemElement) {
    this._getItemRenderAction()({
      itemElement: itemElement,
      itemIndex: index,
      itemData: itemData
    });
  },
  _setElementData: function _setElementData(element, data, index) {
    element.addClass([ITEM_CLASS, this._itemClass()].join(' ')).data(this._itemDataKey(), data).data(this._itemIndexKey(), index);
  },
  _createItemRenderAction: function _createItemRenderAction() {
    return this._itemRenderAction = this._createActionByOption('onItemRendered', {
      element: this.element(),
      excludeValidators: ['disabled', 'readOnly'],
      category: 'rendering'
    });
  },
  _getItemRenderAction: function _getItemRenderAction() {
    return this._itemRenderAction || this._createItemRenderAction();
  },
  _getItemTemplateName: function _getItemTemplateName(args) {
    var data = args.itemData;
    var templateProperty = args.templateProperty || this.option('itemTemplateProperty');
    var template = data && data[templateProperty];
    return template || args.defaultTemplateName;
  },
  _createItemByTemplate: function _createItemByTemplate(itemTemplate, renderArgs) {
    return itemTemplate.render({
      model: renderArgs.itemData,
      container: renderArgs.container,
      index: renderArgs.index
    });
  },
  _emptyMessageContainer: function _emptyMessageContainer() {
    return this._itemContainer();
  },
  _renderEmptyMessage: function _renderEmptyMessage(items) {
    items = items || this.option('items');
    var noDataText = this.option('noDataText');

    var hideNoData = !noDataText || items && items.length || this._isDataSourceLoading();

    if (hideNoData && this._$noData) {
      this._$noData.remove();

      this._$noData = null;
      this.setAria('label', undefined);
    }

    if (!hideNoData) {
      this._$noData = this._$noData || (0, _renderer.default)('<div>').addClass('dx-empty-message');

      this._$noData.appendTo(this._emptyMessageContainer()).html(noDataText);

      this.setAria('label', noDataText);
    }

    this.$element().toggleClass(EMPTY_COLLECTION, !hideNoData);
  },
  _itemDXEventHandler: function _itemDXEventHandler(dxEvent, handlerOptionName, actionArgs, actionConfig) {
    this._itemEventHandler(dxEvent.target, handlerOptionName, (0, _extend.extend)(actionArgs, {
      event: dxEvent
    }), actionConfig);
  },
  _itemEventHandler: function _itemEventHandler(initiator, handlerOptionName, actionArgs, actionConfig) {
    var action = this._createActionByOption(handlerOptionName, (0, _extend.extend)({
      validatingTargetName: 'itemElement'
    }, actionConfig));

    return this._itemEventHandlerImpl(initiator, action, actionArgs);
  },
  _itemEventHandlerByHandler: function _itemEventHandlerByHandler(initiator, handler, actionArgs, actionConfig) {
    var action = this._createAction(handler, (0, _extend.extend)({
      validatingTargetName: 'itemElement'
    }, actionConfig));

    return this._itemEventHandlerImpl(initiator, action, actionArgs);
  },
  _itemEventHandlerImpl: function _itemEventHandlerImpl(initiator, action, actionArgs) {
    var $itemElement = this._closestItemElement((0, _renderer.default)(initiator));

    var args = (0, _extend.extend)({}, actionArgs);
    return action((0, _extend.extend)(actionArgs, this._extendActionArgs($itemElement), args));
  },
  _extendActionArgs: function _extendActionArgs($itemElement) {
    return {
      itemElement: (0, _element.getPublicElement)($itemElement),
      itemIndex: this._itemElements().index($itemElement),
      itemData: this._getItemData($itemElement)
    };
  },
  _closestItemElement: function _closestItemElement($element) {
    return (0, _renderer.default)($element).closest(this._itemSelector());
  },
  _getItemData: function _getItemData(itemElement) {
    return (0, _renderer.default)(itemElement).data(this._itemDataKey());
  },
  _getSummaryItemsWidth: function _getSummaryItemsWidth(items, includeMargin) {
    var result = 0;

    if (items) {
      (0, _iterator.each)(items, function (_, item) {
        result += (0, _renderer.default)(item).outerWidth(includeMargin || false);
      });
    }

    return result;
  },

  /**
  * @name CollectionWidget.getFocusedItemId
  * @publicName getFocusedItemId()
  * @return string
  * @hidden
  */
  getFocusedItemId: function getFocusedItemId() {
    if (!this._focusedItemId) {
      this._focusedItemId = 'dx-' + new _guid.default();
    }

    return this._focusedItemId;
  },

  /**
  * @name CollectionWidget.itemElements
  * @publicName itemElements()
  * @return Array<Element>
  * @hidden
  */
  itemElements: function itemElements() {
    return this._itemElements();
  },

  /**
  * @name CollectionWidget.itemsContainer
  * @publicName itemsContainer()
  * @return Element
  * @hidden
  */
  itemsContainer: function itemsContainer() {
    return this._itemContainer();
  }
}).include(_data_helper.default);

CollectionWidget.ItemClass = _item.default;
var _default = CollectionWidget;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _data_source = __webpack_require__(112);

var _extend = __webpack_require__(2);

var _utils = __webpack_require__(67);

var DATA_SOURCE_OPTIONS_METHOD = '_dataSourceOptions';
var DATA_SOURCE_CHANGED_METHOD = '_dataSourceChangedHandler';
var DATA_SOURCE_LOAD_ERROR_METHOD = '_dataSourceLoadErrorHandler';
var DATA_SOURCE_LOADING_CHANGED_METHOD = '_dataSourceLoadingChangedHandler';
var DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD = '_dataSourceFromUrlLoadMode';
var SPECIFIC_DATA_SOURCE_OPTION = '_getSpecificDataSourceOption';
var NORMALIZE_DATA_SOURCE = '_normalizeDataSource';
var DataHelperMixin = {
  postCtor: function postCtor() {
    this.on('disposing', function () {
      this._disposeDataSource();
    }.bind(this));
  },
  _refreshDataSource: function _refreshDataSource() {
    this._initDataSource();

    this._loadDataSource();
  },
  _initDataSource: function _initDataSource() {
    var dataSourceOptions = SPECIFIC_DATA_SOURCE_OPTION in this ? this[SPECIFIC_DATA_SOURCE_OPTION]() : this.option('dataSource');
    var widgetDataSourceOptions;
    var dataSourceType;

    this._disposeDataSource();

    if (dataSourceOptions) {
      if (dataSourceOptions instanceof _data_source.DataSource) {
        this._isSharedDataSource = true;
        this._dataSource = dataSourceOptions;
      } else {
        widgetDataSourceOptions = DATA_SOURCE_OPTIONS_METHOD in this ? this[DATA_SOURCE_OPTIONS_METHOD]() : {};
        dataSourceType = this._dataSourceType ? this._dataSourceType() : _data_source.DataSource;
        dataSourceOptions = (0, _utils.normalizeDataSourceOptions)(dataSourceOptions, {
          fromUrlLoadMode: DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD in this && this[DATA_SOURCE_FROM_URL_LOAD_MODE_METHOD]()
        });
        this._dataSource = new dataSourceType((0, _extend.extend)(true, {}, widgetDataSourceOptions, dataSourceOptions));
      }

      if (NORMALIZE_DATA_SOURCE in this) {
        this._dataSource = this[NORMALIZE_DATA_SOURCE](this._dataSource);
      }

      this._addDataSourceHandlers();
    }
  },
  _addDataSourceHandlers: function _addDataSourceHandlers() {
    if (DATA_SOURCE_CHANGED_METHOD in this) {
      this._addDataSourceChangeHandler();
    }

    if (DATA_SOURCE_LOAD_ERROR_METHOD in this) {
      this._addDataSourceLoadErrorHandler();
    }

    if (DATA_SOURCE_LOADING_CHANGED_METHOD in this) {
      this._addDataSourceLoadingChangedHandler();
    }

    this._addReadyWatcher();
  },
  _addReadyWatcher: function _addReadyWatcher() {
    this._dataSource.on('loadingChanged', function (isLoading) {
      this._ready && this._ready(!isLoading);
    }.bind(this));
  },
  _addDataSourceChangeHandler: function _addDataSourceChangeHandler() {
    var dataSource = this._dataSource;

    this._proxiedDataSourceChangedHandler = function (e) {
      this[DATA_SOURCE_CHANGED_METHOD](dataSource.items(), e);
    }.bind(this);

    dataSource.on('changed', this._proxiedDataSourceChangedHandler);
  },
  _addDataSourceLoadErrorHandler: function _addDataSourceLoadErrorHandler() {
    this._proxiedDataSourceLoadErrorHandler = this[DATA_SOURCE_LOAD_ERROR_METHOD].bind(this);

    this._dataSource.on('loadError', this._proxiedDataSourceLoadErrorHandler);
  },
  _addDataSourceLoadingChangedHandler: function _addDataSourceLoadingChangedHandler() {
    this._proxiedDataSourceLoadingChangedHandler = this[DATA_SOURCE_LOADING_CHANGED_METHOD].bind(this);

    this._dataSource.on('loadingChanged', this._proxiedDataSourceLoadingChangedHandler);
  },
  _loadDataSource: function _loadDataSource() {
    if (this._dataSource) {
      var dataSource = this._dataSource;

      if (dataSource.isLoaded()) {
        this._proxiedDataSourceChangedHandler && this._proxiedDataSourceChangedHandler();
      } else {
        dataSource.load();
      }
    }
  },
  _loadSingle: function _loadSingle(key, value) {
    key = key === 'this' ? this._dataSource.key() || 'this' : key;
    return this._dataSource.loadSingle(key, value);
  },
  _isLastPage: function _isLastPage() {
    return !this._dataSource || this._dataSource.isLastPage() || !this._dataSource._pageSize;
  },
  _isDataSourceLoading: function _isDataSourceLoading() {
    return this._dataSource && this._dataSource.isLoading();
  },
  _disposeDataSource: function _disposeDataSource() {
    if (this._dataSource) {
      if (this._isSharedDataSource) {
        delete this._isSharedDataSource;
        this._proxiedDataSourceChangedHandler && this._dataSource.off('changed', this._proxiedDataSourceChangedHandler);
        this._proxiedDataSourceLoadErrorHandler && this._dataSource.off('loadError', this._proxiedDataSourceLoadErrorHandler);
        this._proxiedDataSourceLoadingChangedHandler && this._dataSource.off('loadingChanged', this._proxiedDataSourceLoadingChangedHandler);
      } else {
        this._dataSource.dispose();
      }

      delete this._dataSource;
      delete this._proxiedDataSourceChangedHandler;
      delete this._proxiedDataSourceLoadErrorHandler;
      delete this._proxiedDataSourceLoadingChangedHandler;
    }
  },
  getDataSource: function getDataSource() {
    return this._dataSource || null;
  }
};
var _default = DataHelperMixin;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.create = createQueue;
exports.enqueue = void 0;

var _errors = _interopRequireDefault(__webpack_require__(13));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createQueue(discardPendingTasks) {
  var _tasks = [];
  var _busy = false;

  function exec() {
    while (_tasks.length) {
      _busy = true;

      var task = _tasks.shift();

      var result = task();

      if (result === undefined) {
        continue;
      }

      if (result.then) {
        // NOTE: immediate "then" on the next line can reset it back to false
        (0, _deferred.when)(result).always(exec);
        return;
      }

      throw _errors.default.Error('E0015');
    }

    _busy = false;
  }

  function add(task, removeTaskCallback) {
    if (!discardPendingTasks) {
      _tasks.push(task);
    } else {
      if (_tasks[0] && removeTaskCallback) {
        removeTaskCallback(_tasks[0]);
      }

      _tasks = [task];
    }

    if (!_busy) {
      exec();
    }
  }

  function busy() {
    return _busy;
  }

  return {
    add: add,
    busy: busy
  };
}

var enqueue = createQueue().add; // Default global queue for UI sync, consider renaming

exports.enqueue = enqueue;

/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _utils = __webpack_require__(67);

var OperationManager = /*#__PURE__*/function () {
  function OperationManager() {
    this._counter = -1;
    this._deferreds = {};
  }

  var _proto = OperationManager.prototype;

  _proto.add = function add(deferred) {
    this._counter++;
    this._deferreds[this._counter] = deferred;
    return this._counter;
  };

  _proto.remove = function remove(operationId) {
    return delete this._deferreds[operationId];
  };

  _proto.cancel = function cancel(operationId) {
    if (operationId in this._deferreds) {
      this._deferreds[operationId].reject(_utils.CANCELED_TOKEN);

      return true;
    }

    return false;
  };

  _proto.cancelAll = function cancelAll() {
    while (this._counter > -1) {
      this.cancel(this._counter);
      this._counter--;
    }
  };

  return OperationManager;
}();

exports.default = OperationManager;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _deferred = __webpack_require__(9);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _http_request = _interopRequireDefault(__webpack_require__(182));

var _window = __webpack_require__(7);

var _extend = __webpack_require__(2);

var _type = __webpack_require__(1);

var _promise = _interopRequireDefault(__webpack_require__(51));

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)();
var SUCCESS = 'success';
var ERROR = 'error';
var TIMEOUT = 'timeout';
var NO_CONTENT = 'nocontent';
var PARSER_ERROR = 'parsererror';

var isStatusSuccess = function isStatusSuccess(status) {
  return 200 <= status && status < 300;
};

var hasContent = function hasContent(status) {
  return status !== 204;
};

var paramsConvert = function paramsConvert(params) {
  var result = [];

  for (var name in params) {
    var value = params[name];

    if (value === undefined) {
      continue;
    }

    if (value === null) {
      value = '';
    }

    if (typeof value === 'function') {
      value = value();
    }

    result.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));
  }

  return result.join('&');
};

var createScript = function createScript(options) {
  var script = _dom_adapter.default.createElement('script');

  for (var name in options) {
    script[name] = options[name];
  }

  return script;
};

var removeScript = function removeScript(scriptNode) {
  scriptNode.parentNode.removeChild(scriptNode);
};

var appendToHead = function appendToHead(element) {
  return _dom_adapter.default.getHead().appendChild(element);
};

var evalScript = function evalScript(code) {
  var script = createScript({
    text: code
  });
  appendToHead(script);
  removeScript(script);
};

var evalCrossDomainScript = function evalCrossDomainScript(url) {
  var script = createScript({
    src: url
  });
  return new _promise.default(function (resolve, reject) {
    var events = {
      'load': resolve,
      'error': reject
    };

    var loadHandler = function loadHandler(e) {
      events[e.type]();
      removeScript(script);
    };

    for (var event in events) {
      _dom_adapter.default.listen(script, event, loadHandler);
    }

    appendToHead(script);
  });
};

var getAcceptHeader = function getAcceptHeader(options) {
  var dataType = options.dataType || '*';
  var scriptAccept = 'text/javascript, application/javascript, application/ecmascript, application/x-ecmascript';
  var accepts = {
    '*': '*/*',
    text: 'text/plain',
    html: 'text/html',
    xml: 'application/xml, text/xml',
    json: 'application/json, text/javascript',
    jsonp: scriptAccept,
    script: scriptAccept
  };
  (0, _extend.extendFromObject)(accepts, options.accepts, true);
  return accepts[dataType] ? accepts[dataType] + (dataType !== '*' ? ', */*; q=0.01' : '') : accepts['*'];
};

var getContentTypeHeader = function getContentTypeHeader(options) {
  var defaultContentType;

  if (options.data && !options.upload && getMethod(options) !== 'GET') {
    defaultContentType = 'application/x-www-form-urlencoded;charset=utf-8';
  }

  return options.contentType || defaultContentType;
};

var getDataFromResponse = function getDataFromResponse(xhr) {
  return xhr.responseType && xhr.responseType !== 'text' || typeof xhr.responseText !== 'string' ? xhr.response : xhr.responseText;
};

var postProcess = function postProcess(deferred, xhr, dataType) {
  var data = getDataFromResponse(xhr);

  switch (dataType) {
    case 'jsonp':
      evalScript(data);
      break;

    case 'script':
      evalScript(data);
      deferred.resolve(data, SUCCESS, xhr);
      break;

    case 'json':
      try {
        deferred.resolve(JSON.parse(data), SUCCESS, xhr);
      } catch (e) {
        deferred.reject(xhr, PARSER_ERROR, e);
      }

      break;

    default:
      deferred.resolve(data, SUCCESS, xhr);
  }
};

var isCrossDomain = function isCrossDomain(url) {
  if (!(0, _window.hasWindow)()) {
    return true;
  }

  var crossDomain = false;

  var originAnchor = _dom_adapter.default.createElement('a');

  var urlAnchor = _dom_adapter.default.createElement('a');

  originAnchor.href = window.location.href;

  try {
    urlAnchor.href = url; // NOTE: IE11
    // eslint-disable-next-line no-self-assign

    urlAnchor.href = urlAnchor.href;
    crossDomain = originAnchor.protocol + '//' + originAnchor.host !== urlAnchor.protocol + '//' + urlAnchor.host;
  } catch (e) {
    crossDomain = true;
  }

  return crossDomain;
};

var setHttpTimeout = function setHttpTimeout(timeout, xhr) {
  return timeout && setTimeout(function () {
    xhr.customStatus = TIMEOUT;
    xhr.abort();
  }, timeout);
};

var getJsonpOptions = function getJsonpOptions(options) {
  if (options.dataType === 'jsonp') {
    var random = Math.random().toString().replace(/\D/g, '');
    var callbackName = options.jsonpCallback || 'dxCallback' + Date.now() + '_' + random;
    var callbackParameter = options.jsonp || 'callback';
    options.data = options.data || {};
    options.data[callbackParameter] = callbackName;
    return callbackName;
  }
};

var getRequestOptions = function getRequestOptions(options, headers) {
  var params = options.data;
  var paramsAlreadyString = typeof params === 'string';
  var url = options.url || window.location.href;

  if (!paramsAlreadyString && !options.cache) {
    params = params || {};
    params['_'] = Date.now();
  }

  if (params && !options.upload) {
    if (!paramsAlreadyString) {
      params = paramsConvert(params);
    }

    if (getMethod(options) === 'GET') {
      if (params !== '') {
        url += (url.indexOf('?') > -1 ? '&' : '?') + params;
      }

      params = null;
    } else if (headers['Content-Type'] && headers['Content-Type'].indexOf('application/x-www-form-urlencoded') > -1) {
      params = params.replace(/%20/g, '+');
    }
  }

  return {
    url: url,
    parameters: params
  };
};

function getMethod(options) {
  return (options.method || 'GET').toUpperCase();
}

var getRequestHeaders = function getRequestHeaders(options) {
  var headers = options.headers || {};
  headers['Content-Type'] = headers['Content-Type'] || getContentTypeHeader(options);
  headers['Accept'] = headers['Accept'] || getAcceptHeader(options);

  if (!options.crossDomain && !headers['X-Requested-With']) {
    headers['X-Requested-With'] = 'XMLHttpRequest';
  }

  return headers;
};

var sendRequest = function sendRequest(options) {
  var xhr = _http_request.default.getXhr();

  var d = new _deferred.Deferred();
  var result = d.promise();
  var async = (0, _type.isDefined)(options.async) ? options.async : true;
  var dataType = options.dataType;
  var timeout = options.timeout || 0;
  var timeoutId;
  options.crossDomain = isCrossDomain(options.url);
  var needScriptEvaluation = dataType === 'jsonp' || dataType === 'script';

  if (options.cache === undefined) {
    options.cache = !needScriptEvaluation;
  }

  var callbackName = getJsonpOptions(options);
  var headers = getRequestHeaders(options);
  var requestOptions = getRequestOptions(options, headers);
  var url = requestOptions.url;
  var parameters = requestOptions.parameters;

  if (callbackName) {
    window[callbackName] = function (data) {
      d.resolve(data, SUCCESS, xhr);
    };
  }

  if (options.crossDomain && needScriptEvaluation) {
    var reject = function reject() {
      d.reject(xhr, ERROR);
    };

    var resolve = function resolve() {
      if (dataType === 'jsonp') return;
      d.resolve(null, SUCCESS, xhr);
    };

    evalCrossDomainScript(url).then(resolve, reject);
    return result;
  }

  if (options.crossDomain && !('withCredentials' in xhr)) {
    d.reject(xhr, ERROR);
    return result;
  }

  xhr.open(getMethod(options), url, async, options.username, options.password);

  if (async) {
    xhr.timeout = timeout;
    timeoutId = setHttpTimeout(timeout, xhr, d);
  }

  xhr['onreadystatechange'] = function (e) {
    if (xhr.readyState === 4) {
      clearTimeout(timeoutId);

      if (isStatusSuccess(xhr.status)) {
        if (hasContent(xhr.status)) {
          postProcess(d, xhr, dataType);
        } else {
          d.resolve(null, NO_CONTENT, xhr);
        }
      } else {
        d.reject(xhr, xhr.customStatus || ERROR);
      }
    }
  };

  if (options.upload) {
    xhr.upload['onprogress'] = options.upload['onprogress'];
    xhr.upload['onloadstart'] = options.upload['onloadstart'];
    xhr.upload['onabort'] = options.upload['onabort'];
  }

  if (options.xhrFields) {
    for (var field in options.xhrFields) {
      xhr[field] = options.xhrFields[field];
    }
  }

  if (options.responseType === 'arraybuffer') {
    xhr.responseType = options.responseType;
  }

  for (var name in headers) {
    if (Object.prototype.hasOwnProperty.call(headers, name) && (0, _type.isDefined)(headers[name])) {
      xhr.setRequestHeader(name, headers[name]);
    }
  }

  if (options.beforeSend) {
    options.beforeSend(xhr);
  }

  xhr.send(parameters);

  result.abort = function () {
    xhr.abort();
  };

  return result;
};

var _default = (0, _dependency_injector.default)({
  sendRequest: sendRequest
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _window = __webpack_require__(7);

var _dependency_injector = _interopRequireDefault(__webpack_require__(26));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)();
var nativeXMLHttpRequest = {
  getXhr: function getXhr() {
    return new window.XMLHttpRequest();
  }
};

var _default = (0, _dependency_injector.default)(nativeXMLHttpRequest);

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _utils = __webpack_require__(27);

var _query = _interopRequireDefault(__webpack_require__(48));

var _errors = __webpack_require__(36);

var _abstract_store = _interopRequireDefault(__webpack_require__(83));

var _array_utils = __webpack_require__(66);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ArrayStore = _abstract_store.default.inherit({
  ctor: function ctor(options) {
    if (Array.isArray(options)) {
      options = {
        data: options
      };
    } else {
      options = options || {};
    }

    this.callBase(options);
    var initialArray = options.data;

    if (initialArray && !Array.isArray(initialArray)) {
      throw _errors.errors.Error('E4006');
    }

    this._array = initialArray || [];
  },
  createQuery: function createQuery() {
    return (0, _query.default)(this._array, {
      errorHandler: this._errorHandler
    });
  },
  _byKeyImpl: function _byKeyImpl(key) {
    var index = (0, _array_utils.indexByKey)(this, this._array, key);

    if (index === -1) {
      return (0, _utils.rejectedPromise)(_errors.errors.Error('E4009'));
    }

    return (0, _utils.trivialPromise)(this._array[index]);
  },
  _insertImpl: function _insertImpl(values) {
    return (0, _array_utils.insert)(this, this._array, values);
  },
  _pushImpl: function _pushImpl(changes) {
    (0, _array_utils.applyBatch)({
      keyInfo: this,
      data: this._array,
      changes: changes
    });
  },
  _updateImpl: function _updateImpl(key, values) {
    return (0, _array_utils.update)(this, this._array, key, values);
  },
  _removeImpl: function _removeImpl(key) {
    return (0, _array_utils.remove)(this, this._array, key);
  },
  clear: function clear() {
    this._eventsStrategy.fireEvent('modifying');

    this._array = [];

    this._eventsStrategy.fireEvent('modified');
  }
}, 'array');

var _default = ArrayStore;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.name = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _support = __webpack_require__(34);

var _devices = _interopRequireDefault(__webpack_require__(10));

var _class = _interopRequireDefault(__webpack_require__(11));

var _event_registrator = _interopRequireDefault(__webpack_require__(38));

var _index = __webpack_require__(6);

var _hold = _interopRequireDefault(__webpack_require__(114));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CONTEXTMENU_NAMESPACE = 'dxContexMenu';
var CONTEXTMENU_NAMESPACED_EVENT_NAME = (0, _index.addNamespace)('contextmenu', CONTEXTMENU_NAMESPACE);
var HOLD_NAMESPACED_EVENT_NAME = (0, _index.addNamespace)(_hold.default.name, CONTEXTMENU_NAMESPACE);
var CONTEXTMENU_EVENT_NAME = 'dxcontextmenu';

var ContextMenu = _class.default.inherit({
  setup: function setup(element) {
    var $element = (0, _renderer.default)(element);

    _events_engine.default.on($element, CONTEXTMENU_NAMESPACED_EVENT_NAME, this._contextMenuHandler.bind(this));

    if (_support.touch || _devices.default.isSimulator()) {
      _events_engine.default.on($element, HOLD_NAMESPACED_EVENT_NAME, this._holdHandler.bind(this));
    }
  },
  _holdHandler: function _holdHandler(e) {
    if ((0, _index.isMouseEvent)(e) && !_devices.default.isSimulator()) {
      return;
    }

    this._fireContextMenu(e);
  },
  _contextMenuHandler: function _contextMenuHandler(e) {
    this._fireContextMenu(e);
  },
  _fireContextMenu: function _fireContextMenu(e) {
    return (0, _index.fireEvent)({
      type: CONTEXTMENU_EVENT_NAME,
      originalEvent: e
    });
  },
  teardown: function teardown(element) {
    _events_engine.default.off(element, '.' + CONTEXTMENU_NAMESPACE);
  }
});
/**
  * @name UI Events.dxcontextmenu
  * @type eventType
  * @type_function_param1 event:event
  * @module events/contextmenu
*/


(0, _event_registrator.default)(CONTEXTMENU_EVENT_NAME, new ContextMenu());
var name = CONTEXTMENU_EVENT_NAME;
exports.name = name;

/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _class = _interopRequireDefault(__webpack_require__(11));

var _selectionStrategy = _interopRequireDefault(__webpack_require__(186));

var _selectionStrategy2 = _interopRequireDefault(__webpack_require__(187));

var _extend = __webpack_require__(2);

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _class.default.inherit({
  ctor: function ctor(options) {
    this.options = (0, _extend.extend)(this._getDefaultOptions(), options, {
      selectedItemKeys: options.selectedKeys || []
    });
    this._selectionStrategy = this.options.deferred ? new _selectionStrategy.default(this.options) : new _selectionStrategy2.default(this.options);
    this._focusedItemIndex = -1;

    if (!this.options.equalByReference) {
      this._selectionStrategy.updateSelectedItemKeyHash(this.options.selectedItemKeys);
    }
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return {
      allowNullValue: false,
      deferred: false,
      equalByReference: false,
      mode: 'multiple',
      selectedItems: [],
      selectionFilter: [],
      maxFilterLengthInRequest: 0,
      onSelectionChanged: _common.noop,
      key: _common.noop,
      keyOf: function keyOf(item) {
        return item;
      },
      load: function load() {
        return new _deferred.Deferred().resolve([]);
      },
      totalCount: function totalCount() {
        return -1;
      },
      isSelectableItem: function isSelectableItem() {
        return true;
      },
      isItemSelected: function isItemSelected() {
        return false;
      },
      getItemData: function getItemData(item) {
        return item;
      },
      dataFields: _common.noop,
      filter: _common.noop
    };
  },
  validate: function validate() {
    this._selectionStrategy.validate();
  },
  getSelectedItemKeys: function getSelectedItemKeys() {
    return this._selectionStrategy.getSelectedItemKeys();
  },
  getSelectedItems: function getSelectedItems() {
    return this._selectionStrategy.getSelectedItems();
  },
  selectionFilter: function selectionFilter(value) {
    if (value === undefined) {
      return this.options.selectionFilter;
    }

    var filterIsChanged = this.options.selectionFilter !== value && JSON.stringify(this.options.selectionFilter) !== JSON.stringify(value);
    this.options.selectionFilter = value;
    filterIsChanged && this.onSelectionChanged();
  },
  setSelection: function setSelection(keys, updatedKeys) {
    return this.selectedItemKeys(keys, false, false, false, updatedKeys);
  },
  select: function select(keys) {
    return this.selectedItemKeys(keys, true);
  },
  deselect: function deselect(keys) {
    return this.selectedItemKeys(keys, true, true);
  },
  selectedItemKeys: function selectedItemKeys(keys, preserve, isDeselect, isSelectAll, updatedKeys) {
    var _keys;

    var that = this;
    keys = (_keys = keys) !== null && _keys !== void 0 ? _keys : [];
    keys = Array.isArray(keys) ? keys : [keys];
    that.validate();
    return this._selectionStrategy.selectedItemKeys(keys, preserve, isDeselect, isSelectAll, updatedKeys);
  },
  clearSelection: function clearSelection() {
    return this.selectedItemKeys([]);
  },
  _addSelectedItem: function _addSelectedItem(itemData, key) {
    this._selectionStrategy.addSelectedItem(key, itemData);
  },
  _removeSelectedItem: function _removeSelectedItem(key) {
    this._selectionStrategy.removeSelectedItem(key);
  },
  _setSelectedItems: function _setSelectedItems(keys, items) {
    this._selectionStrategy.setSelectedItems(keys, items);
  },
  onSelectionChanged: function onSelectionChanged() {
    this._selectionStrategy.onSelectionChanged();
  },
  changeItemSelection: function changeItemSelection(itemIndex, keys) {
    var isSelectedItemsChanged;
    var items = this.options.plainItems();
    var item = items[itemIndex];

    if (!this.isSelectable() || !this.isDataItem(item)) {
      return false;
    }

    var itemData = this.options.getItemData(item);
    var itemKey = this.options.keyOf(itemData);
    keys = keys || {};

    if (keys.shift && this.options.mode === 'multiple' && this._focusedItemIndex >= 0) {
      isSelectedItemsChanged = this.changeItemSelectionWhenShiftKeyPressed(itemIndex, items);
    } else if (keys.control) {
      this._resetItemSelectionWhenShiftKeyPressed();

      var isSelected = this._selectionStrategy.isItemDataSelected(itemData);

      if (this.options.mode === 'single') {
        this.clearSelectedItems();
      }

      if (isSelected) {
        this._removeSelectedItem(itemKey);
      } else {
        this._addSelectedItem(itemData, itemKey);
      }

      isSelectedItemsChanged = true;
    } else {
      this._resetItemSelectionWhenShiftKeyPressed();

      var isKeysEqual = this._selectionStrategy.equalKeys(this.options.selectedItemKeys[0], itemKey);

      if (this.options.selectedItemKeys.length !== 1 || !isKeysEqual) {
        this._setSelectedItems([itemKey], [itemData]);

        isSelectedItemsChanged = true;
      }
    }

    if (isSelectedItemsChanged) {
      this._focusedItemIndex = itemIndex;
      this.onSelectionChanged();
      return true;
    }
  },
  isDataItem: function isDataItem(item) {
    return this.options.isSelectableItem(item);
  },
  isSelectable: function isSelectable() {
    return this.options.mode === 'single' || this.options.mode === 'multiple';
  },
  isItemDataSelected: function isItemDataSelected(data) {
    return this._selectionStrategy.isItemDataSelected(data, {
      checkPending: true
    });
  },
  isItemSelected: function isItemSelected(arg, options) {
    return this._selectionStrategy.isItemKeySelected(arg, options);
  },
  _resetItemSelectionWhenShiftKeyPressed: function _resetItemSelectionWhenShiftKeyPressed() {
    delete this._shiftFocusedItemIndex;
  },
  _resetFocusedItemIndex: function _resetFocusedItemIndex() {
    this._focusedItemIndex = -1;
  },
  changeItemSelectionWhenShiftKeyPressed: function changeItemSelectionWhenShiftKeyPressed(itemIndex, items) {
    var isSelectedItemsChanged = false;
    var itemIndexStep;
    var index;
    var keyOf = this.options.keyOf;
    var focusedItem = items[this._focusedItemIndex];
    var focusedData = this.options.getItemData(focusedItem);
    var focusedKey = keyOf(focusedData);
    var isFocusedItemSelected = focusedItem && this.isItemDataSelected(focusedData);

    if (!(0, _type.isDefined)(this._shiftFocusedItemIndex)) {
      this._shiftFocusedItemIndex = this._focusedItemIndex;
    }

    var data;
    var itemKey;

    if (this._shiftFocusedItemIndex !== this._focusedItemIndex) {
      itemIndexStep = this._focusedItemIndex < this._shiftFocusedItemIndex ? 1 : -1;

      for (index = this._focusedItemIndex; index !== this._shiftFocusedItemIndex; index += itemIndexStep) {
        if (this.isDataItem(items[index])) {
          itemKey = keyOf(this.options.getItemData(items[index]));

          this._removeSelectedItem(itemKey);

          isSelectedItemsChanged = true;
        }
      }
    }

    if (itemIndex !== this._shiftFocusedItemIndex) {
      itemIndexStep = itemIndex < this._shiftFocusedItemIndex ? 1 : -1;

      for (index = itemIndex; index !== this._shiftFocusedItemIndex; index += itemIndexStep) {
        if (this.isDataItem(items[index])) {
          data = this.options.getItemData(items[index]);
          itemKey = keyOf(data);

          this._addSelectedItem(data, itemKey);

          isSelectedItemsChanged = true;
        }
      }
    }

    if (this.isDataItem(focusedItem) && !isFocusedItemSelected) {
      this._addSelectedItem(focusedData, focusedKey);

      isSelectedItemsChanged = true;
    }

    return isSelectedItemsChanged;
  },
  clearSelectedItems: function clearSelectedItems() {
    this._setSelectedItems([], []);
  },
  selectAll: function selectAll(isOnePage) {
    this._resetFocusedItemIndex();

    if (isOnePage) {
      return this._onePageSelectAll(false);
    } else {
      return this.selectedItemKeys([], true, false, true);
    }
  },
  deselectAll: function deselectAll(isOnePage) {
    this._resetFocusedItemIndex();

    if (isOnePage) {
      return this._onePageSelectAll(true);
    } else {
      return this.selectedItemKeys([], true, true, true);
    }
  },
  _onePageSelectAll: function _onePageSelectAll(isDeselect) {
    var items = this._selectionStrategy.getSelectableItems(this.options.plainItems());

    for (var i = 0; i < items.length; i++) {
      var item = items[i];

      if (this.isDataItem(item)) {
        var itemData = this.options.getItemData(item);
        var itemKey = this.options.keyOf(itemData);
        var isSelected = this.isItemSelected(itemKey);

        if (!isSelected && !isDeselect) {
          this._addSelectedItem(itemData, itemKey);
        }

        if (isSelected && isDeselect) {
          this._removeSelectedItem(itemKey);
        }
      }
    }

    this.onSelectionChanged();
    return new _deferred.Deferred().resolve();
  },
  getSelectAllState: function getSelectAllState(visibleOnly) {
    return this._selectionStrategy.getSelectAllState(visibleOnly);
  }
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _type = __webpack_require__(1);

var _selection = _interopRequireDefault(__webpack_require__(115));

var _ui = _interopRequireDefault(__webpack_require__(28));

var _query = _interopRequireDefault(__webpack_require__(48));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _selection.default.inherit({
  getSelectedItems: function getSelectedItems() {
    return this._loadFilteredData(this.options.selectionFilter);
  },
  getSelectedItemKeys: function getSelectedItemKeys() {
    var d = new _deferred.Deferred();
    var that = this;
    var key = this.options.key();
    var select = (0, _type.isString)(key) ? [key] : key;

    this._loadFilteredData(this.options.selectionFilter, null, select).done(function (items) {
      var keys = items.map(function (item) {
        return that.options.keyOf(item);
      });
      d.resolve(keys);
    }).fail(d.reject);

    return d.promise();
  },
  selectedItemKeys: function selectedItemKeys(keys, preserve, isDeselect, isSelectAll) {
    if (isSelectAll) {
      var filter = this.options.filter();
      var needResetSelectionFilter = !filter || JSON.stringify(filter) === JSON.stringify(this.options.selectionFilter) && isDeselect;

      if (needResetSelectionFilter) {
        this._setOption('selectionFilter', isDeselect ? [] : null);
      } else {
        this._addSelectionFilter(isDeselect, filter, isSelectAll);
      }
    } else {
      if (!preserve) {
        this._setOption('selectionFilter', []);
      }

      for (var i = 0; i < keys.length; i++) {
        if (isDeselect) {
          this.removeSelectedItem(keys[i]);
        } else {
          this.addSelectedItem(keys[i]);
        }
      }
    }

    this.onSelectionChanged();
    return new _deferred.Deferred().resolve();
  },
  setSelectedItems: function setSelectedItems(keys) {
    this._setOption('selectionFilter', null);

    for (var i = 0; i < keys.length; i++) {
      this.addSelectedItem(keys[i]);
    }
  },
  isItemDataSelected: function isItemDataSelected(itemData) {
    return this.isItemKeySelected(itemData);
  },
  isItemKeySelected: function isItemKeySelected(itemData) {
    var selectionFilter = this.options.selectionFilter;

    if (!selectionFilter) {
      return true;
    }

    return !!(0, _query.default)([itemData]).filter(selectionFilter).toArray().length;
  },
  _getKeyExpr: function _getKeyExpr() {
    var keyField = this.options.key();

    if (Array.isArray(keyField) && keyField.length === 1) {
      return keyField[0];
    }

    return keyField;
  },
  _normalizeKey: function _normalizeKey(key) {
    var keyExpr = this.options.key();

    if (Array.isArray(keyExpr) && keyExpr.length === 1) {
      return key[keyExpr[0]];
    }

    return key;
  },
  _getFilterByKey: function _getFilterByKey(key) {
    var keyField = this._getKeyExpr();

    var filter = [keyField, '=', this._normalizeKey(key)];

    if (Array.isArray(keyField)) {
      filter = [];

      for (var i = 0; i < keyField.length; i++) {
        filter.push([keyField[i], '=', key[keyField[i]]]);

        if (i !== keyField.length - 1) {
          filter.push('and');
        }
      }
    }

    return filter;
  },
  addSelectedItem: function addSelectedItem(key) {
    var filter = this._getFilterByKey(key);

    this._addSelectionFilter(false, filter);
  },
  removeSelectedItem: function removeSelectedItem(key) {
    var filter = this._getFilterByKey(key);

    this._addSelectionFilter(true, filter);
  },
  validate: function validate() {
    var key = this.options.key;

    if (key && key() === undefined) {
      throw _ui.default.Error('E1042', 'Deferred selection');
    }
  },
  _findSubFilter: function _findSubFilter(selectionFilter, filter) {
    if (!selectionFilter) return -1;
    var filterString = JSON.stringify(filter);

    for (var index = 0; index < selectionFilter.length; index++) {
      var subFilter = selectionFilter[index];

      if (subFilter && JSON.stringify(subFilter) === filterString) {
        return index;
      }
    }

    return -1;
  },
  _isLastSubFilter: function _isLastSubFilter(selectionFilter, filter) {
    if (selectionFilter && filter) {
      return this._findSubFilter(selectionFilter, filter) === selectionFilter.length - 1 || this._findSubFilter([selectionFilter], filter) === 0;
    }

    return false;
  },
  _addFilterOperator: function _addFilterOperator(selectionFilter, filterOperator) {
    if (selectionFilter.length > 1 && (0, _type.isString)(selectionFilter[1]) && selectionFilter[1] !== filterOperator) {
      selectionFilter = [selectionFilter];
    }

    if (selectionFilter.length) {
      selectionFilter.push(filterOperator);
    }

    return selectionFilter;
  },
  _denormalizeFilter: function _denormalizeFilter(filter) {
    if (filter && (0, _type.isString)(filter[0])) {
      filter = [filter];
    }

    return filter;
  },
  _addSelectionFilter: function _addSelectionFilter(isDeselect, filter, isSelectAll) {
    var that = this;
    var currentFilter = isDeselect ? ['!', filter] : filter;
    var currentOperation = isDeselect ? 'and' : 'or';
    var needAddFilter = true;
    var selectionFilter = that.options.selectionFilter || [];
    selectionFilter = that._denormalizeFilter(selectionFilter);

    if (selectionFilter && selectionFilter.length) {
      that._removeSameFilter(selectionFilter, filter, isDeselect, isSelectAll);

      var filterIndex = that._removeSameFilter(selectionFilter, filter, !isDeselect);

      var isKeyOperatorsAfterRemoved = this._isKeyFilter(filter) && this._hasKeyFiltersOnlyStartingFromIndex(selectionFilter, filterIndex);

      needAddFilter = filter.length && !isKeyOperatorsAfterRemoved;

      if (needAddFilter) {
        selectionFilter = that._addFilterOperator(selectionFilter, currentOperation);
      }
    }

    if (needAddFilter) {
      selectionFilter.push(currentFilter);
    }

    selectionFilter = that._normalizeFilter(selectionFilter);

    that._setOption('selectionFilter', !isDeselect && !selectionFilter.length ? null : selectionFilter);
  },
  _normalizeFilter: function _normalizeFilter(filter) {
    if (filter && filter.length === 1) {
      filter = filter[0];
    }

    return filter;
  },
  _removeFilterByIndex: function _removeFilterByIndex(filter, filterIndex, isSelectAll) {
    var operation = filter[1];

    if (filterIndex > 0) {
      filter.splice(filterIndex - 1, 2);
    } else {
      filter.splice(filterIndex, 2);
    }

    if (isSelectAll && operation === 'and') {
      filter.splice(0, filter.length);
    }
  },
  _isSimpleKeyFilter: function _isSimpleKeyFilter(filter, key) {
    return filter.length === 3 && filter[0] === key && filter[1] === '=';
  },
  _isKeyFilter: function _isKeyFilter(filter) {
    if (filter.length === 2 && filter[0] === '!') {
      return this._isKeyFilter(filter[1]);
    }

    var keyField = this._getKeyExpr();

    if (Array.isArray(keyField)) {
      if (filter.length !== keyField.length * 2 - 1) {
        return false;
      }

      for (var i = 0; i < keyField.length; i++) {
        if (i > 0 && filter[i * 2 - 1] !== 'and') {
          return false;
        }

        if (!this._isSimpleKeyFilter(filter[i * 2], keyField[i])) {
          return false;
        }
      }

      return true;
    }

    return this._isSimpleKeyFilter(filter, keyField);
  },
  _hasKeyFiltersOnlyStartingFromIndex: function _hasKeyFiltersOnlyStartingFromIndex(selectionFilter, filterIndex) {
    if (filterIndex >= 0) {
      for (var i = filterIndex; i < selectionFilter.length; i++) {
        if (typeof selectionFilter[i] !== 'string' && !this._isKeyFilter(selectionFilter[i])) {
          return false;
        }
      }

      return true;
    }

    return false;
  },
  _removeSameFilter: function _removeSameFilter(selectionFilter, filter, inverted, isSelectAll) {
    filter = inverted ? ['!', filter] : filter;

    if (JSON.stringify(filter) === JSON.stringify(selectionFilter)) {
      selectionFilter.splice(0, selectionFilter.length);
      return 0;
    }

    var filterIndex = this._findSubFilter(selectionFilter, filter);

    if (filterIndex >= 0) {
      this._removeFilterByIndex(selectionFilter, filterIndex, isSelectAll);

      return filterIndex;
    } else {
      for (var i = 0; i < selectionFilter.length; i++) {
        if (Array.isArray(selectionFilter[i]) && selectionFilter[i].length > 2) {
          var _filterIndex = this._removeSameFilter(selectionFilter[i], filter, false, isSelectAll);

          if (_filterIndex >= 0) {
            if (!selectionFilter[i].length) {
              this._removeFilterByIndex(selectionFilter, i, isSelectAll);
            } else if (selectionFilter[i].length === 1) {
              selectionFilter[i] = selectionFilter[i][0];
            }

            return _filterIndex;
          }
        }
      }

      return -1;
    }
  },
  getSelectAllState: function getSelectAllState() {
    var filter = this.options.filter();
    var selectionFilter = this.options.selectionFilter;
    if (!selectionFilter) return true;
    if (!selectionFilter.length) return false;
    if (!filter || !filter.length) return undefined;
    selectionFilter = this._denormalizeFilter(selectionFilter);

    if (this._isLastSubFilter(selectionFilter, filter)) {
      return true;
    }

    if (this._isLastSubFilter(selectionFilter, ['!', filter])) {
      return false;
    }

    return undefined;
  }
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _array = __webpack_require__(12);

var _array_compare = __webpack_require__(116);

var _query = _interopRequireDefault(__webpack_require__(48));

var _deferred = __webpack_require__(9);

var _selection_filter = __webpack_require__(188);

var _ui = _interopRequireDefault(__webpack_require__(28));

var _selection = _interopRequireDefault(__webpack_require__(115));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _selection.default.inherit({
  ctor: function ctor(options) {
    this.callBase(options);

    this._initSelectedItemKeyHash();
  },
  _initSelectedItemKeyHash: function _initSelectedItemKeyHash() {
    this._setOption('keyHashIndices', this.options.equalByReference ? null : {});
  },
  getSelectedItemKeys: function getSelectedItemKeys() {
    return this.options.selectedItemKeys.slice(0);
  },
  getSelectedItems: function getSelectedItems() {
    return this.options.selectedItems.slice(0);
  },
  _preserveSelectionUpdate: function _preserveSelectionUpdate(items, isDeselect) {
    var keyOf = this.options.keyOf;
    var keyIndicesToRemoveMap;
    var keyIndex;
    var i;
    if (!keyOf) return;
    var isBatchDeselect = isDeselect && items.length > 1 && !this.options.equalByReference;

    if (isBatchDeselect) {
      keyIndicesToRemoveMap = {};
    }

    for (i = 0; i < items.length; i++) {
      var item = items[i];
      var key = keyOf(item);

      if (isDeselect) {
        keyIndex = this.removeSelectedItem(key, keyIndicesToRemoveMap);

        if (keyIndicesToRemoveMap && keyIndex >= 0) {
          keyIndicesToRemoveMap[keyIndex] = true;
        }
      } else {
        this.addSelectedItem(key, item);
      }
    }

    if (isBatchDeselect) {
      this._batchRemoveSelectedItems(keyIndicesToRemoveMap);
    }
  },
  _batchRemoveSelectedItems: function _batchRemoveSelectedItems(keyIndicesToRemoveMap) {
    var selectedItemKeys = this.options.selectedItemKeys.slice(0);
    var selectedItems = this.options.selectedItems.slice(0);
    this.options.selectedItemKeys.length = 0;
    this.options.selectedItems.length = 0;

    for (var i = 0; i < selectedItemKeys.length; i++) {
      if (!keyIndicesToRemoveMap[i]) {
        this.options.selectedItemKeys.push(selectedItemKeys[i]);
        this.options.selectedItems.push(selectedItems[i]);
      }
    }

    this._initSelectedItemKeyHash();

    this.updateSelectedItemKeyHash(this.options.selectedItemKeys);
  },
  _loadSelectedItemsCore: function _loadSelectedItemsCore(keys, isDeselect, isSelectAll) {
    var deferred = new _deferred.Deferred();
    var key = this.options.key();

    if (!keys.length && !isSelectAll) {
      deferred.resolve([]);
      return deferred;
    }

    var filter = this.options.filter();

    if (isSelectAll && isDeselect && !filter) {
      deferred.resolve(this.getSelectedItems());
      return deferred;
    }

    var selectionFilterCreator = new _selection_filter.SelectionFilterCreator(keys, isSelectAll);
    var combinedFilter = selectionFilterCreator.getCombinedFilter(key, filter);
    var deselectedItems = [];

    if (isDeselect) {
      deselectedItems = combinedFilter ? (0, _query.default)(this.options.selectedItems).filter(combinedFilter).toArray() : this.options.selectedItems.slice(0);
    }

    var filteredItems = deselectedItems.length ? deselectedItems : this.options.plainItems(true).filter(this.options.isSelectableItem).map(this.options.getItemData);
    var localFilter = selectionFilterCreator.getLocalFilter(this.options.keyOf, this.equalKeys.bind(this), this.options.equalByReference, key);
    filteredItems = filteredItems.filter(localFilter);

    if (deselectedItems.length || !isSelectAll && filteredItems.length === keys.length) {
      deferred.resolve(filteredItems);
    } else {
      deferred = this._loadFilteredData(combinedFilter, localFilter, null, isSelectAll);
    }

    return deferred;
  },
  _replaceSelectionUpdate: function _replaceSelectionUpdate(items) {
    var internalKeys = [];
    var keyOf = this.options.keyOf;
    if (!keyOf) return;

    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      var key = keyOf(item);
      internalKeys.push(key);
    }

    this.setSelectedItems(internalKeys, items);
  },
  _warnOnIncorrectKeys: function _warnOnIncorrectKeys(keys) {
    var allowNullValue = this.options.allowNullValue;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if ((!allowNullValue || key !== null) && !this.isItemKeySelected(key)) {
        _ui.default.log('W1002', key);
      }
    }
  },
  _isMultiSelectEnabled: function _isMultiSelectEnabled() {
    var mode = this.options.mode;
    return mode === 'all' || mode === 'multiple';
  },
  _requestInProgress: function _requestInProgress() {
    var _this$_lastLoadDeferr;

    return ((_this$_lastLoadDeferr = this._lastLoadDeferred) === null || _this$_lastLoadDeferr === void 0 ? void 0 : _this$_lastLoadDeferr.state()) === 'pending';
  },
  _concatRequestsItems: function _concatRequestsItems(keys, isDeselect, oldRequestItems, updatedKeys) {
    var selectedItems;
    var deselectedItems = isDeselect ? keys : [];

    if (updatedKeys) {
      selectedItems = updatedKeys;
    } else {
      selectedItems = (0, _array.removeDuplicates)(keys, this.options.selectedItemKeys);
    }

    return {
      addedItems: oldRequestItems.added.concat(selectedItems),
      removedItems: oldRequestItems.removed.concat(deselectedItems),
      keys: keys
    };
  },
  _collectLastRequestData: function _collectLastRequestData(keys, isDeselect, isSelectAll, updatedKeys) {
    var isDeselectAll = isDeselect && isSelectAll;
    var oldRequestItems = {
      added: [],
      removed: []
    };

    var multiSelectEnabled = this._isMultiSelectEnabled();

    var lastRequestData = multiSelectEnabled ? this._lastRequestData : {};

    if (multiSelectEnabled) {
      if (this._shouldMergeWithLastRequest) {
        if (isDeselectAll) {
          this._lastLoadDeferred.reject();

          lastRequestData = {};
        } else if (!(0, _array_compare.isKeysEqual)(keys, this.options.selectedItemKeys)) {
          oldRequestItems.added = lastRequestData.addedItems;
          oldRequestItems.removed = lastRequestData.removedItems;

          if (!isDeselect) {
            this._lastLoadDeferred.reject();
          }
        }
      }

      lastRequestData = this._concatRequestsItems(keys, isDeselect, oldRequestItems, this._shouldMergeWithLastRequest ? undefined : updatedKeys);
    }

    return lastRequestData;
  },
  _updateKeysByLastRequestData: function _updateKeysByLastRequestData(keys, isDeselect, isSelectAll) {
    var currentKeys = keys;

    if (this._isMultiSelectEnabled() && this._shouldMergeWithLastRequest && !isDeselect && !isSelectAll) {
      var _this$_lastRequestDat, _this$_lastRequestDat2;

      currentKeys = (0, _array.removeDuplicates)(keys.concat((_this$_lastRequestDat = this._lastRequestData) === null || _this$_lastRequestDat === void 0 ? void 0 : _this$_lastRequestDat.addedItems), (_this$_lastRequestDat2 = this._lastRequestData) === null || _this$_lastRequestDat2 === void 0 ? void 0 : _this$_lastRequestDat2.removedItems);
      currentKeys = (0, _array.uniqueValues)(currentKeys);
    }

    return currentKeys;
  },
  _loadSelectedItems: function _loadSelectedItems(keys, isDeselect, isSelectAll, updatedKeys) {
    var that = this;
    var deferred = new _deferred.Deferred();
    this._shouldMergeWithLastRequest = this._requestInProgress();
    this._lastRequestData = this._collectLastRequestData(keys, isDeselect, isSelectAll, updatedKeys);
    (0, _deferred.when)(that._lastLoadDeferred).always(function () {
      var currentKeys = that._updateKeysByLastRequestData(keys, isDeselect, isSelectAll);

      that._shouldMergeWithLastRequest = false;

      that._loadSelectedItemsCore(currentKeys, isDeselect, isSelectAll).done(deferred.resolve).fail(deferred.reject);
    });
    that._lastLoadDeferred = deferred;
    return deferred;
  },
  selectedItemKeys: function selectedItemKeys(keys, preserve, isDeselect, isSelectAll, updatedKeys) {
    var that = this;

    var deferred = that._loadSelectedItems(keys, isDeselect, isSelectAll, updatedKeys);

    deferred.done(function (items) {
      if (preserve) {
        that._preserveSelectionUpdate(items, isDeselect);
      } else {
        that._replaceSelectionUpdate(items);
      } ///#DEBUG


      if (!isSelectAll && !isDeselect) {
        that._warnOnIncorrectKeys(keys);
      } ///#ENDDEBUG


      that.onSelectionChanged();
    });
    return deferred;
  },
  addSelectedItem: function addSelectedItem(key, itemData) {
    if ((0, _type.isDefined)(itemData) && !this.options.ignoreDisabledItems && itemData.disabled) {
      if (this.options.disabledItemKeys.indexOf(key) === -1) {
        this.options.disabledItemKeys.push(key);
      }

      return;
    }

    var keyHash = this._getKeyHash(key);

    if (this._indexOfSelectedItemKey(keyHash) === -1) {
      if (!(0, _type.isObject)(keyHash) && this.options.keyHashIndices) {
        this.options.keyHashIndices[keyHash] = [this.options.selectedItemKeys.length];
      }

      this.options.selectedItemKeys.push(key);
      this.options.addedItemKeys.push(key);
      this.options.addedItems.push(itemData);
      this.options.selectedItems.push(itemData);
    }
  },
  _getSelectedIndexByKey: function _getSelectedIndexByKey(key, ignoreIndicesMap) {
    var selectedItemKeys = this.options.selectedItemKeys;

    for (var index = 0; index < selectedItemKeys.length; index++) {
      if ((!ignoreIndicesMap || !ignoreIndicesMap[index]) && this.equalKeys(selectedItemKeys[index], key)) {
        return index;
      }
    }

    return -1;
  },
  _getSelectedIndexByHash: function _getSelectedIndexByHash(key, ignoreIndicesMap) {
    var indices = this.options.keyHashIndices[key];

    if (indices && indices.length > 1 && ignoreIndicesMap) {
      indices = indices.filter(function (index) {
        return !ignoreIndicesMap[index];
      });
    }

    return indices && indices[0] >= 0 ? indices[0] : -1;
  },
  _indexOfSelectedItemKey: function _indexOfSelectedItemKey(key, ignoreIndicesMap) {
    var selectedIndex;

    if (this.options.equalByReference) {
      selectedIndex = this.options.selectedItemKeys.indexOf(key);
    } else if ((0, _type.isObject)(key)) {
      selectedIndex = this._getSelectedIndexByKey(key, ignoreIndicesMap);
    } else {
      selectedIndex = this._getSelectedIndexByHash(key, ignoreIndicesMap);
    }

    return selectedIndex;
  },
  _shiftSelectedKeyIndices: function _shiftSelectedKeyIndices(keyIndex) {
    for (var currentKeyIndex = keyIndex; currentKeyIndex < this.options.selectedItemKeys.length; currentKeyIndex++) {
      var currentKey = this.options.selectedItemKeys[currentKeyIndex];
      var currentKeyHash = (0, _common.getKeyHash)(currentKey);
      var currentKeyIndices = this.options.keyHashIndices[currentKeyHash];
      if (!currentKeyIndices) continue;

      for (var i = 0; i < currentKeyIndices.length; i++) {
        if (currentKeyIndices[i] > keyIndex) {
          currentKeyIndices[i]--;
        }
      }
    }
  },
  removeSelectedItem: function removeSelectedItem(key, keyIndicesToRemoveMap) {
    var keyHash = this._getKeyHash(key);

    var isBatchDeselect = !!keyIndicesToRemoveMap;

    var keyIndex = this._indexOfSelectedItemKey(keyHash, keyIndicesToRemoveMap);

    if (keyIndex < 0) {
      return keyIndex;
    }

    this.options.removedItemKeys.push(key);
    this.options.removedItems.push(this.options.selectedItems[keyIndex]);

    if (isBatchDeselect) {
      return keyIndex;
    }

    this.options.selectedItemKeys.splice(keyIndex, 1);
    this.options.selectedItems.splice(keyIndex, 1);

    if ((0, _type.isObject)(keyHash) || !this.options.keyHashIndices) {
      return keyIndex;
    }

    var keyIndices = this.options.keyHashIndices[keyHash];

    if (!keyIndices) {
      return keyIndex;
    }

    keyIndices.shift();

    if (!keyIndices.length) {
      delete this.options.keyHashIndices[keyHash];
    }

    this._shiftSelectedKeyIndices(keyIndex);

    return keyIndex;
  },
  _updateAddedItemKeys: function _updateAddedItemKeys(keys, items) {
    for (var i = 0; i < keys.length; i++) {
      if (!this.isItemKeySelected(keys[i])) {
        this.options.addedItemKeys.push(keys[i]);
        this.options.addedItems.push(items[i]);
      }
    }
  },
  _updateRemovedItemKeys: function _updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems) {
    for (var i = 0; i < oldSelectedKeys.length; i++) {
      if (!this.isItemKeySelected(oldSelectedKeys[i])) {
        this.options.removedItemKeys.push(oldSelectedKeys[i]);
        this.options.removedItems.push(oldSelectedItems[i]);
      }
    }
  },
  _isItemSelectionInProgress: function _isItemSelectionInProgress(key, checkPending) {
    var shouldCheckPending = checkPending && this._lastRequestData && this._requestInProgress();

    if (shouldCheckPending) {
      var _this$_lastRequestDat3;

      return ((_this$_lastRequestDat3 = this._lastRequestData.addedItems) === null || _this$_lastRequestDat3 === void 0 ? void 0 : _this$_lastRequestDat3.indexOf(key)) !== -1;
    } else {
      return false;
    }
  },
  _getKeyHash: function _getKeyHash(key) {
    return this.options.equalByReference ? key : (0, _common.getKeyHash)(key);
  },
  setSelectedItems: function setSelectedItems(keys, items) {
    this._updateAddedItemKeys(keys, items);

    var oldSelectedKeys = this.options.selectedItemKeys;
    var oldSelectedItems = this.options.selectedItems;

    if (!this.options.equalByReference) {
      this._initSelectedItemKeyHash();

      this.updateSelectedItemKeyHash(keys);
    }

    this._setOption('selectedItemKeys', keys);

    this._setOption('selectedItems', items);

    this._updateRemovedItemKeys(keys, oldSelectedKeys, oldSelectedItems);
  },
  isItemDataSelected: function isItemDataSelected(itemData) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var key = this.options.keyOf(itemData);
    return this.isItemKeySelected(key, options);
  },
  isItemKeySelected: function isItemKeySelected(key) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var result = this._isItemSelectionInProgress(key, options.checkPending);

    if (!result) {
      var keyHash = this._getKeyHash(key);

      var index = this._indexOfSelectedItemKey(keyHash);

      result = index !== -1;
    }

    return result;
  },
  getSelectAllState: function getSelectAllState(visibleOnly) {
    if (visibleOnly) {
      return this._getVisibleSelectAllState();
    } else {
      return this._getFullSelectAllState();
    }
  }
});

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.SelectionFilterCreator = void 0;

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var SelectionFilterCreator = function SelectionFilterCreator(selectedItemKeys, isSelectAll) {
  this.getLocalFilter = function (keyGetter, equalKeys, equalByReference, keyExpr) {
    equalKeys = equalKeys === undefined ? _common.equalByValue : equalKeys;
    return functionFilter.bind(this, equalKeys, keyGetter, equalByReference, keyExpr);
  };

  this.getExpr = function (keyExpr) {
    if (!keyExpr) {
      return;
    }

    var filterExpr;
    selectedItemKeys.forEach(function (key, index) {
      filterExpr = filterExpr || [];
      var filterExprPart;

      if (index > 0) {
        filterExpr.push(isSelectAll ? 'and' : 'or');
      }

      if ((0, _type.isString)(keyExpr)) {
        filterExprPart = getFilterForPlainKey(keyExpr, key);
      } else {
        filterExprPart = getFilterForCompositeKey(keyExpr, key);
      }

      filterExpr.push(filterExprPart);
    });

    if (filterExpr && filterExpr.length === 1) {
      filterExpr = filterExpr[0];
    }

    return filterExpr;
  };

  this.getCombinedFilter = function (keyExpr, dataSourceFilter) {
    var filterExpr = this.getExpr(keyExpr);
    var combinedFilter = filterExpr;

    if (isSelectAll && dataSourceFilter) {
      if (filterExpr) {
        combinedFilter = [];
        combinedFilter.push(filterExpr);
        combinedFilter.push(dataSourceFilter);
      } else {
        combinedFilter = dataSourceFilter;
      }
    }

    return combinedFilter;
  };

  var selectedItemKeyHashesMap;

  var getSelectedItemKeyHashesMap = function getSelectedItemKeyHashesMap(selectedItemKeys) {
    if (!selectedItemKeyHashesMap) {
      selectedItemKeyHashesMap = {};

      for (var i = 0; i < selectedItemKeys.length; i++) {
        selectedItemKeyHashesMap[(0, _common.getKeyHash)(selectedItemKeys[i])] = true;
      }
    }

    return selectedItemKeyHashesMap;
  };

  var normalizeKeys = function normalizeKeys(keys, keyOf, keyExpr) {
    return Array.isArray(keyExpr) ? keys.map(function (key) {
      return keyOf(key);
    }) : keys;
  };

  function functionFilter(equalKeys, keyOf, equalByReference, keyExpr, item) {
    var key = keyOf(item);
    var keyHash;
    var i;

    if (!equalByReference) {
      keyHash = (0, _common.getKeyHash)(key);

      if (!(0, _type.isObject)(keyHash)) {
        var selectedKeyHashesMap = getSelectedItemKeyHashesMap(normalizeKeys(selectedItemKeys, keyOf, keyExpr));

        if (selectedKeyHashesMap[keyHash]) {
          return !isSelectAll;
        }

        return !!isSelectAll;
      }
    }

    for (i = 0; i < selectedItemKeys.length; i++) {
      if (equalKeys(selectedItemKeys[i], key)) {
        return !isSelectAll;
      }
    }

    return !!isSelectAll;
  }

  function getFilterForPlainKey(keyExpr, keyValue) {
    if (keyValue === undefined) {
      return;
    }

    return [keyExpr, isSelectAll ? '<>' : '=', keyValue];
  }

  function getFilterForCompositeKey(keyExpr, itemKeyValue) {
    var filterExpr = [];

    for (var i = 0, length = keyExpr.length; i < length; i++) {
      var currentKeyExpr = keyExpr[i];
      var currentKeyValue = itemKeyValue && itemKeyValue[currentKeyExpr];
      var filterExprPart = getFilterForPlainKey(currentKeyExpr, currentKeyValue);

      if (!filterExprPart) {
        break;
      }

      if (i > 0) {
        filterExpr.push(isSelectAll ? 'or' : 'and');
      }

      filterExpr.push(filterExprPart);
    }

    return filterExpr;
  }
};

exports.SelectionFilterCreator = SelectionFilterCreator;

/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _type = __webpack_require__(1);

var isCorrectStructure = function isCorrectStructure(data) {
  return Array.isArray(data) && data.every(function (item) {
    var hasTwoFields = Object.keys(item).length === 2;
    var hasCorrectFields = 'key' in item && 'items' in item;
    return hasTwoFields && hasCorrectFields && Array.isArray(item.items);
  });
};

var _default = {
  _getSpecificDataSourceOption: function _getSpecificDataSourceOption() {
    var groupKey = 'key';
    var dataSource = this.option('dataSource');
    var hasSimpleItems = false;
    var data = {};

    if (this._getGroupedOption() && isCorrectStructure(dataSource)) {
      data = dataSource.reduce(function (accumulator, item) {
        var items = item.items.map(function (innerItem) {
          if (!(0, _type.isObject)(innerItem)) {
            innerItem = {
              text: innerItem
            };
            hasSimpleItems = true;
          }

          if (!(groupKey in innerItem)) {
            innerItem[groupKey] = item.key;
          }

          return innerItem;
        });
        return accumulator.concat(items);
      }, []);
      dataSource = {
        store: {
          type: 'array',
          data: data
        },
        group: {
          selector: 'key',
          keepInitialKeyOrder: true
        }
      };

      if (hasSimpleItems) {
        dataSource.searchExpr = 'text';
      }
    }

    return dataSource;
  }
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _extend = __webpack_require__(2);

var _message = _interopRequireDefault(__webpack_require__(17));

var _text_box = _interopRequireDefault(__webpack_require__(191));

var _ui = _interopRequireDefault(__webpack_require__(28));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      searchMode: '',
      searchExpr: null,
      searchValue: '',
      searchEnabled: false,
      searchEditorOptions: {}
    });
  },
  _initMarkup: function _initMarkup() {
    this._renderSearch();

    this.callBase();
  },
  _renderSearch: function _renderSearch() {
    var $element = this.$element();
    var searchEnabled = this.option('searchEnabled');

    var searchBoxClassName = this._addWidgetPrefix('search');

    var rootElementClassName = this._addWidgetPrefix('with-search');

    if (!searchEnabled) {
      $element.removeClass(rootElementClassName);

      this._removeSearchBox();

      return;
    }

    var editorOptions = this._getSearchEditorOptions();

    if (this._searchEditor) {
      this._searchEditor.option(editorOptions);
    } else {
      $element.addClass(rootElementClassName);
      this._$searchEditorElement = (0, _renderer.default)('<div>').addClass(searchBoxClassName).prependTo($element);
      this._searchEditor = this._createComponent(this._$searchEditorElement, _text_box.default, editorOptions);
    }
  },
  _removeSearchBox: function _removeSearchBox() {
    this._$searchEditorElement && this._$searchEditorElement.remove();
    delete this._$searchEditorElement;
    delete this._searchEditor;
  },
  _getSearchEditorOptions: function _getSearchEditorOptions() {
    var that = this;
    var userEditorOptions = that.option('searchEditorOptions');

    var searchText = _message.default.format('Search');

    return (0, _extend.extend)({
      mode: 'search',
      placeholder: searchText,
      tabIndex: that.option('tabIndex'),
      value: that.option('searchValue'),
      valueChangeEvent: 'input',
      inputAttr: {
        'aria-label': searchText
      },
      onValueChanged: function onValueChanged(e) {
        var searchTimeout = that.option('searchTimeout');
        that._valueChangeDeferred = new _deferred.Deferred();
        clearTimeout(that._valueChangeTimeout);

        that._valueChangeDeferred.done(function () {
          this.option('searchValue', e.value);
        }.bind(that));

        if (e.event && e.event.type === 'input' && searchTimeout) {
          that._valueChangeTimeout = setTimeout(function () {
            that._valueChangeDeferred.resolve();
          }, searchTimeout);
        } else {
          that._valueChangeDeferred.resolve();
        }
      }
    }, userEditorOptions);
  },
  _getAriaTarget: function _getAriaTarget() {
    if (this.option('searchEnabled')) {
      return this._itemContainer(true);
    }

    return this.$element();
  },
  _focusTarget: function _focusTarget() {
    if (this.option('searchEnabled')) {
      return this._itemContainer(true);
    }

    return this.callBase();
  },
  _updateFocusState: function _updateFocusState(e, isFocused) {
    if (this.option('searchEnabled')) {
      this._toggleFocusClass(isFocused, this.$element());
    }

    this.callBase(e, isFocused);
  },
  getOperationBySearchMode: function getOperationBySearchMode(searchMode) {
    return searchMode === 'equals' ? '=' : searchMode;
  },
  _cleanAria: function _cleanAria($target) {
    this.setAria({
      'role': null,
      'activedescendant': null
    }, $target);
    $target.attr('tabIndex', null);
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'searchEnabled':
      case 'searchEditorOptions':
        this._cleanAria(this.option('searchEnabled') ? this.$element() : this._itemContainer());

        this._invalidate();

        break;

      case 'searchExpr':
      case 'searchMode':
      case 'searchValue':
        if (!this._dataSource) {
          _ui.default.log('W1009');

          return;
        }

        if (args.name === 'searchMode') {
          this._dataSource.searchOperation(this.getOperationBySearchMode(args.value));
        } else {
          this._dataSource[args.name](args.value);
        }

        this._dataSource.load();

        break;

      case 'searchTimeout':
        break;

      default:
        this.callBase(args);
    }
  },
  focus: function focus() {
    if (!this.option('focusedElement') && this.option('searchEnabled')) {
      this._searchEditor && this._searchEditor.focus();
      return;
    }

    this.callBase();
  },
  _refresh: function _refresh() {
    if (this._valueChangeDeferred) {
      this._valueChangeDeferred.resolve();
    }

    this.callBase();
  }
};
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _text_box = _interopRequireDefault(__webpack_require__(192));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _text_box.default;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _window = __webpack_require__(7);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _array = __webpack_require__(12);

var _extend = __webpack_require__(2);

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _ui = _interopRequireDefault(__webpack_require__(193));

var _index = __webpack_require__(6);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)();
var navigator = (0, _window.getNavigator)();
// STYLE textBox
var ua = navigator.userAgent;
var ignoreKeys = ['backspace', 'tab', 'enter', 'pageUp', 'pageDown', 'end', 'home', 'leftArrow', 'rightArrow', 'downArrow', 'upArrow', 'del'];
var TEXTBOX_CLASS = 'dx-textbox';
var SEARCHBOX_CLASS = 'dx-searchbox';
var ICON_CLASS = 'dx-icon';
var SEARCH_ICON_CLASS = 'dx-icon-search';

var TextBox = _ui.default.inherit({
  ctor: function ctor(element, options) {
    if (options) {
      this._showClearButton = options.showClearButton;
    }

    this.callBase.apply(this, arguments);
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      value: '',
      mode: 'text',
      maxLength: null
    });
  },
  _initMarkup: function _initMarkup() {
    this.$element().addClass(TEXTBOX_CLASS);
    this.callBase();
    this.setAria('role', 'textbox');
  },
  _renderContentImpl: function _renderContentImpl() {
    this._renderMaxLengthHandlers();

    this.callBase();
  },
  _renderInputType: function _renderInputType() {
    this.callBase();

    this._renderSearchMode();
  },
  _renderMaxLengthHandlers: function _renderMaxLengthHandlers() {
    if (this._isAndroidOrIE()) {
      _events_engine.default.on(this._input(), (0, _index.addNamespace)('keydown', this.NAME), this._onKeyDownCutOffHandler.bind(this));

      _events_engine.default.on(this._input(), (0, _index.addNamespace)('change', this.NAME), this._onChangeCutOffHandler.bind(this));
    }
  },
  _useTemplates: function _useTemplates() {
    return false;
  },
  _renderProps: function _renderProps() {
    this.callBase();

    this._toggleMaxLengthProp();
  },
  _toggleMaxLengthProp: function _toggleMaxLengthProp() {
    var maxLength = this._getMaxLength();

    if (maxLength && maxLength > 0) {
      this._input().attr('maxLength', maxLength);
    } else {
      this._input().removeAttr('maxLength');
    }
  },
  _renderSearchMode: function _renderSearchMode() {
    var $element = this._$element;

    if (this.option('mode') === 'search') {
      $element.addClass(SEARCHBOX_CLASS);

      this._renderSearchIcon();

      if (this._showClearButton === undefined) {
        this._showClearButton = this.option('showClearButton');
        this.option('showClearButton', true);
      }
    } else {
      $element.removeClass(SEARCHBOX_CLASS);
      this._$searchIcon && this._$searchIcon.remove();
      this.option('showClearButton', this._showClearButton === undefined ? this.option('showClearButton') : this._showClearButton);
      delete this._showClearButton;
    }
  },
  _renderSearchIcon: function _renderSearchIcon() {
    var $searchIcon = (0, _renderer.default)('<div>').addClass(ICON_CLASS).addClass(SEARCH_ICON_CLASS);
    $searchIcon.prependTo(this._input().parent());
    this._$searchIcon = $searchIcon;
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'maxLength':
        this._toggleMaxLengthProp();

        this._renderMaxLengthHandlers();

        break;

      case 'mask':
        this.callBase(args);

        this._toggleMaxLengthProp();

        break;

      default:
        this.callBase(args);
    }
  },
  _onKeyDownCutOffHandler: function _onKeyDownCutOffHandler(e) {
    var actualMaxLength = this._getMaxLength();

    if (actualMaxLength && !e.ctrlKey && !this._hasSelection()) {
      var $input = (0, _renderer.default)(e.target);
      var key = (0, _index.normalizeKeyName)(e);

      this._cutOffExtraChar($input);

      return $input.val().length < actualMaxLength || (0, _array.inArray)(key, ignoreKeys) !== -1 || window.getSelection().toString() !== '';
    } else {
      return true;
    }
  },
  _onChangeCutOffHandler: function _onChangeCutOffHandler(e) {
    var $input = (0, _renderer.default)(e.target);

    if (this.option('maxLength')) {
      this._cutOffExtraChar($input);
    }
  },
  _cutOffExtraChar: function _cutOffExtraChar($input) {
    var actualMaxLength = this._getMaxLength();

    var textInput = $input.val();

    if (actualMaxLength && textInput.length > actualMaxLength) {
      $input.val(textInput.substr(0, actualMaxLength));
    }
  },
  _getMaxLength: function _getMaxLength() {
    var isMaskSpecified = !!this.option('mask');
    return isMaskSpecified ? null : this.option('maxLength');
  },
  _isAndroidOrIE: function _isAndroidOrIE() {
    var realDevice = _devices.default.real();

    var version = realDevice.version.join('.');
    return _browser.default.msie || realDevice.platform === 'android' && version && /^(2\.|4\.1)/.test(version) && !/chrome/i.test(ua);
  }
}); ///#DEBUG


TextBox.__internals = {
  uaAccessor: function uaAccessor(value) {
    if (!arguments.length) {
      return window.DevExpress.ui;
    }

    ua = value;
  },
  SEARCHBOX_CLASS: SEARCHBOX_CLASS,
  SEARCH_ICON_CLASS: SEARCH_ICON_CLASS
}; ///#ENDDEBUG

(0, _component_registrator.default)('dxTextBox', TextBox);
var _default = TextBox;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _uiText_editor = _interopRequireDefault(__webpack_require__(194));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _component_registrator.default)('dxTextEditor', _uiText_editor.default);
var _default = _uiText_editor.default;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _utils = _interopRequireDefault(__webpack_require__(195));

var _utils2 = __webpack_require__(196);

var _iterator = __webpack_require__(4);

var _index = __webpack_require__(6);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _extend = __webpack_require__(2);

var _selectors = __webpack_require__(35);

var _type = __webpack_require__(1);

var _message = _interopRequireDefault(__webpack_require__(17));

var _common = __webpack_require__(3);

var _string = __webpack_require__(46);

var _wheel = __webpack_require__(98);

var _uiText_editorMask = __webpack_require__(197);

var _uiText_editor = _interopRequireDefault(__webpack_require__(198));

var _uiText_editorMaskStrategy = _interopRequireDefault(__webpack_require__(203));

var _uiText_editorMaskStrategy2 = _interopRequireDefault(__webpack_require__(204));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var stubCaret = function stubCaret() {
  return {};
};

var caret = _utils.default;
var EMPTY_CHAR = ' ';
var ESCAPED_CHAR = '\\';
var TEXTEDITOR_MASKED_CLASS = 'dx-texteditor-masked';
var FORWARD_DIRECTION = 'forward';
var BACKWARD_DIRECTION = 'backward';
var buildInMaskRules = {
  '0': /[0-9]/,
  '9': /[0-9\s]/,
  '#': /[-+0-9\s]/,
  'L': function L(char) {
    return isLiteralChar(char);
  },
  'l': function l(char) {
    return isLiteralChar(char) || isSpaceChar(char);
  },
  'C': /\S/,
  'c': /./,
  'A': function A(char) {
    return isLiteralChar(char) || isNumericChar(char);
  },
  'a': function a(char) {
    return isLiteralChar(char) || isNumericChar(char) || isSpaceChar(char);
  }
};

function isNumericChar(char) {
  return /[0-9]/.test(char);
}

function isLiteralChar(char) {
  var code = char.charCodeAt();
  return 64 < code && code < 91 || 96 < code && code < 123 || code > 127;
}

function isSpaceChar(char) {
  return char === ' ';
}

var TextEditorMask = _uiText_editor.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      mask: '',
      maskChar: '_',
      maskRules: {},
      maskInvalidMessage: _message.default.format('validation-mask'),
      useMaskedValue: false,
      showMaskMode: 'always'
    });
  },
  _supportedKeys: function _supportedKeys() {
    var that = this;
    var keyHandlerMap = {
      backspace: that._maskStrategy.getHandler('backspace'),
      del: that._maskStrategy.getHandler('del'),
      enter: that._changeHandler
    };
    var result = that.callBase();
    (0, _iterator.each)(keyHandlerMap, function (key, callback) {
      var parentHandler = result[key];

      result[key] = function (e) {
        that.option('mask') && callback.call(that, e);
        parentHandler && parentHandler(e);
      };
    });
    return result;
  },
  _getSubmitElement: function _getSubmitElement() {
    return !this.option('mask') ? this.callBase() : this._$hiddenElement;
  },
  _init: function _init() {
    this.callBase();

    this._initMaskStrategy();
  },
  _initMaskStrategy: function _initMaskStrategy() {
    this._maskStrategy = (0, _utils2.isInputEventsL2Supported)() ? new _uiText_editorMaskStrategy2.default(this) : // FF, old Safari and desktop Chrome (https://bugs.chromium.org/p/chromium/issues/detail?id=947408)
    new _uiText_editorMaskStrategy.default(this);
  },
  _initMarkup: function _initMarkup() {
    this._renderHiddenElement();

    this.callBase();
  },
  _attachMouseWheelEventHandlers: function _attachMouseWheelEventHandlers() {
    var hasMouseWheelHandler = this._onMouseWheel !== _common.noop;

    if (!hasMouseWheelHandler) {
      return;
    }

    var input = this._input();

    var eventName = (0, _index.addNamespace)(_wheel.name, this.NAME);

    var mouseWheelAction = this._createAction(function (e) {
      var event = e.event;

      if ((0, _selectors.focused)(input) && !(0, _index.isCommandKeyPressed)(event)) {
        this._onMouseWheel(event);

        event.preventDefault();
        event.stopPropagation();
      }
    }.bind(this));

    _events_engine.default.off(input, eventName);

    _events_engine.default.on(input, eventName, function (e) {
      mouseWheelAction({
        event: e
      });
    });
  },
  _onMouseWheel: _common.noop,
  _render: function _render() {
    this._renderMask();

    this.callBase();

    this._attachMouseWheelEventHandlers();
  },
  _renderHiddenElement: function _renderHiddenElement() {
    if (this.option('mask')) {
      this._$hiddenElement = (0, _renderer.default)('<input>').attr('type', 'hidden').appendTo(this._inputWrapper());
    }
  },
  _removeHiddenElement: function _removeHiddenElement() {
    this._$hiddenElement && this._$hiddenElement.remove();
  },
  _renderMask: function _renderMask() {
    this.$element().removeClass(TEXTEDITOR_MASKED_CLASS);
    this._maskRulesChain = null;

    this._maskStrategy.detachEvents();

    if (!this.option('mask')) {
      return;
    }

    this.$element().addClass(TEXTEDITOR_MASKED_CLASS);

    this._maskStrategy.attachEvents();

    this._parseMask();

    this._renderMaskedValue();
  },
  _suppressCaretChanging: function _suppressCaretChanging(callback, args) {
    caret = stubCaret;

    try {
      callback.apply(this, args);
    } finally {
      caret = _utils.default;
    }
  },
  _changeHandler: function _changeHandler(e) {
    var $input = this._input();

    var inputValue = $input.val();

    if (inputValue === this._changedValue) {
      return;
    }

    this._changedValue = inputValue;
    var changeEvent = (0, _index.createEvent)(e, {
      type: 'change'
    });

    _events_engine.default.trigger($input, changeEvent);
  },
  _parseMask: function _parseMask() {
    this._maskRules = (0, _extend.extend)({}, buildInMaskRules, this.option('maskRules'));
    this._maskRulesChain = this._parseMaskRule(0);
  },
  _parseMaskRule: function _parseMaskRule(index) {
    var mask = this.option('mask');

    if (index >= mask.length) {
      return new _uiText_editorMask.EmptyMaskRule();
    }

    var currentMaskChar = mask[index];
    var isEscapedChar = currentMaskChar === ESCAPED_CHAR;
    var result = isEscapedChar ? new _uiText_editorMask.StubMaskRule({
      maskChar: mask[index + 1]
    }) : this._getMaskRule(currentMaskChar);
    result.next(this._parseMaskRule(index + 1 + isEscapedChar));
    return result;
  },
  _getMaskRule: function _getMaskRule(pattern) {
    var ruleConfig;
    (0, _iterator.each)(this._maskRules, function (rulePattern, allowedChars) {
      if (rulePattern === pattern) {
        ruleConfig = {
          pattern: rulePattern,
          allowedChars: allowedChars
        };
        return false;
      }
    });
    return (0, _type.isDefined)(ruleConfig) ? new _uiText_editorMask.MaskRule((0, _extend.extend)({
      maskChar: this.option('maskChar')
    }, ruleConfig)) : new _uiText_editorMask.StubMaskRule({
      maskChar: pattern
    });
  },
  _renderMaskedValue: function _renderMaskedValue() {
    if (!this._maskRulesChain) {
      return;
    }

    var value = this.option('value') || '';

    this._maskRulesChain.clear(this._normalizeChainArguments());

    var chainArgs = {
      length: value.length
    };
    chainArgs[this._isMaskedValueMode() ? 'text' : 'value'] = value;

    this._handleChain(chainArgs);

    this._displayMask();
  },
  _replaceSelectedText: function _replaceSelectedText(text, selection, char) {
    if (char === undefined) {
      return text;
    }

    var textBefore = text.slice(0, selection.start);
    var textAfter = text.slice(selection.end);
    var edited = textBefore + char + textAfter;
    return edited;
  },
  _isMaskedValueMode: function _isMaskedValueMode() {
    return this.option('useMaskedValue');
  },
  _displayMask: function _displayMask(caret) {
    caret = caret || this._caret();

    this._renderValue();

    this._caret(caret);
  },
  _isValueEmpty: function _isValueEmpty() {
    return (0, _string.isEmpty)(this._value);
  },
  _shouldShowMask: function _shouldShowMask() {
    var showMaskMode = this.option('showMaskMode');

    if (showMaskMode === 'onFocus') {
      return (0, _selectors.focused)(this._input()) || !this._isValueEmpty();
    }

    return true;
  },
  _showMaskPlaceholder: function _showMaskPlaceholder() {
    if (this._shouldShowMask()) {
      var text = this._maskRulesChain.text();

      this.option('text', text);

      if (this.option('showMaskMode') === 'onFocus') {
        this._renderDisplayText(text);
      }
    }
  },
  _renderValue: function _renderValue() {
    if (this._maskRulesChain) {
      this._showMaskPlaceholder();

      if (this._$hiddenElement) {
        var value = this._maskRulesChain.value();

        var submitElementValue = !(0, _string.isEmpty)(value) ? this._getPreparedValue() : '';

        this._$hiddenElement.val(submitElementValue);
      }
    }

    return this.callBase();
  },
  _getPreparedValue: function _getPreparedValue() {
    return this._convertToValue().replace(/\s+$/, '');
  },
  _valueChangeEventHandler: function _valueChangeEventHandler(e) {
    if (!this._maskRulesChain) {
      this.callBase.apply(this, arguments);
      return;
    }

    this._saveValueChangeEvent(e);

    this.option('value', this._getPreparedValue());
  },
  _isControlKeyFired: function _isControlKeyFired(e) {
    return this._isControlKey((0, _index.normalizeKeyName)(e)) || (0, _index.isCommandKeyPressed)(e);
  },
  _handleChain: function _handleChain(args) {
    var handledCount = this._maskRulesChain.handle(this._normalizeChainArguments(args));

    this._value = this._maskRulesChain.value();
    this._textValue = this._maskRulesChain.text();
    return handledCount;
  },
  _normalizeChainArguments: function _normalizeChainArguments(args) {
    args = args || {};
    args.index = 0;
    args.fullText = this._maskRulesChain.text();
    return args;
  },
  _convertToValue: function _convertToValue(text) {
    if (this._isMaskedValueMode()) {
      text = this._replaceMaskCharWithEmpty(text || this._textValue || '');
    } else {
      text = text || this._value || '';
    }

    return text;
  },
  _replaceMaskCharWithEmpty: function _replaceMaskCharWithEmpty(text) {
    return text.replace(new RegExp(this.option('maskChar'), 'g'), EMPTY_CHAR);
  },
  _maskKeyHandler: function _maskKeyHandler(e, keyHandler) {
    var _this = this;

    if (this.option('readOnly')) {
      return;
    }

    this.setForwardDirection();
    e.preventDefault();

    this._handleSelection();

    var previousText = this._input().val();

    var raiseInputEvent = function raiseInputEvent() {
      if (previousText !== _this._input().val()) {
        _this._maskStrategy.runWithoutEventProcessing(function () {
          return _events_engine.default.trigger(_this._input(), 'input');
        });
      }
    };

    var handled = keyHandler();

    if (handled) {
      handled.then(raiseInputEvent);
    } else {
      this.setForwardDirection();

      this._adjustCaret();

      this._displayMask();

      this._maskRulesChain.reset();

      raiseInputEvent();
    }
  },
  _handleKey: function _handleKey(key, direction) {
    this._direction(direction || FORWARD_DIRECTION);

    this._adjustCaret(key);

    this._handleKeyChain(key);

    this._moveCaret();
  },
  _handleSelection: function _handleSelection() {
    if (!this._hasSelection()) {
      return;
    }

    var caret = this._caret();

    var emptyChars = new Array(caret.end - caret.start + 1).join(EMPTY_CHAR);

    this._handleKeyChain(emptyChars);
  },
  _handleKeyChain: function _handleKeyChain(chars) {
    var caret = this._caret();

    var start = this.isForwardDirection() ? caret.start : caret.start - 1;
    var end = this.isForwardDirection() ? caret.end : caret.end - 1;
    var length = start === end ? 1 : end - start;

    this._handleChain({
      text: chars,
      start: start,
      length: length
    });
  },
  _tryMoveCaretBackward: function _tryMoveCaretBackward() {
    this.setBackwardDirection();

    var currentCaret = this._caret().start;

    this._adjustCaret();

    return !currentCaret || currentCaret !== this._caret().start;
  },
  _adjustCaret: function _adjustCaret(char) {
    var caret = this._maskRulesChain.adjustedCaret(this._caret().start, this.isForwardDirection(), char);

    this._caret({
      start: caret,
      end: caret
    });
  },
  _moveCaret: function _moveCaret() {
    var currentCaret = this._caret().start;

    var maskRuleIndex = currentCaret + (this.isForwardDirection() ? 0 : -1);
    var caret = this._maskRulesChain.isAccepted(maskRuleIndex) ? currentCaret + (this.isForwardDirection() ? 1 : -1) : currentCaret;

    this._caret({
      start: caret,
      end: caret
    });
  },
  _caret: function _caret(position, force) {
    var $input = this._input();

    if (!$input.length) {
      return;
    }

    if (!arguments.length) {
      return caret($input);
    }

    caret($input, position, force);
  },
  _hasSelection: function _hasSelection() {
    var caret = this._caret();

    return caret.start !== caret.end;
  },
  _direction: function _direction(direction) {
    if (!arguments.length) {
      return this._typingDirection;
    }

    this._typingDirection = direction;
  },
  setForwardDirection: function setForwardDirection() {
    this._direction(FORWARD_DIRECTION);
  },
  setBackwardDirection: function setBackwardDirection() {
    this._direction(BACKWARD_DIRECTION);
  },
  isForwardDirection: function isForwardDirection() {
    return this._direction() === FORWARD_DIRECTION;
  },
  _clean: function _clean() {
    this._maskStrategy && this._maskStrategy.clean();
    this.callBase();
  },
  _validateMask: function _validateMask() {
    if (!this._maskRulesChain) {
      return;
    }

    var isValid = (0, _string.isEmpty)(this.option('value')) || this._maskRulesChain.isValid(this._normalizeChainArguments());

    this.option({
      isValid: isValid,
      validationError: isValid ? null : {
        editorSpecific: true,
        message: this.option('maskInvalidMessage')
      }
    });
  },
  _updateHiddenElement: function _updateHiddenElement() {
    this._removeHiddenElement();

    if (this.option('mask')) {
      this._input().removeAttr('name');

      this._renderHiddenElement();
    }

    this._setSubmitElementName(this.option('name'));
  },
  _updateMaskOption: function _updateMaskOption() {
    this._updateHiddenElement();

    this._renderMask();

    this._validateMask();
  },
  _processEmptyMask: function _processEmptyMask(mask) {
    if (mask) return;
    var value = this.option('value');
    this.option({
      text: value,
      isValid: true
    });
    this.validationRequest.fire({
      value: value,
      editor: this
    });

    this._renderValue();
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'mask':
        this._updateMaskOption();

        this._processEmptyMask(args.value);

        break;

      case 'maskChar':
      case 'maskRules':
      case 'useMaskedValue':
        this._updateMaskOption();

        break;

      case 'value':
        this._renderMaskedValue();

        this._validateMask();

        this.callBase(args);
        this._changedValue = this._input().val();
        break;

      case 'maskInvalidMessage':
        break;

      case 'showMaskMode':
        this.option('text', '');

        this._renderValue();

        break;

      default:
        this.callBase(args);
    }
  }
});

var _default = TextEditorMask;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _type = __webpack_require__(1);

var _browser = _interopRequireDefault(__webpack_require__(19));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _devices$real = _devices.default.real(),
    ios = _devices$real.ios,
    mac = _devices$real.mac;

var isFocusingOnCaretChange = _browser.default.msie || ios || mac;

var getCaret = function getCaret(input) {
  var range;

  try {
    range = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } catch (e) {
    range = {
      start: 0,
      end: 0
    };
  }

  return range;
};

var setCaret = function setCaret(input, position) {
  if (!_dom_adapter.default.getBody().contains(input)) {
    return;
  }

  try {
    input.selectionStart = position.start;
    input.selectionEnd = position.end;
  } catch (e) {}
};

var caret = function caret(input, position) {
  var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  input = (0, _renderer.default)(input).get(0);

  if (!(0, _type.isDefined)(position)) {
    return getCaret(input);
  } // NOTE: IE and AppleWebKit-based browsers focuses element input after caret position has changed


  if (!force && isFocusingOnCaretChange && _dom_adapter.default.getActiveElement() !== input) {
    return;
  }

  setCaret(input, position);
};

var _default = caret;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.isInputEventsL2Supported = isInputEventsL2Supported;

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _devices = _interopRequireDefault(__webpack_require__(10));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Must become obsolete after the fix https://bugs.chromium.org/p/chromium/issues/detail?id=947408
function isModernAndroidDevice() {
  var _devices$real = _devices.default.real(),
      android = _devices$real.android,
      version = _devices$real.version;

  return android && version[0] > 4;
}

function isInputEventsL2Supported() {
  return 'onbeforeinput' in _dom_adapter.default.createElement('input') || isModernAndroidDevice();
}

/***/ }),
/* 197 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.StubMaskRule = exports.MaskRule = exports.EmptyMaskRule = void 0;

var _class = _interopRequireDefault(__webpack_require__(11));

var _extend = __webpack_require__(2);

var _array = __webpack_require__(12);

var _type = __webpack_require__(1);

var _common = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EMPTY_CHAR = ' ';

var BaseMaskRule = _class.default.inherit({
  ctor: function ctor(config) {
    this._value = EMPTY_CHAR;
    (0, _extend.extend)(this, config);
  },
  next: function next(rule) {
    if (!arguments.length) {
      return this._next;
    }

    this._next = rule;
  },
  text: _common.noop,
  value: _common.noop,
  rawValue: _common.noop,
  handle: _common.noop,
  _prepareHandlingArgs: function _prepareHandlingArgs(args, config) {
    var _config$str, _config$start, _config$length;

    config = config || {};
    var handlingProperty = Object.prototype.hasOwnProperty.call(args, 'value') ? 'value' : 'text';
    args[handlingProperty] = (_config$str = config.str) !== null && _config$str !== void 0 ? _config$str : args[handlingProperty];
    args.start = (_config$start = config.start) !== null && _config$start !== void 0 ? _config$start : args.start;
    args.length = (_config$length = config.length) !== null && _config$length !== void 0 ? _config$length : args.length;
    args.index = args.index + 1;
    return args;
  },
  reset: _common.noop,
  clear: _common.noop,
  first: function first(index) {
    index = index || 0;
    return this.next().first(index + 1);
  },
  isAccepted: function isAccepted() {
    return false;
  },
  adjustedCaret: function adjustedCaret(caret, isForwardDirection, char) {
    return isForwardDirection ? this._adjustedForward(caret, 0, char) : this._adjustedBackward(caret, 0, char);
  },
  _adjustedForward: _common.noop,
  _adjustedBackward: _common.noop,
  isValid: _common.noop
});

var EmptyMaskRule = BaseMaskRule.inherit({
  next: _common.noop,
  handle: function handle() {
    return 0;
  },
  text: function text() {
    return '';
  },
  value: function value() {
    return '';
  },
  first: function first() {
    return 0;
  },
  rawValue: function rawValue() {
    return '';
  },
  adjustedCaret: function adjustedCaret() {
    return 0;
  },
  isValid: function isValid() {
    return true;
  }
});
exports.EmptyMaskRule = EmptyMaskRule;
var MaskRule = BaseMaskRule.inherit({
  text: function text() {
    return (this._value !== EMPTY_CHAR ? this._value : this.maskChar) + this.next().text();
  },
  value: function value() {
    return this._value + this.next().value();
  },
  rawValue: function rawValue() {
    return this._value + this.next().rawValue();
  },
  handle: function handle(args) {
    var str = Object.prototype.hasOwnProperty.call(args, 'value') ? args.value : args.text;

    if (!str || !str.length || !args.length) {
      return 0;
    }

    if (args.start) {
      return this.next().handle(this._prepareHandlingArgs(args, {
        start: args.start - 1
      }));
    }

    var char = str[0];
    var rest = str.substring(1);

    this._tryAcceptChar(char, args);

    return this._accepted() ? this.next().handle(this._prepareHandlingArgs(args, {
      str: rest,
      length: args.length - 1
    })) + 1 : this.handle(this._prepareHandlingArgs(args, {
      str: rest,
      length: args.length - 1
    }));
  },
  clear: function clear(args) {
    this._tryAcceptChar(EMPTY_CHAR, args);

    this.next().clear(this._prepareHandlingArgs(args));
  },
  reset: function reset() {
    this._accepted(false);

    this.next().reset();
  },
  _tryAcceptChar: function _tryAcceptChar(char, args) {
    this._accepted(false);

    if (!this._isAllowed(char, args)) {
      return;
    }

    var acceptedChar = char === EMPTY_CHAR ? this.maskChar : char;
    args.fullText = args.fullText.substring(0, args.index) + acceptedChar + args.fullText.substring(args.index + 1);

    this._accepted(true);

    this._value = char;
  },
  _accepted: function _accepted(value) {
    if (!arguments.length) {
      return !!this._isAccepted;
    }

    this._isAccepted = !!value;
  },
  first: function first(index) {
    return this._value === EMPTY_CHAR ? index || 0 : this.callBase(index);
  },
  _isAllowed: function _isAllowed(char, args) {
    if (char === EMPTY_CHAR) {
      return true;
    }

    return this._isValid(char, args);
  },
  _isValid: function _isValid(char, args) {
    var allowedChars = this.allowedChars;

    if (allowedChars instanceof RegExp) {
      return allowedChars.test(char);
    }

    if ((0, _type.isFunction)(allowedChars)) {
      return allowedChars(char, args.index, args.fullText);
    }

    if (Array.isArray(allowedChars)) {
      return (0, _array.inArray)(char, allowedChars) > -1;
    }

    return allowedChars === char;
  },
  isAccepted: function isAccepted(caret) {
    return caret === 0 ? this._accepted() : this.next().isAccepted(caret - 1);
  },
  _adjustedForward: function _adjustedForward(caret, index, char) {
    if (index >= caret) {
      return index;
    }

    return this.next()._adjustedForward(caret, index + 1, char) || index + 1;
  },
  _adjustedBackward: function _adjustedBackward(caret, index) {
    if (index >= caret - 1) {
      return caret;
    }

    return this.next()._adjustedBackward(caret, index + 1) || index + 1;
  },
  isValid: function isValid(args) {
    return this._isValid(this._value, args) && this.next().isValid(this._prepareHandlingArgs(args));
  }
});
exports.MaskRule = MaskRule;
var StubMaskRule = MaskRule.inherit({
  value: function value() {
    return this.next().value();
  },
  handle: function handle(args) {
    var hasValueProperty = Object.prototype.hasOwnProperty.call(args, 'value');
    var str = hasValueProperty ? args.value : args.text;

    if (!str.length || !args.length) {
      return 0;
    }

    if (args.start || hasValueProperty) {
      return this.next().handle(this._prepareHandlingArgs(args, {
        start: args.start && args.start - 1
      }));
    }

    var char = str[0];
    var rest = str.substring(1);

    this._tryAcceptChar(char);

    var nextArgs = this._isAllowed(char) ? this._prepareHandlingArgs(args, {
      str: rest,
      length: args.length - 1
    }) : args;
    return this.next().handle(nextArgs) + 1;
  },
  clear: function clear(args) {
    this._accepted(false);

    this.next().clear(this._prepareHandlingArgs(args));
  },
  _tryAcceptChar: function _tryAcceptChar(char) {
    this._accepted(this._isValid(char));
  },
  _isValid: function _isValid(char) {
    return char === this.maskChar;
  },
  first: function first(index) {
    index = index || 0;
    return this.next().first(index + 1);
  },
  _adjustedForward: function _adjustedForward(caret, index, char) {
    if (index >= caret && char === this.maskChar) {
      return index;
    }

    if (caret === index + 1 && this._accepted()) {
      return caret;
    }

    return this.next()._adjustedForward(caret, index + 1, char);
  },
  _adjustedBackward: function _adjustedBackward(caret, index) {
    if (index >= caret - 1) {
      return 0;
    }

    return this.next()._adjustedBackward(caret, index + 1);
  },
  isValid: function isValid(args) {
    return this.next().isValid(this._prepareHandlingArgs(args));
  }
});
exports.StubMaskRule = StubMaskRule;

/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _selectors = __webpack_require__(35);

var _type = __webpack_require__(1);

var _extend = __webpack_require__(2);

var _array = __webpack_require__(12);

var _iterator = __webpack_require__(4);

var _themes = __webpack_require__(31);

var _devices = _interopRequireDefault(__webpack_require__(10));

var _editor = _interopRequireDefault(__webpack_require__(84));

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _uiText_editor = _interopRequireDefault(__webpack_require__(200));

var _index2 = _interopRequireDefault(__webpack_require__(201));

var _config = _interopRequireDefault(__webpack_require__(18));

var _ui = _interopRequireDefault(__webpack_require__(28));

var _deferred = __webpack_require__(9);

var _load_indicator = _interopRequireDefault(__webpack_require__(44));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TEXTEDITOR_CLASS = 'dx-texteditor';
var TEXTEDITOR_INPUT_CONTAINER_CLASS = 'dx-texteditor-input-container';
var TEXTEDITOR_INPUT_CLASS = 'dx-texteditor-input';
var TEXTEDITOR_INPUT_SELECTOR = '.' + TEXTEDITOR_INPUT_CLASS;
var TEXTEDITOR_CONTAINER_CLASS = 'dx-texteditor-container';
var TEXTEDITOR_BUTTONS_CONTAINER_CLASS = 'dx-texteditor-buttons-container';
var TEXTEDITOR_PLACEHOLDER_CLASS = 'dx-placeholder';
var TEXTEDITOR_EMPTY_INPUT_CLASS = 'dx-texteditor-empty';
var STATE_INVISIBLE_CLASS = 'dx-state-invisible';
var TEXTEDITOR_PENDING_INDICATOR_CLASS = 'dx-pending-indicator';
var TEXTEDITOR_VALIDATION_PENDING_CLASS = 'dx-validation-pending';
var TEXTEDITOR_VALID_CLASS = 'dx-valid';
var EVENTS_LIST = ['KeyDown', 'KeyPress', 'KeyUp', 'Change', 'Cut', 'Copy', 'Paste', 'Input'];
var CONTROL_KEYS = ['tab', 'enter', 'shift', 'control', 'alt', 'escape', 'pageUp', 'pageDown', 'end', 'home', 'leftArrow', 'upArrow', 'rightArrow', 'downArrow'];

function checkButtonsOptionType(buttons) {
  if ((0, _type.isDefined)(buttons) && !Array.isArray(buttons)) {
    throw _ui.default.Error('E1053');
  }
}

var TextEditorBase = _editor.default.inherit({
  ctor: function ctor(_, options) {
    if (options) {
      checkButtonsOptionType(options.buttons);
    }

    this._buttonCollection = new _index2.default(this, this._getDefaultButtons());
    this._$beforeButtonsContainer = null;
    this._$afterButtonsContainer = null;
    this.callBase.apply(this, arguments);
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      buttons: void 0,
      value: '',
      spellcheck: false,
      showClearButton: false,
      valueChangeEvent: 'change',
      placeholder: '',
      inputAttr: {},
      onFocusIn: null,
      onFocusOut: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onChange: null,
      onInput: null,
      onCut: null,
      onCopy: null,
      onPaste: null,
      onEnterKey: null,
      mode: 'text',
      hoverStateEnabled: true,
      focusStateEnabled: true,
      text: undefined,
      displayValueFormatter: function displayValueFormatter(value) {
        return (0, _type.isDefined)(value) && value !== false ? value : '';
      },
      stylingMode: (0, _config.default)().editorStylingMode || 'outlined',
      showValidationMark: true
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    var themeName = (0, _themes.current)();
    return this.callBase().concat([{
      device: function device() {
        return (0, _themes.isMaterial)(themeName);
      },
      options: {
        stylingMode: (0, _config.default)().editorStylingMode || 'underlined'
      }
    }]);
  },
  _setDeprecatedOptions: function _setDeprecatedOptions() {
    this.callBase();
    (0, _extend.extend)(this._deprecatedOptions, {
      'onKeyPress': {
        since: '20.1',
        message: 'This event is removed from the web standards and will be deprecated in modern browsers soon.'
      }
    });
  },
  _getDefaultButtons: function _getDefaultButtons() {
    return [{
      name: 'clear',
      Ctor: _uiText_editor.default
    }];
  },
  _isClearButtonVisible: function _isClearButtonVisible() {
    return this.option('showClearButton') && !this.option('readOnly');
  },
  _input: function _input() {
    return this.$element().find(TEXTEDITOR_INPUT_SELECTOR).first();
  },
  _isFocused: function _isFocused() {
    return (0, _selectors.focused)(this._input()) || this.callBase();
  },
  _inputWrapper: function _inputWrapper() {
    return this.$element();
  },
  _buttonsContainer: function _buttonsContainer() {
    return this._inputWrapper().find('.' + TEXTEDITOR_BUTTONS_CONTAINER_CLASS).eq(0);
  },
  _isControlKey: function _isControlKey(key) {
    return CONTROL_KEYS.indexOf(key) !== -1;
  },
  _renderStylingMode: function _renderStylingMode() {
    this.callBase();

    this._updateButtonsStyling(this.option('stylingMode'));
  },
  _initMarkup: function _initMarkup() {
    this.$element().addClass(TEXTEDITOR_CLASS);

    this._renderInput();

    this._renderStylingMode();

    this._renderInputType();

    this._renderPlaceholder();

    this._renderProps();

    this.callBase();

    this._renderValue();
  },
  _render: function _render() {
    this.callBase();

    this._renderPlaceholder();

    this._refreshValueChangeEvent();

    this._renderEvents();

    this._renderEnterKeyAction();

    this._renderEmptinessEvent();
  },
  _renderInput: function _renderInput() {
    this._$buttonsContainer = this._$textEditorContainer = (0, _renderer.default)('<div>').addClass(TEXTEDITOR_CONTAINER_CLASS).appendTo(this.$element());
    this._$textEditorInputContainer = (0, _renderer.default)('<div>').addClass(TEXTEDITOR_INPUT_CONTAINER_CLASS).appendTo(this._$textEditorContainer);

    this._$textEditorInputContainer.append(this._createInput());

    this._renderButtonContainers();
  },
  _getInputContainer: function _getInputContainer() {
    return this._$textEditorInputContainer;
  },
  _renderPendingIndicator: function _renderPendingIndicator() {
    this.$element().addClass(TEXTEDITOR_VALIDATION_PENDING_CLASS);

    var $inputContainer = this._getInputContainer();

    var $indicatorElement = (0, _renderer.default)('<div>').addClass(TEXTEDITOR_PENDING_INDICATOR_CLASS).appendTo($inputContainer);
    this._pendingIndicator = this._createComponent($indicatorElement, _load_indicator.default);
  },
  _disposePendingIndicator: function _disposePendingIndicator() {
    if (!this._pendingIndicator) {
      return;
    }

    this._pendingIndicator.dispose();

    this._pendingIndicator.$element().remove();

    this._pendingIndicator = null;
    this.$element().removeClass(TEXTEDITOR_VALIDATION_PENDING_CLASS);
  },
  _renderValidationState: function _renderValidationState() {
    this.callBase();
    var isPending = this.option('validationStatus') === 'pending';
    var $element = this.$element();

    if (isPending) {
      !this._pendingIndicator && this._renderPendingIndicator();
      this._showValidMark = false;
    } else {
      if (this.option('validationStatus') === 'invalid') {
        this._showValidMark = false;
      }

      if (!this._showValidMark && this.option('showValidationMark') === true) {
        this._showValidMark = this.option('validationStatus') === 'valid' && !!this._pendingIndicator;
      }

      this._disposePendingIndicator();
    }

    $element.toggleClass(TEXTEDITOR_VALID_CLASS, !!this._showValidMark);
  },
  _renderButtonContainers: function _renderButtonContainers() {
    var buttons = this.option('buttons');
    this._$beforeButtonsContainer = this._buttonCollection.renderBeforeButtons(buttons, this._$buttonsContainer);
    this._$afterButtonsContainer = this._buttonCollection.renderAfterButtons(buttons, this._$buttonsContainer);
  },
  _cleanButtonContainers: function _cleanButtonContainers() {
    var _this$_$beforeButtons, _this$_$afterButtonsC;

    (_this$_$beforeButtons = this._$beforeButtonsContainer) === null || _this$_$beforeButtons === void 0 ? void 0 : _this$_$beforeButtons.remove();
    (_this$_$afterButtonsC = this._$afterButtonsContainer) === null || _this$_$afterButtonsC === void 0 ? void 0 : _this$_$afterButtonsC.remove();

    this._buttonCollection.clean();
  },
  _clean: function _clean() {
    this._buttonCollection.clean();

    this._disposePendingIndicator();

    this._$beforeButtonsContainer = null;
    this._$afterButtonsContainer = null;
    this._$textEditorContainer = null;
    this._$buttonsContainer = null;
    this.callBase();
  },
  _createInput: function _createInput() {
    var $input = (0, _renderer.default)('<input>');

    this._applyInputAttributes($input, this.option('inputAttr'));

    return $input;
  },
  _setSubmitElementName: function _setSubmitElementName(name) {
    var inputAttrName = this.option('inputAttr.name');
    return this.callBase(name || inputAttrName || '');
  },
  _applyInputAttributes: function _applyInputAttributes($input, customAttributes) {
    var inputAttributes = (0, _extend.extend)(this._getDefaultAttributes(), customAttributes);
    $input.attr(inputAttributes).addClass(TEXTEDITOR_INPUT_CLASS).css('minHeight', this.option('height') ? '0' : '');
  },
  _getDefaultAttributes: function _getDefaultAttributes() {
    var defaultAttributes = {
      autocomplete: 'off'
    };

    var _devices$real = _devices.default.real(),
        ios = _devices$real.ios,
        mac = _devices$real.mac;

    if (ios || mac) {
      // WA to fix vAlign (T898735)
      // https://bugs.webkit.org/show_bug.cgi?id=142968
      defaultAttributes.placeholder = ' ';
    }

    return defaultAttributes;
  },
  _updateButtons: function _updateButtons(names) {
    this._buttonCollection.updateButtons(names);
  },
  _updateButtonsStyling: function _updateButtonsStyling(editorStylingMode) {
    var _this = this;

    (0, _iterator.each)(this.option('buttons'), function (_, _ref) {
      var options = _ref.options,
          buttonName = _ref.name;

      if (options && !options.stylingMode && _this.option('visible')) {
        var buttonInstance = _this.getButton(buttonName);

        buttonInstance.option && buttonInstance.option('stylingMode', editorStylingMode === 'underlined' ? 'text' : 'contained');
      }
    });
  },
  _renderValue: function _renderValue() {
    var renderInputPromise = this._renderInputValue();

    return renderInputPromise.promise();
  },
  _renderInputValue: function _renderInputValue(value) {
    var _value;

    value = (_value = value) !== null && _value !== void 0 ? _value : this.option('value');
    var text = this.option('text');
    var displayValue = this.option('displayValue');
    var displayValueFormatter = this.option('displayValueFormatter');

    if (displayValue !== undefined && value !== null) {
      text = displayValueFormatter(displayValue);
    } else if (!(0, _type.isDefined)(text)) {
      text = displayValueFormatter(value);
    }

    this.option('text', text); // fallback to empty string is required to support WebKit native date picker in some basic scenarios
    // can not be covered by QUnit

    if (this._input().val() !== ((0, _type.isDefined)(text) ? text : '')) {
      this._renderDisplayText(text);
    } else {
      this._toggleEmptinessEventHandler();
    }

    return new _deferred.Deferred().resolve();
  },
  _renderDisplayText: function _renderDisplayText(text) {
    this._input().val(text);

    this._toggleEmptinessEventHandler();
  },
  _isValueValid: function _isValueValid() {
    if (this._input().length) {
      var validity = this._input().get(0).validity;

      if (validity) {
        return validity.valid;
      }
    }

    return true;
  },
  _toggleEmptiness: function _toggleEmptiness(isEmpty) {
    this.$element().toggleClass(TEXTEDITOR_EMPTY_INPUT_CLASS, isEmpty);

    this._togglePlaceholder(isEmpty);
  },
  _togglePlaceholder: function _togglePlaceholder(isEmpty) {
    this.$element().find(".".concat(TEXTEDITOR_PLACEHOLDER_CLASS)).eq(0).toggleClass(STATE_INVISIBLE_CLASS, !isEmpty);
  },
  _renderProps: function _renderProps() {
    this._toggleReadOnlyState();

    this._toggleSpellcheckState();

    this._toggleTabIndex();
  },
  _toggleDisabledState: function _toggleDisabledState(value) {
    this.callBase.apply(this, arguments);

    var $input = this._input();

    $input.prop('disabled', value);
  },
  _toggleTabIndex: function _toggleTabIndex() {
    var $input = this._input();

    var disabled = this.option('disabled');
    var focusStateEnabled = this.option('focusStateEnabled');

    if (disabled || !focusStateEnabled) {
      $input.attr('tabIndex', -1);
    } else {
      $input.removeAttr('tabIndex');
    }
  },
  _toggleReadOnlyState: function _toggleReadOnlyState() {
    this._input().prop('readOnly', this._readOnlyPropValue());

    this.callBase();
  },
  _readOnlyPropValue: function _readOnlyPropValue() {
    return this.option('readOnly');
  },
  _toggleSpellcheckState: function _toggleSpellcheckState() {
    this._input().prop('spellcheck', this.option('spellcheck'));
  },
  _renderPlaceholder: function _renderPlaceholder() {
    this._renderPlaceholderMarkup();

    this._attachPlaceholderEvents();
  },
  _renderPlaceholderMarkup: function _renderPlaceholderMarkup() {
    if (this._$placeholder) {
      this._$placeholder.remove();

      this._$placeholder = null;
    }

    var $input = this._input();

    var placeholderText = this.option('placeholder');
    var $placeholder = this._$placeholder = (0, _renderer.default)('<div>').attr('data-dx_placeholder', placeholderText);
    $placeholder.insertAfter($input);
    $placeholder.addClass(TEXTEDITOR_PLACEHOLDER_CLASS);
  },
  _attachPlaceholderEvents: function _attachPlaceholderEvents() {
    var _this2 = this;

    var startEvent = (0, _index.addNamespace)(_pointer.default.up, this.NAME);

    _events_engine.default.on(this._$placeholder, startEvent, function () {
      _events_engine.default.trigger(_this2._input(), 'focus');
    });

    this._toggleEmptinessEventHandler();
  },
  _placeholder: function _placeholder() {
    return this._$placeholder || (0, _renderer.default)();
  },
  _clearValueHandler: function _clearValueHandler(e) {
    var $input = this._input();

    e.stopPropagation();

    this._saveValueChangeEvent(e);

    this._clearValue();

    !this._isFocused() && _events_engine.default.trigger($input, 'focus');

    _events_engine.default.trigger($input, 'input');
  },
  _clearValue: function _clearValue() {
    this.reset();
  },
  _renderEvents: function _renderEvents() {
    var _this3 = this;

    var $input = this._input();

    (0, _iterator.each)(EVENTS_LIST, function (_, event) {
      if (_this3.hasActionSubscription('on' + event)) {
        var action = _this3._createActionByOption('on' + event, {
          excludeValidators: ['readOnly']
        });

        _events_engine.default.on($input, (0, _index.addNamespace)(event.toLowerCase(), _this3.NAME), function (e) {
          if (_this3._disposed) {
            return;
          }

          action({
            event: e
          });
        });
      }
    });
  },
  _refreshEvents: function _refreshEvents() {
    var _this4 = this;

    var $input = this._input();

    (0, _iterator.each)(EVENTS_LIST, function (_, event) {
      _events_engine.default.off($input, (0, _index.addNamespace)(event.toLowerCase(), _this4.NAME));
    });

    this._renderEvents();
  },
  _keyPressHandler: function _keyPressHandler() {
    this.option('text', this._input().val());
  },
  _keyDownHandler: function _keyDownHandler(e) {
    var $input = this._input();

    var isCtrlEnter = e.ctrlKey && (0, _index.normalizeKeyName)(e) === 'enter';
    var isNewValue = $input.val() !== this.option('value');

    if (isCtrlEnter && isNewValue) {
      _events_engine.default.trigger($input, 'change');
    }
  },
  _renderValueChangeEvent: function _renderValueChangeEvent() {
    var keyPressEvent = (0, _index.addNamespace)(this._renderValueEventName(), "".concat(this.NAME, "TextChange"));
    var valueChangeEvent = (0, _index.addNamespace)(this.option('valueChangeEvent'), "".concat(this.NAME, "ValueChange"));
    var keyDownEvent = (0, _index.addNamespace)('keydown', "".concat(this.NAME, "TextChange"));

    var $input = this._input();

    _events_engine.default.on($input, keyPressEvent, this._keyPressHandler.bind(this));

    _events_engine.default.on($input, valueChangeEvent, this._valueChangeEventHandler.bind(this));

    _events_engine.default.on($input, keyDownEvent, this._keyDownHandler.bind(this));
  },
  _cleanValueChangeEvent: function _cleanValueChangeEvent() {
    var valueChangeNamespace = ".".concat(this.NAME, "ValueChange");
    var textChangeNamespace = ".".concat(this.NAME, "TextChange");

    _events_engine.default.off(this._input(), valueChangeNamespace);

    _events_engine.default.off(this._input(), textChangeNamespace);
  },
  _refreshValueChangeEvent: function _refreshValueChangeEvent() {
    this._cleanValueChangeEvent();

    this._renderValueChangeEvent();
  },
  _renderValueEventName: function _renderValueEventName() {
    return 'input change keypress';
  },
  _focusTarget: function _focusTarget() {
    return this._input();
  },
  _focusEventTarget: function _focusEventTarget() {
    return this.element();
  },
  _isInput: function _isInput(element) {
    return element === this._input().get(0);
  },
  _preventNestedFocusEvent: function _preventNestedFocusEvent(event) {
    if (event.isDefaultPrevented()) {
      return true;
    }

    var result = this._isNestedTarget(event.relatedTarget);

    if (event.type === 'focusin') {
      result = result && this._isNestedTarget(event.target) && !this._isInput(event.target);
    }

    result && event.preventDefault();
    return result;
  },
  _isNestedTarget: function _isNestedTarget(target) {
    return !!this.$element().find(target).length;
  },
  _focusClassTarget: function _focusClassTarget() {
    return this.$element();
  },
  _focusInHandler: function _focusInHandler(event) {
    this._preventNestedFocusEvent(event);

    this.callBase.apply(this, arguments);
  },
  _focusOutHandler: function _focusOutHandler(event) {
    this._preventNestedFocusEvent(event);

    this.callBase.apply(this, arguments);
  },
  _toggleFocusClass: function _toggleFocusClass(isFocused, $element) {
    this.callBase(isFocused, this._focusClassTarget($element));
  },
  _hasFocusClass: function _hasFocusClass(element) {
    return this.callBase((0, _renderer.default)(element || this.$element()));
  },
  _renderEmptinessEvent: function _renderEmptinessEvent() {
    var $input = this._input();

    _events_engine.default.on($input, 'input blur', this._toggleEmptinessEventHandler.bind(this));
  },
  _toggleEmptinessEventHandler: function _toggleEmptinessEventHandler() {
    var text = this._input().val();

    var isEmpty = (text === '' || text === null) && this._isValueValid();

    this._toggleEmptiness(isEmpty);
  },
  _valueChangeEventHandler: function _valueChangeEventHandler(e, formattedValue) {
    this._saveValueChangeEvent(e);

    this.option('value', arguments.length > 1 ? formattedValue : this._input().val());

    this._saveValueChangeEvent(undefined);
  },
  _renderEnterKeyAction: function _renderEnterKeyAction() {
    this._enterKeyAction = this._createActionByOption('onEnterKey', {
      excludeValidators: ['readOnly']
    });

    _events_engine.default.off(this._input(), 'keyup.onEnterKey.dxTextEditor');

    _events_engine.default.on(this._input(), 'keyup.onEnterKey.dxTextEditor', this._enterKeyHandlerUp.bind(this));
  },
  _enterKeyHandlerUp: function _enterKeyHandlerUp(e) {
    if (this._disposed) {
      return;
    }

    if ((0, _index.normalizeKeyName)(e) === 'enter') {
      this._enterKeyAction({
        event: e
      });
    }
  },
  _updateValue: function _updateValue() {
    this._options.silent('text', null);

    this._renderValue();
  },
  _dispose: function _dispose() {
    this._enterKeyAction = undefined;
    this.callBase();
  },
  _getSubmitElement: function _getSubmitElement() {
    return this._input();
  },
  _hasActiveElement: function _hasActiveElement() {
    return this._input().is(_dom_adapter.default.getActiveElement());
  },
  _optionChanged: function _optionChanged(args) {
    var name = args.name,
        fullName = args.fullName,
        value = args.value;

    if ((0, _array.inArray)(name.replace('on', ''), EVENTS_LIST) > -1) {
      this._refreshEvents();

      return;
    }

    switch (name) {
      case 'valueChangeEvent':
        this._refreshValueChangeEvent();

        this._refreshFocusEvent();

        this._refreshEvents();

        break;

      case 'onValueChanged':
        this._createValueChangeAction();

        break;

      case 'focusStateEnabled':
        this.callBase(args);

        this._toggleTabIndex();

        break;

      case 'spellcheck':
        this._toggleSpellcheckState();

        break;

      case 'mode':
        this._renderInputType();

        break;

      case 'onEnterKey':
        this._renderEnterKeyAction();

        break;

      case 'placeholder':
        this._renderPlaceholder();

        break;

      case 'readOnly':
      case 'disabled':
        this._updateButtons();

        this.callBase(args);
        break;

      case 'showClearButton':
        this._updateButtons(['clear']);

        break;

      case 'text':
        break;

      case 'value':
        this._updateValue();

        this.callBase(args);
        break;

      case 'inputAttr':
        this._applyInputAttributes(this._input(), this.option(name));

        break;

      case 'stylingMode':
        this._renderStylingMode();

        break;

      case 'buttons':
        if (fullName === name) {
          checkButtonsOptionType(value);
        }

        this._cleanButtonContainers();

        this._renderButtonContainers();

        this._updateButtonsStyling(this.option('stylingMode'));

        break;

      case 'visible':
        this.callBase(args);

        if (value && this.option('buttons')) {
          this._cleanButtonContainers();

          this._renderButtonContainers();

          this._updateButtonsStyling(this.option('stylingMode'));
        }

        break;

      case 'displayValueFormatter':
        this._invalidate();

        break;

      case 'showValidationMark':
        break;

      default:
        this.callBase(args);
    }
  },
  _renderInputType: function _renderInputType() {
    // B218621, B231875
    this._setInputType(this.option('mode'));
  },
  _setInputType: function _setInputType(type) {
    var input = this._input();

    if (type === 'search') {
      type = 'text';
    }

    try {
      input.prop('type', type);
    } catch (e) {
      input.prop('type', 'text');
    }
  },
  getButton: function getButton(name) {
    return this._buttonCollection.getButton(name);
  },
  focus: function focus() {
    _events_engine.default.trigger(this._input(), 'focus');
  },
  reset: function reset() {
    if (this._showValidMark) {
      this._showValidMark = false;

      this._renderValidationState();
    }

    var defaultOptions = this._getDefaultOptions();

    if (this.option('value') === defaultOptions.value) {
      this._options.silent('text', '');

      this._renderValue();
    } else {
      this.option('value', defaultOptions.value);
    }
  },
  on: function on(eventName, eventHandler) {
    var result = this.callBase(eventName, eventHandler);
    var event = eventName.charAt(0).toUpperCase() + eventName.substr(1);

    if (EVENTS_LIST.indexOf(event) >= 0) {
      this._refreshEvents();
    }

    return result;
  }
});

var _default = TextEditorBase;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _ui = _interopRequireDefault(__webpack_require__(65));

var _extend = __webpack_require__(2);

var _string = __webpack_require__(46);

var _position = __webpack_require__(29);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var INVALID_MESSAGE = 'dx-invalid-message';
var INVALID_MESSAGE_AUTO = 'dx-invalid-message-auto';
var INVALID_MESSAGE_ALWAYS = 'dx-invalid-message-always';
var INVALID_MESSAGE_CONTENT = 'dx-invalid-message-content';
var VALIDATION_MESSAGE_MIN_WIDTH = 100;

var ValidationMessage = _ui.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      integrationOptions: {},
      templatesRenderAsynchronously: false,
      shading: false,
      width: 'auto',
      height: 'auto',
      closeOnOutsideClick: false,
      closeOnTargetScroll: false,
      animation: null,
      visible: true,
      propagateOutsideClick: true,
      _checkParentVisibility: false,
      rtlEnabled: false,
      contentTemplate: this._renderInnerHtml,
      maxWidth: '100%',
      mode: 'auto',
      validationErrors: undefined,
      positionRequest: undefined,
      describedElement: undefined,
      boundary: undefined,
      offset: {
        h: 0,
        v: 0
      }
    });
  },
  _init: function _init() {
    this.callBase();
    this.updateMaxWidth();

    this._updatePosition();
  },
  _initMarkup: function _initMarkup() {
    this.callBase();
    this.$element().addClass(INVALID_MESSAGE);
    this.$wrapper().addClass(INVALID_MESSAGE);

    this._toggleModeClass();

    this._updateContentId();
  },
  _updateContentId: function _updateContentId() {
    var describedElement = this.option('describedElement') || this.option('container');
    var contentId = (0, _renderer.default)(describedElement).attr('aria-describedby');
    this.$content().addClass(INVALID_MESSAGE_CONTENT).attr('id', contentId);
  },
  _renderInnerHtml: function _renderInnerHtml(element) {
    var $element = element && (0, _renderer.default)(element);
    var validationErrors = this.option('validationErrors') || [];
    var validationErrorMessage = '';
    validationErrors.forEach(function (err) {
      var separator = validationErrorMessage ? '<br />' : '';
      validationErrorMessage += separator + (0, _string.encodeHtml)((err === null || err === void 0 ? void 0 : err.message) || '');
    });
    $element === null || $element === void 0 ? void 0 : $element.html(validationErrorMessage);
  },
  _toggleModeClass: function _toggleModeClass() {
    var mode = this.option('mode');
    this.$wrapper().toggleClass(INVALID_MESSAGE_AUTO, mode === 'auto').toggleClass(INVALID_MESSAGE_ALWAYS, mode === 'always');
  },
  updateMaxWidth: function updateMaxWidth() {
    var _target$outerWidth;

    var target = this.option('target');
    var targetWidth = (target === null || target === void 0 ? void 0 : (_target$outerWidth = target.outerWidth) === null || _target$outerWidth === void 0 ? void 0 : _target$outerWidth.call(target)) || (0, _renderer.default)(target).outerWidth();
    var maxWidth = '100%';

    if (targetWidth) {
      maxWidth = Math.max(targetWidth, VALIDATION_MESSAGE_MIN_WIDTH);
    }

    this.option({
      maxWidth: maxWidth
    });
  },
  _updatePosition: function _updatePosition() {
    var _this$option = this.option(),
        positionRequest = _this$option.positionRequest,
        rtlEnabled = _this$option.rtlEnabled,
        offset = _this$option.offset,
        boundary = _this$option.boundary;

    var positionSide = (0, _position.getDefaultAlignment)(rtlEnabled);
    var verticalPositions = positionRequest === 'below' ? [' top', ' bottom'] : [' bottom', ' top'];
    if (rtlEnabled) offset.h = -offset.h;
    if (positionRequest !== 'below') offset.v = -offset.v;
    this.option('position', {
      offset: offset,
      boundary: boundary,
      my: positionSide + verticalPositions[0],
      at: positionSide + verticalPositions[1],
      collision: 'none flip'
    });
  },
  _optionChanged: function _optionChanged(args) {
    var name = args.name,
        value = args.value;

    switch (name) {
      case 'target':
        this.updateMaxWidth();
        this.callBase(args);
        break;

      case 'boundary':
        this.option('position.boundary', value);
        break;

      case 'mode':
        this._toggleModeClass(value);

        break;

      case 'rtlEnabled':
      case 'offset':
      case 'positionRequest':
        this._updatePosition();

        break;

      case 'validationErrors':
        this._renderInnerHtml(this.$content());

        break;

      default:
        this.callBase(args);
    }
  }
});

(0, _component_registrator.default)('dxValidationMessage', ValidationMessage);
var _default = ValidationMessage;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _button = _interopRequireDefault(__webpack_require__(117));

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _click = __webpack_require__(30);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var pointerDown = _pointer.default.down;
var STATE_INVISIBLE_CLASS = 'dx-state-invisible';
var TEXTEDITOR_CLEAR_BUTTON_CLASS = 'dx-clear-button-area';
var TEXTEDITOR_CLEAR_ICON_CLASS = 'dx-icon-clear';
var TEXTEDITOR_ICON_CLASS = 'dx-icon';
var TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS = 'dx-show-clear-button';

var ClearButton = /*#__PURE__*/function (_TextEditorButton) {
  _inheritsLoose(ClearButton, _TextEditorButton);

  function ClearButton() {
    return _TextEditorButton.apply(this, arguments) || this;
  }

  var _proto = ClearButton.prototype;

  _proto._create = function _create() {
    var $element = (0, _renderer.default)('<span>').addClass(TEXTEDITOR_CLEAR_BUTTON_CLASS).append((0, _renderer.default)('<span>').addClass(TEXTEDITOR_ICON_CLASS).addClass(TEXTEDITOR_CLEAR_ICON_CLASS));

    this._addToContainer($element);

    this.update(true);
    return {
      instance: $element,
      $element: $element
    };
  };

  _proto._isVisible = function _isVisible() {
    var editor = this.editor;
    return editor._isClearButtonVisible();
  };

  _proto._attachEvents = function _attachEvents(instance, $button) {
    var editor = this.editor;
    var editorName = editor.NAME;

    _events_engine.default.on($button, (0, _index.addNamespace)(pointerDown, editorName), function (e) {
      e.preventDefault();

      if (e.pointerType !== 'mouse') {
        editor._clearValueHandler(e);
      }
    });

    _events_engine.default.on($button, (0, _index.addNamespace)(_click.name, editorName), function (e) {
      return editor._clearValueHandler(e);
    });
  } // TODO: get rid of it
  ;

  _proto._legacyRender = function _legacyRender($editor, isVisible) {
    $editor.toggleClass(TEXTEDITOR_SHOW_CLEAR_BUTTON_CLASS, isVisible);
  };

  _proto.update = function update() {
    var rendered = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    !rendered && _TextEditorButton.prototype.update.call(this);
    var editor = this.editor,
        instance = this.instance;
    var $editor = editor.$element();

    var isVisible = this._isVisible();

    instance && instance.toggleClass(STATE_INVISIBLE_CLASS, !isVisible);

    this._legacyRender($editor, isVisible);
  };

  return ClearButton;
}(_button.default);

exports.default = ClearButton;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _custom = _interopRequireDefault(__webpack_require__(202));

var _extend = __webpack_require__(2);

var _array = __webpack_require__(12);

var _ui = _interopRequireDefault(__webpack_require__(28));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var TEXTEDITOR_BUTTONS_CONTAINER_CLASS = 'dx-texteditor-buttons-container';

function checkButtonInfo(buttonInfo) {
  var checkButtonType = function checkButtonType() {
    if (!buttonInfo || _typeof(buttonInfo) !== 'object' || Array.isArray(buttonInfo)) {
      throw _ui.default.Error('E1053');
    }
  };

  var checkLocation = function checkLocation() {
    var location = buttonInfo.location;

    if ('location' in buttonInfo && location !== 'after' && location !== 'before') {
      buttonInfo.location = 'after';
    }
  };

  var checkNameIsDefined = function checkNameIsDefined() {
    if (!('name' in buttonInfo)) {
      throw _ui.default.Error('E1054');
    }
  };

  var checkNameIsString = function checkNameIsString() {
    var name = buttonInfo.name;

    if (typeof name !== 'string') {
      throw _ui.default.Error('E1055');
    }
  };

  checkButtonType();
  checkNameIsDefined();
  checkNameIsString();
  checkLocation();
}

function checkNamesUniqueness(existingNames, newName) {
  if (existingNames.indexOf(newName) !== -1) {
    throw _ui.default.Error('E1055', newName);
  }

  existingNames.push(newName);
}

function isPredefinedButtonName(name, predefinedButtonsInfo) {
  return !!(0, _array.find)(predefinedButtonsInfo, function (info) {
    return info.name === name;
  });
}

var TextEditorButtonCollection = /*#__PURE__*/function () {
  function TextEditorButtonCollection(editor, defaultButtonsInfo) {
    this.buttons = [];
    this.defaultButtonsInfo = defaultButtonsInfo;
    this.editor = editor;
  }

  var _proto = TextEditorButtonCollection.prototype;

  _proto._compileButtonInfo = function _compileButtonInfo(buttons) {
    var _this = this;

    var names = [];
    return buttons.map(function (button) {
      var isStringButton = typeof button === 'string';

      if (!isStringButton) {
        checkButtonInfo(button);
      }

      var isDefaultButton = isStringButton || isPredefinedButtonName(button.name, _this.defaultButtonsInfo);

      if (isDefaultButton) {
        var defaultButtonInfo = (0, _array.find)(_this.defaultButtonsInfo, function (_ref) {
          var name = _ref.name;
          return name === button || name === button.name;
        });

        if (!defaultButtonInfo) {
          throw _ui.default.Error('E1056', _this.editor.NAME, button);
        }

        checkNamesUniqueness(names, button);
        return defaultButtonInfo;
      } else {
        var name = button.name;
        checkNamesUniqueness(names, name);
        return (0, _extend.extend)(button, {
          Ctor: _custom.default
        });
      }
    });
  };

  _proto._createButton = function _createButton(buttonsInfo) {
    var Ctor = buttonsInfo.Ctor,
        options = buttonsInfo.options,
        name = buttonsInfo.name;
    var button = new Ctor(name, this.editor, options);
    this.buttons.push(button);
    return button;
  };

  _proto._renderButtons = function _renderButtons(buttons, $container, targetLocation) {
    var _this2 = this;

    var $buttonsContainer = null;
    var buttonsInfo = buttons ? this._compileButtonInfo(buttons) : this.defaultButtonsInfo;

    var getButtonsContainer = function getButtonsContainer() {
      $buttonsContainer = $buttonsContainer || (0, _renderer.default)('<div>').addClass(TEXTEDITOR_BUTTONS_CONTAINER_CLASS);
      targetLocation === 'before' ? $container.prepend($buttonsContainer) : $container.append($buttonsContainer);
      return $buttonsContainer;
    };

    buttonsInfo.forEach(function (buttonsInfo) {
      var _buttonsInfo$location = buttonsInfo.location,
          location = _buttonsInfo$location === void 0 ? 'after' : _buttonsInfo$location;

      if (location === targetLocation) {
        _this2._createButton(buttonsInfo).render(getButtonsContainer());
      }
    });
    return $buttonsContainer;
  };

  _proto.clean = function clean() {
    this.buttons.forEach(function (button) {
      return button.dispose();
    });
    this.buttons = [];
  };

  _proto.getButton = function getButton(buttonName) {
    var button = (0, _array.find)(this.buttons, function (_ref2) {
      var name = _ref2.name;
      return name === buttonName;
    });
    return button && button.instance;
  };

  _proto.renderAfterButtons = function renderAfterButtons(buttons, $container) {
    return this._renderButtons(buttons, $container, 'after');
  };

  _proto.renderBeforeButtons = function renderBeforeButtons(buttons, $container) {
    return this._renderButtons(buttons, $container, 'before');
  };

  _proto.updateButtons = function updateButtons(names) {
    this.buttons.forEach(function (button) {
      if (!names || names.indexOf(button.name) !== -1) {
        button.update();
      }
    });
  };

  return TextEditorButtonCollection;
}();

exports.default = TextEditorButtonCollection;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _button = _interopRequireDefault(__webpack_require__(117));

var _button2 = _interopRequireDefault(__webpack_require__(41));

var _extend = __webpack_require__(2);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _hover = __webpack_require__(106);

var _click = __webpack_require__(30);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var CUSTOM_BUTTON_HOVERED_CLASS = 'dx-custom-button-hovered';

var CustomButton = /*#__PURE__*/function (_TextEditorButton) {
  _inheritsLoose(CustomButton, _TextEditorButton);

  function CustomButton() {
    return _TextEditorButton.apply(this, arguments) || this;
  }

  var _proto = CustomButton.prototype;

  _proto._attachEvents = function _attachEvents(instance, $element) {
    var editor = this.editor;

    _events_engine.default.on($element, _hover.start, function () {
      editor.$element().addClass(CUSTOM_BUTTON_HOVERED_CLASS);
    });

    _events_engine.default.on($element, _hover.end, function () {
      editor.$element().removeClass(CUSTOM_BUTTON_HOVERED_CLASS);
    });

    _events_engine.default.on($element, _click.name, function (e) {
      e.stopPropagation();
    });
  };

  _proto._create = function _create() {
    var editor = this.editor;
    var $element = (0, _renderer.default)('<div>');

    this._addToContainer($element);

    var instance = editor._createComponent($element, _button2.default, (0, _extend.extend)({}, this.options, {
      ignoreParentReadOnly: true,
      disabled: this._isDisabled(),
      integrationOptions: this._prepareIntegrationOptions(editor)
    }));

    return {
      $element: $element,
      instance: instance
    };
  };

  _proto._prepareIntegrationOptions = function _prepareIntegrationOptions(editor) {
    return (0, _extend.extend)({}, editor.option('integrationOptions'), {
      skipTemplates: ['content']
    });
  };

  _proto.update = function update() {
    var isUpdated = _TextEditorButton.prototype.update.call(this);

    if (this.instance) {
      this.instance.option('disabled', this._isDisabled());
    }

    return isUpdated;
  };

  _proto._isVisible = function _isVisible() {
    var editor = this.editor;
    return editor.option('visible');
  };

  _proto._isDisabled = function _isDisabled() {
    var isDefinedByUser = this.options.disabled !== undefined;

    if (isDefinedByUser) {
      return this.instance ? this.instance.option('disabled') : this.options.disabled;
    } else {
      return this.editor.option('readOnly');
    }
  };

  return CustomButton;
}(_button.default);

exports.default = CustomButton;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _uiText_editorMaskStrategy = _interopRequireDefault(__webpack_require__(118));

var _index = __webpack_require__(6);

var _promise = _interopRequireDefault(__webpack_require__(51));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var BACKSPACE_INPUT_TYPE = 'deleteContentBackward';
var EMPTY_CHAR = ' ';

var DefaultMaskStrategy = /*#__PURE__*/function (_BaseMaskStrategy) {
  _inheritsLoose(DefaultMaskStrategy, _BaseMaskStrategy);

  function DefaultMaskStrategy() {
    return _BaseMaskStrategy.apply(this, arguments) || this;
  }

  var _proto = DefaultMaskStrategy.prototype;

  _proto._getStrategyName = function _getStrategyName() {
    return 'default';
  };

  _proto.getHandleEventNames = function getHandleEventNames() {
    return [].concat(_toConsumableArray(_BaseMaskStrategy.prototype.getHandleEventNames.call(this)), ['keyPress']);
  };

  _proto._keyPressHandler = function _keyPressHandler(event) {
    if (this._keyPressHandled) {
      return;
    }

    this._keyPressHandled = true;

    if (this.editor._isControlKeyFired(event)) {
      return;
    }

    var editor = this.editor;

    editor._maskKeyHandler(event, function () {
      return editor._handleKey((0, _index.getChar)(event));
    });
  };

  _proto._inputHandler = function _inputHandler(event) {
    if (this._backspaceInputHandled(event.originalEvent && event.originalEvent.inputType)) {
      this._handleBackspaceInput(event);
    }

    if (event.originalEvent) {
      this._autoFillHandler(event);
    }

    if (this._keyPressHandled) {
      return;
    }

    this._keyPressHandled = true;
    var inputValue = this.editorInput().val();
    var caret = this.editorCaret();

    if (!caret.end) {
      return;
    }

    caret.start = caret.end - 1;
    var oldValue = inputValue.substring(0, caret.start) + inputValue.substring(caret.end);
    var char = inputValue[caret.start];
    var editor = this.editor;
    this.editorInput().val(oldValue);

    editor._caret({
      start: caret.start,
      end: caret.start
    });

    editor._maskKeyHandler(event, function () {
      return editor._handleKey(char);
    });
  };

  _proto._backspaceHandler = function _backspaceHandler(event) {
    var _this = this;

    var editor = this.editor;
    this._keyPressHandled = true;

    var afterBackspaceHandler = function afterBackspaceHandler(needAdjustCaret, callBack) {
      if (needAdjustCaret) {
        editor._direction(_this.DIRECTION.FORWARD);

        editor._adjustCaret();
      }

      var currentCaret = _this.editorCaret();

      return new _promise.default(function (resolve) {
        clearTimeout(_this._backspaceHandlerTimeout);
        _this._backspaceHandlerTimeout = setTimeout(function () {
          callBack(currentCaret);
          resolve();
        });
      });
    };

    editor._maskKeyHandler(event, function () {
      if (editor._hasSelection()) {
        return afterBackspaceHandler(true, function (currentCaret) {
          editor._displayMask(currentCaret);

          editor._maskRulesChain.reset();
        });
      }

      if (editor._tryMoveCaretBackward()) {
        return afterBackspaceHandler(false, function (currentCaret) {
          _this.editorCaret(currentCaret);
        });
      }

      editor._handleKey(EMPTY_CHAR, _this.DIRECTION.BACKWARD);

      return afterBackspaceHandler(true, function (currentCaret) {
        editor._displayMask(currentCaret);

        editor._maskRulesChain.reset();
      });
    });
  };

  _proto._backspaceInputHandled = function _backspaceInputHandled(inputType) {
    return inputType === BACKSPACE_INPUT_TYPE && !this._keyPressHandled;
  };

  _proto._handleBackspaceInput = function _handleBackspaceInput(event) {
    var _this$editorCaret = this.editorCaret(),
        start = _this$editorCaret.start,
        end = _this$editorCaret.end;

    this.editorCaret({
      start: start + 1,
      end: end + 1
    });

    this._backspaceHandler(event);
  };

  return DefaultMaskStrategy;
}(_uiText_editorMaskStrategy.default);

var _default = DefaultMaskStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _uiText_editorMaskStrategy = _interopRequireDefault(__webpack_require__(118));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var DELETE_INPUT_TYPE = 'deleteContentBackward';

var InputEventsMaskStrategy = /*#__PURE__*/function (_BaseMaskStrategy) {
  _inheritsLoose(InputEventsMaskStrategy, _BaseMaskStrategy);

  function InputEventsMaskStrategy() {
    return _BaseMaskStrategy.apply(this, arguments) || this;
  }

  var _proto = InputEventsMaskStrategy.prototype;

  _proto._getStrategyName = function _getStrategyName() {
    return 'inputEvents';
  };

  _proto.getHandleEventNames = function getHandleEventNames() {
    return [].concat(_toConsumableArray(_BaseMaskStrategy.prototype.getHandleEventNames.call(this)), ['beforeInput']);
  };

  _proto._beforeInputHandler = function _beforeInputHandler() {
    this._prevCaret = this.editorCaret();
  };

  _proto._inputHandler = function _inputHandler(_ref) {
    var originalEvent = _ref.originalEvent;

    if (!originalEvent) {
      return;
    }

    var inputType = originalEvent.inputType,
        data = originalEvent.data;
    var currentCaret = this.editorCaret();

    if (inputType === DELETE_INPUT_TYPE) {
      var length = this._prevCaret.end - this._prevCaret.start || 1;
      this.editor.setBackwardDirection();

      this._updateEditorMask({
        start: currentCaret.start,
        length: length,
        text: this._getEmptyString(length)
      });
    } else {
      var _this$_prevCaret, _this$_prevCaret2, _this$_prevCaret3;

      if (!currentCaret.end) {
        return;
      }

      this._autoFillHandler(originalEvent);

      this.editorCaret(currentCaret);

      var _length = ((_this$_prevCaret = this._prevCaret) === null || _this$_prevCaret === void 0 ? void 0 : _this$_prevCaret.end) - ((_this$_prevCaret2 = this._prevCaret) === null || _this$_prevCaret2 === void 0 ? void 0 : _this$_prevCaret2.start);

      var newData = data + (_length ? this._getEmptyString(_length - data.length) : '');
      this.editor.setForwardDirection();

      var hasValidChars = this._updateEditorMask({
        start: (_this$_prevCaret3 = this._prevCaret) === null || _this$_prevCaret3 === void 0 ? void 0 : _this$_prevCaret3.start,
        length: _length || newData.length,
        text: newData
      });

      if (!hasValidChars) {
        this.editorCaret(this._prevCaret);
      }
    }
  };

  _proto._getEmptyString = function _getEmptyString(length) {
    return Array(length + 1).join(' ');
  };

  _proto._updateEditorMask = function _updateEditorMask(args) {
    var textLength = args.text.length;

    var updatedCharsCount = this.editor._handleChain(args);

    if (this.editor.isForwardDirection()) {
      var _this$editorCaret = this.editorCaret(),
          start = _this$editorCaret.start,
          end = _this$editorCaret.end;

      var correction = updatedCharsCount - textLength;

      if (start <= updatedCharsCount && updatedCharsCount > 1) {
        this.editorCaret({
          start: start + correction,
          end: end + correction
        });
      }

      this.editor.isForwardDirection() && this.editor._adjustCaret();
    }

    this.editor._displayMask();

    return !!updatedCharsCount;
  };

  return InputEventsMaskStrategy;
}(_uiText_editorMaskStrategy.default);

var _default = InputEventsMaskStrategy;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(206);

/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _click = __webpack_require__(30);

var _extend = __webpack_require__(2);

var _ui = _interopRequireDefault(__webpack_require__(28));

var _check_box = _interopRequireDefault(__webpack_require__(207));

var _radio_button = _interopRequireDefault(__webpack_require__(208));

var _index = __webpack_require__(6);

var _uiListEdit = __webpack_require__(33);

var _uiListEdit2 = _interopRequireDefault(__webpack_require__(45));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SELECT_DECORATOR_ENABLED_CLASS = 'dx-list-select-decorator-enabled';
var SELECT_DECORATOR_SELECT_ALL_CLASS = 'dx-list-select-all';
var SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS = 'dx-list-select-all-checkbox';
var SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS = 'dx-list-select-all-label';
var SELECT_CHECKBOX_CONTAINER_CLASS = 'dx-list-select-checkbox-container';
var SELECT_CHECKBOX_CLASS = 'dx-list-select-checkbox';
var SELECT_RADIO_BUTTON_CONTAINER_CLASS = 'dx-list-select-radiobutton-container';
var SELECT_RADIO_BUTTON_CLASS = 'dx-list-select-radiobutton';
var FOCUSED_STATE_CLASS = 'dx-state-focused';
var CLICK_EVENT_NAME = (0, _index.addNamespace)(_click.name, 'dxListEditDecorator');
(0, _uiListEdit.register)('selection', 'default', _uiListEdit2.default.inherit({
  _init: function _init() {
    this.callBase.apply(this, arguments);

    var selectionMode = this._list.option('selectionMode');

    this._singleStrategy = selectionMode === 'single';
    this._containerClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CONTAINER_CLASS : SELECT_CHECKBOX_CONTAINER_CLASS;
    this._controlClass = this._singleStrategy ? SELECT_RADIO_BUTTON_CLASS : SELECT_CHECKBOX_CLASS;
    this._controlWidget = this._singleStrategy ? _radio_button.default : _check_box.default;

    this._list.$element().addClass(SELECT_DECORATOR_ENABLED_CLASS);
  },
  beforeBag: function beforeBag(config) {
    var $itemElement = config.$itemElement;
    var $container = config.$container.addClass(this._containerClass);
    var $control = (0, _renderer.default)('<div>').addClass(this._controlClass).appendTo($container);
    new this._controlWidget($control, (0, _extend.extend)(this._commonOptions(), {
      value: this._isSelected($itemElement),
      focusStateEnabled: false,
      hoverStateEnabled: false,
      onValueChanged: function (e) {
        e.event && this._list._saveSelectionChangeEvent(e.event);

        this._processCheckedState($itemElement, e.value);

        e.event && e.event.stopPropagation();
      }.bind(this)
    }));
  },
  modifyElement: function modifyElement(config) {
    this.callBase.apply(this, arguments);
    var $itemElement = config.$itemElement;

    var control = this._controlWidget.getInstance($itemElement.find('.' + this._controlClass));

    _events_engine.default.on($itemElement, 'stateChanged', function (e, state) {
      control.option('value', state);
    }.bind(this));
  },
  _updateSelectAllState: function _updateSelectAllState() {
    if (!this._$selectAll) {
      return;
    }

    this._selectAllCheckBox.option('value', this._list.isSelectAll());
  },
  afterRender: function afterRender() {
    if (this._list.option('selectionMode') !== 'all') {
      return;
    }

    if (!this._$selectAll) {
      this._renderSelectAll();
    } else {
      this._updateSelectAllState();
    }
  },
  handleKeyboardEvents: function handleKeyboardEvents(currentFocusedIndex, moveFocusUp) {
    var moveFocusDown = !moveFocusUp;
    var list = this._list;
    var $selectAll = this._$selectAll;

    var lastItemIndex = list._getLastItemIndex();

    var isFocusOutOfList = moveFocusUp && currentFocusedIndex === 0 || moveFocusDown && currentFocusedIndex === lastItemIndex;
    var hasSelectAllItem = !!$selectAll;

    if (hasSelectAllItem && isFocusOutOfList) {
      list.option('focusedElement', $selectAll);
      list.scrollToItem(list.option('focusedElement'));
      return true;
    }

    return false;
  },
  handleEnterPressing: function handleEnterPressing(e) {
    if (this._$selectAll && this._$selectAll.hasClass(FOCUSED_STATE_CLASS)) {
      e.target = this._$selectAll.get(0);

      this._list._saveSelectionChangeEvent(e);

      this._selectAllCheckBox.option('value', !this._selectAllCheckBox.option('value'));

      return true;
    }
  },
  _renderSelectAll: function _renderSelectAll() {
    var $selectAll = this._$selectAll = (0, _renderer.default)('<div>').addClass(SELECT_DECORATOR_SELECT_ALL_CLASS);
    var list = this._list;

    var downArrowHandler = list._supportedKeys().downArrow.bind(list);

    this._selectAllCheckBox = list._createComponent((0, _renderer.default)('<div>').addClass(SELECT_DECORATOR_SELECT_ALL_CHECKBOX_CLASS).appendTo($selectAll), _check_box.default, {
      focusStateEnabled: false,
      hoverStateEnabled: false
    });

    this._selectAllCheckBox.registerKeyHandler('downArrow', downArrowHandler);

    (0, _renderer.default)('<div>').addClass(SELECT_DECORATOR_SELECT_ALL_LABEL_CLASS).text(this._list.option('selectAllText')).appendTo($selectAll);

    this._list.itemsContainer().prepend($selectAll);

    this._updateSelectAllState();

    this._attachSelectAllHandler();
  },
  _attachSelectAllHandler: function _attachSelectAllHandler() {
    this._selectAllCheckBox.option('onValueChanged', this._selectAllHandler.bind(this));

    _events_engine.default.off(this._$selectAll, CLICK_EVENT_NAME);

    _events_engine.default.on(this._$selectAll, CLICK_EVENT_NAME, this._selectAllClickHandler.bind(this));
  },
  _selectAllHandler: function _selectAllHandler(e) {
    e.event && e.event.stopPropagation();

    var isSelectedAll = this._selectAllCheckBox.option('value');

    var result = this._list._createActionByOption('onSelectAllValueChanged')({
      value: isSelectedAll
    });

    if (result === false) {
      return;
    }

    e.event && this._list._saveSelectionChangeEvent(e.event);

    if (isSelectedAll === true) {
      this._selectAllItems();
    } else if (isSelectedAll === false) {
      this._unselectAllItems();
    }
  },
  _checkSelectAllCapability: function _checkSelectAllCapability() {
    var list = this._list;
    var dataSource = list.getDataSource();

    if (list.option('selectAllMode') === 'allPages' && list.option('grouped') && (!dataSource || !dataSource.group())) {
      _ui.default.log('W1010');

      return false;
    }

    return true;
  },
  _selectAllItems: function _selectAllItems() {
    if (!this._checkSelectAllCapability()) return;

    this._list._selection.selectAll(this._list.option('selectAllMode') === 'page');
  },
  _unselectAllItems: function _unselectAllItems() {
    if (!this._checkSelectAllCapability()) return;

    this._list._selection.deselectAll(this._list.option('selectAllMode') === 'page');
  },
  _selectAllClickHandler: function _selectAllClickHandler(e) {
    this._list._saveSelectionChangeEvent(e);

    this._selectAllCheckBox.option('value', !this._selectAllCheckBox.option('value'));
  },
  _isSelected: function _isSelected($itemElement) {
    return this._list.isItemSelected($itemElement);
  },
  _processCheckedState: function _processCheckedState($itemElement, checked) {
    if (checked) {
      this._list.selectItem($itemElement);
    } else {
      this._list.unselectItem($itemElement);
    }
  },
  dispose: function dispose() {
    this._disposeSelectAll();

    this._list.$element().removeClass(SELECT_DECORATOR_ENABLED_CLASS);

    this.callBase.apply(this, arguments);
  },
  _disposeSelectAll: function _disposeSelectAll() {
    if (this._$selectAll) {
      this._$selectAll.remove();

      this._$selectAll = null;
    }
  }
}));

/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _extend = __webpack_require__(2);

var _utils = __webpack_require__(59);

var _editor = _interopRequireDefault(__webpack_require__(84));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _index = __webpack_require__(6);

var _click = __webpack_require__(30);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// STYLE checkbox
var CHECKBOX_CLASS = 'dx-checkbox';
var CHECKBOX_ICON_CLASS = 'dx-checkbox-icon';
var CHECKBOX_CHECKED_CLASS = 'dx-checkbox-checked';
var CHECKBOX_CONTAINER_CLASS = 'dx-checkbox-container';
var CHECKBOX_TEXT_CLASS = 'dx-checkbox-text';
var CHECKBOX_HAS_TEXT_CLASS = 'dx-checkbox-has-text';
var CHECKBOX_INDETERMINATE_CLASS = 'dx-checkbox-indeterminate';
var CHECKBOX_FEEDBACK_HIDE_TIMEOUT = 100;

var CheckBox = _editor.default.inherit({
  _supportedKeys: function _supportedKeys() {
    var click = function click(e) {
      e.preventDefault();

      this._clickAction({
        event: e
      });
    };

    return (0, _extend.extend)(this.callBase(), {
      space: click
    });
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      hoverStateEnabled: true,
      activeStateEnabled: true,
      value: false,
      text: '',
      useInkRipple: false
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat([{
      device: function device() {
        return _devices.default.real().deviceType === 'desktop' && !_devices.default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }]);
  },
  _canValueBeChangedByClick: function _canValueBeChangedByClick() {
    return true;
  },
  _useTemplates: function _useTemplates() {
    return false;
  },
  _feedbackHideTimeout: CHECKBOX_FEEDBACK_HIDE_TIMEOUT,
  _initMarkup: function _initMarkup() {
    this._renderSubmitElement();

    this._$container = (0, _renderer.default)('<div>').addClass(CHECKBOX_CONTAINER_CLASS);
    this.setAria('role', 'checkbox');
    this.$element().addClass(CHECKBOX_CLASS);

    this._renderValue();

    this._renderIcon();

    this._renderText();

    this.option('useInkRipple') && this._renderInkRipple();
    this.$element().append(this._$container);
    this.callBase();
  },
  _render: function _render() {
    this._renderClick();

    this.callBase();
  },
  _renderSubmitElement: function _renderSubmitElement() {
    this._$submitElement = (0, _renderer.default)('<input>').attr('type', 'hidden').appendTo(this.$element());
  },
  _getSubmitElement: function _getSubmitElement() {
    return this._$submitElement;
  },
  _renderInkRipple: function _renderInkRipple() {
    this._inkRipple = (0, _utils.render)({
      waveSizeCoefficient: 2.5,
      useHoldAnimation: false,
      wavesNumber: 2,
      isCentered: true
    });
  },
  _renderInkWave: function _renderInkWave(element, dxEvent, doRender, waveIndex) {
    if (!this._inkRipple) {
      return;
    }

    var config = {
      element: element,
      event: dxEvent,
      wave: waveIndex
    };

    if (doRender) {
      this._inkRipple.showWave(config);
    } else {
      this._inkRipple.hideWave(config);
    }
  },
  _updateFocusState: function _updateFocusState(e, value) {
    this.callBase.apply(this, arguments);

    this._renderInkWave(this._$icon, e, value, 0);
  },
  _toggleActiveState: function _toggleActiveState($element, value, e) {
    this.callBase.apply(this, arguments);

    this._renderInkWave(this._$icon, e, value, 1);
  },
  _renderIcon: function _renderIcon() {
    this._$icon = (0, _renderer.default)('<span>').addClass(CHECKBOX_ICON_CLASS).prependTo(this._$container);
  },
  _renderText: function _renderText() {
    var textValue = this.option('text');

    if (!textValue) {
      if (this._$text) {
        this._$text.remove();

        this.$element().removeClass(CHECKBOX_HAS_TEXT_CLASS);
      }

      return;
    }

    if (!this._$text) {
      this._$text = (0, _renderer.default)('<span>').addClass(CHECKBOX_TEXT_CLASS);
    }

    this._$text.text(textValue);

    this._$container.append(this._$text);

    this.$element().addClass(CHECKBOX_HAS_TEXT_CLASS);
  },
  _renderClick: function _renderClick() {
    var that = this;
    var eventName = (0, _index.addNamespace)(_click.name, that.NAME);
    that._clickAction = that._createAction(that._clickHandler);

    _events_engine.default.off(that.$element(), eventName);

    _events_engine.default.on(that.$element(), eventName, function (e) {
      that._clickAction({
        event: e
      });
    });
  },
  _clickHandler: function _clickHandler(args) {
    var that = args.component;

    that._saveValueChangeEvent(args.event);

    that.option('value', !that.option('value'));
  },
  _renderValue: function _renderValue() {
    var $element = this.$element();
    var checked = this.option('value');
    var indeterminate = checked === undefined;
    $element.toggleClass(CHECKBOX_CHECKED_CLASS, Boolean(checked));
    $element.toggleClass(CHECKBOX_INDETERMINATE_CLASS, indeterminate);

    this._getSubmitElement().val(checked);

    this.setAria('checked', indeterminate ? 'mixed' : checked || 'false');
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'useInkRipple':
        this._invalidate();

        break;

      case 'value':
        this._renderValue();

        this.callBase(args);
        break;

      case 'text':
        this._renderText();

        this._renderDimensions();

        break;

      default:
        this.callBase(args);
    }
  },
  _clean: function _clean() {
    delete this._inkRipple;
    this.callBase();
  }
});

(0, _component_registrator.default)('dxCheckBox', CheckBox);
var _default = CheckBox;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _devices = _interopRequireDefault(__webpack_require__(10));

var _extend = __webpack_require__(2);

var _utils = __webpack_require__(59);

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _editor = _interopRequireDefault(__webpack_require__(84));

var _index = __webpack_require__(6);

var _click = __webpack_require__(30);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var RADIO_BUTTON_CLASS = 'dx-radiobutton';
var RADIO_BUTTON_ICON_CLASS = 'dx-radiobutton-icon';
var RADIO_BUTTON_ICON_DOT_CLASS = 'dx-radiobutton-icon-dot';
var RADIO_BUTTON_CHECKED_CLASS = 'dx-radiobutton-checked';
var RADIO_BUTTON_ICON_CHECKED_CLASS = 'dx-radiobutton-icon-checked';
/**
* @name dxRadioButton
* @inherits CollectionWidget
* @hidden
*/

var RadioButton = _editor.default.inherit({
  _supportedKeys: function _supportedKeys() {
    var click = function click(e) {
      e.preventDefault();

      this._clickAction({
        event: e
      });
    };

    return (0, _extend.extend)(this.callBase(), {
      space: click
    });
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      hoverStateEnabled: true,
      activeStateEnabled: true,
      value: false,
      useInkRipple: false
    });
  },
  _canValueBeChangedByClick: function _canValueBeChangedByClick() {
    return true;
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat([{
      device: function device() {
        return _devices.default.real().deviceType === 'desktop' && !_devices.default.isSimulator();
      },
      options: {
        focusStateEnabled: true
      }
    }]);
  },
  _init: function _init() {
    this.callBase();
    this.$element().addClass(RADIO_BUTTON_CLASS);
  },
  _initMarkup: function _initMarkup() {
    this.callBase();

    this._renderIcon();

    this.option('useInkRipple') && this._renderInkRipple();

    this._renderCheckedState(this.option('value'));

    this._renderClick();

    this.setAria('role', 'radio');
  },
  _renderInkRipple: function _renderInkRipple() {
    this._inkRipple = (0, _utils.render)({
      waveSizeCoefficient: 3.3,
      useHoldAnimation: false,
      wavesNumber: 2,
      isCentered: true
    });
  },
  _renderInkWave: function _renderInkWave(element, dxEvent, doRender, waveIndex) {
    if (!this._inkRipple) {
      return;
    }

    var config = {
      element: element,
      event: dxEvent,
      wave: waveIndex
    };

    if (doRender) {
      this._inkRipple.showWave(config);
    } else {
      this._inkRipple.hideWave(config);
    }
  },
  _updateFocusState: function _updateFocusState(e, value) {
    this.callBase.apply(this, arguments);

    this._renderInkWave(this._$icon, e, value, 0);
  },
  _toggleActiveState: function _toggleActiveState($element, value, e) {
    this.callBase.apply(this, arguments);

    this._renderInkWave(this._$icon, e, value, 1);
  },
  _renderIcon: function _renderIcon() {
    this._$icon = (0, _renderer.default)('<div>').addClass(RADIO_BUTTON_ICON_CLASS);
    (0, _renderer.default)('<div>').addClass(RADIO_BUTTON_ICON_DOT_CLASS).appendTo(this._$icon);
    this.$element().append(this._$icon);
  },
  _renderCheckedState: function _renderCheckedState(checked) {
    this.$element().toggleClass(RADIO_BUTTON_CHECKED_CLASS, checked).find('.' + RADIO_BUTTON_ICON_CLASS).toggleClass(RADIO_BUTTON_ICON_CHECKED_CLASS, checked);
    this.setAria('checked', checked);
  },
  _renderClick: function _renderClick() {
    var eventName = (0, _index.addNamespace)(_click.name, this.NAME);
    this._clickAction = this._createAction(function (args) {
      this._clickHandler(args.event);
    }.bind(this));

    _events_engine.default.off(this.$element(), eventName);

    _events_engine.default.on(this.$element(), eventName, function (e) {
      this._clickAction({
        event: e
      });
    }.bind(this));
  },
  _clickHandler: function _clickHandler(e) {
    this._saveValueChangeEvent(e);

    this.option('value', true);
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'useInkRipple':
        this._invalidate();

        break;

      case 'value':
        this._renderCheckedState(args.value);

        this.callBase(args);
        break;

      default:
        this.callBase(args);
    }
  },
  _clean: function _clean() {
    delete this._inkRipple;
    this.callBase();
  }
});

(0, _component_registrator.default)('dxRadioButton', RadioButton);
var _default = RadioButton;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(210);

__webpack_require__(211);

__webpack_require__(212);

__webpack_require__(219);

__webpack_require__(122);

/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _renderer = _interopRequireDefault(__webpack_require__(0));

var _button = _interopRequireDefault(__webpack_require__(41));

var _uiListEdit = __webpack_require__(33);

var _uiListEdit2 = _interopRequireDefault(__webpack_require__(45));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var STATIC_DELETE_BUTTON_CONTAINER_CLASS = 'dx-list-static-delete-button-container';
var STATIC_DELETE_BUTTON_CLASS = 'dx-list-static-delete-button';
(0, _uiListEdit.register)('delete', 'static', _uiListEdit2.default.inherit({
  afterBag: function afterBag(config) {
    var $itemElement = config.$itemElement;
    var $container = config.$container;
    var $button = (0, _renderer.default)('<div>').addClass(STATIC_DELETE_BUTTON_CLASS);

    this._list._createComponent($button, _button.default, {
      icon: 'remove',
      onClick: function (args) {
        args.event.stopPropagation();

        this._deleteItem($itemElement);
      }.bind(this),
      integrationOptions: {}
    });

    $container.addClass(STATIC_DELETE_BUTTON_CONTAINER_CLASS).append($button);
  },
  _deleteItem: function _deleteItem($itemElement) {
    if ($itemElement.is('.dx-state-disabled, .dx-state-disabled *')) {
      return;
    }

    this._list.deleteItem($itemElement);
  }
}));

/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _fx = _interopRequireDefault(__webpack_require__(37));

var _button = _interopRequireDefault(__webpack_require__(41));

var _message = _interopRequireDefault(__webpack_require__(17));

var _uiListEdit = __webpack_require__(33);

var _uiListEditDecorator = _interopRequireDefault(__webpack_require__(119));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SWITCHABLE_DELETE_BUTTON_CONTAINER_CLASS = 'dx-list-switchable-delete-button-container';
var SWITCHABLE_DELETE_BUTTON_WRAPPER_CLASS = 'dx-list-switchable-delete-button-wrapper';
var SWITCHABLE_DELETE_BUTTON_INNER_WRAPPER_CLASS = 'dx-list-switchable-delete-button-inner-wrapper';
var SWITCHABLE_DELETE_BUTTON_CLASS = 'dx-list-switchable-delete-button';
var SWITCHABLE_DELETE_BUTTON_ANIMATION_DURATION = 200;

var SwitchableButtonEditDecorator = _uiListEditDecorator.default.inherit({
  _init: function _init() {
    this.callBase.apply(this, arguments);
    var $buttonContainer = (0, _renderer.default)('<div>').addClass(SWITCHABLE_DELETE_BUTTON_CONTAINER_CLASS);
    var $buttonWrapper = (0, _renderer.default)('<div>').addClass(SWITCHABLE_DELETE_BUTTON_WRAPPER_CLASS);
    var $buttonInnerWrapper = (0, _renderer.default)('<div>').addClass(SWITCHABLE_DELETE_BUTTON_INNER_WRAPPER_CLASS);
    var $button = (0, _renderer.default)('<div>').addClass(SWITCHABLE_DELETE_BUTTON_CLASS);

    this._list._createComponent($button, _button.default, {
      text: _message.default.format('dxListEditDecorator-delete'),
      type: 'danger',
      onClick: function (e) {
        this._deleteItem();

        e.event.stopPropagation();
      }.bind(this),
      integrationOptions: {}
    });

    $buttonContainer.append($buttonWrapper);
    $buttonWrapper.append($buttonInnerWrapper);
    $buttonInnerWrapper.append($button);
    this._$buttonContainer = $buttonContainer;
  },
  _enablePositioning: function _enablePositioning($itemElement) {
    this.callBase.apply(this, arguments);

    _fx.default.stop(this._$buttonContainer, true);

    this._$buttonContainer.appendTo($itemElement);
  },
  _disablePositioning: function _disablePositioning() {
    this.callBase.apply(this, arguments);

    this._$buttonContainer.detach();
  },
  _animatePrepareDeleteReady: function _animatePrepareDeleteReady() {
    var rtl = this._isRtlEnabled();

    var listWidth = this._list.$element().width();

    var buttonWidth = this._buttonWidth();

    var fromValue = rtl ? listWidth : -buttonWidth;
    var toValue = rtl ? listWidth - buttonWidth : 0;
    return _fx.default.animate(this._$buttonContainer, {
      type: 'custom',
      duration: SWITCHABLE_DELETE_BUTTON_ANIMATION_DURATION,
      from: {
        right: fromValue
      },
      to: {
        right: toValue
      }
    });
  },
  _animateForgetDeleteReady: function _animateForgetDeleteReady() {
    var rtl = this._isRtlEnabled();

    var listWidth = this._list.$element().width();

    var buttonWidth = this._buttonWidth();

    var fromValue = rtl ? listWidth - buttonWidth : 0;
    var toValue = rtl ? listWidth : -buttonWidth;
    return _fx.default.animate(this._$buttonContainer, {
      type: 'custom',
      duration: SWITCHABLE_DELETE_BUTTON_ANIMATION_DURATION,
      from: {
        right: fromValue
      },
      to: {
        right: toValue
      }
    });
  },
  _buttonWidth: function _buttonWidth() {
    if (!this._buttonContainerWidth) {
      this._buttonContainerWidth = this._$buttonContainer.outerWidth();
    }

    return this._buttonContainerWidth;
  },
  dispose: function dispose() {
    if (this._$buttonContainer) {
      this._$buttonContainer.remove();
    }

    this.callBase.apply(this, arguments);
  }
});

var TOGGLE_DELETE_SWITCH_CONTAINER_CLASS = 'dx-list-toggle-delete-switch-container';
var TOGGLE_DELETE_SWITCH_CLASS = 'dx-list-toggle-delete-switch';
(0, _uiListEdit.register)('delete', 'toggle', SwitchableButtonEditDecorator.inherit({
  beforeBag: function beforeBag(config) {
    var $itemElement = config.$itemElement;
    var $container = config.$container;
    var $toggle = (0, _renderer.default)('<div>').addClass(TOGGLE_DELETE_SWITCH_CLASS);

    this._list._createComponent($toggle, _button.default, {
      icon: 'toggle-delete',
      onClick: function (e) {
        _fx.default.stop(this._$buttonContainer, false);

        this._toggleDeleteReady($itemElement);

        e.event.stopPropagation();
      }.bind(this),
      integrationOptions: {}
    });

    $container.addClass(TOGGLE_DELETE_SWITCH_CONTAINER_CLASS);
    $container.append($toggle);
  }
}));
(0, _uiListEdit.register)('delete', 'slideButton', SwitchableButtonEditDecorator.inherit({
  _shouldHandleSwipe: true,
  _swipeEndHandler: function _swipeEndHandler($itemElement, args) {
    if (args.targetOffset !== 0) {
      _fx.default.stop(this._$buttonContainer, false);

      this._toggleDeleteReady($itemElement);
    }

    return true;
  }
}));
var _default = SwitchableButtonEditDecorator;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _common = __webpack_require__(3);

var _click = __webpack_require__(30);

var _message = _interopRequireDefault(__webpack_require__(17));

var _translator = __webpack_require__(16);

var _index = __webpack_require__(6);

var _emitter = __webpack_require__(79);

var _uiListEdit = _interopRequireDefault(__webpack_require__(120));

var _uiListEdit2 = __webpack_require__(33);

var _uiListEditDecorator = _interopRequireDefault(__webpack_require__(119));

var _fx = _interopRequireDefault(__webpack_require__(37));

var _themes = __webpack_require__(31);

var _action_sheet = _interopRequireDefault(__webpack_require__(213));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var LIST_EDIT_DECORATOR = 'dxListEditDecorator';
var CLICK_EVENT_NAME = (0, _index.addNamespace)(_click.name, LIST_EDIT_DECORATOR);
var ACTIVE_EVENT_NAME = (0, _index.addNamespace)(_emitter.active, LIST_EDIT_DECORATOR);
var SLIDE_MENU_CLASS = 'dx-list-slide-menu';
var SLIDE_MENU_WRAPPER_CLASS = 'dx-list-slide-menu-wrapper';
var SLIDE_MENU_CONTENT_CLASS = 'dx-list-slide-menu-content';
var SLIDE_MENU_BUTTONS_CONTAINER_CLASS = 'dx-list-slide-menu-buttons-container';
var SLIDE_MENU_BUTTONS_CLASS = 'dx-list-slide-menu-buttons';
var SLIDE_MENU_BUTTON_CLASS = 'dx-list-slide-menu-button';
var SLIDE_MENU_BUTTON_MENU_CLASS = 'dx-list-slide-menu-button-menu';
var SLIDE_MENU_BUTTON_DELETE_CLASS = 'dx-list-slide-menu-button-delete';
var SLIDE_MENU_ANIMATION_DURATION = 400;
var SLIDE_MENU_ANIMATION_EASING = 'cubic-bezier(0.075, 0.82, 0.165, 1)';
(0, _uiListEdit2.register)('menu', 'slide', _uiListEditDecorator.default.inherit({
  _shouldHandleSwipe: true,
  _init: function _init() {
    this.callBase.apply(this, arguments);
    this._$buttonsContainer = (0, _renderer.default)('<div>').addClass(SLIDE_MENU_BUTTONS_CONTAINER_CLASS);

    _events_engine.default.on(this._$buttonsContainer, ACTIVE_EVENT_NAME, _common.noop);

    this._$buttons = (0, _renderer.default)('<div>').addClass(SLIDE_MENU_BUTTONS_CLASS).appendTo(this._$buttonsContainer);

    this._renderMenu();

    this._renderDeleteButton();
  },
  _renderMenu: function _renderMenu() {
    if (!this._menuEnabled()) {
      return;
    }

    var menuItems = this._menuItems();

    if (menuItems.length === 1) {
      var menuItem = menuItems[0];

      this._renderMenuButton(menuItem.text, function (e) {
        e.stopPropagation();

        this._fireAction(menuItem);
      }.bind(this));
    } else {
      var $menu = (0, _renderer.default)('<div>').addClass(SLIDE_MENU_CLASS);
      this._menu = this._list._createComponent($menu, _action_sheet.default, {
        showTitle: false,
        items: menuItems,
        onItemClick: function (args) {
          this._fireAction(args.itemData);
        }.bind(this),
        integrationOptions: {}
      });
      $menu.appendTo(this._list.$element());

      var $menuButton = this._renderMenuButton(_message.default.format('dxListEditDecorator-more'), function (e) {
        e.stopPropagation();

        this._menu.show();
      }.bind(this));

      this._menu.option('target', $menuButton);
    }
  },
  _renderMenuButton: function _renderMenuButton(text, action) {
    var $menuButton = (0, _renderer.default)('<div>').addClass(SLIDE_MENU_BUTTON_CLASS).addClass(SLIDE_MENU_BUTTON_MENU_CLASS).text(text);

    this._$buttons.append($menuButton);

    _events_engine.default.on($menuButton, CLICK_EVENT_NAME, action);

    return $menuButton;
  },
  _renderDeleteButton: function _renderDeleteButton() {
    if (!this._deleteEnabled()) {
      return;
    }

    var $deleteButton = (0, _renderer.default)('<div>').addClass(SLIDE_MENU_BUTTON_CLASS).addClass(SLIDE_MENU_BUTTON_DELETE_CLASS).text((0, _themes.isMaterial)() ? '' : _message.default.format('dxListEditDecorator-delete'));

    _events_engine.default.on($deleteButton, CLICK_EVENT_NAME, function (e) {
      e.stopPropagation();

      this._deleteItem();
    }.bind(this));

    this._$buttons.append($deleteButton);
  },
  _fireAction: function _fireAction(menuItem) {
    this._fireMenuAction((0, _renderer.default)(this._cachedNode), menuItem.action);

    this._cancelDeleteReadyItem();
  },
  modifyElement: function modifyElement(config) {
    this.callBase.apply(this, arguments);
    var $itemElement = config.$itemElement;
    $itemElement.addClass(SLIDE_MENU_WRAPPER_CLASS);
    var $slideMenuContent = (0, _renderer.default)('<div>').addClass(SLIDE_MENU_CONTENT_CLASS);
    $itemElement.wrapInner($slideMenuContent);
  },
  _getDeleteButtonContainer: function _getDeleteButtonContainer() {
    return this._$buttonsContainer;
  },
  handleClick: function handleClick(_, e) {
    if ((0, _renderer.default)(e.target).closest('.' + SLIDE_MENU_CONTENT_CLASS).length) {
      return this.callBase.apply(this, arguments);
    }

    return false;
  },
  _swipeStartHandler: function _swipeStartHandler($itemElement) {
    this._enablePositioning($itemElement);

    this._cacheItemData($itemElement);

    this._setPositions(this._getPositions(0));
  },
  _swipeUpdateHandler: function _swipeUpdateHandler($itemElement, args) {
    var rtl = this._isRtlEnabled();

    var signCorrection = rtl ? -1 : 1;

    var isItemReadyToDelete = this._isReadyToDelete($itemElement);

    var moveJustStarted = this._getCurrentPositions().content === this._getStartPositions().content;

    if (moveJustStarted && !isItemReadyToDelete && args.offset * signCorrection > 0) {
      args.cancel = true;
      return;
    }

    var offset = this._cachedItemWidth * args.offset;
    var startOffset = isItemReadyToDelete ? -this._cachedButtonWidth * signCorrection : 0;
    var correctedOffset = (offset + startOffset) * signCorrection;
    var percent = correctedOffset < 0 ? Math.abs((offset + startOffset) / this._cachedButtonWidth) : 0;

    this._setPositions(this._getPositions(percent));

    return true;
  },
  _getStartPositions: function _getStartPositions() {
    var rtl = this._isRtlEnabled();

    var signCorrection = rtl ? -1 : 1;
    return {
      content: 0,
      buttonsContainer: rtl ? -this._cachedButtonWidth : this._cachedItemWidth,
      buttons: -this._cachedButtonWidth * signCorrection
    };
  },
  _getPositions: function _getPositions(percent) {
    var rtl = this._isRtlEnabled();

    var signCorrection = rtl ? -1 : 1;

    var startPositions = this._getStartPositions();

    return {
      content: startPositions.content - percent * this._cachedButtonWidth * signCorrection,
      buttonsContainer: startPositions.buttonsContainer - Math.min(percent, 1) * this._cachedButtonWidth * signCorrection,
      buttons: startPositions.buttons + Math.min(percent, 1) * this._cachedButtonWidth * signCorrection
    };
  },
  _getCurrentPositions: function _getCurrentPositions() {
    return {
      content: (0, _translator.locate)(this._$cachedContent).left,
      buttonsContainer: (0, _translator.locate)(this._$buttonsContainer).left,
      buttons: (0, _translator.locate)(this._$buttons).left
    };
  },
  _setPositions: function _setPositions(positions) {
    (0, _translator.move)(this._$cachedContent, {
      left: positions.content
    });
    (0, _translator.move)(this._$buttonsContainer, {
      left: positions.buttonsContainer
    });
    (0, _translator.move)(this._$buttons, {
      left: positions.buttons
    });
  },
  _cacheItemData: function _cacheItemData($itemElement) {
    if ($itemElement[0] === this._cachedNode) {
      return;
    }

    this._$cachedContent = $itemElement.find('.' + SLIDE_MENU_CONTENT_CLASS);
    this._cachedItemWidth = $itemElement.outerWidth();
    this._cachedButtonWidth = this._cachedButtonWidth || this._$buttons.outerWidth();

    this._$buttonsContainer.width(this._cachedButtonWidth);

    if (this._$cachedContent.length) {
      this._cachedNode = $itemElement[0];
    }
  },
  _minButtonContainerLeftOffset: function _minButtonContainerLeftOffset() {
    return this._cachedItemWidth - this._cachedButtonWidth;
  },
  _swipeEndHandler: function _swipeEndHandler($itemElement, args) {
    this._cacheItemData($itemElement);

    var signCorrection = this._isRtlEnabled() ? 1 : -1;
    var offset = this._cachedItemWidth * args.offset;
    var endedAtReadyToDelete = !this._isReadyToDelete($itemElement) && offset * signCorrection > this._cachedButtonWidth * 0.2;
    var readyToDelete = args.targetOffset === signCorrection && endedAtReadyToDelete;

    this._toggleDeleteReady($itemElement, readyToDelete);

    return true;
  },
  _enablePositioning: function _enablePositioning($itemElement) {
    _fx.default.stop(this._$cachedContent, true);

    this.callBase.apply(this, arguments);

    this._$buttonsContainer.appendTo($itemElement);
  },
  _disablePositioning: function _disablePositioning() {
    this.callBase.apply(this, arguments);

    this._$buttonsContainer.detach();
  },
  _animatePrepareDeleteReady: function _animatePrepareDeleteReady() {
    return this._animateToPositions(this._getPositions(1));
  },
  _animateForgetDeleteReady: function _animateForgetDeleteReady($itemElement) {
    this._cacheItemData($itemElement);

    return this._animateToPositions(this._getPositions(0));
  },
  _animateToPositions: function _animateToPositions(positions) {
    var that = this;

    var currentPosition = this._getCurrentPositions();

    var durationTimePart = Math.min(Math.abs(currentPosition.content - positions.content) / this._cachedButtonWidth, 1);
    return _fx.default.animate(this._$cachedContent, {
      from: currentPosition,
      to: positions,
      easing: SLIDE_MENU_ANIMATION_EASING,
      duration: SLIDE_MENU_ANIMATION_DURATION * durationTimePart,
      strategy: 'frame',
      draw: function draw(positions) {
        that._setPositions(positions);
      }
    });
  },
  dispose: function dispose() {
    if (this._menu) {
      this._menu.$element().remove();
    }

    if (this._$buttonsContainer) {
      this._$buttonsContainer.remove();
    }

    this.callBase.apply(this, arguments);
  }
}).include(_uiListEdit.default));

/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _window = __webpack_require__(7);

var _common = __webpack_require__(3);

var _message = _interopRequireDefault(__webpack_require__(17));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _extend = __webpack_require__(2);

var _button = _interopRequireDefault(__webpack_require__(41));

var _uiCollection_widget = _interopRequireDefault(__webpack_require__(82));

var _popup = _interopRequireDefault(__webpack_require__(121));

var _popover = _interopRequireDefault(__webpack_require__(217));

var _bindable_template = __webpack_require__(68);

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var window = (0, _window.getWindow)();
// STYLE actionSheet
var ACTION_SHEET_CLASS = 'dx-actionsheet';
var ACTION_SHEET_CONTAINER_CLASS = 'dx-actionsheet-container';
var ACTION_SHEET_POPUP_WRAPPER_CLASS = 'dx-actionsheet-popup-wrapper';
var ACTION_SHEET_POPOVER_WRAPPER_CLASS = 'dx-actionsheet-popover-wrapper';
var ACTION_SHEET_CANCEL_BUTTON_CLASS = 'dx-actionsheet-cancel';
var ACTION_SHEET_ITEM_CLASS = 'dx-actionsheet-item';
var ACTION_SHEET_ITEM_DATA_KEY = 'dxActionSheetItemData';
var ACTION_SHEET_WITHOUT_TITLE_CLASS = 'dx-actionsheet-without-title';

var ActionSheet = _uiCollection_widget.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      usePopover: false,
      target: null,
      title: '',
      showTitle: true,
      showCancelButton: true,
      cancelText: _message.default.format('Cancel'),
      onCancelClick: null,
      visible: false,

      /**
      * @name dxActionSheetOptions.noDataText
      * @hidden
      */
      noDataText: '',

      /**
      * @name dxActionSheetOptions.activeStateEnabled
      * @hidden
      */

      /**
      * @name dxActionSheetOptions.selectedIndex
      * @hidden
      */

      /**
      * @name dxActionSheetOptions.selectedItem
      * @hidden
      */

      /**
      * @name dxActionSheetOptions.onSelectionChanged
      * @action
      * @hidden
      */

      /**
      * @name dxActionSheetOptions.selectedItems
      * @hidden
      */

      /**
      * @name dxActionSheetOptions.selectedItemKeys
      * @hidden
      */

      /**
      * @name dxActionSheetOptions.keyExpr
      * @hidden
      */

      /**
      * @name dxActionSheetOptions.accessKey
      * @hidden
      */

      /**
      * @name dxActionSheetOptions.tabIndex
      * @hidden
      */

      /**
       * @name dxActionSheetOptions.focusStateEnabled
       * @type boolean
       * @default false
       * @hidden
       */
      focusStateEnabled: false,
      selectionByClick: false
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat([{
      device: {
        platform: 'ios',
        tablet: true
      },
      options: {
        usePopover: true
      }
    }]);
  },
  _initTemplates: function _initTemplates() {
    this.callBase();
    /**
    * @name dxActionSheetItem.visible
    * @type boolean
    * @default true
    * @hidden
    */

    /**
    * @name dxActionSheetItem.html
    * @type String
    * @hidden
    */

    this._templateManager.addDefaultTemplates({
      item: new _bindable_template.BindableTemplate(function ($container, data) {
        var button = new _button.default((0, _renderer.default)('<div>'), (0, _extend.extend)({
          onClick: data && data.click
        }, data));
        $container.append(button.$element());
      }, ['disabled', 'icon', 'text', 'type', 'onClick', 'click'], this.option('integrationOptions.watchMethod'))
    });
  },
  _itemContainer: function _itemContainer() {
    return this._$itemContainer;
  },
  _itemClass: function _itemClass() {
    return ACTION_SHEET_ITEM_CLASS;
  },
  _itemDataKey: function _itemDataKey() {
    return ACTION_SHEET_ITEM_DATA_KEY;
  },
  _toggleVisibility: _common.noop,
  _renderDimensions: _common.noop,
  _initMarkup: function _initMarkup() {
    this.callBase();
    this.$element().addClass(ACTION_SHEET_CLASS);

    this._createItemContainer();
  },
  _render: function _render() {
    this._renderPopup();
  },
  _createItemContainer: function _createItemContainer() {
    this._$itemContainer = (0, _renderer.default)('<div>').addClass(ACTION_SHEET_CONTAINER_CLASS);

    this._renderDisabled();
  },
  _renderDisabled: function _renderDisabled() {
    this._$itemContainer.toggleClass('dx-state-disabled', this.option('disabled'));
  },
  _renderPopup: function _renderPopup() {
    this._$popup = (0, _renderer.default)('<div>').appendTo(this.$element());
    this._isPopoverMode() ? this._createPopover() : this._createPopup();

    this._renderPopupTitle();

    this._mapPopupOption('visible');
  },
  _mapPopupOption: function _mapPopupOption(optionName) {
    this._popup && this._popup.option(optionName, this.option(optionName));
  },
  _isPopoverMode: function _isPopoverMode() {
    return this.option('usePopover') && this.option('target');
  },
  _renderPopupTitle: function _renderPopupTitle() {
    this._mapPopupOption('showTitle');

    this._popup && this._popup.$wrapper().toggleClass(ACTION_SHEET_WITHOUT_TITLE_CLASS, !this.option('showTitle'));
  },
  _clean: function _clean() {
    if (this._$popup) {
      this._$popup.remove();
    }

    this.callBase();
  },
  _overlayConfig: function _overlayConfig() {
    return {
      onInitialized: function (args) {
        this._popup = args.component;
      }.bind(this),
      disabled: false,
      showTitle: true,
      title: this.option('title'),
      deferRendering: !window.angular,
      onContentReady: this._popupContentReadyAction.bind(this),
      onHidden: this.hide.bind(this)
    };
  },
  _createPopover: function _createPopover() {
    this._createComponent(this._$popup, _popover.default, (0, _extend.extend)(this._overlayConfig(), {
      width: this.option('width') || 200,
      height: this.option('height') || 'auto',
      target: this.option('target')
    }));

    this._popup.$wrapper().addClass(ACTION_SHEET_POPOVER_WRAPPER_CLASS);
  },
  _createPopup: function _createPopup() {
    this._createComponent(this._$popup, _popup.default, (0, _extend.extend)(this._overlayConfig(), {
      dragEnabled: false,
      width: this.option('width') || '100%',
      height: this.option('height') || 'auto',
      showCloseButton: false,
      position: {
        my: 'bottom',
        at: 'bottom',
        of: window
      },
      animation: {
        show: {
          type: 'slide',
          duration: 400,
          from: {
            position: {
              my: 'top',
              at: 'bottom',
              of: window
            }
          },
          to: {
            position: {
              my: 'bottom',
              at: 'bottom',
              of: window
            }
          }
        },
        hide: {
          type: 'slide',
          duration: 400,
          from: {
            position: {
              my: 'bottom',
              at: 'bottom',
              of: window
            }
          },
          to: {
            position: {
              my: 'top',
              at: 'bottom',
              of: window
            }
          }
        }
      }
    }));

    this._popup.$wrapper().addClass(ACTION_SHEET_POPUP_WRAPPER_CLASS);
  },
  _popupContentReadyAction: function _popupContentReadyAction() {
    this._popup.$content().append(this._$itemContainer);

    this._attachClickEvent();

    this._attachHoldEvent();

    this._prepareContent();

    this._renderContent();

    this._renderCancelButton();
  },
  _renderCancelButton: function _renderCancelButton() {
    if (this._isPopoverMode()) {
      return;
    }

    if (this._$cancelButton) {
      this._$cancelButton.remove();
    }

    if (this.option('showCancelButton')) {
      var cancelClickAction = this._createActionByOption('onCancelClick') || _common.noop;

      var that = this;
      this._$cancelButton = (0, _renderer.default)('<div>').addClass(ACTION_SHEET_CANCEL_BUTTON_CLASS).appendTo(this._popup && this._popup.$content());

      this._createComponent(this._$cancelButton, _button.default, {
        disabled: false,
        text: this.option('cancelText'),
        onClick: function onClick(e) {
          var hidingArgs = {
            event: e,
            cancel: false
          };
          cancelClickAction(hidingArgs);

          if (!hidingArgs.cancel) {
            that.hide();
          }
        },
        integrationOptions: {}
      });
    }
  },
  _attachItemClickEvent: _common.noop,
  _itemClickHandler: function _itemClickHandler(e) {
    this.callBase(e);

    if (!(0, _renderer.default)(e.target).is('.dx-state-disabled, .dx-state-disabled *')) {
      this.hide();
    }
  },
  _itemHoldHandler: function _itemHoldHandler(e) {
    this.callBase(e);

    if (!(0, _renderer.default)(e.target).is('.dx-state-disabled, .dx-state-disabled *')) {
      this.hide();
    }
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'width':
      case 'height':
      case 'visible':
      case 'title':
        this._mapPopupOption(args.name);

        break;

      case 'disabled':
        this._renderDisabled();

        break;

      case 'showTitle':
        this._renderPopupTitle();

        break;

      case 'showCancelButton':
      case 'onCancelClick':
      case 'cancelText':
        this._renderCancelButton();

        break;

      case 'target':
      case 'usePopover':
      case 'items':
        this._invalidate();

        break;

      default:
        this.callBase(args);
    }
  },
  toggle: function toggle(showing) {
    var that = this;
    var d = new _deferred.Deferred();

    that._popup.toggle(showing).done(function () {
      that.option('visible', showing);
      d.resolveWith(that);
    });

    return d.promise();
  },
  show: function show() {
    return this.toggle(true);
  },
  hide: function hide() {
    return this.toggle(false);
  }
  /**
  * @name dxActionSheet.registerKeyHandler
  * @publicName registerKeyHandler(key, handler)
  * @hidden
  */

  /**
  * @name dxActionSheet.focus
  * @publicName focus()
  * @hidden
  */

});

(0, _component_registrator.default)('dxActionSheet', ActionSheet);
var _default = ActionSheet;
/**
 * @name dxActionSheetItem
 * @inherits CollectionWidgetItem
 * @type object
 */

exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _themes = __webpack_require__(31);

var _common = __webpack_require__(3);

var _type = __webpack_require__(1);

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _array = __webpack_require__(12);

var _extend = __webpack_require__(2);

var _iterator = __webpack_require__(4);

var _position = __webpack_require__(29);

var _uiCollection_widget = _interopRequireDefault(__webpack_require__(215));

var _promise = _interopRequireDefault(__webpack_require__(51));

var _bindable_template = __webpack_require__(68);

var _errors = _interopRequireDefault(__webpack_require__(13));

var _fx = _interopRequireDefault(__webpack_require__(37));

var _constants = __webpack_require__(216);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var TOOLBAR_BEFORE_CLASS = 'dx-toolbar-before';
var TOOLBAR_CENTER_CLASS = 'dx-toolbar-center';
var TOOLBAR_AFTER_CLASS = 'dx-toolbar-after';
var TOOLBAR_MINI_CLASS = 'dx-toolbar-mini';
var TOOLBAR_ITEM_CLASS = 'dx-toolbar-item';
var TOOLBAR_LABEL_CLASS = 'dx-toolbar-label';
var TOOLBAR_BUTTON_CLASS = 'dx-toolbar-button';
var TOOLBAR_ITEMS_CONTAINER_CLASS = 'dx-toolbar-items-container';
var TOOLBAR_GROUP_CLASS = 'dx-toolbar-group';
var TOOLBAR_COMPACT_CLASS = 'dx-toolbar-compact';
var TOOLBAR_LABEL_SELECTOR = '.' + TOOLBAR_LABEL_CLASS;
var TOOLBAR_MULTILINE_CLASS = 'dx-toolbar-multiline';
var TEXT_BUTTON_MODE = 'text';
var DEFAULT_BUTTON_TYPE = 'default';
var TOOLBAR_ITEM_DATA_KEY = 'dxToolbarItemDataKey';

var ToolbarBase = _uiCollection_widget.default.inherit({
  compactMode: false,
  ctor: function ctor(element, options) {
    this._userOptions = options || {};
    this.callBase(element, options);

    if ('height' in this._userOptions) {
      _errors.default.log('W0001', this.NAME, 'height', '20.1', 'Functionality associated with this option is not intended for the Toolbar widget.');
    }
  },
  _getSynchronizableOptionsForCreateComponent: function _getSynchronizableOptionsForCreateComponent() {
    return this.callBase().filter(function (item) {
      return item !== 'disabled';
    });
  },
  _initTemplates: function _initTemplates() {
    this.callBase();
    var template = new _bindable_template.BindableTemplate(function ($container, data, rawModel) {
      if ((0, _type.isPlainObject)(data)) {
        if (data.text) {
          $container.text(data.text).wrapInner('<div>');
        }

        if (data.html) {
          $container.html(data.html);
        }

        if (data.widget === 'dxButton') {
          if (this.option('useFlatButtons')) {
            data.options = data.options || {};
            data.options.stylingMode = data.options.stylingMode || TEXT_BUTTON_MODE;
          }

          if (this.option('useDefaultButtons')) {
            data.options = data.options || {};
            data.options.type = data.options.type || DEFAULT_BUTTON_TYPE;
          }
        }
      } else {
        $container.text(String(data));
      }

      this._getTemplate('dx-polymorph-widget').render({
        container: $container,
        model: rawModel,
        parent: this
      });
    }.bind(this), ['text', 'html', 'widget', 'options'], this.option('integrationOptions.watchMethod'));

    this._templateManager.addDefaultTemplates({
      item: template,
      menuItem: template
    });
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      renderAs: 'topToolbar',
      grouped: false,
      useFlatButtons: false,
      useDefaultButtons: false,
      multiline: false
    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return this.callBase().concat([{
      device: function device() {
        return (0, _themes.isMaterial)();
      },
      options: {
        useFlatButtons: true
      }
    }]);
  },
  _itemContainer: function _itemContainer() {
    return this._$toolbarItemsContainer.find(['.' + TOOLBAR_BEFORE_CLASS, '.' + TOOLBAR_CENTER_CLASS, '.' + TOOLBAR_AFTER_CLASS].join(','));
  },
  _itemClass: function _itemClass() {
    return TOOLBAR_ITEM_CLASS;
  },
  _itemDataKey: function _itemDataKey() {
    return TOOLBAR_ITEM_DATA_KEY;
  },
  _buttonClass: function _buttonClass() {
    return TOOLBAR_BUTTON_CLASS;
  },
  _dimensionChanged: function _dimensionChanged() {
    this._arrangeItems();

    this._applyCompactMode();
  },
  _initMarkup: function _initMarkup() {
    this._renderToolbar();

    this._renderSections();

    this.callBase();
    this.setAria('role', 'toolbar');
  },
  _waitParentAnimationFinished: function _waitParentAnimationFinished() {
    var _this = this;

    var $element = this.$element();
    var timeout = 15;
    return new _promise.default(function (resolve) {
      var check = function check() {
        var readyToResolve = true;
        $element.parents().each(function (_, parent) {
          if (_fx.default.isAnimating((0, _renderer.default)(parent))) {
            readyToResolve = false;
            return false;
          }
        });

        if (readyToResolve) {
          resolve();
        }

        return readyToResolve;
      };

      var runCheck = function runCheck() {
        clearTimeout(_this._waitParentAnimationTimeout);
        _this._waitParentAnimationTimeout = setTimeout(function () {
          return check() || runCheck();
        }, timeout);
      };

      runCheck();
    });
  },
  _render: function _render() {
    this.callBase();

    this._renderItemsAsync();

    if ((0, _themes.isMaterial)()) {
      _promise.default.all([this._waitParentAnimationFinished(), this._checkWebFontForLabelsLoaded()]).then(this._dimensionChanged.bind(this));
    }
  },
  _postProcessRenderItems: function _postProcessRenderItems() {
    this._arrangeItems();
  },
  _renderToolbar: function _renderToolbar() {
    this.$element().addClass(_constants.TOOLBAR_CLASS).toggleClass(TOOLBAR_MULTILINE_CLASS, this.option('multiline'));
    this._$toolbarItemsContainer = (0, _renderer.default)('<div>').addClass(TOOLBAR_ITEMS_CONTAINER_CLASS).appendTo(this.$element());
  },
  _renderSections: function _renderSections() {
    var $container = this._$toolbarItemsContainer;
    var that = this;
    (0, _iterator.each)(['before', 'center', 'after'], function () {
      var sectionClass = 'dx-toolbar-' + this;
      var $section = $container.find('.' + sectionClass);

      if (!$section.length) {
        that['_$' + this + 'Section'] = $section = (0, _renderer.default)('<div>').addClass(sectionClass).appendTo($container);
      }
    });
  },
  _checkWebFontForLabelsLoaded: function _checkWebFontForLabelsLoaded() {
    var $labels = this.$element().find(TOOLBAR_LABEL_SELECTOR);
    var promises = [];
    $labels.each(function (_, label) {
      var text = (0, _renderer.default)(label).text();
      var fontWeight = (0, _renderer.default)(label).css('fontWeight');
      promises.push((0, _themes.waitWebFont)(text, fontWeight));
    });
    return _promise.default.all(promises);
  },
  _arrangeItems: function _arrangeItems(elementWidth) {
    elementWidth = elementWidth || this.$element().width();

    this._$centerSection.css({
      margin: '0 auto',
      float: 'none'
    });

    var beforeRect = (0, _position.getBoundingRect)(this._$beforeSection.get(0));
    var afterRect = (0, _position.getBoundingRect)(this._$afterSection.get(0));

    this._alignCenterSection(beforeRect, afterRect, elementWidth);

    var $label = this._$toolbarItemsContainer.find(TOOLBAR_LABEL_SELECTOR).eq(0);

    var $section = $label.parent();

    if (!$label.length) {
      return;
    }

    var labelOffset = beforeRect.width ? beforeRect.width : $label.position().left;
    var widthBeforeSection = $section.hasClass(TOOLBAR_BEFORE_CLASS) ? 0 : labelOffset;
    var widthAfterSection = $section.hasClass(TOOLBAR_AFTER_CLASS) ? 0 : afterRect.width;
    var elemsAtSectionWidth = 0;
    $section.children().not(TOOLBAR_LABEL_SELECTOR).each(function () {
      elemsAtSectionWidth += (0, _renderer.default)(this).outerWidth();
    });
    var freeSpace = elementWidth - elemsAtSectionWidth;
    var sectionMaxWidth = Math.max(freeSpace - widthBeforeSection - widthAfterSection, 0);

    if ($section.hasClass(TOOLBAR_BEFORE_CLASS)) {
      this._alignSection(this._$beforeSection, sectionMaxWidth);
    } else {
      var labelPaddings = $label.outerWidth() - $label.width();
      $label.css('maxWidth', sectionMaxWidth - labelPaddings);
    }
  },
  _alignCenterSection: function _alignCenterSection(beforeRect, afterRect, elementWidth) {
    this._alignSection(this._$centerSection, elementWidth - beforeRect.width - afterRect.width);

    var isRTL = this.option('rtlEnabled');
    var leftRect = isRTL ? afterRect : beforeRect;
    var rightRect = isRTL ? beforeRect : afterRect;
    var centerRect = (0, _position.getBoundingRect)(this._$centerSection.get(0));

    if (leftRect.right > centerRect.left || centerRect.right > rightRect.left) {
      this._$centerSection.css({
        marginLeft: leftRect.width,
        marginRight: rightRect.width,
        float: leftRect.width > rightRect.width ? 'none' : 'right'
      });
    }
  },
  _alignSection: function _alignSection($section, maxWidth) {
    var $labels = $section.find(TOOLBAR_LABEL_SELECTOR);
    var labels = $labels.toArray();
    maxWidth = maxWidth - this._getCurrentLabelsPaddings(labels);

    var currentWidth = this._getCurrentLabelsWidth(labels);

    var difference = Math.abs(currentWidth - maxWidth);

    if (maxWidth < currentWidth) {
      labels = labels.reverse();

      this._alignSectionLabels(labels, difference, false);
    } else {
      this._alignSectionLabels(labels, difference, true);
    }
  },
  _alignSectionLabels: function _alignSectionLabels(labels, difference, expanding) {
    var getRealLabelWidth = function getRealLabelWidth(label) {
      return (0, _position.getBoundingRect)(label).width;
    };

    for (var i = 0; i < labels.length; i++) {
      var $label = (0, _renderer.default)(labels[i]);
      var currentLabelWidth = Math.ceil(getRealLabelWidth(labels[i]));
      var labelMaxWidth = void 0;

      if (expanding) {
        $label.css('maxWidth', 'inherit');
      }

      var possibleLabelWidth = Math.ceil(expanding ? getRealLabelWidth(labels[i]) : currentLabelWidth);

      if (possibleLabelWidth < difference) {
        labelMaxWidth = expanding ? possibleLabelWidth : 0;
        difference = difference - possibleLabelWidth;
      } else {
        labelMaxWidth = expanding ? currentLabelWidth + difference : currentLabelWidth - difference;
        $label.css('maxWidth', labelMaxWidth);
        break;
      }

      $label.css('maxWidth', labelMaxWidth);
    }
  },
  _applyCompactMode: function _applyCompactMode() {
    var $element = this.$element();
    $element.removeClass(TOOLBAR_COMPACT_CLASS);

    if (this.option('compactMode') && this._getSummaryItemsWidth(this.itemElements(), true) > $element.width()) {
      $element.addClass(TOOLBAR_COMPACT_CLASS);
    }
  },
  _getCurrentLabelsWidth: function _getCurrentLabelsWidth(labels) {
    var width = 0;
    labels.forEach(function (label, index) {
      width += (0, _renderer.default)(label).outerWidth();
    });
    return width;
  },
  _getCurrentLabelsPaddings: function _getCurrentLabelsPaddings(labels) {
    var padding = 0;
    labels.forEach(function (label, index) {
      padding += (0, _renderer.default)(label).outerWidth() - (0, _renderer.default)(label).width();
    });
    return padding;
  },
  _renderItem: function _renderItem(index, item, itemContainer, $after) {
    var location = item.location || 'center';
    var container = itemContainer || this['_$' + location + 'Section'];
    var itemHasText = !!(item.text || item.html);
    var itemElement = this.callBase(index, item, container, $after);
    itemElement.toggleClass(this._buttonClass(), !itemHasText).toggleClass(TOOLBAR_LABEL_CLASS, itemHasText).addClass(item.cssClass);
    return itemElement;
  },
  _renderGroupedItems: function _renderGroupedItems() {
    var that = this;
    (0, _iterator.each)(this.option('items'), function (groupIndex, group) {
      var groupItems = group.items;
      var $container = (0, _renderer.default)('<div>').addClass(TOOLBAR_GROUP_CLASS);
      var location = group.location || 'center';

      if (!groupItems || !groupItems.length) {
        return;
      }

      (0, _iterator.each)(groupItems, function (itemIndex, item) {
        that._renderItem(itemIndex, item, $container, null);
      });

      that._$toolbarItemsContainer.find('.dx-toolbar-' + location).append($container);
    });
  },
  _renderItems: function _renderItems(items) {
    var grouped = this.option('grouped') && items.length && items[0].items;
    grouped ? this._renderGroupedItems() : this.callBase(items);
  },
  _getToolbarItems: function _getToolbarItems() {
    return this.option('items') || [];
  },
  _renderContentImpl: function _renderContentImpl() {
    var items = this._getToolbarItems();

    this.$element().toggleClass(TOOLBAR_MINI_CLASS, items.length === 0);

    if (this._renderedItemsCount) {
      this._renderItems(items.slice(this._renderedItemsCount));
    } else {
      this._renderItems(items);
    }

    this._applyCompactMode();
  },
  _renderEmptyMessage: _common.noop,
  _clean: function _clean() {
    this._$toolbarItemsContainer.children().empty();

    this.$element().empty();
  },
  _visibilityChanged: function _visibilityChanged(visible) {
    if (visible) {
      this._arrangeItems();
    }
  },
  _isVisible: function _isVisible() {
    return this.$element().width() > 0 && this.$element().height() > 0;
  },
  _getIndexByItem: function _getIndexByItem(item) {
    return (0, _array.inArray)(item, this._getToolbarItems());
  },
  _itemOptionChanged: function _itemOptionChanged(item, property, value) {
    this.callBase.apply(this, [item, property, value]);

    this._arrangeItems();
  },
  _optionChanged: function _optionChanged(args) {
    var name = args.name;

    switch (name) {
      case 'width':
        this.callBase.apply(this, arguments);

        this._dimensionChanged();

        break;

      case 'multiline':
        this.$element().toggleClass(TOOLBAR_MULTILINE_CLASS, args.value);
        break;

      case 'renderAs':
      case 'useFlatButtons':
      case 'useDefaultButtons':
        this._invalidate();

        break;

      case 'compactMode':
        this._applyCompactMode();

        break;

      case 'grouped':
        break;

      default:
        this.callBase.apply(this, arguments);
    }
  },
  _dispose: function _dispose() {
    this.callBase();
    clearTimeout(this._waitParentAnimationTimeout);
  }
});

(0, _component_registrator.default)('dxToolbarBase', ToolbarBase);
var _default = ToolbarBase;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _uiCollection_widget = _interopRequireDefault(__webpack_require__(82));

var _deferred = __webpack_require__(9);

var _common = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AsyncCollectionWidget = _uiCollection_widget.default.inherit({
  _initMarkup: function _initMarkup() {
    this._deferredItems = [];
    this.callBase();
  },
  _renderItemContent: function _renderItemContent(args) {
    var renderContentDeferred = new _deferred.Deferred();
    var itemDeferred = new _deferred.Deferred();
    var that = this;
    this._deferredItems[args.index] = itemDeferred;
    var $itemContent = this.callBase.call(that, args);
    itemDeferred.done(function () {
      renderContentDeferred.resolve($itemContent);
    });
    return renderContentDeferred.promise();
  },
  _createItemByTemplate: function _createItemByTemplate(itemTemplate, renderArgs) {
    var _this = this;

    return itemTemplate.render({
      model: renderArgs.itemData,
      container: renderArgs.container,
      index: renderArgs.index,
      onRendered: function onRendered() {
        _this._deferredItems[renderArgs.index].resolve();
      }
    });
  },
  _postProcessRenderItems: _common.noop,
  _renderItemsAsync: function _renderItemsAsync() {
    var _this2 = this;

    var d = new _deferred.Deferred();

    _deferred.when.apply(this, this._deferredItems).done(function () {
      _this2._postProcessRenderItems();

      d.resolve();
    });

    return d.promise();
  },
  _clean: function _clean() {
    this.callBase();
    this._deferredItems = [];
  }
});

var _default = AsyncCollectionWidget;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.TOOLBAR_CLASS = void 0;
var TOOLBAR_CLASS = 'dx-toolbar';
exports.TOOLBAR_CLASS = TOOLBAR_CLASS;

/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _window = __webpack_require__(7);

var _element = __webpack_require__(20);

var _dom_adapter = _interopRequireDefault(__webpack_require__(8));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _common = __webpack_require__(3);

var _extend = __webpack_require__(2);

var _translator = __webpack_require__(16);

var _position = _interopRequireDefault(__webpack_require__(56));

var _type = __webpack_require__(1);

var _math = __webpack_require__(40);

var _index = __webpack_require__(6);

var _popup = _interopRequireDefault(__webpack_require__(121));

var _position2 = __webpack_require__(29);

var _popover_contants = __webpack_require__(218);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var window = (0, _window.getWindow)();
// STYLE popover
var POPOVER_CLASS = 'dx-popover';
var POPOVER_WRAPPER_CLASS = 'dx-popover-wrapper';
var POPOVER_ARROW_CLASS = 'dx-popover-arrow';
var POPOVER_WITHOUT_TITLE_CLASS = 'dx-popover-without-title';
var POSITION_FLIP_MAP = {
  'left': 'right',
  'top': 'bottom',
  'right': 'left',
  'bottom': 'top',
  'center': 'center'
};
var WEIGHT_OF_SIDES = {
  'left': -1,
  'top': -1,
  'center': 0,
  'right': 1,
  'bottom': 1
};
var POSITION_ALIASES = {
  // NOTE: public API
  'top': {
    my: 'bottom center',
    at: 'top center',
    collision: 'fit flip'
  },
  'bottom': {
    my: 'top center',
    at: 'bottom center',
    collision: 'fit flip'
  },
  'right': {
    my: 'left center',
    at: 'right center',
    collision: 'flip fit'
  },
  'left': {
    my: 'right center',
    at: 'left center',
    collision: 'flip fit'
  }
};
var SIDE_BORDER_WIDTH_STYLES = {
  'left': 'borderLeftWidth',
  'top': 'borderTopWidth',
  'right': 'borderRightWidth',
  'bottom': 'borderBottomWidth'
};

var getEventNameByOption = function getEventNameByOption(optionValue) {
  return (0, _type.isObject)(optionValue) ? optionValue.name : optionValue;
};

var getEventName = function getEventName(that, optionName) {
  var optionValue = that.option(optionName);
  return getEventNameByOption(optionValue);
};

var getEventDelay = function getEventDelay(that, optionName) {
  var optionValue = that.option(optionName);
  return (0, _type.isObject)(optionValue) && optionValue.delay;
};

var attachEvent = function attachEvent(that, name) {
  var target = that.option('target');
  var isSelector = (0, _type.isString)(target);
  var event = getEventName(that, name + 'Event');

  if (!event || that.option('disabled')) {
    return;
  }

  var eventName = (0, _index.addNamespace)(event, that.NAME);

  var action = that._createAction(function () {
    var delay = getEventDelay(that, name + 'Event');

    this._clearEventsTimeouts();

    if (delay) {
      this._timeouts[name] = setTimeout(function () {
        that[name]();
      }, delay);
    } else {
      that[name]();
    }
  }.bind(that), {
    validatingTargetName: 'target'
  });

  var handler = function handler(e) {
    action({
      event: e,
      target: (0, _renderer.default)(e.currentTarget)
    });
  };

  var EVENT_HANDLER_NAME = '_' + name + 'EventHandler';

  if (isSelector) {
    that[EVENT_HANDLER_NAME] = handler;

    _events_engine.default.on(_dom_adapter.default.getDocument(), eventName, target, handler);
  } else {
    var targetElement = (0, _element.getPublicElement)((0, _renderer.default)(target));
    that[EVENT_HANDLER_NAME] = undefined;

    _events_engine.default.on(targetElement, eventName, handler);
  }
};

var detachEvent = function detachEvent(that, target, name, event) {
  var eventName = event || getEventName(that, name + 'Event');

  if (!eventName) {
    return;
  }

  eventName = (0, _index.addNamespace)(eventName, that.NAME);
  var EVENT_HANDLER_NAME = '_' + name + 'EventHandler';

  if (that[EVENT_HANDLER_NAME]) {
    _events_engine.default.off(_dom_adapter.default.getDocument(), eventName, target, that[EVENT_HANDLER_NAME]);
  } else {
    _events_engine.default.off((0, _element.getPublicElement)((0, _renderer.default)(target)), eventName);
  }
};

var Popover = _popup.default.inherit({
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      target: window,
      shading: false,
      position: 'bottom',
      closeOnOutsideClick: true,
      animation: {
        show: {
          type: 'fade',
          from: 0,
          to: 1
        },
        hide: {
          type: 'fade',
          to: 0
        }
      },
      showTitle: false,
      width: 'auto',
      height: 'auto',

      /**
       * @name dxPopoverOptions.dragEnabled
       * @hidden
       */
      dragEnabled: false,

      /**
      * @name dxPopoverOptions.resizeEnabled
      * @hidden
      */
      resizeEnabled: false,

      /**
      * @name dxPopoverOptions.onResizeStart
      * @extends Action
      * @action
      * @hidden
      */

      /**
      * @name dxPopoverOptions.onResize
      * @extends Action
      * @action
      * @hidden
      */

      /**
      * @name dxPopoverOptions.onResizeEnd
      * @extends Action
      * @action
      * @hidden
      */

      /**
      * @name dxPopoverOptions.fullScreen
      * @hidden
      */
      fullScreen: false,
      closeOnTargetScroll: true,
      arrowPosition: '',
      arrowOffset: 0,
      boundaryOffset: {
        h: _popover_contants.POPOVER_BOUNDARY_OFFSET,
        v: _popover_contants.POPOVER_BOUNDARY_OFFSET
      },
      _fixedPosition: true
      /**
      * @name dxPopoverOptions.focusStateEnabled
      * @hidden
      */

      /**
      * @name dxPopoverOptions.accessKey
      * @hidden
      */

      /**
      * @name dxPopoverOptions.tabIndex
      * @hidden
      */

    });
  },
  _defaultOptionsRules: function _defaultOptionsRules() {
    return [{
      device: {
        platform: 'ios'
      },
      options: {
        arrowPosition: {
          boundaryOffset: {
            h: 20,
            v: -10
          },
          collision: 'fit'
        }
      }
    }, {
      device: function device() {
        return !(0, _window.hasWindow)();
      },
      options: {
        animation: null
      }
    }];
  },
  _init: function _init() {
    this.callBase();

    this._renderArrow();

    this._timeouts = {};
    this.$element().addClass(POPOVER_CLASS);
    this.$wrapper().addClass(POPOVER_WRAPPER_CLASS);
  },
  _render: function _render() {
    this.callBase.apply(this, arguments);

    this._detachEvents(this.option('target'));

    this._attachEvents();
  },
  _detachEvents: function _detachEvents(target) {
    detachEvent(this, target, 'show');
    detachEvent(this, target, 'hide');
  },
  _attachEvents: function _attachEvents() {
    attachEvent(this, 'show');
    attachEvent(this, 'hide');
  },
  _renderArrow: function _renderArrow() {
    this._$arrow = (0, _renderer.default)('<div>').addClass(POPOVER_ARROW_CLASS).prependTo(this.$overlayContent());
  },
  _documentDownHandler: function _documentDownHandler(e) {
    if (this._isOutsideClick(e)) {
      return this.callBase(e);
    }

    return true;
  },
  _isOutsideClick: function _isOutsideClick(e) {
    return !(0, _renderer.default)(e.target).closest(this.option('target')).length;
  },
  _animate: function _animate(animation) {
    if (animation && animation.to && _typeof(animation.to) === 'object') {
      (0, _extend.extend)(animation.to, {
        position: this._getContainerPosition()
      });
    }

    this.callBase.apply(this, arguments);
  },
  _stopAnimation: function _stopAnimation() {
    this.callBase.apply(this, arguments);
  },
  _renderTitle: function _renderTitle() {
    this.$wrapper().toggleClass(POPOVER_WITHOUT_TITLE_CLASS, !this.option('showTitle'));
    this.callBase();
  },
  _renderPosition: function _renderPosition() {
    this.callBase();

    this._renderOverlayPosition();
  },
  _renderOverlayBoundaryOffset: _common.noop,
  _renderOverlayPosition: function _renderOverlayPosition() {
    this._resetOverlayPosition();

    this._updateContentSize();

    var contentPosition = this._getContainerPosition();

    var resultLocation = _position.default.setup(this.$overlayContent(), contentPosition);

    var positionSide = this._getSideByLocation(resultLocation);

    this._togglePositionClass('dx-position-' + positionSide);

    this._toggleFlippedClass(resultLocation.h.flip, resultLocation.v.flip);

    var isArrowVisible = this._isHorizontalSide() || this._isVerticalSide();

    if (isArrowVisible) {
      this._renderArrowPosition(positionSide);
    }
  },
  _resetOverlayPosition: function _resetOverlayPosition() {
    this._setContentHeight(true);

    this._togglePositionClass('dx-position-' + this._positionSide);

    (0, _translator.move)(this.$overlayContent(), {
      left: 0,
      top: 0
    });

    this._$arrow.css({
      top: 'auto',
      right: 'auto',
      bottom: 'auto',
      left: 'auto'
    });
  },
  _updateContentSize: function _updateContentSize() {
    if (!this.$content()) {
      return;
    }

    var containerLocation = _position.default.calculate(this.$overlayContent(), this._getContainerPosition());

    if (containerLocation.h.oversize > 0 && this._isHorizontalSide() && !containerLocation.h.fit) {
      var newContainerWidth = this.$overlayContent().width() - containerLocation.h.oversize;
      this.$overlayContent().width(newContainerWidth);
    }

    if (containerLocation.v.oversize > 0 && this._isVerticalSide() && !containerLocation.v.fit) {
      var newOverlayContentHeight = this.$overlayContent().height() - containerLocation.v.oversize;
      var newPopupContentHeight = this.$content().height() - containerLocation.v.oversize;
      this.$overlayContent().height(newOverlayContentHeight);
      this.$content().height(newPopupContentHeight);
    }
  },
  _getContainerPosition: function _getContainerPosition() {
    var offset = (0, _common.pairToObject)(this._position.offset || '');
    var hOffset = offset.h;
    var vOffset = offset.v;

    var isVerticalSide = this._isVerticalSide();

    var isHorizontalSide = this._isHorizontalSide();

    if (isVerticalSide || isHorizontalSide) {
      var isPopoverInside = this._isPopoverInside();

      var sign = (isPopoverInside ? -1 : 1) * WEIGHT_OF_SIDES[this._positionSide];
      var arrowSize = isVerticalSide ? this._$arrow.height() : this._$arrow.width();

      var arrowSizeCorrection = this._getContentBorderWidth(this._positionSide);

      var arrowOffset = sign * (arrowSize - arrowSizeCorrection);
      isVerticalSide ? vOffset += arrowOffset : hOffset += arrowOffset;
    }

    return (0, _extend.extend)({}, this._position, {
      offset: hOffset + ' ' + vOffset
    });
  },
  _getContentBorderWidth: function _getContentBorderWidth(side) {
    var borderWidth = this.$overlayContent().css(SIDE_BORDER_WIDTH_STYLES[side]);
    return parseInt(borderWidth) || 0;
  },
  _getSideByLocation: function _getSideByLocation(location) {
    var isFlippedByVertical = location.v.flip;
    var isFlippedByHorizontal = location.h.flip;
    return this._isVerticalSide() && isFlippedByVertical || this._isHorizontalSide() && isFlippedByHorizontal || this._isPopoverInside() ? POSITION_FLIP_MAP[this._positionSide] : this._positionSide;
  },
  _togglePositionClass: function _togglePositionClass(positionClass) {
    this.$wrapper().removeClass('dx-position-left dx-position-right dx-position-top dx-position-bottom').addClass(positionClass);
  },
  _toggleFlippedClass: function _toggleFlippedClass(isFlippedHorizontal, isFlippedVertical) {
    this.$wrapper().toggleClass('dx-popover-flipped-horizontal', isFlippedHorizontal).toggleClass('dx-popover-flipped-vertical', isFlippedVertical);
  },
  _renderArrowPosition: function _renderArrowPosition(side) {
    var _$target$get;

    var arrowRect = (0, _position2.getBoundingRect)(this._$arrow.get(0));
    var arrowFlip = -(this._isVerticalSide(side) ? arrowRect.height : arrowRect.width);

    this._$arrow.css(POSITION_FLIP_MAP[side], arrowFlip);

    var axis = this._isVerticalSide(side) ? 'left' : 'top';
    var sizeProperty = this._isVerticalSide(side) ? 'width' : 'height';
    var $target = (0, _renderer.default)(this._position.of);
    var targetOffset = _position.default.offset($target) || {
      top: 0,
      left: 0
    };

    var contentOffset = _position.default.offset(this.$overlayContent());

    var arrowSize = arrowRect[sizeProperty];
    var contentLocation = contentOffset[axis];
    var contentSize = (0, _position2.getBoundingRect)(this.$overlayContent().get(0))[sizeProperty];
    var targetLocation = targetOffset[axis];
    var targetSize = (_$target$get = $target.get(0)) !== null && _$target$get !== void 0 && _$target$get.preventDefault ? 0 : (0, _position2.getBoundingRect)($target.get(0))[sizeProperty];
    var min = Math.max(contentLocation, targetLocation);
    var max = Math.min(contentLocation + contentSize, targetLocation + targetSize);
    var arrowLocation;

    if (this.option('arrowPosition') === 'start') {
      arrowLocation = min - contentLocation;
    } else if (this.option('arrowPosition') === 'end') {
      arrowLocation = max - contentLocation - arrowSize;
    } else {
      arrowLocation = (min + max) / 2 - contentLocation - arrowSize / 2;
    }

    var borderWidth = this._getContentBorderWidth(side);

    var finalArrowLocation = (0, _math.fitIntoRange)(arrowLocation - borderWidth + this.option('arrowOffset'), borderWidth, contentSize - arrowSize - borderWidth * 2);

    this._$arrow.css(axis, finalArrowLocation);
  },
  _isPopoverInside: function _isPopoverInside() {
    var position = this._transformStringPosition(this.option('position'), POSITION_ALIASES);

    var my = _position.default.setup.normalizeAlign(position.my);

    var at = _position.default.setup.normalizeAlign(position.at);

    return my.h === at.h && my.v === at.v;
  },
  _setContentHeight: function _setContentHeight(fullUpdate) {
    if (fullUpdate) {
      this.callBase();
    }
  },
  _renderWrapperPosition: function _renderWrapperPosition() {
    if (this.option('shading')) {
      this.$wrapper().css({
        top: 0,
        left: 0
      });
    }
  },
  _renderWrapperDimensions: function _renderWrapperDimensions() {
    if (this.option('shading')) {
      this.$wrapper().css({
        width: '100%',
        height: '100%'
      });
    }
  },
  _normalizePosition: function _normalizePosition() {
    var position = (0, _extend.extend)({}, this._transformStringPosition(this.option('position'), POSITION_ALIASES));

    if (!position.of) {
      position.of = this.option('target');
    }

    if (!position.collision) {
      position.collision = 'flip';
    }

    if (!position.boundaryOffset) {
      position.boundaryOffset = this.option('boundaryOffset');
    }

    this._positionSide = this._getDisplaySide(position);
    this._position = position;
  },
  _getDisplaySide: function _getDisplaySide(position) {
    var my = _position.default.setup.normalizeAlign(position.my);

    var at = _position.default.setup.normalizeAlign(position.at);

    var weightSign = WEIGHT_OF_SIDES[my.h] === WEIGHT_OF_SIDES[at.h] && WEIGHT_OF_SIDES[my.v] === WEIGHT_OF_SIDES[at.v] ? -1 : 1;
    var horizontalWeight = Math.abs(WEIGHT_OF_SIDES[my.h] - weightSign * WEIGHT_OF_SIDES[at.h]);
    var verticalWeight = Math.abs(WEIGHT_OF_SIDES[my.v] - weightSign * WEIGHT_OF_SIDES[at.v]);
    return horizontalWeight > verticalWeight ? at.h : at.v;
  },
  _isVerticalSide: function _isVerticalSide(side) {
    side = side || this._positionSide;
    return side === 'top' || side === 'bottom';
  },
  _isHorizontalSide: function _isHorizontalSide(side) {
    side = side || this._positionSide;
    return side === 'left' || side === 'right';
  },
  _clearEventTimeout: function _clearEventTimeout(name) {
    clearTimeout(this._timeouts[name]);
  },
  _clearEventsTimeouts: function _clearEventsTimeouts() {
    this._clearEventTimeout('show');

    this._clearEventTimeout('hide');
  },
  _clean: function _clean() {
    this._detachEvents(this.option('target'));

    this.callBase.apply(this, arguments);
  },
  _optionChanged: function _optionChanged(args) {
    switch (args.name) {
      case 'boundaryOffset':
      case 'arrowPosition':
      case 'arrowOffset':
        this._renderGeometry();

        break;

      case 'fullScreen':
        if (args.value) {
          this.option('fullScreen', false);
        }

        break;

      case 'target':
        args.previousValue && this._detachEvents(args.previousValue);
        this.callBase(args);
        break;

      case 'showEvent':
      case 'hideEvent':
        {
          var name = args.name.substring(0, 4);
          var event = getEventNameByOption(args.previousValue);
          this.hide();
          detachEvent(this, this.option('target'), name, event);
          attachEvent(this, name);
          break;
        }

      case 'visible':
        this._clearEventTimeout(args.value ? 'show' : 'hide');

        this.callBase(args);
        break;

      default:
        this.callBase(args);
    }
  },
  show: function show(target) {
    if (target) {
      this.option('target', target);
    }

    return this.callBase();
  }
  /**
  * @name dxPopover.registerKeyHandler
  * @publicName registerKeyHandler(key, handler)
  * @hidden
  */

  /**
  * @name dxPopover.focus
  * @publicName focus()
  * @hidden
  */

});

(0, _component_registrator.default)('dxPopover', Popover);
var _default = Popover;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.POPOVER_BOUNDARY_OFFSET = void 0;
var POPOVER_BOUNDARY_OFFSET = 10;
exports.POPOVER_BOUNDARY_OFFSET = POPOVER_BOUNDARY_OFFSET;

/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _translator = __webpack_require__(16);

var _fx = _interopRequireDefault(__webpack_require__(37));

var _uiListEdit = __webpack_require__(33);

var _uiListEdit2 = _interopRequireDefault(__webpack_require__(45));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _uiListEdit.register)('delete', 'swipe', _uiListEdit2.default.inherit({
  _shouldHandleSwipe: true,
  _renderItemPosition: function _renderItemPosition($itemElement, offset, animate) {
    var deferred = new _deferred.Deferred();
    var itemOffset = offset * this._itemElementWidth;

    if (animate) {
      _fx.default.animate($itemElement, {
        to: {
          left: itemOffset
        },
        type: 'slide',
        complete: function complete() {
          deferred.resolve($itemElement, offset);
        }
      });
    } else {
      (0, _translator.move)($itemElement, {
        left: itemOffset
      });
      deferred.resolve();
    }

    return deferred.promise();
  },
  _swipeStartHandler: function _swipeStartHandler($itemElement) {
    this._itemElementWidth = $itemElement.width();
    return true;
  },
  _swipeUpdateHandler: function _swipeUpdateHandler($itemElement, args) {
    this._renderItemPosition($itemElement, args.offset);

    return true;
  },
  _swipeEndHandler: function _swipeEndHandler($itemElement, args) {
    var offset = args.targetOffset;

    this._renderItemPosition($itemElement, offset, true).done(function ($itemElement, offset) {
      if (Math.abs(offset)) {
        this._list.deleteItem($itemElement).fail(function () {
          this._renderItemPosition($itemElement, 0, true);
        }.bind(this));
      }
    }.bind(this));

    return true;
  }
}));

/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(221);

/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _extend = __webpack_require__(2);

var _index = __webpack_require__(6);

var _uiListEdit = __webpack_require__(33);

var _uiListEdit2 = _interopRequireDefault(__webpack_require__(45));

var _sortable = _interopRequireDefault(__webpack_require__(222));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var REORDER_HANDLE_CONTAINER_CLASS = 'dx-list-reorder-handle-container';
var REORDER_HANDLE_CLASS = 'dx-list-reorder-handle';
var REORDERING_ITEM_GHOST_CLASS = 'dx-list-item-ghost-reordering';
var STATE_HOVER_CLASS = 'dx-state-hover';
(0, _uiListEdit.register)('reorder', 'default', _uiListEdit2.default.inherit({
  _init: function _init() {
    var list = this._list;
    this._groupedEnabled = this._list.option('grouped');
    this._lockedDrag = false;
    var filter = this._groupedEnabled ? '> .dx-list-group > .dx-list-group-body > .dx-list-item' : '> .dx-list-item';
    this._sortable = list._createComponent(list._scrollView.content(), _sortable.default, (0, _extend.extend)({
      component: list,
      contentTemplate: null,
      allowReordering: false,
      filter: filter,
      container: list.$element(),
      dragDirection: list.option('itemDragging.group') ? 'both' : 'vertical',
      handle: ".".concat(REORDER_HANDLE_CLASS),
      dragTemplate: this._dragTemplate,
      onDragStart: this._dragStartHandler.bind(this),
      onDragChange: this._dragChangeHandler.bind(this),
      onReorder: this._reorderHandler.bind(this)
    }, list.option('itemDragging')));
  },
  afterRender: function afterRender() {
    this._sortable.update();
  },
  _dragTemplate: function _dragTemplate(e) {
    return (0, _renderer.default)(e.itemElement).clone().width((0, _renderer.default)(e.itemElement).width()).addClass(REORDERING_ITEM_GHOST_CLASS).addClass(STATE_HOVER_CLASS);
  },
  _dragStartHandler: function _dragStartHandler(e) {
    if (this._lockedDrag) {
      e.cancel = true;
      return;
    }
  },
  _dragChangeHandler: function _dragChangeHandler(e) {
    if (this._groupedEnabled && !this._sameParent(e.fromIndex, e.toIndex)) {
      e.cancel = true;
      return;
    }
  },
  _sameParent: function _sameParent(fromIndex, toIndex) {
    var $dragging = this._list.getItemElementByFlatIndex(fromIndex);

    var $over = this._list.getItemElementByFlatIndex(toIndex);

    return $over.parent().get(0) === $dragging.parent().get(0);
  },
  _reorderHandler: function _reorderHandler(e) {
    var $targetElement = this._list.getItemElementByFlatIndex(e.toIndex);

    this._list.reorderItem((0, _renderer.default)(e.itemElement), $targetElement);
  },
  afterBag: function afterBag(config) {
    var _this = this;

    var $handle = (0, _renderer.default)('<div>').addClass(REORDER_HANDLE_CLASS);

    _events_engine.default.on($handle, 'dxpointerdown', function (e) {
      _this._lockedDrag = !(0, _index.isMouseEvent)(e);
    });

    _events_engine.default.on($handle, 'dxhold', {
      timeout: 30
    }, function (e) {
      e.cancel = true;
      _this._lockedDrag = false;
    });

    config.$container.addClass(REORDER_HANDLE_CONTAINER_CLASS).append($handle);
  }
}));

/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _extend = __webpack_require__(2);

var _draggable = _interopRequireDefault(__webpack_require__(223));

var _element = __webpack_require__(20);

var _window = __webpack_require__(7);

var _position = __webpack_require__(29);

var _translator = __webpack_require__(16);

var _fx = _interopRequireDefault(__webpack_require__(37));

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var window = (0, _window.getWindow)(); // STYLE sortable

var SORTABLE = 'dxSortable';
var PLACEHOLDER_CLASS = 'placeholder';
var CLONE_CLASS = 'clone';

var isElementVisible = function isElementVisible(itemElement) {
  return (0, _renderer.default)(itemElement).is(':visible');
};

var animate = function animate(element, config) {
  var _config$to, _config$to2;

  if (!element) return;
  var left = ((_config$to = config.to) === null || _config$to === void 0 ? void 0 : _config$to.left) || 0;
  var top = ((_config$to2 = config.to) === null || _config$to2 === void 0 ? void 0 : _config$to2.top) || 0;
  element.style.transform = "translate(".concat(left, "px,").concat(top, "px)");
  element.style.transition = _fx.default.off ? '' : "transform ".concat(config.duration, "ms ").concat(config.easing);
};

var stopAnimation = function stopAnimation(element) {
  if (!element) return;
  element.style.transform = '';
  element.style.transition = '';
};

function getScrollableBoundary($scrollable) {
  var offset = $scrollable.offset();
  var style = $scrollable[0].style;
  var paddingLeft = parseFloat(style.paddingLeft) || 0;
  var paddingRight = parseFloat(style.paddingRight) || 0;
  var paddingTop = parseFloat(style.paddingTop) || 0; // use clientWidth, because vertical scrollbar reduces content width

  var width = $scrollable[0].clientWidth - (paddingLeft + paddingRight);
  var height = $scrollable.height();
  var left = offset.left + paddingLeft;
  var top = offset.top + paddingTop;
  return {
    left: left,
    right: left + width,
    top: top,
    bottom: top + height
  };
}

var Sortable = _draggable.default.inherit({
  _init: function _init() {
    this.callBase();
    this._sourceScrollHandler = this._handleSourceScroll.bind(this);
    this._sourceScrollableInfo = null;
  },
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      clone: true,
      filter: '> *',
      itemOrientation: 'vertical',
      dropFeedbackMode: 'push',
      allowDropInsideItem: false,
      allowReordering: true,
      moveItemOnDrop: false,
      onDragChange: null,
      onAdd: null,
      onRemove: null,
      onReorder: null,

      /**
       * @name dxSortableOptions.onPlaceholderPrepared
       * @type function(e)
       * @extends Action
       * @type_function_param1 e:object
       * @type_function_param1_field4 event:event
       * @type_function_param1_field5 cancel:boolean
       * @type_function_param1_field6 itemData:any
       * @type_function_param1_field7 itemElement:DxElement
       * @type_function_param1_field8 fromIndex:number
       * @type_function_param1_field9 toIndex:number
       * @type_function_param1_field10 fromData:any
       * @type_function_param1_field11 toData:any
       * @type_function_param1_field12 dropInsideItem:boolean
       * @action
       * @hidden
       */
      onPlaceholderPrepared: null,
      animation: {
        type: 'slide',
        duration: 300,
        easing: 'ease'
      },
      fromIndex: null,
      toIndex: null,
      dropInsideItem: false,
      itemPoints: null,
      fromIndexOffset: 0,
      offset: 0,
      autoUpdate: false,
      draggableElementSize: 0
    });
  },
  reset: function reset() {
    this.option({
      dropInsideItem: false,
      toIndex: null,
      fromIndex: null,
      itemPoints: null,
      fromIndexOffset: 0,
      draggableElementSize: 0
    });

    if (this._$placeholderElement) {
      this._$placeholderElement.remove();
    }

    this._$placeholderElement = null;

    if (!this._isIndicateMode() && this._$modifiedItem) {
      this._$modifiedItem.css('marginBottom', this._modifiedItemMargin);

      this._$modifiedItem = null;
    }
  },
  _getPrevVisibleItem: function _getPrevVisibleItem(items, index) {
    return items.slice(0, index).reverse().filter(isElementVisible)[0];
  },
  _dragStartHandler: function _dragStartHandler(e) {
    this.callBase.apply(this, arguments);

    if (e.cancel === true) {
      return;
    }

    var $sourceElement = this._getSourceElement();

    this._updateItemPoints();

    this._subscribeToSourceScroll(e);

    this.option('fromIndex', this._getElementIndex($sourceElement));
    this.option('fromIndexOffset', this.option('offset'));
  },
  _dragEndHandler: function _dragEndHandler() {
    this.callBase.apply(this, arguments);

    this._unsubscribeFromSourceScroll();
  },
  _subscribeToSourceScroll: function _subscribeToSourceScroll(e) {
    var $scrollable = this._getScrollable((0, _renderer.default)(e.target));

    if ($scrollable) {
      this._sourceScrollableInfo = {
        element: $scrollable,
        scrollLeft: $scrollable.scrollLeft(),
        scrollTop: $scrollable.scrollTop()
      };

      _events_engine.default.on($scrollable, 'scroll', this._sourceScrollHandler);
    }
  },
  _unsubscribeFromSourceScroll: function _unsubscribeFromSourceScroll() {
    if (this._sourceScrollableInfo) {
      _events_engine.default.off(this._sourceScrollableInfo.element, 'scroll', this._sourceScrollHandler);

      this._sourceScrollableInfo = null;
    }
  },
  _handleSourceScroll: function _handleSourceScroll(e) {
    var _this = this;

    var sourceScrollableInfo = this._sourceScrollableInfo;

    if (sourceScrollableInfo) {
      ['scrollLeft', 'scrollTop'].forEach(function (scrollProp) {
        if (e.target[scrollProp] !== sourceScrollableInfo[scrollProp]) {
          var scrollBy = e.target[scrollProp] - sourceScrollableInfo[scrollProp];

          _this._correctItemPoints(scrollBy);

          sourceScrollableInfo[scrollProp] = e.target[scrollProp];
        }
      });
    }
  },
  _dragEnterHandler: function _dragEnterHandler() {
    this.callBase.apply(this, arguments);

    if (this === this._getSourceDraggable()) {
      return;
    }

    this._updateItemPoints();

    this.option('fromIndex', -1);

    if (!this._isIndicateMode()) {
      var itemPoints = this.option('itemPoints');
      var lastItemPoint = itemPoints[itemPoints.length - 1];

      if (lastItemPoint) {
        var $element = this.$element();

        var $sourceElement = this._getSourceElement();

        var isVertical = this._isVerticalOrientation();

        var sourceElementSize = isVertical ? $sourceElement.outerHeight(true) : $sourceElement.outerWidth(true);
        var scrollSize = $element.get(0)[isVertical ? 'scrollHeight' : 'scrollWidth'];
        var scrollPosition = $element.get(0)[isVertical ? 'scrollTop' : 'scrollLeft'];
        var positionProp = isVertical ? 'top' : 'left';
        var lastPointPosition = lastItemPoint[positionProp];
        var elementPosition = $element.offset()[positionProp];
        var freeSize = elementPosition + scrollSize - scrollPosition - lastPointPosition;

        if (freeSize < sourceElementSize) {
          if (isVertical) {
            var items = this._getItems();

            var $lastItem = (0, _renderer.default)(this._getPrevVisibleItem(items));
            this._$modifiedItem = $lastItem;
            this._modifiedItemMargin = $lastItem.get(0).style.marginBottom;
            $lastItem.css('marginBottom', sourceElementSize - freeSize);
            var $sortable = $lastItem.closest('.dx-sortable');
            var sortable = $sortable.data('dxScrollable') || $sortable.data('dxScrollView');
            sortable && sortable.update();
          }
        }
      }
    }
  },
  dragEnter: function dragEnter() {
    if (this !== this._getTargetDraggable()) {
      this.option('toIndex', -1);
    }
  },
  dragLeave: function dragLeave() {
    if (this !== this._getTargetDraggable()) {
      this.option('toIndex', this.option('fromIndex'));
    }
  },
  _isInsideTargetDraggable: function _isInsideTargetDraggable(event) {
    var $targetDraggable = this._getTargetDraggable().$element();

    var $scrollable = this._getScrollable($targetDraggable);

    if ($scrollable) {
      var _getScrollableBoundar = getScrollableBoundary($scrollable),
          left = _getScrollableBoundar.left,
          right = _getScrollableBoundar.right,
          top = _getScrollableBoundar.top,
          bottom = _getScrollableBoundar.bottom;

      var validX = left <= event.pageX && event.pageX <= right;
      var validY = top <= event.pageY && event.pageY <= bottom;
      return validY && validX;
    }

    return true;
  },
  dragEnd: function dragEnd(sourceEvent) {
    var $sourceElement = this._getSourceElement();

    var sourceDraggable = this._getSourceDraggable();

    var isSourceDraggable = sourceDraggable.NAME !== this.NAME;
    var toIndex = this.option('toIndex');

    var isInsideTargetDraggable = this._isInsideTargetDraggable(sourceEvent.event);

    if (toIndex !== null && toIndex >= 0 && isInsideTargetDraggable) {
      var cancelAdd;
      var cancelRemove;

      if (sourceDraggable !== this) {
        cancelAdd = this._fireAddEvent(sourceEvent);

        if (!cancelAdd) {
          cancelRemove = this._fireRemoveEvent(sourceEvent);
        }
      }

      if (isSourceDraggable) {
        (0, _translator.resetPosition)($sourceElement);
      }

      if (this.option('moveItemOnDrop')) {
        !cancelAdd && this._moveItem($sourceElement, toIndex, cancelRemove);
      }

      if (sourceDraggable === this) {
        return this._fireReorderEvent(sourceEvent);
      }
    }

    return new _deferred.Deferred().resolve();
  },
  dragMove: function dragMove(e) {
    var itemPoints = this.option('itemPoints');

    if (!itemPoints) {
      return;
    }

    var isVertical = this._isVerticalOrientation();

    var axisName = isVertical ? 'top' : 'left';
    var cursorPosition = isVertical ? e.pageY : e.pageX;
    var rtlEnabled = this.option('rtlEnabled');
    var itemPoint;

    for (var i = itemPoints.length - 1; i >= 0; i--) {
      var centerPosition = itemPoints[i + 1] && (itemPoints[i][axisName] + itemPoints[i + 1][axisName]) / 2;

      if ((!isVertical && rtlEnabled ? cursorPosition > centerPosition : centerPosition > cursorPosition) || centerPosition === undefined) {
        itemPoint = itemPoints[i];
      } else {
        break;
      }
    }

    if (itemPoint) {
      this._updatePlaceholderPosition(e, itemPoint);

      if (this._verticalScrollHelper.isScrolling() && this._isIndicateMode()) {
        this._movePlaceholder();
      }
    }
  },
  _isIndicateMode: function _isIndicateMode() {
    return this.option('dropFeedbackMode') === 'indicate' || this.option('allowDropInsideItem');
  },
  _createPlaceholder: function _createPlaceholder() {
    var $placeholderContainer;

    if (this._isIndicateMode()) {
      $placeholderContainer = (0, _renderer.default)('<div>').addClass(this._addWidgetPrefix(PLACEHOLDER_CLASS)).insertBefore(this._getSourceDraggable()._$dragElement);
    }

    this._$placeholderElement = $placeholderContainer;
    return $placeholderContainer;
  },
  _getItems: function _getItems() {
    var itemsSelector = this._getItemsSelector();

    return this._$content().find(itemsSelector).not('.' + this._addWidgetPrefix(PLACEHOLDER_CLASS)).not('.' + this._addWidgetPrefix(CLONE_CLASS)).toArray();
  },
  _allowReordering: function _allowReordering() {
    var sourceDraggable = this._getSourceDraggable();

    var targetDraggable = this._getTargetDraggable();

    return sourceDraggable !== targetDraggable || this.option('allowReordering');
  },
  _isValidPoint: function _isValidPoint(visibleIndex, draggableVisibleIndex, dropInsideItem) {
    var allowDropInsideItem = this.option('allowDropInsideItem');

    var allowReordering = dropInsideItem || this._allowReordering();

    if (!allowReordering && (visibleIndex !== 0 || !allowDropInsideItem)) {
      return false;
    }

    if (!this._isIndicateMode()) {
      return true;
    }

    return draggableVisibleIndex === -1 || visibleIndex !== draggableVisibleIndex && (dropInsideItem || visibleIndex !== draggableVisibleIndex + 1);
  },
  _getItemPoints: function _getItemPoints() {
    var that = this;
    var result = [];
    var $item;
    var offset;
    var itemWidth;
    var rtlEnabled = that.option('rtlEnabled');

    var isVertical = that._isVerticalOrientation();

    var itemElements = that._getItems();

    var visibleItemElements = itemElements.filter(isElementVisible);
    var visibleItemCount = visibleItemElements.length;

    var $draggableItem = this._getDraggableElement();

    var draggableVisibleIndex = visibleItemElements.indexOf($draggableItem.get(0));

    if (visibleItemCount) {
      for (var i = 0; i <= visibleItemCount; i++) {
        var needCorrectLeftPosition = !isVertical && rtlEnabled ^ i === visibleItemCount;
        var needCorrectTopPosition = isVertical && i === visibleItemCount;

        if (i < visibleItemCount) {
          $item = (0, _renderer.default)(visibleItemElements[i]);
          offset = $item.offset();
          itemWidth = $item.outerWidth();
        }

        result.push({
          dropInsideItem: false,
          left: offset.left + (needCorrectLeftPosition ? itemWidth : 0),
          top: offset.top + (needCorrectTopPosition ? result[i - 1].height : 0),
          index: i === visibleItemCount ? itemElements.length : itemElements.indexOf($item.get(0)),
          $item: $item,
          width: $item.outerWidth(),
          height: $item.outerHeight(),
          isValid: that._isValidPoint(i, draggableVisibleIndex)
        });
      }

      if (this.option('allowDropInsideItem')) {
        var points = result;
        result = [];

        for (var _i = 0; _i < points.length; _i++) {
          result.push(points[_i]);

          if (points[_i + 1]) {
            result.push((0, _extend.extend)({}, points[_i], {
              dropInsideItem: true,
              top: Math.floor((points[_i].top + points[_i + 1].top) / 2),
              left: Math.floor((points[_i].left + points[_i + 1].left) / 2),
              isValid: this._isValidPoint(_i, draggableVisibleIndex, true)
            }));
          }
        }
      }
    } else {
      result.push({
        dropInsideItem: false,
        index: 0,
        isValid: true
      });
    }

    return result;
  },
  _updateItemPoints: function _updateItemPoints(forceUpdate) {
    if (forceUpdate || this.option('autoUpdate') || !this.option('itemPoints')) {
      this.option('itemPoints', this._getItemPoints());
    }
  },
  _correctItemPoints: function _correctItemPoints(scrollBy) {
    var itemPoints = this.option('itemPoints');

    if (scrollBy && itemPoints && !this.option('autoUpdate')) {
      var isVertical = this._isVerticalOrientation();

      var positionPropName = isVertical ? 'top' : 'left';
      itemPoints.forEach(function (itemPoint) {
        itemPoint[positionPropName] -= scrollBy;
      });
    }
  },
  _getElementIndex: function _getElementIndex($itemElement) {
    return this._getItems().indexOf($itemElement.get(0));
  },
  _getDragTemplateArgs: function _getDragTemplateArgs($element) {
    var args = this.callBase.apply(this, arguments);
    args.model.fromIndex = this._getElementIndex($element);
    return args;
  },
  _togglePlaceholder: function _togglePlaceholder(value) {
    this._$placeholderElement && this._$placeholderElement.toggle(value);
  },
  _isVerticalOrientation: function _isVerticalOrientation() {
    return this.option('itemOrientation') === 'vertical';
  },
  _normalizeToIndex: function _normalizeToIndex(toIndex, dropInsideItem) {
    var isAnotherDraggable = this._getSourceDraggable() !== this._getTargetDraggable();

    var fromIndex = this.option('fromIndex');

    if (toIndex === null) {
      return fromIndex;
    }

    return Math.max(isAnotherDraggable || fromIndex >= toIndex || dropInsideItem ? toIndex : toIndex - 1, 0);
  },
  _updatePlaceholderPosition: function _updatePlaceholderPosition(e, itemPoint) {
    var sourceDraggable = this._getSourceDraggable();

    var toIndex = this._normalizeToIndex(itemPoint.index, itemPoint.dropInsideItem);

    var eventArgs = (0, _extend.extend)(this._getEventArgs(e), {
      toIndex: toIndex,
      dropInsideItem: itemPoint.dropInsideItem
    });
    itemPoint.isValid && this._getAction('onDragChange')(eventArgs);

    if (eventArgs.cancel || !itemPoint.isValid) {
      if (!itemPoint.isValid) {
        this.option({
          dropInsideItem: false,
          toIndex: null
        });
      }

      return;
    }

    this.option({
      dropInsideItem: itemPoint.dropInsideItem,
      toIndex: itemPoint.index
    });

    this._getAction('onPlaceholderPrepared')((0, _extend.extend)(this._getEventArgs(e), {
      placeholderElement: (0, _element.getPublicElement)(this._$placeholderElement),
      dragElement: (0, _element.getPublicElement)(sourceDraggable._$dragElement)
    }));

    this._updateItemPoints();
  },
  _makeWidthCorrection: function _makeWidthCorrection($item, width) {
    this._$scrollable = this._getScrollable($item);

    if (this._$scrollable && this._$scrollable.width() < width) {
      var scrollableWidth = this._$scrollable.width();

      var offsetLeft = $item.offset().left - this._$scrollable.offset().left;

      var offsetRight = scrollableWidth - $item.outerWidth() - offsetLeft;

      if (offsetLeft > 0) {
        width = scrollableWidth - offsetLeft;
      } else if (offsetRight > 0) {
        width = scrollableWidth - offsetRight;
      } else {
        width = scrollableWidth;
      }
    }

    return width;
  },
  _updatePlaceholderSizes: function _updatePlaceholderSizes($placeholderElement, itemElement) {
    var that = this;
    var dropInsideItem = that.option('dropInsideItem');
    var $item = (0, _renderer.default)(itemElement);

    var isVertical = that._isVerticalOrientation();

    var width = '';
    var height = '';
    $placeholderElement.toggleClass(that._addWidgetPrefix('placeholder-inside'), dropInsideItem);

    if (isVertical || dropInsideItem) {
      width = $item.outerWidth();
    }

    if (!isVertical || dropInsideItem) {
      height = $item.outerHeight();
    }

    width = that._makeWidthCorrection($item, width);
    $placeholderElement.css({
      width: width,
      height: height
    });
  },
  _moveItem: function _moveItem($itemElement, index, cancelRemove) {
    var $prevTargetItemElement;

    var $itemElements = this._getItems();

    var $targetItemElement = $itemElements[index];

    var sourceDraggable = this._getSourceDraggable();

    if (cancelRemove) {
      $itemElement = $itemElement.clone();

      sourceDraggable._toggleDragSourceClass(false, $itemElement);
    }

    if (!$targetItemElement) {
      $prevTargetItemElement = $itemElements[index - 1];
    }

    this._moveItemCore($itemElement, $targetItemElement, $prevTargetItemElement);
  },
  _moveItemCore: function _moveItemCore($targetItem, item, prevItem) {
    if (!item && !prevItem) {
      $targetItem.appendTo(this.$element());
    } else if (prevItem) {
      $targetItem.insertAfter((0, _renderer.default)(prevItem));
    } else {
      $targetItem.insertBefore((0, _renderer.default)(item));
    }
  },
  _getDragStartArgs: function _getDragStartArgs(e, $itemElement) {
    return (0, _extend.extend)(this.callBase.apply(this, arguments), {
      fromIndex: this._getElementIndex($itemElement)
    });
  },
  _getEventArgs: function _getEventArgs(e) {
    var sourceDraggable = this._getSourceDraggable();

    var targetDraggable = this._getTargetDraggable();

    var dropInsideItem = targetDraggable.option('dropInsideItem');
    return (0, _extend.extend)(this.callBase.apply(this, arguments), {
      fromIndex: sourceDraggable.option('fromIndex'),
      toIndex: this._normalizeToIndex(targetDraggable.option('toIndex'), dropInsideItem),
      dropInsideItem: dropInsideItem
    });
  },
  _optionChanged: function _optionChanged(args) {
    var _this2 = this;

    var name = args.name;

    switch (name) {
      case 'onDragChange':
      case 'onPlaceholderPrepared':
      case 'onAdd':
      case 'onRemove':
      case 'onReorder':
        this['_' + name + 'Action'] = this._createActionByOption(name);
        break;

      case 'itemOrientation':
      case 'allowDropInsideItem':
      case 'moveItemOnDrop':
      case 'dropFeedbackMode':
      case 'itemPoints':
      case 'animation':
      case 'allowReordering':
      case 'fromIndexOffset':
      case 'offset':
      case 'draggableElementSize':
      case 'autoUpdate':
        break;

      case 'fromIndex':
        [false, true].forEach(function (isDragSource) {
          var fromIndex = isDragSource ? args.value : args.previousValue;

          if (fromIndex !== null) {
            var $fromElement = (0, _renderer.default)(_this2._getItems()[fromIndex]);

            _this2._toggleDragSourceClass(isDragSource, $fromElement);
          }
        });
        break;

      case 'dropInsideItem':
        this._optionChangedDropInsideItem(args);

        break;

      case 'toIndex':
        this._optionChangedToIndex(args);

        break;

      default:
        this.callBase(args);
    }
  },
  _optionChangedDropInsideItem: function _optionChangedDropInsideItem() {
    if (this._isIndicateMode() && this._$placeholderElement) {
      this._movePlaceholder();
    }
  },
  _isPositionVisible: function _isPositionVisible(position) {
    var $element = this.$element();
    var scrollContainer;

    if ($element.css('overflow') !== 'hidden') {
      scrollContainer = $element.get(0);
    } else {
      $element.parents().each(function () {
        if ((0, _renderer.default)(this).css('overflow') !== 'visible') {
          scrollContainer = this;
          return false;
        }
      });
    }

    if (scrollContainer) {
      var clientRect = (0, _position.getBoundingRect)(scrollContainer);

      var isVerticalOrientation = this._isVerticalOrientation();

      var start = isVerticalOrientation ? 'top' : 'left';
      var end = isVerticalOrientation ? 'bottom' : 'right';
      var pageOffset = isVerticalOrientation ? window.pageYOffset : window.pageXOffset;

      if (position[start] < clientRect[start] + pageOffset || position[start] > clientRect[end] + pageOffset) {
        return false;
      }
    }

    return true;
  },
  _optionChangedToIndex: function _optionChangedToIndex(args) {
    var toIndex = args.value;

    if (this._isIndicateMode()) {
      var showPlaceholder = toIndex !== null && toIndex >= 0;

      this._togglePlaceholder(showPlaceholder);

      if (showPlaceholder) {
        this._movePlaceholder();
      }
    } else {
      this._moveItems(args.previousValue, args.value, args.fullUpdate);
    }
  },
  update: function update() {
    if (this.option('fromIndex') === null && this.option('toIndex') === null) {
      return;
    }

    this._updateItemPoints(true);

    this._updateDragSourceClass();

    var toIndex = this.option('toIndex');

    this._optionChangedToIndex({
      value: toIndex,
      fullUpdate: true
    });
  },
  _updateDragSourceClass: function _updateDragSourceClass() {
    var fromIndex = this._getActualFromIndex();

    var $fromElement = (0, _renderer.default)(this._getItems()[fromIndex]);

    if ($fromElement.length) {
      this._$sourceElement = $fromElement;

      this._toggleDragSourceClass(true, $fromElement);
    }
  },
  _makeLeftCorrection: function _makeLeftCorrection(left, leftMargin) {
    var that = this;
    var $scrollable = that._$scrollable;

    if ($scrollable && that._isVerticalOrientation() && $scrollable.scrollLeft() > leftMargin) {
      left += $scrollable.scrollLeft() - leftMargin;
    }

    return left;
  },
  _movePlaceholder: function _movePlaceholder() {
    var that = this;

    var $placeholderElement = that._$placeholderElement || that._createPlaceholder();

    var items = that._getItems();

    var toIndex = that.option('toIndex');

    var isVerticalOrientation = that._isVerticalOrientation();

    var rtlEnabled = this.option('rtlEnabled');
    var dropInsideItem = that.option('dropInsideItem');
    var position = null;
    var leftMargin = 0;
    var itemElement = items[toIndex];

    if (itemElement) {
      var $itemElement = (0, _renderer.default)(itemElement);
      position = $itemElement.offset();
      leftMargin = parseFloat($itemElement.css('marginLeft'));

      if (!isVerticalOrientation && rtlEnabled && !dropInsideItem) {
        position.left += $itemElement.outerWidth(true);
      }
    } else {
      var prevVisibleItemElement = itemElement = this._getPrevVisibleItem(items, toIndex);

      if (prevVisibleItemElement) {
        position = (0, _renderer.default)(prevVisibleItemElement).offset();

        if (isVerticalOrientation) {
          position.top += (0, _renderer.default)(prevVisibleItemElement).outerHeight(true);
        } else if (!rtlEnabled) {
          position.left += (0, _renderer.default)(prevVisibleItemElement).outerWidth(true);
        }
      }
    }

    that._updatePlaceholderSizes($placeholderElement, itemElement);

    if (position && !that._isPositionVisible(position)) {
      position = null;
    }

    if (position) {
      position.left = that._makeLeftCorrection(position.left, leftMargin);

      that._move(position, $placeholderElement);
    }

    $placeholderElement.toggle(!!position);
  },
  _getPositions: function _getPositions(items, elementSize, fromIndex, toIndex) {
    var positions = [];

    for (var i = 0; i < items.length; i++) {
      var position = 0;

      if (toIndex === null || fromIndex === null) {
        positions.push(position);
        continue;
      }

      if (fromIndex === -1) {
        if (i >= toIndex) {
          position = elementSize;
        }
      } else if (toIndex === -1) {
        if (i > fromIndex) {
          position = -elementSize;
        }
      } else if (fromIndex < toIndex) {
        if (i > fromIndex && i < toIndex) {
          position = -elementSize;
        }
      } else if (fromIndex > toIndex) {
        if (i >= toIndex && i < fromIndex) {
          position = elementSize;
        }
      }

      positions.push(position);
    }

    return positions;
  },
  _getDraggableElementSize: function _getDraggableElementSize(isVerticalOrientation) {
    var $draggableItem = this._getDraggableElement();

    var size = this.option('draggableElementSize');

    if (!size) {
      size = isVerticalOrientation ? ($draggableItem.outerHeight() + $draggableItem.outerHeight(true)) / 2 : ($draggableItem.outerWidth() + $draggableItem.outerWidth(true)) / 2;

      if (!this.option('autoUpdate')) {
        this.option('draggableElementSize', size);
      }
    }

    return size;
  },
  _getActualFromIndex: function _getActualFromIndex() {
    var _this$option = this.option(),
        fromIndex = _this$option.fromIndex,
        fromIndexOffset = _this$option.fromIndexOffset,
        offset = _this$option.offset;

    return fromIndex == null ? null : fromIndex + fromIndexOffset - offset;
  },
  _moveItems: function _moveItems(prevToIndex, toIndex, fullUpdate) {
    var fromIndex = this._getActualFromIndex();

    var isVerticalOrientation = this._isVerticalOrientation();

    var positionPropName = isVerticalOrientation ? 'top' : 'left';

    var elementSize = this._getDraggableElementSize(isVerticalOrientation);

    var items = this._getItems();

    var prevPositions = this._getPositions(items, elementSize, fromIndex, prevToIndex);

    var positions = this._getPositions(items, elementSize, fromIndex, toIndex);

    var animationConfig = this.option('animation');
    var rtlEnabled = this.option('rtlEnabled');

    for (var i = 0; i < items.length; i++) {
      var itemElement = items[i];
      var prevPosition = prevPositions[i];
      var position = positions[i];

      if (toIndex === null || fromIndex === null) {
        stopAnimation(itemElement);
      } else if (prevPosition !== position || fullUpdate && position) {
        animate(itemElement, (0, _extend.extend)({}, animationConfig, {
          to: _defineProperty({}, positionPropName, !isVerticalOrientation && rtlEnabled ? -position : position)
        }));
      }
    }
  },
  _toggleDragSourceClass: function _toggleDragSourceClass(value, $element) {
    var $sourceElement = $element || this._$sourceElement;
    this.callBase.apply(this, arguments);

    if (!this._isIndicateMode()) {
      $sourceElement && $sourceElement.toggleClass(this._addWidgetPrefix('source-hidden'), value);
    }
  },
  _dispose: function _dispose() {
    this.reset();
    this.callBase();
  },
  _fireAddEvent: function _fireAddEvent(sourceEvent) {
    var args = this._getEventArgs(sourceEvent);

    this._getAction('onAdd')(args);

    return args.cancel;
  },
  _fireRemoveEvent: function _fireRemoveEvent(sourceEvent) {
    var sourceDraggable = this._getSourceDraggable();

    var args = this._getEventArgs(sourceEvent);

    sourceDraggable._getAction('onRemove')(args);

    return args.cancel;
  },
  _fireReorderEvent: function _fireReorderEvent(sourceEvent) {
    var args = this._getEventArgs(sourceEvent);

    this._getAction('onReorder')(args);

    return args.promise || new _deferred.Deferred().resolve();
  }
});

(0, _component_registrator.default)(SORTABLE, Sortable);
var _default = Sortable;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.default = void 0;

var _renderer = _interopRequireDefault(__webpack_require__(0));

var _window = __webpack_require__(7);

var _position = __webpack_require__(29);

var _events_engine = _interopRequireDefault(__webpack_require__(5));

var _string = __webpack_require__(46);

var _component_registrator = _interopRequireDefault(__webpack_require__(14));

var _translator = __webpack_require__(16);

var _animator = _interopRequireDefault(__webpack_require__(110));

var _inflector = __webpack_require__(47);

var _extend = __webpack_require__(2);

var _dom_component = _interopRequireDefault(__webpack_require__(62));

var _element = __webpack_require__(20);

var _index = __webpack_require__(6);

var _pointer = _interopRequireDefault(__webpack_require__(22));

var _drag = __webpack_require__(81);

var _position2 = _interopRequireDefault(__webpack_require__(56));

var _type = __webpack_require__(1);

var _common = __webpack_require__(3);

var _view_port = __webpack_require__(50);

var _empty_template = __webpack_require__(52);

var _deferred = __webpack_require__(9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var window = (0, _window.getWindow)();
var DRAGGABLE = 'dxDraggable';
var DRAGSTART_EVENT_NAME = (0, _index.addNamespace)(_drag.start, DRAGGABLE);
var DRAG_EVENT_NAME = (0, _index.addNamespace)(_drag.move, DRAGGABLE);
var DRAGEND_EVENT_NAME = (0, _index.addNamespace)(_drag.end, DRAGGABLE);
var DRAG_ENTER_EVENT_NAME = (0, _index.addNamespace)(_drag.enter, DRAGGABLE);
var DRAGEND_LEAVE_EVENT_NAME = (0, _index.addNamespace)(_drag.leave, DRAGGABLE);
var POINTERDOWN_EVENT_NAME = (0, _index.addNamespace)(_pointer.default.down, DRAGGABLE);
var CLONE_CLASS = 'clone';
var targetDraggable;
var sourceDraggable;
var ANONYMOUS_TEMPLATE_NAME = 'content';

var getMousePosition = function getMousePosition(event) {
  return {
    x: event.pageX - (0, _renderer.default)(window).scrollLeft(),
    y: event.pageY - (0, _renderer.default)(window).scrollTop()
  };
};

var GESTURE_COVER_CLASS = 'dx-gesture-cover';
var OVERLAY_WRAPPER_CLASS = 'dx-overlay-wrapper';
var OVERLAY_CONTENT_CLASS = 'dx-overlay-content';

var ScrollHelper = /*#__PURE__*/function () {
  function ScrollHelper(orientation, component) {
    this._preventScroll = true;
    this._component = component;

    if (orientation === 'vertical') {
      this._scrollValue = 'scrollTop';
      this._overFlowAttr = 'overflowY';
      this._sizeAttr = 'height';
      this._scrollSizeProp = 'scrollHeight';
      this._clientSizeProp = 'clientHeight';
      this._limitProps = {
        start: 'top',
        end: 'bottom'
      };
    } else {
      this._scrollValue = 'scrollLeft';
      this._overFlowAttr = 'overflowX';
      this._sizeAttr = 'width';
      this._scrollSizeProp = 'scrollWidth';
      this._clientSizeProp = 'clientWidth';
      this._limitProps = {
        start: 'left',
        end: 'right'
      };
    }
  }

  var _proto = ScrollHelper.prototype;

  _proto.updateScrollable = function updateScrollable(elements, mousePosition) {
    var _this = this;

    var isScrollableFound = false;
    elements.some(function (element) {
      var $element = (0, _renderer.default)(element);
      var isTargetOverOverlayWrapper = $element.hasClass(OVERLAY_WRAPPER_CLASS) && $element.css('pointerEvents') !== 'none';
      var isTargetOverOverlayContent = $element.hasClass(OVERLAY_CONTENT_CLASS);

      if (isTargetOverOverlayWrapper || isTargetOverOverlayContent) {
        return true;
      }

      isScrollableFound = _this._trySetScrollable(element, mousePosition);
      return isScrollableFound;
    });

    if (!isScrollableFound) {
      this._$scrollableAtPointer = null;
      this._scrollSpeed = 0;
    }
  };

  _proto.isScrolling = function isScrolling() {
    return !!this._scrollSpeed;
  };

  _proto.isScrollable = function isScrollable($element) {
    var that = this;
    return ($element.css(that._overFlowAttr) === 'auto' || $element.hasClass('dx-scrollable-container')) && $element.prop(that._scrollSizeProp) > $element[that._sizeAttr]();
  };

  _proto._trySetScrollable = function _trySetScrollable(element, mousePosition) {
    var that = this;
    var $element = (0, _renderer.default)(element);
    var distanceToBorders;

    var sensitivity = that._component.option('scrollSensitivity');

    var isScrollable = that.isScrollable($element);

    if (isScrollable) {
      distanceToBorders = that._calculateDistanceToBorders($element, mousePosition);

      if (sensitivity > distanceToBorders[that._limitProps.start]) {
        if (!that._preventScroll) {
          that._scrollSpeed = -that._calculateScrollSpeed(distanceToBorders[that._limitProps.start]);
          that._$scrollableAtPointer = $element;
        }
      } else if (sensitivity > distanceToBorders[that._limitProps.end]) {
        if (!that._preventScroll) {
          that._scrollSpeed = that._calculateScrollSpeed(distanceToBorders[that._limitProps.end]);
          that._$scrollableAtPointer = $element;
        }
      } else {
        isScrollable = false;
        that._preventScroll = false;
      }
    }

    return isScrollable;
  };

  _proto._calculateDistanceToBorders = function _calculateDistanceToBorders($area, mousePosition) {
    var area = $area.get(0);
    var areaBoundingRect;

    if (area) {
      areaBoundingRect = (0, _position.getBoundingRect)(area);
      return {
        left: mousePosition.x - areaBoundingRect.left,
        top: mousePosition.y - areaBoundingRect.top,
        right: areaBoundingRect.right - mousePosition.x,
        bottom: areaBoundingRect.bottom - mousePosition.y
      };
    } else {
      return {};
    }
  };

  _proto._calculateScrollSpeed = function _calculateScrollSpeed(distance) {
    var component = this._component;
    var sensitivity = component.option('scrollSensitivity');
    var maxSpeed = component.option('scrollSpeed');
    return Math.ceil(Math.pow((sensitivity - distance) / sensitivity, 2) * maxSpeed);
  };

  _proto.scrollByStep = function scrollByStep() {
    var that = this;

    if (that._$scrollableAtPointer && that._scrollSpeed) {
      if (that._$scrollableAtPointer.hasClass('dx-scrollable-container')) {
        var $scrollable = that._$scrollableAtPointer.closest('.dx-scrollable');

        var scrollableInstance = $scrollable.data('dxScrollable') || $scrollable.data('dxScrollView');

        if (scrollableInstance) {
          var nextScrollPosition = scrollableInstance.scrollOffset()[that._limitProps.start] + that._scrollSpeed;

          scrollableInstance.scrollTo(_defineProperty({}, that._limitProps.start, nextScrollPosition));
        }
      } else {
        var _nextScrollPosition = that._$scrollableAtPointer[that._scrollValue]() + that._scrollSpeed;

        that._$scrollableAtPointer[that._scrollValue](_nextScrollPosition);
      }

      var dragMoveArgs = that._component._dragMoveArgs;

      if (dragMoveArgs) {
        that._component._dragMoveHandler(dragMoveArgs);
      }
    }
  };

  _proto.reset = function reset() {
    this._$scrollableAtPointer = null;
    this._scrollSpeed = 0;
    this._preventScroll = true;
  };

  _proto.isOutsideScrollable = function isOutsideScrollable($scrollable, event) {
    if (!$scrollable) {
      return false;
    }

    var scrollableSize = (0, _position.getBoundingRect)($scrollable.get(0));
    var start = scrollableSize[this._limitProps.start];
    var size = scrollableSize[this._sizeAttr];
    var mousePosition = getMousePosition(event);
    var location = this._sizeAttr === 'width' ? mousePosition.x : mousePosition.y;
    return location < start || location > start + size;
  };

  return ScrollHelper;
}();

var ScrollAnimator = _animator.default.inherit({
  ctor: function ctor(strategy) {
    this.callBase();
    this._strategy = strategy;
  },
  _step: function _step() {
    var horizontalScrollHelper = this._strategy._horizontalScrollHelper;
    var verticalScrollHelper = this._strategy._verticalScrollHelper;
    horizontalScrollHelper && horizontalScrollHelper.scrollByStep();
    verticalScrollHelper && verticalScrollHelper.scrollByStep();
  }
});

var Draggable = _dom_component.default.inherit({
  reset: _common.noop,
  dragMove: _common.noop,
  dragEnter: _common.noop,
  dragLeave: _common.noop,
  dragEnd: function dragEnd(sourceEvent) {
    var sourceDraggable = this._getSourceDraggable();

    sourceDraggable._fireRemoveEvent(sourceEvent);

    return new _deferred.Deferred().resolve();
  },
  _fireRemoveEvent: _common.noop,
  _getDefaultOptions: function _getDefaultOptions() {
    return (0, _extend.extend)(this.callBase(), {
      onDragStart: null,
      onDragMove: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragLeave: null,

      /**
       * @name dxDraggableOptions.onDrop
       * @type function(e)
       * @extends Action
       * @type_function_param1 e:object
       * @type_function_param1_field4 event:event
       * @type_function_param1_field5 itemData:any
       * @type_function_param1_field6 itemElement:DxElement
       * @type_function_param1_field7 fromComponent:dxSortable|dxDraggable
       * @type_function_param1_field8 toComponent:dxSortable|dxDraggable
       * @type_function_param1_field9 fromData:any
       * @type_function_param1_field10 toData:any
       * @action
       * @hidden
       */
      onDrop: null,
      immediate: true,
      dragDirection: 'both',
      boundary: undefined,
      boundOffset: 0,
      allowMoveByClick: false,
      itemData: null,
      container: undefined,
      dragTemplate: undefined,

      /**
       * @name DraggableBaseOptions.contentTemplate
       * @type template|function
       * @type_function_return string|Element|jQuery
       * @hidden
       * @default "content"
       */
      contentTemplate: 'content',
      handle: '',

      /**
       * @name dxDraggableOptions.filter
       * @type string
       * @default ""
       * @hidden
       */
      filter: '',
      clone: false,
      autoScroll: true,
      scrollSpeed: 30,
      scrollSensitivity: 60,
      group: undefined,
      data: undefined
    });
  },
  _setOptionsByReference: function _setOptionsByReference() {
    this.callBase.apply(this, arguments);
    (0, _extend.extend)(this._optionsByReference, {
      component: true,
      group: true,
      itemData: true,
      data: true
    });
  },
  _init: function _init() {
    this.callBase();

    this._attachEventHandlers();

    this._scrollAnimator = new ScrollAnimator(this);
    this._horizontalScrollHelper = new ScrollHelper('horizontal', this);
    this._verticalScrollHelper = new ScrollHelper('vertical', this);
  },
  _normalizeCursorOffset: function _normalizeCursorOffset(offset) {
    if ((0, _type.isObject)(offset)) {
      offset = {
        h: offset.x,
        v: offset.y
      };
    }

    offset = (0, _common.splitPair)(offset).map(function (value) {
      return parseFloat(value);
    });
    return {
      left: offset[0],
      top: offset.length === 1 ? offset[0] : offset[1]
    };
  },
  _getNormalizedCursorOffset: function _getNormalizedCursorOffset(offset, options) {
    if ((0, _type.isFunction)(offset)) {
      offset = offset.call(this, options);
    }

    return this._normalizeCursorOffset(offset);
  },
  _calculateElementOffset: function _calculateElementOffset(options) {
    var elementOffset;
    var dragElementOffset;
    var event = options.event;
    var $element = (0, _renderer.default)(options.itemElement);
    var $dragElement = (0, _renderer.default)(options.dragElement);

    var isCloned = this._dragElementIsCloned();

    var cursorOffset = this.option('cursorOffset');
    var normalizedCursorOffset = {
      left: 0,
      top: 0
    };
    var currentLocate = this._initialLocate = (0, _translator.locate)($dragElement);

    if (isCloned || options.initialOffset || cursorOffset) {
      elementOffset = options.initialOffset || $element.offset();

      if (cursorOffset) {
        normalizedCursorOffset = this._getNormalizedCursorOffset(cursorOffset, options);

        if (isFinite(normalizedCursorOffset.left)) {
          elementOffset.left = event.pageX;
        }

        if (isFinite(normalizedCursorOffset.top)) {
          elementOffset.top = event.pageY;
        }
      }

      dragElementOffset = $dragElement.offset();
      elementOffset.top -= dragElementOffset.top + (normalizedCursorOffset.top || 0) - currentLocate.top;
      elementOffset.left -= dragElementOffset.left + (normalizedCursorOffset.left || 0) - currentLocate.left;
    }

    return elementOffset;
  },
  _initPosition: function _initPosition(options) {
    var $dragElement = (0, _renderer.default)(options.dragElement);

    var elementOffset = this._calculateElementOffset(options);

    if (elementOffset) {
      this._move(elementOffset, $dragElement);
    }

    this._startPosition = (0, _translator.locate)($dragElement);
  },
  _startAnimator: function _startAnimator() {
    if (!this._scrollAnimator.inProgress()) {
      this._scrollAnimator.start();
    }
  },
  _stopAnimator: function _stopAnimator() {
    this._scrollAnimator.stop();
  },
  _addWidgetPrefix: function _addWidgetPrefix(className) {
    var componentName = this.NAME;
    return (0, _inflector.dasherize)(componentName) + (className ? '-' + className : '');
  },
  _getItemsSelector: function _getItemsSelector() {
    return this.option('filter') || '';
  },
  _$content: function _$content() {
    var $element = this.$element();
    var $wrapper = $element.children('.dx-template-wrapper');
    return $wrapper.length ? $wrapper : $element;
  },
  _attachEventHandlers: function _attachEventHandlers() {
    var _this2 = this;

    if (this.option('disabled')) {
      return;
    }

    var $element = this._$content();

    var itemsSelector = this._getItemsSelector();

    var allowMoveByClick = this.option('allowMoveByClick');
    var data = {
      direction: this.option('dragDirection'),
      immediate: this.option('immediate'),
      checkDropTarget: function checkDropTarget($target, event) {
        var targetGroup = _this2.option('group');

        var sourceGroup = _this2._getSourceDraggable().option('group');

        var $scrollable = _this2._getScrollable($target);

        if (_this2._verticalScrollHelper.isOutsideScrollable($scrollable, event) || _this2._horizontalScrollHelper.isOutsideScrollable($scrollable, event)) {
          return false;
        }

        return sourceGroup && sourceGroup === targetGroup;
      }
    };

    if (allowMoveByClick) {
      $element = this._getArea();

      _events_engine.default.on($element, POINTERDOWN_EVENT_NAME, data, this._pointerDownHandler.bind(this));
    }

    if (itemsSelector[0] === '>') {
      itemsSelector = itemsSelector.slice(1);
    }

    _events_engine.default.on($element, DRAGSTART_EVENT_NAME, itemsSelector, data, this._dragStartHandler.bind(this));

    _events_engine.default.on($element, DRAG_EVENT_NAME, data, this._dragMoveHandler.bind(this));

    _events_engine.default.on($element, DRAGEND_EVENT_NAME, data, this._dragEndHandler.bind(this));

    _events_engine.default.on($element, DRAG_ENTER_EVENT_NAME, data, this._dragEnterHandler.bind(this));

    _events_engine.default.on($element, DRAGEND_LEAVE_EVENT_NAME, data, this._dragLeaveHandler.bind(this));
  },
  _dragElementIsCloned: function _dragElementIsCloned() {
    return this._$dragElement && this._$dragElement.hasClass(this._addWidgetPrefix(CLONE_CLASS));
  },
  _getDragTemplateArgs: function _getDragTemplateArgs($element, $container) {
    return {
      container: (0, _element.getPublicElement)($container),
      model: {
        itemData: this.option('itemData'),
        itemElement: (0, _element.getPublicElement)($element)
      }
    };
  },
  _createDragElement: function _createDragElement($element) {
    var result = $element;
    var clone = this.option('clone');

    var $container = this._getContainer();

    var template = this.option('dragTemplate');

    if (template) {
      template = this._getTemplate(template);
      result = (0, _renderer.default)('<div>').appendTo($container);
      template.render(this._getDragTemplateArgs($element, result));
    } else if (clone) {
      result = (0, _renderer.default)('<div>').appendTo($container);
      $element.clone().css({
        width: $element.css('width'),
        height: $element.css('height')
      }).appendTo(result);
    }

    return result.toggleClass(this._addWidgetPrefix(CLONE_CLASS), result.get(0) !== $element.get(0)).toggleClass('dx-rtl', this.option('rtlEnabled'));
  },
  _resetDragElement: function _resetDragElement() {
    if (this._dragElementIsCloned()) {
      this._$dragElement.remove();
    } else {
      this._toggleDraggingClass(false);
    }

    this._$dragElement = null;
  },
  _resetSourceElement: function _resetSourceElement() {
    this._toggleDragSourceClass(false);

    this._$sourceElement = null;
  },
  _detachEventHandlers: function _detachEventHandlers() {
    _events_engine.default.off(this._$content(), '.' + DRAGGABLE);

    _events_engine.default.off(this._getArea(), '.' + DRAGGABLE);
  },
  _move: function _move(position, $element) {
    (0, _translator.move)($element || this._$dragElement, position);
  },
  _getDraggableElement: function _getDraggableElement(e) {
    var $sourceElement = this._getSourceElement();

    if ($sourceElement) {
      return $sourceElement;
    }

    var allowMoveByClick = this.option('allowMoveByClick');

    if (allowMoveByClick) {
      return this.$element();
    }

    var $target = (0, _renderer.default)(e && e.target);

    var itemsSelector = this._getItemsSelector();

    if (itemsSelector[0] === '>') {
      var $items = this._$content().find(itemsSelector);

      if (!$items.is($target)) {
        $target = $target.closest($items);
      }
    }

    return $target;
  },
  _getSourceElement: function _getSourceElement() {
    var draggable = this._getSourceDraggable();

    return draggable._$sourceElement;
  },
  _pointerDownHandler: function _pointerDownHandler(e) {
    if ((0, _index.needSkipEvent)(e)) {
      return;
    }

    var position = {};
    var $element = this.$element();
    var dragDirection = this.option('dragDirection');

    if (dragDirection === 'horizontal' || dragDirection === 'both') {
      position.left = e.pageX - $element.offset().left + (0, _translator.locate)($element).left - $element.width() / 2;
    }

    if (dragDirection === 'vertical' || dragDirection === 'both') {
      position.top = e.pageY - $element.offset().top + (0, _translator.locate)($element).top - $element.height() / 2;
    }

    this._move(position, $element);

    this._getAction('onDragMove')(this._getEventArgs(e));
  },
  _isValidElement: function _isValidElement(event, $element) {
    var handle = this.option('handle');
    var $target = (0, _renderer.default)(event.originalEvent && event.originalEvent.target);

    if (handle && !$target.closest(handle).length) {
      return false;
    }

    if (!$element.length) {
      return false;
    }

    return !$element.is('.dx-state-disabled, .dx-state-disabled *');
  },
  _dragStartHandler: function _dragStartHandler(e) {
    var $element = this._getDraggableElement(e);

    if (this._$sourceElement) {
      return;
    }

    if (!this._isValidElement(e, $element)) {
      e.cancel = true;
      return;
    }

    var dragStartArgs = this._getDragStartArgs(e, $element);

    this._getAction('onDragStart')(dragStartArgs);

    if (dragStartArgs.cancel) {
      e.cancel = true;
      return;
    }

    this.option('itemData', dragStartArgs.itemData);

    this._setSourceDraggable();

    this._$sourceElement = $element;
    var initialOffset = $element.offset();

    var $dragElement = this._$dragElement = this._createDragElement($element);

    this._toggleDraggingClass(true);

    this._toggleDragSourceClass(true);

    this._setGestureCoverCursor($dragElement.children());

    var isFixedPosition = $dragElement.css('position') === 'fixed';

    this._initPosition((0, _extend.extend)({}, dragStartArgs, {
      dragElement: $dragElement.get(0),
      initialOffset: isFixedPosition && initialOffset
    }));

    var $area = this._getArea();

    var areaOffset = this._getAreaOffset($area);

    var boundOffset = this._getBoundOffset();

    var areaWidth = $area.outerWidth();
    var areaHeight = $area.outerHeight();
    var elementWidth = $dragElement.width();
    var elementHeight = $dragElement.height();
    var startOffset = {
      left: $dragElement.offset().left - areaOffset.left,
      top: $dragElement.offset().top - areaOffset.top
    };

    if ($area.length) {
      e.maxLeftOffset = startOffset.left - boundOffset.left;
      e.maxRightOffset = areaWidth - startOffset.left - elementWidth - boundOffset.right;
      e.maxTopOffset = startOffset.top - boundOffset.top;
      e.maxBottomOffset = areaHeight - startOffset.top - elementHeight - boundOffset.bottom;
    }

    if (this.option('autoScroll')) {
      this._startAnimator();
    }
  },
  _getAreaOffset: function _getAreaOffset($area) {
    var offset = $area && _position2.default.offset($area);

    return offset ? offset : {
      left: 0,
      top: 0
    };
  },
  _toggleDraggingClass: function _toggleDraggingClass(value) {
    this._$dragElement && this._$dragElement.toggleClass(this._addWidgetPrefix('dragging'), value);
  },
  _toggleDragSourceClass: function _toggleDragSourceClass(value, $element) {
    var $sourceElement = $element || this._$sourceElement;
    $sourceElement && $sourceElement.toggleClass(this._addWidgetPrefix('source'), value);
  },
  _setGestureCoverCursor: function _setGestureCoverCursor($element) {
    (0, _renderer.default)(".".concat(GESTURE_COVER_CLASS)).css('cursor', $element.css('cursor'));
  },
  _getBoundOffset: function _getBoundOffset() {
    var boundOffset = this.option('boundOffset');

    if ((0, _type.isFunction)(boundOffset)) {
      boundOffset = boundOffset.call(this);
    }

    return (0, _string.quadToObject)(boundOffset);
  },
  _getArea: function _getArea() {
    var area = this.option('boundary');

    if ((0, _type.isFunction)(area)) {
      area = area.call(this);
    }

    return (0, _renderer.default)(area);
  },
  _getContainer: function _getContainer() {
    var container = this.option('container');

    if (container === undefined) {
      container = (0, _view_port.value)();
    }

    return (0, _renderer.default)(container);
  },
  _dragMoveHandler: function _dragMoveHandler(e, scrollBy) {
    this._dragMoveArgs = e;

    if (!this._$dragElement) {
      e.cancel = true;
      return;
    }

    var offset = e.offset;
    var startPosition = this._startPosition;

    this._move({
      left: startPosition.left + offset.x,
      top: startPosition.top + offset.y
    });

    if (!scrollBy) {
      this._updateScrollable(e);
    }

    var eventArgs = this._getEventArgs(e);

    this._getAction('onDragMove')(eventArgs);

    if (eventArgs.cancel === true) {
      return;
    }

    var targetDraggable = this._getTargetDraggable();

    targetDraggable.dragMove(e, scrollBy);
  },
  _updateScrollable: function _updateScrollable(e) {
    var that = this;

    if (that.option('autoScroll')) {
      var mousePosition = getMousePosition(e);
      var allObjects = (0, _position.getElementsFromPoint)(mousePosition.x, mousePosition.y);

      that._verticalScrollHelper.updateScrollable(allObjects, mousePosition);

      that._horizontalScrollHelper.updateScrollable(allObjects, mousePosition);
    }
  },
  _getScrollable: function _getScrollable($element) {
    var _this3 = this;

    var $scrollable;
    $element.parents().toArray().some(function (parent) {
      var $parent = (0, _renderer.default)(parent);

      if (_this3._horizontalScrollHelper.isScrollable($parent) || _this3._verticalScrollHelper.isScrollable($parent)) {
        $scrollable = $parent;
        return true;
      }
    });
    return $scrollable;
  },
  _defaultActionArgs: function _defaultActionArgs() {
    var args = this.callBase.apply(this, arguments);
    var component = this.option('component');

    if (component) {
      args.component = component;
      args.element = component.element();
    }

    return args;
  },
  _getEventArgs: function _getEventArgs(e) {
    var sourceDraggable = this._getSourceDraggable();

    var targetDraggable = this._getTargetDraggable();

    return {
      event: e,
      itemData: sourceDraggable.option('itemData'),
      itemElement: (0, _element.getPublicElement)(sourceDraggable._$sourceElement),
      fromComponent: sourceDraggable.option('component') || sourceDraggable,
      toComponent: targetDraggable.option('component') || targetDraggable,
      fromData: sourceDraggable.option('data'),
      toData: targetDraggable.option('data')
    };
  },
  _getDragStartArgs: function _getDragStartArgs(e, $itemElement) {
    var args = this._getEventArgs(e);

    return {
      event: args.event,
      itemData: args.itemData,
      itemElement: $itemElement,
      fromData: args.fromData
    };
  },
  _revertItemToInitialPosition: function _revertItemToInitialPosition() {
    !this._dragElementIsCloned() && this._move(this._initialLocate, this._$sourceElement);
  },
  _dragEndHandler: function _dragEndHandler(e) {
    var _this4 = this;

    var d = new _deferred.Deferred();

    var dragEndEventArgs = this._getEventArgs(e);

    var dropEventArgs = this._getEventArgs(e);

    var targetDraggable = this._getTargetDraggable();

    var needRevertPosition = true;

    try {
      this._getAction('onDragEnd')(dragEndEventArgs);
    } finally {
      (0, _deferred.when)((0, _deferred.fromPromise)(dragEndEventArgs.cancel)).done(function (cancel) {
        if (!cancel) {
          if (targetDraggable !== _this4) {
            targetDraggable._getAction('onDrop')(dropEventArgs);
          }

          if (!dropEventArgs.cancel) {
            needRevertPosition = false;
            (0, _deferred.when)((0, _deferred.fromPromise)(targetDraggable.dragEnd(dragEndEventArgs))).always(d.resolve);
            return;
          }
        }

        d.resolve();
      }).fail(d.resolve);
      d.done(function () {
        if (needRevertPosition) {
          _this4._revertItemToInitialPosition();
        }

        _this4.reset();

        targetDraggable.reset();

        _this4._stopAnimator();

        _this4._horizontalScrollHelper.reset();

        _this4._verticalScrollHelper.reset();

        _this4._resetDragElement();

        _this4._resetSourceElement();

        _this4._resetTargetDraggable();

        _this4._resetSourceDraggable();
      });
    }
  },
  _isTargetOverAnotherDraggable: function _isTargetOverAnotherDraggable(e) {
    var _this5 = this;

    var sourceDraggable = this._getSourceDraggable();

    if (this === sourceDraggable) {
      return false;
    }

    var $dragElement = sourceDraggable._$dragElement;
    var $sourceDraggableElement = sourceDraggable.$element();
    var $targetDraggableElement = this.$element();
    var mousePosition = getMousePosition(e);
    var elements = (0, _position.getElementsFromPoint)(mousePosition.x, mousePosition.y);
    var firstWidgetElement = elements.filter(function (element) {
      var $element = (0, _renderer.default)(element);

      if ($element.hasClass(_this5._addWidgetPrefix())) {
        return !$element.closest($dragElement).length;
      }
    })[0];

    var $sourceElement = this._getSourceElement();

    var isTargetOverItself = firstWidgetElement === $sourceDraggableElement.get(0);
    var isTargetOverNestedDraggable = (0, _renderer.default)(firstWidgetElement).closest($sourceElement).length;
    return !firstWidgetElement || firstWidgetElement === $targetDraggableElement.get(0) && !isTargetOverItself && !isTargetOverNestedDraggable;
  },
  _dragEnterHandler: function _dragEnterHandler(e) {
    this._fireDragEnterEvent(e);

    if (this._isTargetOverAnotherDraggable(e)) {
      this._setTargetDraggable();
    }

    var sourceDraggable = this._getSourceDraggable();

    sourceDraggable.dragEnter(e);
  },
  _dragLeaveHandler: function _dragLeaveHandler(e) {
    this._fireDragLeaveEvent(e);

    this._resetTargetDraggable();

    if (this !== this._getSourceDraggable()) {
      this.reset();
    }

    var sourceDraggable = this._getSourceDraggable();

    sourceDraggable.dragLeave(e);
  },
  _getAction: function _getAction(name) {
    return this['_' + name + 'Action'] || this._createActionByOption(name);
  },
  _getAnonymousTemplateName: function _getAnonymousTemplateName() {
    return ANONYMOUS_TEMPLATE_NAME;
  },
  _initTemplates: function _initTemplates() {
    if (!this.option('contentTemplate')) return;

    this._templateManager.addDefaultTemplates({
      content: new _empty_template.EmptyTemplate()
    });

    this.callBase.apply(this, arguments);
  },
  _render: function _render() {
    this.callBase();
    this.$element().addClass(this._addWidgetPrefix());
    var transclude = this._templateManager.anonymousTemplateName === this.option('contentTemplate');

    var template = this._getTemplateByOption('contentTemplate');

    if (template) {
      (0, _renderer.default)(template.render({
        container: this.element(),
        transclude: transclude
      }));
    }
  },
  _optionChanged: function _optionChanged(args) {
    var name = args.name;

    switch (name) {
      case 'onDragStart':
      case 'onDragMove':
      case 'onDragEnd':
      case 'onDrop':
      case 'onDragEnter':
      case 'onDragLeave':
        this['_' + name + 'Action'] = this._createActionByOption(name);
        break;

      case 'dragTemplate':
      case 'contentTemplate':
      case 'container':
      case 'clone':
        break;

      case 'allowMoveByClick':
      case 'dragDirection':
      case 'disabled':
      case 'boundary':
      case 'filter':
      case 'immediate':
        this._resetDragElement();

        this._detachEventHandlers();

        this._attachEventHandlers();

        break;

      case 'autoScroll':
        this._verticalScrollHelper.reset();

        this._horizontalScrollHelper.reset();

        break;

      case 'scrollSensitivity':
      case 'scrollSpeed':
      case 'boundOffset':
      case 'handle':
      case 'group':
      case 'data':
      case 'itemData':
        break;

      default:
        this.callBase(args);
    }
  },
  _getTargetDraggable: function _getTargetDraggable() {
    return targetDraggable || this;
  },
  _getSourceDraggable: function _getSourceDraggable() {
    return sourceDraggable || this;
  },
  _setTargetDraggable: function _setTargetDraggable() {
    var currentGroup = this.option('group');

    var sourceDraggable = this._getSourceDraggable();

    if (currentGroup && currentGroup === sourceDraggable.option('group')) {
      targetDraggable = this;
    }
  },
  _setSourceDraggable: function _setSourceDraggable() {
    sourceDraggable = this;
  },
  _resetSourceDraggable: function _resetSourceDraggable() {
    sourceDraggable = null;
  },
  _resetTargetDraggable: function _resetTargetDraggable() {
    targetDraggable = null;
  },
  _dispose: function _dispose() {
    this.callBase();

    this._detachEventHandlers();

    this._resetDragElement();

    this._resetTargetDraggable();

    this._resetSourceDraggable();

    this._$sourceElement = null;

    this._stopAnimator();
  },
  _fireDragEnterEvent: function _fireDragEnterEvent(sourceEvent) {
    var args = this._getEventArgs(sourceEvent);

    this._getAction('onDragEnter')(args);
  },
  _fireDragLeaveEvent: function _fireDragLeaveEvent(sourceEvent) {
    var args = this._getEventArgs(sourceEvent);

    this._getAction('onDragLeave')(args);
  }
});

(0, _component_registrator.default)(DRAGGABLE, Draggable);
var _default = Draggable;
exports.default = _default;
module.exports = exports.default;
module.exports.default = exports.default;

/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


__webpack_require__(122);

/***/ })
/******/ ]);