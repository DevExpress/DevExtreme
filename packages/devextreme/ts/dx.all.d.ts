declare global {
  interface JQuery<TElement = HTMLElement> {}
  interface JQuery<TElement = HTMLElement> {
    dxAccordion(): JQuery;
    dxAccordion(options: 'instance'): DevExpress.ui.dxAccordion;
    dxAccordion(options: DevExpress.ui.dxAccordion.Properties): JQuery;
    dxAccordion(options: string): any;
    dxAccordion(options: string, ...params: any[]): any;

    dxActionSheet(): JQuery;
    dxActionSheet(options: 'instance'): DevExpress.ui.dxActionSheet;
    dxActionSheet(options: DevExpress.ui.dxActionSheet.Properties): JQuery;
    dxActionSheet(options: string): any;
    dxActionSheet(options: string, ...params: any[]): any;

    dxAutocomplete(): JQuery;
    dxAutocomplete(options: 'instance'): DevExpress.ui.dxAutocomplete;
    dxAutocomplete(options: DevExpress.ui.dxAutocomplete.Properties): JQuery;
    dxAutocomplete(options: string): any;
    dxAutocomplete(options: string, ...params: any[]): any;

    dxBarGauge(): JQuery;
    dxBarGauge(options: 'instance'): DevExpress.viz.dxBarGauge;
    dxBarGauge(options: DevExpress.viz.dxBarGauge.Properties): JQuery;
    dxBarGauge(options: string): any;
    dxBarGauge(options: string, ...params: any[]): any;

    dxBox(): JQuery;
    dxBox(options: 'instance'): DevExpress.ui.dxBox;
    dxBox(options: DevExpress.ui.dxBox.Properties): JQuery;
    dxBox(options: string): any;
    dxBox(options: string, ...params: any[]): any;

    dxBullet(): JQuery;
    dxBullet(options: 'instance'): DevExpress.viz.dxBullet;
    dxBullet(options: DevExpress.viz.dxBullet.Properties): JQuery;
    dxBullet(options: string): any;
    dxBullet(options: string, ...params: any[]): any;

    dxButton(): JQuery;
    dxButton(options: 'instance'): DevExpress.ui.dxButton;
    dxButton(options: DevExpress.ui.dxButton.Properties): JQuery;
    dxButton(options: string): any;
    dxButton(options: string, ...params: any[]): any;

    dxButtonGroup(): JQuery;
    dxButtonGroup(options: 'instance'): DevExpress.ui.dxButtonGroup;
    dxButtonGroup(options: DevExpress.ui.dxButtonGroup.Properties): JQuery;
    dxButtonGroup(options: string): any;
    dxButtonGroup(options: string, ...params: any[]): any;

    dxCalendar(): JQuery;
    dxCalendar(options: 'instance'): DevExpress.ui.dxCalendar;
    dxCalendar(options: DevExpress.ui.dxCalendar.Properties): JQuery;
    dxCalendar(options: string): any;
    dxCalendar(options: string, ...params: any[]): any;

    dxChart(): JQuery;
    dxChart(options: 'instance'): DevExpress.viz.dxChart;
    dxChart(options: DevExpress.viz.dxChart.Properties): JQuery;
    dxChart(options: string): any;
    dxChart(options: string, ...params: any[]): any;

    dxCheckBox(): JQuery;
    dxCheckBox(options: 'instance'): DevExpress.ui.dxCheckBox;
    dxCheckBox(options: DevExpress.ui.dxCheckBox.Properties): JQuery;
    dxCheckBox(options: string): any;
    dxCheckBox(options: string, ...params: any[]): any;

    dxCircularGauge(): JQuery;
    dxCircularGauge(options: 'instance'): DevExpress.viz.dxCircularGauge;
    dxCircularGauge(options: DevExpress.viz.dxCircularGauge.Properties): JQuery;
    dxCircularGauge(options: string): any;
    dxCircularGauge(options: string, ...params: any[]): any;

    dxColorBox(): JQuery;
    dxColorBox(options: 'instance'): DevExpress.ui.dxColorBox;
    dxColorBox(options: DevExpress.ui.dxColorBox.Properties): JQuery;
    dxColorBox(options: string): any;
    dxColorBox(options: string, ...params: any[]): any;

    dxContextMenu(): JQuery;
    dxContextMenu(options: 'instance'): DevExpress.ui.dxContextMenu;
    dxContextMenu(options: DevExpress.ui.dxContextMenu.Properties): JQuery;
    dxContextMenu(options: string): any;
    dxContextMenu(options: string, ...params: any[]): any;

    dxDataGrid(): JQuery;
    dxDataGrid(options: 'instance'): DevExpress.ui.dxDataGrid;
    dxDataGrid(options: DevExpress.ui.dxDataGrid.Properties): JQuery;
    dxDataGrid(options: string): any;
    dxDataGrid(options: string, ...params: any[]): any;

    dxDateBox(): JQuery;
    dxDateBox(options: 'instance'): DevExpress.ui.dxDateBox;
    dxDateBox(options: DevExpress.ui.dxDateBox.Properties): JQuery;
    dxDateBox(options: string): any;
    dxDateBox(options: string, ...params: any[]): any;

    dxDateRangeBox(): JQuery;
    dxDateRangeBox(options: 'instance'): DevExpress.ui.dxDateRangeBox;
    dxDateRangeBox(options: DevExpress.ui.dxDateRangeBox.Properties): JQuery;
    dxDateRangeBox(options: string): any;
    dxDateRangeBox(options: string, ...params: any[]): any;

    dxDeferRendering(): JQuery;
    dxDeferRendering(options: 'instance'): DevExpress.ui.dxDeferRendering;
    dxDeferRendering(
      options: DevExpress.ui.dxDeferRendering.Properties
    ): JQuery;
    dxDeferRendering(options: string): any;
    dxDeferRendering(options: string, ...params: any[]): any;

    dxDiagram(): JQuery;
    dxDiagram(options: 'instance'): DevExpress.ui.dxDiagram;
    dxDiagram(options: DevExpress.ui.dxDiagram.Properties): JQuery;
    dxDiagram(options: string): any;
    dxDiagram(options: string, ...params: any[]): any;

    dxDraggable(): JQuery;
    dxDraggable(options: 'instance'): DevExpress.ui.dxDraggable;
    dxDraggable(options: DevExpress.ui.dxDraggable.Properties): JQuery;
    dxDraggable(options: string): any;
    dxDraggable(options: string, ...params: any[]): any;

    dxDrawer(): JQuery;
    dxDrawer(options: 'instance'): DevExpress.ui.dxDrawer;
    dxDrawer(options: DevExpress.ui.dxDrawer.Properties): JQuery;
    dxDrawer(options: string): any;
    dxDrawer(options: string, ...params: any[]): any;

    dxDropDownBox(): JQuery;
    dxDropDownBox(options: 'instance'): DevExpress.ui.dxDropDownBox;
    dxDropDownBox(options: DevExpress.ui.dxDropDownBox.Properties): JQuery;
    dxDropDownBox(options: string): any;
    dxDropDownBox(options: string, ...params: any[]): any;

    dxDropDownButton(): JQuery;
    dxDropDownButton(options: 'instance'): DevExpress.ui.dxDropDownButton;
    dxDropDownButton(
      options: DevExpress.ui.dxDropDownButton.Properties
    ): JQuery;
    dxDropDownButton(options: string): any;
    dxDropDownButton(options: string, ...params: any[]): any;

    dxFileManager(): JQuery;
    dxFileManager(options: 'instance'): DevExpress.ui.dxFileManager;
    dxFileManager(options: DevExpress.ui.dxFileManager.Properties): JQuery;
    dxFileManager(options: string): any;
    dxFileManager(options: string, ...params: any[]): any;

    dxFileUploader(): JQuery;
    dxFileUploader(options: 'instance'): DevExpress.ui.dxFileUploader;
    dxFileUploader(options: DevExpress.ui.dxFileUploader.Properties): JQuery;
    dxFileUploader(options: string): any;
    dxFileUploader(options: string, ...params: any[]): any;

    dxFilterBuilder(): JQuery;
    dxFilterBuilder(options: 'instance'): DevExpress.ui.dxFilterBuilder;
    dxFilterBuilder(options: DevExpress.ui.dxFilterBuilder.Properties): JQuery;
    dxFilterBuilder(options: string): any;
    dxFilterBuilder(options: string, ...params: any[]): any;

    dxForm(): JQuery;
    dxForm(options: 'instance'): DevExpress.ui.dxForm;
    dxForm(options: DevExpress.ui.dxForm.Properties): JQuery;
    dxForm(options: string): any;
    dxForm(options: string, ...params: any[]): any;

    dxFunnel(): JQuery;
    dxFunnel(options: 'instance'): DevExpress.viz.dxFunnel;
    dxFunnel(options: DevExpress.viz.dxFunnel.Properties): JQuery;
    dxFunnel(options: string): any;
    dxFunnel(options: string, ...params: any[]): any;

    dxGallery(): JQuery;
    dxGallery(options: 'instance'): DevExpress.ui.dxGallery;
    dxGallery(options: DevExpress.ui.dxGallery.Properties): JQuery;
    dxGallery(options: string): any;
    dxGallery(options: string, ...params: any[]): any;

    dxGantt(): JQuery;
    dxGantt(options: 'instance'): DevExpress.ui.dxGantt;
    dxGantt(options: DevExpress.ui.dxGantt.Properties): JQuery;
    dxGantt(options: string): any;
    dxGantt(options: string, ...params: any[]): any;

    dxHtmlEditor(): JQuery;
    dxHtmlEditor(options: 'instance'): DevExpress.ui.dxHtmlEditor;
    dxHtmlEditor(options: DevExpress.ui.dxHtmlEditor.Properties): JQuery;
    dxHtmlEditor(options: string): any;
    dxHtmlEditor(options: string, ...params: any[]): any;

    dxLinearGauge(): JQuery;
    dxLinearGauge(options: 'instance'): DevExpress.viz.dxLinearGauge;
    dxLinearGauge(options: DevExpress.viz.dxLinearGauge.Properties): JQuery;
    dxLinearGauge(options: string): any;
    dxLinearGauge(options: string, ...params: any[]): any;

    dxList(): JQuery;
    dxList(options: 'instance'): DevExpress.ui.dxList;
    dxList(options: DevExpress.ui.dxList.Properties): JQuery;
    dxList(options: string): any;
    dxList(options: string, ...params: any[]): any;

    dxLoadIndicator(): JQuery;
    dxLoadIndicator(options: 'instance'): DevExpress.ui.dxLoadIndicator;
    dxLoadIndicator(options: DevExpress.ui.dxLoadIndicator.Properties): JQuery;
    dxLoadIndicator(options: string): any;
    dxLoadIndicator(options: string, ...params: any[]): any;

    dxLoadPanel(): JQuery;
    dxLoadPanel(options: 'instance'): DevExpress.ui.dxLoadPanel;
    dxLoadPanel(options: DevExpress.ui.dxLoadPanel.Properties): JQuery;
    dxLoadPanel(options: string): any;
    dxLoadPanel(options: string, ...params: any[]): any;

    dxLookup(): JQuery;
    dxLookup(options: 'instance'): DevExpress.ui.dxLookup;
    dxLookup(options: DevExpress.ui.dxLookup.Properties): JQuery;
    dxLookup(options: string): any;
    dxLookup(options: string, ...params: any[]): any;

    dxMap(): JQuery;
    dxMap(options: 'instance'): DevExpress.ui.dxMap;
    dxMap(options: DevExpress.ui.dxMap.Properties): JQuery;
    dxMap(options: string): any;
    dxMap(options: string, ...params: any[]): any;

    dxMenu(): JQuery;
    dxMenu(options: 'instance'): DevExpress.ui.dxMenu;
    dxMenu(options: DevExpress.ui.dxMenu.Properties): JQuery;
    dxMenu(options: string): any;
    dxMenu(options: string, ...params: any[]): any;

    dxMultiView(): JQuery;
    dxMultiView(options: 'instance'): DevExpress.ui.dxMultiView;
    dxMultiView(options: DevExpress.ui.dxMultiView.Properties): JQuery;
    dxMultiView(options: string): any;
    dxMultiView(options: string, ...params: any[]): any;

    dxNumberBox(): JQuery;
    dxNumberBox(options: 'instance'): DevExpress.ui.dxNumberBox;
    dxNumberBox(options: DevExpress.ui.dxNumberBox.Properties): JQuery;
    dxNumberBox(options: string): any;
    dxNumberBox(options: string, ...params: any[]): any;

    dxPieChart(): JQuery;
    dxPieChart(options: 'instance'): DevExpress.viz.dxPieChart;
    dxPieChart(options: DevExpress.viz.dxPieChart.Properties): JQuery;
    dxPieChart(options: string): any;
    dxPieChart(options: string, ...params: any[]): any;

    dxPivotGrid(): JQuery;
    dxPivotGrid(options: 'instance'): DevExpress.ui.dxPivotGrid;
    dxPivotGrid(options: DevExpress.ui.dxPivotGrid.Properties): JQuery;
    dxPivotGrid(options: string): any;
    dxPivotGrid(options: string, ...params: any[]): any;

    dxPivotGridFieldChooser(): JQuery;
    dxPivotGridFieldChooser(
      options: 'instance'
    ): DevExpress.ui.dxPivotGridFieldChooser;
    dxPivotGridFieldChooser(
      options: DevExpress.ui.dxPivotGridFieldChooser.Properties
    ): JQuery;
    dxPivotGridFieldChooser(options: string): any;
    dxPivotGridFieldChooser(options: string, ...params: any[]): any;

    dxPolarChart(): JQuery;
    dxPolarChart(options: 'instance'): DevExpress.viz.dxPolarChart;
    dxPolarChart(options: DevExpress.viz.dxPolarChart.Properties): JQuery;
    dxPolarChart(options: string): any;
    dxPolarChart(options: string, ...params: any[]): any;

    dxPopover(): JQuery;
    dxPopover(options: 'instance'): DevExpress.ui.dxPopover;
    dxPopover(options: DevExpress.ui.dxPopover.Properties): JQuery;
    dxPopover(options: string): any;
    dxPopover(options: string, ...params: any[]): any;

    dxPopup(): JQuery;
    dxPopup(options: 'instance'): DevExpress.ui.dxPopup;
    dxPopup(options: DevExpress.ui.dxPopup.Properties): JQuery;
    dxPopup(options: string): any;
    dxPopup(options: string, ...params: any[]): any;

    dxProgressBar(): JQuery;
    dxProgressBar(options: 'instance'): DevExpress.ui.dxProgressBar;
    dxProgressBar(options: DevExpress.ui.dxProgressBar.Properties): JQuery;
    dxProgressBar(options: string): any;
    dxProgressBar(options: string, ...params: any[]): any;

    dxRadioGroup(): JQuery;
    dxRadioGroup(options: 'instance'): DevExpress.ui.dxRadioGroup;
    dxRadioGroup(options: DevExpress.ui.dxRadioGroup.Properties): JQuery;
    dxRadioGroup(options: string): any;
    dxRadioGroup(options: string, ...params: any[]): any;

    dxRangeSelector(): JQuery;
    dxRangeSelector(options: 'instance'): DevExpress.viz.dxRangeSelector;
    dxRangeSelector(options: DevExpress.viz.dxRangeSelector.Properties): JQuery;
    dxRangeSelector(options: string): any;
    dxRangeSelector(options: string, ...params: any[]): any;

    dxRangeSlider(): JQuery;
    dxRangeSlider(options: 'instance'): DevExpress.ui.dxRangeSlider;
    dxRangeSlider(options: DevExpress.ui.dxRangeSlider.Properties): JQuery;
    dxRangeSlider(options: string): any;
    dxRangeSlider(options: string, ...params: any[]): any;

    dxRecurrenceEditor(): JQuery;
    dxRecurrenceEditor(options: 'instance'): DevExpress.ui.dxRecurrenceEditor;
    dxRecurrenceEditor(
      options: DevExpress.ui.dxRecurrenceEditor.Properties
    ): JQuery;
    dxRecurrenceEditor(options: string): any;
    dxRecurrenceEditor(options: string, ...params: any[]): any;

    dxResizable(): JQuery;
    dxResizable(options: 'instance'): DevExpress.ui.dxResizable;
    dxResizable(options: DevExpress.ui.dxResizable.Properties): JQuery;
    dxResizable(options: string): any;
    dxResizable(options: string, ...params: any[]): any;

    dxResponsiveBox(): JQuery;
    dxResponsiveBox(options: 'instance'): DevExpress.ui.dxResponsiveBox;
    dxResponsiveBox(options: DevExpress.ui.dxResponsiveBox.Properties): JQuery;
    dxResponsiveBox(options: string): any;
    dxResponsiveBox(options: string, ...params: any[]): any;

    dxSankey(): JQuery;
    dxSankey(options: 'instance'): DevExpress.viz.dxSankey;
    dxSankey(options: DevExpress.viz.dxSankey.Properties): JQuery;
    dxSankey(options: string): any;
    dxSankey(options: string, ...params: any[]): any;

    dxScheduler(): JQuery;
    dxScheduler(options: 'instance'): DevExpress.ui.dxScheduler;
    dxScheduler(options: DevExpress.ui.dxScheduler.Properties): JQuery;
    dxScheduler(options: string): any;
    dxScheduler(options: string, ...params: any[]): any;

    dxScrollView(): JQuery;
    dxScrollView(options: 'instance'): DevExpress.ui.dxScrollView;
    dxScrollView(options: DevExpress.ui.dxScrollView.Properties): JQuery;
    dxScrollView(options: string): any;
    dxScrollView(options: string, ...params: any[]): any;

    dxSelectBox(): JQuery;
    dxSelectBox(options: 'instance'): DevExpress.ui.dxSelectBox;
    dxSelectBox(options: DevExpress.ui.dxSelectBox.Properties): JQuery;
    dxSelectBox(options: string): any;
    dxSelectBox(options: string, ...params: any[]): any;

    dxSlider(): JQuery;
    dxSlider(options: 'instance'): DevExpress.ui.dxSlider;
    dxSlider(options: DevExpress.ui.dxSlider.Properties): JQuery;
    dxSlider(options: string): any;
    dxSlider(options: string, ...params: any[]): any;

    dxSortable(): JQuery;
    dxSortable(options: 'instance'): DevExpress.ui.dxSortable;
    dxSortable(options: DevExpress.ui.dxSortable.Properties): JQuery;
    dxSortable(options: string): any;
    dxSortable(options: string, ...params: any[]): any;

    dxSparkline(): JQuery;
    dxSparkline(options: 'instance'): DevExpress.viz.dxSparkline;
    dxSparkline(options: DevExpress.viz.dxSparkline.Properties): JQuery;
    dxSparkline(options: string): any;
    dxSparkline(options: string, ...params: any[]): any;

    dxSpeedDialAction(): JQuery;
    dxSpeedDialAction(options: 'instance'): DevExpress.ui.dxSpeedDialAction;
    dxSpeedDialAction(
      options: DevExpress.ui.dxSpeedDialAction.Properties
    ): JQuery;
    dxSpeedDialAction(options: string): any;
    dxSpeedDialAction(options: string, ...params: any[]): any;

    dxSwitch(): JQuery;
    dxSwitch(options: 'instance'): DevExpress.ui.dxSwitch;
    dxSwitch(options: DevExpress.ui.dxSwitch.Properties): JQuery;
    dxSwitch(options: string): any;
    dxSwitch(options: string, ...params: any[]): any;

    dxTabPanel(): JQuery;
    dxTabPanel(options: 'instance'): DevExpress.ui.dxTabPanel;
    dxTabPanel(options: DevExpress.ui.dxTabPanel.Properties): JQuery;
    dxTabPanel(options: string): any;
    dxTabPanel(options: string, ...params: any[]): any;

    dxTabs(): JQuery;
    dxTabs(options: 'instance'): DevExpress.ui.dxTabs;
    dxTabs(options: DevExpress.ui.dxTabs.Properties): JQuery;
    dxTabs(options: string): any;
    dxTabs(options: string, ...params: any[]): any;

    dxTagBox(): JQuery;
    dxTagBox(options: 'instance'): DevExpress.ui.dxTagBox;
    dxTagBox(options: DevExpress.ui.dxTagBox.Properties): JQuery;
    dxTagBox(options: string): any;
    dxTagBox(options: string, ...params: any[]): any;

    dxTextArea(): JQuery;
    dxTextArea(options: 'instance'): DevExpress.ui.dxTextArea;
    dxTextArea(options: DevExpress.ui.dxTextArea.Properties): JQuery;
    dxTextArea(options: string): any;
    dxTextArea(options: string, ...params: any[]): any;

    dxTextBox(): JQuery;
    dxTextBox(options: 'instance'): DevExpress.ui.dxTextBox;
    dxTextBox(options: DevExpress.ui.dxTextBox.Properties): JQuery;
    dxTextBox(options: string): any;
    dxTextBox(options: string, ...params: any[]): any;

    dxTileView(): JQuery;
    dxTileView(options: 'instance'): DevExpress.ui.dxTileView;
    dxTileView(options: DevExpress.ui.dxTileView.Properties): JQuery;
    dxTileView(options: string): any;
    dxTileView(options: string, ...params: any[]): any;

    dxToast(): JQuery;
    dxToast(options: 'instance'): DevExpress.ui.dxToast;
    dxToast(options: DevExpress.ui.dxToast.Properties): JQuery;
    dxToast(options: string): any;
    dxToast(options: string, ...params: any[]): any;

    dxToolbar(): JQuery;
    dxToolbar(options: 'instance'): DevExpress.ui.dxToolbar;
    dxToolbar(options: DevExpress.ui.dxToolbar.Properties): JQuery;
    dxToolbar(options: string): any;
    dxToolbar(options: string, ...params: any[]): any;

    dxTooltip(): JQuery;
    dxTooltip(options: 'instance'): DevExpress.ui.dxTooltip;
    dxTooltip(options: DevExpress.ui.dxTooltip.Properties): JQuery;
    dxTooltip(options: string): any;
    dxTooltip(options: string, ...params: any[]): any;

    dxTreeList(): JQuery;
    dxTreeList(options: 'instance'): DevExpress.ui.dxTreeList;
    dxTreeList(options: DevExpress.ui.dxTreeList.Properties): JQuery;
    dxTreeList(options: string): any;
    dxTreeList(options: string, ...params: any[]): any;

    dxTreeMap(): JQuery;
    dxTreeMap(options: 'instance'): DevExpress.viz.dxTreeMap;
    dxTreeMap(options: DevExpress.viz.dxTreeMap.Properties): JQuery;
    dxTreeMap(options: string): any;
    dxTreeMap(options: string, ...params: any[]): any;

    dxTreeView(): JQuery;
    dxTreeView(options: 'instance'): DevExpress.ui.dxTreeView;
    dxTreeView(options: DevExpress.ui.dxTreeView.Properties): JQuery;
    dxTreeView(options: string): any;
    dxTreeView(options: string, ...params: any[]): any;

    dxValidationGroup(): JQuery;
    dxValidationGroup(options: 'instance'): DevExpress.ui.dxValidationGroup;
    dxValidationGroup(
      options: DevExpress.ui.dxValidationGroup.Properties
    ): JQuery;
    dxValidationGroup(options: string): any;
    dxValidationGroup(options: string, ...params: any[]): any;

    dxValidationMessage(): JQuery;
    dxValidationMessage(options: 'instance'): DevExpress.ui.dxValidationMessage;
    dxValidationMessage(
      options: DevExpress.ui.dxValidationMessage.Properties
    ): JQuery;
    dxValidationMessage(options: string): any;
    dxValidationMessage(options: string, ...params: any[]): any;

    dxValidationSummary(): JQuery;
    dxValidationSummary(options: 'instance'): DevExpress.ui.dxValidationSummary;
    dxValidationSummary(
      options: DevExpress.ui.dxValidationSummary.Properties
    ): JQuery;
    dxValidationSummary(options: string): any;
    dxValidationSummary(options: string, ...params: any[]): any;

    dxValidator(): JQuery;
    dxValidator(options: 'instance'): DevExpress.ui.dxValidator;
    dxValidator(options: DevExpress.ui.dxValidator.Properties): JQuery;
    dxValidator(options: string): any;
    dxValidator(options: string, ...params: any[]): any;

    dxVectorMap(): JQuery;
    dxVectorMap(options: 'instance'): DevExpress.viz.dxVectorMap;
    dxVectorMap(options: DevExpress.viz.dxVectorMap.Properties): JQuery;
    dxVectorMap(options: string): any;
    dxVectorMap(options: string, ...params: any[]): any;
  }
  interface JQueryEventObject {}
  interface JQueryPromise<T> {}
}
declare namespace DevExpress {
  /**
   * [descr:AnimationConfig]
   */
  export interface AnimationConfig {
    /**
     * [descr:AnimationConfig.complete]
     */
    complete?: (
      $element: core.DxElement,
      config: AnimationConfig
    ) => void;
    /**
     * [descr:AnimationConfig.delay]
     */
    delay?: number;
    /**
     * [descr:AnimationConfig.direction]
     */
    direction?: common.Direction;
    /**
     * [descr:AnimationConfig.duration]
     */
    duration?: number;
    /**
     * [descr:AnimationConfig.easing]
     */
    easing?: string;
    /**
     * [descr:AnimationConfig.from]
     */
    from?: animation.AnimationState;
    /**
     * [descr:AnimationConfig.staggerDelay]
     */
    staggerDelay?: number;
    /**
     * [descr:AnimationConfig.start]
     */
    start?: (
      $element: core.DxElement,
      config: AnimationConfig
    ) => void;
    /**
     * [descr:AnimationConfig.to]
     */
    to?: animation.AnimationState;
    /**
     * [descr:AnimationConfig.type]
     */
    type?: animation.AnimationType;
  }
  /**
   * [descr:animationPresets]
   */
  export const animationPresets: {
    /**
     * [descr:animationPresets.applyChanges()]
     */
    applyChanges(): void;
    /**
     * [descr:animationPresets.clear()]
     */
    clear(): void;
    /**
     * [descr:animationPresets.clear(name)]
     */
    clear(name: string): void;
    /**
     * [descr:animationPresets.getPreset(name)]
     */
    getPreset(name: string): AnimationConfig;
    /**
     * [descr:animationPresets.registerDefaultPresets()]
     */
    registerDefaultPresets(): void;
    /**
     * [descr:animationPresets.registerPreset(name, config)]
     */
    registerPreset(
      name: string,
      config: { animation: AnimationConfig; device?: Device }
    ): void;
    /**
     * [descr:animationPresets.resetToDefaults()]
     */
    resetToDefaults(): void;
  };
  /**
   * [descr:Component]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Component<TProperties> {
    constructor(options?: TProperties);
    /**
     * [descr:Component.beginUpdate()]
     */
    beginUpdate(): void;
    /**
     * [descr:Component.endUpdate()]
     */
    endUpdate(): void;
    /**
     * [descr:Component.instance()]
     */
    instance(): this;
    /**
     * [descr:Component.off(eventName)]
     */
    off(eventName: string): this;
    /**
     * [descr:Component.off(eventName, eventHandler)]
     */
    off(eventName: string, eventHandler: Function): this;
    /**
     * [descr:Component.on(eventName, eventHandler)]
     */
    on(eventName: string, eventHandler: Function): this;
    /**
     * [descr:Component.on(events)]
     */
    on(events: { [key: string]: Function }): this;
    /**
     * [descr:Component.option()]
     */
    option(): TProperties;
    /**
     * [descr:Component.option(optionName)]
     */
    option<TPropertyName extends string>(
      optionName: TPropertyName
    ): TPropertyName extends keyof TProperties
      ? TProperties[TPropertyName]
      : unknown;
    /**
     * [descr:Component.option(optionName, optionValue)]
     */
    option<TPropertyName extends string>(
      optionName: TPropertyName,
      optionValue: TPropertyName extends keyof TProperties
        ? TProperties[TPropertyName]
        : unknown
    ): void;
    /**
     * [descr:Component.option(options)]
     */
    option(options: Partial<TProperties>): void;
    /**
     * [descr:Component.resetOption(optionName)]
     */
    resetOption(optionName: string): void;
  }
  /**
   * [descr:ComponentOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ComponentOptions<
    TDisposingEvent,
    TInitializedEvent,
    TOptionChangedEvent,
  > {
    /**
     * [descr:ComponentOptions.onDisposing]
     */
    onDisposing?: (e: TDisposingEvent) => void;
    /**
     * [descr:ComponentOptions.onInitialized]
     */
    onInitialized?: (e: TInitializedEvent) => void;
    /**
     * [descr:ComponentOptions.onOptionChanged]
     */
    onOptionChanged?: (e: TOptionChangedEvent) => void;
  }
  /**
   * [descr:config()]
   */
  export function config(): common.GlobalConfig;
  /**
   * [descr:config(config)]
   */
  export function config(config: common.GlobalConfig): void;
  /**
   * [descr:DataHelperMixin]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class DataHelperMixin {
    /**
     * [descr:DataHelperMixin.getDataSource()]
     */
    getDataSource(): data.DataSource;
  }
  /**
   * [descr:Device]
   */
  export interface Device {
    /**
     * [descr:Device.android]
     */
    android?: boolean;
    /**
     * [descr:Device.deviceType]
     */
    deviceType?: 'phone' | 'tablet' | 'desktop';
    /**
     * [descr:Device.generic]
     */
    generic?: boolean;
    /**
     * [descr:Device.grade]
     */
    grade?: 'A' | 'B' | 'C';
    /**
     * [descr:Device.ios]
     */
    ios?: boolean;
    /**
     * [descr:Device.phone]
     */
    phone?: boolean;
    /**
     * [descr:Device.platform]
     */
    platform?: 'android' | 'ios' | 'generic';
    /**
     * [descr:Device.tablet]
     */
    tablet?: boolean;
    /**
     * [descr:Device.version]
     */
    version?: number[];
  }
  /**
    * [descr:devices]
    */
  export const devices: DevicesObject;
  /**
   * [descr:DevicesObject]
   */
  export class DevicesObject {
    constructor(options?: { window?: Window });
    /**
     * [descr:DevicesObject.current()]
     */
    current(): Device;
    /**
     * [descr:DevicesObject.current(deviceName)]
     */
    current(deviceName: string | Device): void;
    /**
     * [descr:DevicesObject.off(eventName)]
     */
    off(eventName: core.EventName): this;
    /**
     * [descr:DevicesObject.off(eventName, eventHandler)]
     */
    off(eventName: core.EventName, eventHandler: Function): this;
    /**
     * [descr:DevicesObject.on(eventName, eventHandler)]
     */
    on(eventName: core.EventName, eventHandler: Function): this;
    /**
     * [descr:DevicesObject.on(events)]
     */
    on(events: { [key in core.EventName]?: Function }): this;
    /**
     * [descr:DevicesObject.orientation()]
     */
    orientation(): 'portrait' | 'landscape' | undefined;
    /**
     * [descr:DevicesObject.real()]
     */
    real(): Device;
    isSimulator(): boolean;
  }
  /**
   * [descr:DOMComponent]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class DOMComponent<
    TProperties = DOMComponent.Properties,
  > extends Component<TProperties> {
    _templateManager: core.TemplateManager;

    _cancelOptionChange?: string;

    constructor(
      element: core.UserDefinedElement,
      options?: TProperties
    );

    /**
     * [descr:DOMComponent.getInstance(element)]
     */
    static getInstance(
      element: core.UserDefinedElement
    ): DOMComponent;

    /**
     * [descr:DOMComponent.defaultOptions(rule)]
     */
    static defaultOptions<TProperties = DOMComponent.Properties>(
      rule: core.DefaultOptionsRule<TProperties>
    ): void;

    /**
     * [descr:DOMComponent.dispose()]
     */
    dispose(): void;
    /**
     * [descr:DOMComponent.element()]
     */
    element(): core.DxElement;

    $element(): core.UserDefinedElement;
    _getTemplate(template: unknown): core.FunctionTemplate;
    _invalidate(): void;
    _refresh(): void;
    _notifyOptionChanged(
      fullName: string,
      value: unknown,
      previousValue: unknown
    ): void;
    _createElement(element: HTMLElement): void;
  }
  namespace DOMComponent {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface DOMComponentInstance extends DOMComponent {}
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type OptionChangedEventInfo<TComponent> =
      events.EventInfo<TComponent> &
      events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type Properties = DOMComponentOptions<DOMComponentInstance>;
  }

  /**
   * [descr:DOMComponentOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DOMComponentOptions<TComponent>
    extends ComponentOptions<
    events.EventInfo<TComponent>,
    events.InitializedEventInfo<TComponent>,
    DOMComponent.OptionChangedEventInfo<TComponent>
    > {
    /**
     * [descr:DOMComponentOptions.bindingOptions]
     */
    bindingOptions?: { [key: string]: any };
    /**
     * [descr:DOMComponentOptions.elementAttr]
     */
    elementAttr?: { [key: string]: any };
    /**
     * [descr:DOMComponentOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:DOMComponentOptions.onDisposing]
     */
    onDisposing?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:DOMComponentOptions.onOptionChanged]
     */
    onOptionChanged?: (
      e: DOMComponent.OptionChangedEventInfo<TComponent>
    ) => void;
    /**
     * [descr:DOMComponentOptions.rtlEnabled]
     */
    rtlEnabled?: boolean;
    /**
     * [descr:DOMComponentOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:dxSchedulerTimeZone]
   */
  export interface dxSchedulerTimeZone {
    /**
     * [descr:dxSchedulerTimeZone.id]
     */
    id: string;
    /**
     * [descr:dxSchedulerTimeZone.offset]
     */
    offset: number;
    /**
     * [descr:dxSchedulerTimeZone.title]
     */
    title: string;
  }
  /**
   * [descr:EndpointSelector]
   */
  export class EndpointSelector {
    constructor(options: any);
    /**
     * [descr:EndpointSelector.urlFor(key)]
     */
    urlFor(key: string): string;
  }
  /**
   * [descr:ExportLoadPanel]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExportLoadPanel {
    /**
     * [descr:ExportLoadPanel.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:ExportLoadPanel.text]
     */
    text?: string;
    /**
     * [descr:ExportLoadPanel.width]
     */
    width?: number;
    /**
     * [descr:ExportLoadPanel.height]
     */
    height?: number;
    /**
     * [descr:ExportLoadPanel.showIndicator]
     */
    showIndicator?: boolean;
    /**
     * [descr:ExportLoadPanel.indicatorSrc]
     */
    indicatorSrc?: string;
    /**
     * [descr:ExportLoadPanel.showPane]
     */
    showPane?: boolean;
    /**
     * [descr:ExportLoadPanel.shading]
     */
    shading?: boolean;
    /**
     * [descr:ExportLoadPanel.shadingColor]
     */
    shadingColor?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type ExternalFormat = never;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface FormatObject {
    /**
     * [descr:Format.currency]
     */
    currency?: string;
    /**
     * [descr:Format.useCurrencyAccountingStyle]
     */
    useCurrencyAccountingStyle?: boolean;
    /**
     * [descr:Format.formatter]
     */
    formatter?: (value: number | Date) => string;
    /**
     * [descr:Format.parser]
     */
    parser?: (value: string) => number | Date;
    /**
     * [descr:Format.precision]
     */
    precision?: number;
    /**
     * [descr:Format.type]
     */
    type?: common.Format | string;
  }
  /**
   * [descr:fx]
   */
  export const fx: {
    /**
     * [descr:fx.animate(element, config)]
     */
    animate(
      element: Element,
      config: AnimationConfig
    ): core.utils.DxPromise;

    /**
     * [descr:fx.isAnimating(element)]
     */
    isAnimating(element: Element): boolean;

    /**
     * [descr:fx.stop(element, jumpToEnd)]
     */
    stop(element: Element, jumpToEnd: boolean): void;
  };
  /**
   * [descr:hideTopOverlay()]
   */
  export function hideTopOverlay(): boolean;
  /**
   * [descr:PdfExportGanttFont]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PdfExportGanttFont {
    /**
     * [descr:PdfExportGanttFont.fontObject]
     */
    fontObject: object;
    /**
     * [descr:PdfExportGanttFont.name]
     */
    name: string;
    /**
     * [descr:PdfExportGanttFont.style]
     */
    style?: string;
    /**
     * [descr:PdfExportGanttFont.weight]
     */
    weight?: string | number;
  }
  /**
   * [descr:PositionConfig]
   */
  export interface PositionConfig {
    /**
     * [descr:PositionConfig.at]
     */
    at?:
    | common.PositionAlignment
    | {
      /**
           * [descr:PositionConfig.at.x]
           */
      x?: common.HorizontalAlignment;
      /**
           * [descr:PositionConfig.at.y]
           */
      y?: common.VerticalAlignment;
    };
    /**
     * [descr:PositionConfig.boundary]
     */
    boundary?: string | core.UserDefinedElement | Window;
    /**
     * [descr:PositionConfig.boundaryOffset]
     */
    boundaryOffset?:
    | string
    | {
      /**
           * [descr:PositionConfig.boundaryOffset.x]
           */
      x?: number;
      /**
           * [descr:PositionConfig.boundaryOffset.y]
           */
      y?: number;
    };
    /**
     * [descr:PositionConfig.collision]
     */
    collision?:
    | animation.CollisionResolutionCombination
    | {
      /**
           * [descr:PositionConfig.collision.x]
           */
      x?: animation.CollisionResolution;
      /**
           * [descr:PositionConfig.collision.y]
           */
      y?: animation.CollisionResolution;
    };
    /**
     * [descr:PositionConfig.my]
     */
    my?:
    | common.PositionAlignment
    | {
      /**
           * [descr:PositionConfig.my.x]
           */
      x?: common.HorizontalAlignment;
      /**
           * [descr:PositionConfig.my.y]
           */
      y?: common.VerticalAlignment;
    };
    /**
     * [descr:PositionConfig.of]
     */
    of?: string | core.UserDefinedElement | Window;
    /**
     * [descr:PositionConfig.offset]
     */
    offset?:
    | string
    | {
      /**
           * [descr:PositionConfig.offset.x]
           */
      x?: number;
      /**
           * [descr:PositionConfig.offset.y]
           */
      y?: number;
    };
  }
  /**
   * [descr:registerComponent(name, componentClass)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function registerComponent<TComponent>(
    name: string,
    componentClass: core.ComponentFactory<TComponent>
  ): void;
  /**
   * [descr:registerComponent(name, namespace, componentClass)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function registerComponent<TComponent>(
    name: string,
    namespace: {
      [key: string]: core.ComponentFactory<DOMComponent>;
    },
    componentClass: core.ComponentFactory<TComponent>
  ): void;
  /**
   * [descr:setTemplateEngine(options)]
   */
  export function setTemplateEngine(templateEngineOptions: {
    compile?: Function;
    render?: Function;
  }): void;
  /**
   * [descr:TransitionExecutor]
   */
  export class TransitionExecutor {
    /**
     * [descr:TransitionExecutor.enter(elements, animation)]
     */
    enter(
      elements: core.UserDefinedElementsArray,
      animation: AnimationConfig | string
    ): void;
    /**
     * [descr:TransitionExecutor.leave(elements, animation)]
     */
    leave(
      elements: core.UserDefinedElementsArray,
      animation: AnimationConfig | string
    ): void;
    /**
     * [descr:TransitionExecutor.reset()]
     */
    reset(): void;
    /**
     * [descr:TransitionExecutor.start()]
     */
    start(): core.utils.DxPromise;
    /**
     * [descr:TransitionExecutor.stop()]
     */
    stop(): void;
  }
  /**
   * [descr:validationEngine]
   */
  export class validationEngine {
    /**
     * [descr:validationEngine.getGroupConfig()]
     */
    static getGroupConfig(): any;
    /**
     * [descr:validationEngine.getGroupConfig(group)]
     */
    static getGroupConfig(group: string | any): any;
    /**
     * [descr:validationEngine.registerModelForValidation(model)]
     */
    static registerModelForValidation(model: any): void;
    /**
     * [descr:validationEngine.resetGroup()]
     */
    static resetGroup(): void;
    /**
     * [descr:validationEngine.resetGroup(group)]
     */
    static resetGroup(group: string | any): void;
    /**
     * [descr:validationEngine.unregisterModelForValidation(model)]
     */
    static unregisterModelForValidation(model: any): void;
    /**
     * [descr:validationEngine.validateGroup()]
     */
    static validateGroup(): ui.dxValidationGroup.ValidationResult;
    /**
     * [descr:validationEngine.validateGroup(group)]
     */
    static validateGroup(
      group: string | any
    ): ui.dxValidationGroup.ValidationResult;
    /**
     * [descr:validationEngine.validateModel(model)]
     */
    static validateModel(model: any): any;
  }
}
declare namespace DevExpress.animation {
  /**
   * @deprecated Use the AnimationConfig type instead
   */
  export type animationConfig = AnimationConfig;
  /**
   * [descr:AnimationState]
   */
  export type AnimationState =
    | string
    | number
    | {
      /**
         * [descr:AnimationState.opacity]
         */
      opacity: number;
    }
    | {
      /**
         * [descr:AnimationState.scale]
         */
      scale: number;
    }
    | {
      /**
         * [descr:AnimationState.position]
         */
      position: PositionConfig;
    }
    | {
      /**
         * [descr:AnimationState.left]
         */
      left: number;
    }
    | {
      /**
         * [descr:AnimationState.top]
         */
      top: number;
    };
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type AnimationType =
    | 'css'
    | 'fade'
    | 'fadeIn'
    | 'fadeOut'
    | 'pop'
    | 'slide'
    | 'slideIn'
    | 'slideOut';
  export type CollisionResolution = 'fit' | 'flip' | 'flipfit' | 'none';
  export type CollisionResolutionCombination =
    | 'fit'
    | 'fit flip'
    | 'fit flipfit'
    | 'fit none'
    | 'flip'
    | 'flip fit'
    | 'flip none'
    | 'flipfit'
    | 'flipfit fit'
    | 'flipfit none'
    | 'none'
    | 'none fit'
    | 'none flip'
    | 'none flipfit';
  /**
   * @deprecated Use the PositionConfig type instead
   */
  export interface positionConfig extends PositionConfig {}
}
declare namespace DevExpress.common {
  export type ApplyValueMode = 'instantly' | 'useButtons';
  /**
   * [descr:AsyncRule]
   */
  export interface AsyncRule {
    /**
     * [descr:AsyncRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:AsyncRule.message]
     */
    message?: string;
    /**
     * [descr:AsyncRule.reevaluate]
     */
    reevaluate?: boolean;
    /**
     * [descr:AsyncRule.type]
     */
    type: 'async';
    /**
     * [descr:AsyncRule.validationCallback]
     */
    validationCallback?: (options: ValidationCallbackData) => PromiseLike<any>;
  }
  export type ButtonStyle = 'text' | 'outlined' | 'contained';
  export type ButtonType = 'danger' | 'default' | 'normal' | 'success';
  /**
   * [descr:CompareRule]
   */
  export interface CompareRule {
    /**
     * [descr:CompareRule.comparisonTarget]
     */
    comparisonTarget?: () => any;
    /**
     * [descr:CompareRule.comparisonType]
     */
    comparisonType?: ComparisonOperator;
    /**
     * [descr:CompareRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:CompareRule.message]
     */
    message?: string;
    /**
     * [descr:CompareRule.type]
     */
    type: 'compare';
  }
  export type ComparisonOperator =
    | '!='
    | '!=='
    | '<'
    | '<='
    | '=='
    | '==='
    | '>'
    | '>=';
  /**
   * [descr:CustomRule]
   */
  export interface CustomRule {
    /**
     * [descr:CustomRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:CustomRule.message]
     */
    message?: string;
    /**
     * [descr:CustomRule.reevaluate]
     */
    reevaluate?: boolean;
    /**
     * [descr:CustomRule.type]
     */
    type: 'custom';
    /**
     * [descr:CustomRule.validationCallback]
     */
    validationCallback?: (options: ValidationCallbackData) => boolean;
  }
  export type DataStructure = 'plain' | 'tree';
  export type DataType =
    | 'string'
    | 'number'
    | 'date'
    | 'boolean'
    | 'object'
    | 'datetime';
  export type Direction = 'bottom' | 'left' | 'right' | 'top';
  export type DragDirection = 'both' | 'horizontal' | 'vertical';
  export type Draggable =
    core.OmitInternal<ui.dxDraggable>;
  export type DragHighlight = 'push' | 'indicate';
  export type EditorStyle = 'outlined' | 'underlined' | 'filled';
  /**
   * [descr:EmailRule]
   */
  export interface EmailRule {
    /**
     * [descr:EmailRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:EmailRule.message]
     */
    message?: string;
    /**
     * [descr:EmailRule.type]
     */
    type: 'email';
  }
  export type ExportFormat = 'GIF' | 'JPEG' | 'PDF' | 'PNG' | 'SVG';
  export type FieldChooserLayout = 0 | 1 | 2;
  export type FirstDayOfWeek = 0 | 1 | 2 | 3 | 4 | 5 | 6;
  export type Format =
    | 'billions'
    | 'currency'
    | 'day'
    | 'decimal'
    | 'exponential'
    | 'fixedPoint'
    | 'largeNumber'
    | 'longDate'
    | 'longTime'
    | 'millions'
    | 'millisecond'
    | 'month'
    | 'monthAndDay'
    | 'monthAndYear'
    | 'percent'
    | 'quarter'
    | 'quarterAndYear'
    | 'shortDate'
    | 'shortTime'
    | 'thousands'
    | 'trillions'
    | 'year'
    | 'dayOfWeek'
    | 'hour'
    | 'longDateLongTime'
    | 'minute'
    | 'second'
    | 'shortDateShortTime';
  /**
   * [descr:GlobalConfig]
   */
  export interface GlobalConfig {
    /**
     * [descr:GlobalConfig.decimalSeparator]
     * @deprecated [depNote:GlobalConfig.decimalSeparator]
     */
    decimalSeparator?: string;
    /**
     * [descr:GlobalConfig.defaultCurrency]
     */
    defaultCurrency?: string;
    /**
     * [descr:GlobalConfig.defaultUseCurrencyAccountingStyle]
     */
    defaultUseCurrencyAccountingStyle?: boolean;
    /**
     * [descr:GlobalConfig.editorStylingMode]
     */
    editorStylingMode?: EditorStyle;
    /**
     * [descr:GlobalConfig.floatingActionButtonConfig]
     */
    floatingActionButtonConfig?: {
      /**
       * [descr:GlobalConfig.floatingActionButtonConfig.closeIcon]
       */
      closeIcon?: string;
      /**
       * [descr:GlobalConfig.floatingActionButtonConfig.direction]
       */
      direction?: core.FloatingActionButtonDirection;
      /**
       * [descr:GlobalConfig.floatingActionButtonConfig.icon]
       */
      icon?: string;
      /**
       * [descr:GlobalConfig.floatingActionButtonConfig.label]
       */
      label?: string;
      /**
       * [descr:GlobalConfig.floatingActionButtonConfig.maxSpeedDialActionCount]
       */
      maxSpeedDialActionCount?: number;
      /**
       * [descr:GlobalConfig.floatingActionButtonConfig.position]
       */
      position?: PositionAlignment | PositionConfig | Function;
      /**
       * [descr:GlobalConfig.floatingActionButtonConfig.shading]
       */
      shading?: boolean;
    };
    /**
     * [descr:GlobalConfig.forceIsoDateParsing]
     */
    forceIsoDateParsing?: boolean;
    /**
     * [descr:GlobalConfig.oDataFilterToLower]
     */
    oDataFilterToLower?: boolean;
    /**
     * [descr:GlobalConfig.rtlEnabled]
     */
    rtlEnabled?: boolean;
    /**
     * [descr:GlobalConfig.serverDecimalSeparator]
     */
    serverDecimalSeparator?: string;
    /**
     * [descr:GlobalConfig.thousandsSeparator]
     * @deprecated [depNote:GlobalConfig.thousandsSeparator]
     */
    thousandsSeparator?: string;
    /**
     * [descr:GlobalConfig.useLegacyStoreResult]
     */
    useLegacyStoreResult?: boolean;
    /**
     * [descr:GlobalConfig.useLegacyVisibleIndex]
     */
    useLegacyVisibleIndex?: boolean;
  }
  /**
   * [descr:GroupItem]
   */
  export interface GroupItem<TItem = any> {
    /**
     * [descr:GroupItem.key]
     */
    key: any | string | number;
    /**
     * [descr:GroupItem.items]
     */
    items: TItem[] | GroupItem<TItem>[] | null;
    /**
     * [descr:GroupItem.count]
     */
    count?: number;
    /**
     * [descr:GroupItem.summary]
     */
    summary?: any[];
  }
  export type HorizontalAlignment = 'center' | 'left' | 'right';
  export type HorizontalEdge = 'left' | 'right';
  /**
   * [descr:isGroupItemsArray]
   */
  export function isGroupItemsArray<TItem>(
    res: LoadResult<TItem>
  ): res is GroupItem<TItem>[];
  /**
   * [descr:isItemsArray]
   */
  export function isItemsArray<TItem>(
    res: LoadResult<TItem>
  ): res is TItem[];
  /**
   * [descr:isLoadResultObject]
   */
  export function isLoadResultObject<TItem>(
    res: LoadResult<TItem>
  ): res is LoadResultObject<TItem>;
  export type LabelMode = 'static' | 'floating' | 'hidden';
  /**
   * [descr:LoadResult]
   */
  export type LoadResult<TItem = any> =
    | Object
    | LoadResultArray<TItem>
    | LoadResultObject<TItem>;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type LoadResultArray<TItem = any> = TItem[] | GroupItem<TItem>[];
  /**
   * [descr:LoadResultObject]
   */
  export interface LoadResultObject<TItem = any> {
    /**
     * [descr:LoadResultObject.data]
     */
    data: TItem[] | GroupItem<TItem>[];
    /**
     * [descr:LoadResultObject.totalCount]
     */
    totalCount?: number;
    /**
     * [descr:LoadResultObject.summary]
     */
    summary?: any[];
    /**
     * [descr:LoadResultObject.groupCount]
     */
    groupCount?: number;
  }
  export type MaskMode = 'always' | 'onFocus';
  export type Mode = 'auto';

  /**
   * [descr:NumericRule]
   */
  export interface NumericRule {
    /**
     * [descr:NumericRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:NumericRule.message]
     */
    message?: string;
    /**
     * [descr:NumericRule.type]
     */
    type: 'numeric';
  }
  export type Orientation = 'horizontal' | 'vertical';
  export type PageLoadMode = 'nextButton' | 'scrollBottom';
  export type PageOrientation = 'portrait' | 'landscape';
  /**
   * [descr:PatternRule]
   */
  export interface PatternRule {
    /**
     * [descr:PatternRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:PatternRule.message]
     */
    message?: string;
    /**
     * [descr:PatternRule.pattern]
     */
    pattern?: RegExp | string;
    /**
     * [descr:PatternRule.type]
     */
    type: 'pattern';
  }
  export type Position = 'bottom' | 'left' | 'right' | 'top';
  export type PositionAlignment =
    | 'bottom'
    | 'center'
    | 'left'
    | 'left bottom'
    | 'left top'
    | 'right'
    | 'right bottom'
    | 'right top'
    | 'top';
  /**
   * [descr:RangeRule]
   */
  export interface RangeRule {
    /**
     * [descr:RangeRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:RangeRule.max]
     */
    max?: Date | number;
    /**
     * [descr:RangeRule.message]
     */
    message?: string;
    /**
     * [descr:RangeRule.min]
     */
    min?: Date | number;
    /**
     * [descr:RangeRule.reevaluate]
     */
    reevaluate?: boolean;
    /**
     * [descr:RangeRule.type]
     */
    type: 'range';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type ReducedNativeEventInfo<
    TComponent extends grids.GridBase,
  > = Required<
  Pick<
  events.NativeEventInfo<
  TComponent,
  PointerEvent | MouseEvent | TouchEvent
  >,
  'component' | 'event'
  >
  >;
  /**
   * [descr:RequiredRule]
   */
  export interface RequiredRule {
    /**
     * [descr:RequiredRule.message]
     */
    message?: string;
    /**
     * [descr:RequiredRule.trim]
     */
    trim?: boolean;
    /**
     * [descr:RequiredRule.type]
     */
    type: 'required';
  }
  export type Scrollable =
    core.OmitInternal<ui.dxScrollable>;
  export type ScrollbarMode = 'always' | 'never' | 'onHover' | 'onScroll';
  export type ScrollDirection = 'both' | 'horizontal' | 'vertical';
  export type ScrollMode = 'standard' | 'virtual';
  export type SearchMode = 'contains' | 'startswith' | 'equals';
  export type SelectAllMode = 'allPages' | 'page';
  export type SimplifiedSearchMode = 'contains' | 'startswith';
  export type SingleMultipleAllOrNone = 'single' | 'multiple' | 'all' | 'none';
  export type SingleMultipleOrNone = 'single' | 'multiple' | 'none';
  export type SingleOrMultiple = 'single' | 'multiple';
  export type SingleOrNone = 'single' | 'none';
  export type SliderValueChangeMode = 'onHandleMove' | 'onHandleRelease';
  export type Sortable = core.OmitInternal<ui.dxSortable>;
  export type SortOrder = 'asc' | 'desc';
  export type StoreType = 'array' | 'local' | 'odata';
  /**
   * [descr:StringLengthRule]
   */
  export interface StringLengthRule {
    /**
     * [descr:StringLengthRule.ignoreEmptyValue]
     */
    ignoreEmptyValue?: boolean;
    /**
     * [descr:StringLengthRule.max]
     */
    max?: number;
    /**
     * [descr:StringLengthRule.message]
     */
    message?: string;
    /**
     * [descr:StringLengthRule.min]
     */
    min?: number;
    /**
     * [descr:StringLengthRule.trim]
     */
    trim?: boolean;
    /**
     * [descr:StringLengthRule.type]
     */
    type: 'stringLength';
  }
  export type SubmenuShowMode = 'onClick' | 'onHover';
  export type TabsIconPosition = 'top' | 'end' | 'bottom' | 'start';
  export type TextBoxPredefinedButton = 'clear';

  /**
   * [descr:TextEditorButton]
   */
  export interface TextEditorButton {
    /**
     * [descr:TextEditorButton.location]
     */
    location?: TextEditorButtonLocation;
    /**
     * [descr:TextEditorButton.name]
     */
    name?: string;
    /**
     * [descr:TextEditorButton.options]
     */
    options?: ui.dxButton.Properties;
  }
  export type TextEditorButtonLocation = 'after' | 'before';
  export type ToolbarItemComponent =
    | 'dxAutocomplete'
    | 'dxButton'
    | 'dxCheckBox'
    | 'dxDateBox'
    | 'dxMenu'
    | 'dxSelectBox'
    | 'dxTabs'
    | 'dxTextBox'
    | 'dxButtonGroup'
    | 'dxDropDownButton';
  export type ToolbarItemLocation = 'after' | 'before' | 'center';
  export type TooltipShowMode = 'always' | 'onHover';
  export interface ValidationCallbackData {
    value?: any;
    rule: any;
    validator: any;
    data?: any;
    column?: any;
    formItem?: any;
  }
  export type ValidationMessageMode = 'always' | 'auto';
  /**
   * [descr:ValidationRule]
   */
  export type ValidationRule =
    | AsyncRule
    | CompareRule
    | CustomRule
    | EmailRule
    | NumericRule
    | PatternRule
    | RangeRule
    | RequiredRule
    | StringLengthRule;
  export type ValidationRuleType =
    | 'required'
    | 'numeric'
    | 'range'
    | 'stringLength'
    | 'custom'
    | 'compare'
    | 'pattern'
    | 'email'
    | 'async';
  export type ValidationStatus = 'valid' | 'invalid' | 'pending';
  export type VerticalAlignment = 'bottom' | 'center' | 'top';
  export type VerticalEdge = 'bottom' | 'top';
}
declare namespace DevExpress.common.charts {
  export type AnimationEaseMode = 'easeOutCubic' | 'linear';
  export type AnnotationType = 'text' | 'image' | 'custom';
  export type ArgumentAxisHoverMode = 'allArgumentPoints' | 'none';
  export type AxisScaleType = 'continuous' | 'discrete' | 'logarithmic';
  /**
   * [descr:BaseLegend]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseLegend {
    /**
     * [descr:BaseLegend.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:BaseLegend.border]
     */
    border?: {
      /**
       * [descr:BaseLegend.border.color]
       */
      color?: string;
      /**
       * [descr:BaseLegend.border.cornerRadius]
       */
      cornerRadius?: number;
      /**
       * [descr:BaseLegend.border.dashStyle]
       */
      dashStyle?: DashStyle;
      /**
       * [descr:BaseLegend.border.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseLegend.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseLegend.border.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseLegend.columnCount]
     */
    columnCount?: number;
    /**
     * [descr:BaseLegend.columnItemSpacing]
     */
    columnItemSpacing?: number;
    /**
     * [descr:BaseLegend.font]
     */
    font?: viz.Font;
    /**
     * [descr:BaseLegend.horizontalAlignment]
     */
    horizontalAlignment?: HorizontalAlignment;
    /**
     * [descr:BaseLegend.itemTextPosition]
     */
    itemTextPosition?: Position;
    /**
     * [descr:BaseLegend.itemsAlignment]
     */
    itemsAlignment?: HorizontalAlignment;
    /**
     * [descr:BaseLegend.margin]
     */
    margin?:
    | number
    | {
      /**
           * [descr:BaseLegend.margin.bottom]
           */
      bottom?: number;
      /**
           * [descr:BaseLegend.margin.left]
           */
      left?: number;
      /**
           * [descr:BaseLegend.margin.right]
           */
      right?: number;
      /**
           * [descr:BaseLegend.margin.top]
           */
      top?: number;
    };
    /**
     * [descr:BaseLegend.markerSize]
     */
    markerSize?: number;
    /**
     * [descr:BaseLegend.orientation]
     */
    orientation?: Orientation;
    /**
     * [descr:BaseLegend.paddingLeftRight]
     */
    paddingLeftRight?: number;
    /**
     * [descr:BaseLegend.paddingTopBottom]
     */
    paddingTopBottom?: number;
    /**
     * [descr:BaseLegend.rowCount]
     */
    rowCount?: number;
    /**
     * [descr:BaseLegend.rowItemSpacing]
     */
    rowItemSpacing?: number;
    /**
     * [descr:BaseLegend.title]
     */
    title?:
    | {
      /**
           * [descr:BaseLegend.title.font]
           */
      font?: viz.Font;
      /**
           * [descr:BaseLegend.title.horizontalAlignment]
           */
      horizontalAlignment?: HorizontalAlignment;
      /**
           * [descr:BaseLegend.title.margin]
           */
      margin?: {
        /**
             * [descr:BaseLegend.title.margin.bottom]
             */
        bottom?: number;
        /**
             * [descr:BaseLegend.title.margin.left]
             */
        left?: number;
        /**
             * [descr:BaseLegend.title.margin.right]
             */
        right?: number;
        /**
             * [descr:BaseLegend.title.margin.top]
             */
        top?: number;
      };
      /**
           * [descr:BaseLegend.title.placeholderSize]
           */
      placeholderSize?: number;
      /**
           * [descr:BaseLegend.title.subtitle]
           */
      subtitle?:
      | {
        /**
                 * [descr:BaseLegend.title.subtitle.font]
                 */
        font?: viz.Font;
        /**
                 * [descr:BaseLegend.title.subtitle.offset]
                 */
        offset?: number;
        /**
                 * [descr:BaseLegend.title.subtitle.text]
                 */
        text?: string;
      }
      | string;
      /**
           * [descr:BaseLegend.title.text]
           */
      text?: string;
      /**
           * [descr:BaseLegend.title.verticalAlignment]
           */
      verticalAlignment?: VerticalEdge;
    }
    | string;
    /**
     * [descr:BaseLegend.verticalAlignment]
     */
    verticalAlignment?: VerticalEdge;
    /**
     * [descr:BaseLegend.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:BaseLegendItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseLegendItem {
    /**
     * [descr:BaseLegendItem.marker]
     */
    marker?: {
      /**
       * [descr:BaseLegendItem.marker.fill]
       */
      fill?: string;
      /**
       * [descr:BaseLegendItem.marker.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseLegendItem.marker.size]
       */
      size?: number;
      /**
       * [descr:BaseLegendItem.marker.state]
       */
      state?: LegendMarkerState;
    };
    /**
     * [descr:BaseLegendItem.text]
     */
    text?: string;
    /**
     * [descr:BaseLegendItem.visible]
     */
    visible?: boolean;
  }
  export type ChartsAxisLabelOverlap = 'rotate' | 'stagger' | 'none' | 'hide';
  /**
   * [descr:ChartsColor]
   */
  export interface ChartsColor {
    /**
     * [descr:ChartsColor.base]
     */
    base?: string;
    /**
     * [descr:ChartsColor.fillId]
     */
    fillId?: string;
  }
  export type ChartsDataType = 'datetime' | 'numeric' | 'string';
  export type ChartsLabelOverlap = 'hide' | 'none' | 'stack';
  export type DashStyle = 'dash' | 'dot' | 'longDash' | 'solid';
  export type DiscreteAxisDivisionMode = 'betweenLabels' | 'crossLabels';
  /**
   * [descr:GradientColor]
   */
  export interface GradientColor {
    /**
     * [descr:GradientColor.offset]
     */
    offset: number | string;
    /**
     * [descr:GradientColor.color]
     */
    color: string;
  }
  export type HatchDirection = 'left' | 'none' | 'right';
  export type LabelOverlap = 'hide' | 'none';
  export type LabelPosition = 'columns' | 'inside' | 'outside';
  export type LegendHoverMode = 'excludePoints' | 'includePoints' | 'none';
  export type LegendMarkerState = 'normal' | 'hovered' | 'selected';
  export type Palette =
    | 'Bright'
    | 'Harmony Light'
    | 'Ocean'
    | 'Pastel'
    | 'Soft'
    | 'Soft Pastel'
    | 'Vintage'
    | 'Violet'
    | 'Carmine'
    | 'Dark Moon'
    | 'Dark Violet'
    | 'Green Mist'
    | 'Soft Blue'
    | 'Material'
    | 'Office';
  export type PaletteColorSet = 'simpleSet' | 'indicatingSet' | 'gradientSet';
  export type PaletteExtensionMode = 'alternate' | 'blend' | 'extrapolate';
  export type PointInteractionMode =
    | 'allArgumentPoints'
    | 'allSeriesPoints'
    | 'none'
    | 'onlyPoint';
  export type PointSymbol =
    | 'circle'
    | 'cross'
    | 'polygon'
    | 'square'
    | 'triangle'
    | 'triangleDown'
    | 'triangleUp';
  /**
   * [descr:viz.registerGradient(type, options)]
   */
  export function registerGradient(
    type: string,
    options: { rotationAngle?: number; colors: GradientColor[] }
  ): string;
  /**
   * [descr:viz.registerPattern(options)]
   */
  export function registerPattern(options: {
    width: number | string;
    height: number | string;
    template: (container: SVGGElement) => void;
  }): string;
  export type RelativePosition = 'inside' | 'outside';
  /**
   * [descr:ScaleBreak]
   */
  export interface ScaleBreak {
    /**
     * [descr:ScaleBreak.endValue]
     */
    endValue?: number | Date | string;
    /**
     * [descr:ScaleBreak.startValue]
     */
    startValue?: number | Date | string;
  }
  export type ScaleBreakLineStyle = 'straight' | 'waved';
  export type SeriesHoverMode =
    | 'allArgumentPoints'
    | 'allSeriesPoints'
    | 'excludePoints'
    | 'includePoints'
    | 'nearestPoint'
    | 'none'
    | 'onlyPoint';
  export type SeriesSelectionMode =
    | 'allArgumentPoints'
    | 'allSeriesPoints'
    | 'excludePoints'
    | 'includePoints'
    | 'none'
    | 'onlyPoint';
  export type SeriesType =
    | 'area'
    | 'bar'
    | 'bubble'
    | 'candlestick'
    | 'fullstackedarea'
    | 'fullstackedbar'
    | 'fullstackedline'
    | 'fullstackedspline'
    | 'fullstackedsplinearea'
    | 'line'
    | 'rangearea'
    | 'rangebar'
    | 'scatter'
    | 'spline'
    | 'splinearea'
    | 'stackedarea'
    | 'stackedbar'
    | 'stackedline'
    | 'stackedspline'
    | 'stackedsplinearea'
    | 'steparea'
    | 'stepline'
    | 'stock';
  export type ShiftLabelOverlap = 'hide' | 'none' | 'shift';
  export type TextOverflow = 'ellipsis' | 'hide' | 'none';
  export type Theme =
    | 'generic.dark'
    | 'generic.light'
    | 'generic.contrast'
    | 'generic.carmine'
    | 'generic.darkmoon'
    | 'generic.darkviolet'
    | 'generic.greenmist'
    | 'generic.softblue'
    | 'material.blue.light'
    | 'material.lime.light'
    | 'material.orange.light'
    | 'material.purple.light'
    | 'material.teal.light';
  export type TimeInterval =
    | 'day'
    | 'hour'
    | 'millisecond'
    | 'minute'
    | 'month'
    | 'quarter'
    | 'second'
    | 'week'
    | 'year';
  /**
   * [descr:VizTimeInterval]
   */
  export type TimeIntervalConfig =
    | number
    | {
      /**
         * [descr:VizTimeInterval.days]
         */
      days?: number;
      /**
         * [descr:VizTimeInterval.hours]
         */
      hours?: number;
      /**
         * [descr:VizTimeInterval.milliseconds]
         */
      milliseconds?: number;
      /**
         * [descr:VizTimeInterval.minutes]
         */
      minutes?: number;
      /**
         * [descr:VizTimeInterval.months]
         */
      months?: number;
      /**
         * [descr:VizTimeInterval.quarters]
         */
      quarters?: number;
      /**
         * [descr:VizTimeInterval.seconds]
         */
      seconds?: number;
      /**
         * [descr:VizTimeInterval.weeks]
         */
      weeks?: number;
      /**
         * [descr:VizTimeInterval.years]
         */
      years?: number;
    }
    | TimeInterval;
  export type ValueErrorBarDisplayMode = 'auto' | 'high' | 'low' | 'none';
  export type ValueErrorBarType =
    | 'fixed'
    | 'percent'
    | 'stdDeviation'
    | 'stdError'
    | 'variance';
  /**
   * [descr:VisualRange]
   */
  export interface VisualRange {
    /**
     * [descr:VisualRange.endValue]
     */
    endValue?: number | Date | string;
    /**
     * [descr:VisualRange.length]
     */
    length?: TimeIntervalConfig;
    /**
     * [descr:VisualRange.startValue]
     */
    startValue?: number | Date | string;
  }
  export type VisualRangeUpdateMode = 'auto' | 'keep' | 'reset' | 'shift';
  export type WordWrap = 'normal' | 'breakWord' | 'none';
  export type ZoomPanAction = 'zoom' | 'pan';
}
declare namespace DevExpress.common.grids {
  /**
   * [descr:AdaptiveDetailRowPreparingInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface AdaptiveDetailRowPreparingInfo {
    /**
     * [descr:AdaptiveDetailRowPreparingInfo.formOptions]
     */
    readonly formOptions: any;
  }
  export type ApplyChangesMode = 'instantly' | 'onDemand';
  export type ApplyFilterMode = 'auto' | 'onClick';
  /**
   * [descr:GridBaseColumn]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ColumnBase<TRowData = any> {
    /**
     * [descr:GridBaseColumn.alignment]
     */
    alignment?: HorizontalAlignment;
    /**
     * [descr:GridBaseColumn.allowEditing]
     */
    allowEditing?: boolean;
    /**
     * [descr:GridBaseColumn.allowFiltering]
     */
    allowFiltering?: boolean;
    /**
     * [descr:GridBaseColumn.allowFixing]
     */
    allowFixing?: boolean;
    /**
     * [descr:GridBaseColumn.allowHeaderFiltering]
     */
    allowHeaderFiltering?: boolean;
    /**
     * [descr:GridBaseColumn.allowHiding]
     */
    allowHiding?: boolean;
    /**
     * [descr:GridBaseColumn.allowReordering]
     */
    allowReordering?: boolean;
    /**
     * [descr:GridBaseColumn.allowResizing]
     */
    allowResizing?: boolean;
    /**
     * [descr:GridBaseColumn.allowSearch]
     */
    allowSearch?: boolean;
    /**
     * [descr:GridBaseColumn.allowSorting]
     */
    allowSorting?: boolean;
    /**
     * [descr:GridBaseColumn.calculateCellValue]
     */
    calculateCellValue?: (this: ColumnBase, rowData: TRowData) => any;
    defaultCalculateCellValue?: this['calculateCellValue'];
    /**
     * [descr:GridBaseColumn.calculateDisplayValue]
     */
    calculateDisplayValue?:
    | string
    | ((this: ColumnBase, rowData: TRowData) => any);
    /**
     * [descr:GridBaseColumn.calculateFilterExpression]
     */
    calculateFilterExpression?: (
      this: ColumnBase,
      filterValue: any,
      selectedFilterOperation: string | null,
      target: string
    ) => string | any[] | Function;
    defaultCalculateFilterExpression?: this['calculateFilterExpression'];
    /**
     * [descr:GridBaseColumn.calculateSortValue]
     */
    calculateSortValue?:
    | string
    | ((this: ColumnBase, rowData: TRowData) => any);
    /**
     * [descr:GridBaseColumn.caption]
     */
    caption?: string;
    /**
     * [descr:GridBaseColumn.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:GridBaseColumn.customizeText]
     */
    customizeText?: (
      this: ColumnBase,
      cellInfo: ColumnCustomizeTextArg
    ) => string;
    /**
     * [descr:GridBaseColumn.dataField]
     */
    dataField?: string;
    /**
     * [descr:GridBaseColumn.dataType]
     */
    dataType?: DataType;
    /**
     * [descr:GridBaseColumn.editorOptions]
     */
    editorOptions?: any;
    /**
     * [descr:GridBaseColumn.encodeHtml]
     */
    encodeHtml?: boolean;
    /**
     * [descr:GridBaseColumn.falseText]
     */
    falseText?: string;
    /**
     * [descr:GridBaseColumn.filterOperations]
     */
    filterOperations?: (FilterOperation | string)[];
    /**
     * [descr:GridBaseColumn.filterType]
     */
    filterType?: FilterType;
    /**
     * [descr:GridBaseColumn.filterValue]
     */
    filterValue?: any;
    /**
     * [descr:GridBaseColumn.filterValues]
     */
    filterValues?: any[];
    /**
     * [descr:GridBaseColumn.fixed]
     */
    fixed?: boolean;
    /**
     * [descr:GridBaseColumn.fixedPosition]
     */
    fixedPosition?: HorizontalEdge;
    /**
     * [descr:GridBaseColumn.formItem]
     */
    formItem?: ui.dxForm.SimpleItem;
    /**
     * [descr:GridBaseColumn.format]
     */
    format?: ui.Format;
    /**
     * [descr:GridBaseColumn.headerFilter]
     */
    headerFilter?: ColumnHeaderFilter;
    /**
     * [descr:GridBaseColumn.hidingPriority]
     */
    hidingPriority?: number;
    /**
     * [descr:GridBaseColumn.isBand]
     */
    isBand?: boolean;
    /**
     * [descr:GridBaseColumn.lookup]
     */
    lookup?: ColumnLookup;
    /**
     * [descr:GridBaseColumn.minWidth]
     */
    minWidth?: number;
    /**
     * [descr:GridBaseColumn.name]
     */
    name?: string;
    /**
     * [descr:GridBaseColumn.ownerBand]
     */
    ownerBand?: number;
    /**
     * [descr:GridBaseColumn.renderAsync]
     */
    renderAsync?: boolean;
    /**
     * [descr:GridBaseColumn.selectedFilterOperation]
     */
    selectedFilterOperation?: SelectedFilterOperation;
    /**
     * [descr:GridBaseColumn.setCellValue]
     */
    setCellValue?: (
      this: ColumnBase,
      newData: core.DeepPartial<TRowData>,
      value: any,
      currentRowData: TRowData
    ) => void | PromiseLike<void>;
    defaultSetCellValue?: this['setCellValue'];
    /**
     * [descr:GridBaseColumn.showEditorAlways]
     */
    showEditorAlways?: boolean;
    /**
     * [descr:GridBaseColumn.showInColumnChooser]
     */
    showInColumnChooser?: boolean;
    /**
     * [descr:GridBaseColumn.sortIndex]
     */
    sortIndex?: number;
    /**
     * [descr:GridBaseColumn.sortOrder]
     */
    sortOrder?: SortOrder;
    /**
     * [descr:GridBaseColumn.sortingMethod]
     */
    sortingMethod?: (this: ColumnBase, value1: any, value2: any) => number;
    /**
     * [descr:GridBaseColumn.trueText]
     */
    trueText?: string;
    /**
     * [descr:GridBaseColumn.validationRules]
     */
    validationRules?: ValidationRule[];
    /**
     * [descr:GridBaseColumn.visible]
     */
    visible?: boolean;
    /**
     * [descr:GridBaseColumn.visibleIndex]
     */
    visibleIndex?: number;
    /**
     * [descr:GridBaseColumn.width]
     */
    width?: number | string;
  }
  /**
   * [descr:GridBaseColumnButton]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ColumnButtonBase {
    /**
     * [descr:GridBaseColumnButton.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:GridBaseColumnButton.hint]
     */
    hint?: string;
    /**
     * [descr:GridBaseColumnButton.icon]
     */
    icon?: string;
    /**
     * [descr:GridBaseColumnButton.text]
     */
    text?: string;
  }
  /**
   * [descr:ColumnChooser]
   */
  export interface ColumnChooser {
    /**
     * [descr:GridBaseOptions.columnChooser.allowSearch]
     * @deprecated [depNote:GridBaseOptions.columnChooser.allowSearch]
     */
    allowSearch?: boolean;
    /**
     * [descr:GridBaseOptions.columnChooser.container]
     */
    container?: string | core.UserDefinedElement;
    /**
     * [descr:GridBaseOptions.columnChooser.emptyPanelText]
     */
    emptyPanelText?: string;
    /**
     * [descr:GridBaseOptions.columnChooser.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:GridBaseOptions.columnChooser.height]
     */
    height?: number;
    /**
     * [descr:GridBaseOptions.columnChooser.mode]
     */
    mode?: ColumnChooserMode;
    /**
     * [descr:GridBaseOptions.columnChooser.position]
     */
    position?: PositionConfig;
    /**
     * [descr:GridBaseOptions.columnChooser.search]
     */
    search?: ColumnChooserSearchConfig;
    /**
     * [descr:GridBaseOptions.columnChooser.searchTimeout]
     * @deprecated [depNote:GridBaseOptions.columnChooser.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:GridBaseOptions.columnChooser.selection]
     */
    selection?: ColumnChooserSelectionConfig;
    /**
     * [descr:GridBaseOptions.columnChooser.title]
     */
    title?: string;
    /**
     * [descr:GridBaseOptions.columnChooser.width]
     */
    width?: number;
    /**
     * [descr:GridBaseOptions.columnChooser.sortOrder]
     */
    sortOrder?: SortOrder;
  }
  export type ColumnChooserMode = 'dragAndDrop' | 'select';
  /**
   * [descr:ColumnChooserSearchConfig]
   */
  export interface ColumnChooserSearchConfig {
    /**
     * [descr:ColumnChooserSearchConfig.editorOptions]
     */
    editorOptions?: any;
    /**
     * [descr:ColumnChooserSearchConfig.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:ColumnChooserSearchConfig.timeout]
     */
    timeout?: number;
  }
  /**
   * [descr:ColumnChooserSelectionConfig]
   */
  export interface ColumnChooserSelectionConfig {
    /**
     * [descr:ColumnChooserSelectionConfig.allowSelectAll]
     */
    allowSelectAll?: boolean;
    /**
     * [descr:ColumnChooserSelectionConfig.recursive]
     */
    recursive?: boolean;
    /**
     * [descr:ColumnChooserSelectionConfig.selectByClick]
     */
    selectByClick?: boolean;
  }
  export interface ColumnCustomizeTextArg {
    value?: any;
    valueText?: string;
    target?: string;
    groupInterval?: string | number;
  }
  /**
   * [descr:ColumnFixing]
   */
  export interface ColumnFixing {
    /**
     * [descr:GridBaseOptions.columnFixing.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:GridBaseOptions.columnFixing.texts]
     */
    texts?: ColumnFixingTexts;
  }
  /**
   * [descr:ColumnFixingTexts]
   */
  export interface ColumnFixingTexts {
    /**
     * [descr:GridBaseOptions.columnFixing.texts.fix]
     */
    fix?: string;
    /**
     * [descr:GridBaseOptions.columnFixing.texts.leftPosition]
     */
    leftPosition?: string;
    /**
     * [descr:GridBaseOptions.columnFixing.texts.rightPosition]
     */
    rightPosition?: string;
    /**
     * [descr:GridBaseOptions.columnFixing.texts.unfix]
     */
    unfix?: string;
  }
  export interface ColumnHeaderFilter {
    /**
     * [descr:GridBaseColumn.headerFilter.allowSearch]
     * @deprecated [depNote:GridBaseColumn.headerFilter.allowSearch]
     */
    allowSearch?: boolean;
    /**
     * [descr:GridBaseColumn.headerFilter.allowSelectAll]
     */
    allowSelectAll?: boolean;
    /**
     * [descr:GridBaseColumn.headerFilter.dataSource]
     */
    dataSource?:
    | ui.dxFilterBuilder.FilterLookupDataSource<any>
    | ((options: {
      component?: any;
      dataSource?: data.DataSource.Options | null;
    }) => void);
    /**
     * [descr:GridBaseColumn.headerFilter.groupInterval]
     */
    groupInterval?: HeaderFilterGroupInterval | number;
    /**
     * [descr:GridBaseColumn.headerFilter.height]
     */
    height?: number;
    /**
     * [descr:GridBaseColumn.headerFilter.search]
     */
    search?: ColumnHeaderFilterSearchConfig;
    /**
     * [descr:GridBaseColumn.headerFilter.searchMode]
     * @deprecated [depNote:GridBaseColumn.headerFilter.searchMode]
     */
    searchMode?: SearchMode;
    /**
     * [descr:GridBaseColumn.headerFilter.width]
     */
    width?: number;
  }
  /**
   * [descr:ColumnHeaderFilterSearchConfig]
   */
  export type ColumnHeaderFilterSearchConfig = HeaderFilterSearchConfig & {
    /**
     * [descr:ColumnHeaderFilterSearchConfig.searchExpr]
     */
    searchExpr?: string | Function | (string | Function)[];
  };
  export interface ColumnLookup {
    /**
     * [descr:GridBaseColumn.lookup.allowClearing]
     */
    allowClearing?: boolean;
    /**
     * [descr:GridBaseColumn.lookup.dataSource]
     */
    dataSource?:
    | ui.dxFilterBuilder.FilterLookupDataSource<any>
    | ((options: {
      data?: any;
      key?: any;
    }) => ui.dxFilterBuilder.FilterLookupDataSource<any>)
    | null;
    /**
     * [descr:GridBaseColumn.lookup.displayExpr]
     */
    displayExpr?: string | ((data: any) => string);
    /**
     * [descr:GridBaseColumn.lookup.valueExpr]
     */
    valueExpr?: string;
    /**
     * [descr:GridBaseColumn.lookup.calculateCellValue]
     */
    calculateCellValue?: (rowData: any) => any;
  }
  export type ColumnResizeMode = 'nextColumn' | 'widget';
  /**
   * [descr:DataChange]
   */
  export interface DataChange<TRowData = any, TKey = any> {
    /**
     * [descr:DataChange.key]
     */
    key: TKey;
    /**
     * [descr:DataChange.type]
     */
    type: DataChangeType;
    /**
     * [descr:DataChange.data]
     */
    data: core.DeepPartial<TRowData>;
    /**
     * [descr:DataChange.insertAfterKey]
     */
    insertAfterKey?: TKey;
    /**
     * [descr:DataChange.insertBeforeKey]
     */
    insertBeforeKey?: TKey;
  }
  /**
   * [descr:DataChangeInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DataChangeInfo<TRowData = any, TKey = any> {
    /**
     * [descr:DataChangeInfo.changes]
     */
    readonly changes: DataChange<TRowData, TKey>[];
  }
  export type DataChangeType = 'insert' | 'update' | 'remove';
  /**
   * [descr:DataErrorOccurredInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DataErrorOccurredInfo {
    /**
     * [descr:DataErrorOccurredInfo.error]
     */
    readonly error?: Error;
  }
  export type DataRenderMode = 'standard' | 'virtual';
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DragDropInfo {
    readonly dropInsideItem: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DragReorderInfo {
    readonly dropInsideItem: boolean;
    promise?: PromiseLike<void>;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DragStartEventInfo<TRowData = any> {
    itemData?: TRowData;
    readonly itemElement: core.DxElement;
    readonly fromIndex: number;
    readonly fromData?: any;
  }
  /**
   * [descr:EditingBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface EditingBase<TRowData = any, TKey = any> {
    /**
     * [descr:GridBaseOptions.editing.confirmDelete]
     */
    confirmDelete?: boolean;
    /**
     * [descr:GridBaseOptions.editing.changes]
     */
    changes?: DataChange<TRowData, TKey>[];
    /**
     * [descr:GridBaseOptions.editing.editColumnName]
     */
    editColumnName?: string;
    /**
     * [descr:GridBaseOptions.editing.editRowKey]
     */
    editRowKey?: TKey;
    /**
     * [descr:GridBaseOptions.editing.form]
     */
    form?: ui.dxForm.Properties;
    /**
     * [descr:GridBaseOptions.editing.mode]
     */
    mode?: GridsEditMode;
    /**
     * [descr:GridBaseOptions.editing.popup]
     */
    popup?: ui.dxPopup.Properties;
    /**
     * [descr:GridBaseOptions.editing.refreshMode]
     */
    refreshMode?: GridsEditRefreshMode;
    /**
     * [descr:GridBaseOptions.editing.selectTextOnEditStart]
     */
    selectTextOnEditStart?: boolean;
    /**
     * [descr:GridBaseOptions.editing.startEditAction]
     */
    startEditAction?: StartEditAction;
    /**
     * [descr:GridBaseOptions.editing.texts]
     */
    texts?: EditingTextsBase;
    /**
     * [descr:GridBaseOptions.editing.useIcons]
     */
    useIcons?: boolean;
  }
  /**
   * [descr:EditingTextsBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface EditingTextsBase {
    /**
     * [descr:GridBaseOptions.editing.texts.addRow]
     */
    addRow?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.cancelAllChanges]
     */
    cancelAllChanges?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.cancelRowChanges]
     */
    cancelRowChanges?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.confirmDeleteMessage]
     */
    confirmDeleteMessage?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.confirmDeleteTitle]
     */
    confirmDeleteTitle?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.deleteRow]
     */
    deleteRow?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.editRow]
     */
    editRow?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.saveAllChanges]
     */
    saveAllChanges?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.saveRowChanges]
     */
    saveRowChanges?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.undeleteRow]
     */
    undeleteRow?: string;
    /**
     * [descr:GridBaseOptions.editing.texts.validationCancelChanges]
     */
    validationCancelChanges?: string;
  }
  export type EnterKeyAction = 'startEdit' | 'moveFocus';
  export type EnterKeyDirection = 'none' | 'column' | 'row';
  export type FilterOperation =
    | '='
    | '<>'
    | '<'
    | '<='
    | '>'
    | '>='
    | 'contains'
    | 'endswith'
    | 'isblank'
    | 'isnotblank'
    | 'notcontains'
    | 'startswith'
    | 'between'
    | 'anyof'
    | 'noneof';
  /**
   * [descr:FilterPanel]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface FilterPanel<
    TComponent extends GridBase<TRowData, TKey>,
    TRowData = any,
    TKey = any,
  > {
    /**
     * [descr:GridBaseOptions.filterPanel.customizeText]
     */
    customizeText?: (e: FilterPanelCustomizeTextArg<TComponent>) => string;
    /**
     * [descr:GridBaseOptions.filterPanel.filterEnabled]
     */
    filterEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.filterPanel.texts]
     */
    texts?: FilterPanelTexts;
    /**
     * [descr:GridBaseOptions.filterPanel.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface FilterPanelCustomizeTextArg<TComponent> {
    readonly component: TComponent;
    readonly filterValue: any;
    readonly text: string;
  }
  /**
   * [descr:FilterPanelTexts]
   */
  export interface FilterPanelTexts {
    /**
     * [descr:GridBaseOptions.filterPanel.texts.clearFilter]
     */
    clearFilter?: string;
    /**
     * [descr:GridBaseOptions.filterPanel.texts.createFilter]
     */
    createFilter?: string;
    /**
     * [descr:GridBaseOptions.filterPanel.texts.filterEnabledHint]
     */
    filterEnabledHint?: string;
  }
  /**
   * [descr:FilterRow]
   */
  export interface FilterRow {
    /**
     * [descr:GridBaseOptions.filterRow.applyFilter]
     */
    applyFilter?: ApplyFilterMode;
    /**
     * [descr:GridBaseOptions.filterRow.applyFilterText]
     */
    applyFilterText?: string;
    /**
     * [descr:GridBaseOptions.filterRow.betweenEndText]
     */
    betweenEndText?: string;
    /**
     * [descr:GridBaseOptions.filterRow.betweenStartText]
     */
    betweenStartText?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions]
     */
    operationDescriptions?: FilterRowOperationDescriptions;
    /**
     * [descr:GridBaseOptions.filterRow.resetOperationText]
     */
    resetOperationText?: string;
    /**
     * [descr:GridBaseOptions.filterRow.showAllText]
     */
    showAllText?: string;
    /**
     * [descr:GridBaseOptions.filterRow.showOperationChooser]
     */
    showOperationChooser?: boolean;
    /**
     * [descr:GridBaseOptions.filterRow.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:FilterRowOperationDescriptions]
   */
  export interface FilterRowOperationDescriptions {
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.between]
     */
    between?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.contains]
     */
    contains?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.endsWith]
     */
    endsWith?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.equal]
     */
    equal?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.greaterThan]
     */
    greaterThan?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.greaterThanOrEqual]
     */
    greaterThanOrEqual?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.lessThan]
     */
    lessThan?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.lessThanOrEqual]
     */
    lessThanOrEqual?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.notContains]
     */
    notContains?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.notEqual]
     */
    notEqual?: string;
    /**
     * [descr:GridBaseOptions.filterRow.operationDescriptions.startsWith]
     */
    startsWith?: string;
  }
  export type FilterType = 'exclude' | 'include';
  /**
   * [descr:GridBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface GridBase<TRowData = any, TKey = any> {
    /**
     * [descr:GridBase.beginCustomLoading(messageText)]
     */
    beginCustomLoading(messageText: string): void;
    /**
     * [descr:GridBase.byKey(key)]
     */
    byKey(key: TKey): core.utils.DxPromise<TRowData>;
    /**
     * [descr:GridBase.cancelEditData()]
     */
    cancelEditData(): void;
    /**
     * [descr:GridBase.cellValue(rowIndex, dataField)]
     */
    cellValue(rowIndex: number, dataField: string): any;
    /**
     * [descr:GridBase.cellValue(rowIndex, dataField, value)]
     */
    cellValue(rowIndex: number, dataField: string, value: any): void;
    /**
     * [descr:GridBase.cellValue(rowIndex, visibleColumnIndex)]
     */
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    /**
     * [descr:GridBase.cellValue(rowIndex, visibleColumnIndex, value)]
     */
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    /**
     * [descr:GridBase.clearFilter()]
     */
    clearFilter(): void;
    /**
     * [descr:GridBase.clearFilter(filterName)]
     */
    clearFilter(filterName: string): void;
    /**
     * [descr:GridBase.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:GridBase.clearSorting()]
     */
    clearSorting(): void;
    /**
     * [descr:GridBase.closeEditCell()]
     */
    closeEditCell(): void;
    /**
     * [descr:GridBase.collapseAdaptiveDetailRow()]
     */
    collapseAdaptiveDetailRow(): void;
    /**
     * [descr:GridBase.columnCount()]
     */
    columnCount(): number;
    /**
     * [descr:GridBase.columnOption(id)]
     */
    columnOption(id: number | string): any;
    /**
     * [descr:GridBase.columnOption(id, optionName)]
     */
    columnOption(id: number | string, optionName: string): any;
    /**
     * [descr:GridBase.columnOption(id, optionName, optionValue)]
     */
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    /**
     * [descr:GridBase.columnOption(id, options)]
     */
    columnOption(id: number | string, options: any): void;
    /**
     * [descr:GridBase.deleteColumn(id)]
     */
    deleteColumn(id: number | string): void;
    /**
     * [descr:GridBase.deleteRow(rowIndex)]
     */
    deleteRow(rowIndex: number): void;
    /**
     * [descr:GridBase.deselectAll()]
     */
    deselectAll(): core.utils.DxPromise;
    /**
     * [descr:GridBase.deselectRows(keys)]
     */
    deselectRows(keys: any[]): core.utils.DxPromise<any>;
    /**
     * [descr:GridBase.editCell(rowIndex, dataField)]
     */
    editCell(rowIndex: number, dataField: string): void;
    /**
     * [descr:GridBase.editCell(rowIndex, visibleColumnIndex)]
     */
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    /**
     * [descr:GridBase.editRow(rowIndex)]
     */
    editRow(rowIndex: number): void;
    /**
     * [descr:GridBase.endCustomLoading()]
     */
    endCustomLoading(): void;
    /**
     * [descr:GridBase.expandAdaptiveDetailRow(key)]
     */
    expandAdaptiveDetailRow(key: TKey): void;
    /**
     * [descr:GridBase.filter()]
     */
    filter(): any;
    /**
     * [descr:GridBase.filter(filterExpr)]
     */
    filter(filterExpr: any): void;
    focus(): void;
    /**
     * [descr:GridBase.focus(element)]
     */
    focus(element: core.UserDefinedElement): void;
    /**
     * [descr:GridBase.getCellElement(rowIndex, dataField)]
     */
    getCellElement(
      rowIndex: number,
      dataField: string
    ): core.DxElement | undefined;
    /**
     * [descr:GridBase.getCellElement(rowIndex, visibleColumnIndex)]
     */
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): core.DxElement | undefined;
    /**
     * [descr:GridBase.getCombinedFilter()]
     */
    getCombinedFilter(): any;
    /**
     * [descr:GridBase.getCombinedFilter(returnDataField)]
     */
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): data.DataSource<TRowData, TKey>;
    /**
     * [descr:GridBase.getKeyByRowIndex(rowIndex)]
     */
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    /**
     * [descr:GridBase.getRowElement(rowIndex)]
     */
    getRowElement(
      rowIndex: number
    ): core.UserDefinedElementsArray | undefined;
    /**
     * [descr:GridBase.getRowIndexByKey(key)]
     */
    getRowIndexByKey(key: TKey): number;
    /**
     * [descr:GridBase.getScrollable()]
     */
    getScrollable(): Scrollable;
    /**
     * [descr:GridBase.getVisibleColumnIndex(id)]
     */
    getVisibleColumnIndex(id: number | string): number;
    /**
     * [descr:GridBase.hasEditData()]
     */
    hasEditData(): boolean;
    /**
     * [descr:GridBase.hideColumnChooser()]
     */
    hideColumnChooser(): void;
    /**
     * [descr:GridBase.isAdaptiveDetailRowExpanded(key)]
     */
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    /**
     * [descr:GridBase.isRowFocused(key)]
     */
    isRowFocused(key: TKey): boolean;
    /**
     * [descr:GridBase.isRowSelected(key)]
     */
    isRowSelected(key: TKey): boolean;
    /**
     * [descr:GridBase.keyOf(obj)]
     */
    keyOf(obj: TRowData): TKey;
    /**
     * [descr:GridBase.navigateToRow(key)]
     */
    navigateToRow(key: TKey): core.utils.DxPromise;
    /**
     * [descr:GridBase.pageCount()]
     */
    pageCount(): number;
    /**
     * [descr:GridBase.pageIndex()]
     */
    pageIndex(): number;
    /**
     * [descr:GridBase.pageIndex(newIndex)]
     */
    pageIndex(newIndex: number): core.utils.DxPromise;
    /**
     * [descr:GridBase.pageSize()]
     */
    pageSize(): number;
    /**
     * [descr:GridBase.pageSize(value)]
     */
    pageSize(value: number): void;
    /**
     * [descr:GridBase.refresh()]
     */
    refresh(): core.utils.DxPromise;
    /**
     * [descr:GridBase.refresh(changesOnly)]
     */
    refresh(changesOnly: boolean): core.utils.DxPromise;
    /**
     * [descr:GridBase.repaintRows(rowIndexes)]
     */
    repaintRows(rowIndexes: number[]): void;
    /**
     * [descr:GridBase.saveEditData()]
     */
    saveEditData(): core.utils.DxPromise;
    /**
     * [descr:GridBase.searchByText(text)]
     */
    searchByText(text: string): void;
    /**
     * [descr:GridBase.selectAll()]
     */
    selectAll(): core.utils.DxPromise;
    /**
     * [descr:GridBase.selectRows(keys, preserve)]
     */
    selectRows(
      keys: TKey[],
      preserve: boolean
    ): core.utils.DxPromise<TRowData[]>;
    /**
     * [descr:GridBase.selectRowsByIndexes(indexes)]
     */
    selectRowsByIndexes(
      indexes: number[]
    ): core.utils.DxPromise<TRowData[]>;
    /**
     * [descr:GridBase.showColumnChooser()]
     */
    showColumnChooser(): void;
    /**
     * [descr:GridBase.state()]
     */
    state(): any;
    /**
     * [descr:GridBase.state(state)]
     */
    state(state: any): void;
    /**
     * [descr:GridBase.undeleteRow(rowIndex)]
     */
    undeleteRow(rowIndex: number): void;
    /**
     * [descr:GridBase.updateDimensions()]
     */
    updateDimensions(): void;
  }
  /**
   * [descr:GridBaseOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type GridBaseOptions<
    TComponent extends GridBase<TRowData, TKey>,
    TRowData = any,
    TKey = any,
  > = Omit<
  GridBaseOptionsBlank<TComponent, TRowData, TKey>,
  'focusStateEnabled'
  > & {
    /**
     * [descr:GridBaseOptions.allowColumnReordering]
     */
    allowColumnReordering?: boolean;
    /**
     * [descr:GridBaseOptions.allowColumnResizing]
     */
    allowColumnResizing?: boolean;
    /**
     * [descr:GridBaseOptions.autoNavigateToFocusedRow]
     */
    autoNavigateToFocusedRow?: boolean;
    /**
     * [descr:GridBaseOptions.cacheEnabled]
     */
    cacheEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.cellHintEnabled]
     */
    cellHintEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.columnAutoWidth]
     */
    columnAutoWidth?: boolean;
    /**
     * [descr:GridBaseOptions.columnChooser]
     */
    columnChooser?: ColumnChooser;
    /**
     * [descr:GridBaseOptions.columnFixing]
     */
    columnFixing?: ColumnFixing;
    /**
     * [descr:GridBaseOptions.columnHidingEnabled]
     */
    columnHidingEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.columnMinWidth]
     */
    columnMinWidth?: number;
    /**
     * [descr:GridBaseOptions.columnResizingMode]
     */
    columnResizingMode?: ColumnResizeMode;
    /**
     * [descr:GridBaseOptions.columnWidth]
     */
    columnWidth?: number | Mode;
    /**
     * [descr:GridBaseOptions.columns]
     */
    columns?: (ColumnBase<TRowData> | string)[];
    /**
     * [descr:GridBaseOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<
    TRowData,
    TKey
    > | null;
    /**
     * [descr:GridBaseOptions.dateSerializationFormat]
     */
    dateSerializationFormat?: string;
    /**
     * [descr:GridBaseOptions.editing]
     */
    editing?: EditingBase<TRowData, TKey>;
    /**
     * [descr:GridBaseOptions.errorRowEnabled]
     */
    errorRowEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.filterBuilder]
     */
    filterBuilder?: ui.dxFilterBuilder.Properties;
    /**
     * [descr:GridBaseOptions.filterBuilderPopup]
     */
    filterBuilderPopup?: ui.dxPopup.Properties;
    /**
     * [descr:GridBaseOptions.filterPanel]
     */
    filterPanel?: FilterPanel<TComponent, TRowData, TKey>;
    /**
     * [descr:GridBaseOptions.filterRow]
     */
    filterRow?: FilterRow;
    /**
     * [descr:GridBaseOptions.filterSyncEnabled]
     */
    filterSyncEnabled?: boolean | Mode;
    /**
     * [descr:GridBaseOptions.filterValue]
     */
    filterValue?: string | any[] | Function;
    /**
     * [descr:GridBaseOptions.focusedColumnIndex]
     */
    focusedColumnIndex?: number;
    /**
     * [descr:GridBaseOptions.focusedRowEnabled]
     */
    focusedRowEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.focusedRowIndex]
     */
    focusedRowIndex?: number;
    /**
     * [descr:GridBaseOptions.focusedRowKey]
     */
    focusedRowKey?: TKey;
    /**
     * [descr:GridBaseOptions.headerFilter]
     */
    headerFilter?: HeaderFilter;
    /**
     * [descr:GridBaseOptions.highlightChanges]
     */
    highlightChanges?: boolean;
    /**
     * [descr:GridBaseOptions.keyboardNavigation]
     */
    keyboardNavigation?: KeyboardNavigation;
    /**
     * [descr:GridBaseOptions.loadPanel]
     */
    loadPanel?: LoadPanel;
    /**
     * [descr:GridBaseOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:GridBaseOptions.onAdaptiveDetailRowPreparing]
     */
    onAdaptiveDetailRowPreparing?: (
      e: events.EventInfo<TComponent> &
      AdaptiveDetailRowPreparingInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.onDataErrorOccurred]
     */
    onDataErrorOccurred?: (
      e: events.EventInfo<TComponent> & DataErrorOccurredInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.onEditCanceled]
     */
    onEditCanceled?: (
      e: events.EventInfo<TComponent> &
      DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onEditCanceling]
     */
    onEditCanceling?: (
      e: events.Cancelable &
      events.EventInfo<TComponent> &
      DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onInitNewRow]
     */
    onInitNewRow?: (
      e: events.EventInfo<TComponent> & NewRowInfo<TRowData>
    ) => void;
    /**
     * [descr:GridBaseOptions.onKeyDown]
     */
    onKeyDown?: (
      e: events.NativeEventInfo<TComponent, KeyboardEvent> &
      KeyDownInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowCollapsed]
     */
    onRowCollapsed?: (
      e: events.EventInfo<TComponent> & RowKeyInfo<TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowCollapsing]
     */
    onRowCollapsing?: (
      e: events.Cancelable &
      events.EventInfo<TComponent> &
      RowKeyInfo<TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowExpanded]
     */
    onRowExpanded?: (
      e: events.EventInfo<TComponent> & RowKeyInfo<TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowExpanding]
     */
    onRowExpanding?: (
      e: events.Cancelable &
      events.EventInfo<TComponent> &
      RowKeyInfo<TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowInserted]
     */
    onRowInserted?: (
      e: events.EventInfo<TComponent> &
      RowInsertedInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowInserting]
     */
    onRowInserting?: (
      e: events.EventInfo<TComponent> & RowInsertingInfo<TRowData>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowRemoved]
     */
    onRowRemoved?: (
      e: events.EventInfo<TComponent> &
      RowRemovedInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowRemoving]
     */
    onRowRemoving?: (
      e: events.EventInfo<TComponent> &
      RowRemovingInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowUpdated]
     */
    onRowUpdated?: (
      e: events.EventInfo<TComponent> &
      RowUpdatedInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowUpdating]
     */
    onRowUpdating?: (
      e: events.EventInfo<TComponent> &
      RowUpdatingInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onRowValidating]
     */
    onRowValidating?: (
      e: events.EventInfo<TComponent> &
      RowValidatingInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onSaved]
     */
    onSaved?: (
      e: events.EventInfo<TComponent> &
      DataChangeInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onSaving]
     */
    onSaving?: (
      e: events.EventInfo<TComponent> & SavingInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: events.EventInfo<TComponent> &
      SelectionChangedInfo<TRowData, TKey>
    ) => void;
    /**
     * [descr:GridBaseOptions.onToolbarPreparing]
     */
    onToolbarPreparing?: (
      e: events.EventInfo<TComponent> & ToolbarPreparingInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.pager]
     */
    pager?: Pager;
    /**
     * [descr:GridBaseOptions.paging]
     */
    paging?: PagingBase;
    /**
     * [descr:GridBaseOptions.renderAsync]
     */
    renderAsync?: boolean;
    /**
     * [descr:GridBaseOptions.repaintChangesOnly]
     */
    repaintChangesOnly?: boolean;
    /**
     * [descr:GridBaseOptions.rowAlternationEnabled]
     */
    rowAlternationEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.rowDragging]
     */
    rowDragging?: RowDragging<TComponent, TRowData, TKey>;
    /**
     * [descr:GridBaseOptions.scrolling]
     */
    scrolling?: ScrollingBase;
    /**
     * [descr:GridBaseOptions.searchPanel]
     */
    searchPanel?: SearchPanel;
    /**
     * [descr:GridBaseOptions.selectedRowKeys]
     */
    selectedRowKeys?: TKey[];
    /**
     * [descr:GridBaseOptions.selection]
     */
    selection?: SelectionBase;
    /**
     * [descr:GridBaseOptions.showBorders]
     */
    showBorders?: boolean;
    /**
     * [descr:GridBaseOptions.showColumnHeaders]
     */
    showColumnHeaders?: boolean;
    /**
     * [descr:GridBaseOptions.showColumnLines]
     */
    showColumnLines?: boolean;
    /**
     * [descr:GridBaseOptions.showRowLines]
     */
    showRowLines?: boolean;
    /**
     * [descr:GridBaseOptions.sorting]
     */
    sorting?: Sorting;
    /**
     * [descr:GridBaseOptions.stateStoring]
     */
    stateStoring?: StateStoring;
    /**
     * [descr:GridBaseOptions.twoWayBindingEnabled]
     */
    twoWayBindingEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.wordWrapEnabled]
     */
    wordWrapEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.syncLookupFilterValues]
     */
    syncLookupFilterValues?: boolean;
  };
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface GridBaseOptionsBlank<
    TComponent extends GridBase<TRowData, TKey>,
    TRowData = any,
    TKey = any,
  > extends ui.WidgetOptions<TComponent> {
    /**
     * [descr:GridBaseOptions.focusStateEnabled]
     */
    focusStateEnabled?: any;
  }
  export type GridsEditMode = 'batch' | 'cell' | 'row' | 'form' | 'popup';
  export type GridsEditRefreshMode = 'full' | 'reshape' | 'repaint';
  export type GroupExpandMode = 'buttonClick' | 'rowClick';
  /**
   * [descr:HeaderFilter]
   */
  export interface HeaderFilter {
    /**
     * [descr:GridBaseOptions.headerFilter.allowSearch]
     * @deprecated [depNote:GridBaseOptions.headerFilter.allowSearch]
     */
    allowSearch?: boolean;
    /**
     * [descr:GridBaseOptions.headerFilter.allowSelectAll]
     */
    allowSelectAll?: boolean;
    /**
     * [descr:GridBaseOptions.headerFilter.height]
     */
    height?: number;
    /**
     * [descr:GridBaseOptions.headerFilter.search]
     */
    search?: HeaderFilterSearchConfig;
    /**
     * [descr:GridBaseOptions.headerFilter.searchTimeout]
     * @deprecated [depNote:GridBaseOptions.headerFilter.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:GridBaseOptions.headerFilter.texts]
     */
    texts?: HeaderFilterTexts;
    /**
     * [descr:GridBaseOptions.headerFilter.visible]
     */
    visible?: boolean;
    /**
     * [descr:GridBaseOptions.headerFilter.width]
     */
    width?: number;
  }
  export type HeaderFilterGroupInterval =
    | 'day'
    | 'hour'
    | 'minute'
    | 'month'
    | 'quarter'
    | 'second'
    | 'year';
  /**
   * [descr:HeaderFilterSearchConfig]
   */
  export interface HeaderFilterSearchConfig {
    /**
     * [descr:HeaderFilterSearchConfig.editorOptions]
     */
    editorOptions?: any;
    /**
     * [descr:HeaderFilterSearchConfig.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:HeaderFilterSearchConfig.mode]
     */
    mode?: SearchMode;
    /**
     * [descr:HeaderFilterSearchConfig.timeout]
     */
    timeout?: number;
  }
  /**
   * [descr:HeaderFilterTexts]
   */
  export interface HeaderFilterTexts {
    /**
     * [descr:GridBaseOptions.headerFilter.texts.cancel]
     */
    cancel?: string;
    /**
     * [descr:GridBaseOptions.headerFilter.texts.emptyValue]
     */
    emptyValue?: string;
    /**
     * [descr:GridBaseOptions.headerFilter.texts.ok]
     */
    ok?: string;
  }
  /**
   * [descr:KeyboardNavigation]
   */
  export interface KeyboardNavigation {
    /**
     * [descr:GridBaseOptions.keyboardNavigation.editOnKeyPress]
     */
    editOnKeyPress?: boolean;
    /**
     * [descr:GridBaseOptions.keyboardNavigation.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:GridBaseOptions.keyboardNavigation.enterKeyAction]
     */
    enterKeyAction?: EnterKeyAction;
    /**
     * [descr:GridBaseOptions.keyboardNavigation.enterKeyDirection]
     */
    enterKeyDirection?: EnterKeyDirection;
  }
  /**
   * [descr:KeyDownInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface KeyDownInfo {
    /**
     * [descr:KeyDownInfo.handled]
     */
    handled: boolean;
  }
  /**
   * [descr:LoadPanel]
   */
  export interface LoadPanel {
    /**
     * [descr:GridBaseOptions.loadPanel.enabled]
     */
    enabled?: boolean | Mode;
    /**
     * [descr:GridBaseOptions.loadPanel.height]
     */
    height?: number;
    /**
     * [descr:GridBaseOptions.loadPanel.indicatorSrc]
     */
    indicatorSrc?: string;
    /**
     * [descr:GridBaseOptions.loadPanel.shading]
     */
    shading?: boolean;
    /**
     * [descr:GridBaseOptions.loadPanel.shadingColor]
     */
    shadingColor?: string;
    /**
     * [descr:GridBaseOptions.loadPanel.showIndicator]
     */
    showIndicator?: boolean;
    /**
     * [descr:GridBaseOptions.loadPanel.showPane]
     */
    showPane?: boolean;
    /**
     * [descr:GridBaseOptions.loadPanel.text]
     */
    text?: string;
    /**
     * [descr:GridBaseOptions.loadPanel.width]
     */
    width?: number;
  }
  /**
   * [descr:NewRowInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface NewRowInfo<TRowData = any> {
    /**
     * [descr:NewRowInfo.data]
     */
    data: TRowData;
    /**
     * [descr:NewRowInfo.promise]
     */
    promise?: PromiseLike<void>;
  }
  export type NewRowPosition =
    | 'first'
    | 'last'
    | 'pageBottom'
    | 'pageTop'
    | 'viewportBottom'
    | 'viewportTop';
  /**
   * [descr:Pager]
   */
  export interface Pager {
    /**
     * [descr:GridBaseOptions.pager.allowedPageSizes]
     */
    allowedPageSizes?: (number | PagerPageSize)[] | Mode;
    /**
     * [descr:GridBaseOptions.pager.displayMode]
     */
    displayMode?: PagerDisplayMode;
    /**
     * [descr:GridBaseOptions.pager.infoText]
     */
    infoText?: string;
    /**
     * [descr:GridBaseOptions.pager.showInfo]
     */
    showInfo?: boolean;
    /**
     * [descr:GridBaseOptions.pager.showNavigationButtons]
     */
    showNavigationButtons?: boolean;
    /**
     * [descr:GridBaseOptions.pager.showPageSizeSelector]
     */
    showPageSizeSelector?: boolean;
    /**
     * [descr:GridBaseOptions.pager.visible]
     */
    visible?: boolean | Mode;
    /**
     * [descr:GridBaseOptions.pager.label]
     */
    label?: string;
  }
  export type PagerDisplayMode = 'adaptive' | 'compact' | 'full';
  export type PagerPageSize = 'all' | 'auto';
  /**
   * [descr:PagingBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PagingBase {
    /**
     * [descr:GridBaseOptions.paging.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:GridBaseOptions.paging.pageIndex]
     */
    pageIndex?: number;
    /**
     * [descr:GridBaseOptions.paging.pageSize]
     */
    pageSize?: number;
  }
  /**
   * [descr:RowDragging]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowDragging<
    TComponent extends GridBase<TRowData, TKey>,
    TRowData = any,
    TKey = any,
  > {
    /**
     * [descr:GridBaseOptions.rowDragging.allowDropInsideItem]
     */
    allowDropInsideItem?: boolean;
    /**
     * [descr:GridBaseOptions.rowDragging.allowReordering]
     */
    allowReordering?: boolean;
    /**
     * [descr:GridBaseOptions.rowDragging.autoScroll]
     */
    autoScroll?: boolean;
    /**
     * [descr:GridBaseOptions.rowDragging.boundary]
     */
    boundary?: string | core.UserDefinedElement;
    /**
     * [descr:GridBaseOptions.rowDragging.container]
     */
    container?: string | core.UserDefinedElement;
    /**
     * [descr:GridBaseOptions.rowDragging.cursorOffset]
     */
    cursorOffset?:
    | string
    | {
      /**
           * [descr:GridBaseOptions.rowDragging.cursorOffset.x]
           */
      x?: number;
      /**
           * [descr:GridBaseOptions.rowDragging.cursorOffset.y]
           */
      y?: number;
    };
    /**
     * [descr:GridBaseOptions.rowDragging.data]
     */
    data?: any;
    /**
     * [descr:GridBaseOptions.rowDragging.dragDirection]
     */
    dragDirection?: DragDirection;
    /**
     * [descr:GridBaseOptions.rowDragging.dragTemplate]
     */
    dragTemplate?:
    | core.template
    | ((
      dragInfo: RowDraggingTemplateData<TRowData>,
      containerElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:GridBaseOptions.rowDragging.dropFeedbackMode]
     */
    dropFeedbackMode?: DragHighlight;
    /**
     * [descr:GridBaseOptions.rowDragging.filter]
     * @deprecated [depNote:GridBaseOptions.rowDragging.filter]
     */
    filter?: string;
    /**
     * [descr:GridBaseOptions.rowDragging.group]
     */
    group?: string;
    /**
     * [descr:GridBaseOptions.rowDragging.handle]
     */
    handle?: string;
    /**
     * [descr:GridBaseOptions.rowDragging.onAdd]
     */
    onAdd?: (
      e: ReducedNativeEventInfo<TComponent> &
      RowDraggingEventInfo<TRowData> &
      DragDropInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.rowDragging.onDragChange]
     */
    onDragChange?: (
      e: events.Cancelable &
      ReducedNativeEventInfo<TComponent> &
      RowDraggingEventInfo<TRowData> &
      DragDropInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.rowDragging.onDragEnd]
     */
    onDragEnd?: (
      e: events.Cancelable &
      ReducedNativeEventInfo<TComponent> &
      RowDraggingEventInfo<TRowData> &
      DragDropInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.rowDragging.onDragMove]
     */
    onDragMove?: (
      e: events.Cancelable &
      ReducedNativeEventInfo<TComponent> &
      RowDraggingEventInfo<TRowData> &
      DragDropInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.rowDragging.onDragStart]
     */
    onDragStart?: (
      e: events.Cancelable &
      ReducedNativeEventInfo<TComponent> &
      DragStartEventInfo<TRowData>
    ) => void;
    /**
     * [descr:GridBaseOptions.rowDragging.onRemove]
     */
    onRemove?: (
      e: ReducedNativeEventInfo<TComponent> & RowDraggingEventInfo<TRowData>
    ) => void;
    /**
     * [descr:GridBaseOptions.rowDragging.onReorder]
     */
    onReorder?: (
      e: ReducedNativeEventInfo<TComponent> &
      RowDraggingEventInfo<TRowData> &
      DragReorderInfo
    ) => void;
    /**
     * [descr:GridBaseOptions.rowDragging.scrollSensitivity]
     */
    scrollSensitivity?: number;
    /**
     * [descr:GridBaseOptions.rowDragging.scrollSpeed]
     */
    scrollSpeed?: number;
    /**
     * [descr:GridBaseOptions.rowDragging.showDragIcons]
     */
    showDragIcons?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowDraggingEventInfo<TRowData = any> {
    readonly itemData?: TRowData;
    readonly itemElement: core.DxElement;
    readonly fromIndex: number;
    readonly toIndex: number;
    readonly fromComponent: Sortable | Draggable;
    readonly toComponent: Sortable | Draggable;
    readonly fromData?: any;
    readonly toData?: any;
  }
  export interface RowDraggingTemplateData<TRowData = any> {
    readonly itemData: TRowData;
    readonly itemElement: core.DxElement;
  }
  /**
   * [descr:RowInsertedInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowInsertedInfo<TRowData = any, TKey = any> {
    /**
     * [descr:RowInsertedInfo.data]
     */
    readonly data: TRowData;
    /**
     * [descr:RowInsertedInfo.key]
     */
    readonly key: TKey;
    /**
     * [descr:RowInsertedInfo.error]
     */
    readonly error: Error;
  }
  /**
   * [descr:RowInsertingInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowInsertingInfo<TRowData = any> {
    /**
     * [descr:RowInsertingInfo.data]
     */
    data: TRowData;
    /**
     * [descr:RowInsertingInfo.cancel]
     */
    cancel: boolean | PromiseLike<void>;
  }
  /**
   * [descr:RowKeyInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowKeyInfo<TKey = any> {
    /**
     * [descr:RowKeyInfo.key]
     */
    readonly key: TKey;
  }
  /**
   * [descr:RowRemovedInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowRemovedInfo<TRowData = any, TKey = any> {
    /**
     * [descr:RowRemovedInfo.data]
     */
    readonly data: TRowData;
    /**
     * [descr:RowRemovedInfo.key]
     */
    readonly key: TKey;
    /**
     * [descr:RowRemovedInfo.error]
     */
    readonly error: Error;
  }
  /**
   * [descr:RowRemovingInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowRemovingInfo<TRowData = any, TKey = any> {
    /**
     * [descr:RowRemovingInfo.data]
     */
    readonly data: TRowData;
    /**
     * [descr:RowRemovingInfo.key]
     */
    readonly key: TKey;
    /**
     * [descr:RowRemovingInfo.cancel]
     */
    cancel: boolean | PromiseLike<void>;
  }
  /**
   * [descr:RowUpdatedInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowUpdatedInfo<TRowData = any, TKey = any> {
    /**
     * [descr:RowUpdatedInfo.data]
     */
    readonly data: TRowData;
    /**
     * [descr:RowUpdatedInfo.key]
     */
    readonly key: TKey;
    /**
     * [descr:RowUpdatedInfo.error]
     */
    readonly error: Error;
  }
  /**
   * [descr:RowUpdatingInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowUpdatingInfo<TRowData = any, TKey = any> {
    /**
     * [descr:RowUpdatingInfo.oldData]
     */
    readonly oldData: TRowData;
    /**
     * [descr:RowUpdatingInfo.newData]
     */
    newData: core.DeepPartial<TRowData>;
    /**
     * [descr:RowUpdatingInfo.key]
     */
    readonly key: TKey;
    /**
     * [descr:RowUpdatingInfo.cancel]
     */
    cancel: boolean | PromiseLike<void>;
  }
  /**
   * [descr:RowValidatingInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RowValidatingInfo<TRowData = any, TKey = any> {
    /**
     * [descr:RowValidatingInfo.brokenRules]
     */
    readonly brokenRules: ValidationRule[];
    /**
     * [descr:RowValidatingInfo.isValid]
     */
    isValid: boolean;
    /**
     * [descr:RowValidatingInfo.key]
     */
    readonly key: TKey;
    /**
     * [descr:RowValidatingInfo.newData]
     */
    readonly newData: core.DeepPartial<TRowData>;
    /**
     * @docid
     * @type object
     */
    /**
     * [descr:RowValidatingInfo.oldData]
     */
    readonly oldData: TRowData;
    /**
     * [descr:RowValidatingInfo.errorText]
     */
    errorText: string;
    /**
     * [descr:RowValidatingInfo.promise]
     */
    promise?: PromiseLike<void>;
  }
  /**
   * [descr:SavingInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface SavingInfo<TRowData = any, TKey = any> {
    /**
     * [descr:SavingInfo.changes]
     */
    changes: DataChange<TRowData, TKey>[];
    /**
     * [descr:SavingInfo.promise]
     */
    promise?: PromiseLike<void>;
    /**
     * [descr:SavingInfo.cancel]
     */
    cancel: boolean;
  }
  /**
   * [descr:ScrollingBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ScrollingBase {
    /**
     * [descr:GridBaseOptions.scrolling.columnRenderingMode]
     */
    columnRenderingMode?: DataRenderMode;
    /**
     * [descr:GridBaseOptions.scrolling.preloadEnabled]
     */
    preloadEnabled?: boolean;
    /**
     * [descr:GridBaseOptions.scrolling.rowRenderingMode]
     */
    rowRenderingMode?: DataRenderMode;
    /**
     * [descr:GridBaseOptions.scrolling.scrollByContent]
     */
    scrollByContent?: boolean;
    /**
     * [descr:GridBaseOptions.scrolling.scrollByThumb]
     */
    scrollByThumb?: boolean;
    /**
     * [descr:GridBaseOptions.scrolling.showScrollbar]
     */
    showScrollbar?: ScrollbarMode;
    /**
     * [descr:GridBaseOptions.scrolling.useNative]
     */
    useNative?: boolean | Mode;
    /**
     * [descr:GridBaseOptions.scrolling.renderAsync]
     */
    renderAsync?: boolean;
  }
  /**
   * [descr:SearchPanel]
   */
  export interface SearchPanel {
    /**
     * [descr:GridBaseOptions.searchPanel.highlightCaseSensitive]
     */
    highlightCaseSensitive?: boolean;
    /**
     * [descr:GridBaseOptions.searchPanel.highlightSearchText]
     */
    highlightSearchText?: boolean;
    /**
     * [descr:GridBaseOptions.searchPanel.placeholder]
     */
    placeholder?: string;
    /**
     * [descr:GridBaseOptions.searchPanel.searchVisibleColumnsOnly]
     */
    searchVisibleColumnsOnly?: boolean;
    /**
     * [descr:GridBaseOptions.searchPanel.text]
     */
    text?: string;
    /**
     * [descr:GridBaseOptions.searchPanel.visible]
     */
    visible?: boolean;
    /**
     * [descr:GridBaseOptions.searchPanel.width]
     */
    width?: string | number;
  }
  export type SelectedFilterOperation =
    | '<'
    | '<='
    | '<>'
    | '='
    | '>'
    | '>='
    | 'between'
    | 'contains'
    | 'endswith'
    | 'notcontains'
    | 'startswith';
  /**
   * [descr:SelectionBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface SelectionBase {
    /**
     * [descr:GridBaseOptions.selection.allowSelectAll]
     */
    allowSelectAll?: boolean;
    /**
     * [descr:GridBaseOptions.selection.mode]
     */
    mode?: SingleMultipleOrNone;
  }
  /**
   * [descr:_common_grids_SelectionChangedInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface SelectionChangedInfo<TRowData = any, TKey = any> {
    /**
     * [descr:_common_grids_SelectionChangedInfo.currentSelectedRowKeys]
     */
    readonly currentSelectedRowKeys: TKey[];
    /**
     * [descr:_common_grids_SelectionChangedInfo.currentDeselectedRowKeys]
     */
    readonly currentDeselectedRowKeys: TKey[];
    /**
     * [descr:_common_grids_SelectionChangedInfo.selectedRowKeys]
     */
    readonly selectedRowKeys: TKey[];
    /**
     * [descr:_common_grids_SelectionChangedInfo.selectedRowsData]
     */
    readonly selectedRowsData: TRowData[];
  }
  export type SelectionColumnDisplayMode =
    | 'always'
    | 'none'
    | 'onClick'
    | 'onLongTap';
  /**
   * [descr:Sorting]
   */
  export interface Sorting {
    /**
     * [descr:GridBaseOptions.sorting.ascendingText]
     */
    ascendingText?: string;
    /**
     * [descr:GridBaseOptions.sorting.clearText]
     */
    clearText?: string;
    /**
     * [descr:GridBaseOptions.sorting.descendingText]
     */
    descendingText?: string;
    /**
     * [descr:GridBaseOptions.sorting.mode]
     */
    mode?: SingleMultipleOrNone;
    /**
     * [descr:GridBaseOptions.sorting.showSortIndexes]
     */
    showSortIndexes?: boolean;
  }
  export type StartEditAction = 'click' | 'dblClick';
  export type StateStoreType = 'custom' | 'localStorage' | 'sessionStorage';
  /**
   * [descr:StateStoring]
   */
  export interface StateStoring {
    /**
     * [descr:GridBaseOptions.stateStoring.customLoad]
     */
    customLoad?: () => PromiseLike<any>;
    /**
     * [descr:GridBaseOptions.stateStoring.customSave]
     */
    customSave?: (gridState: any) => any;
    /**
     * [descr:GridBaseOptions.stateStoring.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:GridBaseOptions.stateStoring.savingTimeout]
     */
    savingTimeout?: number;
    /**
     * [descr:GridBaseOptions.stateStoring.storageKey]
     */
    storageKey?: string;
    /**
     * [descr:GridBaseOptions.stateStoring.type]
     */
    type?: StateStoreType;
  }
  export type SummaryType = 'avg' | 'count' | 'custom' | 'max' | 'min' | 'sum';
  /**
   * [descr:ToolbarPreparingInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ToolbarPreparingInfo {
    /**
     * [descr:ToolbarPreparingInfo.toolbarOptions]
     */
    toolbarOptions: ui.dxToolbar.Properties;
  }
}
declare namespace DevExpress.core {
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface ComponentFactory<TComponent> {
    new (
      element: UserDefinedElement,
      options?: Record<string, unknown>
    ): TComponent;
    getInstance(element: UserDefinedElement): TComponent;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface Condition {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface Condition extends JQueryEventObject {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DeepPartial<T> = T extends Scalar
    ? T
    : {
      [P in keyof T]?: DeepPartial<T[P]>;
    };
  /**
   * [descr:DefaultOptionsRule]
   */
  export interface DefaultOptionsRule<T> {
    device?: Device | Device[] | ((device: Device) => boolean);
    options: DeepPartial<T>;
  }
  /**
   * [descr:dxElement]
   * @deprecated [depNote:dxElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxElement = DxElement;
  /**
   * [descr:DxElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DxElement<T extends Element = HTMLElement> = {} extends Condition
    ? T
    : ElementWrapper<T>;
  /**
   * [descr:dxSVGElement]
   * @deprecated [depNote:dxSVGElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxSVGElement = DxElement<SVGElement>;
  /**
   * [descr:dxTemplate]
   */
  export type dxTemplate = Template;
  /**
   * [descr:dxTemplateOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTemplateOptions {
    /**
     * [descr:dxTemplateOptions.name]
     */
    name?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ElementsArrayWrapper<T extends Element> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface ElementsArrayWrapper<T extends Element> extends JQuery<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ElementWrapper<T extends Element> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface ElementWrapper<T extends Element> extends JQuery<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type EventName = 'orientationChanged';
  export type FloatingActionButtonDirection = 'auto' | 'up' | 'down';
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class FunctionTemplate {
    render(template: {
      container: unknown;
      model?: object;
      transclude?: boolean;
    }): DxElement;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type OmitInternal<T> = Omit<T, `${'_' | '$'}${any}`>;

  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PromiseType<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface PromiseType<T> extends JQueryPromise<T> {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type Scalar =
    | undefined
    | null
    | string
    | string
    | number
    | number
    | bigint
    | BigInteger
    | boolean
    | boolean
    | Date
    | Function
    | symbol
    | unknown[];
  /**
   * [descr:template]
   */
  export type template = string | Function | UserDefinedElement;

  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Template {
    constructor(options?: dxTemplateOptions);
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class TemplateManager {
    anonymousTemplateName: string;
    addDefaultTemplates(templates: Record<string, unknown>): void;
  }
  /**
   * [descr:UserDefinedElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type UserDefinedElement<T extends Element = Element> =
    {} extends Condition ? T : ElementWrapper<T> | T;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type UserDefinedElementsArray = {} extends Condition
    ? Element[]
    : ElementsArrayWrapper<Element>;
}
declare namespace DevExpress.core.utils {
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DxExtendedPromise<T> = DxPromise<T> & {
    then<TResult1 = T, TResult2 = never>(
      onFulfilled?:
      | ((
        value: T,
        extraParameters?: any
      ) => TResult1 | PromiseLike<TResult1>)
      | undefined
      | null,
      onRejected?:
      | ((reason: any) => TResult2 | PromiseLike<TResult2>)
      | undefined
      | null
    ): PromiseLike<TResult1 | TResult2>;
  };
  /**
   * [descr:DxPromise]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DxPromise<T = void> = {} extends PromiseType<T>
    ? Promise<T>
    : PromiseType<T>;
}
declare namespace DevExpress.data {
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class AbstractStore<TItem = any, TKey = any> extends Store<
  TItem,
  TKey
  > {
    constructor(options?: AbstractStore.Options<TItem, TKey>);
    /**
     * [descr:Store.load()]
     */
    load(): core.utils.DxExtendedPromise<TItem[]>;

    /**
     * [descr:Store.load(options)]
     */
    load(
      options: LoadOptions<TItem>
    ): core.utils.DxExtendedPromise<TItem[]>;
  }
  namespace AbstractStore {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type EventName =
      | 'loaded'
      | 'loading'
      | 'inserted'
      | 'inserting'
      | 'updated'
      | 'updating'
      | 'push'
      | 'removed'
      | 'removing'
      | 'modified'
      | 'modifying';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type Options<TItem = any, TKey = any> = StoreOptions<TItem, TKey>;
  }
  /**
   * [descr:Utils.applyChanges(data, changes, options)]
   */
  export function applyChanges(
    data: any[],
    changes: any[],
    options?: { keyExpr?: string | string[]; immutable?: boolean }
  ): any[];
  /**
   * [descr:ArrayStore]
   */
  export class ArrayStore<TItem = any, TKey = any> extends AbstractStore<
  TItem,
  TKey
  > {
    constructor(options?: ArrayStore.Options<TItem, TKey>);
    /**
     * [descr:ArrayStore.byKey(key)]
     */
    byKey(key: TKey): core.utils.DxPromise<TItem>;
    /**
     * [descr:ArrayStore.clear()]
     */
    clear(): void;
    /**
     * [descr:ArrayStore.createQuery()]
     */
    createQuery(): Query;
  }
  namespace ArrayStore {
    export type Options<TItem = any, TKey = any> = ArrayStoreOptions<
    TItem,
    TKey
    >;
  }
  /**
   * [descr:ArrayStoreOptions]
   * @deprecated [depNote:ArrayStoreOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ArrayStoreOptions<TItem = any, TKey = any>
    extends AbstractStore.Options<TItem, TKey> {
    /**
     * [descr:ArrayStoreOptions.data]
     */
    data?: TItem[];
  }
  /**
   * [descr:Utils.base64_encode(input)]
   */
  export function base64_encode(input: string | number[]): string;
  /**
   * [descr:CustomStore]
   */
  export class CustomStore<TItem = any, TKey = any> extends Store<TItem, TKey> {
    constructor(options?: CustomStore.Options<TItem, TKey>);
    /**
     * [descr:CustomStore.byKey(key, extraOptions)]
     */
    byKey(
      key: TKey,
      extraOptions?: LoadOptions<TItem>
    ): core.utils.DxPromise<TItem>;
    /**
     * [descr:CustomStore.clearRawDataCache()]
     */
    clearRawDataCache(): void;
    /**
     * [descr:CustomStore.load()]
     */
    load(): core.utils.DxExtendedPromise<
    common.LoadResult<TItem>
    >;
    /**
     * [descr:CustomStore.load(options)]
     */
    load(
      options: LoadOptions<TItem>
    ): core.utils.DxExtendedPromise<
    common.LoadResult<TItem>
    >;
  }
  namespace CustomStore {
    /**
     * @deprecated Use GroupItem from common/data/custom-store instead
     */
    export type GroupItem<TItem = any> = common.GroupItem<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type LoadFunctionResult<T> =
      | T
      | core.utils.DxPromise<T>
      | PromiseLike<T>;
    export type Options<TItem = any, TKey = any> = CustomStoreOptions<
    TItem,
    TKey
    >;
    /**
     * [descr:ResolvedData]
     * @deprecated [depNote:ResolvedData]
     */
    export type ResolvedData<TItem = any> = common.LoadResult<TItem>;
  }
  /**
   * [descr:CustomStoreOptions]
   * @deprecated [depNote:CustomStoreOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CustomStoreOptions<TItem = any, TKey = any>
    extends AbstractStore.Options<TItem, TKey> {
    /**
     * [descr:CustomStoreOptions.byKey]
     */
    byKey?: (
      key: TKey,
      extraOptions?: LoadOptions<TItem>
    ) => PromiseLike<TItem>;
    /**
     * [descr:CustomStoreOptions.cacheRawData]
     */
    cacheRawData?: boolean;
    /**
     * [descr:CustomStoreOptions.insert]
     */
    insert?: (values: TItem) => PromiseLike<TItem>;
    /**
     * [descr:CustomStoreOptions.load]
     */
    load: (
      options: LoadOptions<TItem>
    ) => CustomStore.LoadFunctionResult<
    common.LoadResult<TItem>
    >;
    /**
     * [descr:CustomStoreOptions.loadMode]
     */
    loadMode?: 'processed' | 'raw';
    /**
     * [descr:CustomStoreOptions.remove]
     */
    remove?: (key: TKey) => PromiseLike<void>;
    /**
     * [descr:CustomStoreOptions.totalCount]
     */
    totalCount?: (loadOptions: {
      filter?: FilterDescriptor | FilterDescriptor[];
      group?: GroupDescriptor<TItem> | GroupDescriptor<TItem>[];
    }) => PromiseLike<number>;
    /**
     * [descr:CustomStoreOptions.update]
     */
    update?: (key: TKey, values: TItem) => PromiseLike<any>;
    /**
     * [descr:CustomStoreOptions.useDefaultSearch]
     */
    useDefaultSearch?: boolean;
  }
  /**
   * [descr:DataSource]
   */
  export class DataSource<TItem = any, TKey = any> {
    constructor(data: TItem[]);
    constructor(
      options:
      | CustomStore.Options<TItem, TKey>
      | DataSource.Options<any, any, TItem, TKey>
    );
    constructor(store: utils.Store<TItem, TKey>);
    constructor(url: string);
    /**
     * [descr:DataSource.cancel(operationId)]
     */
    cancel(operationId: number): boolean;
    /**
     * [descr:DataSource.dispose()]
     */
    dispose(): void;
    /**
     * [descr:DataSource.filter()]
     */
    filter(): FilterDescriptor | FilterDescriptor[];
    /**
     * [descr:DataSource.filter(filterExpr)]
     */
    filter(filterExpr: FilterDescriptor | FilterDescriptor[]): void;
    /**
     * [descr:DataSource.group()]
     */
    group(): GroupDescriptor<TItem> | GroupDescriptor<TItem>[];
    /**
     * [descr:DataSource.group(groupExpr)]
     */
    group(
      groupExpr: GroupDescriptor<TItem> | GroupDescriptor<TItem>[]
    ): void;
    /**
     * [descr:DataSource.isLastPage()]
     */
    isLastPage(): boolean;
    /**
     * [descr:DataSource.isLoaded()]
     */
    isLoaded(): boolean;
    /**
     * [descr:DataSource.isLoading()]
     */
    isLoading(): boolean;
    /**
     * [descr:DataSource.items()]
     */
    items(): any[];
    /**
     * [descr:DataSource.key()]
     */
    key(): string | string[];
    /**
     * [descr:DataSource.load()]
     */
    load(): core.utils.DxExtendedPromise<any>;
    /**
     * [descr:DataSource.loadOptions()]
     */
    loadOptions(): LoadOptions<TItem>;
    /**
     * [descr:DataSource.off(eventName)]
     */
    off(eventName: DataSource.EventName): this;
    /**
     * [descr:DataSource.off(eventName, eventHandler)]
     */
    off(
      eventName: DataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:DataSource.on(eventName, eventHandler)]
     */
    on(
      eventName: DataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:DataSource.on(events)]
     */
    on(
      events: { [key in DataSource.EventName]?: Function }
    ): this;
    /**
     * [descr:DataSource.pageIndex()]
     */
    pageIndex(): number;
    /**
     * [descr:DataSource.pageIndex(newIndex)]
     */
    pageIndex(newIndex: number): void;
    /**
     * [descr:DataSource.pageSize()]
     */
    pageSize(): number;
    /**
     * [descr:DataSource.pageSize(value)]
     */
    pageSize(value: number): void;
    /**
     * [descr:DataSource.paginate()]
     */
    paginate(): boolean;
    /**
     * [descr:DataSource.paginate(value)]
     */
    paginate(value: boolean): void;
    /**
     * [descr:DataSource.reload()]
     */
    reload(): core.utils.DxExtendedPromise<any>;
    /**
     * [descr:DataSource.requireTotalCount()]
     */
    requireTotalCount(): boolean;
    /**
     * [descr:DataSource.requireTotalCount(value)]
     */
    requireTotalCount(value: boolean): void;
    /**
     * [descr:DataSource.searchExpr()]
     */
    searchExpr(): string & Function & (string | Function)[];
    /**
     * [descr:DataSource.searchExpr(expr)]
     */
    searchExpr(expr: string | Function | (string | Function)[]): void;
    /**
     * [descr:DataSource.searchOperation()]
     */
    searchOperation(): string;
    /**
     * [descr:DataSource.searchOperation(op)]
     */
    searchOperation(op: string): void;
    /**
     * [descr:DataSource.searchValue()]
     */
    searchValue(): any;
    /**
     * [descr:DataSource.searchValue(value)]
     */
    searchValue(value: any): void;
    /**
     * [descr:DataSource.select()]
     */
    select(): SelectDescriptor<TItem>;
    /**
     * [descr:DataSource.select(expr)]
     */
    select(expr: SelectDescriptor<TItem>): void;
    /**
     * [descr:DataSource.sort()]
     */
    sort(): SortDescriptor<TItem> | SortDescriptor<TItem>[];
    /**
     * [descr:DataSource.sort(sortExpr)]
     */
    sort(sortExpr: SortDescriptor<TItem> | SortDescriptor<TItem>[]): void;
    /**
     * [descr:DataSource.store()]
     */
    store(): utils.Store<TItem, TKey>;
    /**
     * [descr:DataSource.totalCount()]
     */
    totalCount(): number;
  }
  namespace DataSource {
    /**
     * [descr:DataSourceLike]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DataSourceLike<TItem, TKey = any> =
      | string
      | TItem[]
      | utils.Store<TItem, TKey>
      | DataSourceOptionsStub<any, any, TItem>
      | DataSource<TItem, TKey>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface DataSourceOptionsStub<
      TStoreItem = any,
      TMappedItem = TStoreItem,
      TItem = TMappedItem,
    > {
      customQueryParams?: any;
      expand?: string[] | string;
      filter?: FilterDescriptor | FilterDescriptor[];
      group?: GroupDescriptor<TItem> | GroupDescriptor<TItem>[];
      map?: (dataItem: TStoreItem) => TMappedItem;
      onChanged?: (e: { readonly changes?: TMappedItem[] }) => void;
      onLoadError?: (error: { readonly message?: string }) => void;
      onLoadingChanged?: (isLoading: boolean) => void;
      pageSize?: number;
      paginate?: boolean;
      postProcess?: (data: TMappedItem[]) => TItem[];
      pushAggregationTimeout?: number;
      requireTotalCount?: boolean;
      reshapeOnPush?: boolean;
      searchExpr?: string | Function | (string | Function)[];
      searchOperation?: SearchOperation;
      searchValue?: any;
      select?: SelectDescriptor<TItem>;
      sort?: SortDescriptor<TItem> | SortDescriptor<TItem>[];
      store?:
      | TStoreItem[]
      | utils.Store<TStoreItem>
      | utils.StoreOptions<TStoreItem>;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type EventName = 'changed' | 'loadError' | 'loadingChanged';
    export type Options<
      TStoreItem = any,
      TMappedItem = TStoreItem,
      TItem = TMappedItem,
      TKey = any,
    > = DataSourceOptions<TStoreItem, TItem, TMappedItem, TKey>;
  }
  /**
   * [descr:DataSourceOptions]
   * @deprecated [depNote:DataSourceOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DataSourceOptions<
    TStoreItem = any,
    TMappedItem = TStoreItem,
    TItem = TMappedItem,
    TKey = any,
  > {
    /**
     * [descr:DataSourceOptions.customQueryParams]
     */
    customQueryParams?: any;
    /**
     * [descr:DataSourceOptions.expand]
     */
    expand?: string[] | string;
    /**
     * [descr:DataSourceOptions.filter]
     */
    filter?: FilterDescriptor | FilterDescriptor[];
    /**
     * [descr:DataSourceOptions.group]
     */
    group?: GroupDescriptor<TItem> | GroupDescriptor<TItem>[];
    /**
     * [descr:DataSourceOptions.langParams]
     */
    langParams?: LangParams;
    /**
     * [descr:DataSourceOptions.map]
     */
    map?: (dataItem: TStoreItem) => TMappedItem;
    /**
     * [descr:DataSourceOptions.onChanged]
     */
    onChanged?: (e: { readonly changes?: TMappedItem[] }) => void;
    /**
     * [descr:DataSourceOptions.onLoadError]
     */
    onLoadError?: (error: { readonly message?: string }) => void;
    /**
     * [descr:DataSourceOptions.onLoadingChanged]
     */
    onLoadingChanged?: (isLoading: boolean) => void;
    /**
     * [descr:DataSourceOptions.pageSize]
     */
    pageSize?: number;
    /**
     * [descr:DataSourceOptions.paginate]
     */
    paginate?: boolean;
    /**
     * [descr:DataSourceOptions.postProcess]
     */
    postProcess?: (data: TMappedItem[]) => TItem[];
    /**
     * [descr:DataSourceOptions.pushAggregationTimeout]
     */
    pushAggregationTimeout?: number;
    /**
     * [descr:DataSourceOptions.requireTotalCount]
     */
    requireTotalCount?: boolean;
    /**
     * [descr:DataSourceOptions.reshapeOnPush]
     */
    reshapeOnPush?: boolean;
    /**
     * [descr:DataSourceOptions.searchExpr]
     */
    searchExpr?: string | Function | (string | Function)[];
    /**
     * [descr:DataSourceOptions.searchOperation]
     */
    searchOperation?: SearchOperation;
    /**
     * [descr:DataSourceOptions.searchValue]
     */
    searchValue?: any;
    /**
     * [descr:DataSourceOptions.select]
     */
    select?: SelectDescriptor<TItem>;
    /**
     * [descr:DataSourceOptions.sort]
     */
    sort?: SortDescriptor<TItem> | SortDescriptor<TItem>[];
    /**
     * [descr:DataSourceOptions.store]
     */
    store?:
    | TStoreItem[]
    | utils.Store<TStoreItem, TKey>
    | utils.StoreOptions<TStoreItem, TKey>;
  }
  /**
   * [descr:EdmLiteral]
   */
  export class EdmLiteral {
    constructor(value: string);
    /**
     * [descr:EdmLiteral.valueOf()]
     */
    valueOf(): string;
  }
  /**
   * [descr:Utils.errorHandler]
   * @deprecated [depNote:Utils.errorHandler]
   */
  export function errorHandler(e: Error): void;
  /**
   * [descr:FilterDescriptor]
   */
  export type FilterDescriptor = any;
  /**
   * [descr:GroupDescriptor]
   */
  export type GroupDescriptor<T> =
    | KeySelector<T>
    | (OrderingDescriptor<T> & {
      groupInterval?: number | GroupingInterval;
      isExpanded?: boolean;
    });
  export type GroupingInterval =
    | 'year'
    | 'quarter'
    | 'month'
    | 'day'
    | 'dayOfWeek'
    | 'hour'
    | 'minute'
    | 'second';
  /**
   * [descr:Guid]
   */
  export class Guid {
    constructor();
    constructor(value: string);
    /**
     * [descr:Guid.toString()]
     */
    toString(): string;
    /**
     * [descr:Guid.valueOf()]
     */
    valueOf(): string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type KeySelector<T> =
    | string
    | ((source: T) => string | number | Date | Object);
  /**
   * [descr:LangParams]
   */
  export interface LangParams {
    /**
     * [descr:LangParams.locale]
     */
    locale: string;
    /**
     * [descr:LangParams.collatorOptions]
     */
    collatorOptions?: Intl.CollatorOptions;
  }
  /**
   * [descr:LoadOptions]
   */
  export interface LoadOptions<T = any> {
    /**
     * [descr:LoadOptions.customQueryParams]
     */
    customQueryParams?: any;
    /**
     * [descr:LoadOptions.startDate]
     */
    startDate?: Date;
    /**
     * [descr:LoadOptions.endDate]
     */
    endDate?: Date;
    /**
     * [descr:LoadOptions.expand]
     */
    expand?: string[];
    /**
     * [descr:LoadOptions.filter]
     */
    filter?: FilterDescriptor | FilterDescriptor[];
    /**
     * [descr:LoadOptions.group]
     */
    group?: GroupDescriptor<T> | GroupDescriptor<T>[];
    /**
     * [descr:LoadOptions.groupSummary]
     */
    groupSummary?: SummaryDescriptor<T> | SummaryDescriptor<T>[];
    /**
     * [descr:LoadOptions.parentIds]
     */
    parentIds?: any[];
    /**
     * [descr:LoadOptions.requireGroupCount]
     */
    requireGroupCount?: boolean;
    /**
     * [descr:LoadOptions.requireTotalCount]
     */
    requireTotalCount?: boolean;
    /**
     * [descr:LoadOptions.searchExpr]
     */
    searchExpr?: string | Function | (string | Function)[];
    /**
     * [descr:LoadOptions.searchOperation]
     */
    searchOperation?: SearchOperation;
    /**
     * [descr:LoadOptions.searchValue]
     */
    searchValue?: any;
    /**
     * [descr:LoadOptions.select]
     */
    select?: SelectDescriptor<T>;
    /**
     * [descr:LoadOptions.skip]
     */
    skip?: number;
    /**
     * [descr:LoadOptions.sort]
     */
    sort?: SortDescriptor<T> | SortDescriptor<T>[];
    /**
     * [descr:LoadOptions.take]
     */
    take?: number;
    /**
     * [descr:LoadOptions.totalSummary]
     */
    totalSummary?: SummaryDescriptor<T> | SummaryDescriptor<T>[];
    /**
     * [descr:LoadOptions.userData]
     */
    userData?: any;
  }
  /**
   * [descr:LocalStore]
   */
  export class LocalStore<TItem = any, TKey = any> extends ArrayStore<
  TItem,
  TKey
  > {
    constructor(options?: LocalStore.Options<TItem, TKey>);
    /**
     * [descr:LocalStore.clear()]
     */
    clear(): void;
  }
  namespace LocalStore {
    export type Options<TItem = any, TKey = any> = LocalStoreOptions<
    TItem,
    TKey
    >;
  }
  /**
   * [descr:LocalStoreOptions]
   * @deprecated [depNote:LocalStoreOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface LocalStoreOptions<TItem = any, TKey = any>
    extends ArrayStoreOptions<TItem, TKey> {
    /**
     * [descr:LocalStoreOptions.flushInterval]
     */
    flushInterval?: number;
    /**
     * [descr:LocalStoreOptions.immediate]
     */
    immediate?: boolean;
    /**
     * [descr:LocalStoreOptions.name]
     */
    name?: string;
  }
  /**
   * [descr:ODataContext]
   */
  export class ODataContext {
    constructor(options?: ODataContextOptions);
    /**
     * [descr:ODataContext.get(operationName, params)]
     */
    get(
      operationName: string,
      params: any
    ): core.utils.DxPromise<any>;
    /**
     * [descr:ODataContext.invoke(operationName, params, httpMethod)]
     */
    invoke(
      operationName: string,
      params: any,
      httpMethod: ODataContext.HttpMethod
    ): core.utils.DxPromise;
    /**
     * [descr:ODataContext.objectLink(entityAlias, key)]
     */
    objectLink(entityAlias: string, key: any | string | number): any;
  }
  namespace ODataContext {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type HttpMethod = 'GET' | 'POST' | 'PATCH' | 'MERGE';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ODataRequestOptions {
      accepts: any;
      async: boolean;
      contentType: string | boolean;
      data: any;
      dataType: string;
      headers: any;
      jsonp?: boolean;
      method: string;
      timeout: number;
      url: string;
      xhrFields: any;
    }
  }
  /**
   * [descr:ODataContextOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ODataContextOptions {
    /**
     * [descr:ODataContextOptions.beforeSend]
     */
    beforeSend?: (options: {
      url: string;
      async: boolean;
      method: string;
      timeout: number;
      params: any;
      payload: any;
      headers: any;
    }) => void;
    /**
     * [descr:ODataContextOptions.deserializeDates]
     */
    deserializeDates?: boolean;
    /**
     * [descr:ODataContextOptions.entities]
     */
    entities?: any;
    /**
     * [descr:ODataContextOptions.errorHandler]
     */
    errorHandler?: (e: {
      httpStatus: number;
      errorDetails: any;
      requestOptions: ODataContext.ODataRequestOptions;
    }) => void;
    /**
     * [descr:ODataContextOptions.filterToLower]
     */
    filterToLower?: boolean;
    /**
     * [descr:ODataContextOptions.jsonp]
     */
    jsonp?: boolean;
    /**
     * [descr:ODataContextOptions.url]
     */
    url?: string;
    /**
     * [descr:ODataContextOptions.version]
     */
    version?: number;
    /**
     * [descr:ODataContextOptions.withCredentials]
     */
    withCredentials?: boolean;
  }
  /**
   * [descr:ODataStore]
   */
  export class ODataStore<TItem = any, TKey = any> extends AbstractStore<
  TItem,
  TKey
  > {
    constructor(options?: ODataStore.Options<TItem, TKey>);
    /**
     * [descr:ODataStore.byKey(key, extraOptions)]
     */
    byKey(
      key: TKey,
      extraOptions?: {
        expand?: string | string[];
        select?: string | string[];
      }
    ): core.utils.DxPromise<TItem>;
    /**
     * [descr:ODataStore.createQuery(loadOptions)]
     */
    createQuery(loadOptions?: {
      expand?: string | string[];
      requireTotalCount?: boolean;
      customQueryParams?: any;
    }): Query;
  }
  namespace ODataStore {
    export type Options<TItem = any, TKey = any> = ODataStoreOptions<
    TItem,
    TKey
    >;
  }
  /**
   * [descr:ODataStoreOptions]
   * @deprecated [depNote:ODataStoreOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ODataStoreOptions<TItem = any, TKey = any>
    extends AbstractStore.Options<TItem, TKey> {
    /**
     * [descr:ODataStoreOptions.beforeSend]
     */
    beforeSend?: (options: {
      url: string;
      async: boolean;
      method: string;
      timeout: number;
      params: any;
      payload: any;
      headers: any;
    }) => void;
    /**
     * [descr:ODataStoreOptions.deserializeDates]
     */
    deserializeDates?: boolean;
    /**
     * [descr:ODataStoreOptions.errorHandler]
     */
    errorHandler?: (e: {
      httpStatus: number;
      errorDetails: any;
      requestOptions: ODataContext.ODataRequestOptions;
    }) => void;
    /**
     * [descr:ODataStoreOptions.fieldTypes]
     */
    fieldTypes?: any;
    /**
     * [descr:ODataStoreOptions.filterToLower]
     */
    filterToLower?: boolean;
    /**
     * [descr:ODataStoreOptions.jsonp]
     */
    jsonp?: boolean;
    /**
     * [descr:ODataStoreOptions.keyType]
     */
    keyType?:
    | 'String'
    | 'Int32'
    | 'Int64'
    | 'Guid'
    | 'Boolean'
    | 'Single'
    | 'Decimal'
    | any;
    /**
     * [descr:ODataStoreOptions.onLoading]
     */
    onLoading?: (loadOptions: LoadOptions<TItem>) => void;
    /**
     * [descr:ODataStoreOptions.url]
     */
    url?: string;
    /**
     * [descr:ODataStoreOptions.version]
     */
    version?: number;
    /**
     * [descr:ODataStoreOptions.withCredentials]
     */
    withCredentials?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  type OrderingDescriptor<T> = SelectionDescriptor<T> & {
    desc?: boolean;
  };
  /**
   * [descr:PivotGridDataSource]
   */
  export class PivotGridDataSource {
    constructor(options?: PivotGridDataSource.Options);
    /**
     * [descr:PivotGridDataSource.collapseAll(id)]
     */
    collapseAll(id: number | string): void;
    /**
     * [descr:PivotGridDataSource.collapseHeaderItem(area, path)]
     */
    collapseHeaderItem(area: string, path: (string | number | Date)[]): void;
    /**
     * [descr:PivotGridDataSource.createDrillDownDataSource(options)]
     */
    createDrillDownDataSource(options: {
      columnPath?: (string | number | Date)[];
      rowPath?: (string | number | Date)[];
      dataIndex?: number;
      maxRowCount?: number;
      customColumns?: string[];
    }): DataSource;
    /**
     * [descr:PivotGridDataSource.dispose()]
     */
    dispose(): void;
    /**
     * [descr:PivotGridDataSource.expandAll(id)]
     */
    expandAll(id: number | string): void;
    /**
     * [descr:PivotGridDataSource.expandHeaderItem(area, path)]
     */
    expandHeaderItem(area: string, path: any[]): void;
    /**
     * [descr:PivotGridDataSource.field(id)]
     */
    field(id: number | string): any;
    /**
     * [descr:PivotGridDataSource.field(id, options)]
     */
    field(id: number | string, options: any): void;
    /**
     * [descr:PivotGridDataSource.fields()]
     */
    fields(): PivotGridDataSource.Field[];
    /**
     * [descr:PivotGridDataSource.fields(fields)]
     */
    fields(fields: PivotGridDataSource.Field[]): void;
    /**
     * [descr:PivotGridDataSource.filter()]
     */
    filter(): any;
    /**
     * [descr:PivotGridDataSource.filter(filterExpr)]
     */
    filter(filterExpr: any): void;
    /**
     * [descr:PivotGridDataSource.getAreaFields(area, collectGroups)]
     */
    getAreaFields(
      area: string,
      collectGroups: boolean
    ): PivotGridDataSource.Field[];
    /**
     * [descr:PivotGridDataSource.getData()]
     */
    getData(): any;
    /**
     * [descr:PivotGridDataSource.isLoading()]
     */
    isLoading(): boolean;
    /**
     * [descr:PivotGridDataSource.load()]
     */
    load(): core.utils.DxPromise<any>;
    /**
     * [descr:PivotGridDataSource.off(eventName)]
     */
    off(eventName: PivotGridDataSource.EventName): this;
    /**
     * [descr:PivotGridDataSource.off(eventName, eventHandler)]
     */
    off(
      eventName: PivotGridDataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:PivotGridDataSource.on(eventName, eventHandler)]
     */
    on(
      eventName: PivotGridDataSource.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:PivotGridDataSource.on(events)]
     */
    on(
      events: {
        [key in PivotGridDataSource.EventName]?: Function;
      }
    ): this;
    /**
     * [descr:PivotGridDataSource.reload()]
     */
    reload(): core.utils.DxPromise<any>;
    /**
     * [descr:PivotGridDataSource.state()]
     */
    state(): any;
    /**
     * [descr:PivotGridDataSource.state(state)]
     */
    state(state: any): void;
  }
  namespace PivotGridDataSource {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type EventName =
      | 'changed'
      | 'fieldsPrepared'
      | 'loadError'
      | 'loadingChanged';
    export type Options = PivotGridDataSourceOptions;
    export type PivotGridArea = 'column' | 'data' | 'filter' | 'row';
    export type PivotGridDataType = 'date' | 'number' | 'string';
    export type PivotGridGroupInterval =
      | 'day'
      | 'dayOfWeek'
      | 'month'
      | 'quarter'
      | 'year';
    export type PivotGridRunningTotalMode = 'column' | 'row';
    export type PivotGridSortBy = 'displayText' | 'value' | 'none';
    export type PivotGridStoreType = 'array' | 'local' | 'odata' | 'xmla';
    export type PivotGridSummaryDisplayMode =
      | 'absoluteVariation'
      | 'percentOfColumnGrandTotal'
      | 'percentOfColumnTotal'
      | 'percentOfGrandTotal'
      | 'percentOfRowGrandTotal'
      | 'percentOfRowTotal'
      | 'percentVariation';
  }
  /**
   * @deprecated Use Field instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PivotGridDataSourceField {
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowCrossGroupCalculation]
     */
    allowCrossGroupCalculation?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowExpandAll]
     */
    allowExpandAll?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowFiltering]
     */
    allowFiltering?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowSorting]
     */
    allowSorting?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.allowSortingBySummary]
     */
    allowSortingBySummary?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.area]
     */
    area?: PivotGridDataSource.PivotGridArea | undefined;
    /**
     * [descr:PivotGridDataSourceOptions.fields.areaIndex]
     */
    areaIndex?: number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.calculateCustomSummary]
     */
    calculateCustomSummary?: (options: {
      summaryProcess?: string;
      value?: any;
      totalValue?: any;
    }) => void;
    /**
     * [descr:PivotGridDataSourceOptions.fields.calculateSummaryValue]
     */
    calculateSummaryValue?: (
      e: ui.dxPivotGridSummaryCell
    ) => number | null;
    /**
     * [descr:PivotGridDataSourceOptions.fields.caption]
     */
    caption?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.customizeText]
     */
    customizeText?: (cellInfo: {
      value?: string | number | Date;
      valueText?: string;
    }) => string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.dataField]
     */
    dataField?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.dataType]
     */
    dataType?: PivotGridDataSource.PivotGridDataType;
    /**
     * [descr:PivotGridDataSourceOptions.fields.displayFolder]
     */
    displayFolder?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.expanded]
     */
    expanded?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.filterType]
     */
    filterType?: common.grids.FilterType;
    /**
     * [descr:PivotGridDataSourceOptions.fields.filterValues]
     */
    filterValues?: any[];
    /**
     * [descr:PivotGridDataSourceOptions.fields.format]
     */
    format?: ui.Format;
    /**
     * [descr:PivotGridDataSourceOptions.fields.groupIndex]
     */
    groupIndex?: number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.groupInterval]
     */
    groupInterval?:
    | PivotGridDataSource.PivotGridGroupInterval
    | number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.groupName]
     */
    groupName?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.headerFilter]
     */
    headerFilter?: {
      allowSearch?: boolean;
      /**
       * [descr:PivotGridDataSourceOptions.fields.headerFilter.allowSelectAll]
       */
      allowSelectAll?: boolean;
      height?: number;
      /**
       * [descr:PivotGridDataSourceOptions.fields.headerFilter.search]
       */
      search?: common.grids.HeaderFilterSearchConfig;
      width?: number;
    };
    /**
     * [descr:PivotGridDataSourceOptions.fields.isMeasure]
     */
    isMeasure?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.name]
     */
    name?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.runningTotal]
     */
    runningTotal?: PivotGridDataSource.PivotGridRunningTotalMode;
    /**
     * [descr:PivotGridDataSourceOptions.fields.selector]
     */
    selector?: Function;
    /**
     * [descr:PivotGridDataSourceOptions.fields.showGrandTotals]
     */
    showGrandTotals?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.showTotals]
     */
    showTotals?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.showValues]
     */
    showValues?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortBy]
     */
    sortBy?: PivotGridDataSource.PivotGridSortBy;
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortBySummaryField]
     */
    sortBySummaryField?: string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortBySummaryPath]
     */
    sortBySummaryPath?: (number | string)[];
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortOrder]
     */
    sortOrder?: common.SortOrder;
    /**
     * [descr:PivotGridDataSourceOptions.fields.sortingMethod]
     */
    sortingMethod?: (
      a: { value?: string | number; children?: any[] },
      b: { value?: string | number; children?: any[] }
    ) => number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.summaryDisplayMode]
     */
    summaryDisplayMode?: PivotGridDataSource.PivotGridSummaryDisplayMode;
    /**
     * [descr:PivotGridDataSourceOptions.fields.summaryType]
     */
    summaryType?: common.grids.SummaryType | string;
    /**
     * [descr:PivotGridDataSourceOptions.fields.visible]
     */
    visible?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.fields.width]
     */
    width?: number;
    /**
     * [descr:PivotGridDataSourceOptions.fields.wordWrapEnabled]
     */
    wordWrapEnabled?: boolean;
  }
  /**
   * [descr:PivotGridDataSourceOptions]
   * @deprecated [depNote:PivotGridDataSourceOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PivotGridDataSourceOptions {
    /**
     * [descr:PivotGridDataSourceOptions.fields]
     */
    fields?: PivotGridDataSource.Field[];
    /**
     * [descr:PivotGridDataSourceOptions.filter]
     */
    filter?: string | any[] | Function;
    /**
     * [descr:PivotGridDataSourceOptions.onChanged]
     */
    onChanged?: Function;
    /**
     * [descr:PivotGridDataSourceOptions.onFieldsPrepared]
     */
    onFieldsPrepared?: (
      fields: PivotGridDataSource.Field[]
    ) => void;
    /**
     * [descr:PivotGridDataSourceOptions.onLoadError]
     */
    onLoadError?: (error: any) => void;
    /**
     * [descr:PivotGridDataSourceOptions.onLoadingChanged]
     */
    onLoadingChanged?: (isLoading: boolean) => void;
    /**
     * [descr:PivotGridDataSourceOptions.paginate]
     */
    paginate?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.remoteOperations]
     */
    remoteOperations?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.retrieveFields]
     */
    retrieveFields?: boolean;
    /**
     * [descr:PivotGridDataSourceOptions.store]
     */
    store?:
    | utils.Store
    | utils.StoreOptions
    | XmlaStore
    | (XmlaStoreOptions & { type: 'xmla' })
    | {
      /**
           * [descr:PivotGridDataSourceOptions.store.type]
           */
      type?: PivotGridDataSource.PivotGridStoreType;
    }[]
    | {
      /**
           * [descr:PivotGridDataSourceOptions.store.type]
           */
      type?: PivotGridDataSource.PivotGridStoreType;
    };
  }
  /**
   * [descr:Utils.query(array)]
   */
  export function query(array: any[]): Query;
  /**
   * [descr:Utils.query(url, queryOptions)]
   */
  export function query(url: string, queryOptions: any): Query;
  /**
   * [descr:Query]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface Query {
    /**
     * [descr:Query.aggregate(seed, step, finalize)]
     */
    aggregate(
      seed: any,
      step: Function,
      finalize: Function
    ): core.utils.DxPromise<any>;
    /**
     * [descr:Query.aggregate(step)]
     */
    aggregate(step: Function): core.utils.DxPromise<any>;
    /**
     * [descr:Query.avg()]
     */
    avg(): core.utils.DxPromise<number>;
    /**
     * [descr:Query.avg(getter)]
     */
    avg(getter: any): core.utils.DxPromise<number>;
    /**
     * [descr:Query.count()]
     */
    count(): core.utils.DxPromise<number>;
    /**
     * [descr:Query.enumerate()]
     */
    enumerate(): core.utils.DxPromise<any>;
    /**
     * [descr:Query.filter(criteria)]
     */
    filter(criteria: any[]): Query;
    /**
     * [descr:Query.filter(predicate)]
     */
    filter(predicate: Function): Query;
    /**
     * [descr:Query.groupBy(getter)]
     */
    groupBy(getter: any): Query;
    /**
     * [descr:Query.max()]
     */
    max(): core.utils.DxPromise<number | Date>;
    /**
     * [descr:Query.max(getter)]
     */
    max(getter: any): core.utils.DxPromise<number | Date>;
    /**
     * [descr:Query.min()]
     */
    min(): core.utils.DxPromise<number | Date>;
    /**
     * [descr:Query.min(getter)]
     */
    min(getter: any): core.utils.DxPromise<number | Date>;
    /**
     * [descr:Query.select(getter)]
     */
    select(...getters: any[]): Query;
    /**
     * [descr:Query.slice(skip, take)]
     */
    slice(skip: number, take?: number): Query;
    /**
     * [descr:Query.sortBy(getter)]
     */
    sortBy(getter: any): Query;
    /**
     * [descr:Query.sortBy(getter, desc)]
     */
    sortBy(getter: any, desc: boolean): Query;
    /**
     * [descr:Query.sum()]
     */
    sum(): core.utils.DxPromise<number>;
    /**
     * [descr:Query.sum(getter)]
     */
    sum(getter: any): core.utils.DxPromise<number>;
    /**
     * [descr:Query.thenBy(getter)]
     */
    thenBy(getter: any): Query;
    /**
     * [descr:Query.thenBy(getter, desc)]
     */
    thenBy(getter: any, desc: boolean): Query;
    /**
     * [descr:Query.toArray()]
     */
    toArray(): any[];
  }
  export type SearchOperation =
    | '='
    | '<>'
    | '>'
    | '>='
    | '<'
    | '<='
    | 'startswith'
    | 'endswith'
    | 'contains'
    | 'notcontains';
  /**
   * [descr:SelectDescriptor]
   */
  export type SelectDescriptor<T> =
    | string
    | string[]
    | ((source: T) => any);
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface SelectionDescriptor<T> {
    selector: KeySelector<T>;
  }
  /**
   * [descr:Utils.setErrorHandler]
   */
  export function setErrorHandler(handler: (e: Error) => void): void;
  /**
   * [descr:SortDescriptor]
   */
  export type SortDescriptor<T> = KeySelector<T> | OrderingDescriptor<T>;
  /**
   * [descr:Store]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Store<TItem = any, TKey = any> {
    constructor(options?: AbstractStore.Options<TItem, TKey>);
    /**
     * [descr:Store.insert(values)]
     */
    insert(values: TItem): core.utils.DxExtendedPromise<TItem>;
    /**
     * [descr:Store.key()]
     */
    key(): string | string[];
    /**
     * [descr:Store.keyOf(obj)]
     */
    keyOf(obj: TItem): TKey;
    /**
     * [descr:Store.off(eventName)]
     */
    off(eventName: AbstractStore.EventName): this;
    /**
     * [descr:Store.off(eventName, eventHandler)]
     */
    off(
      eventName: AbstractStore.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:Store.on(eventName, eventHandler)]
     */
    on(
      eventName: AbstractStore.EventName,
      eventHandler: Function
    ): this;
    /**
     * [descr:Store.on(events)]
     */
    on(
      events: { [key in AbstractStore.EventName]?: Function }
    ): this;
    /**
     * [descr:Store.push(changes)]
     */
    push(
      changes: {
        type: 'insert' | 'update' | 'remove';
        data?: core.DeepPartial<TItem>;
        key?: TKey;
        index?: number;
      }[]
    ): void;
    /**
     * [descr:Store.remove(key)]
     */
    remove(key: TKey): core.utils.DxPromise;
    /**
     * [descr:Store.totalCount(options)]
     */
    totalCount(obj: {
      filter?: FilterDescriptor | FilterDescriptor[];
      group?: GroupDescriptor<TItem> | GroupDescriptor<TItem>[];
    }): core.utils.DxPromise<number>;
    /**
     * [descr:Store.update(key, values)]
     */
    update(
      key: TKey,
      values: core.DeepPartial<TItem>
    ): core.utils.DxExtendedPromise<TItem>;
  }
  /**
   * [descr:StoreOptions]
   * @deprecated [depNote:StoreOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface StoreOptions<TItem = any, TKey = any> {
    /**
     * [descr:StoreOptions.errorHandler]
     */
    errorHandler?: Function;
    /**
     * [descr:StoreOptions.key]
     */
    key?: string | string[];
    /**
     * [descr:StoreOptions.onInserted]
     */
    onInserted?: (values: TItem, key: TKey) => void;
    /**
     * [descr:StoreOptions.onInserting]
     */
    onInserting?: (values: TItem) => void;
    /**
     * [descr:StoreOptions.onLoaded]
     */
    onLoaded?: (result: TItem[], loadOptions: LoadOptions<TItem>) => void;
    /**
     * [descr:StoreOptions.onLoading]
     */
    onLoading?: (loadOptions: LoadOptions<TItem>) => void;
    /**
     * [descr:StoreOptions.onModified]
     */
    onModified?: Function;
    /**
     * [descr:StoreOptions.onModifying]
     */
    onModifying?: Function;
    /**
     * [descr:StoreOptions.onPush]
     */
    onPush?: (changes: TItem[]) => void;
    /**
     * [descr:StoreOptions.onRemoved]
     */
    onRemoved?: (key: TKey) => void;
    /**
     * [descr:StoreOptions.onRemoving]
     */
    onRemoving?: (key: TKey) => void;
    /**
     * [descr:StoreOptions.onUpdated]
     */
    onUpdated?: (key: TKey, values: TItem) => void;
    /**
     * [descr:StoreOptions.onUpdating]
     */
    onUpdating?: (key: TKey, values: TItem) => void;
  }
  /**
   * [descr:SummaryDescriptor]
   */
  export type SummaryDescriptor<T> =
    | KeySelector<T>
    | (SelectionDescriptor<T> & {
      summaryType?: 'sum' | 'avg' | 'min' | 'max' | 'count';
    });
  /**
   * [descr:XmlaStore]
   */
  export class XmlaStore {
    constructor(options?: XmlaStoreOptions);
  }
  /**
   * [descr:XmlaStoreOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface XmlaStoreOptions {
    /**
     * [descr:XmlaStoreOptions.beforeSend]
     */
    beforeSend?: (options: {
      url?: string;
      method?: string;
      headers?: any;
      xhrFields?: any;
      data?: string;
      dataType?: string;
    }) => void;
    /**
     * [descr:XmlaStoreOptions.catalog]
     */
    catalog?: string;
    /**
     * [descr:XmlaStoreOptions.cube]
     */
    cube?: string;
    /**
     * [descr:XmlaStoreOptions.url]
     */
    url?: string;
  }
}
declare namespace DevExpress.data.PivotGridDataSource {
  /**
   * [descr:PivotGridDataSourceOptions.fields]
   */
  export type Field = PivotGridDataSourceField;
}
declare namespace DevExpress.data.utils {
  /**
   * [descr:Utils.compileGetter(expr)]
   */
  export function compileGetter(expr: string | string[]): Function;
  /**
   * [descr:Utils.compileSetter(expr)]
   */
  export function compileSetter(expr: string | string[]): Function;
  export type Store<TItem = any, TKey = any> =
    | CustomStore<TItem, TKey>
    | ArrayStore<TItem, TKey>
    | LocalStore<TItem, TKey>
    | ODataStore<TItem, TKey>;
  export type StoreOptions<TItem = any, TKey = any> =
    | CustomStore.Options<TItem, TKey>
    | (ArrayStore.Options<TItem, TKey> & { type: 'array' })
    | (LocalStore.Options<TItem, TKey> & { type: 'local' })
    | (ODataStore.Options<TItem, TKey> & { type: 'odata' });
}
declare namespace DevExpress.data.utils.odata {
  /**
   * [descr:Utils.keyConverters]
   */
  export var keyConverters: any;
}
declare namespace DevExpress.events {
  /**
   * [descr:Cancelable]
   */
  export interface Cancelable {
    /**
     * [descr:Cancelable.cancel]
     */
    cancel?: boolean;
  }
  /**
   * [descr:ChangedOptionInfo]
   */
  export interface ChangedOptionInfo {
    /**
     * [descr:ChangedOptionInfo.name]
     */
    readonly name: string;
    /**
     * [descr:ChangedOptionInfo.fullName]
     */
    readonly fullName: string;
    /**
     * [descr:ChangedOptionInfo.value]
     */
    readonly value?: any;
    /**
     * [descr:ChangedOptionInfo.previousValue]
     */
    readonly previousValue?: any;
  }

  /**
   * [descr:DxEvent]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type DxEvent<TNativeEvent = Event> = {} extends EventType
    ? EventObject & TNativeEvent
    : EventType;
  /**
   * [descr:event]
   * @deprecated [depNote:event]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type event = DxEvent;
  /**
   * [descr:EventInfo]
   */
  export interface EventInfo<TComponent> {
    /**
     * [descr:EventInfo.component]
     */
    readonly component: TComponent;
    /**
     * [descr:EventInfo.element]
     */
    readonly element: core.DxElement;
    /**
     * [descr:EventInfo.model]
     */
    readonly model?: any;
  }
  /**
   * [descr:EventObject]
   */
  export interface EventObject {
    /**
     * [descr:EventObject.currentTarget]
     */
    currentTarget: Element;

    /**
     * [descr:EventObject.data]
     */
    data: any;

    /**
     * [descr:EventObject.delegateTarget]
     */
    delegateTarget: Element;

    /**
     * [descr:EventObject.target]
     */
    target: Element;
    /**
     * [descr:EventObject.isDefaultPrevented()]
     */
    isDefaultPrevented(): boolean;
    /**
     * [descr:EventObject.isImmediatePropagationStopped()]
     */
    isImmediatePropagationStopped(): boolean;
    /**
     * [descr:EventObject.isPropagationStopped()]
     */
    isPropagationStopped(): boolean;
    /**
     * [descr:EventObject.preventDefault()]
     */
    preventDefault(): void;
    /**
     * [descr:EventObject.stopImmediatePropagation()]
     */
    stopImmediatePropagation(): void;
    /**
     * [descr:EventObject.stopPropagation()]
     */
    stopPropagation(): void;
  }
  /**
   * [descr:handler(event, extraParameters)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function eventsHandler(event: DxEvent, extraParameters: any): boolean;
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface EventType {}
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface EventType extends JQueryEventObject {
    cancel?: boolean;
  }
  /**
   * [descr:InitializedEventInfo]
   */
  export interface InitializedEventInfo<TComponent> {
    /**
     * [descr:InitializedEventInfo.component]
     */
    readonly component?: TComponent;
    /**
     * [descr:InitializedEventInfo.element]
     */
    readonly element?: core.DxElement;
  }
  /**
   * [descr:ItemInfo]
   */
  export interface ItemInfo<TItemData = any> {
    /**
     * [descr:ItemInfo.itemData]
     */
    readonly itemData?: TItemData;
    /**
     * [descr:ItemInfo.itemElement]
     */
    readonly itemElement: core.DxElement;
    /**
     * [descr:ItemInfo.itemIndex]
     */
    readonly itemIndex: number;
  }
  /**
   * [descr:NativeEventInfo]
   */
  export interface NativeEventInfo<TComponent, TNativeEvent = Event> {
    /**
     * [descr:NativeEventInfo.component]
     */
    readonly component: TComponent;
    /**
     * [descr:NativeEventInfo.element]
     */
    readonly element: core.DxElement;
    /**
     * [descr:NativeEventInfo.model]
     */
    readonly model?: any;
    /**
     * [descr:NativeEventInfo.event]
     */
    readonly event?: DxEvent<TNativeEvent>;
  }
  /**
   * [descr:events.off(element)]
   */
  export function off(element: Element | Element[]): void;
  /**
   * [descr:events.off(element, eventName)]
   */
  export function off(
    element: Element | Element[],
    eventName: string
  ): void;
  /**
   * [descr:events.off(element, eventName, handler)]
   */
  export function off(
    element: Element | Element[],
    eventName: string,
    handler: Function
  ): void;
  /**
   * [descr:events.off(element, eventName, selector)]
   */
  export function off(
    element: Element | Element[],
    eventName: string,
    selector: string
  ): void;
  /**
   * [descr:events.off(element, eventName, selector, handler)]
   */
  export function off(
    element: Element | Element[],
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * [descr:events.on(element, eventName, data, handler)]
   */
  export function on(
    element: Element | Element[],
    eventName: string,
    data: any,
    handler: Function
  ): void;
  /**
   * [descr:events.on(element, eventName, handler)]
   */
  export function on(
    element: Element | Element[],
    eventName: string,
    handler: Function
  ): void;
  /**
   * [descr:events.on(element, eventName, selector, data, handler)]
   */
  export function on(
    element: Element | Element[],
    eventName: string,
    selector: string,
    data: any,
    handler: Function
  ): void;
  /**
   * [descr:events.on(element, eventName, selector, handler)]
   */
  export function on(
    element: Element | Element[],
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * [descr:events.one(element, eventName, data, handler)]
   */
  export function one(
    element: Element | Element[],
    eventName: string,
    data: any,
    handler: Function
  ): void;
  /**
   * [descr:events.one(element, eventName, handler)]
   */
  export function one(
    element: Element | Element[],
    eventName: string,
    handler: Function
  ): void;
  /**
   * [descr:events.one(element, eventName, selector, data, handler)]
   */
  export function one(
    element: Element | Element[],
    eventName: string,
    selector: string,
    data: any,
    handler: Function
  ): void;
  /**
   * [descr:events.one(element, eventName, selector, handler)]
   */
  export function one(
    element: Element | Element[],
    eventName: string,
    selector: string,
    handler: Function
  ): void;
  /**
   * [descr:events.trigger(element, event)]
   */
  export function trigger(
    element: Element | Element[],
    event: string | DxEvent
  ): void;
  /**
   * [descr:events.trigger(element, event, extraParameters)]
   */
  export function trigger(
    element: Element | Element[],
    event: string | DxEvent,
    extraParameters: any
  ): void;
  /**
   * [descr:events.triggerHandler(element, event)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function triggerHandler(
    element: Element | Element[],
    event: string | DxEvent
  ): void;
  /**
   * [descr:events.triggerHandler(element, event, extraParameters)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export function triggerHandler(
    element: Element | Element[],
    event: string | DxEvent,
    extraParameters: any
  ): void;
}
declare namespace DevExpress.excelExporter {
  /**
   * [descr:CellAddress]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CellAddress {
    /**
     * [descr:CellAddress.row]
     */
    row?: number;
    /**
     * [descr:CellAddress.column]
     */
    column?: number;
  }
  /**
   * [descr:CellRange]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CellRange {
    /**
     * [descr:CellRange.from]
     */
    from?: CellAddress;
    /**
     * [descr:CellRange.to]
     */
    to?: CellAddress;
  }
  export type DataGridCell = ExcelDataGridCell;
  /**
   * @deprecated Use DataGridCell instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelDataGridCell {
    /**
     * [descr:ExcelDataGridCell.column]
     */
    column?: ui.dxDataGrid.Column;
    /**
     * [descr:ExcelDataGridCell.data]
     */
    data?: any;
    /**
     * [descr:ExcelDataGridCell.groupIndex]
     */
    groupIndex?: number;
    /**
     * [descr:ExcelDataGridCell.groupSummaryItems]
     */
    groupSummaryItems?: {
      /**
       * [descr:ExcelDataGridCell.groupSummaryItems.name]
       */
      name?: string;
      /**
       * [descr:ExcelDataGridCell.groupSummaryItems.value]
       */
      value?: any;
    }[];
    /**
     * [descr:ExcelDataGridCell.rowType]
     */
    rowType?: string;
    /**
     * [descr:ExcelDataGridCell.totalSummaryItemName]
     */
    totalSummaryItemName?: string;
    /**
     * [descr:ExcelDataGridCell.value]
     */
    value?: any;
  }
  /**
   * [descr:ExcelExportBaseProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelExportBaseProps {
    /**
     * [descr:ExcelExportBaseProps.worksheet]
     */
    worksheet?: object;
    /**
     * [descr:ExcelExportBaseProps.topLeftCell]
     */
    topLeftCell?: CellAddress | string;
    /**
     * [descr:ExcelExportBaseProps.keepColumnWidths]
     */
    keepColumnWidths?: boolean;
    /**
     * [descr:ExcelExportBaseProps.loadPanel]
     */
    loadPanel?: ExportLoadPanel;
    /**
     * [descr:ExcelExportBaseProps.encodeExecutableContent]
     */
    encodeExecutableContent?: boolean;
  }
  /**
   * [descr:ExcelExportDataGridProps]
   */
  export interface ExcelExportDataGridProps extends ExcelExportBaseProps {
    /**
     * [descr:ExcelExportDataGridProps.component]
     */
    component?: ui.dxDataGrid;
    /**
     * [descr:ExcelExportDataGridProps.selectedRowsOnly]
     */
    selectedRowsOnly?: boolean;
    /**
     * [descr:ExcelExportDataGridProps.autoFilterEnabled]
     */
    autoFilterEnabled?: boolean;
    /**
     * [descr:ExcelExportDataGridProps.customizeCell]
     */
    customizeCell?: (options: {
      gridCell?: DataGridCell;
      excelCell?: any;
    }) => void;
  }
  /**
   * [descr:ExcelExportPivotGridProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelExportPivotGridProps extends ExcelExportBaseProps {
    /**
     * [descr:ExcelExportPivotGridProps.component]
     */
    component?: ui.dxPivotGrid;
    /**
     * [descr:ExcelExportPivotGridProps.mergeRowFieldValues]
     */
    mergeRowFieldValues?: boolean;
    /**
     * [descr:ExcelExportPivotGridProps.mergeColumnFieldValues]
     */
    mergeColumnFieldValues?: boolean;
    /**
     * [descr:ExcelExportPivotGridProps.exportFilterFieldHeaders]
     */
    exportFilterFieldHeaders?: boolean;
    /**
     * [descr:ExcelExportPivotGridProps.exportDataFieldHeaders]
     */
    exportDataFieldHeaders?: boolean;
    /**
     * [descr:ExcelExportPivotGridProps.exportColumnFieldHeaders]
     */
    exportColumnFieldHeaders?: boolean;
    /**
     * [descr:ExcelExportPivotGridProps.exportRowFieldHeaders]
     */
    exportRowFieldHeaders?: boolean;
    /**
     * [descr:ExcelExportPivotGridProps.customizeCell]
     */
    customizeCell?: (options: {
      pivotCell?: PivotGridCell;
      excelCell?: any;
    }) => void;
  }
  /**
   * @deprecated Use PivotGridCell instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ExcelPivotGridCell extends ui.dxPivotGrid.Cell {
    /**
     * [descr:ExcelPivotGridCell.area]
     */
    area?: 'column' | 'row' | 'data';
    /**
     * [descr:ExcelPivotGridCell.rowIndex]
     */
    rowIndex?: number;
    /**
     * [descr:ExcelPivotGridCell.columnIndex]
     */
    columnIndex?: number;
    /**
     * [descr:ExcelPivotGridCell.headerType]
     */
    headerType?: 'column' | 'row' | 'data' | 'filter';
  }
  /**
   * [descr:excelExporter.exportDataGrid(options)]
   */
  export function exportDataGrid(
    options: ExcelExportDataGridProps
  ): core.utils.DxPromise<CellRange>;
  /**
   * [descr:excelExporter.exportPivotGrid(options)]
   */
  export function exportPivotGrid(
    options: ExcelExportPivotGridProps
  ): core.utils.DxPromise<CellRange>;
  export type PivotGridCell = ExcelPivotGridCell;
}
declare namespace DevExpress.fileManagement {
  /**
   * [descr:CustomFileSystemProvider]
   */
  export class CustomFileSystemProvider extends FileSystemProviderBase {
    constructor(
      options?: CustomFileSystemProvider.Options
    );
  }
  namespace CustomFileSystemProvider {
    export type Options = CustomFileSystemProviderOptions;
  }
  /**
   * [descr:CustomFileSystemProviderOptions]
   * @deprecated [depNote:CustomFileSystemProviderOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CustomFileSystemProviderOptions
    extends FileSystemProviderBaseOptions<CustomFileSystemProvider> {
    /**
     * [descr:CustomFileSystemProviderOptions.abortFileUpload]
     */
    abortFileUpload?: (
      file: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * [descr:CustomFileSystemProviderOptions.copyItem]
     */
    copyItem?: (
      item: FileSystemItem,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * [descr:CustomFileSystemProviderOptions.createDirectory]
     */
    createDirectory?: (
      parentDirectory: FileSystemItem,
      name: string
    ) => PromiseLike<any> | any;

    /**
     * [descr:CustomFileSystemProviderOptions.deleteItem]
     */
    deleteItem?: (item: FileSystemItem) => PromiseLike<any> | any;

    /**
     * [descr:CustomFileSystemProviderOptions.downloadItems]
     */
    downloadItems?: (items: FileSystemItem[]) => void;

    /**
     * [descr:CustomFileSystemProviderOptions.getItems]
     */
    getItems?: (
      parentDirectory: FileSystemItem
    ) => PromiseLike<any[]> | any[];

    /**
     * [descr:CustomFileSystemProviderOptions.getItemsContent]
     */
    getItemsContent?: (items: FileSystemItem[]) => PromiseLike<any> | any;

    /**
     * [descr:CustomFileSystemProviderOptions.hasSubDirectoriesExpr]
     */
    hasSubDirectoriesExpr?: string | Function;

    /**
     * [descr:CustomFileSystemProviderOptions.moveItem]
     */
    moveItem?: (
      item: FileSystemItem,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;

    /**
     * [descr:CustomFileSystemProviderOptions.renameItem]
     */
    renameItem?: (
      item: FileSystemItem,
      newName: string
    ) => PromiseLike<any> | any;

    /**
     * [descr:CustomFileSystemProviderOptions.uploadFileChunk]
     */
    uploadFileChunk?: (
      file: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ) => PromiseLike<any> | any;
  }
  /**
   * [descr:FileSystemError]
   */
  export class FileSystemError {
    constructor(
      errorCode?: number,
      fileSystemItem?: FileSystemItem,
      errorText?: string
    );
    /**
     * [descr:FileSystemError.fileSystemItem]
     */
    fileSystemItem?: FileSystemItem;

    /**
     * [descr:FileSystemError.errorCode]
     */
    errorCode?: number;

    /**
     * [descr:FileSystemError.errorText]
     */
    errorText?: string;
  }
  /**
   * [descr:FileSystemItem]
   */
  export class FileSystemItem {
    constructor(path: string, isDirectory: boolean, pathKeys?: string[]);

    /**
     * [descr:FileSystemItem.path]
     */
    path: string;

    /**
     * [descr:FileSystemItem.pathKeys]
     */
    pathKeys: string[];

    /**
     * [descr:FileSystemItem.key]
     */
    key: string;

    /**
     * [descr:FileSystemItem.name]
     */
    name: string;

    /**
     * [descr:FileSystemItem.dateModified]
     */
    dateModified: Date;

    /**
     * [descr:FileSystemItem.size]
     */
    size: number;

    /**
     * [descr:FileSystemItem.isDirectory]
     */
    isDirectory: boolean;

    /**
     * [descr:FileSystemItem.hasSubDirectories]
     */
    hasSubDirectories: boolean;

    /**
     * [descr:FileSystemItem.thumbnail]
     */
    thumbnail: string;

    /**
     * [descr:FileSystemItem.dataItem]
     */
    dataItem: any;

    /**
     * [descr:FileSystemItem.getFileExtension()]
     */
    getFileExtension(): string;
  }
  /**
   * [descr:FileSystemProviderBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class FileSystemProviderBase {
    constructor(options?: FileSystemProviderBaseOptions);
    /**
     * [descr:FileSystemProviderBase.getItems()]
     */
    getItems(
      parentDirectory: FileSystemItem
    ): core.utils.DxPromise<FileSystemItem[]>;

    /**
     * [descr:FileSystemProviderBase.renameItem()]
     */
    renameItem(
      item: FileSystemItem,
      newName: string
    ): core.utils.DxPromise<any>;

    /**
     * [descr:FileSystemProviderBase.createDirectory()]
     */
    createDirectory(
      parentDirectory: FileSystemItem,
      name: string
    ): core.utils.DxPromise<any>;

    /**
     * [descr:FileSystemProviderBase.deleteItems()]
     */
    deleteItems(
      items: FileSystemItem[]
    ): core.utils.DxPromise<any>[];

    /**
     * [descr:FileSystemProviderBase.moveItems()]
     */
    moveItems(
      items: FileSystemItem[],
      destinationDirectory: FileSystemItem
    ): core.utils.DxPromise<any>[];

    /**
     * [descr:FileSystemProviderBase.copyItems()]
     */
    copyItems(
      items: FileSystemItem[],
      destinationDirectory: FileSystemItem
    ): core.utils.DxPromise<any>[];

    /**
     * [descr:FileSystemProviderBase.uploadFileChunk()]
     */
    uploadFileChunk(
      fileData: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ): core.utils.DxPromise<any>;

    /**
     * [descr:FileSystemProviderBase.abortFileUpload()]
     */
    abortFileUpload(
      fileData: File,
      uploadInfo: UploadInfo,
      destinationDirectory: FileSystemItem
    ): core.utils.DxPromise<any>;

    /**
     * [descr:FileSystemProviderBase.downloadItems()]
     */
    downloadItems(items: FileSystemItem[]): void;

    /**
     * [descr:FileSystemProviderBase.getItemsContent()]
     */
    getItemsContent(
      items: FileSystemItem[]
    ): core.utils.DxPromise<any>;
  }
  /**
   * [descr:FileSystemProviderBaseOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface FileSystemProviderBaseOptions<T = FileSystemProviderBase> {
    /**
     * [descr:FileSystemProviderBaseOptions.dateModifiedExpr]
     */
    dateModifiedExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.isDirectoryExpr]
     */
    isDirectoryExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.keyExpr]
     */
    keyExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.nameExpr]
     */
    nameExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.sizeExpr]
     */
    sizeExpr?: string | Function;
    /**
     * [descr:FileSystemProviderBaseOptions.thumbnailExpr]
     */
    thumbnailExpr?: string | Function;
  }
  /**
   * [descr:ObjectFileSystemProvider]
   */
  export class ObjectFileSystemProvider extends FileSystemProviderBase {
    constructor(
      options?: ObjectFileSystemProvider.Options
    );
  }
  namespace ObjectFileSystemProvider {
    export type Options = ObjectFileSystemProviderOptions;
  }
  /**
   * [descr:ObjectFileSystemProviderOptions]
   * @deprecated [depNote:ObjectFileSystemProviderOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ObjectFileSystemProviderOptions
    extends FileSystemProviderBaseOptions<ObjectFileSystemProvider> {
    /**
     * [descr:ObjectFileSystemProviderOptions.contentExpr]
     */
    contentExpr?: string | Function;
    /**
     * [descr:ObjectFileSystemProviderOptions.data]
     */
    data?: any[];
    /**
     * [descr:ObjectFileSystemProviderOptions.itemsExpr]
     */
    itemsExpr?: string | Function;
  }
  /**
   * [descr:RemoteFileSystemProvider]
   */
  export class RemoteFileSystemProvider extends FileSystemProviderBase {
    constructor(
      options?: RemoteFileSystemProvider.Options
    );
  }
  namespace RemoteFileSystemProvider {
    export type Options = RemoteFileSystemProviderOptions;
  }
  /**
   * [descr:RemoteFileSystemProviderOptions]
   * @deprecated [depNote:RemoteFileSystemProviderOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface RemoteFileSystemProviderOptions
    extends FileSystemProviderBaseOptions<RemoteFileSystemProvider> {
    /**
     * [descr:RemoteFileSystemProviderOptions.beforeAjaxSend]
     */
    beforeAjaxSend?: (options: {
      headers?: any;
      xhrFields?: any;
      formData?: any;
    }) => void;
    /**
     * [descr:RemoteFileSystemProviderOptions.beforeSubmit]
     */
    beforeSubmit?: (options: { formData?: any }) => void;
    /**
     * [descr:RemoteFileSystemProviderOptions.endpointUrl]
     */
    endpointUrl?: string;
    /**
     * [descr:RemoteFileSystemProviderOptions.hasSubDirectoriesExpr]
     */
    hasSubDirectoriesExpr?: string | Function;
    /**
     * [descr:RemoteFileSystemProviderOptions.requestHeaders]
     */
    requestHeaders?: any;
  }
  /**
   * [descr:UploadInfo]
   */
  export interface UploadInfo {
    /**
     * [descr:UploadInfo.bytesUploaded]
     */
    bytesUploaded: number;

    /**
     * [descr:UploadInfo.chunkCount]
     */
    chunkCount: number;

    /**
     * [descr:UploadInfo.customData]
     */
    customData: any;

    /**
     * [descr:UploadInfo.chunkBlob]
     */
    chunkBlob: Blob;

    /**
     * [descr:UploadInfo.chunkIndex]
     */
    chunkIndex: number;
  }
}
declare namespace DevExpress.localization {
  /**
   * [descr:localization.formatDate(value, format)]
   */
  export function formatDate(value: Date, format: ui.Format): string;
  /**
   * [descr:localization.formatMessage(key, value)]
   */
  export function formatMessage(key: string, ...values: string[]): string;
  /**
   * [descr:localization.formatNumber(value, format)]
   */
  export function formatNumber(
    value: number,
    format: ui.Format
  ): string;
  /**
   * [descr:localization.loadMessages(messages)]
   */
  export function loadMessages(messages: any): void;
  /**
   * [descr:localization.locale()]
   */
  export function locale(): string;
  /**
   * [descr:localization.locale(locale)]
   */
  export function locale(locale: string): void;
  /**
   * [descr:localization.parseDate(text, format)]
   */
  export function parseDate(text: string, format: ui.Format): Date;
  /**
   * [descr:localization.parseNumber(text, format)]
   */
  export function parseNumber(
    text: string,
    format: ui.Format
  ): number;
}
declare namespace DevExpress.pdfExporter {
  /**
   * [descr:PdfCell]
   */
  export interface Cell {
    /**
     * [descr:PdfCell.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:PdfCell.borderColor]
     */
    borderColor?: string;
    /**
     * [descr:PdfCell.borderWidth]
     */
    borderWidth?: number;
    /**
     * [descr:PdfCell.drawLeftBorder]
     */
    drawLeftBorder?: boolean;
    /**
     * [descr:PdfCell.drawTopBorder]
     */
    drawTopBorder?: boolean;
    /**
     * [descr:PdfCell.drawRightBorder]
     */
    drawRightBorder?: boolean;
    /**
     * [descr:PdfCell.drawBottomBorder]
     */
    drawBottomBorder?: boolean;
    /**
     * [descr:PdfCell.font]
     */
    font?: {
      /**
       * [descr:PdfCell.font.size]
       */
      size?: number;
      /**
       * [descr:PdfCell.font.name]
       */
      name?: string;
      /**
       * [descr:PdfCell.font.style]
       */
      style?: 'normal' | 'bold' | 'italic';
    };
    /**
     * [descr:PdfCell.horizontalAlign]
     */
    horizontalAlign?: 'left' | 'center' | 'right';
    /**
     * [descr:PdfCell.padding]
     */
    padding?: {
      /**
       * [descr:PdfCell.padding.top]
       */
      top?: number;
      /**
       * [descr:PdfCell.padding.left]
       */
      left?: number;
      /**
       * [descr:PdfCell.padding.right]
       */
      right?: number;
      /**
       * [descr:PdfCell.padding.bottom]
       */
      bottom?: number;
    };
    /**
     * [descr:PdfCell.text]
     */
    text?: string;
    /**
     * [descr:PdfCell.textColor]
     */
    textColor?: string;
    /**
     * [descr:PdfCell.verticalAlign]
     */
    verticalAlign?: 'top' | 'middle' | 'bottom';
    /**
     * [descr:PdfCell.wordWrapEnabled]
     */
    wordWrapEnabled?: boolean;
  }
  export type DataGridCell = PdfDataGridCell;
  /**
   * [descr:pdfExporter.exportDataGrid(options)]
   */
  export function exportDataGrid(
    options: PdfExportDataGridProps
  ): core.utils.DxPromise;
  /**
   * [descr:pdfExporter.exportGantt(options)]
   */
  export function exportGantt(
    options: PdfExportGanttProps
  ): core.utils.DxPromise<any>;
  /**
   * @deprecated Use DataGridCell instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PdfDataGridCell
    extends excelExporter.DataGridCell {}
  /**
   * [descr:PdfExportDataGridProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PdfExportDataGridProps {
    /**
     * [descr:PdfExportDataGridProps.jsPDFDocument]
     */
    jsPDFDocument?: object;
    /**
     * [descr:PdfExportDataGridProps.component]
     */
    component?: ui.dxDataGrid;
    /**
     * [descr:PdfExportDataGridProps.topLeft]
     */
    topLeft?: {
      /**
       * [descr:PdfExportDataGridProps.topLeft.x]
       */
      x?: number;
      /**
       * [descr:PdfExportDataGridProps.topLeft.y]
       */
      y?: number;
    };
    /**
     * [descr:PdfExportDataGridProps.columnWidths]
     */
    columnWidths?: number[];
    /**
     * [descr:PdfExportDataGridProps.indent]
     */
    indent?: number;
    /**
     * [descr:PdfExportDataGridProps.margin]
     */
    margin?: {
      /**
       * [descr:PdfExportDataGridProps.margin.top]
       */
      top?: number;
      /**
       * [descr:PdfExportDataGridProps.margin.left]
       */
      left?: number;
      /**
       * [descr:PdfExportDataGridProps.margin.right]
       */
      right?: number;
      /**
       * [descr:PdfExportDataGridProps.margin.bottom]
       */
      bottom?: number;
    };
    /**
     * [descr:PdfExportDataGridProps.repeatHeaders]
     */
    repeatHeaders?: boolean;
    /**
     * [descr:PdfExportDataGridProps.selectedRowsOnly]
     */
    selectedRowsOnly?: boolean;
    /**
     * [descr:PdfExportDataGridProps.customDrawCell]
     */
    customDrawCell?: (options: {
      gridCell?: DataGridCell;
      pdfCell?: Cell;
      doc?: any;
      rect?: { x: number; y: number; h: number; w: number };
      cancel?: boolean;
    }) => void;
    /**
     * [descr:PdfExportDataGridProps.customizeCell]
     */
    customizeCell?: (options: {
      gridCell?: DataGridCell;
      pdfCell?: Cell;
    }) => void;
    /**
     * [descr:PdfExportDataGridProps.onRowExporting]
     */
    onRowExporting?: (options: {
      rowCells?: Cell[];
      rowHeight?: number;
    }) => void;
    /**
     * [descr:PdfExportDataGridProps.loadPanel]
     */
    loadPanel?: ExportLoadPanel;
  }
  /**
   * [descr:PdfExportGanttProps]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PdfExportGanttProps {
    /**
     * [descr:PdfExportGanttProps.createDocumentMethod]
     */
    createDocumentMethod?: (options: any) => object;
    /**
     * [descr:PdfExportGanttProps.jsPDFDocument]
     */
    jsPDFDocument?: object;
    /**
     * [descr:PdfExportGanttProps.component]
     */
    component?: ui.dxGantt;
    /**
     * [descr:PdfExportGanttProps.format]
     */
    format?: string | object;
    /**
     * [descr:PdfExportGanttProps.landscape]
     */
    landscape?: boolean;
    /**
     * [descr:PdfExportGanttProps.fileName]
     */
    fileName?: string;
    /**
     * [descr:PdfExportGanttProps.margins]
     */
    margins?: object;
    /**
     * [descr:PdfExportGanttProps.exportMode]
     */
    exportMode?: ui.dxGantt.GanttPdfExportMode;
    /**
     * [descr:PdfExportGanttProps.dateRange]
     */
    dateRange?: ui.dxGantt.GanttPdfExportDateRange | object;
    /**
     * [descr:PdfExportGanttProps.font]
     */
    font?: PdfExportGanttFont;
  }
}
declare namespace DevExpress.ui {
  /**
   * [descr:dxSchedulerAppointment]
   */
  export type Appointment = dxSchedulerAppointment;
  /**
   * [descr:ColCountResponsible]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ColCountResponsible {
    /**
     * [descr:ColCountResponsible.lg]
     */
    lg?: number;
    /**
     * [descr:ColCountResponsible.md]
     */
    md?: number;
    /**
     * [descr:ColCountResponsible.sm]
     */
    sm?: number;
    /**
     * [descr:ColCountResponsible.xs]
     */
    xs?: number;
  }
  /**
   * [descr:CollectionWidget]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class CollectionWidget<
    TProperties extends CollectionWidgetOptions<any, TItem, TKey>,
    TItem extends CollectionWidget.ItemLike = any,
    TKey = any,
  > extends Widget<TProperties> {
    getDataSource(): data.DataSource<TItem, TKey>;
  }
  namespace CollectionWidget {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ItemLike = string | CollectionWidgetItem | any;
    /**
     * [descr:SelectionChangedInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SelectionChangedInfo<TItem extends ItemLike = any> {
      /**
       * [descr:SelectionChangedInfo.addedItems]
       */
      readonly addedItems: TItem[];
      /**
       * [descr:SelectionChangedInfo.removedItems]
       */
      readonly removedItems: TItem[];
    }
  }
  /**
   * [descr:CollectionWidgetItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CollectionWidgetItem {
    /**
     * [descr:CollectionWidgetItem.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:CollectionWidgetItem.html]
     */
    html?: string;
    /**
     * [descr:CollectionWidgetItem.template]
     */
    template?:
    | core.template
    | ((
      itemData: this,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:CollectionWidgetItem.text]
     */
    text?: string;
    /**
     * [descr:CollectionWidgetItem.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:CollectionWidgetOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CollectionWidgetOptions<
    TComponent extends CollectionWidget<any, TItem, TKey> | any,
    TItem extends CollectionWidget.ItemLike = any,
    TKey = any,
  > extends WidgetOptions<TComponent> {
    /**
     * [descr:CollectionWidgetOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:CollectionWidgetOptions.itemHoldTimeout]
     */
    itemHoldTimeout?: number;
    /**
     * [descr:CollectionWidgetOptions.itemTemplate]
     */
    itemTemplate?:
    | core.template
    | ((
      itemData: TItem,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:CollectionWidgetOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:CollectionWidgetOptions.keyExpr]
     */
    keyExpr?: string | Function;
    /**
     * [descr:CollectionWidgetOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:CollectionWidgetOptions.onItemClick]
     */
    onItemClick?:
    | ((
      e: events.NativeEventInfo<
      TComponent,
      MouseEvent | PointerEvent
      > &
      events.ItemInfo<TItem>
    ) => void)
    | string;
    /**
     * [descr:CollectionWidgetOptions.onItemContextMenu]
     */
    onItemContextMenu?: (
      e: events.NativeEventInfo<
      TComponent,
      MouseEvent | PointerEvent | TouchEvent
      > &
      events.ItemInfo<TItem>
    ) => void;
    /**
     * [descr:CollectionWidgetOptions.onItemHold]
     */
    onItemHold?: (
      e: events.NativeEventInfo<
      TComponent,
      MouseEvent | PointerEvent | TouchEvent
      > &
      events.ItemInfo<TItem>
    ) => void;
    /**
     * [descr:CollectionWidgetOptions.onItemRendered]
     */
    onItemRendered?: (
      e: events.EventInfo<TComponent> &
      events.ItemInfo<TItem>
    ) => void;
    /**
     * [descr:CollectionWidgetOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: events.EventInfo<TComponent> &
      CollectionWidget.SelectionChangedInfo<TItem>
    ) => void;
    /**
     * [descr:CollectionWidgetOptions.selectedIndex]
     */
    selectedIndex?: number;
    /**
     * [descr:CollectionWidgetOptions.selectedItem]
     */
    selectedItem?: TItem;
    /**
     * [descr:CollectionWidgetOptions.selectedItemKeys]
     */
    selectedItemKeys?: TKey[];
    /**
     * [descr:CollectionWidgetOptions.selectedItems]
     */
    selectedItems?: TItem[];
  }
  export interface CustomDialogOptions {
    title?: string;
    messageHtml?: string;
    buttons?: dxButtonOptions[];
    showTitle?: boolean;
    message?: string;
    dragEnabled?: boolean;
  }
  /**
   * [descr:DataExpressionMixin]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class DataExpressionMixin {
    constructor(options?: DataExpressionMixinOptions);
    getDataSource(): data.DataSource;
  }
  /**
   * [descr:DataExpressionMixinOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DataExpressionMixinOptions<T = DataExpressionMixin> {
    /**
     * [descr:DataExpressionMixinOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<
    CollectionWidgetItem | any
    > | null;
    /**
     * [descr:DataExpressionMixinOptions.displayExpr]
     */
    displayExpr?: string | ((item: any) => string);
    /**
     * [descr:DataExpressionMixinOptions.itemTemplate]
     */
    itemTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:DataExpressionMixinOptions.items]
     */
    items?: (CollectionWidgetItem | any)[];
    /**
     * [descr:DataExpressionMixinOptions.value]
     */
    value?: any;
    /**
     * [descr:DataExpressionMixinOptions.valueExpr]
     */
    valueExpr?: string | ((item: any) => string | number | boolean);
  }
  /**
   * [descr:DateBoxBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class DateBoxBase<
    TProperties = dxDateBox.Properties,
  > extends dxDropDownEditor<TProperties> {
    /**
     * [descr:DateBoxBase.close()]
     */
    close(): void;
    /**
     * [descr:DateBoxBase.open()]
     */
    open(): void;
  }
  /**
   * [descr:DateBoxBaseOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DateBoxBaseOptions<TComponent>
    extends dxDropDownEditorOptions<TComponent> {
    /**
     * [descr:DateBoxBaseOptions.applyButtonText]
     */
    applyButtonText?: string;
    /**
     * [descr:DateBoxBaseOptions.calendarOptions]
     */
    calendarOptions?: dxCalendarOptions;
    /**
     * [descr:DateBoxBaseOptions.cancelButtonText]
     */
    cancelButtonText?: string;
    /**
     * [descr:DateBoxBaseOptions.dateSerializationFormat]
     */
    dateSerializationFormat?: string;
    /**
     * [descr:DateBoxBaseOptions.displayFormat]
     */
    displayFormat?: Format;
    /**
     * [descr:DateBoxBaseOptions.max]
     */
    max?: Date | number | string;
    /**
     * [descr:DateBoxBaseOptions.min]
     */
    min?: Date | number | string;
    /**
     * [descr:DateBoxBaseOptions.todayButtonText]
     */
    todayButtonText?: string;
    /**
     * [descr:DateBoxBaseOptions.useMaskBehavior]
     */
    useMaskBehavior?: boolean;
    /**
     * [descr:DateBoxBaseOptions.dropDownOptions]
     */
    dropDownOptions?: dxPopup.Properties;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export const DateRangeBoxBase: new (
    element: core.UserDefinedElement,
    options?: dxDateRangeBox.Properties
  ) => Omit<DateBoxBase<dxDateRangeBox.Properties>, 'field'>;
  /**
   * [descr:DraggableBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DraggableBase {}
  /**
   * [descr:DraggableBaseOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface DraggableBaseOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * [descr:DraggableBaseOptions.autoScroll]
     */
    autoScroll?: boolean;
    /**
     * [descr:DraggableBaseOptions.boundary]
     */
    boundary?: string | core.UserDefinedElement;
    /**
     * [descr:DraggableBaseOptions.container]
     */
    container?: string | core.UserDefinedElement;
    /**
     * [descr:DraggableBaseOptions.cursorOffset]
     */
    cursorOffset?:
    | string
    | {
      /**
           * [descr:DraggableBaseOptions.cursorOffset.x]
           */
      x?: number;
      /**
           * [descr:DraggableBaseOptions.cursorOffset.y]
           */
      y?: number;
    };
    /**
     * [descr:DraggableBaseOptions.data]
     */
    data?: any;
    /**
     * [descr:DraggableBaseOptions.dragDirection]
     */
    dragDirection?: common.DragDirection;
    /**
     * [descr:DraggableBaseOptions.group]
     */
    group?: string;
    /**
     * [descr:DraggableBaseOptions.handle]
     */
    handle?: string;
    /**
     * [descr:DraggableBaseOptions.scrollSensitivity]
     */
    scrollSensitivity?: number;
    /**
     * [descr:DraggableBaseOptions.scrollSpeed]
     */
    scrollSpeed?: number;
  }
  /**
   * [descr:dxAccordion]
   */
  export class dxAccordion<
    TItem extends dxAccordion.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<dxAccordionOptions<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxAccordion.collapseItem(index)]
     */
    collapseItem(index: number): core.utils.DxPromise;
    /**
     * [descr:dxAccordion.expandItem(index)]
     */
    expandItem(index: number): core.utils.DxPromise;
    /**
     * [descr:dxAccordion.updateDimensions()]
     */
    updateDimensions(): core.utils.DxPromise;
  }
  namespace dxAccordion {
    /**
     * [descr:_ui_accordion_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxAccordion<TItem, TKey>>;
    /**
     * [descr:_ui_accordion_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxAccordion<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      ItemTitleClickEvent: ItemTitleClickEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_accordion_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxAccordion<TItem, TKey>>;
    /**
     * [descr:_ui_accordion_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxAccordion<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_accordion_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxAccordion<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_accordion_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxAccordion<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    /**
     * [descr:_ui_accordion_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxAccordion<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_accordion_ItemTitleClickEvent]
     */
    export type ItemTitleClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxAccordion<TItem, TKey>,
    MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_accordion_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxAccordion<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxAccordionOptions<TItem, TKey>;
    /**
     * [descr:_ui_accordion_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxAccordion<TItem, TKey>> &
    CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxAccordionItem extends CollectionWidgetItem {
    /**
     * [descr:dxAccordionItem.icon]
     */
    icon?: string;
    /**
     * [descr:dxAccordionItem.title]
     */
    title?: string;
    /**
     * [descr:dxAccordionItem.titleTemplate]
     */
    titleTemplate?:
    | core.template
    | (() => string | core.UserDefinedElement);
  }
  /**
   * [descr:dxAccordionOptions]
   * @deprecated [depNote:dxAccordionOptions]
   */
  export interface dxAccordionOptions<
    TItem extends dxAccordion.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<dxAccordion<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxAccordionOptions.animationDuration]
     */
    animationDuration?: number;
    /**
     * [descr:dxAccordionOptions.collapsible]
     */
    collapsible?: boolean;
    /**
     * [descr:dxAccordionOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxAccordionOptions.deferRendering]
     */
    deferRendering?: boolean;
    /**
     * [descr:dxAccordionOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxAccordionOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxAccordionOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxAccordionOptions.itemTemplate]
     */
    itemTemplate?:
    | core.template
    | ((
      itemData: TItem,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxAccordionOptions.itemTitleTemplate]
     */
    itemTitleTemplate?:
    | core.template
    | ((
      itemData: TItem,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxAccordionOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxAccordionOptions.multiple]
     */
    multiple?: boolean;
    /**
     * [descr:dxAccordionOptions.onItemTitleClick]
     */
    onItemTitleClick?:
    | ((
      e: dxAccordion.ItemTitleClickEvent<TItem, TKey>
    ) => void)
    | string;
    /**
     * [descr:dxAccordionOptions.repaintChangesOnly]
     */
    repaintChangesOnly?: boolean;
    /**
     * [descr:dxAccordionOptions.selectedIndex]
     */
    selectedIndex?: number;
  }
  /**
   * [descr:dxActionSheet]
   */
  export class dxActionSheet<
    TItem extends dxActionSheet.ItemLike<TKey> = any,
    TKey = any,
  > extends CollectionWidget<dxActionSheetOptions<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxActionSheet.hide()]
     */
    hide(): core.utils.DxPromise;
    /**
     * [descr:dxActionSheet.show()]
     */
    show(): core.utils.DxPromise;
    /**
     * [descr:dxActionSheet.toggle(showing)]
     */
    toggle(showing: boolean): core.utils.DxPromise;
  }
  namespace dxActionSheet {
    /**
     * [descr:_ui_action_sheet_CancelClickEvent]
     */
    export type CancelClickEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxActionSheet<TItem, TKey>>;
    /**
     * [descr:_ui_action_sheet_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.EventInfo<dxActionSheet<TItem, TKey>>;
    /**
     * [descr:_ui_action_sheet_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.EventInfo<dxActionSheet<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike<TKey>, TKey> {
      Properties: Properties<TItem, TKey>;
      CancelClickEvent: CancelClickEvent<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_action_sheet_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.InitializedEventInfo<dxActionSheet<TItem, TKey>>;
    /**
     * [descr:_ui_action_sheet_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxActionSheet<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_action_sheet_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxActionSheet<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_action_sheet_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxActionSheet<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike<TKey> = string | Item<TKey> | any;
    /**
     * [descr:_ui_action_sheet_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.EventInfo<dxActionSheet<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_action_sheet_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.EventInfo<dxActionSheet<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = dxActionSheetOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxActionSheetItem<TKey = any> extends CollectionWidgetItem {
    /**
     * [descr:dxActionSheetItem.icon]
     */
    icon?: string;
    /**
     * [descr:dxActionSheetItem.onClick]
     */
    onClick?:
    | ((
      e: events.NativeEventInfo<
      dxActionSheet<this, TKey>,
      MouseEvent | PointerEvent
      >
    ) => void)
    | string;
    /**
     * [descr:dxActionSheetItem.type]
     */
    type?: common.ButtonType;
    /**
     * [descr:dxActionSheetItem.stylingMode]
     */
    stylingMode?: common.ButtonStyle;
  }
  /**
   * [descr:dxActionSheetOptions]
   * @deprecated [depNote:dxActionSheetOptions]
   */
  export interface dxActionSheetOptions<
    TItem extends dxActionSheet.ItemLike<TKey> = any,
    TKey = any,
  > extends CollectionWidgetOptions<dxActionSheet<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxActionSheetOptions.cancelText]
     */
    cancelText?: string;
    /**
     * [descr:dxActionSheetOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxActionSheetOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxActionSheetOptions.onCancelClick]
     */
    onCancelClick?:
    | ((e: dxActionSheet.CancelClickEvent<TItem, TKey>) => void)
    | string;
    /**
     * [descr:dxActionSheetOptions.showCancelButton]
     */
    showCancelButton?: boolean;
    /**
     * [descr:dxActionSheetOptions.showTitle]
     */
    showTitle?: boolean;
    /**
     * [descr:dxActionSheetOptions.target]
     */
    target?: string | core.UserDefinedElement;
    /**
     * [descr:dxActionSheetOptions.title]
     */
    title?: string;
    /**
     * [descr:dxActionSheetOptions.usePopover]
     */
    usePopover?: boolean;
    /**
     * [descr:dxActionSheetOptions.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:dxAutocomplete]
   */
  export class dxAutocomplete extends dxDropDownList<dxAutocompleteOptions> {}
  namespace dxAutocomplete {
    /**
     * [descr:_ui_autocomplete_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxAutocomplete
    >;
    /**
     * [descr:_ui_autocomplete_ClosedEvent]
     */
    export type ClosedEvent = events.EventInfo<dxAutocomplete>;
    /**
     * [descr:_ui_autocomplete_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxAutocomplete>;
    /**
     * [descr:_ui_autocomplete_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxAutocomplete,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_autocomplete_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxAutocomplete,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_autocomplete_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxAutocomplete>;
    export type DropDownButtonTemplateData =
      dxDropDownEditor.DropDownButtonTemplateDataModel;
    /**
     * [descr:_ui_autocomplete_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxAutocomplete,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_autocomplete_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxAutocomplete,
    FocusEvent
    >;
    /**
     * [descr:_ui_autocomplete_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxAutocomplete,
    FocusEvent
    >;
    /**
     * [descr:_ui_autocomplete_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxAutocomplete>;
    /**
     * [descr:_ui_autocomplete_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxAutocomplete,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_autocomplete_ItemClickEvent]
     */
    export type ItemClickEvent = events.NativeEventInfo<
    dxAutocomplete,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo;
    /**
     * [descr:_ui_autocomplete_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxAutocomplete,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxAutocomplete,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_autocomplete_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxAutocomplete,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_autocomplete_OpenedEvent]
     */
    export type OpenedEvent = events.EventInfo<dxAutocomplete>;
    /**
     * [descr:_ui_autocomplete_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxAutocomplete> &
      events.ChangedOptionInfo;
    /**
     * [descr:_ui_autocomplete_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxAutocomplete,
    ClipboardEvent
    >;
    export type Properties = dxAutocompleteOptions;
    /**
     * [descr:_ui_autocomplete_SelectionChangedEvent]
     */
    export type SelectionChangedEvent =
      events.EventInfo<dxAutocomplete> &
      dxDropDownList.SelectionChangedInfo;
    /**
     * [descr:_ui_autocomplete_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxAutocomplete,
    KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxAutocompleteOptions]
   * @deprecated [depNote:dxAutocompleteOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxAutocompleteOptions
    extends dxDropDownListOptions<dxAutocomplete> {
    /**
     * [descr:dxAutocompleteOptions.maxItemCount]
     */
    maxItemCount?: number;
    /**
     * [descr:dxAutocompleteOptions.minSearchLength]
     */
    minSearchLength?: number;
    /**
     * [descr:dxAutocompleteOptions.showDropDownButton]
     */
    showDropDownButton?: boolean;
    /**
     * [descr:dxAutocompleteOptions.value]
     */
    value?: string;

    /**
     * [descr:dxAutocompleteOptions.dropDownOptions]
     */
    dropDownOptions?: dxPopup.Properties;
  }
  /**
   * [descr:dxBox]
   */
  export class dxBox<
    TItem extends dxBox.ItemLike<TKey> = any,
    TKey = any,
  > extends CollectionWidget<dxBoxOptions<TItem, TKey>, TItem, TKey> {}
  namespace dxBox {
    export type BoxDirection = 'col' | 'row';
    /**
     * [descr:_ui_box_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.EventInfo<dxBox<TItem, TKey>>;
    export type CrosswiseDistribution = 'center' | 'end' | 'start' | 'stretch';
    /**
     * [descr:_ui_box_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.EventInfo<dxBox<TItem, TKey>>;
    export type Distribution =
      | 'center'
      | 'end'
      | 'space-around'
      | 'space-between'
      | 'start';
    export interface ExplicitTypes<TItem extends ItemLike<TKey>, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_box_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.InitializedEventInfo<dxBox<TItem, TKey>>;
    /**
     * [descr:_ui_box_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxBox<TItem, TKey>,
    MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_box_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxBox<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_box_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxBox<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike<TKey> = string | Item<TKey> | any;
    /**
     * [descr:_ui_box_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.EventInfo<dxBox<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_box_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = events.EventInfo<dxBox<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike<TKey> = any,
      TKey = any,
    > = dxBoxOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBoxItem<TKey = any> extends CollectionWidgetItem {
    /**
     * [descr:dxBoxItem.baseSize]
     */
    baseSize?: number | common.Mode;
    /**
     * [descr:dxBoxItem.box]
     */
    box?: dxBoxOptions<any, TKey>;
    /**
     * [descr:dxBoxItem.ratio]
     */
    ratio?: number;
    /**
     * [descr:dxBoxItem.shrink]
     */
    shrink?: number;
  }
  /**
   * [descr:dxBoxOptions]
   * @deprecated [depNote:dxBoxOptions]
   */
  export interface dxBoxOptions<
    TItem extends dxBox.ItemLike<TKey> = any,
    TKey = any,
  > extends CollectionWidgetOptions<dxBox<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxBoxOptions.align]
     */
    align?: dxBox.Distribution;
    /**
     * [descr:dxBoxOptions.crossAlign]
     */
    crossAlign?: dxBox.CrosswiseDistribution;
    /**
     * [descr:dxBoxOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxBoxOptions.direction]
     */
    direction?: dxBox.BoxDirection;
    /**
     * [descr:dxBoxOptions.items]
     */
    items?: TItem[];
  }
  /**
   * [descr:dxButton]
   */
  export class dxButton extends Widget<dxButtonOptions> {}
  namespace dxButton {
    /**
     * [descr:_ui_button_ClickEvent]
     */
    export type ClickEvent = events.NativeEventInfo<
    dxButton,
    KeyboardEvent | MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_ui_button_ClickEvent.validationGroup]
       */
      validationGroup?: any;
    };
    /**
     * [descr:_ui_button_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxButton>;
    /**
     * [descr:_ui_button_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxButton>;
    /**
     * [descr:_ui_button_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxButton>;
    /**
     * [descr:_ui_button_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxButton> &
    events.ChangedOptionInfo;
    export type Properties = dxButtonOptions;
    export interface TemplateData {
      readonly text?: string;
      readonly icon?: string;
    }
  }
  /**
   * [descr:dxButtonGroup]
   */
  export class dxButtonGroup extends Widget<dxButtonGroupOptions> {}
  namespace dxButtonGroup {
    /**
     * [descr:_ui_button_group_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxButtonGroup>;
    /**
     * [descr:_ui_button_group_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxButtonGroup>;
    /**
     * [descr:_ui_button_group_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxButtonGroup>;
    /**
     * [descr:_ui_button_group_ItemClickEvent]
     */
    export type ItemClickEvent = events.NativeEventInfo<
    dxButtonGroup,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo;
    /**
     * [descr:_ui_button_group_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxButtonGroup> &
      events.ChangedOptionInfo;
    export type Properties = dxButtonGroupOptions;
    /**
     * [descr:_ui_button_group_SelectionChangedEvent]
     */
    export type SelectionChangedEvent =
      events.EventInfo<dxButtonGroup> &
      CollectionWidget.SelectionChangedInfo;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxButtonGroupItem extends CollectionWidgetItem {
    /**
     * [descr:dxButtonGroupItem.hint]
     */
    hint?: string;
    /**
     * [descr:dxButtonGroupItem.icon]
     */
    icon?: string;
    /**
     * [descr:dxButtonGroupItem.type]
     */
    type?: common.ButtonType;

    /**
     * [descr:dxButtonGroupItem.elementAttr]
     */
    elementAttr?: { [key: string]: any };
  }
  /**
   * [descr:dxButtonGroupOptions]
   * @deprecated [depNote:dxButtonGroupOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxButtonGroupOptions extends WidgetOptions<dxButtonGroup> {
    /**
     * [descr:dxButtonGroupOptions.buttonTemplate]
     */
    buttonTemplate?:
    | core.template
    | ((
      buttonData: any,
      buttonContent: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxButtonGroupOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxButtonGroupOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxButtonGroupOptions.items]
     */
    items?: dxButtonGroup.Item[];
    /**
     * [descr:dxButtonGroupOptions.keyExpr]
     */
    keyExpr?: string | Function;
    /**
     * [descr:dxButtonGroupOptions.onItemClick]
     */
    onItemClick?: (e: dxButtonGroup.ItemClickEvent) => void;
    /**
     * [descr:dxButtonGroupOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxButtonGroup.SelectionChangedEvent
    ) => void;
    /**
     * [descr:dxButtonGroupOptions.selectedItemKeys]
     */
    selectedItemKeys?: any[];
    /**
     * [descr:dxButtonGroupOptions.selectedItems]
     */
    selectedItems?: any[];
    /**
     * [descr:dxButtonGroupOptions.selectionMode]
     */
    selectionMode?: common.SingleMultipleOrNone;
    /**
     * [descr:dxButtonGroupOptions.stylingMode]
     */
    stylingMode?: common.ButtonStyle;
  }
  /**
   * [descr:dxButtonOptions]
   * @deprecated [depNote:dxButtonOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxButtonOptions extends WidgetOptions<dxButton> {
    /**
     * [descr:dxButtonOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxButtonOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxButtonOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxButtonOptions.icon]
     */
    icon?: string;
    /**
     * [descr:dxButtonOptions.onClick]
     */
    onClick?: (e: dxButton.ClickEvent) => void;
    /**
     * [descr:dxButtonOptions.stylingMode]
     */
    stylingMode?: common.ButtonStyle;
    /**
     * [descr:dxButtonOptions.template]
     */
    template?:
    | core.template
    | ((
      data: dxButton.TemplateData,
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxButtonOptions.text]
     */
    text?: string;
    /**
     * [descr:dxButtonOptions.type]
     */
    type?: common.ButtonType;
    /**
     * [descr:dxButtonOptions.useSubmitBehavior]
     */
    useSubmitBehavior?: boolean;
    /**
     * [descr:dxButtonOptions.validationGroup]
     */
    validationGroup?: string;
  }
  /**
   * [descr:dxCalendar]
   */
  export class dxCalendar extends Editor<dxCalendarOptions> {}
  namespace dxCalendar {
    export type CalendarSelectionMode = 'single' | 'multiple' | 'range';
    export type CalendarZoomLevel = 'century' | 'decade' | 'month' | 'year';
    export interface CellTemplateData {
      readonly date: Date;
      readonly view: string;
      readonly text?: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ComponentDisabledDate<T> {
      component: T;
      readonly date: Date;
      readonly view: string;
    }
    export type ContentReadyEvent = events.EventInfo<dxCalendar>;
    /**
     * [descr:DisabledDate]
     */
    export type DisabledDate = ComponentDisabledDate<dxCalendar>;
    /**
     * [descr:_ui_calendar_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxCalendar>;
    /**
     * [descr:_ui_calendar_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxCalendar>;
    /**
     * [descr:_ui_calendar_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxCalendar> &
    events.ChangedOptionInfo;
    export type Properties = dxCalendarOptions;
    /**
     * [descr:_ui_calendar_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxCalendar,
    KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
    Editor.ValueChangedInfo;
    export type WeekNumberRule =
      | 'auto'
      | 'firstDay'
      | 'fullWeek'
      | 'firstFourDays';
  }
  /**
   * [descr:dxCalendarOptions]
   * @deprecated [depNote:dxCalendarOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCalendarOptions extends EditorOptions<dxCalendar> {
    /**
     * [descr:dxCalendarOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxCalendarOptions.cellTemplate]
     */
    cellTemplate?:
    | core.template
    | ((
      itemData: dxCalendar.CellTemplateData,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxCalendarOptions.dateSerializationFormat]
     */
    dateSerializationFormat?: string;
    /**
     * [descr:dxCalendarOptions.disabledDates]
     */
    disabledDates?:
    | Date[]
    | ((data: dxCalendar.DisabledDate) => boolean);
    /**
     * [descr:dxCalendarOptions.firstDayOfWeek]
     */
    firstDayOfWeek?: common.FirstDayOfWeek;
    /**
     * [descr:dxCalendarOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxCalendarOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxCalendarOptions.max]
     */
    max?: Date | number | string;
    /**
     * [descr:dxCalendarOptions.maxZoomLevel]
     */
    maxZoomLevel?: dxCalendar.CalendarZoomLevel;
    /**
     * [descr:dxCalendarOptions.min]
     */
    min?: Date | number | string;
    /**
     * [descr:dxCalendarOptions.minZoomLevel]
     */
    minZoomLevel?: dxCalendar.CalendarZoomLevel;
    /**
     * [descr:dxCalendarOptions.name]
     */
    name?: string;
    /**
     * [descr:dxCalendarOptions.selectionMode]
     */
    selectionMode?: dxCalendar.CalendarSelectionMode;
    /**
     * [descr:dxCalendarOptions.selectWeekOnClick]
     */
    selectWeekOnClick?: boolean;
    /**
     * [descr:dxCalendarOptions.showTodayButton]
     */
    showTodayButton?: boolean;
    /**
     * [descr:dxCalendarOptions.showWeekNumbers]
     */
    showWeekNumbers?: boolean;
    /**
     * [descr:dxCalendarOptions.weekNumberRule]
     */
    weekNumberRule?: dxCalendar.WeekNumberRule;
    /**
     * [descr:dxCalendarOptions.value]
     */
    value?: Date | number | string;
    /**
     * [descr:dxCalendarOptions.values]
     */
    values?: (Date | number | string)[];
    /**
     * [descr:dxCalendarOptions.zoomLevel]
     */
    zoomLevel?: dxCalendar.CalendarZoomLevel;
  }
  /**
   * [descr:dxCheckBox]
   */
  export class dxCheckBox extends Editor<dxCheckBoxOptions> {
    /**
     * [descr:dxCheckBox.blur()]
     */
    blur(): void;
  }
  namespace dxCheckBox {
    /**
     * [descr:_ui_check_box_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxCheckBox>;
    /**
     * [descr:_ui_check_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxCheckBox>;
    /**
     * [descr:_ui_check_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxCheckBox>;
    /**
     * [descr:_ui_check_box_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxCheckBox> &
    events.ChangedOptionInfo;
    export type Properties = dxCheckBoxOptions;
    /**
     * [descr:_ui_check_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxCheckBox,
    KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxCheckBoxOptions]
   * @deprecated [depNote:dxCheckBoxOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCheckBoxOptions extends EditorOptions<dxCheckBox> {
    /**
     * [descr:dxCheckBoxOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxCheckBoxOptions.enableThreeStateBehavior]
     */
    enableThreeStateBehavior?: boolean;
    /**
     * [descr:dxCheckBoxOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxCheckBoxOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxCheckBoxOptions.iconSize]
     */
    iconSize?: number | string;
    /**
     * [descr:dxCheckBoxOptions.name]
     */
    name?: string;
    /**
     * [descr:dxCheckBoxOptions.text]
     */
    text?: string;
    /**
     * [descr:dxCheckBoxOptions.value]
     */
    value?: boolean | null | undefined;
  }
  /**
   * [descr:dxColorBox]
   */
  export class dxColorBox extends dxDropDownEditor<dxColorBoxOptions> {}
  namespace dxColorBox {
    /**
     * [descr:_ui_color_box_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxColorBox
    >;
    /**
     * [descr:_ui_color_box_ClosedEvent]
     */
    export type ClosedEvent = events.EventInfo<dxColorBox>;
    /**
     * [descr:_ui_color_box_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxColorBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_color_box_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxColorBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_color_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxColorBox>;
    export type DropDownButtonTemplateData =
      dxDropDownEditor.DropDownButtonTemplateDataModel;
    /**
     * [descr:_ui_color_box_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxColorBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_color_box_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxColorBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_color_box_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxColorBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_color_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxColorBox>;
    /**
     * [descr:_ui_color_box_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxColorBox,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_color_box_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxColorBox,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxColorBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_color_box_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxColorBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_color_box_OpenedEvent]
     */
    export type OpenedEvent = events.EventInfo<dxColorBox>;
    /**
     * [descr:_ui_color_box_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxColorBox> &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_color_box_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxColorBox,
    ClipboardEvent
    >;
    export type Properties = dxColorBoxOptions;
    /**
     * [descr:_ui_color_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxColorBox,
    KeyboardEvent | MouseEvent | PointerEvent | UIEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxColorBoxOptions]
   * @deprecated [depNote:dxColorBoxOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxColorBoxOptions
    extends dxDropDownEditorOptions<dxColorBox> {
    /**
     * [descr:dxColorBoxOptions.applyButtonText]
     */
    applyButtonText?: string;
    /**
     * [descr:dxColorBoxOptions.applyValueMode]
     */
    applyValueMode?: common.ApplyValueMode;
    /**
     * [descr:dxColorBoxOptions.cancelButtonText]
     */
    cancelButtonText?: string;
    /**
     * [descr:dxColorBoxOptions.editAlphaChannel]
     */
    editAlphaChannel?: boolean;
    /**
     * [descr:dxColorBoxOptions.fieldTemplate]
     */
    fieldTemplate?:
    | core.template
    | ((
      value: string,
      fieldElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxColorBoxOptions.keyStep]
     */
    keyStep?: number;
    /**
     * [descr:dxColorBoxOptions.value]
     */
    value?: string;

    /**
     * [descr:dxColorBoxOptions.dropDownOptions]
     */
    dropDownOptions?: dxPopup.Properties;
  }
  /**
   * [descr:dxContextMenu]
   */
  export class dxContextMenu<TKey = any> extends dxMenuBase<
  dxContextMenuOptions<TKey>,
  dxContextMenuItem,
  TKey
  > {
    /**
     * [descr:dxContextMenu.hide()]
     */
    hide(): core.utils.DxPromise;
    /**
     * [descr:dxContextMenu.show()]
     */
    show(): core.utils.DxPromise;
    /**
     * [descr:dxContextMenu.toggle(showing)]
     */
    toggle(showing: boolean): core.utils.DxPromise;
  }
  namespace dxContextMenu {
    /**
     * [descr:_ui_context_menu_ContentReadyEvent]
     */
    export type ContentReadyEvent<TKey = any> = events.EventInfo<
    dxContextMenu<TKey>
    >;
    export type ContextSubmenuDirection = 'auto' | 'left' | 'right';
    /**
     * [descr:_ui_context_menu_DisposingEvent]
     */
    export type DisposingEvent<TKey = any> = events.EventInfo<
    dxContextMenu<TKey>
    >;
    export interface ExplicitTypes<TKey = any> {
      Properties: Properties<TKey>;
      ContentReadyEvent: ContentReadyEvent<TKey>;
      DisposingEvent: DisposingEvent<TKey>;
      HiddenEvent: HiddenEvent<TKey>;
      HidingEvent: HidingEvent<TKey>;
      InitializedEvent: InitializedEvent<TKey>;
      ItemClickEvent: ItemClickEvent<TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TKey>;
      OptionChangedEvent: OptionChangedEvent<TKey>;
      PositioningEvent: PositioningEvent<TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TKey>;
      ShowingEvent: ShowingEvent<TKey>;
      ShownEvent: ShownEvent<TKey>;
    }
    /**
     * [descr:_ui_context_menu_HiddenEvent]
     */
    export type HiddenEvent<TKey = any> = events.EventInfo<
    dxContextMenu<TKey>
    >;
    /**
     * [descr:_ui_context_menu_HidingEvent]
     */
    export type HidingEvent<TKey = any> = events.Cancelable &
    events.EventInfo<dxContextMenu<TKey>>;
    /**
     * [descr:_ui_context_menu_InitializedEvent]
     */
    export type InitializedEvent<TKey = any> =
      events.InitializedEventInfo<dxContextMenu<TKey>>;
    /**
     * [descr:_ui_context_menu_ItemClickEvent]
     */
    export type ItemClickEvent<TKey = any> = events.NativeEventInfo<
    dxContextMenu<TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<Item>;
    /**
     * [descr:_ui_context_menu_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<TKey = any> =
      events.NativeEventInfo<
      dxContextMenu<TKey>,
      MouseEvent | PointerEvent | TouchEvent
      > &
      events.ItemInfo<Item>;
    /**
     * [descr:_ui_context_menu_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<TKey = any> = events.EventInfo<
    dxContextMenu<TKey>
    > &
    events.ItemInfo<Item>;
    /**
     * [descr:_ui_context_menu_OptionChangedEvent]
     */
    export type OptionChangedEvent<TKey = any> = events.EventInfo<
    dxContextMenu<TKey>
    > &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_context_menu_PositioningEvent]
     */
    export type PositioningEvent<TKey = any> =
      events.NativeEventInfo<
      dxContextMenu<TKey>,
      MouseEvent | PointerEvent | TouchEvent
      > & {
        /**
         * [descr:_ui_context_menu_PositioningEvent.position]
         */
        readonly position: PositionConfig;
      };
    export type Properties<TKey = any> = dxContextMenuOptions<TKey>;
    /**
     * [descr:_ui_context_menu_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<TKey = any> = events.EventInfo<
    dxContextMenu<TKey>
    > &
    CollectionWidget.SelectionChangedInfo<Item>;
    /**
     * [descr:_ui_context_menu_ShowingEvent]
     */
    export type ShowingEvent<TKey = any> = events.Cancelable &
    events.EventInfo<dxContextMenu<TKey>>;
    /**
     * [descr:_ui_context_menu_ShownEvent]
     */
    export type ShownEvent<TKey = any> = events.EventInfo<
    dxContextMenu<TKey>
    >;
  }
  /**
   * @deprecated Use DevExpress.ui.dxContextMenu.Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxContextMenuItem extends dxMenuBaseItem {
    /**
     * [descr:dxContextMenuItem.items]
     */
    items?: dxContextMenu.Item[];
  }
  /**
   * [descr:dxContextMenuOptions]
   * @deprecated [depNote:dxContextMenuOptions]
   */
  export interface dxContextMenuOptions<TKey = any>
    extends dxMenuBaseOptions<dxContextMenu<TKey>, dxContextMenuItem, TKey> {
    /**
     * [descr:dxContextMenuOptions.closeOnOutsideClick]
     * @deprecated [depNote:dxContextMenuOptions.closeOnOutsideClick]
     */
    closeOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxContextMenuOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<
    dxContextMenu.Item,
    TKey
    > | null;
    /**
     * [descr:dxContextMenuOptions.hideOnOutsideClick]
     */
    hideOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxContextMenuOptions.items]
     */
    items?: dxContextMenu.Item[];
    /**
     * [descr:dxContextMenuOptions.onHidden]
     */
    onHidden?: (e: dxContextMenu.HiddenEvent<TKey>) => void;
    /**
     * [descr:dxContextMenuOptions.onHiding]
     */
    onHiding?: (e: dxContextMenu.HidingEvent<TKey>) => void;
    /**
     * [descr:dxContextMenuOptions.onPositioning]
     */
    onPositioning?: (
      e: dxContextMenu.PositioningEvent<TKey>
    ) => void;
    /**
     * [descr:dxContextMenuOptions.onShowing]
     */
    onShowing?: (e: dxContextMenu.ShowingEvent<TKey>) => void;
    /**
     * [descr:dxContextMenuOptions.onShown]
     */
    onShown?: (e: dxContextMenu.ShownEvent<TKey>) => void;
    /**
     * [descr:dxContextMenuOptions.position]
     */
    position?: PositionConfig;
    /**
     * [descr:dxContextMenuOptions.showEvent]
     */
    showEvent?:
    | {
      /**
           * [descr:dxContextMenuOptions.showEvent.delay]
           */
      delay?: number;
      /**
           * [descr:dxContextMenuOptions.showEvent.name]
           */
      name?: string;
    }
    | string;
    /**
     * [descr:dxContextMenuOptions.submenuDirection]
     */
    submenuDirection?: dxContextMenu.ContextSubmenuDirection;
    /**
     * [descr:dxContextMenuOptions.target]
     */
    target?: string | core.UserDefinedElement;
    /**
     * [descr:dxContextMenuOptions.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:dxDataGrid]
   */
  export class dxDataGrid<TRowData = any, TKey = any>
    extends Widget<dxDataGridOptions<TRowData, TKey>>
    implements common.grids.GridBase<TRowData, TKey> {
    /**
     * [descr:dxDataGrid.addColumn(columnOptions)]
     */
    addColumn(
      columnOptions: dxDataGrid.Column<TRowData, TKey> | string
    ): void;
    /**
     * [descr:dxDataGrid.addRow()]
     */
    addRow(): core.utils.DxPromise;
    /**
     * [descr:dxDataGrid.clearGrouping()]
     */
    clearGrouping(): void;
    /**
     * [descr:dxDataGrid.collapseAll(groupIndex)]
     */
    collapseAll(groupIndex?: number): void;
    /**
     * [descr:dxDataGrid.collapseRow(key)]
     */
    collapseRow(key: TKey): core.utils.DxPromise;
    /**
     * [descr:dxDataGrid.expandAll(groupIndex)]
     */
    expandAll(groupIndex?: number): void;
    /**
     * [descr:dxDataGrid.expandRow(key)]
     */
    expandRow(key: TKey): core.utils.DxPromise;
    /**
     * [descr:dxDataGrid.getSelectedRowKeys()]
     */
    getSelectedRowKeys(): TKey[] &
    core.utils.DxPromise<TKey[]>;
    /**
     * [descr:dxDataGrid.getSelectedRowsData()]
     */
    getSelectedRowsData(): TRowData[] &
    core.utils.DxPromise<TRowData[]>;
    /**
     * [descr:dxDataGrid.getTotalSummaryValue(summaryItemName)]
     */
    getTotalSummaryValue(summaryItemName: string): any;
    /**
     * [descr:dxDataGrid.getVisibleColumns()]
     */
    getVisibleColumns(): dxDataGrid.Column<TRowData, TKey>[];
    /**
     * [descr:dxDataGrid.getVisibleColumns(headerLevel)]
     */
    getVisibleColumns(
      headerLevel: number
    ): dxDataGrid.Column<TRowData, TKey>[];
    /**
     * [descr:dxDataGrid.getVisibleRows()]
     */
    getVisibleRows(): dxDataGrid.Row<TRowData, TKey>[];
    /**
     * [descr:dxDataGrid.isRowExpanded(key)]
     */
    isRowExpanded(key: TKey): boolean;
    /**
     * [descr:dxDataGrid.isRowSelected(data)]
     */
    isRowSelected(data: TRowData): boolean;
    isRowSelected(key: TKey): boolean;
    /**
     * [descr:dxDataGrid.totalCount()]
     */
    totalCount(): number;

    beginCustomLoading(messageText: string): void;
    byKey(key: TKey): core.utils.DxPromise<TRowData>;
    cancelEditData(): void;
    cellValue(rowIndex: number, dataField: string): any;
    cellValue(rowIndex: number, dataField: string, value: any): void;
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    clearFilter(): void;
    clearFilter(filterName: string): void;
    clearSelection(): void;
    clearSorting(): void;
    closeEditCell(): void;
    collapseAdaptiveDetailRow(): void;
    columnCount(): number;
    columnOption(id: number | string): any;
    columnOption(id: number | string, optionName: string): any;
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    columnOption(id: number | string, options: any): void;
    deleteColumn(id: number | string): void;
    deleteRow(rowIndex: number): void;
    deselectAll(): core.utils.DxPromise;
    deselectRows(
      keys: TKey[]
    ): core.utils.DxPromise<TRowData[]>;
    editCell(rowIndex: number, dataField: string): void;
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    editRow(rowIndex: number): void;
    endCustomLoading(): void;
    expandAdaptiveDetailRow(key: TKey): void;
    filter(): any;
    filter(filterExpr: any): void;
    focus(): void;
    focus(element: core.UserDefinedElement): void;
    getCellElement(
      rowIndex: number,
      dataField: string
    ): core.DxElement | undefined;
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): core.DxElement | undefined;
    getCombinedFilter(): any;
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): data.DataSource<TRowData, TKey>;
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    getRowElement(
      rowIndex: number
    ): core.UserDefinedElementsArray | undefined;
    getRowIndexByKey(key: TKey): number;
    getScrollable(): common.Scrollable;
    getVisibleColumnIndex(id: number | string): number;
    hasEditData(): boolean;
    hideColumnChooser(): void;
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    isRowFocused(key: TKey): boolean;
    keyOf(obj: TRowData): TKey;
    navigateToRow(key: TKey): core.utils.DxPromise;
    pageCount(): number;
    pageIndex(): number;
    pageIndex(newIndex: number): core.utils.DxPromise;
    pageSize(): number;
    pageSize(value: number): void;
    refresh(): core.utils.DxPromise;
    refresh(changesOnly: boolean): core.utils.DxPromise;
    repaintRows(rowIndexes: number[]): void;
    saveEditData(): core.utils.DxPromise;
    searchByText(text: string): void;
    selectAll(): core.utils.DxPromise;
    selectRows(
      keys: TKey[],
      preserve: boolean
    ): core.utils.DxPromise<TRowData[]>;
    selectRowsByIndexes(
      indexes: number[]
    ): core.utils.DxPromise<TRowData[]>;
    showColumnChooser(): void;
    state(): any;
    state(state: any): void;
    undeleteRow(rowIndex: number): void;
    updateDimensions(): void;
  }
  namespace dxDataGrid {
    /**
     * [descr:_ui_data_grid_AdaptiveDetailRowPreparingEvent]
     */
    export type AdaptiveDetailRowPreparingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.AdaptiveDetailRowPreparingInfo;
    /**
     * [descr:_ui_data_grid_CellClickEvent]
     */
    export type CellClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxDataGrid<TRowData, TKey>,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_data_grid_CellClickEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_data_grid_CellClickEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_data_grid_CellClickEvent.value]
       */
      readonly value?: any;
      /**
       * [descr:_ui_data_grid_CellClickEvent.displayValue]
       */
      readonly displayValue?: any;
      /**
       * [descr:_ui_data_grid_CellClickEvent.text]
       */
      readonly text: string;
      /**
       * [descr:_ui_data_grid_CellClickEvent.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:_ui_data_grid_CellClickEvent.column]
       */
      readonly column: Column<TRowData, TKey>;
      /**
       * [descr:_ui_data_grid_CellClickEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_CellClickEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_data_grid_CellClickEvent.cellElement]
       */
      readonly cellElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_CellClickEvent.row]
       */
      readonly row: Row<TRowData, TKey>;
    };
    /**
     * [descr:_ui_data_grid_CellDblClickEvent]
     */
    export type CellDblClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxDataGrid<TRowData, TKey>,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.value]
       */
      readonly value?: any;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.displayValue]
       */
      readonly displayValue?: any;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.text]
       */
      readonly text: string;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.column]
       */
      readonly column: Column<TRowData, TKey>;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.cellElement]
       */
      readonly cellElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_CellDblClickEvent.row]
       */
      readonly row: Row<TRowData, TKey>;
    };
    /**
     * [descr:_ui_data_grid_CellHoverChangedEvent]
     */
    export type CellHoverChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.eventType]
       */
      readonly eventType: string;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.value]
       */
      readonly value?: any;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.text]
       */
      readonly text: string;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.displayValue]
       */
      readonly displayValue?: any;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.column]
       */
      readonly column: Column<TRowData, TKey>;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.cellElement]
       */
      readonly cellElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_CellHoverChangedEvent.row]
       */
      readonly row: Row<TRowData, TKey>;
    };
    /**
     * [descr:_ui_data_grid_CellPreparedEvent]
     */
    export type CellPreparedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.value]
       */
      readonly value?: any;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.displayValue]
       */
      readonly displayValue?: any;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.text]
       */
      readonly text: string;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.column]
       */
      readonly column: Column<TRowData, TKey>;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.row]
       */
      readonly row: Row<TRowData, TKey>;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.cellElement]
       */
      readonly cellElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.watch]
       */
      readonly watch?: Function;
      /**
       * [descr:_ui_data_grid_CellPreparedEvent.oldValue]
       */
      readonly oldValue?: any;
    };
    export type Column<TRowData = any, TKey = any> = dxDataGridColumn<
    TRowData,
    TKey
    >;
    /**
     * @deprecated Use Column instead
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ColumnBase<TRowData = any> =
      common.grids.ColumnBase<TRowData>;
    export type ColumnButton<
      TRowData = any,
      TKey = any,
    > = dxDataGridColumnButton<TRowData, TKey>;
    /**
     * @deprecated Use ColumnButton instead
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ColumnButtonBase = common.grids.ColumnButtonBase;
    export type ColumnButtonClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxDataGrid<TRowData, TKey>,
    PointerEvent | MouseEvent
    > & {
      row?: Row<TRowData, TKey>;
      column?: Column<TRowData, TKey>;
    };
    export interface ColumnButtonTemplateData<TRowData = any, TKey = any> {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly data?: TRowData;
      readonly key?: TKey;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly row: Row<TRowData, TKey>;
    }
    export interface ColumnCellTemplateData<TRowData = any, TKey = any> {
      readonly data?: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly oldValue?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    }
    export interface ColumnEditCellTemplateData<TRowData = any, TKey = any> {
      readonly setValue?: any;
      readonly data?: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    }
    export interface ColumnGroupCellTemplateData<TRowData = any, TKey = any> {
      readonly data?: GroupData<TRowData>;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly value?: any;
      readonly text: string;
      readonly displayValue?: any;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<GroupData<TRowData>, GroupKey>;
      readonly summaryItems: any[];
      readonly groupContinuesMessage?: string;
      readonly groupContinuedMessage?: string;
    }
    export interface ColumnHeaderCellTemplateData<TRowData = any, TKey = any> {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
    }
    /**
     * [descr:_ui_data_grid_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>>;
    /**
     * [descr:_ui_data_grid_ContextMenuPreparingEvent]
     */
    export type ContextMenuPreparingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
       * [descr:_ui_data_grid_ContextMenuPreparingEvent.items]
       */
      items?: any[];
      /**
       * [descr:_ui_data_grid_ContextMenuPreparingEvent.target]
       */
      readonly target: string;
      /**
       * [descr:_ui_data_grid_ContextMenuPreparingEvent.targetElement]
       */
      readonly targetElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_ContextMenuPreparingEvent.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:_ui_data_grid_ContextMenuPreparingEvent.column]
       */
      readonly column?: Column<TRowData, TKey>;
      /**
       * [descr:_ui_data_grid_ContextMenuPreparingEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_ContextMenuPreparingEvent.row]
       */
      readonly row?: Row<TRowData, TKey>;
    };
    export interface CustomSummaryInfo<TRowData = any, TKey = any> {
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly name?: string;
      readonly summaryProcess: string;
      readonly value?: any;
      totalValue?: any;
      readonly groupIndex?: number;
    }
    /**
     * [descr:_ui_data_grid_DataErrorOccurredEvent]
     */
    export type DataErrorOccurredEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.DataErrorOccurredInfo;
    export type DataGridCommandColumnType =
      | 'adaptive'
      | 'buttons'
      | 'detailExpand'
      | 'groupExpand'
      | 'selection'
      | 'drag';
    export type DataGridExportFormat = 'pdf' | 'xlsx';
    export type DataGridPredefinedColumnButton =
      | 'cancel'
      | 'delete'
      | 'edit'
      | 'save'
      | 'undelete';
    export type DataGridPredefinedToolbarItem =
      | 'addRowButton'
      | 'applyFilterButton'
      | 'columnChooserButton'
      | 'exportButton'
      | 'groupPanel'
      | 'revertButton'
      | 'saveButton'
      | 'searchPanel';
    export type DataGridScrollMode = 'infinite' | 'standard' | 'virtual';
    export interface DataRowTemplateData<TRowData = any, TKey = any> {
      readonly key: TKey;
      readonly data: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly values: any[];
      readonly rowIndex: number;
      readonly columns: Column<TRowData, TKey>[];
      readonly isSelected?: boolean;
      readonly isExpanded?: boolean;
    }
    /**
     * [descr:_ui_data_grid_DisposingEvent]
     */
    export type DisposingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxDataGridToolbar = Toolbar;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxDataGridToolbarItem = ToolbarItem;
    /**
     * [descr:_ui_data_grid_EditCanceledEvent]
     */
    export type EditCanceledEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.DataChangeInfo<TRowData, TKey>;
    /**
     * [descr:_ui_data_grid_EditCancelingEvent]
     */
    export type EditCancelingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.DataChangeInfo<TRowData, TKey>;
    /**
     * [descr:dxDataGridEditing]
     */
    export type Editing<TRowData = any, TKey = any> = EditingBase<
    TRowData,
    TKey
    > & {
      /**
       * [descr:dxDataGridOptions.editing.allowAdding]
       */
      allowAdding?: boolean;
      /**
       * [descr:dxDataGridOptions.editing.allowDeleting]
       */
      allowDeleting?:
      | boolean
      | ((options: {
        component?: dxDataGrid<TRowData, TKey>;
        row?: Row<TRowData, TKey>;
      }) => boolean);
      /**
       * [descr:dxDataGridOptions.editing.allowUpdating]
       */
      allowUpdating?:
      | boolean
      | ((options: {
        component?: dxDataGrid<TRowData, TKey>;
        row?: Row<TRowData, TKey>;
      }) => boolean);
      /**
       * [descr:dxDataGridOptions.editing.texts]
       */
      texts?: any;
      /**
       * [descr:dxDataGridOptions.editing.newRowPosition]
       */
      newRowPosition?: common.grids.NewRowPosition;
    };
    /**
     * @deprecated Use Editing instead
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type EditingBase<
      TRowData = any,
      TKey = any,
    > = common.grids.EditingBase<TRowData, TKey>;
    /**
     * [descr:_ui_data_grid_EditingStartEvent]
     */
    export type EditingStartEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
         * [descr:_ui_data_grid_EditingStartEvent.data]
         */
      readonly data: TRowData;
      /**
         * [descr:_ui_data_grid_EditingStartEvent.key]
         */
      readonly key: TKey;
      /**
         * [descr:_ui_data_grid_EditingStartEvent.column]
         */
      readonly column?: Column<TRowData, TKey>;
    };
    export type EditingTexts = common.grids.EditingTextsBase;
    /**
     * [descr:_ui_data_grid_EditorPreparedEvent]
     */
    export type EditorPreparedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.parentType]
       */
      readonly parentType: string;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.value]
       */
      readonly value?: any;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.setValue]
       */
      readonly setValue?: any;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.updateValueTimeout]
       */
      readonly updateValueTimeout?: number;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.width]
       */
      readonly width?: number;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.disabled]
       */
      readonly disabled: boolean;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.rtlEnabled]
       */
      readonly rtlEnabled: boolean;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.editorElement]
       */
      readonly editorElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.readOnly]
       */
      readonly readOnly: boolean;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.dataField]
       */
      readonly dataField?: string;
      /**
       * [descr:_ui_data_grid_EditorPreparedEvent.row]
       */
      readonly row?: Row<TRowData, TKey>;
    };
    /**
     * [descr:_ui_data_grid_EditorPreparingEvent]
     */
    export type EditorPreparingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.parentType]
       */
      readonly parentType: string;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.value]
       */
      readonly value?: any;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.setValue]
       */
      readonly setValue?: any;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.updateValueTimeout]
       */
      readonly updateValueTimeout?: number;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.width]
       */
      readonly width?: number;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.disabled]
       */
      readonly disabled: boolean;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.rtlEnabled]
       */
      readonly rtlEnabled: boolean;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.cancel]
       */
      cancel: boolean;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.editorElement]
       */
      readonly editorElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.readOnly]
       */
      readonly readOnly: boolean;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.editorName]
       */
      editorName: string;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.editorOptions]
       */
      editorOptions: any;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.dataField]
       */
      readonly dataField?: string;
      /**
       * [descr:_ui_data_grid_EditorPreparingEvent.row]
       */
      readonly row?: Row<TRowData, TKey>;
    };
    export interface ExplicitTypes<TRowData, TKey> {
      AdaptiveDetailRowPreparingEvent: AdaptiveDetailRowPreparingEvent<
      TRowData,
      TKey
      >;
      CellClickEvent: CellClickEvent<TRowData, TKey>;
      CellDblClickEvent: CellDblClickEvent<TRowData, TKey>;
      CellHoverChangedEvent: CellHoverChangedEvent<TRowData, TKey>;
      CellPreparedEvent: CellPreparedEvent<TRowData, TKey>;
      Column: Column<TRowData, TKey>;
      ColumnButton: ColumnButton<TRowData, TKey>;
      ColumnButtonClickEvent: ColumnButtonClickEvent<TRowData, TKey>;
      ColumnButtonTemplateData: ColumnButtonTemplateData<TRowData, TKey>;
      ColumnCellTemplateData: ColumnCellTemplateData<TRowData, TKey>;
      ColumnEditCellTemplateData: ColumnEditCellTemplateData<TRowData, TKey>;
      ColumnGroupCellTemplateData: ColumnGroupCellTemplateData<TRowData, TKey>;
      ColumnHeaderCellTemplateData: ColumnHeaderCellTemplateData<
      TRowData,
      TKey
      >;
      ContentReadyEvent: ContentReadyEvent<TRowData, TKey>;
      ContextMenuPreparingEvent: ContextMenuPreparingEvent<TRowData, TKey>;
      CustomSummaryInfo: CustomSummaryInfo<TRowData, TKey>;
      DataErrorOccurredEvent: DataErrorOccurredEvent<TRowData, TKey>;
      DataRowTemplateData: DataRowTemplateData<TRowData, TKey>;
      DisposingEvent: DisposingEvent<TRowData, TKey>;
      EditCanceledEvent: EditCanceledEvent<TRowData, TKey>;
      EditCancelingEvent: EditCancelingEvent<TRowData, TKey>;
      Editing: Editing<TRowData, TKey>;
      EditingStartEvent: EditingStartEvent<TRowData, TKey>;
      EditorPreparedEvent: EditorPreparedEvent<TRowData, TKey>;
      EditorPreparingEvent: EditorPreparingEvent<TRowData, TKey>;
      Export: Export;
      ExportingEvent: ExportingEvent<TRowData, TKey>;
      ExportTexts: ExportTexts;
      FocusedCellChangedEvent: FocusedCellChangedEvent<TRowData, TKey>;
      FocusedCellChangingEvent: FocusedCellChangingEvent<TRowData, TKey>;
      FocusedRowChangedEvent: FocusedRowChangedEvent<TRowData, TKey>;
      FocusedRowChangingEvent: FocusedRowChangingEvent<TRowData, TKey>;
      GroupData: GroupData<TRowData>;
      Grouping: Grouping;
      GroupingTexts: GroupingTexts;
      GroupPanel: GroupPanel;
      InitializedEvent: InitializedEvent<TRowData, TKey>;
      InitNewRowEvent: InitNewRowEvent<TRowData, TKey>;
      KeyDownEvent: KeyDownEvent<TRowData, TKey>;
      MasterDetail: MasterDetail<TRowData, TKey>;
      MasterDetailTemplateData: MasterDetailTemplateData<TRowData, TKey>;
      OptionChangedEvent: OptionChangedEvent<TRowData, TKey>;
      Properties: Properties<TRowData, TKey>;
      Row: Row<TRowData, TKey>;
      RowClickEvent: RowClickEvent<TRowData, TKey>;
      RowCollapsedEvent: RowCollapsedEvent<TRowData, TKey>;
      RowCollapsingEvent: RowCollapsingEvent<TRowData, TKey>;
      RowDblClickEvent: RowDblClickEvent<TRowData, TKey>;
      RowDraggingAddEvent: RowDraggingAddEvent<TRowData, TKey>;
      RowDraggingChangeEvent: RowDraggingChangeEvent<TRowData, TKey>;
      RowDraggingEndEvent: RowDraggingEndEvent<TRowData, TKey>;
      RowDraggingMoveEvent: RowDraggingMoveEvent<TRowData, TKey>;
      RowDraggingRemoveEvent: RowDraggingRemoveEvent<TRowData, TKey>;
      RowDraggingReorderEvent: RowDraggingReorderEvent<TRowData, TKey>;
      RowDraggingStartEvent: RowDraggingStartEvent<TRowData, TKey>;
      RowDraggingTemplateData: common.grids.RowDraggingTemplateData<TRowData>;
      RowExpandedEvent: RowExpandedEvent<TRowData, TKey>;
      RowExpandingEvent: RowExpandingEvent<TRowData, TKey>;
      RowInsertedEvent: RowInsertedEvent<TRowData, TKey>;
      RowInsertingEvent: RowInsertingEvent<TRowData, TKey>;
      RowPreparedEvent: RowPreparedEvent<TRowData, TKey>;
      RowRemovedEvent: RowRemovedEvent<TRowData, TKey>;
      RowRemovingEvent: RowRemovingEvent<TRowData, TKey>;
      RowTemplateData: RowTemplateData<TRowData, TKey>;
      RowUpdatedEvent: RowUpdatedEvent<TRowData, TKey>;
      RowUpdatingEvent: RowUpdatingEvent<TRowData, TKey>;
      RowValidatingEvent: RowValidatingEvent<TRowData, TKey>;
      SavedEvent: SavedEvent<TRowData, TKey>;
      SavingEvent: SavingEvent<TRowData, TKey>;
      Scrolling: Scrolling;
      Selection: Selection;
      SelectionChangedEvent: SelectionChangedEvent<TRowData, TKey>;
      Summary: Summary<TRowData, TKey>;
      SummaryGroupItem: SummaryGroupItem;
      SummaryItemTextInfo: SummaryItemTextInfo;
      SummaryTexts: SummaryTexts;
      SummaryTotalItem: SummaryTotalItem;
      Toolbar: Toolbar;
      ToolbarItem: ToolbarItem;
      ToolbarPreparingEvent: ToolbarPreparingEvent<TRowData, TKey>;
    }
    /**
     * [descr:Export]
     */
    export interface Export {
      /**
       * [descr:dxDataGridOptions.export.allowExportSelectedData]
       */
      allowExportSelectedData?: boolean;
      /**
       * [descr:dxDataGridOptions.export.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxDataGridOptions.export.formats]
       */
      formats?: ('xlsx' | 'pdf' | string)[];
      /**
       * [descr:dxDataGridOptions.export.texts]
       */
      texts?: ExportTexts;
    }
    /**
     * [descr:_ui_data_grid_ExportingEvent]
     */
    export type ExportingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
         * [descr:_ui_data_grid_ExportingEvent.fileName]
         */
      fileName?: string;
      /**
         * [descr:_ui_data_grid_ExportingEvent.selectedRowsOnly]
         */
      selectedRowsOnly: boolean;
      /**
         * [descr:_ui_data_grid_ExportingEvent.format]
         */
      format: DataGridExportFormat | string;
    };
    /**
     * [descr:ExportTexts]
     */
    export interface ExportTexts {
      /**
       * [descr:dxDataGridOptions.export.texts.exportAll]
       */
      exportAll?: string;
      /**
       * [descr:dxDataGridOptions.export.texts.exportSelectedRows]
       */
      exportSelectedRows?: string;
      /**
       * [descr:dxDataGridOptions.export.texts.exportTo]
       */
      exportTo?: string;
    }
    export type FilterPanel<
      TRowData = any,
      TKey = any,
    > = common.grids.FilterPanel<dxDataGrid, TRowData, TKey>;
    export type FilterPanelCustomizeTextArg =
      common.grids.FilterPanelCustomizeTextArg<dxDataGrid>;
    /**
     * [descr:_ui_data_grid_FocusedCellChangedEvent]
     */
    export type FocusedCellChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
       * [descr:_ui_data_grid_FocusedCellChangedEvent.cellElement]
       */
      readonly cellElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_FocusedCellChangedEvent.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:_ui_data_grid_FocusedCellChangedEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_FocusedCellChangedEvent.row]
       */
      readonly row?: Row<TRowData, TKey>;
      /**
       * [descr:_ui_data_grid_FocusedCellChangedEvent.column]
       */
      readonly column?: Column<TRowData, TKey>;
    };
    /**
     * [descr:_ui_data_grid_FocusedCellChangingEvent]
     */
    export type FocusedCellChangingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.NativeEventInfo<
    dxDataGrid<TRowData, TKey>,
    KeyboardEvent | PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_data_grid_FocusedCellChangingEvent.cellElement]
         */
      readonly cellElement: core.DxElement;
      /**
         * [descr:_ui_data_grid_FocusedCellChangingEvent.prevColumnIndex]
         */
      readonly prevColumnIndex: number;
      /**
         * [descr:_ui_data_grid_FocusedCellChangingEvent.prevRowIndex]
         */
      readonly prevRowIndex: number;
      /**
         * [descr:_ui_data_grid_FocusedCellChangingEvent.newColumnIndex]
         */
      newColumnIndex: number;
      /**
         * [descr:_ui_data_grid_FocusedCellChangingEvent.newRowIndex]
         */
      newRowIndex: number;
      /**
         * [descr:_ui_data_grid_FocusedCellChangingEvent.rows]
         */
      readonly rows: Row<TRowData, TKey>[];
      /**
         * [descr:_ui_data_grid_FocusedCellChangingEvent.columns]
         */
      readonly columns: Column<TRowData, TKey>[];
      /**
         * [descr:_ui_data_grid_FocusedCellChangingEvent.isHighlighted]
         */
      isHighlighted: boolean;
    };
    /**
     * [descr:_ui_data_grid_FocusedRowChangedEvent]
     */
    export type FocusedRowChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
       * [descr:_ui_data_grid_FocusedRowChangedEvent.rowElement]
       */
      readonly rowElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_FocusedRowChangedEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_FocusedRowChangedEvent.row]
       */
      readonly row?: Row<TRowData, TKey>;
    };
    /**
     * [descr:_ui_data_grid_FocusedRowChangingEvent]
     */
    export type FocusedRowChangingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.NativeEventInfo<
    dxDataGrid<TRowData, TKey>,
    KeyboardEvent | PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_data_grid_FocusedRowChangingEvent.rowElement]
         */
      readonly rowElement: core.DxElement;
      /**
         * [descr:_ui_data_grid_FocusedRowChangingEvent.prevRowIndex]
         */
      readonly prevRowIndex: number;
      /**
         * [descr:_ui_data_grid_FocusedRowChangingEvent.newRowIndex]
         */
      newRowIndex: number;
      /**
         * [descr:_ui_data_grid_FocusedRowChangingEvent.rows]
         */
      readonly rows: Row<TRowData, TKey>[];
    };
    /**
     * [descr:GroupData]
     */
    export interface GroupData<TRowData> {
      key: any;
      items: TRowData[] | GroupData<TRowData>[] | null;
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      collapsedItems?: TRowData[] | GroupData<TRowData>[];
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      aggregates?: any[];
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      summary?: any[];
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      isContinuation?: boolean;
      /**
       * @deprecated Attention! This property is for internal purposes only.
       */
      isContinuationOnNextPage?: boolean;
    }
    /**
     * [descr:Grouping]
     */
    export interface Grouping {
      /**
       * [descr:dxDataGridOptions.grouping.allowCollapsing]
       */
      allowCollapsing?: boolean;
      /**
       * [descr:dxDataGridOptions.grouping.autoExpandAll]
       */
      autoExpandAll?: boolean;
      /**
       * [descr:dxDataGridOptions.grouping.contextMenuEnabled]
       */
      contextMenuEnabled?: boolean;
      /**
       * [descr:dxDataGridOptions.grouping.expandMode]
       */
      expandMode?: common.grids.GroupExpandMode;
      /**
       * [descr:dxDataGridOptions.grouping.texts]
       */
      texts?: GroupingTexts;
    }
    /**
     * [descr:GroupingTexts]
     */
    export interface GroupingTexts {
      /**
       * [descr:dxDataGridOptions.grouping.texts.groupByThisColumn]
       */
      groupByThisColumn?: string;
      /**
       * [descr:dxDataGridOptions.grouping.texts.groupContinuedMessage]
       */
      groupContinuedMessage?: string;
      /**
       * [descr:dxDataGridOptions.grouping.texts.groupContinuesMessage]
       */
      groupContinuesMessage?: string;
      /**
       * [descr:dxDataGridOptions.grouping.texts.ungroup]
       */
      ungroup?: string;
      /**
       * [descr:dxDataGridOptions.grouping.texts.ungroupAll]
       */
      ungroupAll?: string;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type GroupKey = any[];
    /**
     * [descr:GroupPanel]
     */
    export interface GroupPanel {
      /**
       * [descr:dxDataGridOptions.groupPanel.allowColumnDragging]
       */
      allowColumnDragging?: boolean;
      /**
       * [descr:dxDataGridOptions.groupPanel.emptyPanelText]
       */
      emptyPanelText?: string;
      /**
       * [descr:dxDataGridOptions.groupPanel.visible]
       */
      visible?: boolean | common.Mode;
    }
    /**
     * [descr:_ui_data_grid_InitializedEvent]
     */
    export type InitializedEvent<
      TRowData = any,
      TKey = any,
    > = events.InitializedEventInfo<dxDataGrid<TRowData, TKey>>;
    /**
     * [descr:_ui_data_grid_InitNewRowEvent]
     */
    export type InitNewRowEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.NewRowInfo<TRowData>;
    /**
     * [descr:_ui_data_grid_KeyDownEvent]
     */
    export type KeyDownEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxDataGrid<TRowData, TKey>,
    KeyboardEvent
    > &
    common.grids.KeyDownInfo;
    /**
     * [descr:MasterDetail]
     */
    export interface MasterDetail<TRowData = any, TKey = any> {
      /**
       * [descr:dxDataGridOptions.masterDetail.autoExpandAll]
       */
      autoExpandAll?: boolean;
      /**
       * [descr:dxDataGridOptions.masterDetail.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxDataGridOptions.masterDetail.template]
       */
      template?:
      | core.template
      | ((
        detailElement: core.DxElement,
        detailInfo: MasterDetailTemplateData<TRowData, TKey>
      ) => any);
    }
    export interface MasterDetailTemplateData<TRowData = any, TKey = any> {
      readonly key: TKey;
      readonly data: TRowData;
      readonly watch?: Function;
    }
    /**
     * [descr:_ui_data_grid_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type OverriddenKeys =
      | 'columns'
      | 'customizeColumns'
      | 'dataRowTemplate'
      | 'editing'
      | 'export'
      | 'grouping'
      | 'groupPanel'
      | 'keyExpr'
      | 'masterDetail'
      | 'onCellClick'
      | 'onCellDblClick'
      | 'onCellHoverChanged'
      | 'onCellPrepared'
      | 'onContextMenuPreparing'
      | 'onEditingStart'
      | 'onEditorPrepared'
      | 'onEditorPreparing'
      | 'onExporting'
      | 'onFocusedCellChanged'
      | 'onFocusedCellChanging'
      | 'onFocusedRowChanged'
      | 'onFocusedRowChanging'
      | 'onRowClick'
      | 'onRowDblClick'
      | 'onRowPrepared'
      | 'remoteOperations'
      | 'rowTemplate'
      | 'scrolling'
      | 'selection'
      | 'selectionFilter'
      | 'sortByGroupSummaryInfo'
      | 'summary'
      | 'toolbar';
    export type Paging = common.grids.PagingBase;
    export type Properties<TRowData = any, TKey = any> = dxDataGridOptions<
    TRowData,
    TKey
    >;
    /**
     * [descr:dxDataGridRowObject]
     */
    export interface Row<TRowData = any, TKey = any> {
      /**
       * [descr:dxDataGridRowObject.data]
       */
      readonly data: TRowData;
      /**
       * [descr:dxDataGridRowObject.groupIndex]
       */
      readonly groupIndex?: number;
      /**
       * [descr:dxDataGridRowObject.isEditing]
       */
      readonly isEditing?: boolean;
      /**
       * [descr:dxDataGridRowObject.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:dxDataGridRowObject.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:dxDataGridRowObject.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:dxDataGridRowObject.key]
       */
      readonly key: TKey;
      /**
       * [descr:dxDataGridRowObject.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:dxDataGridRowObject.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:dxDataGridRowObject.values]
       */
      readonly values: any[];
    }
    /**
     * [descr:_ui_data_grid_RowClickEvent]
     */
    export type RowClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxDataGrid<TRowData, TKey>,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_data_grid_RowClickEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_data_grid_RowClickEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_data_grid_RowClickEvent.values]
       */
      readonly values: any[];
      /**
       * [descr:_ui_data_grid_RowClickEvent.columns]
       */
      readonly columns: Column<TRowData, TKey>[];
      /**
       * [descr:_ui_data_grid_RowClickEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_RowClickEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_data_grid_RowClickEvent.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:_ui_data_grid_RowClickEvent.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:_ui_data_grid_RowClickEvent.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:_ui_data_grid_RowClickEvent.groupIndex]
       */
      readonly groupIndex?: number;
      /**
       * [descr:_ui_data_grid_RowClickEvent.rowElement]
       */
      readonly rowElement: core.DxElement;
      /**
       * [descr:_ui_data_grid_RowClickEvent.handled]
       */
      readonly handled: boolean;
    };
    /**
     * [descr:_ui_data_grid_RowCollapsedEvent]
     */
    export type RowCollapsedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowKeyInfo<TKey>;
    /**
     * [descr:_ui_data_grid_RowCollapsingEvent]
     */
    export type RowCollapsingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowKeyInfo<TKey>;
    /**
     * [descr:_ui_data_grid_RowDblClickEvent]
     */
    export type RowDblClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxDataGrid<TRowData, TKey>,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.values]
       */
      readonly values: any[];
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.columns]
       */
      readonly columns: Column<TRowData, TKey>[];
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.groupIndex]
       */
      readonly groupIndex?: number;
      /**
       * [descr:_ui_data_grid_RowDblClickEvent.rowElement]
       */
      readonly rowElement: core.DxElement;
    };
    export type RowDragging<
      TRowData = any,
      TKey = any,
    > = common.grids.RowDragging<dxDataGrid, TRowData, TKey>;
    export type RowDraggingAddEvent<
      TRowData = any,
      TKey = any,
    > = common.ReducedNativeEventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragDropInfo;
    export type RowDraggingChangeEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    common.ReducedNativeEventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragDropInfo;
    export type RowDraggingEndEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    common.ReducedNativeEventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragDropInfo;
    export type RowDraggingMoveEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    common.ReducedNativeEventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragDropInfo;
    export type RowDraggingRemoveEvent<
      TRowData = any,
      TKey = any,
    > = common.ReducedNativeEventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData>;
    export type RowDraggingReorderEvent<
      TRowData = any,
      TKey = any,
    > = common.ReducedNativeEventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragReorderInfo;
    export type RowDraggingStartEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    common.ReducedNativeEventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.DragStartEventInfo<TRowData>;
    /**
     * [descr:_ui_data_grid_RowExpandedEvent]
     */
    export type RowExpandedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowKeyInfo<TKey>;
    /**
     * [descr:_ui_data_grid_RowExpandingEvent]
     */
    export type RowExpandingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowKeyInfo<TKey>;
    /**
     * [descr:_ui_data_grid_RowInsertedEvent]
     */
    export type RowInsertedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowInsertedInfo<TRowData, TKey>;
    /**
     * [descr:_ui_data_grid_RowInsertingEvent]
     */
    export type RowInsertingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowInsertingInfo<TRowData>;
    /**
     * [descr:_ui_data_grid_RowPreparedEvent]
     */
    export type RowPreparedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> & {
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.values]
       */
      readonly values: any[];
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.columns]
       */
      readonly columns: Column<TRowData, TKey>[];
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.groupIndex]
       */
      readonly groupIndex?: number;
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:_ui_data_grid_RowPreparedEvent.rowElement]
       */
      readonly rowElement: core.DxElement;
    };
    /**
     * [descr:_ui_data_grid_RowRemovedEvent]
     */
    export type RowRemovedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowRemovedInfo<TRowData, TKey>;
    /**
     * [descr:_ui_data_grid_RowRemovingEvent]
     */
    export type RowRemovingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowRemovingInfo<TRowData, TKey>;
    export interface RowTemplateData<TRowData = any, TKey = any> {
      readonly key: TKey;
      readonly data: TRowData;
      readonly component: dxDataGrid<TRowData, TKey>;
      readonly values: any[];
      readonly rowIndex: number;
      readonly columns: Column<TRowData, TKey>[];
      readonly isSelected?: boolean;
      readonly rowType: string;
      readonly groupIndex?: number;
      readonly isExpanded?: boolean;
    }
    /**
     * [descr:_ui_data_grid_RowUpdatedEvent]
     */
    export type RowUpdatedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowUpdatedInfo<TRowData, TKey>;
    /**
     * [descr:_ui_data_grid_RowUpdatingEvent]
     */
    export type RowUpdatingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowUpdatingInfo<TRowData, TKey>;
    /**
     * [descr:_ui_data_grid_RowValidatingEvent]
     */
    export type RowValidatingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.RowValidatingInfo<TRowData, TKey>;
    /**
     * [descr:_ui_data_grid_SavedEvent]
     */
    export type SavedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.DataChangeInfo<TRowData, TKey>;
    /**
     * [descr:_ui_data_grid_SavingEvent]
     */
    export type SavingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.SavingInfo<TRowData, TKey>;
    /**
     * [descr:dxDataGridScrolling]
     */
    export type Scrolling = ScrollingBase & {
      /**
       * [descr:dxDataGridOptions.scrolling.mode]
       */
      mode?: DataGridScrollMode;
    };
    /**
     * @deprecated Use Scrolling instead
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ScrollingBase = common.grids.ScrollingBase;
    export type Selection = SelectionBase & {
      /**
       * [descr:dxDataGridOptions.selection.deferred]
       */
      deferred?: boolean;
      /**
       * [descr:dxDataGridOptions.selection.selectAllMode]
       */
      selectAllMode?: common.SelectAllMode;
      /**
       * [descr:dxDataGridOptions.selection.showCheckBoxesMode]
       */
      showCheckBoxesMode?: common.grids.SelectionColumnDisplayMode;
    };
    /**
     * @deprecated Use Selection instead
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type SelectionBase = common.grids.SelectionBase;
    /**
     * [descr:_ui_data_grid_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.SelectionChangedInfo<TRowData, TKey>;
    /**
     * [descr:dxDataGridSortByGroupSummaryInfoItem]
     */
    export interface SortByGroupSummaryInfoItem {
      /**
       * [descr:dxDataGridOptions.sortByGroupSummaryInfo.groupColumn]
       */
      groupColumn?: string;
      /**
       * [descr:dxDataGridOptions.sortByGroupSummaryInfo.sortOrder]
       */
      sortOrder?: common.SortOrder;
      /**
       * [descr:dxDataGridOptions.sortByGroupSummaryInfo.summaryItem]
       */
      summaryItem?: string | number;
    }
    /**
     * [descr:Summary]
     */
    export interface Summary<TRowData = any, TKey = any> {
      /**
       * [descr:dxDataGridOptions.summary.calculateCustomSummary]
       */
      calculateCustomSummary?: (
        options: CustomSummaryInfo<TRowData, TKey>
      ) => void;
      /**
       * [descr:dxDataGridOptions.summary.groupItems]
       */
      groupItems?: SummaryGroupItem[];
      /**
       * [descr:dxDataGridOptions.summary.recalculateWhileEditing]
       */
      recalculateWhileEditing?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.skipEmptyValues]
       */
      skipEmptyValues?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.texts]
       */
      texts?: SummaryTexts;
      /**
       * [descr:dxDataGridOptions.summary.totalItems]
       */
      totalItems?: SummaryTotalItem[];
    }
    /**
     * [descr:SummaryGroupItem]
     */
    export interface SummaryGroupItem {
      /**
       * [descr:dxDataGridOptions.summary.groupItems.alignByColumn]
       */
      alignByColumn?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.column]
       */
      column?: string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.customizeText]
       */
      customizeText?: (itemInfo: SummaryItemTextInfo) => string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.displayFormat]
       */
      displayFormat?: string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.name]
       */
      name?: string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.showInColumn]
       */
      showInColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.showInGroupFooter]
       */
      showInGroupFooter?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.skipEmptyValues]
       */
      skipEmptyValues?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.summaryType]
       */
      summaryType?: common.grids.SummaryType | string;
      /**
       * [descr:dxDataGridOptions.summary.groupItems.valueFormat]
       */
      valueFormat?: Format;
    }
    export interface SummaryItemTextInfo {
      readonly value?: string | number | Date;
      readonly valueText: string;
    }
    /**
     * [descr:SummaryTexts]
     */
    export interface SummaryTexts {
      /**
       * [descr:dxDataGridOptions.summary.texts.avg]
       */
      avg?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.avgOtherColumn]
       */
      avgOtherColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.count]
       */
      count?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.max]
       */
      max?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.maxOtherColumn]
       */
      maxOtherColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.min]
       */
      min?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.minOtherColumn]
       */
      minOtherColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.sum]
       */
      sum?: string;
      /**
       * [descr:dxDataGridOptions.summary.texts.sumOtherColumn]
       */
      sumOtherColumn?: string;
    }
    /**
     * [descr:SummaryTotalItem]
     */
    export interface SummaryTotalItem {
      /**
       * [descr:dxDataGridOptions.summary.totalItems.alignment]
       */
      alignment?: common.HorizontalAlignment;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.column]
       */
      column?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.cssClass]
       */
      cssClass?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.customizeText]
       */
      customizeText?: (itemInfo: SummaryItemTextInfo) => string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.displayFormat]
       */
      displayFormat?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.name]
       */
      name?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.showInColumn]
       */
      showInColumn?: string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.skipEmptyValues]
       */
      skipEmptyValues?: boolean;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.summaryType]
       */
      summaryType?: common.grids.SummaryType | string;
      /**
       * [descr:dxDataGridOptions.summary.totalItems.valueFormat]
       */
      valueFormat?: Format;
    }
    /**
     * [descr:_ui_data_grid_ToolbarPreparingEvent]
     */
    export type ToolbarPreparingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxDataGrid<TRowData, TKey>> &
    common.grids.ToolbarPreparingInfo;
  }
  /**
   * @deprecated Use the DevExpress.ui.dxDataGrid.Column type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDataGridColumn<TRowData = any, TKey = any>
    extends dxDataGrid.ColumnBase<TRowData> {
    /**
     * [descr:dxDataGridColumn.allowExporting]
     */
    allowExporting?: boolean;
    /**
     * [descr:dxDataGridColumn.allowGrouping]
     */
    allowGrouping?: boolean;
    /**
     * [descr:dxDataGridColumn.autoExpandGroup]
     */
    autoExpandGroup?: boolean;
    /**
     * [descr:dxDataGridColumn.buttons]
     */
    buttons?: (| dxDataGrid.DataGridPredefinedColumnButton
    | dxDataGrid.ColumnButton<TRowData, TKey>)[];
    /**
     * [descr:dxDataGridColumn.calculateGroupValue]
     */
    calculateGroupValue?:
    | string
    | ((this: dxDataGrid.ColumnBase, rowData: TRowData) => any);
    /**
     * [descr:dxDataGridColumn.cellTemplate]
     */
    cellTemplate?:
    | core.template
    | ((
      cellElement: core.DxElement,
      cellInfo: dxDataGrid.ColumnCellTemplateData<
      TRowData,
      TKey
      >
    ) => any);
    /**
     * [descr:dxDataGridColumn.columns]
     */
    columns?: (dxDataGrid.Column<TRowData, TKey> | string)[];
    /**
     * [descr:dxDataGridColumn.editCellTemplate]
     */
    editCellTemplate?:
    | core.template
    | ((
      cellElement: core.DxElement,
      cellInfo: dxDataGrid.ColumnEditCellTemplateData<
      TRowData,
      TKey
      >
    ) => any);
    /**
     * [descr:dxDataGridColumn.groupCellTemplate]
     */
    groupCellTemplate?:
    | core.template
    | ((
      cellElement: core.DxElement,
      cellInfo: dxDataGrid.ColumnGroupCellTemplateData<
      TRowData,
      TKey
      >
    ) => any);
    /**
     * [descr:dxDataGridColumn.groupIndex]
     */
    groupIndex?: number;
    /**
     * [descr:dxDataGridColumn.headerCellTemplate]
     */
    headerCellTemplate?:
    | core.template
    | ((
      columnHeader: core.DxElement,
      headerInfo: dxDataGrid.ColumnHeaderCellTemplateData<
      TRowData,
      TKey
      >
    ) => any);
    /**
     * [descr:dxDataGridColumn.showWhenGrouped]
     */
    showWhenGrouped?: boolean;
    /**
     * [descr:dxDataGridColumn.type]
     */
    type?: dxDataGrid.DataGridCommandColumnType;
  }
  /**
   * @deprecated Use the DataGrid's ColumnButton type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDataGridColumnButton<TRowData = any, TKey = any>
    extends dxDataGrid.ColumnButtonBase {
    /**
     * [descr:dxDataGridColumnButton.name]
     */
    name?: dxDataGrid.DataGridPredefinedColumnButton | string;
    /**
     * [descr:dxDataGridColumnButton.onClick]
     */
    onClick?: (
      e: dxDataGrid.ColumnButtonClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridColumnButton.template]
     */
    template?:
    | core.template
    | ((
      cellElement: core.DxElement,
      cellInfo: dxDataGrid.ColumnButtonTemplateData<
      TRowData,
      TKey
      >
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxDataGridColumnButton.visible]
     */
    visible?:
    | boolean
    | ((options: {
      component?: dxDataGrid<TRowData, TKey>;
      row?: dxDataGrid.Row<TRowData, TKey>;
      column?: dxDataGrid.Column<TRowData, TKey>;
    }) => boolean);
    /**
     * [descr:dxDataGridColumnButton.disabled]
     */
    disabled?:
    | boolean
    | ((options: {
      component?: dxDataGrid<TRowData, TKey>;
      row?: dxDataGrid.Row<TRowData, TKey>;
      column?: dxDataGrid.Column<TRowData, TKey>;
    }) => boolean);
  }
  /**
   * [descr:dxDataGridOptions]
   * @deprecated [depNote:dxDataGridOptions]
   */
  export type dxDataGridOptions<TRowData = any, TKey = any> = Omit<
  common.grids.GridBaseOptions<
  dxDataGrid<TRowData, TKey>,
  TRowData,
  TKey
  >,
  dxDataGrid.OverriddenKeys
  > & {
    /**
     * [descr:dxDataGridOptions.columns]
     */
    columns?: (dxDataGrid.Column<TRowData, TKey> | string)[];
    /**
     * [descr:dxDataGridOptions.customizeColumns]
     */
    customizeColumns?: (
      columns: dxDataGrid.Column<TRowData, TKey>[]
    ) => void;
    /**
     * [descr:dxDataGridOptions.editing]
     */
    editing?: dxDataGrid.Editing<TRowData, TKey>;
    /**
     * [descr:dxDataGridOptions.export]
     */
    export?: dxDataGrid.Export;
    /**
     * [descr:dxDataGridOptions.groupPanel]
     */
    groupPanel?: dxDataGrid.GroupPanel;
    /**
     * [descr:dxDataGridOptions.grouping]
     */
    grouping?: dxDataGrid.Grouping;
    /**
     * [descr:dxDataGridOptions.keyExpr]
     */
    keyExpr?: string | string[];
    /**
     * [descr:dxDataGridOptions.masterDetail]
     */
    masterDetail?: dxDataGrid.MasterDetail<TRowData, TKey>;
    /**
     * [descr:dxDataGridOptions.onCellClick]
     */
    onCellClick?: (
      e: dxDataGrid.CellClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onCellDblClick]
     */
    onCellDblClick?: (
      e: dxDataGrid.CellDblClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onCellHoverChanged]
     */
    onCellHoverChanged?: (
      e: dxDataGrid.CellHoverChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onCellPrepared]
     */
    onCellPrepared?: (
      e: dxDataGrid.CellPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onContextMenuPreparing]
     */
    onContextMenuPreparing?: (
      e: dxDataGrid.ContextMenuPreparingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onEditingStart]
     */
    onEditingStart?: (
      e: dxDataGrid.EditingStartEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onEditorPrepared]
     */
    onEditorPrepared?: (
      options: dxDataGrid.EditorPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onEditorPreparing]
     */
    onEditorPreparing?: (
      e: dxDataGrid.EditorPreparingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onExporting]
     */
    onExporting?: (
      e: dxDataGrid.ExportingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onFocusedCellChanged]
     */
    onFocusedCellChanged?: (
      e: dxDataGrid.FocusedCellChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onFocusedCellChanging]
     */
    onFocusedCellChanging?: (
      e: dxDataGrid.FocusedCellChangingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onFocusedRowChanged]
     */
    onFocusedRowChanged?: (
      e: dxDataGrid.FocusedRowChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onFocusedRowChanging]
     */
    onFocusedRowChanging?: (
      e: dxDataGrid.FocusedRowChangingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onRowClick]
     */
    onRowClick?: (
      e: dxDataGrid.RowClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onRowDblClick]
     */
    onRowDblClick?: (
      e: dxDataGrid.RowDblClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.onRowPrepared]
     */
    onRowPrepared?: (
      e: dxDataGrid.RowPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxDataGridOptions.remoteOperations]
     */
    remoteOperations?:
    | boolean
    | {
      /**
           * [descr:dxDataGridOptions.remoteOperations.filtering]
           */
      filtering?: boolean;
      /**
           * [descr:dxDataGridOptions.remoteOperations.groupPaging]
           */
      groupPaging?: boolean;
      /**
           * [descr:dxDataGridOptions.remoteOperations.grouping]
           */
      grouping?: boolean;
      /**
           * [descr:dxDataGridOptions.remoteOperations.paging]
           */
      paging?: boolean;
      /**
           * [descr:dxDataGridOptions.remoteOperations.sorting]
           */
      sorting?: boolean;
      /**
           * [descr:dxDataGridOptions.remoteOperations.summary]
           */
      summary?: boolean;
    }
    | common.Mode;
    /**
     * [descr:dxDataGridOptions.rowTemplate]
     * @deprecated [depNote:dxDataGridOptions.rowTemplate]
     */
    rowTemplate?:
    | core.template
    | ((
      rowElement: core.DxElement,
      rowInfo: dxDataGrid.RowTemplateData<TRowData, TKey>
    ) => any);
    /**
     * [descr:dxDataGridOptions.dataRowTemplate]
     */
    dataRowTemplate?:
    | core.template
    | ((
      rowElement: core.DxElement,
      rowInfo: dxDataGrid.DataRowTemplateData<TRowData, TKey>
    ) => any);
    /**
     * [descr:dxDataGridOptions.scrolling]
     */
    scrolling?: dxDataGrid.Scrolling;
    /**
     * [descr:dxDataGridOptions.selection]
     */
    selection?: dxDataGrid.Selection;
    /**
     * [descr:dxDataGridOptions.selectionFilter]
     */
    selectionFilter?: string | any[] | Function;
    /**
     * [descr:dxDataGridOptions.sortByGroupSummaryInfo]
     */
    sortByGroupSummaryInfo?: dxDataGrid.SortByGroupSummaryInfoItem[];
    /**
     * [descr:dxDataGridOptions.summary]
     */
    summary?: dxDataGrid.Summary<TRowData, TKey>;
    /**
     * [descr:dxDataGridOptions.toolbar]
     */
    toolbar?: dxDataGrid.Toolbar;
  };
  /**
   * @deprecated Use DevExpress.ui.dxDataGrid.Row instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxDataGridRowObject<
    TRowData = any,
    TKey = any,
  > = dxDataGrid.Row<TRowData, TKey>;
  /**
   * [descr:dxDateBox]
   */
  export class dxDateBox extends DateBoxBase {}
  namespace dxDateBox {
    /**
     * [descr:_ui_date_box_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxDateBox
    >;
    /**
     * [descr:_ui_date_box_ClosedEvent]
     */
    export type ClosedEvent = events.EventInfo<dxDateBox>;
    /**
     * [descr:_ui_date_box_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxDateBox>;
    /**
     * [descr:_ui_date_box_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxDateBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_date_box_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxDateBox,
    ClipboardEvent
    >;
    export type DatePickerType = 'calendar' | 'list' | 'native' | 'rollers';
    export type DateType = 'date' | 'datetime' | 'time';
    export type DisabledDate =
      dxCalendar.ComponentDisabledDate<dxDateBox>;
    /**
     * [descr:_ui_date_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxDateBox>;
    export type DropDownButtonTemplateData =
      dxDropDownEditor.DropDownButtonTemplateDataModel;
    /**
     * [descr:_ui_date_box_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxDateBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_date_box_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxDateBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_date_box_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxDateBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_date_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxDateBox>;
    /**
     * [descr:_ui_date_box_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxDateBox,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_date_box_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxDateBox,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxDateBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_date_box_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxDateBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_date_box_OpenedEvent]
     */
    export type OpenedEvent = events.EventInfo<dxDateBox>;
    /**
     * [descr:_ui_date_box_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxDateBox> &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_date_box_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxDateBox,
    ClipboardEvent
    >;
    export type Properties = dxDateBoxOptions;
    /**
     * [descr:_ui_date_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxDateBox,
    KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxDateBoxOptions]
   * @deprecated [depNote:dxDateBoxOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDateBoxOptions extends DateBoxBaseOptions<dxDateBox> {
    /**
     * [descr:dxDateBoxOptions.adaptivityEnabled]
     */
    adaptivityEnabled?: boolean;
    /**
     * [descr:dxDateBoxOptions.dateOutOfRangeMessage]
     */
    dateOutOfRangeMessage?: string;
    /**
     * [descr:dxDateBoxOptions.disabledDates]
     */
    disabledDates?:
    | Date[]
    | ((data: dxDateBox.DisabledDate) => boolean);
    /**
     * [descr:dxDateBoxOptions.inputAttr]
     */
    inputAttr?: any;
    /**
     * [descr:dxDateBoxOptions.interval]
     */
    interval?: number;
    /**
     * [descr:dxDateBoxOptions.invalidDateMessage]
     */
    invalidDateMessage?: string;
    /**
     * [descr:dxDateBoxOptions.label]
     */
    label?: string;
    /**
     * [descr:dxDateBoxOptions.maxLength]
     */
    maxLength?: string | number;
    /**
     * [descr:dxDateBoxOptions.name]
     */
    name?: string;
    /**
     * [descr:dxDateBoxOptions.pickerType]
     */
    pickerType?: dxDateBox.DatePickerType;
    /**
     * [descr:dxDateBoxOptions.placeholder]
     */
    placeholder?: string;
    /**
     * [descr:dxDateBoxOptions.showAnalogClock]
     */
    showAnalogClock?: boolean;
    /**
     * [descr:dxDateBoxOptions.text]
     */
    text?: string;
    /**
     * [descr:dxDateBoxOptions.type]
     */
    type?: dxDateBox.DateType;
    /**
     * [descr:dxDateBoxOptions.value]
     */
    value?: Date | number | string;
  }
  /**
   * [descr:dxDateRangeBox]
   */
  export class dxDateRangeBox extends DateRangeBoxBase {
    /**
     * [descr:dxDateRangeBox.endDateField()]
     */
    endDateField(): core.DxElement;
    /**
     * [descr:dxDateRangeBox.startDateField()]
     */
    startDateField(): core.DxElement;
  }
  namespace dxDateRangeBox {
    /**
     * [descr:_ui_date_range_box_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<dxDateRangeBox>;
    /**
     * [descr:_ui_date_range_box_ClosedEvent]
     */
    export type ClosedEvent = events.EventInfo<dxDateRangeBox>;
    /**
     * [descr:_ui_date_range_box_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxDateRangeBox>;
    /**
     * [descr:_ui_date_range_box_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxDateRangeBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_date_range_box_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxDateRangeBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_date_range_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxDateRangeBox>;
    export type DropDownButtonTemplateData =
      dxDropDownEditor.DropDownButtonTemplateDataModel;
    /**
     * [descr:_ui_date_range_box_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxDateRangeBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_date_range_box_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxDateRangeBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_date_range_box_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxDateRangeBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_date_range_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxDateRangeBox>;
    /**
     * [descr:_ui_date_range_box_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxDateRangeBox,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_date_range_box_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxDateRangeBox,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxDateRangeBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_date_range_box_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxDateRangeBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_date_range_box_OpenedEvent]
     */
    export type OpenedEvent = events.EventInfo<dxDateRangeBox>;
    /**
     * [descr:_ui_date_range_box_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxDateRangeBox> &
      events.ChangedOptionInfo;
    /**
     * [descr:_ui_date_range_box_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxDateRangeBox,
    ClipboardEvent
    >;
    /**
     * [descr:dxDateRangeBoxOptions]
     */
    export type Properties = Omit<
    DateBoxBaseOptions<dxDateRangeBox>,
    'inputAttr' | 'label' | 'maxLength' | 'name' | 'placeholder' | 'text'
    > & {
      /**
       * [descr:dxDateRangeBoxOptions.disableOutOfRangeSelection]
       */
      disableOutOfRangeSelection?: boolean;
      /**
       * [descr:dxDateRangeBoxOptions.endDate]
       */
      endDate?: Date | number | string;
      /**
       * [descr:dxDateRangeBoxOptions.endDateInputAttr]
       */
      endDateInputAttr?: any;
      /**
       * [descr:dxDateRangeBoxOptions.endDateLabel]
       */
      endDateLabel?: string;
      /**
       * [descr:dxDateRangeBoxOptions.endDateName]
       */
      endDateName?: string;
      /**
       * [descr:dxDateRangeBoxOptions.endDateOutOfRangeMessage]
       */
      endDateOutOfRangeMessage?: string;
      /**
       * [descr:dxDateRangeBoxOptions.endDatePlaceholder]
       */
      endDatePlaceholder?: string;
      /**
       * [descr:dxDateRangeBoxOptions.endDateText]
       */
      endDateText?: string;
      /**
       * [descr:dxDateRangeBoxOptions.invalidEndDateMessage]
       */
      invalidEndDateMessage?: string;
      /**
       * [descr:dxDateRangeBoxOptions.invalidStartDateMessage]
       */
      invalidStartDateMessage?: string;
      /**
       * [descr:dxDateRangeBoxOptions.multiView]
       */
      multiView?: boolean;
      /**
       * [descr:dxDateRangeBoxOptions.openOnFieldClick]
       */
      openOnFieldClick?: boolean;
      /**
       * [descr:dxDateRangeBoxOptions.startDate]
       */
      startDate?: Date | number | string;
      /**
       * [descr:dxDateRangeBoxOptions.startDateInputAttr]
       */
      startDateInputAttr?: any;
      /**
       * [descr:dxDateRangeBoxOptions.startDateLabel]
       */
      startDateLabel?: string;
      /**
       * [descr:dxDateRangeBoxOptions.startDateName]
       */
      startDateName?: string;
      /**
       * [descr:dxDateRangeBoxOptions.startDateOutOfRangeMessage]
       */
      startDateOutOfRangeMessage?: string;
      /**
       * [descr:dxDateRangeBoxOptions.startDatePlaceholder]
       */
      startDatePlaceholder?: string;
      /**
       * [descr:dxDateRangeBoxOptions.startDateText]
       */
      startDateText?: string;
      /**
       * [descr:dxDateRangeBoxOptions.value]
       */
      value?: (Date | number | string)[];
    };
    /**
     * [descr:_ui_date_range_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxDateRangeBox,
    KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxDeferRendering]
   */
  export class dxDeferRendering extends Widget<dxDeferRenderingOptions> {}
  namespace dxDeferRendering {
    /**
     * [descr:_ui_defer_rendering_ContentReadyEvent]
     */
    export type ContentReadyEvent =
      events.EventInfo<dxDeferRendering>;
    /**
     * [descr:_ui_defer_rendering_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxDeferRendering>;
    /**
     * [descr:_ui_defer_rendering_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxDeferRendering>;
    /**
     * [descr:_ui_defer_rendering_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxDeferRendering> &
      events.ChangedOptionInfo;
    export type Properties = dxDeferRenderingOptions;
    /**
     * [descr:_ui_defer_rendering_RenderedEvent]
     */
    export type RenderedEvent = events.EventInfo<dxDeferRendering>;
    /**
     * [descr:_ui_defer_rendering_ShownEvent]
     */
    export type ShownEvent = events.EventInfo<dxDeferRendering>;
  }
  /**
   * [descr:dxDeferRenderingOptions]
   * @deprecated [depNote:dxDeferRenderingOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDeferRenderingOptions
    extends WidgetOptions<dxDeferRendering> {
    /**
     * [descr:dxDeferRenderingOptions.animation]
     */
    animation?: AnimationConfig;
    /**
     * [descr:dxDeferRenderingOptions.onRendered]
     */
    onRendered?: (e: {
      component?: dxDeferRendering;
      element?: core.DxElement;
      model?: any;
    }) => void;
    /**
     * [descr:dxDeferRenderingOptions.onShown]
     */
    onShown?: (e: {
      component?: dxDeferRendering;
      element?: core.DxElement;
      model?: any;
    }) => void;
    /**
     * [descr:dxDeferRenderingOptions.renderWhen]
     */
    renderWhen?: PromiseLike<void> | boolean;
    /**
     * [descr:dxDeferRenderingOptions.showLoadIndicator]
     */
    showLoadIndicator?: boolean;
    /**
     * [descr:dxDeferRenderingOptions.staggerItemSelector]
     */
    staggerItemSelector?: string;
  }
  /**
   * [descr:dxDiagram]
   */
  export class dxDiagram extends Widget<dxDiagramOptions> {
    /**
     * [descr:dxDiagram.getNodeDataSource()]
     */
    getNodeDataSource(): data.DataSource;
    /**
     * [descr:dxDiagram.getEdgeDataSource()]
     */
    getEdgeDataSource(): data.DataSource;
    /**
     * [descr:dxDiagram.getItemByKey(key)]
     */
    getItemByKey(key: Object): dxDiagram.Item;
    /**
     * [descr:dxDiagram.getItemById(id)]
     */
    getItemById(id: string): dxDiagram.Item;
    /**
     * [descr:dxDiagram.getItems()]
     */
    getItems(): dxDiagram.Item[];
    /**
     * [descr:dxDiagram.getSelectedItems()]
     */
    getSelectedItems(): dxDiagram.Item[];
    /**
     * [descr:dxDiagram.setSelectedItems(items)]
     */
    setSelectedItems(items: dxDiagram.Item[]): void;
    /**
     * [descr:dxDiagram.scrollToItem(item)]
     */
    scrollToItem(item: dxDiagram.Item): void;
    /**
     * [descr:dxDiagram.export()]
     */
    export(): string;
    /**
     * [descr:dxDiagram.exportTo(format, callback)]
     */
    exportTo(
      format: dxDiagram.DiagramExportFormat,
      callback: Function
    ): void;
    /**
     * [descr:dxDiagram.import(data, updateExistingItemsOnly)]
     */
    import(data: string, updateExistingItemsOnly?: boolean): void;
    /**
     * [descr:dxDiagram.updateToolbox()]
     */
    updateToolbox(): void;
    /**
     * [descr:dxDiagram.fitToContent()]
     */
    fitToContent(): void;
    /**
     * [descr:dxDiagram.fitToWidth()]
     */
    fitToWidth(): void;
  }
  namespace dxDiagram {
    /**
     * [descr:_ui_diagram_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxDiagram>;
    /**
     * [descr:_ui_diagram_CustomCommandEvent]
     */
    export interface CustomCommandEvent {
      /**
       * [descr:_ui_diagram_CustomCommandEvent.component]
       */
      readonly component: dxDiagram;
      /**
       * [descr:_ui_diagram_CustomCommandEvent.element]
       */
      readonly element: core.DxElement;
      /**
       * [descr:_ui_diagram_CustomCommandEvent.name]
       */
      readonly name: string;
    }
    export interface CustomShapeTemplateData {
      readonly item: dxDiagramShape;
    }
    export interface CustomShapeToolboxTemplateData {
      readonly item: dxDiagramShape;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramAutoZoomMode = 'fitContent' | 'fitWidth' | 'disabled';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramCommand =
      | 'separator'
      | 'exportSvg'
      | 'exportPng'
      | 'exportJpg'
      | 'undo'
      | 'redo'
      | 'cut'
      | 'copy'
      | 'paste'
      | 'selectAll'
      | 'delete'
      | 'fontName'
      | 'fontSize'
      | 'bold'
      | 'italic'
      | 'underline'
      | 'fontColor'
      | 'lineStyle'
      | 'lineWidth'
      | 'lineColor'
      | 'fillColor'
      | 'textAlignLeft'
      | 'textAlignCenter'
      | 'textAlignRight'
      | 'lock'
      | 'unlock'
      | 'sendToBack'
      | 'bringToFront'
      | 'insertShapeImage'
      | 'editShapeImage'
      | 'deleteShapeImage'
      | 'connectorLineType'
      | 'connectorLineStart'
      | 'connectorLineEnd'
      | 'layoutTreeTopToBottom'
      | 'layoutTreeBottomToTop'
      | 'layoutTreeLeftToRight'
      | 'layoutTreeRightToLeft'
      | 'layoutLayeredTopToBottom'
      | 'layoutLayeredBottomToTop'
      | 'layoutLayeredLeftToRight'
      | 'layoutLayeredRightToLeft'
      | 'fullScreen'
      | 'zoomLevel'
      | 'showGrid'
      | 'snapToGrid'
      | 'gridSize'
      | 'units'
      | 'pageSize'
      | 'pageOrientation'
      | 'pageColor'
      | 'simpleView'
      | 'toolbox';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramConnectorLineEnd =
      | 'none'
      | 'arrow'
      | 'outlinedTriangle'
      | 'filledTriangle';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramConnectorLineType = 'straight' | 'orthogonal';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramConnectorPosition = 'start' | 'end';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramDataLayoutType = 'auto' | 'off' | 'tree' | 'layered';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramExportFormat = 'svg' | 'png' | 'jpg';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramItemType = 'shape' | 'connector';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramPanelVisibility =
      | 'auto'
      | 'visible'
      | 'collapsed'
      | 'disabled';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramRequestEditOperationReason =
      | 'checkUIElementAvailability'
      | 'modelModification';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramShapeCategory =
      | 'general'
      | 'flowchart'
      | 'orgChart'
      | 'containers'
      | 'custom';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramShapeType =
      | 'text'
      | 'rectangle'
      | 'ellipse'
      | 'cross'
      | 'triangle'
      | 'diamond'
      | 'heart'
      | 'pentagon'
      | 'hexagon'
      | 'octagon'
      | 'star'
      | 'arrowLeft'
      | 'arrowTop'
      | 'arrowRight'
      | 'arrowBottom'
      | 'arrowNorthSouth'
      | 'arrowEastWest'
      | 'process'
      | 'decision'
      | 'terminator'
      | 'predefinedProcess'
      | 'document'
      | 'multipleDocuments'
      | 'manualInput'
      | 'preparation'
      | 'data'
      | 'database'
      | 'hardDisk'
      | 'internalStorage'
      | 'paperTape'
      | 'manualOperation'
      | 'delay'
      | 'storedData'
      | 'display'
      | 'merge'
      | 'connector'
      | 'or'
      | 'summingJunction'
      | 'verticalContainer'
      | 'horizontalContainer'
      | 'cardWithImageOnLeft'
      | 'cardWithImageOnTop'
      | 'cardWithImageOnRight';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramToolboxDisplayMode = 'icons' | 'texts';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type DiagramUnits = 'in' | 'cm' | 'px';
    /**
     * [descr:_ui_diagram_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxDiagram>;
    /**
     * [descr:_ui_diagram_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxDiagram>;
    /**
     * [descr:_ui_diagram_ItemClickEvent]
     */
    export type ItemClickEvent = events.EventInfo<dxDiagram> & {
      /**
       * [descr:_ui_diagram_ItemClickEvent.item]
       */
      readonly item: Item;
    };
    /**
     * [descr:_ui_diagram_ItemDblClickEvent]
     */
    export type ItemDblClickEvent = events.EventInfo<dxDiagram> & {
      /**
       * [descr:_ui_diagram_ItemDblClickEvent.item]
       */
      readonly item: Item;
    };
    /**
     * [descr:_ui_diagram_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxDiagram> &
    events.ChangedOptionInfo;
    export type Properties = dxDiagramOptions;
    /**
     * [descr:_ui_diagram_RequestEditOperationEvent]
     */
    export type RequestEditOperationEvent =
      events.EventInfo<dxDiagram> & {
        /**
         * [descr:_ui_diagram_RequestEditOperationEvent.operation]
         */
        readonly operation:
        | 'addShape'
        | 'addShapeFromToolbox'
        | 'deleteShape'
        | 'deleteConnector'
        | 'changeConnection'
        | 'changeConnectorPoints';
        /**
         * [descr:_ui_diagram_RequestEditOperationEvent.args]
         */
        readonly args:
        | dxDiagramAddShapeArgs
        | dxDiagramAddShapeFromToolboxArgs
        | dxDiagramDeleteShapeArgs
        | dxDiagramDeleteConnectorArgs
        | dxDiagramChangeConnectionArgs
        | dxDiagramChangeConnectorPointsArgs
        | dxDiagramBeforeChangeShapeTextArgs
        | dxDiagramChangeShapeTextArgs
        | dxDiagramBeforeChangeConnectorTextArgs
        | dxDiagramChangeConnectorTextArgs
        | dxDiagramResizeShapeArgs
        | dxDiagramMoveShapeArgs;
        /**
         * [descr:_ui_diagram_RequestEditOperationEvent.reason]
         */
        readonly reason: DiagramRequestEditOperationReason;
        /**
         * [descr:_ui_diagram_RequestEditOperationEvent.allowed]
         */
        allowed?: boolean;
      };
    /**
     * [descr:_ui_diagram_RequestLayoutUpdateEvent]
     */
    export type RequestLayoutUpdateEvent =
      events.EventInfo<dxDiagram> & {
        /**
         * [descr:_ui_diagram_RequestLayoutUpdateEvent.changes]
         */
        readonly changes: any[];
        /**
         * [descr:_ui_diagram_RequestLayoutUpdateEvent.allowed]
         */
        allowed?: boolean;
      };
    /**
     * [descr:_ui_diagram_SelectionChangedEvent]
     */
    export type SelectionChangedEvent =
      events.EventInfo<dxDiagram> & {
        /**
         * [descr:_ui_diagram_SelectionChangedEvent.items]
         */
        readonly items: Item[];
      };
  }
  /**
   * [descr:dxDiagramAddShapeArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramAddShapeArgs {
    /**
     * [descr:dxDiagramAddShapeArgs.shape]
     */
    shape?: dxDiagramShape;
    /**
     * [descr:dxDiagramAddShapeArgs.position]
     */
    position?: {
      /**
       * [descr:dxDiagramAddShapeArgs.position.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramAddShapeArgs.position.y]
       */
      y?: number;
    };
  }
  /**
   * [descr:dxDiagramAddShapeFromToolboxArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramAddShapeFromToolboxArgs {
    /**
     * [descr:dxDiagramAddShapeFromToolboxArgs.shapeType]
     */
    shapeType?: dxDiagram.DiagramShapeType | string;
  }
  /**
   * [descr:dxDiagramBeforeChangeConnectorTextArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramBeforeChangeConnectorTextArgs {
    /**
     * [descr:dxDiagramBeforeChangeConnectorTextArgs.connector]
     */
    connector?: dxDiagramConnector;
    /**
     * [descr:dxDiagramBeforeChangeConnectorTextArgs.index]
     */
    index?: number;
  }
  /**
   * [descr:dxDiagramBeforeChangeShapeTextArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramBeforeChangeShapeTextArgs {
    /**
     * [descr:dxDiagramBeforeChangeShapeTextArgs.shape]
     */
    shape?: dxDiagramShape;
  }
  /**
   * [descr:dxDiagramChangeConnectionArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramChangeConnectionArgs {
    /**
     * [descr:dxDiagramChangeConnectionArgs.newShape]
     */
    newShape?: dxDiagramShape;
    /**
     * [descr:dxDiagramChangeConnectionArgs.oldShape]
     */
    oldShape?: dxDiagramShape;
    /**
     * [descr:dxDiagramChangeConnectionArgs.connector]
     */
    connector?: dxDiagramConnector;
    /**
     * [descr:dxDiagramChangeConnectionArgs.connectionPointIndex]
     */
    connectionPointIndex?: number;
    /**
     * [descr:dxDiagramChangeConnectionArgs.connectorPosition]
     */
    connectorPosition?: dxDiagram.DiagramConnectorPosition;
  }
  /**
   * [descr:dxDiagramChangeConnectorPointsArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramChangeConnectorPointsArgs {
    /**
     * [descr:dxDiagramChangeConnectorPointsArgs.connector]
     */
    connector?: dxDiagramConnector;
    /**
     * [descr:dxDiagramChangeConnectorPointsArgs.newPoints]
     */
    newPoints?: {
      /**
       * [descr:dxDiagramChangeConnectorPointsArgs.newPoints.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramChangeConnectorPointsArgs.newPoints.y]
       */
      y?: number;
    }[];
    /**
     * [descr:dxDiagramChangeConnectorPointsArgs.oldPoints]
     */
    oldPoints?: {
      /**
       * [descr:dxDiagramChangeConnectorPointsArgs.oldPoints.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramChangeConnectorPointsArgs.oldPoints.y]
       */
      y?: number;
    }[];
  }
  /**
   * [descr:dxDiagramChangeConnectorTextArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramChangeConnectorTextArgs {
    /**
     * [descr:dxDiagramChangeConnectorTextArgs.connector]
     */
    connector?: dxDiagramConnector;
    /**
     * [descr:dxDiagramChangeConnectorTextArgs.index]
     */
    index?: number;
    /**
     * [descr:dxDiagramChangeConnectorTextArgs.text]
     */
    text?: string;
  }
  /**
   * [descr:dxDiagramChangeShapeTextArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramChangeShapeTextArgs {
    /**
     * [descr:dxDiagramChangeShapeTextArgs.shape]
     */
    shape?: dxDiagramShape;
    /**
     * [descr:dxDiagramChangeShapeTextArgs.text]
     */
    text?: string;
  }
  /**
   * [descr:dxDiagramConnector]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramConnector extends dxDiagram.Item {
    /**
     * [descr:dxDiagramConnector.fromKey]
     */
    fromKey?: any;
    /**
     * [descr:dxDiagramConnector.fromId]
     */
    fromId?: string;
    /**
     * [descr:dxDiagramConnector.fromPointIndex]
     */
    fromPointIndex?: number;
    /**
     * [descr:dxDiagramConnector.points]
     */
    points?: {
      /**
       * [descr:dxDiagramConnector.points.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramConnector.points.y]
       */
      y?: number;
    }[];

    /**
     * [descr:dxDiagramConnector.texts]
     */
    texts?: string[];
    /**
     * [descr:dxDiagramConnector.toKey]
     */
    toKey?: any;
    /**
     * [descr:dxDiagramConnector.toId]
     */
    toId?: string;
    /**
     * [descr:dxDiagramConnector.toPointIndex]
     */
    toPointIndex?: number;
  }
  /**
   * [descr:dxDiagramCustomCommand]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramCustomCommand {
    /**
     * [descr:dxDiagramCustomCommand.name]
     */
    name?: string;
    /**
     * [descr:dxDiagramCustomCommand.text]
     */
    text?: string;
    /**
     * [descr:dxDiagramCustomCommand.icon]
     */
    icon?: string;
    /**
     * [descr:dxDiagramCustomCommand.items]
     */
    items?: dxDiagramCustomCommand[];
    /**
     * [descr:dxDiagramCustomCommand.location]
     */
    location?: common.ToolbarItemLocation;
  }
  /**
   * [descr:dxDiagramDeleteConnectorArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramDeleteConnectorArgs {
    /**
     * [descr:dxDiagramDeleteConnectorArgs.connector]
     */
    connector?: dxDiagramConnector;
  }
  /**
   * [descr:dxDiagramDeleteShapeArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramDeleteShapeArgs {
    /**
     * [descr:dxDiagramDeleteShapeArgs.shape]
     */
    shape?: dxDiagramShape;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramItem {
    /**
     * [descr:dxDiagramItem.dataItem]
     */
    dataItem?: any;
    /**
     * [descr:dxDiagramItem.id]
     */
    id?: string;
    /**
     * [descr:dxDiagramItem.key]
     */
    key?: Object;
    /**
     * [descr:dxDiagramItem.itemType]
     */
    itemType?: dxDiagram.DiagramItemType;
  }
  /**
   * [descr:dxDiagramMoveShapeArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramMoveShapeArgs {
    /**
     * [descr:dxDiagramMoveShapeArgs.shape]
     */
    shape?: dxDiagramShape;
    /**
     * [descr:dxDiagramMoveShapeArgs.newPosition]
     */
    newPosition?: {
      /**
       * [descr:dxDiagramMoveShapeArgs.newPosition.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramMoveShapeArgs.newPosition.y]
       */
      y?: number;
    };
    /**
     * [descr:dxDiagramMoveShapeArgs.oldPosition]
     */
    oldPosition?: {
      /**
       * [descr:dxDiagramMoveShapeArgs.oldPosition.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramMoveShapeArgs.oldPosition.y]
       */
      y?: number;
    };
  }
  /**
   * [descr:dxDiagramOptions]
   * @deprecated [depNote:dxDiagramOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramOptions extends WidgetOptions<dxDiagram> {
    /**
     * [descr:dxDiagramOptions.autoZoomMode]
     */
    autoZoomMode?: dxDiagram.DiagramAutoZoomMode;
    /**
     * [descr:dxDiagramOptions.contextMenu]
     */
    contextMenu?: {
      /**
       * [descr:dxDiagramOptions.contextMenu.commands]
       */
      commands?: dxDiagram.DiagramCommand[];
      /**
       * [descr:dxDiagramOptions.contextMenu.enabled]
       */
      enabled?: boolean;
    };
    /**
     * [descr:dxDiagramOptions.contextToolbox]
     */
    contextToolbox?: {
      /**
       * [descr:dxDiagramOptions.contextToolbox.category]
       */
      category?: dxDiagram.DiagramShapeCategory | string;
      /**
       * [descr:dxDiagramOptions.contextToolbox.displayMode]
       */
      displayMode?: dxDiagram.DiagramToolboxDisplayMode;
      /**
       * [descr:dxDiagramOptions.contextToolbox.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxDiagramOptions.contextToolbox.shapeIconsPerRow]
       */
      shapeIconsPerRow?: number;
      /**
       * [descr:dxDiagramOptions.contextToolbox.shapes]
       */
      shapes?: dxDiagram.DiagramShapeType[] | string[];
      /**
       * [descr:dxDiagramOptions.contextToolbox.width]
       */
      width?: number;
    };
    /**
     * [descr:dxDiagramOptions.onCustomCommand]
     */
    onCustomCommand?: (e: dxDiagram.CustomCommandEvent) => void;
    /**
     * [descr:dxDiagramOptions.customShapeTemplate]
     */
    customShapeTemplate?:
    | core.template
    | ((
      container: core.DxElement<SVGElement>,
      data: dxDiagram.CustomShapeTemplateData
    ) => any);
    /**
     * [descr:dxDiagramOptions.customShapeToolboxTemplate]
     */
    customShapeToolboxTemplate?:
    | core.template
    | ((
      container: core.DxElement<SVGElement>,
      data: dxDiagram.CustomShapeToolboxTemplateData
    ) => any);
    /**
     * [descr:dxDiagramOptions.customShapes]
     */
    customShapes?: {
      /**
       * [descr:dxDiagramOptions.customShapes.allowEditImage]
       */
      allowEditImage?: boolean;
      /**
       * [descr:dxDiagramOptions.customShapes.allowEditText]
       */
      allowEditText?: boolean;
      /**
       * [descr:dxDiagramOptions.customShapes.allowResize]
       */
      allowResize?: boolean;
      /**
       * [descr:dxDiagramOptions.customShapes.backgroundImageHeight]
       */
      backgroundImageHeight?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.backgroundImageLeft]
       */
      backgroundImageLeft?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.backgroundImageTop]
       */
      backgroundImageTop?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.backgroundImageUrl]
       */
      backgroundImageUrl?: string;
      /**
       * [descr:dxDiagramOptions.customShapes.backgroundImageToolboxUrl]
       */
      backgroundImageToolboxUrl?: string;
      /**
       * [descr:dxDiagramOptions.customShapes.backgroundImageWidth]
       */
      backgroundImageWidth?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.baseType]
       */
      baseType?: dxDiagram.DiagramShapeType | string;
      /**
       * [descr:dxDiagramOptions.customShapes.category]
       */
      category?: string;
      /**
       * [descr:dxDiagramOptions.customShapes.connectionPoints]
       */
      connectionPoints?: {
        /**
         * [descr:dxDiagramOptions.customShapes.connectionPoints.x]
         */
        x?: number;
        /**
         * [descr:dxDiagramOptions.customShapes.connectionPoints.y]
         */
        y?: number;
      }[];
      /**
       * [descr:dxDiagramOptions.customShapes.defaultHeight]
       */
      defaultHeight?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.defaultImageUrl]
       */
      defaultImageUrl?: string;
      /**
       * [descr:dxDiagramOptions.customShapes.defaultText]
       */
      defaultText?: string;
      /**
       * [descr:dxDiagramOptions.customShapes.defaultWidth]
       */
      defaultWidth?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.imageHeight]
       */
      imageHeight?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.imageLeft]
       */
      imageLeft?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.imageTop]
       */
      imageTop?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.imageWidth]
       */
      imageWidth?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.keepRatioOnAutoSize]
       */
      keepRatioOnAutoSize?: boolean;
      /**
       * [descr:dxDiagramOptions.customShapes.maxHeight]
       */
      maxHeight?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.maxWidth]
       */
      maxWidth?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.minHeight]
       */
      minHeight?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.minWidth]
       */
      minWidth?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.template]
       */
      template?:
      | core.template
      | ((
        container: core.DxElement<SVGElement>,
        data: dxDiagram.CustomShapeTemplateData
      ) => any);
      /**
       * [descr:dxDiagramOptions.customShapes.templateHeight]
       */
      templateHeight?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.templateLeft]
       */
      templateLeft?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.templateTop]
       */
      templateTop?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.templateWidth]
       */
      templateWidth?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.textHeight]
       */
      textHeight?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.textLeft]
       */
      textLeft?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.textTop]
       */
      textTop?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.textWidth]
       */
      textWidth?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.title]
       */
      title?: string;
      /**
       * [descr:dxDiagramOptions.customShapes.toolboxTemplate]
       */
      toolboxTemplate?:
      | core.template
      | ((
        container: core.DxElement<SVGElement>,
        data: dxDiagram.CustomShapeToolboxTemplateData
      ) => any);
      /**
       * [descr:dxDiagramOptions.customShapes.toolboxWidthToHeightRatio]
       */
      toolboxWidthToHeightRatio?: number;
      /**
       * [descr:dxDiagramOptions.customShapes.type]
       */
      type?: string;
    }[];
    /**
     * [descr:dxDiagramOptions.defaultItemProperties]
     */
    defaultItemProperties?: {
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.style]
       */
      style?: Object;
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.textStyle]
       */
      textStyle?: Object;
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.connectorLineType]
       */
      connectorLineType?: dxDiagram.DiagramConnectorLineType;
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.connectorLineStart]
       */
      connectorLineStart?: dxDiagram.DiagramConnectorLineEnd;
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.connectorLineEnd]
       */
      connectorLineEnd?: dxDiagram.DiagramConnectorLineEnd;
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.shapeMinWidth]
       */
      shapeMinWidth?: number;
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.shapeMaxWidth]
       */
      shapeMaxWidth?: number;
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.shapeMinHeight]
       */
      shapeMinHeight?: number;
      /**
       * [descr:dxDiagramOptions.defaultItemProperties.shapeMaxHeight]
       */
      shapeMaxHeight?: number;
    };
    /**
     * [descr:dxDiagramOptions.editing]
     */
    editing?: {
      /**
       * [descr:dxDiagramOptions.editing.allowAddShape]
       */
      allowAddShape?: boolean;
      /**
       * [descr:dxDiagramOptions.editing.allowDeleteShape]
       */
      allowDeleteShape?: boolean;
      /**
       * [descr:dxDiagramOptions.editing.allowDeleteConnector]
       */
      allowDeleteConnector?: boolean;
      /**
       * [descr:dxDiagramOptions.editing.allowChangeConnection]
       */
      allowChangeConnection?: boolean;
      /**
       * [descr:dxDiagramOptions.editing.allowChangeConnectorPoints]
       */
      allowChangeConnectorPoints?: boolean;
      /**
       * [descr:dxDiagramOptions.editing.allowChangeConnectorText]
       */
      allowChangeConnectorText?: boolean;
      /**
       * [descr:dxDiagramOptions.editing.allowChangeShapeText]
       */
      allowChangeShapeText?: boolean;
      /**
       * [descr:dxDiagramOptions.editing.allowResizeShape]
       */
      allowResizeShape?: boolean;
      /**
       * [descr:dxDiagramOptions.editing.allowMoveShape]
       */
      allowMoveShape?: boolean;
    };
    /**
     * [descr:dxDiagramOptions.edges]
     */
    edges?: {
      /**
       * [descr:dxDiagramOptions.edges.customDataExpr]
       */
      customDataExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.dataSource]
       */
      dataSource?: data.DataSource.DataSourceLike<any> | null;
      /**
       * [descr:dxDiagramOptions.edges.fromExpr]
       */
      fromExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.fromLineEndExpr]
       */
      fromLineEndExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.fromPointIndexExpr]
       */
      fromPointIndexExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.keyExpr]
       */
      keyExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.lineTypeExpr]
       */
      lineTypeExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.lockedExpr]
       */
      lockedExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.pointsExpr]
       */
      pointsExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.styleExpr]
       */
      styleExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.textExpr]
       */
      textExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.textStyleExpr]
       */
      textStyleExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.toExpr]
       */
      toExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.toLineEndExpr]
       */
      toLineEndExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.toPointIndexExpr]
       */
      toPointIndexExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.edges.zIndexExpr]
       */
      zIndexExpr?: string | ((data: any, value?: any) => any);
    };
    /**
     * [descr:dxDiagramOptions.export]
     */
    export?: {
      /**
       * [descr:dxDiagramOptions.export.fileName]
       */
      fileName?: string;
    };
    /**
     * [descr:dxDiagramOptions.fullScreen]
     */
    fullScreen?: boolean;
    /**
     * [descr:dxDiagramOptions.gridSize]
     */
    gridSize?:
    | number
    | {
      /**
           * [descr:dxDiagramOptions.gridSize.items]
           */
      items?: number[];
      /**
           * [descr:dxDiagramOptions.gridSize.value]
           */
      value?: number;
    };
    /**
     * [descr:dxDiagramOptions.nodes]
     */
    nodes?: {
      /**
       * [descr:dxDiagramOptions.nodes.autoLayout]
       */
      autoLayout?:
      | dxDiagram.DiagramDataLayoutType
      | {
        /**
             * [descr:dxDiagramOptions.nodes.autoLayout.orientation]
             */
        orientation?: common.Orientation;
        /**
             * [descr:dxDiagramOptions.nodes.autoLayout.type]
             */
        type?: dxDiagram.DiagramDataLayoutType;
      };
      /**
       * [descr:dxDiagramOptions.nodes.autoSizeEnabled]
       */
      autoSizeEnabled?: boolean;
      /**
       * [descr:dxDiagramOptions.nodes.containerKeyExpr]
       */
      containerKeyExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.containerChildrenExpr]
       */
      containerChildrenExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.customDataExpr]
       */
      customDataExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.dataSource]
       */
      dataSource?: data.DataSource.DataSourceLike<any> | null;
      /**
       * [descr:dxDiagramOptions.nodes.heightExpr]
       */
      heightExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.imageUrlExpr]
       */
      imageUrlExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.itemsExpr]
       */
      itemsExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.keyExpr]
       */
      keyExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.leftExpr]
       */
      leftExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.lockedExpr]
       */
      lockedExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.parentKeyExpr]
       */
      parentKeyExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.styleExpr]
       */
      styleExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.textExpr]
       */
      textExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.textStyleExpr]
       */
      textStyleExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.topExpr]
       */
      topExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.typeExpr]
       */
      typeExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.widthExpr]
       */
      widthExpr?: string | ((data: any, value?: any) => any);
      /**
       * [descr:dxDiagramOptions.nodes.zIndexExpr]
       */
      zIndexExpr?: string | ((data: any, value?: any) => any);
    };
    /**
     * [descr:dxDiagramOptions.hasChanges]
     */
    hasChanges?: boolean;
    /**
     * [descr:dxDiagramOptions.onItemClick]
     */
    onItemClick?: (e: dxDiagram.ItemClickEvent) => void;
    /**
     * [descr:dxDiagramOptions.onItemDblClick]
     */
    onItemDblClick?: (e: dxDiagram.ItemDblClickEvent) => void;
    /**
     * [descr:dxDiagramOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxDiagram.SelectionChangedEvent
    ) => void;
    /**
     * [descr:dxDiagramOptions.onRequestEditOperation]
     */
    onRequestEditOperation?: (
      e: dxDiagram.RequestEditOperationEvent
    ) => void;
    /**
     * [descr:dxDiagramOptions.onRequestLayoutUpdate]
     */
    onRequestLayoutUpdate?: (
      e: dxDiagram.RequestLayoutUpdateEvent
    ) => void;
    /**
     * [descr:dxDiagramOptions.pageColor]
     */
    pageColor?: string;
    /**
     * [descr:dxDiagramOptions.pageOrientation]
     */
    pageOrientation?: common.PageOrientation;
    /**
     * [descr:dxDiagramOptions.pageSize]
     */
    pageSize?: {
      /**
       * [descr:dxDiagramOptions.pageSize.height]
       */
      height?: number;
      /**
       * [descr:dxDiagramOptions.pageSize.items]
       */
      items?: {
        /**
         * [descr:dxDiagramOptions.pageSize.items.height]
         */
        height?: number;
        /**
         * [descr:dxDiagramOptions.pageSize.items.text]
         */
        text?: string;
        /**
         * [descr:dxDiagramOptions.pageSize.items.width]
         */
        width?: number;
      }[];
      /**
       * [descr:dxDiagramOptions.pageSize.width]
       */
      width?: number;
    };
    /**
     * [descr:dxDiagramOptions.propertiesPanel]
     */
    propertiesPanel?: {
      /**
       * [descr:dxDiagramOptions.propertiesPanel.tabs]
       */
      tabs?: {
        /**
         * [descr:dxDiagramOptions.propertiesPanel.tabs.commands]
         */
        commands?: dxDiagram.DiagramCommand[];
        /**
         * [descr:dxDiagramOptions.propertiesPanel.tabs.groups]
         */
        groups?: {
          /**
           * [descr:dxDiagramOptions.propertiesPanel.tabs.groups.commands]
           */
          commands?: dxDiagram.DiagramCommand[];
          /**
           * [descr:dxDiagramOptions.propertiesPanel.tabs.groups.title]
           */
          title?: string;
        }[];
        /**
         * [descr:dxDiagramOptions.propertiesPanel.tabs.title]
         */
        title?: string;
      }[];
      /**
       * [descr:dxDiagramOptions.propertiesPanel.visibility]
       */
      visibility?: dxDiagram.DiagramPanelVisibility;
    };
    /**
     * [descr:dxDiagramOptions.readOnly]
     */
    readOnly?: boolean;
    /**
     * [descr:dxDiagramOptions.showGrid]
     */
    showGrid?: boolean;
    /**
     * [descr:dxDiagramOptions.simpleView]
     */
    simpleView?: boolean;
    /**
     * [descr:dxDiagramOptions.useNativeScrolling]
     */
    useNativeScrolling?: boolean;
    /**
     * [descr:dxDiagramOptions.snapToGrid]
     */
    snapToGrid?: boolean;
    /**
     * [descr:dxDiagramOptions.mainToolbar]
     */
    mainToolbar?: {
      /**
       * [descr:dxDiagramOptions.mainToolbar.commands]
       */
      commands?: dxDiagram.DiagramCommand[];
      /**
       * [descr:dxDiagramOptions.mainToolbar.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxDiagramOptions.historyToolbar]
     */
    historyToolbar?: {
      /**
       * [descr:dxDiagramOptions.historyToolbar.commands]
       */
      commands?: dxDiagram.DiagramCommand[];
      /**
       * [descr:dxDiagramOptions.historyToolbar.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxDiagramOptions.viewToolbar]
     */
    viewToolbar?: {
      /**
       * [descr:dxDiagramOptions.viewToolbar.commands]
       */
      commands?: dxDiagram.DiagramCommand[];
      /**
       * [descr:dxDiagramOptions.viewToolbar.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxDiagramOptions.toolbox]
     */
    toolbox?: {
      /**
       * [descr:dxDiagramOptions.toolbox.groups]
       */
      groups?:
      | {
        /**
             * [descr:dxDiagramOptions.toolbox.groups.category]
             */
        category?: dxDiagram.DiagramShapeCategory | string;
        /**
             * [descr:dxDiagramOptions.toolbox.groups.displayMode]
             */
        displayMode?: dxDiagram.DiagramToolboxDisplayMode;
        /**
             * [descr:dxDiagramOptions.toolbox.groups.expanded]
             */
        expanded?: boolean;
        /**
             * [descr:dxDiagramOptions.toolbox.groups.shapes]
             */
        shapes?:
        | dxDiagram.DiagramShapeType[]
        | string[];
        /**
             * [descr:dxDiagramOptions.toolbox.groups.title]
             */
        title?: string;
      }[]
      | dxDiagram.DiagramShapeCategory[];
      /**
       * [descr:dxDiagramOptions.toolbox.shapeIconsPerRow]
       */
      shapeIconsPerRow?: number;
      /**
       * [descr:dxDiagramOptions.toolbox.showSearch]
       */
      showSearch?: boolean;
      /**
       * [descr:dxDiagramOptions.toolbox.visibility]
       */
      visibility?: dxDiagram.DiagramPanelVisibility;
      /**
       * [descr:dxDiagramOptions.toolbox.width]
       */
      width?: number;
    };
    /**
     * [descr:dxDiagramOptions.units]
     */
    units?: dxDiagram.DiagramUnits;
    /**
     * [descr:dxDiagramOptions.viewUnits]
     */
    viewUnits?: dxDiagram.DiagramUnits;
    /**
     * [descr:dxDiagramOptions.zoomLevel]
     */
    zoomLevel?:
    | number
    | {
      /**
           * [descr:dxDiagramOptions.zoomLevel.items]
           */
      items?: number[];
      /**
           * [descr:dxDiagramOptions.zoomLevel.value]
           */
      value?: number;
    };
  }
  /**
   * [descr:dxDiagramResizeShapeArgs]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramResizeShapeArgs {
    /**
     * [descr:dxDiagramResizeShapeArgs.shape]
     */
    shape?: dxDiagramShape;
    /**
     * [descr:dxDiagramResizeShapeArgs.newSize]
     */
    newSize?: {
      /**
       * [descr:dxDiagramResizeShapeArgs.newSize.height]
       */
      height?: number;
      /**
       * [descr:dxDiagramResizeShapeArgs.newSize.width]
       */
      width?: number;
    };
    /**
     * [descr:dxDiagramResizeShapeArgs.oldSize]
     */
    oldSize?: {
      /**
       * [descr:dxDiagramResizeShapeArgs.oldSize.height]
       */
      height?: number;
      /**
       * [descr:dxDiagramResizeShapeArgs.oldSize.width]
       */
      width?: number;
    };
  }
  /**
   * [descr:dxDiagramShape]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDiagramShape extends dxDiagram.Item {
    /**
     * [descr:dxDiagramShape.text]
     */
    text?: string;
    /**
     * [descr:dxDiagramShape.type]
     */
    type?: dxDiagram.DiagramShapeType | string;
    /**
     * [descr:dxDiagramShape.position]
     */
    position?: {
      /**
       * [descr:dxDiagramShape.position.x]
       */
      x?: number;
      /**
       * [descr:dxDiagramShape.position.y]
       */
      y?: number;
    };

    /**
     * [descr:dxDiagramShape.size]
     */
    size?: {
      /**
       * [descr:dxDiagramShape.size.height]
       */
      height?: number;
      /**
       * [descr:dxDiagramShape.size.width]
       */
      width?: number;
    };
    /**
     * [descr:dxDiagramShape.attachedConnectorIds]
     */
    attachedConnectorIds?: string[];
    /**
     * [descr:dxDiagramShape.containerId]
     */
    containerId?: string;
    /**
     * [descr:dxDiagramShape.containerChildItemIds]
     */
    containerChildItemIds?: string[];
    /**
     * [descr:dxDiagramShape.containerExpanded]
     */
    containerExpanded?: boolean;
  }
  /**
   * [descr:dxDraggable]
   */
  export class dxDraggable
    extends DOMComponent<dxDraggableOptions>
    implements DraggableBase {}
  namespace dxDraggable {
    /**
     * [descr:_ui_draggable_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxDraggable>;
    /**
     * [descr:_ui_draggable_DragEndEvent]
     */
    export type DragEndEvent = events.Cancelable &
    events.NativeEventInfo<
    dxDraggable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_draggable_DragEndEvent.itemData]
         */
      readonly itemData?: any;
      /**
         * [descr:_ui_draggable_DragEndEvent.itemElement]
         */
      readonly itemElement?: core.DxElement;
      /**
         * [descr:_ui_draggable_DragEndEvent.fromComponent]
         */
      readonly fromComponent: dxSortable | dxDraggable;
      /**
         * [descr:_ui_draggable_DragEndEvent.toComponent]
         */
      readonly toComponent: dxSortable | dxDraggable;
      /**
         * [descr:_ui_draggable_DragEndEvent.fromData]
         */
      readonly fromData?: any;
      /**
         * [descr:_ui_draggable_DragEndEvent.toData]
         */
      readonly toData?: any;
    };
    /**
     * [descr:_ui_draggable_DragMoveEvent]
     */
    export type DragMoveEvent = events.Cancelable &
    events.NativeEventInfo<
    dxDraggable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_draggable_DragMoveEvent.itemData]
         */
      readonly itemData?: any;
      /**
         * [descr:_ui_draggable_DragMoveEvent.itemElement]
         */
      readonly itemElement?: core.DxElement;
      /**
         * [descr:_ui_draggable_DragMoveEvent.fromComponent]
         */
      readonly fromComponent: dxSortable | dxDraggable;
      /**
         * [descr:_ui_draggable_DragMoveEvent.toComponent]
         */
      readonly toComponent: dxSortable | dxDraggable;
      /**
         * [descr:_ui_draggable_DragMoveEvent.fromData]
         */
      readonly fromData?: any;
      /**
         * [descr:_ui_draggable_DragMoveEvent.toData]
         */
      readonly toData?: any;
    };
    /**
     * [descr:_ui_draggable_DragStartEvent]
     */
    export type DragStartEvent = events.Cancelable &
    events.NativeEventInfo<
    dxDraggable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_draggable_DragStartEvent.itemData]
         */
      itemData?: any;
      /**
         * [descr:_ui_draggable_DragStartEvent.itemElement]
         */
      readonly itemElement?: core.DxElement;
      /**
         * [descr:_ui_draggable_DragStartEvent.fromData]
         */
      readonly fromData?: any;
    };
    export interface DragTemplateData {
      readonly itemData?: any;
      readonly itemElement: core.DxElement;
    }
    /**
     * [descr:_ui_draggable_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxDraggable>;
    /**
     * [descr:_ui_draggable_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxDraggable> &
    events.ChangedOptionInfo;
    export type Properties = dxDraggableOptions;
  }
  /**
   * [descr:dxDraggableOptions]
   * @deprecated [depNote:dxDraggableOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDraggableOptions
    extends DraggableBaseOptions<dxDraggable> {
    /**
     * [descr:dxDraggableOptions.clone]
     */
    clone?: boolean;
    /**
     * [descr:dxDraggableOptions.dragTemplate]
     */
    dragTemplate?:
    | core.template
    | ((
      dragInfo: dxDraggable.DragTemplateData,
      containerElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxDraggableOptions.onDragEnd]
     */
    onDragEnd?: (e: dxDraggable.DragEndEvent) => void;
    /**
     * [descr:dxDraggableOptions.onDragMove]
     */
    onDragMove?: (e: dxDraggable.DragMoveEvent) => void;
    /**
     * [descr:dxDraggableOptions.onDragStart]
     */
    onDragStart?: (e: dxDraggable.DragStartEvent) => void;
  }
  /**
   * [descr:dxDrawer]
   */
  export class dxDrawer extends Widget<dxDrawerOptions> {
    /**
     * [descr:dxDrawer.content()]
     */
    content(): core.DxElement;
    /**
     * [descr:dxDrawer.hide()]
     */
    hide(): core.utils.DxPromise;
    /**
     * [descr:dxDrawer.show()]
     */
    show(): core.utils.DxPromise;
    /**
     * [descr:dxDrawer.toggle()]
     */
    toggle(): core.utils.DxPromise;
  }
  namespace dxDrawer {
    /**
     * [descr:_ui_drawer_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxDrawer>;
    /**
     * [descr:_ui_drawer_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxDrawer>;
    export type OpenedStateMode = 'overlap' | 'shrink' | 'push';
    /**
     * [descr:_ui_drawer_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxDrawer> &
    events.ChangedOptionInfo;
    export type PanelLocation =
      | 'left'
      | 'right'
      | 'top'
      | 'bottom'
      | 'before'
      | 'after';
    export type Properties = dxDrawerOptions;
    export type RevealMode = 'slide' | 'expand';
  }
  /**
   * [descr:dxDrawerOptions]
   * @deprecated [depNote:dxDrawerOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDrawerOptions extends WidgetOptions<dxDrawer> {
    /**
     * [descr:dxDrawerOptions.animationDuration]
     */
    animationDuration?: number;
    /**
     * [descr:dxDrawerOptions.animationEnabled]
     */
    animationEnabled?: boolean;
    /**
     * [descr:dxDrawerOptions.closeOnOutsideClick]
     */
    closeOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxDrawerOptions.maxSize]
     */
    maxSize?: number;
    /**
     * [descr:dxDrawerOptions.minSize]
     */
    minSize?: number;
    /**
     * [descr:dxDrawerOptions.opened]
     */
    opened?: boolean;
    /**
     * [descr:dxDrawerOptions.openedStateMode]
     */
    openedStateMode?: dxDrawer.OpenedStateMode;
    /**
     * [descr:dxDrawerOptions.position]
     */
    position?: dxDrawer.PanelLocation;
    /**
     * [descr:dxDrawerOptions.revealMode]
     */
    revealMode?: dxDrawer.RevealMode;
    /**
     * [descr:dxDrawerOptions.shading]
     */
    shading?: boolean;
    /**
     * [descr:dxDrawerOptions.template]
     */
    template?:
    | core.template
    | ((Element: core.DxElement) => any);
  }
  /**
   * [descr:dxDropDownBox]
   */
  export class dxDropDownBox extends dxDropDownEditor<dxDropDownBoxOptions> {
    getDataSource(): data.DataSource;
  }
  namespace dxDropDownBox {
    /**
     * [descr:_ui_drop_down_box_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxDropDownBox
    >;
    /**
     * [descr:_ui_drop_down_box_ClosedEvent]
     */
    export type ClosedEvent = events.EventInfo<dxDropDownBox>;
    export interface ContentTemplateData {
      component: dxDropDownBox;
      readonly value?: any;
    }
    /**
     * [descr:_ui_drop_down_box_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxDropDownBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_drop_down_box_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxDropDownBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_drop_down_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxDropDownBox>;
    export type DropDownButtonTemplateData =
      dxDropDownEditor.DropDownButtonTemplateDataModel;
    /**
     * [descr:_ui_drop_down_box_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxDropDownBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_drop_down_box_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxDropDownBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_drop_down_box_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxDropDownBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_drop_down_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxDropDownBox>;
    /**
     * [descr:_ui_drop_down_box_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxDropDownBox,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_drop_down_box_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxDropDownBox,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxDropDownBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_drop_down_box_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxDropDownBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_drop_down_box_OpenedEvent]
     */
    export type OpenedEvent = events.EventInfo<dxDropDownBox>;
    /**
     * [descr:_ui_drop_down_box_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxDropDownBox> &
      events.ChangedOptionInfo;
    /**
     * [descr:_ui_drop_down_box_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxDropDownBox,
    ClipboardEvent
    >;
    export type Properties = dxDropDownBoxOptions;
    /**
     * [descr:_ui_drop_down_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxDropDownBox,
    KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxDropDownBoxOptions]
   * @deprecated [depNote:dxDropDownBoxOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownBoxOptions
    extends DataExpressionMixinOptions<dxDropDownBox>,
    dxDropDownEditorOptions<dxDropDownBox> {
    /**
     * [descr:dxDropDownBoxOptions.acceptCustomValue]
     */
    acceptCustomValue?: boolean;
    /**
     * [descr:dxDropDownBoxOptions.contentTemplate]
     */
    contentTemplate?:
    | core.template
    | ((
      templateData: dxDropDownBox.ContentTemplateData,
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxDropDownBoxOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<any> | null;
    /**
     * [descr:dxDropDownBoxOptions.displayValueFormatter]
     */
    displayValueFormatter?: (value: string | any[]) => string;
    /**
     * [descr:dxDropDownBoxOptions.fieldTemplate]
     */
    fieldTemplate?:
    | core.template
    | ((
      value: any,
      fieldElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxDropDownBoxOptions.items]
     */
    items?: any[];
    /**
     * [descr:dxDropDownBoxOptions.openOnFieldClick]
     */
    openOnFieldClick?: boolean;
    /**
     * [descr:dxDropDownBoxOptions.valueChangeEvent]
     */
    valueChangeEvent?: string;

    /**
     * [descr:dxDropDownBoxOptions.dropDownOptions]
     */
    dropDownOptions?: dxPopup.Properties;
  }
  /**
   * [descr:dxDropDownButton]
   */
  export class dxDropDownButton extends Widget<dxDropDownButtonOptions> {
    /**
     * [descr:dxDropDownButton.close()]
     */
    close(): core.utils.DxPromise;
    getDataSource(): data.DataSource;
    /**
     * [descr:dxDropDownButton.open()]
     */
    open(): core.utils.DxPromise;
    /**
     * [descr:dxDropDownButton.toggle()]
     */
    toggle(): core.utils.DxPromise;
    /**
     * [descr:dxDropDownButton.toggle(visibility)]
     */
    toggle(visibility: boolean): core.utils.DxPromise;
  }
  namespace dxDropDownButton {
    /**
     * [descr:_ui_drop_down_button_ButtonClickEvent]
     */
    export type ButtonClickEvent = events.NativeEventInfo<
    dxDropDownButton,
    KeyboardEvent | MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_ui_drop_down_button_ButtonClickEvent.selectedItem]
       */
      readonly selectedItem?: any;
    };
    /**
     * [descr:_ui_drop_down_button_ContentReadyEvent]
     */
    export type ContentReadyEvent =
      events.EventInfo<dxDropDownButton>;
    /**
     * [descr:_ui_drop_down_button_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxDropDownButton>;
    /**
     * [descr:_ui_drop_down_button_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxDropDownButton>;
    /**
     * [descr:_ui_drop_down_button_ItemClickEvent]
     */
    export type ItemClickEvent = events.NativeEventInfo<
    dxDropDownButton,
    KeyboardEvent | MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_ui_drop_down_button_ItemClickEvent.itemData]
       */
      readonly itemData?: any;
      /**
       * [descr:_ui_drop_down_button_ItemClickEvent.itemElement]
       */
      readonly itemElement: core.DxElement;
    };
    /**
     * [descr:_ui_drop_down_button_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxDropDownButton> &
      events.ChangedOptionInfo;
    export type Properties = dxDropDownButtonOptions;
    /**
     * [descr:_ui_drop_down_button_SelectionChangedEvent]
     */
    export type SelectionChangedEvent =
      events.EventInfo<dxDropDownButton> & {
        /**
         * [descr:_ui_drop_down_button_SelectionChangedEvent.item]
         */
        readonly item: any;
        /**
         * [descr:_ui_drop_down_button_SelectionChangedEvent.previousItem]
         */
        readonly previousItem: any;
      };
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownButtonItem extends dxList.Item {
    /**
     * [descr:dxDropDownButtonItem.onClick]
     */
    onClick?:
    | ((e: dxDropDownButton.ItemClickEvent) => void)
    | string;
  }
  /**
   * [descr:dxDropDownButtonOptions]
   * @deprecated [depNote:dxDropDownButtonOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownButtonOptions
    extends WidgetOptions<dxDropDownButton> {
    /**
     * [descr:dxDropDownButtonOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<
    dxDropDownButton.Item | any
    > | null;
    /**
     * [descr:dxDropDownButtonOptions.deferRendering]
     */
    deferRendering?: boolean;
    /**
     * [descr:dxDropDownButtonOptions.displayExpr]
     */
    displayExpr?: string | ((itemData: any) => string);
    /**
     * [descr:dxDropDownButtonOptions.dropDownContentTemplate]
     */
    dropDownContentTemplate?:
    | core.template
    | ((
      data: (string | number | any)[] | data.DataSource,
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxDropDownButtonOptions.dropDownOptions]
     */
    dropDownOptions?: dxPopup.Properties;
    /**
     * [descr:dxDropDownButtonOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxDropDownButtonOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxDropDownButtonOptions.icon]
     */
    icon?: string;
    /**
     * [descr:dxDropDownButtonOptions.itemTemplate]
     */
    itemTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxDropDownButtonOptions.items]
     */
    items?: (dxDropDownButton.Item | any)[];
    /**
     * [descr:dxDropDownButtonOptions.keyExpr]
     */
    keyExpr?: string;
    /**
     * [descr:dxDropDownButtonOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:dxDropDownButtonOptions.onButtonClick]
     */
    onButtonClick?:
    | ((e: dxDropDownButton.ButtonClickEvent) => void)
    | string;
    /**
     * [descr:dxDropDownButtonOptions.onItemClick]
     */
    onItemClick?:
    | ((e: dxDropDownButton.ItemClickEvent) => void)
    | string;
    /**
     * [descr:dxDropDownButtonOptions.onSelectionChanged]
     */
    onSelectionChanged?:
    | ((e: dxDropDownButton.SelectionChangedEvent) => void)
    | string;
    /**
     * [descr:dxDropDownButtonOptions.opened]
     */
    opened?: boolean;
    /**
     * [descr:dxDropDownButtonOptions.selectedItem]
     */
    selectedItem?: string | number | any;
    /**
     * [descr:dxDropDownButtonOptions.selectedItemKey]
     */
    selectedItemKey?: string | number;
    /**
     * [descr:dxDropDownButtonOptions.showArrowIcon]
     */
    showArrowIcon?: boolean;
    /**
     * [descr:dxDropDownButtonOptions.splitButton]
     */
    splitButton?: boolean;
    /**
     * [descr:dxDropDownButtonOptions.stylingMode]
     */
    stylingMode?: common.ButtonStyle;
    /**
     * [descr:dxDropDownButtonOptions.text]
     */
    text?: string;
    /**
     * [descr:dxDropDownButtonOptions.useSelectMode]
     */
    useSelectMode?: boolean;
    /**
     * [descr:dxDropDownButtonOptions.wrapItemText]
     */
    wrapItemText?: boolean;
    /**
     * [descr:dxDropDownButtonOptions.useItemTextAsTitle]
     */
    useItemTextAsTitle?: boolean;
  }
  /**
   * [descr:dxDropDownEditor]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxDropDownEditor<TProperties> extends dxTextBox<TProperties> {
    /**
     * [descr:dxDropDownEditor.close()]
     */
    close(): void;
    /**
     * [descr:dxDropDownEditor.content()]
     */
    content(): core.DxElement;
    /**
     * [descr:dxDropDownEditor.field()]
     */
    field(): core.DxElement;
    /**
     * [descr:dxDropDownEditor.open()]
     */
    open(): void;
  }
  namespace dxDropDownEditor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface DropDownButtonTemplateDataModel {
      readonly text?: string;
      readonly icon?: string;
    }
    export type DropDownPredefinedButton = 'clear' | 'dropDown';
  }
  /**
   * [descr:dxDropDownEditorOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownEditorOptions<TComponent>
    extends Omit<dxTextBoxOptions<TComponent>, 'validationMessagePosition'> {
    /**
     * [descr:dxDropDownEditorOptions.acceptCustomValue]
     */
    acceptCustomValue?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.applyValueMode]
     */
    applyValueMode?: common.ApplyValueMode;
    /**
     * [descr:dxDropDownEditorOptions.dropDownOptions]
     */
    dropDownOptions?:
    | dxPopup.Properties
    | dxPopover.Properties;
    /**
     * [descr:dxDropDownEditorOptions.buttons]
     */
    buttons?: (| dxDropDownEditor.DropDownPredefinedButton
    | common.TextEditorButton)[];
    /**
     * [descr:dxDropDownEditorOptions.deferRendering]
     */
    deferRendering?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.dropDownButtonTemplate]
     */
    dropDownButtonTemplate?:
    | core.template
    | ((
      buttonData: dxDropDownEditor.DropDownButtonTemplateDataModel,
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxDropDownEditorOptions.onClosed]
     */
    onClosed?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:dxDropDownEditorOptions.onOpened]
     */
    onOpened?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:dxDropDownEditorOptions.openOnFieldClick]
     */
    openOnFieldClick?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.opened]
     */
    opened?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.showDropDownButton]
     */
    showDropDownButton?: boolean;
    /**
     * [descr:dxDropDownEditorOptions.validationMessagePosition]
     */
    validationMessagePosition?:
    | common.Position
    | common.Mode;
    /**
     * [descr:dxDropDownEditorOptions.value]
     */
    value?: any;
  }
  /**
   * [descr:dxDropDownList]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxDropDownList<
    TProperties,
  > extends dxDropDownEditor<TProperties> {
    getDataSource(): data.DataSource;
  }
  namespace dxDropDownList {
    /**
     * [descr:_ui_drop_down_editor_ui_drop_down_list_SelectionChangedInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SelectionChangedInfo<T = any> {
      /**
       * [descr:_ui_drop_down_editor_ui_drop_down_list_SelectionChangedInfo.selectedItem]
       */
      readonly selectedItem: T;
    }
  }
  /**
   * [descr:dxDropDownListOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxDropDownListOptions<TComponent>
    extends DataExpressionMixinOptions<TComponent>,
    dxDropDownEditorOptions<TComponent> {
    /**
     * [descr:dxDropDownListOptions.displayValue]
     */
    displayValue?: string;
    /**
     * [descr:dxDropDownListOptions.groupTemplate]
     */
    groupTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxDropDownListOptions.grouped]
     */
    grouped?: boolean;
    /**
     * [descr:dxDropDownListOptions.minSearchLength]
     */
    minSearchLength?: number;
    /**
     * [descr:dxDropDownListOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:dxDropDownListOptions.onItemClick]
     */
    onItemClick?: (
      e: events.NativeEventInfo<
      TComponent,
      KeyboardEvent | MouseEvent | PointerEvent
      > &
      events.ItemInfo
    ) => void;
    /**
     * [descr:dxDropDownListOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: events.EventInfo<TComponent> &
      dxDropDownList.SelectionChangedInfo
    ) => void;
    /**
     * [descr:dxDropDownListOptions.onValueChanged]
     */
    onValueChanged?: (
      e: events.NativeEventInfo<
      TComponent,
      KeyboardEvent | MouseEvent | PointerEvent | Event
      > &
      Editor.ValueChangedInfo
    ) => void;
    /**
     * [descr:dxDropDownListOptions.searchEnabled]
     */
    searchEnabled?: boolean;
    /**
     * [descr:dxDropDownListOptions.searchExpr]
     */
    searchExpr?: string | Function | (string | Function)[];
    /**
     * [descr:dxDropDownListOptions.searchMode]
     */
    searchMode?: common.SimplifiedSearchMode;
    /**
     * [descr:dxDropDownListOptions.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:dxDropDownListOptions.selectedItem]
     */
    selectedItem?: any;
    /**
     * [descr:dxDropDownListOptions.showDataBeforeSearch]
     */
    showDataBeforeSearch?: boolean;
    /**
     * [descr:dxDropDownListOptions.value]
     */
    value?: any;
    /**
     * [descr:dxDropDownListOptions.valueChangeEvent]
     */
    valueChangeEvent?: string;
    /**
     * [descr:dxDropDownListOptions.wrapItemText]
     */
    wrapItemText?: boolean;
    /**
     * [descr:dxDropDownListOptions.useItemTextAsTitle]
     */
    useItemTextAsTitle?: boolean;
  }
  /**
   * [descr:dxFileManager]
   */
  export class dxFileManager extends Widget<dxFileManagerOptions> {
    /**
     * [descr:dxFileManager.getCurrentDirectory()]
     */
    getCurrentDirectory(): any;
    /**
     * [descr:dxFileManager.getSelectedItems()]
     */
    getSelectedItems(): any[];
    /**
     * [descr:dxFileManager.refresh()]
     */
    refresh(): core.utils.DxPromise<any>;
  }
  namespace dxFileManager {
    /**
     * [descr:ActionEventInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ActionEventInfo {
      /**
       * [descr:ActionEventInfo.errorCode]
       */
      errorCode?: number;
      /**
       * [descr:ActionEventInfo.errorText]
       */
      errorText: string;
      /**
       * [descr:ActionEventInfo.cancel]
       */
      cancel: boolean | PromiseLike<void>;
    }
    /**
     * [descr:_ui_file_manager_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxFileManager>;
    /**
     * [descr:_ui_file_manager_ContextMenuItemClickEvent]
     */
    export type ContextMenuItemClickEvent = events.NativeEventInfo<
    dxFileManager,
    KeyboardEvent | PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_file_manager_ContextMenuItemClickEvent.itemData]
       */
      readonly itemData: any;
      /**
       * [descr:_ui_file_manager_ContextMenuItemClickEvent.itemElement]
       */
      readonly itemElement: core.DxElement;
      /**
       * [descr:_ui_file_manager_ContextMenuItemClickEvent.itemIndex]
       */
      readonly itemIndex: number;
      /**
       * [descr:_ui_file_manager_ContextMenuItemClickEvent.fileSystemItem]
       */
      readonly fileSystemItem?: fileManagement.FileSystemItem;
      /**
       * [descr:_ui_file_manager_ContextMenuItemClickEvent.viewArea]
       */
      readonly viewArea: FileManagerViewArea;
    };
    /**
     * [descr:_ui_file_manager_ContextMenuShowingEvent]
     */
    export type ContextMenuShowingEvent = events.Cancelable &
    events.NativeEventInfo<
    dxFileManager,
    KeyboardEvent | PointerEvent | MouseEvent
    > & {
      /**
         * [descr:_ui_file_manager_ContextMenuShowingEvent.fileSystemItem]
         */
      readonly fileSystemItem?: fileManagement.FileSystemItem;
      /**
         * [descr:_ui_file_manager_ContextMenuShowingEvent.targetElement]
         */
      readonly targetElement?: core.DxElement;
      /**
         * [descr:_ui_file_manager_ContextMenuShowingEvent.viewArea]
         */
      readonly viewArea: FileManagerViewArea;
    };
    /**
     * [descr:_ui_file_manager_CurrentDirectoryChangedEvent]
     */
    export type CurrentDirectoryChangedEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_CurrentDirectoryChangedEvent.directory]
         */
        readonly directory: fileManagement.FileSystemItem;
      };
    /**
     * [descr:_ui_file_manager_DirectoryCreatedEvent]
     */
    export type DirectoryCreatedEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_DirectoryCreatedEvent.parentDirectory]
         */
        readonly parentDirectory: fileManagement.FileSystemItem;
        /**
         * [descr:_ui_file_manager_DirectoryCreatedEvent.name]
         */
        readonly name: string;
      };
    /**
     * [descr:_ui_file_manager_DirectoryCreatingEvent]
     */
    export type DirectoryCreatingEvent =
      events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        /**
           * [descr:_ui_file_manager_DirectoryCreatingEvent.parentDirectory]
           */
        readonly parentDirectory: fileManagement.FileSystemItem;
        /**
           * [descr:_ui_file_manager_DirectoryCreatingEvent.name]
           */
        readonly name: string;
      };
    /**
     * [descr:_ui_file_manager_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxFileManager>;
    /**
     * [descr:_ui_file_manager_ErrorOccurredEvent]
     */
    export type ErrorOccurredEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_ErrorOccurredEvent.errorCode]
         */
        readonly errorCode?: number;
        /**
         * [descr:_ui_file_manager_ErrorOccurredEvent.errorText]
         */
        errorText?: string;
        /**
         * [descr:_ui_file_manager_ErrorOccurredEvent.fileSystemItem]
         */
        readonly fileSystemItem?: fileManagement.FileSystemItem;
      };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FileManagerItemViewMode = 'details' | 'thumbnails';
    export type FileManagerPredefinedContextMenuItem =
      | 'create'
      | 'upload'
      | 'refresh'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete';
    export type FileManagerPredefinedToolbarItem =
      | 'showNavPane'
      | 'create'
      | 'upload'
      | 'refresh'
      | 'switchView'
      | 'download'
      | 'move'
      | 'copy'
      | 'rename'
      | 'delete'
      | 'clearSelection'
      | 'separator';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FileManagerViewArea = 'navPane' | 'itemView';
    /**
     * [descr:_ui_file_manager_FileUploadedEvent]
     */
    export type FileUploadedEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_FileUploadedEvent.fileData]
         */
        readonly fileData: File;
        /**
         * [descr:_ui_file_manager_FileUploadedEvent.parentDirectory]
         */
        readonly parentDirectory: fileManagement.FileSystemItem;
      };
    /**
     * [descr:_ui_file_manager_FileUploadingEvent]
     */
    export type FileUploadingEvent =
      events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        /**
           * [descr:_ui_file_manager_FileUploadingEvent.fileData]
           */
        readonly fileData: File;
        /**
           * [descr:_ui_file_manager_FileUploadingEvent.destinationDirectory]
           */
        readonly destinationDirectory: fileManagement.FileSystemItem;
      };
    /**
     * [descr:_ui_file_manager_FocusedItemChangedEvent]
     */
    export type FocusedItemChangedEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_FocusedItemChangedEvent.item]
         */
        readonly item?: fileManagement.FileSystemItem;
        /**
         * [descr:_ui_file_manager_FocusedItemChangedEvent.itemElement]
         */
        readonly itemElement?: core.DxElement;
      };
    /**
     * [descr:_ui_file_manager_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxFileManager>;
    /**
     * [descr:_ui_file_manager_ItemCopiedEvent]
     */
    export type ItemCopiedEvent = events.EventInfo<dxFileManager> & {
      /**
       * [descr:_ui_file_manager_ItemCopiedEvent.sourceItem]
       */
      readonly sourceItem: fileManagement.FileSystemItem;
      /**
       * [descr:_ui_file_manager_ItemCopiedEvent.parentDirectory]
       */
      readonly parentDirectory: fileManagement.FileSystemItem;
      /**
       * [descr:_ui_file_manager_ItemCopiedEvent.itemName]
       */
      readonly itemName: string;
      /**
       * [descr:_ui_file_manager_ItemCopiedEvent.itemPath]
       */
      readonly itemPath: string;
    };
    /**
     * [descr:_ui_file_manager_ItemCopyingEvent]
     */
    export type ItemCopyingEvent = events.EventInfo<dxFileManager> &
    ActionEventInfo & {
      /**
         * [descr:_ui_file_manager_ItemCopyingEvent.item]
         */
      readonly item: fileManagement.FileSystemItem;
      /**
         * [descr:_ui_file_manager_ItemCopyingEvent.destinationDirectory]
         */
      readonly destinationDirectory: fileManagement.FileSystemItem;
    };
    /**
     * [descr:_ui_file_manager_ItemDeletedEvent]
     */
    export type ItemDeletedEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_ItemDeletedEvent.item]
         */
        readonly item: fileManagement.FileSystemItem;
      };
    /**
     * [descr:_ui_file_manager_ItemDeletingEvent]
     */
    export type ItemDeletingEvent = events.EventInfo<dxFileManager> &
    ActionEventInfo & {
      /**
         * [descr:_ui_file_manager_ItemDeletingEvent.item]
         */
      readonly item: fileManagement.FileSystemItem;
    };
    /**
     * [descr:_ui_file_manager_ItemDownloadingEvent]
     */
    export type ItemDownloadingEvent =
      events.EventInfo<dxFileManager> &
      ActionEventInfo & {
        /**
           * [descr:_ui_file_manager_ItemDownloadingEvent.item]
           */
        readonly item: fileManagement.FileSystemItem;
      };
    /**
     * [descr:_ui_file_manager_ItemMovedEvent]
     */
    export type ItemMovedEvent = events.EventInfo<dxFileManager> & {
      /**
       * [descr:_ui_file_manager_ItemMovedEvent.sourceItem]
       */
      readonly sourceItem: fileManagement.FileSystemItem;
      /**
       * [descr:_ui_file_manager_ItemMovedEvent.parentDirectory]
       */
      readonly parentDirectory: fileManagement.FileSystemItem;
      /**
       * [descr:_ui_file_manager_ItemMovedEvent.itemName]
       */
      readonly itemName: string;
      /**
       * [descr:_ui_file_manager_ItemMovedEvent.itemPath]
       */
      readonly itemPath: string;
    };
    /**
     * [descr:_ui_file_manager_ItemMovingEvent]
     */
    export type ItemMovingEvent = events.EventInfo<dxFileManager> &
    ActionEventInfo & {
      /**
         * [descr:_ui_file_manager_ItemMovingEvent.item]
         */
      readonly item: fileManagement.FileSystemItem;
      /**
         * [descr:_ui_file_manager_ItemMovingEvent.destinationDirectory]
         */
      readonly destinationDirectory: fileManagement.FileSystemItem;
    };
    /**
     * [descr:_ui_file_manager_ItemRenamedEvent]
     */
    export type ItemRenamedEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_ItemRenamedEvent.sourceItem]
         */
        readonly sourceItem: fileManagement.FileSystemItem;
        /**
         * [descr:_ui_file_manager_ItemRenamedEvent.itemName]
         */
        readonly itemName: string;
      };
    /**
     * [descr:_ui_file_manager_ItemRenamingEvent]
     */
    export type ItemRenamingEvent = events.EventInfo<dxFileManager> &
    ActionEventInfo & {
      /**
         * [descr:_ui_file_manager_ItemRenamingEvent.item]
         */
      readonly item: fileManagement.FileSystemItem;
      /**
         * [descr:_ui_file_manager_ItemRenamingEvent.newName]
         */
      readonly newName: string;
    };
    /**
     * [descr:_ui_file_manager_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxFileManager> &
      events.ChangedOptionInfo;
    export type Properties = dxFileManagerOptions;
    /**
     * [descr:_ui_file_manager_SelectedFileOpenedEvent]
     */
    export type SelectedFileOpenedEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_SelectedFileOpenedEvent.file]
         */
        readonly file: fileManagement.FileSystemItem;
      };
    /**
     * [descr:_ui_file_manager_SelectionChangedEvent]
     */
    export type SelectionChangedEvent =
      events.EventInfo<dxFileManager> & {
        /**
         * [descr:_ui_file_manager_SelectionChangedEvent.currentSelectedItemKeys]
         */
        readonly currentSelectedItemKeys: string[];
        /**
         * [descr:_ui_file_manager_SelectionChangedEvent.currentDeselectedItemKeys]
         */
        readonly currentDeselectedItemKeys: string[];
        /**
         * [descr:_ui_file_manager_SelectionChangedEvent.selectedItems]
         */
        readonly selectedItems: fileManagement.FileSystemItem[];
        /**
         * [descr:_ui_file_manager_SelectionChangedEvent.selectedItemKeys]
         */
        readonly selectedItemKeys: string[];
      };
    /**
     * [descr:_ui_file_manager_ToolbarItemClickEvent]
     */
    export type ToolbarItemClickEvent = events.NativeEventInfo<
    dxFileManager,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_file_manager_ToolbarItemClickEvent.itemData]
       */
      readonly itemData: any;
      /**
       * [descr:_ui_file_manager_ToolbarItemClickEvent.itemElement]
       */
      readonly itemElement: core.DxElement;
      /**
       * [descr:_ui_file_manager_ToolbarItemClickEvent.itemIndex]
       */
      readonly itemIndex: number;
    };
  }
  /**
   * [descr:dxFileManagerContextMenu]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerContextMenu {
    /**
     * [descr:dxFileManagerContextMenu.items]
     */
    items?: (| dxFileManager.ContextMenuItem
    | dxFileManager.FileManagerPredefinedContextMenuItem)[];
  }
  /**
   * @deprecated Use DevExpress.ui.dxFileManager.ContextMenuItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerContextMenuItem
    extends dxContextMenu.Item {
    /**
     * [descr:dxFileManagerContextMenuItem.items]
     */
    items?: dxFileManager.ContextMenuItem[];
    /**
     * [descr:dxFileManagerContextMenuItem.name]
     */
    name?:
    | dxFileManager.FileManagerPredefinedContextMenuItem
    | string;
    /**
     * [descr:dxFileManagerContextMenuItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFileManagerContextMenuItem.template]
     */
    template?:
    | core.template
    | (() => string | core.UserDefinedElement);
  }
  /**
   * [descr:dxFileManagerDetailsColumn]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerDetailsColumn {
    /**
     * [descr:dxFileManagerDetailsColumn.alignment]
     */
    alignment?: common.HorizontalAlignment | undefined;
    /**
     * [descr:dxFileManagerDetailsColumn.caption]
     */
    caption?: string;
    /**
     * [descr:dxFileManagerDetailsColumn.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxFileManagerDetailsColumn.dataField]
     */
    dataField?: string;
    /**
     * [descr:dxFileManagerDetailsColumn.dataType]
     */
    dataType?: common.DataType;
    /**
     * [descr:dxFileManagerDetailsColumn.hidingPriority]
     */
    hidingPriority?: number;
    /**
     * [descr:dxFileManagerDetailsColumn.sortIndex]
     */
    sortIndex?: number;
    /**
     * [descr:dxFileManagerDetailsColumn.sortOrder]
     */
    sortOrder?: common.SortOrder | undefined;
    /**
     * [descr:dxFileManagerDetailsColumn.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFileManagerDetailsColumn.visibleIndex]
     */
    visibleIndex?: number;
    /**
     * [descr:dxFileManagerDetailsColumn.width]
     */
    width?: number | string;
  }
  /**
   * [descr:dxFileManagerOptions]
   * @deprecated [depNote:dxFileManagerOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerOptions extends WidgetOptions<dxFileManager> {
    /**
     * [descr:dxFileManagerOptions.allowedFileExtensions]
     */
    allowedFileExtensions?: string[];
    /**
     * [descr:dxFileManagerOptions.contextMenu]
     */
    contextMenu?: dxFileManagerContextMenu;
    /**
     * [descr:dxFileManagerOptions.currentPath]
     */
    currentPath?: string;
    /**
     * [descr:dxFileManagerOptions.currentPathKeys]
     */
    currentPathKeys?: string[];
    /**
     * [descr:dxFileManagerOptions.customizeDetailColumns]
     */
    customizeDetailColumns?: (
      columns: dxFileManagerDetailsColumn[]
    ) => dxFileManagerDetailsColumn[];
    /**
     * [descr:dxFileManagerOptions.customizeThumbnail]
     */
    customizeThumbnail?: (
      fileSystemItem: fileManagement.FileSystemItem
    ) => string;
    /**
     * [descr:dxFileManagerOptions.fileSystemProvider]
     */
    fileSystemProvider?: any;
    /**
     * [descr:dxFileManagerOptions.itemView]
     */
    itemView?: {
      /**
       * [descr:dxFileManagerOptions.itemView.details]
       */
      details?: {
        /**
         * [descr:dxFileManagerOptions.itemView.details.columns]
         */
        columns?: (dxFileManagerDetailsColumn | string)[];
      };
      /**
       * [descr:dxFileManagerOptions.itemView.mode]
       */
      mode?: dxFileManager.FileManagerItemViewMode;
      /**
       * [descr:dxFileManagerOptions.itemView.showFolders]
       */
      showFolders?: boolean;
      /**
       * [descr:dxFileManagerOptions.itemView.showParentFolder]
       */
      showParentFolder?: boolean;
    };
    /**
     * [descr:dxFileManagerOptions.notifications]
     */
    notifications?: {
      /**
       * [descr:dxFileManagerOptions.notifications.showPanel]
       */
      showPanel?: boolean;
      /**
       * [descr:dxFileManagerOptions.notifications.showPopup]
       */
      showPopup?: boolean;
    };
    /**
     * [descr:dxFileManagerOptions.onContextMenuItemClick]
     */
    onContextMenuItemClick?: (
      e: dxFileManager.ContextMenuItemClickEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onContextMenuShowing]
     */
    onContextMenuShowing?: (
      e: dxFileManager.ContextMenuShowingEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onCurrentDirectoryChanged]
     */
    onCurrentDirectoryChanged?: (
      e: dxFileManager.CurrentDirectoryChangedEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onSelectedFileOpened]
     */
    onSelectedFileOpened?: (
      e: dxFileManager.SelectedFileOpenedEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxFileManager.SelectionChangedEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onToolbarItemClick]
     */
    onToolbarItemClick?: (
      e: dxFileManager.ToolbarItemClickEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onFocusedItemChanged]
     */
    onFocusedItemChanged?: (
      e: dxFileManager.FocusedItemChangedEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onErrorOccurred]
     */
    onErrorOccurred?: (
      e: dxFileManager.ErrorOccurredEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onDirectoryCreating]
     */
    onDirectoryCreating?: (
      e: dxFileManager.DirectoryCreatingEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onDirectoryCreated]
     */
    onDirectoryCreated?: (
      e: dxFileManager.DirectoryCreatedEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onItemRenaming]
     */
    onItemRenaming?: (e: dxFileManager.ItemRenamingEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onItemRenamed]
     */
    onItemRenamed?: (e: dxFileManager.ItemRenamedEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onItemMoving]
     */
    onItemMoving?: (e: dxFileManager.ItemMovingEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onItemMoved]
     */
    onItemMoved?: (e: dxFileManager.ItemMovedEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onItemCopying]
     */
    onItemCopying?: (e: dxFileManager.ItemCopyingEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onItemCopied]
     */
    onItemCopied?: (e: dxFileManager.ItemCopiedEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onItemDeleting]
     */
    onItemDeleting?: (e: dxFileManager.ItemDeletingEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onItemDeleted]
     */
    onItemDeleted?: (e: dxFileManager.ItemDeletedEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onFileUploading]
     */
    onFileUploading?: (
      e: dxFileManager.FileUploadingEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.onFileUploaded]
     */
    onFileUploaded?: (e: dxFileManager.FileUploadedEvent) => void;
    /**
     * [descr:dxFileManagerOptions.onItemDownloading]
     */
    onItemDownloading?: (
      e: dxFileManager.ItemDownloadingEvent
    ) => void;
    /**
     * [descr:dxFileManagerOptions.permissions]
     */
    permissions?: {
      /**
       * [descr:dxFileManagerOptions.permissions.copy]
       */
      copy?: boolean;
      /**
       * [descr:dxFileManagerOptions.permissions.create]
       */
      create?: boolean;
      /**
       * [descr:dxFileManagerOptions.permissions.download]
       */
      download?: boolean;
      /**
       * [descr:dxFileManagerOptions.permissions.move]
       */
      move?: boolean;
      /**
       * [descr:dxFileManagerOptions.permissions.delete]
       */
      delete?: boolean;
      /**
       * [descr:dxFileManagerOptions.permissions.rename]
       */
      rename?: boolean;
      /**
       * [descr:dxFileManagerOptions.permissions.upload]
       */
      upload?: boolean;
    };
    /**
     * [descr:dxFileManagerOptions.rootFolderName]
     */
    rootFolderName?: string;
    /**
     * [descr:dxFileManagerOptions.selectionMode]
     */
    selectionMode?: common.SingleOrMultiple;
    /**
     * [descr:dxFileManagerOptions.selectedItemKeys]
     */
    selectedItemKeys?: string[];
    /**
     * [descr:dxFileManagerOptions.focusedItemKey]
     */
    focusedItemKey?: string;
    /**
     * [descr:dxFileManagerOptions.toolbar]
     */
    toolbar?: dxFileManagerToolbar;
    /**
     * [descr:dxFileManagerOptions.upload]
     */
    upload?: {
      /**
       * [descr:dxFileManagerOptions.upload.maxFileSize]
       */
      maxFileSize?: number;
      /**
       * [descr:dxFileManagerOptions.upload.chunkSize]
       */
      chunkSize?: number;
    };
  }
  /**
   * [descr:dxFileManagerToolbar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerToolbar {
    /**
     * [descr:dxFileManagerToolbar.fileSelectionItems]
     */
    fileSelectionItems?: (| dxFileManager.ToolbarItem
    | dxFileManager.FileManagerPredefinedToolbarItem)[];
    /**
     * [descr:dxFileManagerToolbar.items]
     */
    items?: (| dxFileManager.ToolbarItem
    | dxFileManager.FileManagerPredefinedToolbarItem)[];
  }
  /**
   * @deprecated Use ToolbarItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileManagerToolbarItem
    extends dxToolbar.Item {
    /**
     * [descr:dxFileManagerToolbarItem.icon]
     */
    icon?: string;
    /**
     * [descr:dxFileManagerToolbarItem.location]
     */
    location?: common.ToolbarItemLocation;
    /**
     * [descr:dxFileManagerToolbarItem.name]
     */
    name?:
    | dxFileManager.FileManagerPredefinedToolbarItem
    | string;
    /**
     * [descr:dxFileManagerToolbarItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFileManagerToolbarItem.html]
     */
    html?: string;
    /**
     * [descr:dxFileManagerToolbarItem.template]
     */
    template?:
    | core.template
    | (() => string | core.UserDefinedElement);
    /**
     * [descr:dxFileManagerToolbarItem.menuItemTemplate]
     */
    menuItemTemplate?:
    | core.template
    | (() => string | core.UserDefinedElement);
  }
  /**
   * [descr:dxFileUploader]
   */
  export class dxFileUploader extends Editor<dxFileUploaderOptions> {
    /**
     * [descr:dxFileUploader.upload()]
     */
    upload(): void;
    /**
     * [descr:dxFileUploader.upload(fileIndex)]
     */
    upload(fileIndex: number): void;
    /**
     * [descr:dxFileUploader.upload(file)]
     */
    upload(file: File): void;
    /**
     * [descr:dxFileUploader.abortUpload()]
     */
    abortUpload(): void;
    /**
     * [descr:dxFileUploader.abortUpload(fileIndex)]
     */
    abortUpload(fileIndex: number): void;
    /**
     * [descr:dxFileUploader.abortUpload(file)]
     */
    abortUpload(file: File): void;
    /**
     * [descr:dxFileUploader.removeFile(fileIndex)]
     */
    removeFile(fileIndex: number): void;
    /**
     * [descr:dxFileUploader.removeFile(file)]
     */
    removeFile(file: File): void;
  }
  namespace dxFileUploader {
    /**
     * [descr:_ui_file_uploader_BeforeSendEvent]
     */
    export type BeforeSendEvent =
      events.EventInfo<dxFileUploader> & {
        /**
         * [descr:_ui_file_uploader_BeforeSendEvent.request]
         */
        readonly request: XMLHttpRequest;
        /**
         * [descr:_ui_file_uploader_BeforeSendEvent.file]
         */
        readonly file: File;
        /**
         * [descr:_ui_file_uploader_BeforeSendEvent.uploadInfo]
         */
        readonly uploadInfo?: fileManagement.UploadInfo;
      };
    /**
     * [descr:_ui_file_uploader_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxFileUploader>;
    /**
     * [descr:_ui_file_uploader_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxFileUploader>;
    /**
     * [descr:_ui_file_uploader_DropZoneEnterEvent]
     */
    export type DropZoneEnterEvent = events.NativeEventInfo<
    dxFileUploader,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_file_uploader_DropZoneEnterEvent.dropZoneElement]
       */
      readonly dropZoneElement: core.DxElement;
    };
    /**
     * [descr:_ui_file_uploader_DropZoneLeaveEvent]
     */
    export type DropZoneLeaveEvent = events.NativeEventInfo<
    dxFileUploader,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_file_uploader_DropZoneLeaveEvent.dropZoneElement]
       */
      readonly dropZoneElement: core.DxElement;
    };
    /**
     * [descr:_ui_file_uploader_FilesUploadedEvent]
     */
    export type FilesUploadedEvent =
      events.EventInfo<dxFileUploader>;
    export type FileUploadMode = 'instantly' | 'useButtons' | 'useForm';
    /**
     * [descr:_ui_file_uploader_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxFileUploader>;
    /**
     * [descr:_ui_file_uploader_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxFileUploader> &
      events.ChangedOptionInfo;
    /**
     * [descr:_ui_file_uploader_ProgressEvent]
     */
    export type ProgressEvent =
      events.NativeEventInfo<dxFileUploader> & {
        /**
         * [descr:_ui_file_uploader_ProgressEvent.file]
         */
        readonly file: File;
        /**
         * [descr:_ui_file_uploader_ProgressEvent.segmentSize]
         */
        readonly segmentSize: number;
        /**
         * [descr:_ui_file_uploader_ProgressEvent.bytesLoaded]
         */
        readonly bytesLoaded: number;
        /**
         * [descr:_ui_file_uploader_ProgressEvent.bytesTotal]
         */
        readonly bytesTotal: number;
        /**
         * [descr:_ui_file_uploader_ProgressEvent.request]
         */
        readonly request: XMLHttpRequest;
      };
    export type Properties = dxFileUploaderOptions;
    /**
     * [descr:_ui_file_uploader_UploadAbortedEvent]
     */
    export type UploadAbortedEvent =
      events.NativeEventInfo<dxFileUploader> & {
        /**
         * [descr:_ui_file_uploader_UploadAbortedEvent.file]
         */
        readonly file: File;
        /**
         * [descr:_ui_file_uploader_UploadAbortedEvent.request]
         */
        readonly request: XMLHttpRequest;
        /**
         * [descr:_ui_file_uploader_UploadAbortedEvent.message]
         */
        message: string;
      };
    /**
     * [descr:_ui_file_uploader_UploadedEvent]
     */
    export type UploadedEvent =
      events.NativeEventInfo<dxFileUploader> & {
        /**
         * [descr:_ui_file_uploader_UploadedEvent.file]
         */
        readonly file: File;
        /**
         * [descr:_ui_file_uploader_UploadedEvent.request]
         */
        readonly request: XMLHttpRequest;
        /**
         * [descr:_ui_file_uploader_UploadedEvent.message]
         */
        message: string;
      };
    /**
     * [descr:_ui_file_uploader_UploadErrorEvent]
     */
    export type UploadErrorEvent =
      events.NativeEventInfo<dxFileUploader> & {
        /**
         * [descr:_ui_file_uploader_UploadErrorEvent.file]
         */
        readonly file: File;
        /**
         * [descr:_ui_file_uploader_UploadErrorEvent.request]
         */
        readonly request: XMLHttpRequest;
        /**
         * [descr:_ui_file_uploader_UploadErrorEvent.error]
         */
        readonly error: any;
        /**
         * [descr:_ui_file_uploader_UploadErrorEvent.message]
         */
        message: string;
      };
    export type UploadHttpMethod = 'POST' | 'PUT';
    /**
     * [descr:_ui_file_uploader_UploadStartedEvent]
     */
    export type UploadStartedEvent =
      events.NativeEventInfo<dxFileUploader> & {
        /**
         * [descr:_ui_file_uploader_UploadStartedEvent.file]
         */
        readonly file: File;
        /**
         * [descr:_ui_file_uploader_UploadStartedEvent.request]
         */
        readonly request: XMLHttpRequest;
      };
    /**
     * [descr:_ui_file_uploader_ValueChangedEvent]
     */
    export type ValueChangedEvent =
      events.NativeEventInfo<dxFileUploader> & {
        /**
         * [descr:_ui_file_uploader_ValueChangedEvent.value]
         */
        readonly value?: File[];
        /**
         * [descr:_ui_file_uploader_ValueChangedEvent.previousValue]
         */
        readonly previousValue?: File[];
      };
  }
  /**
   * [descr:dxFileUploaderOptions]
   * @deprecated [depNote:dxFileUploaderOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFileUploaderOptions extends EditorOptions<dxFileUploader> {
    /**
     * [descr:dxFileUploaderOptions.abortUpload]
     */
    abortUpload?: (
      file: File,
      uploadInfo?: fileManagement.UploadInfo
    ) => PromiseLike<any> | any;
    /**
     * [descr:dxFileUploaderOptions.accept]
     */
    accept?: string;
    /**
     * [descr:dxFileUploaderOptions.allowCanceling]
     */
    allowCanceling?: boolean;
    /**
     * [descr:dxFileUploaderOptions.allowedFileExtensions]
     */
    allowedFileExtensions?: string[];
    /**
     * [descr:dxFileUploaderOptions.chunkSize]
     */
    chunkSize?: number;
    /**
     * [descr:dxFileUploaderOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxFileUploaderOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxFileUploaderOptions.invalidFileExtensionMessage]
     */
    invalidFileExtensionMessage?: string;
    /**
     * [descr:dxFileUploaderOptions.invalidMaxFileSizeMessage]
     */
    invalidMaxFileSizeMessage?: string;
    /**
     * [descr:dxFileUploaderOptions.invalidMinFileSizeMessage]
     */
    invalidMinFileSizeMessage?: string;
    /**
     * [descr:dxFileUploaderOptions.inputAttr]
     */
    inputAttr?: any;
    /**
     * [descr:dxFileUploaderOptions.labelText]
     */
    labelText?: string;
    /**
     * [descr:dxFileUploaderOptions.maxFileSize]
     */
    maxFileSize?: number;
    /**
     * [descr:dxFileUploaderOptions.minFileSize]
     */
    minFileSize?: number;
    /**
     * [descr:dxFileUploaderOptions.multiple]
     */
    multiple?: boolean;
    /**
     * [descr:dxFileUploaderOptions.name]
     */
    name?: string;
    /**
     * [descr:dxFileUploaderOptions.onBeforeSend]
     */
    onBeforeSend?: (e: dxFileUploader.BeforeSendEvent) => void;
    /**
     * [descr:dxFileUploaderOptions.onDropZoneEnter]
     */
    onDropZoneEnter?: (
      e: dxFileUploader.DropZoneEnterEvent
    ) => void;
    /**
     * [descr:dxFileUploaderOptions.onDropZoneLeave]
     */
    onDropZoneLeave?: (
      e: dxFileUploader.DropZoneLeaveEvent
    ) => void;
    /**
     * [descr:dxFileUploaderOptions.onFilesUploaded]
     */
    onFilesUploaded?: (
      e: dxFileUploader.FilesUploadedEvent
    ) => void;
    /**
     * [descr:dxFileUploaderOptions.onProgress]
     */
    onProgress?: (e: dxFileUploader.ProgressEvent) => void;
    /**
     * [descr:dxFileUploaderOptions.onUploadAborted]
     */
    onUploadAborted?: (
      e: dxFileUploader.UploadAbortedEvent
    ) => void;
    /**
     * [descr:dxFileUploaderOptions.onUploadError]
     */
    onUploadError?: (e: dxFileUploader.UploadErrorEvent) => void;
    /**
     * [descr:dxFileUploaderOptions.onUploadStarted]
     */
    onUploadStarted?: (
      e: dxFileUploader.UploadStartedEvent
    ) => void;
    /**
     * [descr:dxFileUploaderOptions.onUploaded]
     */
    onUploaded?: (e: dxFileUploader.UploadedEvent) => void;
    /**
     * [descr:dxFileUploaderOptions.onValueChanged]
     */
    onValueChanged?: (
      e: dxFileUploader.ValueChangedEvent
    ) => void;
    /**
     * [descr:dxFileUploaderOptions.progress]
     */
    progress?: number;
    /**
     * [descr:dxFileUploaderOptions.readyToUploadMessage]
     */
    readyToUploadMessage?: string;
    /**
     * [descr:dxFileUploaderOptions.selectButtonText]
     */
    selectButtonText?: string;
    /**
     * [descr:dxFileUploaderOptions.showFileList]
     */
    showFileList?: boolean;
    /**
     * [descr:dxFileUploaderOptions.dialogTrigger]
     */
    dialogTrigger?: string | core.UserDefinedElement;
    /**
     * [descr:dxFileUploaderOptions.dropZone]
     */
    dropZone?: string | core.UserDefinedElement;
    /**
     * [descr:dxFileUploaderOptions.uploadButtonText]
     */
    uploadButtonText?: string;
    /**
     * [descr:dxFileUploaderOptions.uploadChunk]
     */
    uploadChunk?: (
      file: File,
      uploadInfo: fileManagement.UploadInfo
    ) => PromiseLike<any> | any;
    /**
     * [descr:dxFileUploaderOptions.uploadFailedMessage]
     */
    uploadFailedMessage?: string;
    /**
     * [descr:dxFileUploaderOptions.uploadAbortedMessage]
     */
    uploadAbortedMessage?: string;
    /**
     * [descr:dxFileUploaderOptions.uploadFile]
     */
    uploadFile?: (
      file: File,
      progressCallback: Function
    ) => PromiseLike<any> | any;
    /**
     * [descr:dxFileUploaderOptions.uploadHeaders]
     */
    uploadHeaders?: any;
    /**
     * [descr:dxFileUploaderOptions.uploadCustomData]
     */
    uploadCustomData?: any;
    /**
     * [descr:dxFileUploaderOptions.uploadMethod]
     */
    uploadMethod?: dxFileUploader.UploadHttpMethod;
    /**
     * [descr:dxFileUploaderOptions.uploadMode]
     */
    uploadMode?: dxFileUploader.FileUploadMode;
    /**
     * [descr:dxFileUploaderOptions.uploadUrl]
     */
    uploadUrl?: string;
    /**
     * [descr:dxFileUploaderOptions.uploadedMessage]
     */
    uploadedMessage?: string;
    /**
     * [descr:dxFileUploaderOptions.value]
     */
    value?: File[];
  }
  /**
   * [descr:dxFilterBuilder]
   */
  export class dxFilterBuilder extends Widget<dxFilterBuilderOptions> {
    /**
     * [descr:dxFilterBuilder.getFilterExpression()]
     */
    getFilterExpression(): string | any[] | Function;
  }
  namespace dxFilterBuilder {
    /**
     * [descr:_ui_filter_builder_ContentReadyEvent]
     */
    export type ContentReadyEvent =
      events.EventInfo<dxFilterBuilder>;
    export type CustomOperation = dxFilterBuilderCustomOperation;
    export interface CustomOperationEditorTemplate {
      readonly value?: string | number | Date;
      readonly field: Field;
      readonly setValue: Function;
    }
    /**
     * [descr:_ui_filter_builder_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxFilterBuilder>;
    /**
     * [descr:_ui_filter_builder_EditorPreparedEvent]
     */
    export type EditorPreparedEvent =
      events.EventInfo<dxFilterBuilder> & {
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.value]
         */
        readonly value?: any;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.setValue]
         */
        readonly setValue: any;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.editorElement]
         */
        readonly editorElement: core.DxElement;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.editorName]
         */
        readonly editorName: string;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.dataField]
         */
        readonly dataField?: string;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.filterOperation]
         */
        readonly filterOperation?: string;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.updateValueTimeout]
         */
        readonly updateValueTimeout?: number;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.width]
         */
        readonly width?: number;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.readOnly]
         */
        readonly readOnly: boolean;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.disabled]
         */
        readonly disabled: boolean;
        /**
         * [descr:_ui_filter_builder_EditorPreparedEvent.rtlEnabled]
         */
        readonly rtlEnabled: boolean;
      };
    /**
     * [descr:_ui_filter_builder_EditorPreparingEvent]
     */
    export type EditorPreparingEvent = events.Cancelable &
    events.EventInfo<dxFilterBuilder> & {
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.value]
         */
      readonly value?: any;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.setValue]
         */
      readonly setValue: any;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.editorElement]
         */
      readonly editorElement?: core.DxElement;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.editorName]
         */
      editorName: string;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.editorOptions]
         */
      editorOptions?: any;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.dataField]
         */
      readonly dataField?: string;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.filterOperation]
         */
      readonly filterOperation?: string;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.updateValueTimeout]
         */
      updateValueTimeout?: number;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.width]
         */
      readonly width?: number;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.readOnly]
         */
      readonly readOnly: boolean;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.disabled]
         */
      readonly disabled: boolean;
      /**
         * [descr:_ui_filter_builder_EditorPreparingEvent.rtlEnabled]
         */
      readonly rtlEnabled: boolean;
    };
    export interface FieldEditorTemplate {
      readonly value?: string | number | Date;
      readonly filterOperation?: string;
      readonly field: Field;
      readonly setValue: Function;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FilterBuilderOperation =
      | '='
      | '<>'
      | '<'
      | '<='
      | '>'
      | '>='
      | 'contains'
      | 'endswith'
      | 'isblank'
      | 'isnotblank'
      | 'notcontains'
      | 'startswith'
      | 'between';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FilterLookupDataSource<T> = Exclude<
    data.DataSource.DataSourceLike<T>,
    string | data.DataSource
    >;
    export type GroupOperation = 'and' | 'or' | 'notAnd' | 'notOr';
    /**
     * [descr:_ui_filter_builder_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxFilterBuilder>;
    /**
     * [descr:_ui_filter_builder_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxFilterBuilder> &
      events.ChangedOptionInfo;
    export type Properties = dxFilterBuilderOptions;
    /**
     * [descr:_ui_filter_builder_ValueChangedEvent]
     */
    export type ValueChangedEvent =
      events.EventInfo<dxFilterBuilder> & {
        /**
         * [descr:_ui_filter_builder_ValueChangedEvent.value]
         */
        readonly value?: any;
        /**
         * [descr:_ui_filter_builder_ValueChangedEvent.previousValue]
         */
        readonly previousValue?: any;
      };
  }
  /**
   * @deprecated Use the CustomOperation type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFilterBuilderCustomOperation {
    /**
     * [descr:dxFilterBuilderCustomOperation.calculateFilterExpression]
     */
    calculateFilterExpression?: (
      filterValue: any,
      field: Field
    ) => string | any[] | Function;
    /**
     * [descr:dxFilterBuilderCustomOperation.caption]
     */
    caption?: string;
    /**
     * [descr:dxFilterBuilderCustomOperation.customizeText]
     */
    customizeText?: (fieldInfo: {
      value?: string | number | Date;
      valueText?: string;
      field?: Field;
    }) => string;
    /**
     * [descr:dxFilterBuilderCustomOperation.dataTypes]
     */
    dataTypes?: common.DataType[];
    /**
     * [descr:dxFilterBuilderCustomOperation.editorTemplate]
     */
    editorTemplate?:
    | core.template
    | ((
      conditionInfo: dxFilterBuilder.CustomOperationEditorTemplate,
      container: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxFilterBuilderCustomOperation.hasValue]
     */
    hasValue?: boolean;
    /**
     * [descr:dxFilterBuilderCustomOperation.icon]
     */
    icon?: string;
    /**
     * [descr:dxFilterBuilderCustomOperation.name]
     */
    name?: string;
  }
  /**
   * @deprecated Use the Field type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFilterBuilderField {
    /**
     * [descr:dxFilterBuilderField.calculateFilterExpression]
     */
    calculateFilterExpression?: (
      filterValue: any,
      selectedFilterOperation: string
    ) => string | any[] | Function;
    /**
     * [descr:dxFilterBuilderField.caption]
     */
    caption?: string;
    /**
     * [descr:dxFilterBuilderField.customizeText]
     */
    customizeText?: (fieldInfo: {
      value?: string | number | Date;
      valueText?: string;
    }) => string;
    /**
     * [descr:dxFilterBuilderField.dataField]
     */
    dataField?: string;
    /**
     * [descr:dxFilterBuilderField.dataType]
     */
    dataType?: common.DataType;
    /**
     * [descr:dxFilterBuilderField.editorOptions]
     */
    editorOptions?: any;
    /**
     * [descr:dxFilterBuilderField.editorTemplate]
     */
    editorTemplate?:
    | core.template
    | ((
      conditionInfo: dxFilterBuilder.FieldEditorTemplate,
      container: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxFilterBuilderField.falseText]
     */
    falseText?: string;
    /**
     * [descr:dxFilterBuilderField.filterOperations]
     */
    filterOperations?: (dxFilterBuilder.FilterBuilderOperation | string)[];
    /**
     * [descr:dxFilterBuilderField.format]
     */
    format?: Format;
    /**
     * [descr:dxFilterBuilderField.lookup]
     */
    lookup?: {
      /**
       * [descr:dxFilterBuilderField.lookup.allowClearing]
       */
      allowClearing?: boolean;
      /**
       * [descr:dxFilterBuilderField.lookup.dataSource]
       */
      dataSource?: dxFilterBuilder.FilterLookupDataSource<any> | null;
      /**
       * [descr:dxFilterBuilderField.lookup.displayExpr]
       */
      displayExpr?: string | ((data: any) => string);
      /**
       * [descr:dxFilterBuilderField.lookup.valueExpr]
       */
      valueExpr?: string | ((data: any) => string | number | boolean);
    };
    /**
     * [descr:dxFilterBuilderField.name]
     */
    name?: string;
    /**
     * [descr:dxFilterBuilderField.trueText]
     */
    trueText?: string;
  }
  /**
   * [descr:dxFilterBuilderOptions]
   * @deprecated [depNote:dxFilterBuilderOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFilterBuilderOptions
    extends WidgetOptions<dxFilterBuilder> {
    /**
     * [descr:dxFilterBuilderOptions.allowHierarchicalFields]
     */
    allowHierarchicalFields?: boolean;
    /**
     * [descr:dxFilterBuilderOptions.customOperations]
     */
    customOperations?: dxFilterBuilder.CustomOperation[];
    /**
     * [descr:dxFilterBuilderOptions.fields]
     */
    fields?: Field[];
    /**
     * [descr:dxFilterBuilderOptions.filterOperationDescriptions]
     */
    filterOperationDescriptions?: {
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.between]
       */
      between?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.contains]
       */
      contains?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.endsWith]
       */
      endsWith?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.equal]
       */
      equal?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.greaterThan]
       */
      greaterThan?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.greaterThanOrEqual]
       */
      greaterThanOrEqual?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.isBlank]
       */
      isBlank?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.isNotBlank]
       */
      isNotBlank?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.lessThan]
       */
      lessThan?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.lessThanOrEqual]
       */
      lessThanOrEqual?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.notContains]
       */
      notContains?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.notEqual]
       */
      notEqual?: string;
      /**
       * [descr:dxFilterBuilderOptions.filterOperationDescriptions.startsWith]
       */
      startsWith?: string;
    };
    /**
     * [descr:dxFilterBuilderOptions.groupOperationDescriptions]
     */
    groupOperationDescriptions?: {
      /**
       * [descr:dxFilterBuilderOptions.groupOperationDescriptions.and]
       */
      and?: string;
      /**
       * [descr:dxFilterBuilderOptions.groupOperationDescriptions.notAnd]
       */
      notAnd?: string;
      /**
       * [descr:dxFilterBuilderOptions.groupOperationDescriptions.notOr]
       */
      notOr?: string;
      /**
       * [descr:dxFilterBuilderOptions.groupOperationDescriptions.or]
       */
      or?: string;
    };
    /**
     * [descr:dxFilterBuilderOptions.groupOperations]
     */
    groupOperations?: dxFilterBuilder.GroupOperation[];
    /**
     * [descr:dxFilterBuilderOptions.maxGroupLevel]
     */
    maxGroupLevel?: number;
    /**
     * [descr:dxFilterBuilderOptions.onEditorPrepared]
     */
    onEditorPrepared?: (
      e: dxFilterBuilder.EditorPreparedEvent
    ) => void;
    /**
     * [descr:dxFilterBuilderOptions.onEditorPreparing]
     */
    onEditorPreparing?: (
      e: dxFilterBuilder.EditorPreparingEvent
    ) => void;
    /**
     * [descr:dxFilterBuilderOptions.onValueChanged]
     */
    onValueChanged?: (
      e: dxFilterBuilder.ValueChangedEvent
    ) => void;
    /**
     * [descr:dxFilterBuilderOptions.value]
     */
    value?: string | any[] | Function;
  }
  /**
   * [descr:dxForm]
   */
  export class dxForm extends Widget<dxFormOptions> {
    /**
     * [descr:dxForm.getButton(name)]
     */
    getButton(name: string): dxButton | undefined;
    /**
     * [descr:dxForm.getEditor(dataField)]
     */
    getEditor(dataField: string): Editor | undefined;
    /**
     * [descr:dxForm.itemOption(id)]
     */
    itemOption(id: string): any;
    /**
     * [descr:dxForm.itemOption(id, option, value)]
     */
    itemOption(id: string, option: string, value: any): void;
    /**
     * [descr:dxForm.itemOption(id, options)]
     */
    itemOption(id: string, options: any): void;
    /**
     * [descr:dxForm.clear()]
     */
    clear(): void;
    /**
     * [descr:dxForm.resetValues()]
     * @deprecated [depNote:dxForm.resetValues()]
     */
    resetValues(): void;
    /**
     * [descr:dxForm.reset(editorsData)]
     */
    reset(editorsData?: Record<string, any>): void;
    /**
     * [descr:dxForm.updateData(data)]
     */
    updateData(data: any): void;
    /**
     * [descr:dxForm.updateData(dataField, value)]
     */
    updateData(dataField: string, value: any): void;
    /**
     * [descr:dxForm.updateDimensions()]
     */
    updateDimensions(): core.utils.DxPromise;
    /**
     * [descr:dxForm.validate()]
     */
    validate(): dxValidationGroup.ValidationResult;
  }
  namespace dxForm {
    /**
     * [descr:_ui_form_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxForm>;
    /**
     * [descr:_ui_form_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxForm>;
    /**
     * [descr:_ui_form_EditorEnterKeyEvent]
     */
    export type EditorEnterKeyEvent = events.EventInfo<dxForm> & {
      /**
       * [descr:_ui_form_EditorEnterKeyEvent.dataField]
       */
      readonly dataField?: string;
    };
    /**
     * [descr:_ui_form_FieldDataChangedEvent]
     */
    export type FieldDataChangedEvent = events.EventInfo<dxForm> & {
      /**
       * [descr:_ui_form_FieldDataChangedEvent.dataField]
       */
      readonly dataField?: string;
      /**
       * [descr:_ui_form_FieldDataChangedEvent.value]
       */
      readonly value?: any;
    };
    export type FormItemComponent =
      | 'dxAutocomplete'
      | 'dxCalendar'
      | 'dxCheckBox'
      | 'dxColorBox'
      | 'dxDateBox'
      | 'dxDateRangeBox'
      | 'dxDropDownBox'
      | 'dxHtmlEditor'
      | 'dxLookup'
      | 'dxNumberBox'
      | 'dxRadioGroup'
      | 'dxRangeSlider'
      | 'dxSelectBox'
      | 'dxSlider'
      | 'dxSwitch'
      | 'dxTagBox'
      | 'dxTextArea'
      | 'dxTextBox';
    export type FormItemType =
      | 'empty'
      | 'group'
      | 'simple'
      | 'tabbed'
      | 'button';
    export type FormLabelMode = 'static' | 'floating' | 'hidden' | 'outside';
    export interface GroupItemTemplateData {
      readonly component: dxForm;
      readonly formData?: any;
    }
    /**
     * [descr:_ui_form_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxForm>;
    export type LabelLocation = 'left' | 'right' | 'top';
    /**
     * [descr:_ui_form_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxForm> &
    events.ChangedOptionInfo;
    export type Properties = dxFormOptions;
    export type SimpleItemLabelTemplateData = SimpleItemTemplateData & {
      text: string;
    };
    export interface SimpleItemTemplateData {
      readonly component: dxForm;
      readonly dataField?: string;
      readonly editorOptions?: any;
      readonly editorType?: string;
      readonly name?: string;
    }
  }
  /**
   * @deprecated Use ButtonItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormButtonItem {
    /**
     * [descr:dxFormButtonItem.buttonOptions]
     */
    buttonOptions?: dxButtonOptions;
    /**
     * [descr:dxFormButtonItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:dxFormButtonItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxFormButtonItem.horizontalAlignment]
     */
    horizontalAlignment?: common.HorizontalAlignment;
    /**
     * [descr:dxFormButtonItem.itemType]
     */
    itemType?: dxForm.FormItemType;
    /**
     * [descr:dxFormButtonItem.name]
     */
    name?: string;
    /**
     * [descr:dxFormButtonItem.verticalAlignment]
     */
    verticalAlignment?: common.VerticalAlignment;
    /**
     * [descr:dxFormButtonItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFormButtonItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  /**
   * @deprecated Use EmptyItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormEmptyItem {
    /**
     * [descr:dxFormEmptyItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:dxFormEmptyItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxFormEmptyItem.itemType]
     */
    itemType?: dxForm.FormItemType;
    /**
     * [descr:dxFormEmptyItem.name]
     */
    name?: string;
    /**
     * [descr:dxFormEmptyItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFormEmptyItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  /**
   * @deprecated Use GroupItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormGroupItem {
    /**
     * [descr:dxFormGroupItem.alignItemLabels]
     */
    alignItemLabels?: boolean;
    /**
     * [descr:dxFormGroupItem.caption]
     */
    caption?: string;
    /**
     * [descr:dxFormGroupItem.colCount]
     */
    colCount?: number;
    /**
     * [descr:dxFormGroupItem.colCountByScreen]
     */
    colCountByScreen?: any;
    /**
     * [descr:dxFormGroupItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:dxFormGroupItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxFormGroupItem.itemType]
     */
    itemType?: dxForm.FormItemType;
    /**
     * [descr:dxFormGroupItem.items]
     */
    items?: dxForm.Item[];
    /**
     * [descr:dxFormGroupItem.name]
     */
    name?: string;
    /**
     * [descr:dxFormGroupItem.template]
     */
    template?:
    | core.template
    | ((
      data: dxForm.GroupItemTemplateData,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxFormGroupItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFormGroupItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  /**
   * [descr:dxFormOptions]
   * @deprecated [depNote:dxFormOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormOptions extends WidgetOptions<dxForm> {
    /**
     * [descr:dxFormOptions.alignItemLabels]
     */
    alignItemLabels?: boolean;
    /**
     * [descr:dxFormOptions.alignItemLabelsInAllGroups]
     */
    alignItemLabelsInAllGroups?: boolean;
    /**
     * [descr:dxFormOptions.colCount]
     */
    colCount?: number | common.Mode;
    /**
     * [descr:dxFormOptions.colCountByScreen]
     */
    colCountByScreen?: any;
    /**
     * [descr:dxFormOptions.customizeItem]
     */
    customizeItem?: (item: dxForm.Item) => void;
    /**
     * [descr:dxFormOptions.formData]
     */
    formData?: any;
    /**
     * [descr:dxFormOptions.items]
     */
    items?: dxForm.Item[];
    /**
     * [descr:dxFormOptions.labelLocation]
     */
    labelLocation?: dxForm.LabelLocation;
    /**
     * [descr:dxFormOptions.labelMode]
     */
    labelMode?: dxForm.FormLabelMode;
    /**
     * [descr:dxFormOptions.minColWidth]
     */
    minColWidth?: number;
    /**
     * [descr:dxFormOptions.onEditorEnterKey]
     */
    onEditorEnterKey?: (e: dxForm.EditorEnterKeyEvent) => void;
    /**
     * [descr:dxFormOptions.onFieldDataChanged]
     */
    onFieldDataChanged?: (
      e: dxForm.FieldDataChangedEvent
    ) => void;
    /**
     * [descr:dxFormOptions.optionalMark]
     */
    optionalMark?: string;
    /**
     * [descr:dxFormOptions.readOnly]
     */
    readOnly?: boolean;
    /**
     * [descr:dxFormOptions.requiredMark]
     */
    requiredMark?: string;
    /**
     * [descr:dxFormOptions.requiredMessage]
     */
    requiredMessage?: string;
    /**
     * [descr:dxFormOptions.screenByWidth]
     */
    screenByWidth?: Function;
    /**
     * [descr:dxFormOptions.scrollingEnabled]
     */
    scrollingEnabled?: boolean;
    /**
     * [descr:dxFormOptions.showColonAfterLabel]
     */
    showColonAfterLabel?: boolean;
    /**
     * [descr:dxFormOptions.showOptionalMark]
     */
    showOptionalMark?: boolean;
    /**
     * [descr:dxFormOptions.showRequiredMark]
     */
    showRequiredMark?: boolean;
    /**
     * [descr:dxFormOptions.showValidationSummary]
     */
    showValidationSummary?: boolean;
    /**
     * [descr:dxFormOptions.validationGroup]
     */
    validationGroup?: string;
    /**
     * [descr:dxFormOptions.isDirty]
     */
    isDirty?: boolean;
  }
  /**
   * @deprecated Use SimpleItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormSimpleItem {
    /**
     * [descr:dxFormSimpleItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:dxFormSimpleItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxFormSimpleItem.dataField]
     */
    dataField?: string;
    /**
     * [descr:dxFormSimpleItem.editorOptions]
     */
    editorOptions?: any;
    /**
     * [descr:dxFormSimpleItem.editorType]
     */
    editorType?: dxForm.FormItemComponent;
    /**
     * [descr:dxFormSimpleItem.helpText]
     */
    helpText?: string;
    /**
     * [descr:dxFormSimpleItem.isRequired]
     */
    isRequired?: boolean;
    /**
     * [descr:dxFormSimpleItem.itemType]
     */
    itemType?: dxForm.FormItemType;
    /**
     * [descr:dxFormSimpleItem.label]
     */
    label?: {
      /**
       * [descr:dxFormSimpleItem.label.alignment]
       */
      alignment?: common.HorizontalAlignment;
      /**
       * [descr:dxFormSimpleItem.label.location]
       */
      location?: dxForm.LabelLocation;
      /**
       * [descr:dxFormSimpleItem.label.showColon]
       */
      showColon?: boolean;
      /**
       * [descr:dxFormSimpleItem.label.template]
       */
      template?:
      | core.template
      | ((
        itemData: dxForm.SimpleItemLabelTemplateData,
        itemElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
       * [descr:dxFormSimpleItem.label.text]
       */
      text?: string;
      /**
       * [descr:dxFormSimpleItem.label.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxFormSimpleItem.name]
     */
    name?: string;
    /**
     * [descr:dxFormSimpleItem.template]
     */
    template?:
    | core.template
    | ((
      data: dxForm.SimpleItemTemplateData,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxFormSimpleItem.validationRules]
     */
    validationRules?: (| common.RequiredRule
    | common.NumericRule
    | common.RangeRule
    | common.StringLengthRule
    | common.CustomRule
    | common.CompareRule
    | common.PatternRule
    | common.EmailRule
    | common.AsyncRule)[];
    /**
     * [descr:dxFormSimpleItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFormSimpleItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  /**
   * @deprecated Use TabbedItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFormTabbedItem {
    /**
     * [descr:dxFormTabbedItem.colSpan]
     */
    colSpan?: number;
    /**
     * [descr:dxFormTabbedItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxFormTabbedItem.itemType]
     */
    itemType?: dxForm.FormItemType;
    /**
     * [descr:dxFormTabbedItem.name]
     */
    name?: string;
    /**
     * [descr:dxFormTabbedItem.tabPanelOptions]
     */
    tabPanelOptions?: dxTabPanelOptions;
    /**
     * [descr:dxFormTabbedItem.tabs]
     */
    tabs?: {
      /**
       * [descr:dxFormTabbedItem.tabs.alignItemLabels]
       */
      alignItemLabels?: boolean;
      /**
       * [descr:dxFormTabbedItem.tabs.badge]
       */
      badge?: string;
      /**
       * [descr:dxFormTabbedItem.tabs.colCount]
       */
      colCount?: number;
      /**
       * [descr:dxFormTabbedItem.tabs.colCountByScreen]
       */
      colCountByScreen?: any;
      /**
       * [descr:dxFormTabbedItem.tabs.disabled]
       */
      disabled?: boolean;
      /**
       * [descr:dxFormTabbedItem.tabs.icon]
       */
      icon?: string;
      /**
       * [descr:dxFormTabbedItem.tabs.items]
       */
      items?: dxForm.Item[];
      /**
       * [descr:dxFormTabbedItem.tabs.tabTemplate]
       */
      tabTemplate?:
      | core.template
      | ((
        tabData: any,
        tabIndex: number,
        tabElement: core.DxElement
      ) => any);
      /**
       * [descr:dxFormTabbedItem.tabs.template]
       */
      template?:
      | core.template
      | ((
        tabData: any,
        tabIndex: number,
        tabElement: core.DxElement
      ) => any);
      /**
       * [descr:dxFormTabbedItem.tabs.title]
       */
      title?: string;
    }[];
    /**
     * [descr:dxFormTabbedItem.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxFormTabbedItem.visibleIndex]
     */
    visibleIndex?: number;
  }
  /**
   * [descr:dxGallery]
   */
  export class dxGallery<
    TItem extends dxGallery.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<dxGalleryOptions<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxGallery.goToItem(itemIndex, animation)]
     */
    goToItem(
      itemIndex: number,
      animation: boolean
    ): core.utils.DxPromise;
    /**
     * [descr:dxGallery.nextItem(animation)]
     */
    nextItem(animation: boolean): core.utils.DxPromise;
    /**
     * [descr:dxGallery.prevItem(animation)]
     */
    prevItem(animation: boolean): core.utils.DxPromise;
  }
  namespace dxGallery {
    /**
     * [descr:_ui_gallery_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxGallery<TItem, TKey>>;
    /**
     * [descr:_ui_gallery_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxGallery<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_gallery_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxGallery<TItem, TKey>>;
    /**
     * [descr:_ui_gallery_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxGallery<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_gallery_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxGallery<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_gallery_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxGallery<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    /**
     * [descr:_ui_gallery_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxGallery<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_gallery_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxGallery<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxGalleryOptions<TItem, TKey>;
    /**
     * [descr:_ui_gallery_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxGallery<TItem, TKey>> &
    CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGalleryItem extends CollectionWidgetItem {
    /**
     * [descr:dxGalleryItem.imageAlt]
     */
    imageAlt?: string;
    /**
     * [descr:dxGalleryItem.imageSrc]
     */
    imageSrc?: string;
  }
  /**
   * [descr:dxGalleryOptions]
   * @deprecated [depNote:dxGalleryOptions]
   */
  export interface dxGalleryOptions<
    TItem extends dxGallery.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<dxGallery<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxGalleryOptions.animationDuration]
     */
    animationDuration?: number;
    /**
     * [descr:dxGalleryOptions.animationEnabled]
     */
    animationEnabled?: boolean;
    /**
     * [descr:dxGalleryOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxGalleryOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxGalleryOptions.indicatorEnabled]
     */
    indicatorEnabled?: boolean;
    /**
     * [descr:dxGalleryOptions.initialItemWidth]
     */
    initialItemWidth?: number;
    /**
     * [descr:dxGalleryOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxGalleryOptions.loop]
     */
    loop?: boolean;
    /**
     * [descr:dxGalleryOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:dxGalleryOptions.selectedIndex]
     */
    selectedIndex?: number;
    /**
     * [descr:dxGalleryOptions.showIndicator]
     */
    showIndicator?: boolean;
    /**
     * [descr:dxGalleryOptions.showNavButtons]
     */
    showNavButtons?: boolean;
    /**
     * [descr:dxGalleryOptions.slideshowDelay]
     */
    slideshowDelay?: number;
    /**
     * [descr:dxGalleryOptions.stretchImages]
     */
    stretchImages?: boolean;
    /**
     * [descr:dxGalleryOptions.swipeEnabled]
     */
    swipeEnabled?: boolean;
    /**
     * [descr:dxGalleryOptions.wrapAround]
     */
    wrapAround?: boolean;
  }
  /**
   * [descr:dxGantt]
   */
  export class dxGantt extends Widget<dxGanttOptions> {
    /**
     * [descr:dxGantt.getTaskData(key)]
     */
    getTaskData(key: any): any;
    /**
     * [descr:dxGantt.getDependencyData(key)]
     */
    getDependencyData(key: any): any;
    /**
     * [descr:dxGantt.getResourceData(key)]
     */
    getResourceData(key: any): any;
    /**
     * [descr:dxGantt.getResourceAssignmentData(key)]
     */
    getResourceAssignmentData(key: any): any;
    /**
     * [descr:dxGantt.insertTask(data)]
     */
    insertTask(data: any): void;
    /**
     * [descr:dxGantt.deleteTask(key)]
     */
    deleteTask(key: any): void;
    /**
     * [descr:dxGantt.updateTask(key, data)]
     */
    updateTask(key: any, data: any): void;
    /**
     * [descr:dxGantt.insertDependency(data)]
     */
    insertDependency(data: any): void;
    /**
     * [descr:dxGantt.deleteDependency(key)]
     */
    deleteDependency(key: any): void;
    /**
     * [descr:dxGantt.insertResource(data, taskKeys)]
     */
    insertResource(data: any, taskKeys?: any[]): void;
    /**
     * [descr:dxGantt.deleteResource(key)]
     */
    deleteResource(key: any): void;
    /**
     * [descr:dxGantt.assignResourceToTask(resourceKey, taskKey)]
     */
    assignResourceToTask(resourceKey: any, taskKey: any): void;
    /**
     * [descr:dxGantt.unassignResourceFromTask(resourceKey, taskKey)]
     */
    unassignResourceFromTask(resourceKey: any, taskKey: any): void;
    /**
     * [descr:dxGantt.getTaskResources(key)]
     */
    getTaskResources(key: any): any[];
    /**
     * [descr:dxGantt.getVisibleTaskKeys()]
     */
    getVisibleTaskKeys(): any[];
    /**
     * [descr:dxGantt.getVisibleDependencyKeys()]
     */
    getVisibleDependencyKeys(): any[];
    /**
     * [descr:dxGantt.getVisibleResourceKeys()]
     */
    getVisibleResourceKeys(): any[];
    /**
     * [descr:dxGantt.getVisibleResourceAssignmentKeys()]
     */
    getVisibleResourceAssignmentKeys(): any[];
    /**
     * [descr:dxGantt.updateDimensions()]
     */
    updateDimensions(): void;
    /**
     * [descr:dxGantt.scrollToDate(date)]
     */
    scrollToDate(date: Date | number | string): void;
    /**
     * [descr:dxGantt.showResourceManagerDialog()]
     */
    showResourceManagerDialog(): void;
    /**
     * [descr:dxGantt.expandAll()]
     */
    expandAll(): void;
    /**
     * [descr:dxGantt.collapseAll()]
     */
    collapseAll(): void;
    /**
     * [descr:dxGantt.expandAllToLevel(level)]
     */
    expandAllToLevel(level: number): void;
    /**
     * [descr:dxGantt.expandToTask(key)]
     */
    expandToTask(key: any): void;
    /**
     * [descr:dxGantt.collapseTask(key)]
     */
    collapseTask(key: any): void;
    /**
     * [descr:dxGantt.expandTask(key)]
     */
    expandTask(key: any): void;
    /**
     * [descr:dxGantt.refresh()]
     */
    refresh(): core.utils.DxPromise;
    /**
     * [descr:dxGantt.showResources(value)]
     */
    showResources(value: boolean): void;
    /**
     * [descr:dxGantt.showDependencies(value)]
     */
    showDependencies(value: boolean): void;
    /**
     * [descr:dxGantt.zoomIn()]
     */
    zoomIn(): void;
    /**
     * [descr:dxGantt.zoomOut()]
     */
    zoomOut(): void;
    /**
     * [descr:dxGantt.unassignAllResourcesFromTask(taskKey)]
     */
    unassignAllResourcesFromTask(taskKey: any): void;
    /**
     * [descr:dxGantt.showTaskDetailsDialog(taskKey)]
     */
    showTaskDetailsDialog(taskKey: any): void;
  }
  namespace dxGantt {
    export type Column<TRowData = any, TKey = any> = dxGanttColumn<
    TRowData,
    TKey
    >;
    /**
     * [descr:_ui_gantt_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxGantt>;
    /**
     * [descr:_ui_gantt_ContextMenuPreparingEvent]
     */
    export type ContextMenuPreparingEvent = events.Cancelable & {
      /**
       * [descr:_ui_gantt_ContextMenuPreparingEvent.component]
       */
      readonly component?: dxGantt;
      /**
       * [descr:_ui_gantt_ContextMenuPreparingEvent.element]
       */
      readonly element?: core.DxElement;
      /**
       * [descr:_ui_gantt_ContextMenuPreparingEvent.event]
       */
      readonly event?: events.DxEvent<
      PointerEvent | MouseEvent | TouchEvent
      >;
      /**
       * [descr:_ui_gantt_ContextMenuPreparingEvent.targetKey]
       */
      readonly targetKey?: any;
      /**
       * [descr:_ui_gantt_ContextMenuPreparingEvent.targetType]
       */
      readonly targetType?: string;
      /**
       * [descr:_ui_gantt_ContextMenuPreparingEvent.data]
       */
      readonly data?: any;
      /**
       * [descr:_ui_gantt_ContextMenuPreparingEvent.items]
       */
      readonly items?: any[];
    };
    /**
     * [descr:_ui_gantt_CustomCommandEvent]
     */
    export interface CustomCommandEvent {
      /**
       * [descr:_ui_gantt_CustomCommandEvent.component]
       */
      readonly component?: dxGantt;
      /**
       * [descr:_ui_gantt_CustomCommandEvent.element]
       */
      readonly element?: core.DxElement;
      /**
       * [descr:_ui_gantt_CustomCommandEvent.name]
       */
      readonly name: string;
    }
    /**
     * [descr:_ui_gantt_DependencyDeletedEvent]
     */
    export type DependencyDeletedEvent =
      events.EventInfo<dxGantt> & {
        /**
         * [descr:_ui_gantt_DependencyDeletedEvent.values]
         */
        readonly values: any;
        /**
         * [descr:_ui_gantt_DependencyDeletedEvent.key]
         */
        readonly key: any;
      };
    /**
     * [descr:_ui_gantt_DependencyDeletingEvent]
     */
    export type DependencyDeletingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_DependencyDeletingEvent.values]
         */
      readonly values: any;
      /**
         * [descr:_ui_gantt_DependencyDeletingEvent.key]
         */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_DependencyInsertedEvent]
     */
    export type DependencyInsertedEvent =
      events.EventInfo<dxGantt> & {
        /**
         * [descr:_ui_gantt_DependencyInsertedEvent.values]
         */
        readonly values: any;
        /**
         * [descr:_ui_gantt_DependencyInsertedEvent.key]
         */
        readonly key: any;
      };
    /**
     * [descr:_ui_gantt_DependencyInsertingEvent]
     */
    export type DependencyInsertingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_DependencyInsertingEvent.values]
         */
      readonly values: any;
    };
    /**
     * [descr:_ui_gantt_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxGantt>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttPdfExportDateRange = 'all' | 'visible';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttPdfExportMode = 'all' | 'treeList' | 'chart';
    export type GanttPredefinedContextMenuItem =
      | 'undo'
      | 'redo'
      | 'expandAll'
      | 'collapseAll'
      | 'addTask'
      | 'deleteTask'
      | 'zoomIn'
      | 'zoomOut'
      | 'deleteDependency'
      | 'taskDetails'
      | 'resourceManager';
    export type GanttPredefinedToolbarItem =
      | 'separator'
      | 'undo'
      | 'redo'
      | 'expandAll'
      | 'collapseAll'
      | 'addTask'
      | 'deleteTask'
      | 'zoomIn'
      | 'zoomOut'
      | 'taskDetails'
      | 'fullScreen'
      | 'resourceManager'
      | 'showResources'
      | 'showDependencies';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttRenderScaleType =
      | 'minutes'
      | 'hours'
      | 'sixHours'
      | 'days'
      | 'weeks'
      | 'months'
      | 'quarters'
      | 'years'
      | 'fiveYears';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttScaleType =
      | 'auto'
      | 'minutes'
      | 'hours'
      | 'sixHours'
      | 'days'
      | 'weeks'
      | 'months'
      | 'quarters'
      | 'years';
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type GanttTaskTitlePosition = 'inside' | 'outside' | 'none';
    /**
     * [descr:_ui_gantt_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxGantt>;
    /**
     * [descr:_ui_gantt_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxGantt> &
    events.ChangedOptionInfo;
    export interface ProgressTooltipTemplateData {
      readonly progress: number;
    }
    export type Properties = dxGanttOptions;
    /**
     * [descr:_ui_gantt_ResourceAssignedEvent]
     */
    export type ResourceAssignedEvent = events.EventInfo<dxGantt> & {
      /**
       * [descr:_ui_gantt_ResourceAssignedEvent.values]
       */
      readonly values: any;
      /**
       * [descr:_ui_gantt_ResourceAssignedEvent.key]
       */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_ResourceAssigningEvent]
     */
    export type ResourceAssigningEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_ResourceAssigningEvent.values]
         */
      readonly values: any;
    };
    /**
     * [descr:_ui_gantt_ResourceDeletedEvent]
     */
    export type ResourceDeletedEvent = events.EventInfo<dxGantt> & {
      /**
       * [descr:_ui_gantt_ResourceDeletedEvent.values]
       */
      readonly values: any;
      /**
       * [descr:_ui_gantt_ResourceDeletedEvent.key]
       */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_ResourceDeletingEvent]
     */
    export type ResourceDeletingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_ResourceDeletingEvent.values]
         */
      readonly values: any;
      /**
         * [descr:_ui_gantt_ResourceDeletingEvent.key]
         */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_ResourceInsertedEvent]
     */
    export type ResourceInsertedEvent = events.EventInfo<dxGantt> & {
      /**
       * [descr:_ui_gantt_ResourceInsertedEvent.values]
       */
      readonly values: any;
      /**
       * [descr:_ui_gantt_ResourceInsertedEvent.key]
       */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_ResourceInsertingEvent]
     */
    export type ResourceInsertingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_ResourceInsertingEvent.values]
         */
      readonly values: any;
    };
    /**
     * [descr:_ui_gantt_ResourceManagerDialogShowingEvent]
     */
    export type ResourceManagerDialogShowingEvent =
      events.Cancelable &
      events.EventInfo<dxGantt> & {
        /**
           * [descr:_ui_gantt_ResourceManagerDialogShowingEvent.values]
           */
        readonly values: any[];
      };
    /**
     * [descr:_ui_gantt_ResourceUnassignedEvent]
     */
    export type ResourceUnassignedEvent =
      events.EventInfo<dxGantt> & {
        /**
         * [descr:_ui_gantt_ResourceUnassignedEvent.values]
         */
        readonly values: any;
        /**
         * [descr:_ui_gantt_ResourceUnassignedEvent.key]
         */
        readonly key: any;
      };
    /**
     * [descr:_ui_gantt_ResourceUnassigningEvent]
     */
    export type ResourceUnassigningEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_ResourceUnassigningEvent.values]
         */
      readonly values: any;
      /**
         * [descr:_ui_gantt_ResourceUnassigningEvent.key]
         */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_ScaleCellPreparedEvent]
     */
    export type ScaleCellPreparedEvent =
      events.InitializedEventInfo<dxGantt> & {
        /**
         * [descr:_ui_gantt_ScaleCellPreparedEvent.scaleIndex]
         */
        readonly scaleIndex: number;
        /**
         * [descr:_ui_gantt_ScaleCellPreparedEvent.scaleType]
         */
        readonly scaleType: GanttRenderScaleType;
        /**
         * [descr:_ui_gantt_ScaleCellPreparedEvent.scaleElement]
         */
        readonly scaleElement: core.DxElement;
        /**
         * [descr:_ui_gantt_ScaleCellPreparedEvent.separatorElement]
         */
        readonly separatorElement: core.DxElement;
        /**
         * [descr:_ui_gantt_ScaleCellPreparedEvent.startDate]
         */
        readonly startDate: Date;
        /**
         * [descr:_ui_gantt_ScaleCellPreparedEvent.endDate]
         */
        readonly endDate: Date;
      };
    /**
     * [descr:_ui_gantt_SelectionChangedEvent]
     */
    export type SelectionChangedEvent = events.EventInfo<dxGantt> & {
      /**
       * [descr:_ui_gantt_SelectionChangedEvent.selectedRowKey]
       */
      readonly selectedRowKey?: any;
    };
    /**
     * [descr:_ui_gantt_TaskClickEvent]
     */
    export type TaskClickEvent = events.NativeEventInfo<
    dxGantt,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_gantt_TaskClickEvent.key]
       */
      readonly key?: any;
      /**
       * [descr:_ui_gantt_TaskClickEvent.data]
       */
      readonly data?: any;
    };
    export interface TaskContentTemplateData {
      readonly cellSize: any;
      readonly isMilestone: boolean;
      readonly taskData: any;
      readonly taskHTML: any;
      readonly taskPosition: any;
      readonly taskResources: any[];
      readonly taskSize: any;
    }
    /**
     * [descr:_ui_gantt_TaskDblClickEvent]
     */
    export type TaskDblClickEvent = events.Cancelable &
    events.NativeEventInfo<dxGantt, PointerEvent | MouseEvent> & {
      /**
         * [descr:_ui_gantt_TaskDblClickEvent.key]
         */
      readonly key?: any;
      /**
         * [descr:_ui_gantt_TaskDblClickEvent.data]
         */
      readonly data?: any;
    };
    /**
     * [descr:_ui_gantt_TaskDeletedEvent]
     */
    export type TaskDeletedEvent = events.EventInfo<dxGantt> & {
      /**
       * [descr:_ui_gantt_TaskDeletedEvent.values]
       */
      readonly values: any;
      /**
       * [descr:_ui_gantt_TaskDeletedEvent.key]
       */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_TaskDeletingEvent]
     */
    export type TaskDeletingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_TaskDeletingEvent.values]
         */
      readonly values: any;
      /**
         * [descr:_ui_gantt_TaskDeletingEvent.key]
         */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_TaskEditDialogShowingEvent]
     */
    export type TaskEditDialogShowingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_TaskEditDialogShowingEvent.values]
         */
      readonly values: any;
      /**
         * [descr:_ui_gantt_TaskEditDialogShowingEvent.key]
         */
      readonly key: any;
      /**
         * [descr:_ui_gantt_TaskEditDialogShowingEvent.readOnlyFields]
         */
      readonly readOnlyFields?: string[];
      /**
         * [descr:_ui_gantt_TaskEditDialogShowingEvent.hiddenFields]
         */
      readonly hiddenFields?: string[];
    };
    /**
     * [descr:_ui_gantt_TaskInsertedEvent]
     */
    export type TaskInsertedEvent = events.EventInfo<dxGantt> & {
      /**
       * [descr:_ui_gantt_TaskInsertedEvent.values]
       */
      readonly values?: any;
      /**
       * [descr:_ui_gantt_TaskInsertedEvent.key]
       */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_TaskInsertingEvent]
     */
    export type TaskInsertingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_TaskInsertingEvent.values]
         */
      readonly values: any;
    };
    /**
     * [descr:_ui_gantt_TaskMovingEvent]
     */
    export type TaskMovingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_TaskMovingEvent.newValues]
         */
      readonly newValues: any;
      /**
         * [descr:_ui_gantt_TaskMovingEvent.values]
         */
      readonly values: any;
      /**
         * [descr:_ui_gantt_TaskMovingEvent.key]
         */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_TaskUpdatedEvent]
     */
    export type TaskUpdatedEvent = events.EventInfo<dxGantt> & {
      /**
       * [descr:_ui_gantt_TaskUpdatedEvent.values]
       */
      readonly values: any;
      /**
       * [descr:_ui_gantt_TaskUpdatedEvent.key]
       */
      readonly key: any;
    };
    /**
     * [descr:_ui_gantt_TaskUpdatingEvent]
     */
    export type TaskUpdatingEvent = events.Cancelable &
    events.EventInfo<dxGantt> & {
      /**
         * [descr:_ui_gantt_TaskUpdatingEvent.newValues]
         */
      readonly newValues: any;
      /**
         * [descr:_ui_gantt_TaskUpdatingEvent.values]
         */
      readonly values: any;
      /**
         * [descr:_ui_gantt_TaskUpdatingEvent.key]
         */
      readonly key: any;
    };
    export interface TimeTooltipTemplateData {
      readonly start: Date;
      readonly end: Date;
    }
  }
  /**
   * @deprecated Use the Column type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxGanttColumn<TRowData = any, TKey = any> = Omit<
  dxGanttColumnBlank<TRowData, TKey>,
  | 'allowEditing'
  | 'allowFixing'
  | 'allowHiding'
  | 'allowReordering'
  | 'allowResizing'
  | 'allowSearch'
  | 'buttons'
  | 'columns'
  | 'editCellTemplate'
  | 'editorOptions'
  | 'fixed'
  | 'fixedPosition'
  | 'formItem'
  | 'hidingPriority'
  | 'isBand'
  | 'lookup'
  | 'name'
  | 'ownerBand'
  | 'renderAsync'
  | 'setCellValue'
  | 'showEditorAlways'
  | 'showInColumnChooser'
  | 'type'
  | 'validationRules'
  >;
  /**
   * [descr:dxGanttColumn]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  interface dxGanttColumnBlank<TRowData = any, TKey = any>
    extends dxTreeList.Column<TRowData, TKey> {
    /**
     * [descr:dxGanttColumn.allowEditing]
     */
    allowEditing: any;
    /**
     * [descr:dxGanttColumn.allowFixing]
     */
    allowFixing: any;
    /**
     * [descr:dxGanttColumn.allowHiding]
     */
    allowHiding: any;
    /**
     * [descr:dxGanttColumn.allowReordering]
     */
    allowReordering: any;
    /**
     * [descr:dxGanttColumn.allowResizing]
     */
    allowResizing: any;
    /**
     * [descr:dxGanttColumn.allowSearch]
     */
    allowSearch: any;
    /**
     * [descr:dxGanttColumn.buttons]
     */
    buttons: any;
    /**
     * [descr:dxGanttColumn.columns]
     */
    columns: any;
    /**
     * [descr:dxGanttColumn.editorOptions]
     */
    editorOptions: any;
    /**
     * [descr:dxGanttColumn.editCellTemplate]
     */
    editCellTemplate: any;
    /**
     * [descr:dxGanttColumn.fixed]
     */
    fixed: any;
    /**
     * [descr:dxGanttColumn.fixedPosition]
     */
    fixedPosition: any;
    /**
     * [descr:dxGanttColumn.formItem]
     */
    formItem: any;
    /**
     * [descr:dxGanttColumn.hidingPriority]
     */
    hidingPriority: any;
    /**
     * [descr:dxGanttColumn.isBand]
     */
    isBand: any;
    /**
     * [descr:dxGanttColumn.lookup]
     */
    lookup: any;
    /**
     * [descr:dxGanttColumn.name]
     */
    name: any;
    /**
     * [descr:dxGanttColumn.ownerBand]
     */
    ownerBand: any;
    /**
     * [descr:dxGanttColumn.renderAsync]
     */
    renderAsync: any;
    /**
     * [descr:dxGanttColumn.setCellValue]
     */
    setCellValue: any;
    /**
     * [descr:dxGanttColumn.showEditorAlways]
     */
    showEditorAlways: any;
    /**
     * [descr:dxGanttColumn.showInColumnChooser]
     */
    showInColumnChooser: any;
    /**
     * [descr:dxGanttColumn.validationRules]
     */
    validationRules: any;
    /**
     * [descr:dxGanttColumn.type]
     */
    type: any;
  }
  /**
   * [descr:dxGanttContextMenu]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttContextMenu {
    /**
     * [descr:dxGanttContextMenu.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:dxGanttContextMenu.items]
     */
    items?: (| dxGantt.ContextMenuItem
    | dxGantt.GanttPredefinedContextMenuItem)[];
  }
  /**
   * @deprecated Use ContextMenuItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttContextMenuItem
    extends dxContextMenu.Item {
    /**
     * [descr:dxGanttContextMenuItem.name]
     */
    name?: dxGantt.GanttPredefinedContextMenuItem | string;
  }
  /**
   * [descr:dxGanttFilterRow]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttFilterRow {
    /**
     * [descr:dxGanttFilterRow.betweenEndText]
     */
    betweenEndText?: string;
    /**
     * [descr:dxGanttFilterRow.betweenStartText]
     */
    betweenStartText?: string;
    /**
     * [descr:dxGanttFilterRow.operationDescriptions]
     */
    operationDescriptions?: dxGanttFilterRowOperationDescriptions;
    /**
     * [descr:dxGanttFilterRow.resetOperationText]
     */
    resetOperationText?: string;
    /**
     * [descr:dxGanttFilterRow.showAllText]
     */
    showAllText?: string;
    /**
     * [descr:dxGanttFilterRow.showOperationChooser]
     */
    showOperationChooser?: boolean;
    /**
     * [descr:dxGanttFilterRow.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:dxGanttFilterRowOperationDescriptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttFilterRowOperationDescriptions {
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.between]
     */
    between?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.contains]
     */
    contains?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.endsWith]
     */
    endsWith?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.equal]
     */
    equal?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.greaterThan]
     */
    greaterThan?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.greaterThanOrEqual]
     */
    greaterThanOrEqual?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.lessThan]
     */
    lessThan?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.lessThanOrEqual]
     */
    lessThanOrEqual?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.notContains]
     */
    notContains?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.notEqual]
     */
    notEqual?: string;
    /**
     * [descr:dxGanttFilterRowOperationDescriptions.startsWith]
     */
    startsWith?: string;
  }
  /**
   * [descr:dxGanttHeaderFilter]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttHeaderFilter {
    /**
     * [descr:dxGanttHeaderFilter.allowSearch]
     * @deprecated [depNote:dxGanttHeaderFilter.allowSearch]
     */
    allowSearch?: boolean;
    /**
     * [descr:dxGanttHeaderFilter.allowSelectAll]
     */
    allowSelectAll?: boolean;
    /**
     * [descr:dxGanttHeaderFilter.height]
     */
    height?: number;
    /**
     * [descr:dxGanttHeaderFilter.search]
     */
    search?: common.grids.HeaderFilterSearchConfig;
    /**
     * [descr:dxGanttHeaderFilter.searchTimeout]
     * @deprecated [depNote:dxGanttHeaderFilter.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:dxGanttHeaderFilter.texts]
     */
    texts?: dxGanttHeaderFilterTexts;
    /**
     * [descr:dxGanttHeaderFilter.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxGanttHeaderFilter.width]
     */
    width?: number;
  }
  /**
   * [descr:dxGanttHeaderFilterTexts]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttHeaderFilterTexts {
    /**
     * [descr:dxGanttHeaderFilterTexts.cancel]
     */
    cancel?: string;
    /**
     * [descr:dxGanttHeaderFilterTexts.emptyValue]
     */
    emptyValue?: string;
    /**
     * [descr:dxGanttHeaderFilterTexts.ok]
     */
    ok?: string;
  }
  /**
   * [descr:dxGanttOptions]
   * @deprecated [depNote:dxGanttOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttOptions extends WidgetOptions<dxGantt> {
    /**
     * [descr:dxGanttOptions.allowSelection]
     */
    allowSelection?: boolean;
    /**
     * [descr:dxGanttOptions.columns]
     */
    columns?: (dxGantt.Column | string)[];
    /**
     * [descr:dxGanttOptions.dependencies]
     */
    dependencies?: {
      /**
       * [descr:dxGanttOptions.dependencies.dataSource]
       */
      dataSource?: data.DataSource.DataSourceLike<any> | null;
      /**
       * [descr:dxGanttOptions.dependencies.keyExpr]
       */
      keyExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.dependencies.predecessorIdExpr]
       */
      predecessorIdExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.dependencies.successorIdExpr]
       */
      successorIdExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.dependencies.typeExpr]
       */
      typeExpr?: string | Function;
    };
    /**
     * [descr:dxGanttOptions.editing]
     */
    editing?: {
      /**
       * [descr:dxGanttOptions.editing.allowDependencyAdding]
       */
      allowDependencyAdding?: boolean;
      /**
       * [descr:dxGanttOptions.editing.allowDependencyDeleting]
       */
      allowDependencyDeleting?: boolean;
      /**
       * [descr:dxGanttOptions.editing.allowResourceAdding]
       */
      allowResourceAdding?: boolean;
      /**
       * [descr:dxGanttOptions.editing.allowResourceDeleting]
       */
      allowResourceDeleting?: boolean;
      /**
       * [descr:dxGanttOptions.editing.allowResourceUpdating]
       */
      allowResourceUpdating?: boolean;
      /**
       * [descr:dxGanttOptions.editing.allowTaskAdding]
       */
      allowTaskAdding?: boolean;
      /**
       * [descr:dxGanttOptions.editing.allowTaskDeleting]
       */
      allowTaskDeleting?: boolean;
      /**
       * [descr:dxGanttOptions.editing.allowTaskResourceUpdating]
       */
      allowTaskResourceUpdating?: boolean;
      /**
       * [descr:dxGanttOptions.editing.allowTaskUpdating]
       */
      allowTaskUpdating?: boolean;
      /**
       * [descr:dxGanttOptions.editing.enabled]
       */
      enabled?: boolean;
    };
    /**
     * [descr:dxGanttOptions.validation]
     */
    validation?: {
      /**
       * [descr:dxGanttOptions.validation.validateDependencies]
       */
      validateDependencies?: boolean;
      /**
       * [descr:dxGanttOptions.validation.autoUpdateParentTasks]
       */
      autoUpdateParentTasks?: boolean;
      /**
       * [descr:dxGanttOptions.validation.enablePredecessorGap]
       */
      enablePredecessorGap?: boolean;
    };
    /**
     * [descr:dxGanttOptions.sorting]
     */
    sorting?: dxGanttSorting;
    /**
     * [descr:dxGanttOptions.filterRow]
     */
    filterRow?: dxGanttFilterRow;
    /**
     * [descr:dxGanttOptions.headerFilter]
     */
    headerFilter?: dxGanttHeaderFilter;
    /**
     * [descr:dxGanttOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxGantt.SelectionChangedEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onCustomCommand]
     */
    onCustomCommand?: (e: dxGantt.CustomCommandEvent) => void;
    /**
     * [descr:dxGanttOptions.onContextMenuPreparing]
     */
    onContextMenuPreparing?: (
      e: dxGantt.ContextMenuPreparingEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onTaskInserting]
     */
    onTaskInserting?: (e: dxGantt.TaskInsertingEvent) => void;
    /**
     * [descr:dxGanttOptions.onTaskInserted]
     */
    onTaskInserted?: (e: dxGantt.TaskInsertedEvent) => void;
    /**
     * [descr:dxGanttOptions.onTaskDeleting]
     */
    onTaskDeleting?: (e: dxGantt.TaskDeletingEvent) => void;
    /**
     * [descr:dxGanttOptions.onTaskDeleted]
     */
    onTaskDeleted?: (e: dxGantt.TaskDeletedEvent) => void;
    /**
     * [descr:dxGanttOptions.onTaskUpdating]
     */
    onTaskUpdating?: (e: dxGantt.TaskUpdatingEvent) => void;
    /**
     * [descr:dxGanttOptions.onTaskUpdated]
     */
    onTaskUpdated?: (e: dxGantt.TaskUpdatedEvent) => void;
    /**
     * [descr:dxGanttOptions.onTaskMoving]
     */
    onTaskMoving?: (e: dxGantt.TaskMovingEvent) => void;
    /**
     * [descr:dxGanttOptions.onTaskEditDialogShowing]
     */
    onTaskEditDialogShowing?: (
      e: dxGantt.TaskEditDialogShowingEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onResourceManagerDialogShowing]
     */
    onResourceManagerDialogShowing?: (
      e: dxGantt.ResourceManagerDialogShowingEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onDependencyInserting]
     */
    onDependencyInserting?: (
      e: dxGantt.DependencyInsertingEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onDependencyInserted]
     */
    onDependencyInserted?: (
      e: dxGantt.DependencyInsertedEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onDependencyDeleting]
     */
    onDependencyDeleting?: (
      e: dxGantt.DependencyDeletingEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onDependencyDeleted]
     */
    onDependencyDeleted?: (
      e: dxGantt.DependencyDeletedEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onResourceInserting]
     */
    onResourceInserting?: (
      e: dxGantt.ResourceInsertingEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onResourceInserted]
     */
    onResourceInserted?: (
      e: dxGantt.ResourceInsertedEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onResourceDeleting]
     */
    onResourceDeleting?: (
      e: dxGantt.ResourceDeletingEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onResourceDeleted]
     */
    onResourceDeleted?: (e: dxGantt.ResourceDeletedEvent) => void;
    /**
     * [descr:dxGanttOptions.onResourceAssigning]
     */
    onResourceAssigning?: (
      e: dxGantt.ResourceAssigningEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onResourceAssigned]
     */
    onResourceAssigned?: (
      e: dxGantt.ResourceAssignedEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onResourceUnassigning]
     */
    onResourceUnassigning?: (
      e: dxGantt.ResourceUnassigningEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onResourceUnassigned]
     */
    onResourceUnassigned?: (
      e: dxGantt.ResourceUnassignedEvent
    ) => void;
    /**
     * [descr:dxGanttOptions.onTaskClick]
     */
    onTaskClick?: (e: dxGantt.TaskClickEvent) => void;
    /**
     * [descr:dxGanttOptions.onTaskDblClick]
     */
    onTaskDblClick?: (e: dxGantt.TaskDblClickEvent) => void;
    /**
     * [descr:dxGanttOptions.onScaleCellPrepared]
     */
    onScaleCellPrepared?: (
      e: dxGantt.ScaleCellPreparedEvent
    ) => void;

    /**
     * [descr:dxGanttOptions.resourceAssignments]
     */
    resourceAssignments?: {
      /**
       * [descr:dxGanttOptions.resourceAssignments.dataSource]
       */
      dataSource?: data.DataSource.DataSourceLike<any> | null;
      /**
       * [descr:dxGanttOptions.resourceAssignments.keyExpr]
       */
      keyExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.resourceAssignments.resourceIdExpr]
       */
      resourceIdExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.resourceAssignments.taskIdExpr]
       */
      taskIdExpr?: string | Function;
    };
    /**
     * [descr:dxGanttOptions.resources]
     */
    resources?: {
      /**
       * [descr:dxGanttOptions.resources.colorExpr]
       */
      colorExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.resources.dataSource]
       */
      dataSource?: data.DataSource.DataSourceLike<any> | null;
      /**
       * [descr:dxGanttOptions.resources.keyExpr]
       */
      keyExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.resources.textExpr]
       */
      textExpr?: string | Function;
    };
    /**
     * [descr:dxGanttOptions.scaleType]
     */
    scaleType?: dxGantt.GanttScaleType;
    /**
     * [descr:dxGanttOptions.scaleTypeRange]
     */
    scaleTypeRange?: {
      /**
       * [descr:dxGanttOptions.scaleTypeRange.min]
       */
      min?: dxGantt.GanttScaleType;
      /**
       * [descr:dxGanttOptions.scaleTypeRange.max]
       */
      max?: dxGantt.GanttScaleType;
    };
    /**
     * [descr:dxGanttOptions.selectedRowKey]
     */
    selectedRowKey?: any;
    /**
     * [descr:dxGanttOptions.showResources]
     */
    showResources?: boolean;
    /**
     * [descr:dxGanttOptions.showDependencies]
     */
    showDependencies?: boolean;
    /**
     * [descr:dxGanttOptions.showRowLines]
     */
    showRowLines?: boolean;
    /**
     * [descr:dxGanttOptions.taskListWidth]
     */
    taskListWidth?: number;
    /**
     * [descr:dxGanttOptions.taskTitlePosition]
     */
    taskTitlePosition?: dxGantt.GanttTaskTitlePosition;
    /**
     * [descr:dxGanttOptions.firstDayOfWeek]
     */
    firstDayOfWeek?: common.FirstDayOfWeek;
    /**
     * [descr:dxGanttOptions.tasks]
     */
    tasks?: {
      /**
       * [descr:dxGanttOptions.tasks.colorExpr]
       */
      colorExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.tasks.dataSource]
       */
      dataSource?: data.DataSource.DataSourceLike<any> | null;
      /**
       * [descr:dxGanttOptions.tasks.endExpr]
       */
      endExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.tasks.keyExpr]
       */
      keyExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.tasks.parentIdExpr]
       */
      parentIdExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.tasks.progressExpr]
       */
      progressExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.tasks.startExpr]
       */
      startExpr?: string | Function;
      /**
       * [descr:dxGanttOptions.tasks.titleExpr]
       */
      titleExpr?: string | Function;
    };
    /**
     * [descr:dxGanttOptions.toolbar]
     */
    toolbar?: dxGanttToolbar;
    /**
     * [descr:dxGanttOptions.contextMenu]
     */
    contextMenu?: dxGanttContextMenu;
    /**
     * [descr:dxGanttOptions.stripLines]
     */
    stripLines?: dxGanttStripLine[];
    /**
     * [descr:dxGanttOptions.taskTooltipContentTemplate]
     */
    taskTooltipContentTemplate?:
    | core.template
    | ((
      container: core.DxElement,
      task: any
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxGanttOptions.taskTimeTooltipContentTemplate]
     */
    taskTimeTooltipContentTemplate?:
    | core.template
    | ((
      container: core.DxElement,
      item: dxGantt.TimeTooltipTemplateData
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxGanttOptions.taskProgressTooltipContentTemplate]
     */
    taskProgressTooltipContentTemplate?:
    | core.template
    | ((
      container: core.DxElement,
      item: dxGantt.ProgressTooltipTemplateData
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxGanttOptions.taskContentTemplate]
     */
    taskContentTemplate?:
    | core.template
    | ((
      container: core.DxElement,
      item: dxGantt.TaskContentTemplateData
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxGanttOptions.rootValue]
     */
    rootValue?: any;
    /**
     * [descr:dxGanttOptions.startDateRange]
     */
    startDateRange?: Date;
    /**
     * [descr:dxGanttOptions.endDateRange]
     */
    endDateRange?: Date;
  }
  /**
   * [descr:dxGanttSorting]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttSorting {
    /**
     * [descr:dxGanttSorting.ascendingText]
     */
    ascendingText?: string;
    /**
     * [descr:dxGanttSorting.clearText]
     */
    clearText?: string;
    /**
     * [descr:dxGanttSorting.descendingText]
     */
    descendingText?: string;
    /**
     * [descr:dxGanttSorting.mode]
     */
    mode?: common.SingleMultipleOrNone | string;
    /**
     * [descr:dxGanttSorting.showSortIndexes]
     */
    showSortIndexes?: boolean;
  }
  /**
   * [descr:dxGanttStripLine]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttStripLine {
    /**
     * [descr:dxGanttStripLine.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxGanttStripLine.end]
     */
    end?: Date | number | string | (() => Date | number | string);
    /**
     * [descr:dxGanttStripLine.start]
     */
    start?: Date | number | string | (() => Date | number | string);
    /**
     * [descr:dxGanttStripLine.title]
     */
    title?: string;
  }
  /**
   * [descr:dxGanttToolbar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttToolbar {
    /**
     * [descr:dxGanttToolbar.items]
     */
    items?: (| dxGantt.ToolbarItem
    | dxGantt.GanttPredefinedToolbarItem)[];
  }
  /**
   * @deprecated Use ToolbarItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxGanttToolbarItem extends dxToolbar.Item {
    /**
     * [descr:dxGanttToolbarItem.name]
     */
    name?: dxGantt.GanttPredefinedToolbarItem | string;
    /**
     * [descr:dxGanttToolbarItem.location]
     */
    location?: common.ToolbarItemLocation;
  }
  /**
   * [descr:dxHtmlEditor]
   */
  export class dxHtmlEditor extends Editor<dxHtmlEditorOptions> {
    /**
     * [descr:dxHtmlEditor.blur()]
     */
    blur(): void;
    /**
     * [descr:dxHtmlEditor.clearHistory()]
     */
    clearHistory(): void;
    /**
     * [descr:dxHtmlEditor.delete(index, length)]
     */
    delete(index: number, length: number): void;
    /**
     * [descr:dxHtmlEditor.format(formatName, formatValue)]
     */
    format(
      formatName: dxHtmlEditor.HtmlEditorFormat | string,
      formatValue: any
    ): void;
    /**
     * [descr:dxHtmlEditor.formatLine(index, length, formatName, formatValue)]
     */
    formatLine(
      index: number,
      length: number,
      formatName: dxHtmlEditor.HtmlEditorFormat | string,
      formatValue: any
    ): void;
    /**
     * [descr:dxHtmlEditor.formatLine(index, length, formats)]
     */
    formatLine(index: number, length: number, formats: any): void;
    /**
     * [descr:dxHtmlEditor.formatText(index, length, formatName, formatValue)]
     */
    formatText(
      index: number,
      length: number,
      formatName: dxHtmlEditor.HtmlEditorFormat | string,
      formatValue: any
    ): void;
    /**
     * [descr:dxHtmlEditor.formatText(index, length, formats)]
     */
    formatText(index: number, length: number, formats: any): void;
    /**
     * [descr:dxHtmlEditor.get(componentPath)]
     */
    get(componentPath: string): any;
    /**
     * [descr:dxHtmlEditor.getBounds(index, length)]
     */
    getBounds(index: number, length: number): any;
    /**
     * [descr:dxHtmlEditor.getFormat()]
     */
    getFormat(): any;
    /**
     * [descr:dxHtmlEditor.getFormat(index, length)]
     */
    getFormat(index: number, length: number): any;
    /**
     * [descr:dxHtmlEditor.getLength()]
     */
    getLength(): number;
    /**
     * [descr:dxHtmlEditor.getModule(moduleName)]
     */
    getModule(moduleName: string): any;
    /**
     * [descr:dxHtmlEditor.getQuillInstance()]
     */
    getQuillInstance(): any;
    /**
     * [descr:dxHtmlEditor.getSelection()]
     */
    getSelection(focus?: boolean | undefined): any;
    /**
     * [descr:dxHtmlEditor.getText(index, length)]
     */
    getText(index: number, length: number): string;
    /**
     * [descr:dxHtmlEditor.insertEmbed(index, type, config)]
     */
    insertEmbed(index: number, type: string, config: any): void;
    /**
     * [descr:dxHtmlEditor.insertText(index, text, formatName, formatValue)]
     */
    insertText(
      index: number,
      text: string,
      formatName: dxHtmlEditor.HtmlEditorFormat | string,
      formatValue: any
    ): void;
    /**
     * [descr:dxHtmlEditor.insertText(index, text, formats)]
     */
    insertText(index: number, text: string, formats: any): void;
    /**
     * [descr:dxHtmlEditor.redo()]
     */
    redo(): void;
    /**
     * [descr:dxHtmlEditor.register(components)]
     */
    register(modules: any): void;
    /**
     * [descr:dxHtmlEditor.removeFormat(index, length)]
     */
    removeFormat(index: number, length: number): void;
    /**
     * [descr:dxHtmlEditor.setSelection(index, length)]
     */
    setSelection(index: number, length: number): void;
    /**
     * [descr:dxHtmlEditor.undo()]
     */
    undo(): void;
  }
  namespace dxHtmlEditor {
    /**
     * [descr:_ui_html_editor_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxHtmlEditor>;
    /**
     * [descr:_ui_html_editor_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxHtmlEditor>;
    /**
     * [descr:_ui_html_editor_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxHtmlEditor,
    FocusEvent
    >;
    /**
     * [descr:_ui_html_editor_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxHtmlEditor,
    FocusEvent
    >;
    export type HtmlEditorFormat =
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'size'
      | 'strike'
      | 'script'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'indent'
      | 'list'
      | 'align'
      | 'code-block';
    export type HtmlEditorImageUploadMode = 'base64' | 'server' | 'both';
    export type HtmlEditorImageUploadTab = 'url' | 'file';
    export type HtmlEditorPredefinedContextMenuItem =
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'insertTable'
      | 'insertHeaderRow'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable'
      | 'cellProperties'
      | 'tableProperties';
    export type HtmlEditorPredefinedToolbarItem =
      | 'background'
      | 'bold'
      | 'color'
      | 'font'
      | 'italic'
      | 'link'
      | 'image'
      | 'size'
      | 'strike'
      | 'subscript'
      | 'superscript'
      | 'underline'
      | 'blockquote'
      | 'header'
      | 'increaseIndent'
      | 'decreaseIndent'
      | 'orderedList'
      | 'bulletList'
      | 'alignLeft'
      | 'alignCenter'
      | 'alignRight'
      | 'alignJustify'
      | 'codeBlock'
      | 'variable'
      | 'separator'
      | 'undo'
      | 'redo'
      | 'clear'
      | 'cellProperties'
      | 'tableProperties'
      | 'insertTable'
      | 'insertHeaderRow'
      | 'insertRowAbove'
      | 'insertRowBelow'
      | 'insertColumnLeft'
      | 'insertColumnRight'
      | 'deleteColumn'
      | 'deleteRow'
      | 'deleteTable';
    /**
     * [descr:_ui_html_editor_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxHtmlEditor>;
    export type MarkupType = 'html' | 'markdown';
    export interface MentionTemplateData {
      readonly marker: string;
      readonly id?: string | number;
      readonly value?: any;
    }
    /**
     * [descr:_ui_html_editor_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxHtmlEditor> &
    events.ChangedOptionInfo;
    export type Properties = dxHtmlEditorOptions;
    /**
     * [descr:_ui_html_editor_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxHtmlEditor,
    KeyboardEvent | ClipboardEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxHtmlEditorImageUpload]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorImageUpload {
    /**
     * [descr:dxHtmlEditorImageUpload.uploadUrl]
     */
    uploadUrl?: string;
    /**
     * [descr:dxHtmlEditorImageUpload.uploadDirectory]
     */
    uploadDirectory?: string;
    /**
     * [descr:dxHtmlEditorImageUpload.fileUploadMode]
     */
    fileUploadMode?: dxHtmlEditor.HtmlEditorImageUploadMode;
    /**
     * [descr:dxHtmlEditorImageUpload.tabs]
     */
    tabs?: (| dxHtmlEditor.ImageUploadTab
    | dxHtmlEditor.HtmlEditorImageUploadTab)[];
    /**
     * [descr:dxHtmlEditorImageUpload.fileUploaderOptions]
     */
    fileUploaderOptions?: dxFileUploader.Properties;
  }
  /**
   * @deprecated Use ImageUploadTab instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorImageUploadTabItem {
    /**
     * [descr:dxHtmlEditorImageUploadTabItem.name]
     */
    name?: dxHtmlEditor.HtmlEditorImageUploadTab;
  }
  /**
   * [descr:dxHtmlEditorMediaResizing]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorMediaResizing {
    /**
     * [descr:dxHtmlEditorMediaResizing.allowedTargets]
     */
    allowedTargets?: string[];
    /**
     * [descr:dxHtmlEditorMediaResizing.enabled]
     */
    enabled?: boolean;
  }
  /**
   * [descr:dxHtmlEditorMention]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorMention {
    /**
     * [descr:dxHtmlEditorMention.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<string> | null;
    /**
     * [descr:dxHtmlEditorMention.displayExpr]
     */
    displayExpr?: string | ((item: any) => string);
    /**
     * [descr:dxHtmlEditorMention.itemTemplate]
     */
    itemTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxHtmlEditorMention.marker]
     */
    marker?: string;
    /**
     * [descr:dxHtmlEditorMention.minSearchLength]
     */
    minSearchLength?: number;
    /**
     * [descr:dxHtmlEditorMention.searchExpr]
     */
    searchExpr?: string | Function | (string | Function)[];
    /**
     * [descr:dxHtmlEditorMention.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:dxHtmlEditorMention.template]
     */
    template?:
    | core.template
    | ((
      mentionData: dxHtmlEditor.MentionTemplateData,
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxHtmlEditorMention.valueExpr]
     */
    valueExpr?: string | Function;
  }
  /**
   * [descr:dxHtmlEditorOptions]
   * @deprecated [depNote:dxHtmlEditorOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorOptions extends EditorOptions<dxHtmlEditor> {
    /**
     * [descr:dxHtmlEditorOptions.allowSoftLineBreak]
     */
    allowSoftLineBreak?: boolean;
    /**
     * [descr:dxHtmlEditorOptions.customizeModules]
     */
    customizeModules?: (config: any) => void;
    /**
     * [descr:dxHtmlEditorOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxHtmlEditorOptions.mediaResizing]
     */
    mediaResizing?: dxHtmlEditorMediaResizing;
    /**
     * [descr:dxHtmlEditorOptions.tableResizing]
     */
    tableResizing?: dxHtmlEditorTableResizing;
    /**
     * [descr:dxHtmlEditorOptions.mentions]
     */
    mentions?: dxHtmlEditorMention[];
    /**
     * [descr:dxHtmlEditorOptions.tableContextMenu]
     */
    tableContextMenu?: dxHtmlEditorTableContextMenu;
    /**
     * [descr:dxHtmlEditorOptions.imageUpload]
     */
    imageUpload?: dxHtmlEditorImageUpload;
    /**
     * [descr:dxHtmlEditorOptions.name]
     */
    name?: string;
    /**
     * [descr:dxHtmlEditorOptions.onFocusIn]
     */
    onFocusIn?: (e: dxHtmlEditor.FocusInEvent) => void;
    /**
     * [descr:dxHtmlEditorOptions.onFocusOut]
     */
    onFocusOut?: (e: dxHtmlEditor.FocusOutEvent) => void;
    /**
     * [descr:dxHtmlEditorOptions.placeholder]
     */
    placeholder?: string;
    /**
     * [descr:dxHtmlEditorOptions.toolbar]
     */
    toolbar?: dxHtmlEditorToolbar;
    /**
     * [descr:dxHtmlEditorOptions.valueType]
     */
    valueType?: dxHtmlEditor.MarkupType;
    /**
     * [descr:dxHtmlEditorOptions.variables]
     */
    variables?: dxHtmlEditorVariables;
    /**
     * [descr:dxHtmlEditorOptions.stylingMode]
     */
    stylingMode?: common.EditorStyle;
  }
  /**
   * [descr:dxHtmlEditorTableContextMenu]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorTableContextMenu {
    /**
     * [descr:dxHtmlEditorTableContextMenu.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:dxHtmlEditorTableContextMenu.items]
     */
    items?: (| dxHtmlEditor.ContextMenuItem
    | dxHtmlEditor.HtmlEditorPredefinedContextMenuItem)[];
  }
  /**
   * @deprecated Use DevExpress.ui.dxHtmlEditor.ContextMenuItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorTableContextMenuItem
    extends dxMenu.MenuBasePlainItem {
    /**
     * [descr:dxHtmlEditorTableContextMenuItem.name]
     */
    name?: dxHtmlEditor.HtmlEditorPredefinedContextMenuItem;
    /**
     * [descr:dxHtmlEditorTableContextMenuItem.items]
     */
    items?: (| dxHtmlEditor.ContextMenuItem
    | dxHtmlEditor.HtmlEditorPredefinedContextMenuItem)[];
  }
  /**
   * [descr:dxHtmlEditorTableResizing]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorTableResizing {
    /**
     * [descr:dxHtmlEditorTableResizing.minColumnWidth]
     */
    minColumnWidth?: number;
    /**
     * [descr:dxHtmlEditorTableResizing.minRowHeight]
     */
    minRowHeight?: number;
    /**
     * [descr:dxHtmlEditorTableResizing.enabled]
     */
    enabled?: boolean;
  }
  /**
   * [descr:dxHtmlEditorToolbar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorToolbar {
    /**
     * [descr:dxHtmlEditorToolbar.container]
     */
    container?: string | core.UserDefinedElement;
    /**
     * [descr:dxHtmlEditorToolbar.items]
     */
    items?: (| dxHtmlEditor.ToolbarItem
    | dxHtmlEditor.HtmlEditorPredefinedToolbarItem)[];
    /**
     * [descr:dxHtmlEditorToolbar.multiline]
     */
    multiline?: boolean;
  }
  /**
   * @deprecated Use ToolbarItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorToolbarItem
    extends dxToolbar.Item {
    /**
     * [descr:dxHtmlEditorToolbarItem.name]
     */
    name?: dxHtmlEditor.HtmlEditorPredefinedToolbarItem | string;
    /**
     * [descr:dxHtmlEditorToolbarItem.formatName]
     * @deprecated [depNote:dxHtmlEditorToolbarItem.formatName]
     */
    formatName?:
    | dxHtmlEditor.HtmlEditorPredefinedToolbarItem
    | string;
    /**
     * [descr:dxHtmlEditorToolbarItem.acceptedValues]
     */
    acceptedValues?: (string | number | boolean)[];
    /**
     * [descr:dxHtmlEditorToolbarItem.formatValues]
     * @deprecated [depNote:dxHtmlEditorToolbarItem.formatValues]
     */
    formatValues?: (string | number | boolean)[];
    /**
     * [descr:dxHtmlEditorToolbarItem.location]
     */
    location?: common.ToolbarItemLocation;
  }
  /**
   * [descr:dxHtmlEditorVariables]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxHtmlEditorVariables {
    /**
     * [descr:dxHtmlEditorVariables.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<string> | null;
    /**
     * [descr:dxHtmlEditorVariables.escapeChar]
     */
    escapeChar?: string | string[];
  }
  /**
   * [descr:dxItem]
   */
  export var dxItem: any;
  /**
   * [descr:dxList]
   */
  export class dxList<
    TItem extends dxList.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<dxListOptions<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxList.clientHeight()]
     */
    clientHeight(): number;
    /**
     * [descr:dxList.collapseGroup(groupIndex)]
     */
    collapseGroup(groupIndex: number): core.utils.DxPromise;
    /**
     * [descr:dxList.deleteItem(itemElement)]
     */
    deleteItem(itemElement: Element): core.utils.DxPromise;
    /**
     * [descr:dxList.deleteItem(itemIndex)]
     */
    deleteItem(itemIndex: number | any): core.utils.DxPromise;
    /**
     * [descr:dxList.expandGroup(groupIndex)]
     */
    expandGroup(groupIndex: number): core.utils.DxPromise;
    /**
     * [descr:dxList.isItemSelected(itemElement)]
     */
    isItemSelected(itemElement: Element): boolean;
    /**
     * [descr:dxList.isItemSelected(itemIndex)]
     */
    isItemSelected(itemIndex: number | any): boolean;
    /**
     * [descr:dxList.reload()]
     */
    reload(): void;
    /**
     * [descr:dxList.reorderItem(itemElement, toItemElement)]
     */
    reorderItem(
      itemElement: Element,
      toItemElement: Element
    ): core.utils.DxPromise;
    /**
     * [descr:dxList.reorderItem(itemIndex, toItemIndex)]
     */
    reorderItem(
      itemIndex: number | any,
      toItemIndex: number | any
    ): core.utils.DxPromise;
    /**
     * [descr:dxList.scrollBy(distance)]
     */
    scrollBy(distance: number): void;
    /**
     * [descr:dxList.scrollHeight()]
     */
    scrollHeight(): number;
    /**
     * [descr:dxList.scrollTo(location)]
     */
    scrollTo(location: number): void;
    /**
     * [descr:dxList.scrollToItem(itemElement)]
     */
    scrollToItem(itemElement: Element): void;
    /**
     * [descr:dxList.scrollToItem(itemIndex)]
     */
    scrollToItem(itemIndex: number | any): void;
    /**
     * [descr:dxList.scrollTop()]
     */
    scrollTop(): number;
    /**
     * [descr:dxList.selectAll()]
     */
    selectAll(): void;
    /**
     * [descr:dxList.selectItem(itemElement)]
     */
    selectItem(itemElement: Element): void;
    /**
     * [descr:dxList.selectItem(itemIndex)]
     */
    selectItem(itemIndex: number | any): void;
    /**
     * [descr:dxList.unselectAll()]
     */
    unselectAll(): void;
    /**
     * [descr:dxList.unselectItem(itemElement)]
     */
    unselectItem(itemElement: Element): void;
    /**
     * [descr:dxList.unselectItem(itemIndex)]
     */
    unselectItem(itemIndex: number | any): void;
    /**
     * [descr:dxList.updateDimensions()]
     */
    updateDimensions(): core.utils.DxPromise;
  }
  namespace dxList {
    /**
     * [descr:_ui_list_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>>;
    /**
     * [descr:_ui_list_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      GroupRenderedEvent: GroupRenderedEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemDeletedEvent: ItemDeletedEvent<TItem, TKey>;
      ItemDeletingEvent: ItemDeletingEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      ItemReorderedEvent: ItemReorderedEvent<TItem, TKey>;
      ItemSwipeEvent: ItemSwipeEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      PageLoadingEvent: PageLoadingEvent<TItem, TKey>;
      PullRefreshEvent: PullRefreshEvent<TItem, TKey>;
      ScrollEvent: ScrollEvent<TItem, TKey>;
      SelectAllValueChangedEvent: SelectAllValueChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_list_GroupRenderedEvent]
     */
    export type GroupRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>> & {
      /**
       * [descr:_ui_list_GroupRenderedEvent.groupData]
       */
      readonly groupData?: any;
      /**
       * [descr:_ui_list_GroupRenderedEvent.groupElement]
       */
      readonly groupElement?: core.DxElement;
      /**
       * [descr:_ui_list_GroupRenderedEvent.groupIndex]
       */
      readonly groupIndex?: number;
    };
    /**
     * [descr:_ui_list_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxList<TItem, TKey>>;
    /**
     * [descr:_ui_list_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxList<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    ListItemInfo<TItem>;
    /**
     * [descr:_ui_list_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxList<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    ListItemInfo<TItem>;
    /**
     * [descr:_ui_list_ItemDeletedEvent]
     */
    export type ItemDeletedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>> & ListItemInfo<TItem>;
    export type ItemDeleteMode =
      | 'context'
      | 'slideButton'
      | 'slideItem'
      | 'static'
      | 'swipe'
      | 'toggle';
    /**
     * [descr:_ui_list_ItemDeletingEvent]
     */
    export type ItemDeletingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>> &
    ListItemInfo<TItem> & {
      /**
         * [descr:_ui_list_ItemDeletingEvent.cancel]
         */
      cancel?: boolean | PromiseLike<boolean> | PromiseLike<void>;
    };
    /**
     * [descr:_ui_list_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxList<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    ListItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    /**
     * [descr:_ui_list_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends Item | any = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_list_ItemReorderedEvent]
     */
    export type ItemReorderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>> &
    ListItemInfo<TItem> & {
      /**
         * [descr:_ui_list_ItemReorderedEvent.fromIndex]
         */
      readonly fromIndex: number;
      /**
         * [descr:_ui_list_ItemReorderedEvent.toIndex]
         */
      readonly toIndex: number;
    };
    /**
     * [descr:_ui_list_ItemSwipeEvent]
     */
    export type ItemSwipeEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxList<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    ListItemInfo<TItem> & {
      /**
         * [descr:_ui_list_ItemSwipeEvent.direction]
         */
      readonly direction: string;
    };
    /**
     * [descr:ListItemInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ListItemInfo<TItem extends ItemLike> {
      /**
       * [descr:ListItemInfo.itemData]
       */
      readonly itemData?: TItem;
      /**
       * [descr:ListItemInfo.itemElement]
       */
      readonly itemElement: core.DxElement;
      /**
       * [descr:ListItemInfo.itemIndex]
       */
      readonly itemIndex: number | { group: number; item: number };
    }
    export type ListMenuMode = 'context' | 'slide';
    /**
     * [descr:_ui_list_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>> &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_list_PageLoadingEvent]
     */
    export type PageLoadingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>>;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxListOptions<TItem, TKey>;
    /**
     * [descr:_ui_list_PullRefreshEvent]
     */
    export type PullRefreshEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>>;
    /**
     * [descr:_ui_list_ScrollEvent]
     */
    export type ScrollEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<dxList<TItem, TKey>> &
    ScrollInfo;
    /**
     * [descr:ScrollInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ScrollInfo {
      /**
       * [descr:ScrollInfo.scrollOffset]
       */
      readonly scrollOffset?: any;
      /**
       * [descr:ScrollInfo.reachedLeft]
       */
      readonly reachedLeft: boolean;
      /**
       * [descr:ScrollInfo.reachedRight]
       */
      readonly reachedRight: boolean;
      /**
       * [descr:ScrollInfo.reachedTop]
       */
      readonly reachedTop: boolean;
      /**
       * [descr:ScrollInfo.reachedBottom]
       */
      readonly reachedBottom: boolean;
    }
    /**
     * [descr:_ui_list_SelectAllValueChangedEvent]
     */
    export type SelectAllValueChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>> & {
      /**
       * [descr:_ui_list_SelectAllValueChangedEvent.value]
       */
      readonly value: boolean;
    };
    /**
     * [descr:_ui_list_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxList<TItem, TKey>> &
    CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxListItem extends CollectionWidgetItem {
    /**
     * [descr:dxListItem.badge]
     */
    badge?: string;
    /**
     * [descr:dxListItem.icon]
     */
    icon?: string;
    /**
     * [descr:dxListItem.key]
     */
    key?: string;
    /**
     * [descr:dxListItem.showChevron]
     */
    showChevron?: boolean;
  }
  /**
   * [descr:dxListOptions]
   * @deprecated [depNote:dxListOptions]
   */
  export interface dxListOptions<
    TItem extends dxList.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<dxList<TItem, TKey>, TItem, TKey>,
    SearchBoxMixinOptions {
    /**
     * [descr:dxListOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxListOptions.allowItemDeleting]
     */
    allowItemDeleting?: boolean;
    /**
     * [descr:dxListOptions.bounceEnabled]
     */
    bounceEnabled?: boolean;
    /**
     * [descr:dxListOptions.collapsibleGroups]
     */
    collapsibleGroups?: boolean;
    /**
     * [descr:dxListOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxListOptions.displayExpr]
     */
    displayExpr?: string | ((item: TItem) => string);
    /**
     * [descr:dxListOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxListOptions.groupTemplate]
     */
    groupTemplate?:
    | core.template
    | ((
      groupData: any,
      groupIndex: number,
      groupElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxListOptions.grouped]
     */
    grouped?: boolean;
    /**
     * [descr:dxListOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxListOptions.indicateLoading]
     */
    indicateLoading?: boolean;
    /**
     * [descr:dxListOptions.itemDeleteMode]
     */
    itemDeleteMode?: dxList.ItemDeleteMode;
    /**
     * [descr:dxListOptions.itemDragging]
     */
    itemDragging?: dxSortableOptions;
    /**
     * [descr:dxListOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxListOptions.menuItems]
     */
    menuItems?: {
      /**
       * [descr:dxListOptions.menuItems.action]
       */
      action?: (itemElement: core.DxElement, itemData: TItem) => any;
      /**
       * [descr:dxListOptions.menuItems.text]
       */
      text?: string;
    }[];
    /**
     * [descr:dxListOptions.menuMode]
     */
    menuMode?: dxList.ListMenuMode;
    /**
     * [descr:dxListOptions.nextButtonText]
     */
    nextButtonText?: string;
    /**
     * [descr:dxListOptions.onGroupRendered]
     */
    onGroupRendered?: (
      e: dxList.GroupRenderedEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxListOptions.onItemClick]
     */
    onItemClick?:
    | ((e: dxList.ItemClickEvent<TItem, TKey>) => void)
    | string;
    /**
     * [descr:dxListOptions.onItemContextMenu]
     */
    onItemContextMenu?: (
      e: dxList.ItemContextMenuEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxListOptions.onItemDeleted]
     */
    onItemDeleted?: (
      e: dxList.ItemDeletedEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxListOptions.onItemDeleting]
     */
    onItemDeleting?: (
      e: dxList.ItemDeletingEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxListOptions.onItemHold]
     */
    onItemHold?: (e: dxList.ItemHoldEvent<TItem, TKey>) => void;
    /**
     * [descr:dxListOptions.onItemReordered]
     */
    onItemReordered?: (
      e: dxList.ItemReorderedEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxListOptions.onItemSwipe]
     */
    onItemSwipe?: (e: dxList.ItemSwipeEvent<TItem, TKey>) => void;
    /**
     * [descr:dxListOptions.onPageLoading]
     */
    onPageLoading?: (
      e: dxList.PageLoadingEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxListOptions.onPullRefresh]
     */
    onPullRefresh?: (
      e: dxList.PullRefreshEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxListOptions.onScroll]
     */
    onScroll?: (e: dxList.ScrollEvent<TItem, TKey>) => void;
    /**
     * [descr:dxListOptions.onSelectAllValueChanged]
     */
    onSelectAllValueChanged?: (
      e: dxList.SelectAllValueChangedEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxListOptions.pageLoadMode]
     */
    pageLoadMode?: common.PageLoadMode;
    /**
     * [descr:dxListOptions.pageLoadingText]
     */
    pageLoadingText?: string;
    /**
     * [descr:dxListOptions.pullRefreshEnabled]
     */
    pullRefreshEnabled?: boolean;
    /**
     * [descr:dxListOptions.pulledDownText]
     */
    pulledDownText?: string;
    /**
     * [descr:dxListOptions.pullingDownText]
     */
    pullingDownText?: string;
    /**
     * [descr:dxListOptions.refreshingText]
     */
    refreshingText?: string;
    /**
     * [descr:dxListOptions.repaintChangesOnly]
     */
    repaintChangesOnly?: boolean;
    /**
     * [descr:dxListOptions.scrollByContent]
     */
    scrollByContent?: boolean;
    /**
     * [descr:dxListOptions.scrollByThumb]
     */
    scrollByThumb?: boolean;
    /**
     * [descr:dxListOptions.scrollingEnabled]
     */
    scrollingEnabled?: boolean;
    /**
     * [descr:dxListOptions.selectAllMode]
     */
    selectAllMode?: common.SelectAllMode;
    /**
     * [descr:dxListOptions.selectByClick]
     */
    selectByClick?: boolean;
    /**
     * [descr:dxListOptions.selectionMode]
     */
    selectionMode?: common.SingleMultipleAllOrNone;
    /**
     * [descr:dxListOptions.showScrollbar]
     */
    showScrollbar?: common.ScrollbarMode;
    /**
     * [descr:dxListOptions.showSelectionControls]
     */
    showSelectionControls?: boolean;
    /**
     * [descr:dxListOptions.selectAllText]
     */
    selectAllText?: string;
    /**
     * [descr:dxListOptions.useNativeScrolling]
     */
    useNativeScrolling?: boolean;
  }
  /**
   * [descr:dxLoadIndicator]
   */
  export class dxLoadIndicator extends Widget<dxLoadIndicatorOptions> {}
  namespace dxLoadIndicator {
    /**
     * [descr:_ui_load_indicator_ContentReadyEvent]
     */
    export type ContentReadyEvent =
      events.EventInfo<dxLoadIndicator>;
    /**
     * [descr:_ui_load_indicator_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxLoadIndicator>;
    /**
     * [descr:_ui_load_indicator_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxLoadIndicator>;
    /**
     * [descr:_ui_load_indicator_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxLoadIndicator> &
      events.ChangedOptionInfo;
    export type Properties = dxLoadIndicatorOptions;
  }
  /**
   * [descr:dxLoadIndicatorOptions]
   * @deprecated [depNote:dxLoadIndicatorOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLoadIndicatorOptions
    extends WidgetOptions<dxLoadIndicator> {
    /**
     * [descr:dxLoadIndicatorOptions.indicatorSrc]
     */
    indicatorSrc?: string;
  }
  /**
   * [descr:dxLoadPanel]
   */
  export class dxLoadPanel extends dxOverlay<dxLoadPanelOptions> {}
  namespace dxLoadPanel {
    /**
     * [descr:_ui_load_panel_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxLoadPanel>;
    /**
     * [descr:_ui_load_panel_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxLoadPanel>;
    /**
     * [descr:_ui_load_panel_HiddenEvent]
     */
    export type HiddenEvent = events.EventInfo<dxLoadPanel>;
    /**
     * [descr:_ui_load_panel_HidingEvent]
     */
    export type HidingEvent = events.Cancelable &
    events.EventInfo<dxLoadPanel>;
    /**
     * [descr:_ui_load_panel_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxLoadPanel>;
    /**
     * [descr:_ui_load_panel_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxLoadPanel> &
    events.ChangedOptionInfo;
    export type Properties = dxLoadPanelOptions;
    /**
     * [descr:_ui_load_panel_ShowingEvent]
     */
    export type ShowingEvent = events.Cancelable &
    events.EventInfo<dxLoadPanel>;
    /**
     * [descr:_ui_load_panel_ShownEvent]
     */
    export type ShownEvent = events.EventInfo<dxLoadPanel>;
  }
  /**
   * [descr:dxLoadPanelAnimation]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLoadPanelAnimation extends dxOverlayAnimation {
    /**
     * [descr:dxLoadPanelOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxLoadPanelOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxLoadPanelOptions]
   * @deprecated [depNote:dxLoadPanelOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLoadPanelOptions extends dxOverlayOptions<dxLoadPanel> {
    /**
     * [descr:dxLoadPanelOptions.animation]
     */
    animation?: dxLoadPanelAnimation;
    /**
     * [descr:dxLoadPanelOptions.container]
     */
    container?: string | core.UserDefinedElement;
    /**
     * [descr:dxLoadPanelOptions.delay]
     */
    delay?: number;
    /**
     * [descr:dxLoadPanelOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxLoadPanelOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxLoadPanelOptions.indicatorSrc]
     */
    indicatorSrc?: string;
    /**
     * [descr:dxLoadPanelOptions.maxHeight]
     */
    maxHeight?: number | string | (() => number | string);
    /**
     * [descr:dxLoadPanelOptions.maxWidth]
     */
    maxWidth?: number | string | (() => number | string);
    /**
     * [descr:dxLoadPanelOptions.message]
     */
    message?: string;
    /**
     * [descr:dxLoadPanelOptions.position]
     */
    position?: common.PositionAlignment | PositionConfig | Function;
    /**
     * [descr:dxLoadPanelOptions.shadingColor]
     */
    shadingColor?: string;
    /**
     * [descr:dxLoadPanelOptions.showIndicator]
     */
    showIndicator?: boolean;
    /**
     * [descr:dxLoadPanelOptions.showPane]
     */
    showPane?: boolean;
    /**
     * [descr:dxLoadPanelOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:dxLookup]
   */
  export class dxLookup extends dxDropDownList<dxLookupOptions> {}
  namespace dxLookup {
    /**
     * [descr:_ui_lookup_ClosedEvent]
     */
    export type ClosedEvent = events.EventInfo<dxLookup>;
    /**
     * [descr:_ui_lookup_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxLookup>;
    /**
     * [descr:_ui_lookup_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxLookup>;
    /**
     * [descr:_ui_lookup_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxLookup>;
    /**
     * [descr:_ui_lookup_ItemClickEvent]
     */
    export type ItemClickEvent = events.NativeEventInfo<
    dxLookup,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo;
    /**
     * [descr:_ui_lookup_OpenedEvent]
     */
    export type OpenedEvent = events.EventInfo<dxLookup>;
    /**
     * [descr:_ui_lookup_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxLookup> &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_lookup_PageLoadingEvent]
     */
    export type PageLoadingEvent = events.EventInfo<dxLookup>;
    export type Properties = dxLookupOptions;
    /**
     * [descr:_ui_lookup_PullRefreshEvent]
     */
    export type PullRefreshEvent = events.EventInfo<dxLookup>;
    /**
     * [descr:_ui_lookup_ScrollEvent]
     */
    export type ScrollEvent = events.NativeEventInfo<
    dxLookup,
    MouseEvent | Event
    > &
    dxList.ScrollInfo;
    /**
     * [descr:_ui_lookup_SelectionChangedEvent]
     */
    export type SelectionChangedEvent = events.EventInfo<dxLookup> &
    dxDropDownList.SelectionChangedInfo;
    export type TitleRenderedEvent = events.EventInfo<dxLookup> &
    dxPopup.TitleRenderedInfo;
    /**
     * [descr:_ui_lookup_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxLookup,
    KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxLookupOptions]
   * @deprecated [depNote:dxLookupOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLookupOptions extends dxDropDownListOptions<dxLookup> {
    /**
     * [descr:dxLookupOptions.applyButtonText]
     */
    applyButtonText?: string;
    /**
     * [descr:dxLookupOptions.applyValueMode]
     */
    applyValueMode?: common.ApplyValueMode;
    /**
     * [descr:dxLookupOptions.cancelButtonText]
     */
    cancelButtonText?: string;
    /**
     * [descr:dxLookupOptions.cleanSearchOnOpening]
     */
    cleanSearchOnOpening?: boolean;
    /**
     * [descr:dxLookupOptions.clearButtonText]
     */
    clearButtonText?: string;
    /**
     * [descr:dxLookupOptions.fieldTemplate]
     */
    fieldTemplate?:
    | core.template
    | ((
      selectedItem: any,
      fieldElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxLookupOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxLookupOptions.fullScreen]
     * @deprecated [depNote:dxLookupOptions.fullScreen]
     */
    fullScreen?: boolean;
    /**
     * [descr:dxLookupOptions.groupTemplate]
     */
    groupTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxLookupOptions.grouped]
     */
    grouped?: boolean;
    /**
     * [descr:dxLookupOptions.nextButtonText]
     */
    nextButtonText?: string;
    /**
     * [descr:dxLookupOptions.onPageLoading]
     */
    onPageLoading?: (e: dxLookup.PageLoadingEvent) => void;
    /**
     * [descr:dxLookupOptions.onPullRefresh]
     */
    onPullRefresh?: (e: dxLookup.PullRefreshEvent) => void;
    /**
     * [descr:dxLookupOptions.onScroll]
     */
    onScroll?: (e: dxLookup.ScrollEvent) => void;
    /**
     * [descr:dxLookupOptions.onValueChanged]
     */
    onValueChanged?: (e: dxLookup.ValueChangedEvent) => void;
    /**
     * [descr:dxLookupOptions.pageLoadMode]
     */
    pageLoadMode?: common.PageLoadMode;
    /**
     * [descr:dxLookupOptions.pageLoadingText]
     */
    pageLoadingText?: string;
    /**
     * [descr:dxLookupOptions.placeholder]
     */
    placeholder?: string;
    /**
     * [descr:dxLookupOptions.pullRefreshEnabled]
     */
    pullRefreshEnabled?: boolean;
    /**
     * [descr:dxLookupOptions.pulledDownText]
     */
    pulledDownText?: string;
    /**
     * [descr:dxLookupOptions.pullingDownText]
     */
    pullingDownText?: string;
    /**
     * [descr:dxLookupOptions.refreshingText]
     */
    refreshingText?: string;
    /**
     * [descr:dxLookupOptions.searchEnabled]
     */
    searchEnabled?: boolean;
    /**
     * [descr:dxLookupOptions.searchPlaceholder]
     */
    searchPlaceholder?: string;
    /**
     * [descr:dxLookupOptions.showCancelButton]
     */
    showCancelButton?: boolean;
    /**
     * [descr:dxLookupOptions.showClearButton]
     */
    showClearButton?: boolean;
    /**
     * [descr:dxLookupOptions.searchStartEvent]
     */
    searchStartEvent?: string;
    /**
     * [descr:dxLookupOptions.useNativeScrolling]
     */
    useNativeScrolling?: boolean;
    /**
     * [descr:dxLookupOptions.usePopover]
     */
    usePopover?: boolean;
    /**
     * [descr:dxLookupOptions.valueChangeEvent]
     * @deprecated [depNote:dxLookupOptions.valueChangeEvent]
     */
    valueChangeEvent?: string;
    /**
     * [descr:dxLookupOptions.dropDownCentered]
     */
    dropDownCentered?: boolean;
    /**
     * [descr:dxLookupOptions.dropDownOptions]
     */
    dropDownOptions?: dxPopover.Properties;
  }
  /**
   * [descr:dxMap]
   */
  export class dxMap extends Widget<dxMapOptions> {
    /**
     * [descr:dxMap.addMarker(markerOptions)]
     */
    addMarker(
      markerOptions: any | any[]
    ): core.utils.DxPromise<any>;
    /**
     * [descr:dxMap.addRoute(routeOptions)]
     */
    addRoute(options: any | any[]): core.utils.DxPromise<any>;
    /**
     * [descr:dxMap.removeMarker(marker)]
     */
    removeMarker(
      marker: any | number | any[]
    ): core.utils.DxPromise;
    /**
     * [descr:dxMap.removeRoute(route)]
     */
    removeRoute(
      route: any | number | any[]
    ): core.utils.DxPromise;
  }
  namespace dxMap {
    /**
     * [descr:_ui_map_ClickEvent]
     */
    export type ClickEvent = events.NativeEventInfo<
    dxMap,
    MouseEvent | PointerEvent
    >;
    /**
     * [descr:_ui_map_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxMap>;
    /**
     * [descr:_ui_map_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxMap>;
    export type MapProvider = 'bing' | 'google' | 'googleStatic';
    export type MapType = 'hybrid' | 'roadmap' | 'satellite';
    /**
     * [descr:_ui_map_MarkerAddedEvent]
     */
    export type MarkerAddedEvent = events.EventInfo<dxMap> & {
      /**
       * [descr:_ui_map_MarkerAddedEvent.options]
       */
      readonly options: any;
      /**
       * [descr:_ui_map_MarkerAddedEvent.originalMarker]
       */
      originalMarker: any;
    };
    /**
     * [descr:_ui_map_MarkerRemovedEvent]
     */
    export type MarkerRemovedEvent = events.EventInfo<dxMap> & {
      /**
       * [descr:_ui_map_MarkerRemovedEvent.options]
       */
      readonly options?: any;
    };
    /**
     * [descr:_ui_map_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxMap> &
    events.ChangedOptionInfo;
    export type Properties = dxMapOptions;
    /**
     * [descr:_ui_map_ReadyEvent]
     */
    export type ReadyEvent = events.EventInfo<dxMap> & {
      /**
       * [descr:_ui_map_ReadyEvent.originalMap]
       */
      originalMap: any;
    };
    /**
     * [descr:_ui_map_RouteAddedEvent]
     */
    export type RouteAddedEvent = events.EventInfo<dxMap> & {
      /**
       * [descr:_ui_map_RouteAddedEvent.options]
       */
      readonly options: any;
      /**
       * [descr:_ui_map_RouteAddedEvent.originalRoute]
       */
      originalRoute: any;
    };
    export type RouteMode = 'driving' | 'walking';
    /**
     * [descr:_ui_map_RouteRemovedEvent]
     */
    export type RouteRemovedEvent = events.EventInfo<dxMap> & {
      /**
       * [descr:_ui_map_RouteRemovedEvent.options]
       */
      readonly options?: any;
    };
  }
  /**
   * [descr:dxMapOptions]
   * @deprecated [depNote:dxMapOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMapOptions extends WidgetOptions<dxMap> {
    /**
     * [descr:dxMapOptions.apiKey]
     */
    apiKey?:
    | string
    | {
      /**
           * [descr:dxMapOptions.apiKey.bing]
           */
      bing?: string;
      /**
           * [descr:dxMapOptions.apiKey.google]
           */
      google?: string;
      /**
           * [descr:dxMapOptions.apiKey.googleStatic]
           */
      googleStatic?: string;
    };
    /**
     * [descr:dxMapOptions.autoAdjust]
     */
    autoAdjust?: boolean;
    /**
     * [descr:dxMapOptions.center]
     */
    center?: any | string | number[];
    /**
     * [descr:dxMapOptions.controls]
     */
    controls?: boolean;
    /**
     * [descr:dxMapOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxMapOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxMapOptions.markerIconSrc]
     */
    markerIconSrc?: string;
    /**
     * [descr:dxMapOptions.markers]
     */
    markers?: {
      /**
       * [descr:dxMapOptions.markers.iconSrc]
       */
      iconSrc?: string;
      /**
       * [descr:dxMapOptions.markers.location]
       */
      location?: any | string | number[];
      /**
       * [descr:dxMapOptions.markers.onClick]
       */
      onClick?: Function;
      /**
       * [descr:dxMapOptions.markers.tooltip]
       */
      tooltip?:
      | string
      | {
        /**
             * [descr:dxMapOptions.markers.tooltip.isShown]
             */
        isShown?: boolean;
        /**
             * [descr:dxMapOptions.markers.tooltip.text]
             */
        text?: string;
      };
    }[];
    /**
     * [descr:dxMapOptions.onClick]
     */
    onClick?: ((e: dxMap.ClickEvent) => void) | string;
    /**
     * [descr:dxMapOptions.onMarkerAdded]
     */
    onMarkerAdded?: (e: dxMap.MarkerAddedEvent) => void;
    /**
     * [descr:dxMapOptions.onMarkerRemoved]
     */
    onMarkerRemoved?: (e: dxMap.MarkerRemovedEvent) => void;
    /**
     * [descr:dxMapOptions.onReady]
     */
    onReady?: (e: dxMap.ReadyEvent) => void;
    /**
     * [descr:dxMapOptions.onRouteAdded]
     */
    onRouteAdded?: (e: dxMap.RouteAddedEvent) => void;
    /**
     * [descr:dxMapOptions.onRouteRemoved]
     */
    onRouteRemoved?: (e: dxMap.RouteRemovedEvent) => void;
    /**
     * [descr:dxMapOptions.provider]
     */
    provider?: dxMap.MapProvider;
    /**
     * [descr:dxMapOptions.routes]
     */
    routes?: {
      /**
       * [descr:dxMapOptions.routes.color]
       */
      color?: string;
      /**
       * [descr:dxMapOptions.routes.locations]
       */
      locations?: any[];
      /**
       * [descr:dxMapOptions.routes.mode]
       */
      mode?: dxMap.RouteMode;
      /**
       * [descr:dxMapOptions.routes.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxMapOptions.routes.weight]
       */
      weight?: number;
    }[];
    /**
     * [descr:dxMapOptions.type]
     */
    type?: dxMap.MapType;
    /**
     * [descr:dxMapOptions.width]
     */
    width?: number | string | (() => number | string);
    /**
     * [descr:dxMapOptions.zoom]
     */
    zoom?: number;
  }
  /**
   * [descr:dxMenu]
   */
  export class dxMenu<TKey = any> extends dxMenuBase<
  dxMenuOptions<TKey>,
  dxMenuItem,
  TKey
  > {}
  namespace dxMenu {
    /**
     * [descr:_ui_menu_ContentReadyEvent]
     */
    export type ContentReadyEvent<TKey = any> = events.EventInfo<
    dxMenu<TKey>
    >;
    /**
     * [descr:_ui_menu_DisposingEvent]
     */
    export type DisposingEvent<TKey = any> = events.EventInfo<
    dxMenu<TKey>
    >;
    export interface ExplicitTypes<TKey = any> {
      Properties: Properties<TKey>;
      ContentReadyEvent: ContentReadyEvent<TKey>;
      DisposingEvent: DisposingEvent<TKey>;
      InitializedEvent: InitializedEvent<TKey>;
      ItemClickEvent: ItemClickEvent<TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TKey>;
      OptionChangedEvent: OptionChangedEvent<TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TKey>;
      SubmenuHiddenEvent: SubmenuHiddenEvent<TKey>;
      SubmenuHidingEvent: SubmenuHidingEvent<TKey>;
      SubmenuShowingEvent: SubmenuShowingEvent<TKey>;
      SubmenuShownEvent: SubmenuShownEvent<TKey>;
    }
    /**
     * [descr:_ui_menu_InitializedEvent]
     */
    export type InitializedEvent<TKey = any> =
      events.InitializedEventInfo<dxMenu<TKey>>;
    /**
     * [descr:_ui_menu_ItemClickEvent]
     */
    export type ItemClickEvent<TKey = any> = events.NativeEventInfo<
    dxMenu<TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<Item>;
    /**
     * [descr:_ui_menu_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<TKey = any> =
      events.NativeEventInfo<
      dxMenu<TKey>,
      MouseEvent | PointerEvent | TouchEvent
      > &
      events.ItemInfo<Item>;
    /**
     * [descr:_ui_menu_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<TKey = any> = events.EventInfo<
    dxMenu<TKey>
    > &
    events.ItemInfo<Item>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface MenuBasePlainItem extends CollectionWidgetItem {
      /**
       * [descr:dxMenuBaseItem.beginGroup]
       */
      beginGroup?: boolean;
      /**
       * [descr:dxMenuBaseItem.closeMenuOnClick]
       */
      closeMenuOnClick?: boolean;
      /**
       * [descr:dxMenuBaseItem.disabled]
       */
      disabled?: boolean;
      /**
       * [descr:dxMenuBaseItem.icon]
       */
      icon?: string;
      /**
       * [descr:dxMenuBaseItem.selectable]
       */
      selectable?: boolean;
      /**
       * [descr:dxMenuBaseItem.selected]
       */
      selected?: boolean;
      /**
       * [descr:dxMenuBaseItem.text]
       */
      text?: string;
      /**
       * [descr:dxMenuBaseItem.visible]
       */
      visible?: boolean;
    }
    /**
     * [descr:_ui_menu_OptionChangedEvent]
     */
    export type OptionChangedEvent<TKey = any> = events.EventInfo<
    dxMenu<TKey>
    > &
    events.ChangedOptionInfo;
    export type Properties<TKey = any> = dxMenuOptions<TKey>;
    /**
     * [descr:_ui_menu_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<TKey = any> = events.EventInfo<
    dxMenu<TKey>
    > &
    CollectionWidget.SelectionChangedInfo<Item>;
    export type SubmenuDirection = 'auto' | 'leftOrTop' | 'rightOrBottom';
    /**
     * [descr:_ui_menu_SubmenuHiddenEvent]
     */
    export type SubmenuHiddenEvent<TKey = any> = events.EventInfo<
    dxMenu<TKey>
    > & {
      /**
       * [descr:_ui_menu_SubmenuHiddenEvent.rootItem]
       */
      readonly rootItem?: core.DxElement;
    };
    /**
     * [descr:_ui_menu_SubmenuHidingEvent]
     */
    export type SubmenuHidingEvent<TKey = any> = events.Cancelable &
    events.EventInfo<dxMenu<TKey>> & {
      /**
         * [descr:_ui_menu_SubmenuHidingEvent.rootItem]
         */
      readonly rootItem?: core.DxElement;
    };
    /**
     * [descr:_ui_menu_SubmenuShowingEvent]
     */
    export type SubmenuShowingEvent<TKey = any> = events.EventInfo<
    dxMenu<TKey>
    > & {
      /**
       * [descr:_ui_menu_SubmenuShowingEvent.rootItem]
       */
      readonly rootItem?: core.DxElement;
    };
    /**
     * [descr:_ui_menu_SubmenuShownEvent]
     */
    export type SubmenuShownEvent<TKey = any> = events.EventInfo<
    dxMenu<TKey>
    > & {
      /**
       * [descr:_ui_menu_SubmenuShownEvent.rootItem]
       */
      readonly rootItem?: core.DxElement;
    };
  }
  /**
   * [descr:dxMenuBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxMenuBase<
    TProperties extends dxMenuBaseOptions<any, TItem, TKey>,
    TItem extends dxMenuBaseItem = dxMenuBaseItem,
    TKey = any,
  > extends HierarchicalCollectionWidget<TProperties, TItem, TKey> {
    /**
     * [descr:dxMenuBase.selectItem(itemElement)]
     */
    selectItem(itemElement: Element): void;
    /**
     * [descr:dxMenuBase.unselectItem(itemElement)]
     */
    unselectItem(itemElement: Element): void;
  }
  /**
   * [descr:dxMenuBaseItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMenuBaseItem
    extends dxMenu.MenuBasePlainItem {
    /**
     * [descr:dxMenuBaseItem.items]
     */
    items?: dxMenuBaseItem[];
  }
  /**
   * [descr:dxMenuBaseOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMenuBaseOptions<
    TComponent extends dxMenuBase<any, TItem, TKey>,
    TItem extends dxMenuBaseItem = dxMenuBaseItem,
    TKey = any,
  > extends Omit<
    HierarchicalCollectionWidgetOptions<TComponent, TItem, TKey>,
    'dataSource'
    > {
    /**
     * [descr:dxMenuBaseOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxMenuBaseOptions.animation]
     */
    animation?: {
      /**
       * [descr:dxMenuBaseOptions.animation.hide]
       */
      hide?: AnimationConfig;
      /**
       * [descr:dxMenuBaseOptions.animation.show]
       */
      show?: AnimationConfig;
    };
    /**
     * [descr:dxMenuBaseOptions.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxMenuBaseOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxMenuBaseOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxMenuBaseOptions.selectByClick]
     */
    selectByClick?: boolean;
    /**
     * [descr:dxMenuBaseOptions.selectionMode]
     */
    selectionMode?: common.SingleOrNone;
    /**
     * [descr:dxMenuBaseOptions.showSubmenuMode]
     */
    showSubmenuMode?:
    | {
      /**
           * [descr:dxMenuBaseOptions.showSubmenuMode.delay]
           */
      delay?:
      | {
        /**
                 * [descr:dxMenuBaseOptions.showSubmenuMode.delay.hide]
                 */
        hide?: number;
        /**
                 * [descr:dxMenuBaseOptions.showSubmenuMode.delay.show]
                 */
        show?: number;
      }
      | number;
      /**
           * [descr:dxMenuBaseOptions.showSubmenuMode.name]
           */
      name?: common.SubmenuShowMode;
    }
    | common.SubmenuShowMode;
  }
  /**
   * @deprecated Use DevExpress.ui.dxMenu.Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMenuItem extends dxMenuBaseItem {
    /**
     * [descr:dxMenuItem.items]
     */
    items?: dxMenu.Item[];
    /**
     * [descr:dxMenuItem.url]
     */
    url?: string;
    /**
     * [descr:dxMenuItem.linkAttr]
     */
    linkAttr?: { [key: string]: any };
  }
  /**
   * [descr:dxMenuOptions]
   * @deprecated [depNote:dxMenuOptions]
   */
  export interface dxMenuOptions<TKey = any>
    extends dxMenuBaseOptions<dxMenu<TKey>, dxMenuItem, TKey> {
    /**
     * [descr:dxMenuOptions.adaptivityEnabled]
     */
    adaptivityEnabled?: boolean;
    /**
     * [descr:dxMenuOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<
    dxMenu.Item,
    TKey
    > | null;
    /**
     * [descr:dxMenuOptions.hideSubmenuOnMouseLeave]
     */
    hideSubmenuOnMouseLeave?: boolean;
    /**
     * [descr:dxMenuOptions.items]
     */
    items?: dxMenu.Item[];
    /**
     * [descr:dxMenuOptions.onSubmenuHidden]
     */
    onSubmenuHidden?: (
      e: dxMenu.SubmenuHiddenEvent<TKey>
    ) => void;
    /**
     * [descr:dxMenuOptions.onSubmenuHiding]
     */
    onSubmenuHiding?: (
      e: dxMenu.SubmenuHidingEvent<TKey>
    ) => void;
    /**
     * [descr:dxMenuOptions.onSubmenuShowing]
     */
    onSubmenuShowing?: (
      e: dxMenu.SubmenuShowingEvent<TKey>
    ) => void;
    /**
     * [descr:dxMenuOptions.onSubmenuShown]
     */
    onSubmenuShown?: (e: dxMenu.SubmenuShownEvent<TKey>) => void;
    /**
     * [descr:dxMenuOptions.orientation]
     */
    orientation?: common.Orientation;
    /**
     * [descr:dxMenuOptions.showFirstSubmenuMode]
     */
    showFirstSubmenuMode?:
    | {
      /**
           * [descr:dxMenuOptions.showFirstSubmenuMode.delay]
           */
      delay?:
      | {
        /**
                 * [descr:dxMenuOptions.showFirstSubmenuMode.delay.hide]
                 */
        hide?: number;
        /**
                 * [descr:dxMenuOptions.showFirstSubmenuMode.delay.show]
                 */
        show?: number;
      }
      | number;
      /**
           * [descr:dxMenuOptions.showFirstSubmenuMode.name]
           */
      name?: common.SubmenuShowMode;
    }
    | common.SubmenuShowMode;
    /**
     * [descr:dxMenuOptions.submenuDirection]
     */
    submenuDirection?: dxMenu.SubmenuDirection;
  }
  /**
   * [descr:dxMultiView]
   */
  export class dxMultiView<
    TItem extends dxMultiView.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<
    dxMultiView.Properties<TItem, TKey>,
    TItem,
    TKey
    > {}
  namespace dxMultiView {
    /**
     * [descr:_ui_multi_view_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxMultiView<TItem, TKey>>;
    /**
     * [descr:_ui_multi_view_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxMultiView<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_multi_view_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxMultiView<TItem, TKey>>;
    /**
     * [descr:_ui_multi_view_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxMultiView<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_multi_view_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxMultiView<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_multi_view_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxMultiView<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ItemLike = string | Item | any;
    /**
     * [descr:_ui_multi_view_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxMultiView<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_multi_view_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxMultiView<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxMultiViewOptions<TItem, TKey>;
    /**
     * [descr:_ui_multi_view_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxMultiView<TItem, TKey>> &
    CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * [descr:dxMultiViewOptions]
   * @deprecated [depNote:dxMultiViewOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMultiViewBaseOptions<
    TComponent extends dxMultiView<TItem, TKey> = dxMultiView,
    TItem extends dxMultiView.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<TComponent, TItem, TKey> {
    /**
     * [descr:dxMultiViewOptions.animationEnabled]
     */
    animationEnabled?: boolean;
    /**
     * [descr:dxMultiViewOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxMultiViewOptions.deferRendering]
     */
    deferRendering?: boolean;
    /**
     * [descr:dxMultiViewOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxMultiViewOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxMultiViewOptions.loop]
     */
    loop?: boolean;
    /**
     * [descr:dxMultiViewOptions.selectedIndex]
     */
    selectedIndex?: number;
    /**
     * [descr:dxMultiViewOptions.swipeEnabled]
     */
    swipeEnabled?: boolean;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxMultiViewItem extends CollectionWidgetItem {}
  /**
   * [descr:dxMultiViewOptions]
   * @deprecated [depNote:dxMultiViewOptions]
   */
  export interface dxMultiViewOptions<
    TItem extends dxMultiView.ItemLike = any,
    TKey = any,
  > extends dxMultiViewBaseOptions<dxMultiView<TItem, TKey>, TItem, TKey> {}
  /**
   * [descr:dxNumberBox]
   */
  export class dxNumberBox extends dxTextEditor<dxNumberBoxOptions> {}
  namespace dxNumberBox {
    /**
     * [descr:_ui_number_box_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxNumberBox
    >;
    /**
     * [descr:_ui_number_box_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxNumberBox>;
    /**
     * [descr:_ui_number_box_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxNumberBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_number_box_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxNumberBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_number_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxNumberBox>;
    /**
     * [descr:_ui_number_box_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxNumberBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_number_box_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxNumberBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_number_box_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxNumberBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_number_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxNumberBox>;
    /**
     * [descr:_ui_number_box_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxNumberBox,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_number_box_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxNumberBox,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxNumberBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_number_box_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxNumberBox,
    KeyboardEvent
    >;
    export type NumberBoxPredefinedButton = 'clear' | 'spins';
    export type NumberBoxType = 'number' | 'text' | 'tel';
    /**
     * [descr:_ui_number_box_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxNumberBox> &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_number_box_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxNumberBox,
    ClipboardEvent
    >;
    export type Properties = dxNumberBoxOptions;
    /**
     * [descr:_ui_number_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxNumberBox,
    KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxNumberBoxOptions]
   * @deprecated [depNote:dxNumberBoxOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxNumberBoxOptions extends dxTextEditorOptions<dxNumberBox> {
    /**
     * [descr:dxNumberBoxOptions.buttons]
     */
    buttons?: (| dxNumberBox.NumberBoxPredefinedButton
    | common.TextEditorButton)[];
    /**
     * [descr:dxNumberBoxOptions.format]
     */
    format?: Format;
    /**
     * [descr:dxNumberBoxOptions.invalidValueMessage]
     */
    invalidValueMessage?: string;
    /**
     * [descr:dxNumberBoxOptions.max]
     */
    max?: number;
    /**
     * [descr:dxNumberBoxOptions.min]
     */
    min?: number;
    /**
     * [descr:dxNumberBoxOptions.mode]
     */
    mode?: dxNumberBox.NumberBoxType;
    /**
     * [descr:dxNumberBoxOptions.showSpinButtons]
     */
    showSpinButtons?: boolean;
    /**
     * [descr:dxNumberBoxOptions.step]
     */
    step?: number;
    /**
     * [descr:dxNumberBoxOptions.useLargeSpinButtons]
     */
    useLargeSpinButtons?: boolean;
    /**
     * [descr:dxNumberBoxOptions.value]
     */
    value?: number;
  }
  /**
   * [descr:dxOverlay]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxOverlay<TProperties> extends Widget<TProperties> {
    /**
     * [descr:dxOverlay.content()]
     */
    content(): core.DxElement;
    /**
     * [descr:dxOverlay.hide()]
     */
    hide(): core.utils.DxPromise<boolean>;
    /**
     * [descr:dxOverlay.repaint()]
     */
    repaint(): void;
    /**
     * [descr:dxOverlay.show()]
     */
    show(): core.utils.DxPromise<boolean>;
    /**
     * [descr:dxOverlay.toggle(showing)]
     */
    toggle(showing: boolean): core.utils.DxPromise<boolean>;
  }
  /**
   * [descr:dxOverlayAnimation]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxOverlayAnimation {
    /**
     * [descr:dxOverlayOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxOverlayOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxOverlayOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxOverlayOptions<TComponent>
    extends WidgetOptions<TComponent> {
    /**
     * [descr:dxOverlayOptions.animation]
     */
    animation?: dxOverlayAnimation;
    /**
     * [descr:dxOverlayOptions.closeOnOutsideClick]
     * @deprecated [depNote:dxOverlayOptions.closeOnOutsideClick]
     */
    closeOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxOverlayOptions.contentTemplate]
     */
    contentTemplate?:
    | core.template
    | ((
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxOverlayOptions.copyRootClassesToWrapper]
     * @deprecated [depNote:dxOverlayOptions.copyRootClassesToWrapper]
     */
    copyRootClassesToWrapper?: boolean;
    /**
     * [descr:dxOverlayOptions.deferRendering]
     */
    deferRendering?: boolean;
    /**
     * [descr:dxOverlayOptions.elementAttr]
     * @deprecated [depNote:dxOverlayOptions.elementAttr]
     */
    elementAttr?: any;
    /**
     * [descr:dxOverlayOptions.hideOnOutsideClick]
     */
    hideOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxOverlayOptions.hideOnParentScroll]
     */
    hideOnParentScroll?: boolean;
    /**
     * [descr:dxOverlayOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.maxHeight]
     */
    maxHeight?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.maxWidth]
     */
    maxWidth?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.minHeight]
     */
    minHeight?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.minWidth]
     */
    minWidth?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.onHidden]
     */
    onHidden?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:dxOverlayOptions.onHiding]
     */
    onHiding?: (
      e: events.Cancelable & events.EventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxOverlayOptions.onShowing]
     */
    onShowing?: (
      e: events.Cancelable & events.EventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxOverlayOptions.onShown]
     */
    onShown?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:dxOverlayOptions.position]
     */
    position?: any;
    /**
     * [descr:dxOverlayOptions.shading]
     */
    shading?: boolean;
    /**
     * [descr:dxOverlayOptions.shadingColor]
     */
    shadingColor?: string;
    /**
     * [descr:dxOverlayOptions.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxOverlayOptions.width]
     */
    width?: number | string | (() => number | string);
    /**
     * [descr:dxOverlayOptions.wrapperAttr]
     */
    wrapperAttr?: any;
  }
  /**
   * [descr:dxPivotGrid]
   */
  export class dxPivotGrid extends Widget<dxPivotGridOptions> {
    /**
     * [descr:dxPivotGrid.bindChart(chart, integrationOptions)]
     */
    bindChart(
      chart: string | core.DxElement | any,
      integrationOptions: {
        inverted?: boolean;
        dataFieldsDisplayMode?: string;
        putDataFieldsInto?: string;
        alternateDataFields?: boolean;
        processCell?: Function;
        customizeChart?: Function;
        customizeSeries?: Function;
      }
    ): Function & null;
    /**
     * [descr:dxPivotGrid.getDataSource()]
     */
    getDataSource(): data.PivotGridDataSource;
    /**
     * [descr:dxPivotGrid.getFieldChooserPopup()]
     */
    getFieldChooserPopup(): dxPopup;
    /**
     * [descr:dxPivotGrid.updateDimensions()]
     */
    updateDimensions(): void;
  }
  namespace dxPivotGrid {
    /**
     * [descr:_ui_pivot_grid_CellClickEvent]
     */
    export type CellClickEvent = events.Cancelable &
    events.NativeEventInfo<
    dxPivotGrid,
    MouseEvent | PointerEvent
    > & {
      /**
         * [descr:_ui_pivot_grid_CellClickEvent.area]
         */
      readonly area?: string;
      /**
         * [descr:_ui_pivot_grid_CellClickEvent.cellElement]
         */
      readonly cellElement?: core.DxElement;
      /**
         * [descr:_ui_pivot_grid_CellClickEvent.cell]
         */
      readonly cell?: Cell;
      /**
         * [descr:_ui_pivot_grid_CellClickEvent.rowIndex]
         */
      readonly rowIndex?: number;
      /**
         * [descr:_ui_pivot_grid_CellClickEvent.columnIndex]
         */
      readonly columnIndex?: number;
      /**
         * [descr:_ui_pivot_grid_CellClickEvent.columnFields]
         */
      readonly columnFields?: data.PivotGridDataSource.Field[];
      /**
         * [descr:_ui_pivot_grid_CellClickEvent.rowFields]
         */
      readonly rowFields?: data.PivotGridDataSource.Field[];
      /**
         * [descr:_ui_pivot_grid_CellClickEvent.dataFields]
         */
      readonly dataFields?: data.PivotGridDataSource.Field[];
    };
    /**
     * [descr:_ui_pivot_grid_CellPreparedEvent]
     */
    export type CellPreparedEvent = events.EventInfo<dxPivotGrid> & {
      /**
       * [descr:_ui_pivot_grid_CellPreparedEvent.area]
       */
      readonly area?: string;
      /**
       * [descr:_ui_pivot_grid_CellPreparedEvent.cellElement]
       */
      readonly cellElement?: core.DxElement;
      /**
       * [descr:_ui_pivot_grid_CellPreparedEvent.cell]
       */
      readonly cell?: Cell;
      /**
       * [descr:_ui_pivot_grid_CellPreparedEvent.rowIndex]
       */
      readonly rowIndex?: number;
      /**
       * [descr:_ui_pivot_grid_CellPreparedEvent.columnIndex]
       */
      readonly columnIndex?: number;
    };
    /**
     * [descr:_ui_pivot_grid_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxPivotGrid>;
    /**
     * [descr:_ui_pivot_grid_ContextMenuPreparingEvent]
     */
    export type ContextMenuPreparingEvent =
      events.EventInfo<dxPivotGrid> & {
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.area]
         */
        readonly area?: string;
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.cell]
         */
        readonly cell?: Cell;
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.cellElement]
         */
        readonly cellElement?: core.DxElement;
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.columnIndex]
         */
        readonly columnIndex?: number;
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.rowIndex]
         */
        readonly rowIndex?: number;
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.dataFields]
         */
        readonly dataFields?: data.PivotGridDataSource.Field[];
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.rowFields]
         */
        readonly rowFields?: data.PivotGridDataSource.Field[];
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.columnFields]
         */
        readonly columnFields?: data.PivotGridDataSource.Field[];
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.field]
         */
        readonly field?: data.PivotGridDataSource.Field;
        /**
         * [descr:_ui_pivot_grid_ContextMenuPreparingEvent.items]
         */
        items?: any[];
      };
    /**
     * [descr:_ui_pivot_grid_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxPivotGrid>;
    /**
     * [descr:_ui_pivot_grid_ExportingEvent]
     */
    export type ExportingEvent = events.Cancelable &
    events.EventInfo<dxPivotGrid> & {
      /**
         * [descr:_ui_pivot_grid_ExportingEvent.fileName]
         */
      fileName?: string;
    };
    /**
     * [descr:_ui_pivot_grid_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxPivotGrid>;
    /**
     * [descr:_ui_pivot_grid_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxPivotGrid> &
    events.ChangedOptionInfo;
    export type PivotGridDataFieldArea = 'column' | 'row';
    export type PivotGridRowHeaderLayout = 'standard' | 'tree';
    export type PivotGridTotalDisplayMode =
      | 'both'
      | 'columns'
      | 'none'
      | 'rows';
    export type Properties = dxPivotGridOptions;
  }
  /**
   * [descr:dxPivotGridFieldChooser]
   */
  export class dxPivotGridFieldChooser extends Widget<dxPivotGridFieldChooserOptions> {
    /**
     * [descr:dxPivotGridFieldChooser.applyChanges()]
     */
    applyChanges(): void;
    /**
     * [descr:dxPivotGridFieldChooser.cancelChanges()]
     */
    cancelChanges(): void;
    /**
     * [descr:dxPivotGridFieldChooser.getDataSource()]
     */
    getDataSource(): data.PivotGridDataSource;
    /**
     * [descr:dxPivotGridFieldChooser.updateDimensions()]
     */
    updateDimensions(): void;
  }
  namespace dxPivotGridFieldChooser {
    /**
     * [descr:_ui_pivot_grid_field_chooser_ContentReadyEvent]
     */
    export type ContentReadyEvent =
      events.EventInfo<dxPivotGridFieldChooser>;
    /**
     * [descr:_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent]
     */
    export type ContextMenuPreparingEvent =
      events.EventInfo<dxPivotGridFieldChooser> & {
        /**
         * [descr:_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent.area]
         */
        readonly area?: string;
        /**
         * [descr:_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent.field]
         */
        readonly field?: data.PivotGridDataSource.Field;
        /**
         * [descr:_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent.event]
         */
        readonly event?: events.DxEvent;
        /**
         * [descr:_ui_pivot_grid_field_chooser_ContextMenuPreparingEvent.items]
         */
        items?: any[];
      };
    /**
     * [descr:_ui_pivot_grid_field_chooser_DisposingEvent]
     */
    export type DisposingEvent =
      events.EventInfo<dxPivotGridFieldChooser>;
    /**
     * [descr:_ui_pivot_grid_field_chooser_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxPivotGridFieldChooser>;
    /**
     * [descr:_ui_pivot_grid_field_chooser_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxPivotGridFieldChooser> &
      events.ChangedOptionInfo;
    export type Properties = dxPivotGridFieldChooserOptions;
  }
  /**
   * [descr:dxPivotGridFieldChooserOptions]
   * @deprecated [depNote:dxPivotGridFieldChooserOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPivotGridFieldChooserOptions
    extends WidgetOptions<dxPivotGridFieldChooser> {
    /**
     * [descr:dxPivotGridFieldChooserOptions.allowSearch]
     */
    allowSearch?: boolean;
    /**
     * [descr:dxPivotGridFieldChooserOptions.applyChangesMode]
     */
    applyChangesMode?: common.grids.ApplyChangesMode;
    /**
     * [descr:dxPivotGridFieldChooserOptions.dataSource]
     */
    dataSource?: data.PivotGridDataSource | null;
    /**
     * [descr:dxPivotGridFieldChooserOptions.encodeHtml]
     */
    encodeHtml?: boolean;
    /**
     * [descr:dxPivotGridFieldChooserOptions.headerFilter]
     */
    headerFilter?: {
      /**
       * [descr:dxPivotGridFieldChooserOptions.headerFilter.allowSearch]
       * @deprecated [depNote:dxPivotGridFieldChooserOptions.headerFilter.allowSearch]
       */
      allowSearch?: boolean;
      /**
       * [descr:dxPivotGridFieldChooserOptions.headerFilter.allowSelectAll]
       */
      allowSelectAll?: boolean;
      /**
       * [descr:dxPivotGridFieldChooserOptions.headerFilter.height]
       */
      height?: number;
      /**
       * [descr:dxPivotGridFieldChooserOptions.headerFilter.search]
       */
      search?: common.grids.HeaderFilterSearchConfig;
      /**
       * [descr:dxPivotGridFieldChooserOptions.headerFilter.searchTimeout]
       * @deprecated [depNote:dxPivotGridFieldChooserOptions.headerFilter.searchTimeout]
       */
      searchTimeout?: number;
      /**
       * [descr:dxPivotGridFieldChooserOptions.headerFilter.showRelevantValues]
       */
      showRelevantValues?: boolean;
      /**
       * [descr:dxPivotGridFieldChooserOptions.headerFilter.texts]
       */
      texts?: {
        /**
         * [descr:dxPivotGridFieldChooserOptions.headerFilter.texts.cancel]
         */
        cancel?: string;
        /**
         * [descr:dxPivotGridFieldChooserOptions.headerFilter.texts.emptyValue]
         */
        emptyValue?: string;
        /**
         * [descr:dxPivotGridFieldChooserOptions.headerFilter.texts.ok]
         */
        ok?: string;
      };
      /**
       * [descr:dxPivotGridFieldChooserOptions.headerFilter.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPivotGridFieldChooserOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxPivotGridFieldChooserOptions.layout]
     */
    layout?: common.FieldChooserLayout;
    /**
     * [descr:dxPivotGridFieldChooserOptions.onContextMenuPreparing]
     */
    onContextMenuPreparing?: (
      e: dxPivotGridFieldChooser.ContextMenuPreparingEvent
    ) => void;
    /**
     * [descr:dxPivotGridFieldChooserOptions.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:dxPivotGridFieldChooserOptions.state]
     */
    state?: any;
    /**
     * [descr:dxPivotGridFieldChooserOptions.texts]
     */
    texts?: {
      /**
       * [descr:dxPivotGridFieldChooserOptions.texts.allFields]
       */
      allFields?: string;
      /**
       * [descr:dxPivotGridFieldChooserOptions.texts.columnFields]
       */
      columnFields?: string;
      /**
       * [descr:dxPivotGridFieldChooserOptions.texts.dataFields]
       */
      dataFields?: string;
      /**
       * [descr:dxPivotGridFieldChooserOptions.texts.filterFields]
       */
      filterFields?: string;
      /**
       * [descr:dxPivotGridFieldChooserOptions.texts.rowFields]
       */
      rowFields?: string;
    };
  }
  /**
   * [descr:dxPivotGridOptions]
   * @deprecated [depNote:dxPivotGridOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPivotGridOptions extends WidgetOptions<dxPivotGrid> {
    /**
     * [descr:dxPivotGridOptions.allowExpandAll]
     */
    allowExpandAll?: boolean;
    /**
     * [descr:dxPivotGridOptions.allowFiltering]
     */
    allowFiltering?: boolean;
    /**
     * [descr:dxPivotGridOptions.allowSorting]
     */
    allowSorting?: boolean;
    /**
     * [descr:dxPivotGridOptions.allowSortingBySummary]
     */
    allowSortingBySummary?: boolean;
    /**
     * [descr:dxPivotGridOptions.dataFieldArea]
     */
    dataFieldArea?: dxPivotGrid.PivotGridDataFieldArea;
    /**
     * [descr:dxPivotGridOptions.dataSource]
     */
    dataSource?:
    | any[]
    | data.PivotGridDataSource
    | data.PivotGridDataSource.Options
    | null;
    /**
     * [descr:dxPivotGridOptions.encodeHtml]
     */
    encodeHtml?: boolean;
    /**
     * [descr:dxPivotGridOptions.export]
     */
    export?: {
      /**
       * [descr:dxPivotGridOptions.export.enabled]
       */
      enabled?: boolean;
    };
    /**
     * [descr:dxPivotGridOptions.fieldChooser]
     */
    fieldChooser?: {
      /**
       * [descr:dxPivotGridOptions.fieldChooser.allowSearch]
       */
      allowSearch?: boolean;
      /**
       * [descr:dxPivotGridOptions.fieldChooser.applyChangesMode]
       */
      applyChangesMode?: common.grids.ApplyChangesMode;
      /**
       * [descr:dxPivotGridOptions.fieldChooser.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxPivotGridOptions.fieldChooser.height]
       */
      height?: number;
      /**
       * [descr:dxPivotGridOptions.fieldChooser.layout]
       */
      layout?: common.FieldChooserLayout;
      /**
       * [descr:dxPivotGridOptions.fieldChooser.searchTimeout]
       */
      searchTimeout?: number;
      /**
       * [descr:dxPivotGridOptions.fieldChooser.texts]
       */
      texts?: {
        /**
         * [descr:dxPivotGridOptions.fieldChooser.texts.allFields]
         */
        allFields?: string;
        /**
         * [descr:dxPivotGridOptions.fieldChooser.texts.columnFields]
         */
        columnFields?: string;
        /**
         * [descr:dxPivotGridOptions.fieldChooser.texts.dataFields]
         */
        dataFields?: string;
        /**
         * [descr:dxPivotGridOptions.fieldChooser.texts.filterFields]
         */
        filterFields?: string;
        /**
         * [descr:dxPivotGridOptions.fieldChooser.texts.rowFields]
         */
        rowFields?: string;
      };
      /**
       * [descr:dxPivotGridOptions.fieldChooser.title]
       */
      title?: string;
      /**
       * [descr:dxPivotGridOptions.fieldChooser.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPivotGridOptions.fieldPanel]
     */
    fieldPanel?: {
      /**
       * [descr:dxPivotGridOptions.fieldPanel.allowFieldDragging]
       */
      allowFieldDragging?: boolean;
      /**
       * [descr:dxPivotGridOptions.fieldPanel.showColumnFields]
       */
      showColumnFields?: boolean;
      /**
       * [descr:dxPivotGridOptions.fieldPanel.showDataFields]
       */
      showDataFields?: boolean;
      /**
       * [descr:dxPivotGridOptions.fieldPanel.showFilterFields]
       */
      showFilterFields?: boolean;
      /**
       * [descr:dxPivotGridOptions.fieldPanel.showRowFields]
       */
      showRowFields?: boolean;
      /**
       * [descr:dxPivotGridOptions.fieldPanel.texts]
       */
      texts?: {
        /**
         * [descr:dxPivotGridOptions.fieldPanel.texts.columnFieldArea]
         */
        columnFieldArea?: string;
        /**
         * [descr:dxPivotGridOptions.fieldPanel.texts.dataFieldArea]
         */
        dataFieldArea?: string;
        /**
         * [descr:dxPivotGridOptions.fieldPanel.texts.filterFieldArea]
         */
        filterFieldArea?: string;
        /**
         * [descr:dxPivotGridOptions.fieldPanel.texts.rowFieldArea]
         */
        rowFieldArea?: string;
      };
      /**
       * [descr:dxPivotGridOptions.fieldPanel.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxPivotGridOptions.headerFilter]
     */
    headerFilter?: {
      /**
       * [descr:dxPivotGridOptions.headerFilter.allowSearch]
       * @deprecated [depNote:dxPivotGridOptions.headerFilter.allowSearch]
       */
      allowSearch?: boolean;
      /**
       * [descr:dxPivotGridOptions.headerFilter.allowSelectAll]
       */
      allowSelectAll?: boolean;
      /**
       * [descr:dxPivotGridOptions.headerFilter.height]
       */
      height?: number;
      /**
       * [descr:dxPivotGridOptions.headerFilter.search]
       */
      search?: common.grids.HeaderFilterSearchConfig;
      /**
       * [descr:dxPivotGridOptions.headerFilter.searchTimeout]
       * @deprecated [depNote:dxPivotGridOptions.headerFilter.searchTimeout]
       */
      searchTimeout?: number;
      /**
       * [descr:dxPivotGridOptions.headerFilter.showRelevantValues]
       */
      showRelevantValues?: boolean;
      /**
       * [descr:dxPivotGridOptions.headerFilter.texts]
       */
      texts?: {
        /**
         * [descr:dxPivotGridOptions.headerFilter.texts.cancel]
         */
        cancel?: string;
        /**
         * [descr:dxPivotGridOptions.headerFilter.texts.emptyValue]
         */
        emptyValue?: string;
        /**
         * [descr:dxPivotGridOptions.headerFilter.texts.ok]
         */
        ok?: string;
      };
      /**
       * [descr:dxPivotGridOptions.headerFilter.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPivotGridOptions.hideEmptySummaryCells]
     */
    hideEmptySummaryCells?: boolean;
    /**
     * [descr:dxPivotGridOptions.loadPanel]
     */
    loadPanel?: {
      /**
       * [descr:dxPivotGridOptions.loadPanel.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxPivotGridOptions.loadPanel.height]
       */
      height?: number;
      /**
       * [descr:dxPivotGridOptions.loadPanel.indicatorSrc]
       */
      indicatorSrc?: string;
      /**
       * [descr:dxPivotGridOptions.loadPanel.shading]
       */
      shading?: boolean;
      /**
       * [descr:dxPivotGridOptions.loadPanel.shadingColor]
       */
      shadingColor?: string;
      /**
       * [descr:dxPivotGridOptions.loadPanel.showIndicator]
       */
      showIndicator?: boolean;
      /**
       * [descr:dxPivotGridOptions.loadPanel.showPane]
       */
      showPane?: boolean;
      /**
       * [descr:dxPivotGridOptions.loadPanel.text]
       */
      text?: string;
      /**
       * [descr:dxPivotGridOptions.loadPanel.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPivotGridOptions.onCellClick]
     */
    onCellClick?: (e: dxPivotGrid.CellClickEvent) => void;
    /**
     * [descr:dxPivotGridOptions.onCellPrepared]
     */
    onCellPrepared?: (e: dxPivotGrid.CellPreparedEvent) => void;
    /**
     * [descr:dxPivotGridOptions.onContextMenuPreparing]
     */
    onContextMenuPreparing?: (
      e: dxPivotGrid.ContextMenuPreparingEvent
    ) => void;
    /**
     * [descr:dxPivotGridOptions.onExporting]
     */
    onExporting?: (e: dxPivotGrid.ExportingEvent) => void;
    /**
     * [descr:dxPivotGridOptions.rowHeaderLayout]
     */
    rowHeaderLayout?: dxPivotGrid.PivotGridRowHeaderLayout;
    /**
     * [descr:dxPivotGridOptions.scrolling]
     */
    scrolling?: {
      /**
       * [descr:dxPivotGridOptions.scrolling.mode]
       */
      mode?: common.ScrollMode;
      /**
       * [descr:dxPivotGridOptions.scrolling.useNative]
       */
      useNative?: boolean | common.Mode;
    };
    /**
     * [descr:dxPivotGridOptions.showBorders]
     */
    showBorders?: boolean;
    /**
     * [descr:dxPivotGridOptions.showColumnGrandTotals]
     */
    showColumnGrandTotals?: boolean;
    /**
     * [descr:dxPivotGridOptions.showColumnTotals]
     */
    showColumnTotals?: boolean;
    /**
     * [descr:dxPivotGridOptions.showRowGrandTotals]
     */
    showRowGrandTotals?: boolean;
    /**
     * [descr:dxPivotGridOptions.showRowTotals]
     */
    showRowTotals?: boolean;
    /**
     * [descr:dxPivotGridOptions.showTotalsPrior]
     */
    showTotalsPrior?: dxPivotGrid.PivotGridTotalDisplayMode;
    /**
     * [descr:dxPivotGridOptions.stateStoring]
     */
    stateStoring?: {
      /**
       * [descr:dxPivotGridOptions.stateStoring.customLoad]
       */
      customLoad?: () => PromiseLike<any>;
      /**
       * [descr:dxPivotGridOptions.stateStoring.customSave]
       */
      customSave?: (state: any) => any;
      /**
       * [descr:dxPivotGridOptions.stateStoring.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxPivotGridOptions.stateStoring.savingTimeout]
       */
      savingTimeout?: number;
      /**
       * [descr:dxPivotGridOptions.stateStoring.storageKey]
       */
      storageKey?: string;
      /**
       * [descr:dxPivotGridOptions.stateStoring.type]
       */
      type?: common.grids.StateStoreType;
    };
    /**
     * [descr:dxPivotGridOptions.texts]
     */
    texts?: {
      /**
       * [descr:dxPivotGridOptions.texts.collapseAll]
       */
      collapseAll?: string;
      /**
       * [descr:dxPivotGridOptions.texts.dataNotAvailable]
       */
      dataNotAvailable?: string;
      /**
       * [descr:dxPivotGridOptions.texts.expandAll]
       */
      expandAll?: string;
      /**
       * [descr:dxPivotGridOptions.texts.exportToExcel]
       */
      exportToExcel?: string;
      /**
       * [descr:dxPivotGridOptions.texts.grandTotal]
       */
      grandTotal?: string;
      /**
       * [descr:dxPivotGridOptions.texts.noData]
       */
      noData?: string;
      /**
       * [descr:dxPivotGridOptions.texts.removeAllSorting]
       */
      removeAllSorting?: string;
      /**
       * [descr:dxPivotGridOptions.texts.showFieldChooser]
       */
      showFieldChooser?: string;
      /**
       * [descr:dxPivotGridOptions.texts.sortColumnBySummary]
       */
      sortColumnBySummary?: string;
      /**
       * [descr:dxPivotGridOptions.texts.sortRowBySummary]
       */
      sortRowBySummary?: string;
      /**
       * [descr:dxPivotGridOptions.texts.total]
       */
      total?: string;
    };
    /**
     * [descr:dxPivotGridOptions.wordWrapEnabled]
     */
    wordWrapEnabled?: boolean;
  }
  /**
   * @deprecated Use Cell instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPivotGridPivotGridCell {
    /**
     * [descr:dxPivotGridPivotGridCell.columnPath]
     */
    columnPath?: (string | number | Date)[];
    /**
     * [descr:dxPivotGridPivotGridCell.columnType]
     */
    columnType?: 'D' | 'T' | 'GT';
    /**
     * [descr:dxPivotGridPivotGridCell.dataIndex]
     */
    dataIndex?: number;
    /**
     * [descr:dxPivotGridPivotGridCell.expanded]
     */
    expanded?: boolean;
    /**
     * [descr:dxPivotGridPivotGridCell.path]
     */
    path?: (string | number | Date)[];
    /**
     * [descr:dxPivotGridPivotGridCell.rowPath]
     */
    rowPath?: (string | number | Date)[];
    /**
     * [descr:dxPivotGridPivotGridCell.rowType]
     */
    rowType?: 'D' | 'T' | 'GT';
    /**
     * [descr:dxPivotGridPivotGridCell.text]
     */
    text?: string;
    /**
     * [descr:dxPivotGridPivotGridCell.type]
     */
    type?: 'D' | 'T' | 'GT';
    /**
     * [descr:dxPivotGridPivotGridCell.value]
     */
    value?: any;
  }
  /**
   * [descr:dxPivotGridSummaryCell]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPivotGridSummaryCell {
    /**
     * [descr:dxPivotGridSummaryCell.child(direction, fieldValue)]
     */
    child(
      direction: string,
      fieldValue: number | string
    ): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.children(direction)]
     */
    children(direction: string): dxPivotGridSummaryCell[];
    /**
     * [descr:dxPivotGridSummaryCell.field(area)]
     */
    field(area: string): data.PivotGridDataSource.Field;
    /**
     * [descr:dxPivotGridSummaryCell.grandTotal()]
     */
    grandTotal(): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.grandTotal(direction)]
     */
    grandTotal(direction: string): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.isPostProcessed(field)]
     */
    isPostProcessed(
      field: data.PivotGridDataSource.Field | string
    ): boolean;
    /**
     * [descr:dxPivotGridSummaryCell.next(direction)]
     */
    next(direction: string): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.next(direction, allowCrossGroup)]
     */
    next(direction: string, allowCrossGroup: boolean): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.parent(direction)]
     */
    parent(direction: string): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.prev(direction)]
     */
    prev(direction: string): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.prev(direction, allowCrossGroup)]
     */
    prev(direction: string, allowCrossGroup: boolean): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.slice(field, value)]
     */
    slice(
      field: data.PivotGridDataSource.Field,
      value: number | string
    ): dxPivotGridSummaryCell;
    /**
     * [descr:dxPivotGridSummaryCell.value()]
     */
    value(): any;
    /**
     * [descr:dxPivotGridSummaryCell.value(field)]
     */
    value(field: data.PivotGridDataSource.Field | string): any;
    /**
     * [descr:dxPivotGridSummaryCell.value(field, postProcessed)]
     */
    value(
      field: data.PivotGridDataSource.Field | string,
      postProcessed: boolean
    ): any;
    /**
     * [descr:dxPivotGridSummaryCell.value(postProcessed)]
     */
    value(postProcessed: boolean): any;
  }
  /**
   * [descr:dxPopover]
   */
  export class dxPopover<
    TProperties = dxPopover.Properties,
  > extends dxPopup<TProperties> {
    show(): core.utils.DxPromise<boolean>;
    /**
     * [descr:dxPopover.show(target)]
     */
    show(
      target: string | core.UserDefinedElement
    ): core.utils.DxPromise<boolean>;
  }
  namespace dxPopover {
    /**
     * [descr:_ui_popover_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxPopover>;
    /**
     * [descr:_ui_popover_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxPopover>;
    /**
     * [descr:_ui_popover_HiddenEvent]
     */
    export type HiddenEvent = events.EventInfo<dxPopover>;
    /**
     * [descr:_ui_popover_HidingEvent]
     */
    export type HidingEvent = events.Cancelable &
    events.EventInfo<dxPopover>;
    /**
     * [descr:_ui_popover_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxPopover>;
    /**
     * [descr:_ui_popover_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxPopover> &
    events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface PopoverInstance extends dxPopover {}
    export type Properties = dxPopoverOptions<PopoverInstance>;
    /**
     * [descr:_ui_popover_ShowingEvent]
     */
    export type ShowingEvent = events.Cancelable &
    events.EventInfo<dxPopover>;
    /**
     * [descr:_ui_popover_ShownEvent]
     */
    export type ShownEvent = events.EventInfo<dxPopover>;
    /**
     * [descr:_ui_popover_TitleRenderedEvent]
     */
    export type TitleRenderedEvent = events.EventInfo<dxPopover> &
    dxPopup.TitleRenderedInfo;
  }
  /**
   * [descr:dxPopoverAnimation]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopoverAnimation extends dxPopupAnimation {
    /**
     * [descr:dxPopoverOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxPopoverOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxPopoverOptions]
   * @deprecated [depNote:dxPopoverOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopoverOptions<TComponent>
    extends dxPopupOptions<TComponent> {
    /**
     * [descr:dxPopoverOptions.animation]
     */
    animation?: dxPopoverAnimation;
    /**
     * [descr:dxPopoverOptions.closeOnOutsideClick]
     * @deprecated [depNote:dxPopoverOptions.closeOnOutsideClick]
     */
    closeOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxPopoverOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxPopoverOptions.hideEvent]
     */
    hideEvent?:
    | {
      /**
           * [descr:dxPopoverOptions.hideEvent.delay]
           */
      delay?: number;
      /**
           * [descr:dxPopoverOptions.hideEvent.name]
           */
      name?: string;
    }
    | string;
    /**
     * [descr:dxPopoverOptions.hideOnOutsideClick]
     */
    hideOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxPopoverOptions.hideOnParentScroll]
     */
    hideOnParentScroll?: boolean;
    /**
     * [descr:dxPopoverOptions.position]
     */
    position?: common.Position | PositionConfig;
    /**
     * [descr:dxPopoverOptions.shading]
     */
    shading?: boolean;
    /**
     * [descr:dxPopoverOptions.showEvent]
     */
    showEvent?:
    | {
      /**
           * [descr:dxPopoverOptions.showEvent.delay]
           */
      delay?: number;
      /**
           * [descr:dxPopoverOptions.showEvent.name]
           */
      name?: string;
    }
    | string;
    /**
     * [descr:dxPopoverOptions.showTitle]
     */
    showTitle?: boolean;
    /**
     * [descr:dxPopoverOptions.target]
     */
    target?: string | core.UserDefinedElement;
    /**
     * [descr:dxPopoverOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:dxPopup]
   */
  export class dxPopup<
    TProperties = dxPopup.Properties,
  > extends dxOverlay<TProperties> {}
  namespace dxPopup {
    export type ContentReadyEvent = events.EventInfo<dxPopup>;
    export type DisposingEvent = events.EventInfo<dxPopup>;
    export type HiddenEvent = events.EventInfo<dxPopup>;
    export type HidingEvent = events.Cancelable &
    events.EventInfo<dxPopup>;
    export type InitializedEvent =
      events.InitializedEventInfo<dxPopup>;
    export type OptionChangedEvent = events.EventInfo<dxPopup> &
    events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface PopupInstance extends dxPopup {}
    export type Properties = dxPopupOptions<PopupInstance>;
    export type ResizeEndEvent = events.NativeEventInfo<
    dxPopup,
    MouseEvent | TouchEvent
    > &
    dxResizable.ResizeInfo;
    export type ResizeEvent = events.NativeEventInfo<
    dxPopup,
    MouseEvent | TouchEvent
    > &
    dxResizable.ResizeInfo;
    export type ResizeStartEvent = events.NativeEventInfo<
    dxPopup,
    MouseEvent | TouchEvent
    > &
    dxResizable.ResizeInfo;
    export type ShowingEvent = events.Cancelable &
    events.EventInfo<dxPopup>;
    export type ShownEvent = events.EventInfo<dxPopup>;
    export type TitleRenderedEvent = events.EventInfo<dxPopup> &
    TitleRenderedInfo;
    /**
     * [descr:TitleRenderedInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TitleRenderedInfo {
      readonly titleElement: core.DxElement;
    }
    export type ToolbarLocation = 'bottom' | 'top';
  }
  /**
   * [descr:dxPopupAnimation]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopupAnimation extends dxOverlayAnimation {
    /**
     * [descr:dxPopupOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxPopupOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxPopupOptions]
   * @deprecated [depNote:dxPopupOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPopupOptions<TComponent>
    extends dxOverlayOptions<TComponent> {
    /**
     * [descr:dxPopupOptions.animation]
     */
    animation?: dxPopupAnimation;
    /**
     * [descr:dxPopupOptions.container]
     */
    container?: string | core.UserDefinedElement;
    /**
     * [descr:dxPopupOptions.dragAndResizeArea]
     */
    dragAndResizeArea?: string | core.UserDefinedElement;
    /**
     * [descr:dxPopupOptions.dragEnabled]
     */
    dragEnabled?: boolean;
    /**
     * [descr:dxPopupOptions.dragOutsideBoundary]
     */
    dragOutsideBoundary?: boolean;
    /**
     * [descr:dxPopupOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxPopupOptions.fullScreen]
     */
    fullScreen?: boolean;
    /**
     * [descr:dxPopupOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxPopupOptions.onResize]
     */
    onResize?: (e: dxPopup.ResizeEvent) => void;
    /**
     * [descr:dxPopupOptions.onResizeEnd]
     */
    onResizeEnd?: (e: dxPopup.ResizeEndEvent) => void;
    /**
     * [descr:dxPopupOptions.onResizeStart]
     */
    onResizeStart?: (e: dxPopup.ResizeStartEvent) => void;
    /**
     * [descr:dxPopupOptions.onTitleRendered]
     */
    onTitleRendered?: (
      e: events.EventInfo<TComponent> &
      dxPopup.TitleRenderedInfo
    ) => void;
    /**
     * [descr:dxPopupOptions.position]
     */
    position?: common.PositionAlignment | PositionConfig | Function;
    /**
     * [descr:dxPopupOptions.enableBodyScroll]
     */
    enableBodyScroll?: boolean;
    /**
     * [descr:dxPopupOptions.resizeEnabled]
     */
    resizeEnabled?: boolean;
    /**
     * [descr:dxPopupOptions.restorePosition]
     */
    restorePosition?: boolean;
    /**
     * [descr:dxPopupOptions.showCloseButton]
     */
    showCloseButton?: boolean;
    /**
     * [descr:dxPopupOptions.showTitle]
     */
    showTitle?: boolean;
    /**
     * [descr:dxPopupOptions.title]
     */
    title?: string;
    /**
     * [descr:dxPopupOptions.titleTemplate]
     */
    titleTemplate?:
    | core.template
    | ((
      titleElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxPopupOptions.toolbarItems]
     */
    toolbarItems?: dxPopup.ToolbarItem[];
    /**
     * [descr:dxPopupOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:dxProgressBar]
   */
  export class dxProgressBar extends dxTrackBar<dxProgressBarOptions> {}
  namespace dxProgressBar {
    /**
     * [descr:_ui_progress_bar_CompleteEvent]
     */
    export type CompleteEvent =
      events.NativeEventInfo<dxProgressBar>;
    /**
     * [descr:_ui_progress_bar_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxProgressBar>;
    /**
     * [descr:_ui_progress_bar_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxProgressBar>;
    /**
     * [descr:_ui_progress_bar_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxProgressBar>;
    /**
     * [descr:_ui_progress_bar_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxProgressBar> &
      events.ChangedOptionInfo;
    export type Properties = dxProgressBarOptions;
    /**
     * [descr:_ui_progress_bar_ValueChangedEvent]
     */
    export type ValueChangedEvent =
      events.NativeEventInfo<dxProgressBar> &
      Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxProgressBarOptions]
   * @deprecated [depNote:dxProgressBarOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxProgressBarOptions
    extends dxTrackBarOptions<dxProgressBar> {
    /**
     * [descr:dxProgressBarOptions.onComplete]
     */
    onComplete?: (e: dxProgressBar.CompleteEvent) => void;
    /**
     * [descr:dxProgressBarOptions.showStatus]
     */
    showStatus?: boolean;
    /**
     * [descr:dxProgressBarOptions.statusFormat]
     */
    statusFormat?: string | ((ratio: number, value: number) => string);
    /**
     * [descr:dxProgressBarOptions.value]
     */
    value?: number | false;
  }
  /**
   * [descr:dxRadioGroup]
   */
  export class dxRadioGroup extends Editor<dxRadioGroupOptions> {
    getDataSource(): data.DataSource;
  }
  namespace dxRadioGroup {
    /**
     * [descr:_ui_radio_group_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxRadioGroup>;
    /**
     * [descr:_ui_radio_group_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxRadioGroup>;
    /**
     * [descr:_ui_radio_group_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxRadioGroup>;
    /**
     * [descr:_ui_radio_group_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxRadioGroup> &
    events.ChangedOptionInfo;
    export type Properties = dxRadioGroupOptions;
    /**
     * [descr:_ui_radio_group_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxRadioGroup,
    KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxRadioGroupOptions]
   * @deprecated [depNote:dxRadioGroupOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxRadioGroupOptions
    extends EditorOptions<dxRadioGroup>,
    DataExpressionMixinOptions<dxRadioGroup> {
    /**
     * [descr:dxRadioGroupOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxRadioGroupOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxRadioGroupOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxRadioGroupOptions.layout]
     */
    layout?: common.Orientation;
    /**
     * [descr:dxRadioGroupOptions.name]
     */
    name?: string;
    /**
     * [descr:dxRadioGroupOptions.value]
     */
    value?: any;
  }
  /**
   * [descr:dxRangeSlider]
   */
  export class dxRangeSlider extends dxTrackBar<dxRangeSliderOptions> {}
  namespace dxRangeSlider {
    /**
     * [descr:_ui_range_slider_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxRangeSlider>;
    /**
     * [descr:_ui_range_slider_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxRangeSlider>;
    /**
     * [descr:_ui_range_slider_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxRangeSlider>;
    /**
     * [descr:_ui_range_slider_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxRangeSlider> &
      events.ChangedOptionInfo;
    export type Properties = dxRangeSliderOptions;
    /**
     * [descr:_ui_range_slider_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxRangeSlider,
    KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | UIEvent | Event
    > &
    Editor.ValueChangedInfo & {
      /**
         * [descr:_ui_range_slider_ValueChangedEvent.start]
         */
      readonly start?: number;
      /**
         * [descr:_ui_range_slider_ValueChangedEvent.end]
         */
      readonly end?: number;
      /**
         * [descr:_ui_range_slider_ValueChangedEvent.value]
         */
      readonly value?: number[];
    };
  }
  /**
   * [descr:dxRangeSliderOptions]
   * @deprecated [depNote:dxRangeSliderOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxRangeSliderOptions
    extends dxSliderBaseOptions<dxRangeSlider> {
    /**
     * [descr:dxRangeSliderOptions.end]
     */
    end?: number;
    /**
     * [descr:dxRangeSliderOptions.endName]
     */
    endName?: string;
    /**
     * [descr:dxRangeSliderOptions.onValueChanged]
     */
    onValueChanged?: (e: dxRangeSlider.ValueChangedEvent) => void;
    /**
     * [descr:dxRangeSliderOptions.start]
     */
    start?: number;
    /**
     * [descr:dxRangeSliderOptions.startName]
     */
    startName?: string;
    /**
     * [descr:dxRangeSliderOptions.value]
     */
    value?: number[];
  }
  /**
   * [descr:dxRecurrenceEditor]
   */
  export class dxRecurrenceEditor extends Editor<dxRecurrenceEditorOptions> {}
  namespace dxRecurrenceEditor {
    /**
     * [descr:_ui_recurrence_editor_ContentReadyEvent]
     */
    export type ContentReadyEvent =
      events.EventInfo<dxRecurrenceEditor>;
    /**
     * [descr:_ui_recurrence_editor_DisposingEvent]
     */
    export type DisposingEvent =
      events.EventInfo<dxRecurrenceEditor>;
    /**
     * [descr:_ui_recurrence_editor_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxRecurrenceEditor>;
    /**
     * [descr:_ui_recurrence_editor_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxRecurrenceEditor> &
      events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type Properties = dxRecurrenceEditorOptions;
    /**
     * [descr:_ui_recurrence_editor_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxRecurrenceEditor
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxRecurrenceEditorOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxRecurrenceEditorOptions
    extends EditorOptions<dxRecurrenceEditor> {
    /**
     * [descr:dxRecurrenceEditorOptions.value]
     */
    value?: string;
  }
  /**
   * [descr:dxResizable]
   */
  export class dxResizable extends DOMComponent<dxResizableOptions> {}
  namespace dxResizable {
    /**
     * [descr:_ui_resizable_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxResizable>;
    /**
     * [descr:_ui_resizable_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxResizable>;
    /**
     * [descr:_ui_resizable_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxResizable> &
    events.ChangedOptionInfo;
    export type Properties = dxResizableOptions;
    /**
     * [descr:_ui_resizable_ResizeEndEvent]
     */
    export type ResizeEndEvent = events.NativeEventInfo<
    dxResizable,
    MouseEvent | TouchEvent
    > &
    ResizeInfo;
    /**
     * [descr:_ui_resizable_ResizeEvent]
     */
    export type ResizeEvent = events.NativeEventInfo<
    dxResizable,
    MouseEvent | TouchEvent
    > &
    ResizeInfo;
    export type ResizeHandle = 'bottom' | 'left' | 'right' | 'top' | 'all';
    /**
     * [descr:ResizeInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ResizeInfo {
      /**
       * [descr:ResizeInfo.width]
       */
      readonly width: number;
      /**
       * [descr:ResizeInfo.height]
       */
      readonly height: number;
    }
    /**
     * [descr:_ui_resizable_ResizeStartEvent]
     */
    export type ResizeStartEvent = events.NativeEventInfo<
    dxResizable,
    MouseEvent | TouchEvent
    > &
    ResizeInfo;
  }
  /**
   * [descr:dxResizableOptions]
   * @deprecated [depNote:dxResizableOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxResizableOptions extends DOMComponentOptions<dxResizable> {
    /**
     * [descr:dxResizableOptions.area]
     */
    area?: string | core.UserDefinedElement;
    /**
     * [descr:dxResizableOptions.handles]
     */
    handles?: dxResizable.ResizeHandle | string;
    /**
     * [descr:dxResizableOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxResizableOptions.keepAspectRatio]
     */
    keepAspectRatio?: boolean;
    /**
     * [descr:dxResizableOptions.maxHeight]
     */
    maxHeight?: number;
    /**
     * [descr:dxResizableOptions.maxWidth]
     */
    maxWidth?: number;
    /**
     * [descr:dxResizableOptions.minHeight]
     */
    minHeight?: number;
    /**
     * [descr:dxResizableOptions.minWidth]
     */
    minWidth?: number;
    /**
     * [descr:dxResizableOptions.onResize]
     */
    onResize?: (e: dxResizable.ResizeEvent) => void;
    /**
     * [descr:dxResizableOptions.onResizeEnd]
     */
    onResizeEnd?: (e: dxResizable.ResizeEndEvent) => void;
    /**
     * [descr:dxResizableOptions.onResizeStart]
     */
    onResizeStart?: (e: dxResizable.ResizeStartEvent) => void;
    /**
     * [descr:dxResizableOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:dxResponsiveBox]
   */
  export class dxResponsiveBox<
    TItem extends dxResponsiveBox.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<
    dxResponsiveBoxOptions<TItem, TKey>,
    TItem,
    TKey
    > {}
  namespace dxResponsiveBox {
    /**
     * [descr:_ui_responsive_box_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxResponsiveBox<TItem, TKey>>;
    /**
     * [descr:_ui_responsive_box_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxResponsiveBox<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_responsive_box_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxResponsiveBox<TItem, TKey>>;
    /**
     * [descr:_ui_responsive_box_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxResponsiveBox<TItem, TKey>,
    MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_responsive_box_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxResponsiveBox<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_responsive_box_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxResponsiveBox<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    /**
     * [descr:_ui_responsive_box_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxResponsiveBox<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_responsive_box_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxResponsiveBox<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxResponsiveBoxOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxResponsiveBoxItem extends CollectionWidgetItem {
    /**
     * [descr:dxResponsiveBoxItem.location]
     */
    location?:
    | {
      /**
           * [descr:dxResponsiveBoxItem.location.col]
           */
      col?: number;
      /**
           * [descr:dxResponsiveBoxItem.location.colspan]
           */
      colspan?: number;
      /**
           * [descr:dxResponsiveBoxItem.location.row]
           */
      row?: number;
      /**
           * [descr:dxResponsiveBoxItem.location.rowspan]
           */
      rowspan?: number;
      /**
           * [descr:dxResponsiveBoxItem.location.screen]
           */
      screen?: string;
    }
    | {
      col?: number;
      colspan?: number;
      row?: number;
      rowspan?: number;
      screen?: string;
    }[];
  }
  /**
   * [descr:dxResponsiveBoxOptions]
   * @deprecated [depNote:dxResponsiveBoxOptions]
   */
  export interface dxResponsiveBoxOptions<
    TItem extends dxResponsiveBox.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<dxResponsiveBox<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxResponsiveBoxOptions.cols]
     */
    cols?: {
      /**
       * [descr:dxResponsiveBoxOptions.cols.baseSize]
       */
      baseSize?: number | common.Mode;
      /**
       * [descr:dxResponsiveBoxOptions.cols.ratio]
       */
      ratio?: number;
      /**
       * [descr:dxResponsiveBoxOptions.cols.screen]
       */
      screen?: string;
      /**
       * [descr:dxResponsiveBoxOptions.cols.shrink]
       */
      shrink?: number;
    }[];
    /**
     * [descr:dxResponsiveBoxOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxResponsiveBoxOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxResponsiveBoxOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxResponsiveBoxOptions.rows]
     */
    rows?: {
      /**
       * [descr:dxResponsiveBoxOptions.rows.baseSize]
       */
      baseSize?: number | common.Mode;
      /**
       * [descr:dxResponsiveBoxOptions.rows.ratio]
       */
      ratio?: number;
      /**
       * [descr:dxResponsiveBoxOptions.rows.screen]
       */
      screen?: string;
      /**
       * [descr:dxResponsiveBoxOptions.rows.shrink]
       */
      shrink?: number;
    }[];
    /**
     * [descr:dxResponsiveBoxOptions.screenByWidth]
     */
    screenByWidth?: Function;
    /**
     * [descr:dxResponsiveBoxOptions.singleColumnScreen]
     */
    singleColumnScreen?: string;
    /**
     * [descr:dxResponsiveBoxOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:dxScheduler]
   */
  export class dxScheduler extends Widget<dxSchedulerOptions> {
    /**
     * [descr:dxScheduler.addAppointment(appointment)]
     */
    addAppointment(appointment: Appointment): void;
    /**
     * [descr:dxScheduler.deleteAppointment(appointment)]
     */
    deleteAppointment(appointment: Appointment): void;
    /**
     * [descr:dxScheduler.deleteRecurrence(appointment, date, recurrenceEditMode)]
     */
    deleteRecurrence(
      appointmentData: Appointment,
      date: Date | string,
      recurrenceEditMode: dxScheduler.RecurrenceEditMode
    ): void;
    getDataSource(): data.DataSource;
    /**
     * [descr:dxScheduler.getEndViewDate()]
     */
    getEndViewDate(): Date;
    /**
     * [descr:dxScheduler.getStartViewDate()]
     */
    getStartViewDate(): Date;
    /**
     * [descr:dxScheduler.hideAppointmentPopup(saveChanges)]
     */
    hideAppointmentPopup(saveChanges?: boolean): void;
    /**
     * [descr:dxScheduler.hideAppointmentTooltip()]
     */
    hideAppointmentTooltip(): void;
    /**
     * [descr:dxScheduler.scrollTo(date, group, allDay)]
     */
    scrollTo(date: Date, group?: object, allDay?: boolean): void;
    /**
     * [descr:dxScheduler.scrollToTime(hours, minutes, date)]
     * @deprecated [depNote:dxScheduler.scrollToTime(hours, minutes, date)]
     */
    scrollToTime(hours: number, minutes: number, date?: Date): void;
    /**
     * [descr:dxScheduler.showAppointmentPopup(appointmentData, createNewAppointment, currentAppointmentData)]
     */
    showAppointmentPopup(
      appointmentData?: Appointment,
      createNewAppointment?: boolean,
      currentAppointmentData?: Appointment
    ): void;
    /**
     * [descr:dxScheduler.showAppointmentTooltip(appointmentData, target, currentAppointmentData)]
     */
    showAppointmentTooltip(
      appointmentData: Appointment,
      target: string | core.UserDefinedElement,
      currentAppointmentData?: Appointment
    ): void;
    /**
     * [descr:dxScheduler.updateAppointment(target, appointment)]
     */
    updateAppointment(target: Appointment, appointment: Appointment): void;
  }
  namespace dxScheduler {
    export type AllDayPanelMode = 'all' | 'allDay' | 'hidden';
    /**
     * [descr:_ui_scheduler_AppointmentAddedEvent]
     */
    export type AppointmentAddedEvent =
      events.EventInfo<dxScheduler> & {
        /**
         * [descr:_ui_scheduler_AppointmentAddedEvent.appointmentData]
         */
        readonly appointmentData: Appointment;
        /**
         * [descr:_ui_scheduler_AppointmentAddedEvent.error]
         */
        readonly error?: Error;
      };
    /**
     * [descr:_ui_scheduler_AppointmentAddingEvent]
     */
    export type AppointmentAddingEvent =
      events.EventInfo<dxScheduler> & {
        /**
         * [descr:_ui_scheduler_AppointmentAddingEvent.appointmentData]
         */
        readonly appointmentData: Appointment;
        /**
         * [descr:_ui_scheduler_AppointmentAddingEvent.cancel]
         */
        cancel: boolean | PromiseLike<boolean>;
      };
    /**
     * [descr:_ui_scheduler_AppointmentClickEvent]
     */
    export type AppointmentClickEvent = events.Cancelable &
    events.NativeEventInfo<
    dxScheduler,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    TargetedAppointmentInfo & {
      /**
         * [descr:_ui_scheduler_AppointmentClickEvent.appointmentElement]
         */
      readonly appointmentElement: core.DxElement;
    };
    export interface AppointmentCollectorTemplateData {
      readonly appointmentCount: number;
      readonly isCompact: boolean;
    }
    /**
     * [descr:_ui_scheduler_AppointmentContextMenuEvent]
     */
    export type AppointmentContextMenuEvent = events.NativeEventInfo<
    dxScheduler,
    MouseEvent | PointerEvent | TouchEvent
    > &
    TargetedAppointmentInfo & {
      /**
         * [descr:_ui_scheduler_AppointmentContextMenuEvent.appointmentElement]
         */
      readonly appointmentElement: core.DxElement;
    };
    /**
     * [descr:_ui_scheduler_AppointmentDblClickEvent]
     */
    export type AppointmentDblClickEvent = events.Cancelable &
    events.NativeEventInfo<
    dxScheduler,
    MouseEvent | PointerEvent
    > &
    TargetedAppointmentInfo & {
      /**
         * [descr:_ui_scheduler_AppointmentDblClickEvent.appointmentElement]
         */
      readonly appointmentElement: core.DxElement;
    };
    /**
     * [descr:_ui_scheduler_AppointmentDeletedEvent]
     */
    export type AppointmentDeletedEvent =
      events.EventInfo<dxScheduler> & {
        /**
         * [descr:_ui_scheduler_AppointmentDeletedEvent.appointmentData]
         */
        readonly appointmentData: Appointment;
        /**
         * [descr:_ui_scheduler_AppointmentDeletedEvent.error]
         */
        readonly error?: Error;
      };
    /**
     * [descr:_ui_scheduler_AppointmentDeletingEvent]
     */
    export type AppointmentDeletingEvent =
      events.EventInfo<dxScheduler> & {
        /**
         * [descr:_ui_scheduler_AppointmentDeletingEvent.appointmentData]
         */
        readonly appointmentData: Appointment;
        /**
         * [descr:_ui_scheduler_AppointmentDeletingEvent.cancel]
         */
        cancel: boolean | PromiseLike<boolean>;
      };
    export type AppointmentDraggingAddEvent = AppointmentDraggingEvent & {
      readonly fromComponent?: dxSortable | dxDraggable;
      readonly toComponent?: dxSortable | dxDraggable;
      readonly toData?: any;
    };
    export type AppointmentDraggingEndEvent = events.Cancelable &
    AppointmentDraggingEvent & {
      readonly fromComponent?: dxSortable | dxDraggable;
      readonly toComponent?: dxSortable | dxDraggable;
      readonly toData?: any;
      readonly toItemData?: any;
    };
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface AppointmentDraggingEvent {
      readonly component: dxScheduler;
      readonly event?: events.DxEvent<MouseEvent | TouchEvent>;
      readonly itemData?: any;
      readonly itemElement?: core.DxElement;
      readonly fromData?: any;
    }
    export type AppointmentDraggingMoveEvent = events.Cancelable &
    AppointmentDraggingEvent & {
      readonly fromComponent?: dxSortable | dxDraggable;
      readonly toComponent?: dxSortable | dxDraggable;
      readonly toData?: any;
    };
    export type AppointmentDraggingRemoveEvent = AppointmentDraggingEvent & {
      readonly fromComponent?: dxSortable | dxDraggable;
      readonly toComponent?: dxSortable | dxDraggable;
    };
    export type AppointmentDraggingStartEvent = events.Cancelable &
    AppointmentDraggingEvent;
    /**
     * [descr:_ui_scheduler_AppointmentFormOpeningEvent]
     */
    export type AppointmentFormOpeningEvent = events.Cancelable &
    events.EventInfo<dxScheduler> & {
      /**
         * [descr:_ui_scheduler_AppointmentFormOpeningEvent.appointmentData]
         */
      readonly appointmentData?: Appointment;
      /**
         * [descr:_ui_scheduler_AppointmentFormOpeningEvent.form]
         */
      readonly form: dxForm;
      /**
         * [descr:_ui_scheduler_AppointmentFormOpeningEvent.popup]
         */
      readonly popup: dxPopup;
    };
    /**
     * [descr:_ui_scheduler_AppointmentRenderedEvent]
     */
    export type AppointmentRenderedEvent =
      events.EventInfo<dxScheduler> &
      TargetedAppointmentInfo & {
        /**
           * [descr:_ui_scheduler_AppointmentRenderedEvent.appointmentElement]
           */
        readonly appointmentElement: core.DxElement;
      };
    /**
     * [descr:AppointmentTemplateData]
     */
    export type AppointmentTemplateData = TargetedAppointmentInfo;
    /**
     * [descr:AppointmentTooltipShowingAppointmentInfo]
     */
    export interface AppointmentTooltipShowingAppointmentInfo {
      readonly appointmentData: Appointment;
      readonly currentAppointmentData: Appointment;
      readonly color: PromiseLike<string>;
    }
    /**
     * [descr:_ui_scheduler_AppointmentTooltipShowingEvent]
     */
    export type AppointmentTooltipShowingEvent = events.Cancelable &
    events.EventInfo<dxScheduler> & {
      /**
         * [descr:_ui_scheduler_AppointmentTooltipShowingEvent.targetElement]
         */
      readonly targetElement: core.DxElement;
      /**
         * [descr:_ui_scheduler_AppointmentTooltipShowingEvent.appointments]
         */
      readonly appointments: AppointmentTooltipShowingAppointmentInfo[];
    };
    /**
     * [descr:AppointmentTooltipTemplateData]
     */
    export type AppointmentTooltipTemplateData = TargetedAppointmentInfo & {
      /**
       * [descr:AppointmentTooltipTemplateData.isButtonClicked]
       */
      readonly isButtonClicked: boolean;
    };
    /**
     * [descr:_ui_scheduler_AppointmentUpdatedEvent]
     */
    export type AppointmentUpdatedEvent =
      events.EventInfo<dxScheduler> & {
        /**
         * [descr:_ui_scheduler_AppointmentUpdatedEvent.appointmentData]
         */
        readonly appointmentData: Appointment;
        /**
         * [descr:_ui_scheduler_AppointmentUpdatedEvent.error]
         */
        readonly error?: Error;
      };
    /**
     * [descr:_ui_scheduler_AppointmentUpdatingEvent]
     */
    export type AppointmentUpdatingEvent =
      events.EventInfo<dxScheduler> & {
        /**
         * [descr:_ui_scheduler_AppointmentUpdatingEvent.oldData]
         */
        readonly oldData: any;
        /**
         * [descr:_ui_scheduler_AppointmentUpdatingEvent.newData]
         */
        readonly newData: any;
        /**
         * [descr:_ui_scheduler_AppointmentUpdatingEvent.cancel]
         */
        cancel?: boolean | PromiseLike<boolean>;
      };
    export type CellAppointmentsLimit = 'auto' | 'unlimited';
    /**
     * [descr:_ui_scheduler_CellClickEvent]
     */
    export type CellClickEvent = events.Cancelable &
    events.NativeEventInfo<
    dxScheduler,
    KeyboardEvent | MouseEvent | PointerEvent
    > & {
      /**
         * [descr:_ui_scheduler_CellClickEvent.cellData]
         */
      readonly cellData: any;
      /**
         * [descr:_ui_scheduler_CellClickEvent.cellElement]
         */
      readonly cellElement: core.DxElement;
    };
    /**
     * [descr:_ui_scheduler_CellContextMenuEvent]
     */
    export type CellContextMenuEvent = events.NativeEventInfo<
    dxScheduler,
    MouseEvent | PointerEvent | TouchEvent
    > & {
      /**
       * [descr:_ui_scheduler_CellContextMenuEvent.cellData]
       */
      readonly cellData: any;
      /**
       * [descr:_ui_scheduler_CellContextMenuEvent.cellElement]
       */
      readonly cellElement: core.DxElement;
    };
    /**
     * [descr:_ui_scheduler_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxScheduler>;
    export interface DateNavigatorTextInfo {
      readonly startDate: Date;
      readonly endDate: Date;
      readonly text: string;
    }
    /**
     * [descr:_ui_scheduler_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxScheduler>;
    /**
     * [descr:_ui_scheduler_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxScheduler>;
    /**
     * [descr:_ui_scheduler_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxScheduler> &
    events.ChangedOptionInfo;
    export type Properties = dxSchedulerOptions;
    export type RecurrenceEditMode = 'dialog' | 'occurrence' | 'series';
    /**
     * [descr:TargetedAppointmentInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TargetedAppointmentInfo {
      /**
       * [descr:TargetedAppointmentInfo.appointmentData]
       */
      readonly appointmentData: Appointment;
      /**
       * [descr:TargetedAppointmentInfo.targetedAppointmentData]
       */
      readonly targetedAppointmentData?: Appointment;
    }
    export type ViewType =
      | 'agenda'
      | 'day'
      | 'month'
      | 'timelineDay'
      | 'timelineMonth'
      | 'timelineWeek'
      | 'timelineWorkWeek'
      | 'week'
      | 'workWeek';
  }
  /**
   * @deprecated Use the Scheduler's Appointment type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxSchedulerAppointment = CollectionWidgetItem & {
    /**
     * [descr:dxSchedulerAppointment.allDay]
     */
    allDay?: boolean;
    /**
     * [descr:dxSchedulerAppointment.description]
     */
    description?: string;
    /**
     * [descr:dxSchedulerAppointment.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:dxSchedulerAppointment.endDate]
     */
    endDate?: Date | string;
    /**
     * [descr:dxSchedulerAppointment.endDateTimeZone]
     */
    endDateTimeZone?: string;
    /**
     * [descr:dxSchedulerAppointment.html]
     */
    html?: string;
    /**
     * [descr:dxSchedulerAppointment.recurrenceException]
     */
    recurrenceException?: string;
    /**
     * [descr:dxSchedulerAppointment.recurrenceRule]
     */
    recurrenceRule?: string;
    /**
     * [descr:dxSchedulerAppointment.startDate]
     */
    startDate?: Date | string;
    /**
     * [descr:dxSchedulerAppointment.startDateTimeZone]
     */
    startDateTimeZone?: string;
    /**
     * [descr:dxSchedulerAppointment.template]
     */
    template?: core.template;
    /**
     * [descr:dxSchedulerAppointment.text]
     */
    text?: string;
    /**
     * [descr:dxSchedulerAppointment.visible]
     */
    visible?: boolean;
  } & Record<string, any>;
  /**
   * [descr:dxSchedulerOptions]
   * @deprecated [depNote:dxSchedulerOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSchedulerOptions extends WidgetOptions<dxScheduler> {
    /**
     * [descr:dxSchedulerOptions.adaptivityEnabled]
     */
    adaptivityEnabled?: boolean;
    /**
     * [descr:dxSchedulerOptions.allDayExpr]
     */
    allDayExpr?: string;
    /**
     * [descr:dxSchedulerOptions.appointmentCollectorTemplate]
     */
    appointmentCollectorTemplate?:
    | core.template
    | ((
      data: dxScheduler.AppointmentCollectorTemplateData,
      collectorElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSchedulerOptions.appointmentDragging]
     */
    appointmentDragging?: {
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.autoScroll]
       */
      autoScroll?: boolean;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.data]
       */
      data?: any;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.group]
       */
      group?: string;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.onAdd]
       */
      onAdd?: (
        e: dxScheduler.AppointmentDraggingAddEvent
      ) => void;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.onDragEnd]
       */
      onDragEnd?: (
        e: dxScheduler.AppointmentDraggingEndEvent
      ) => void;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.onDragMove]
       */
      onDragMove?: (
        e: dxScheduler.AppointmentDraggingMoveEvent
      ) => void;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.onDragStart]
       */
      onDragStart?: (
        e: dxScheduler.AppointmentDraggingStartEvent
      ) => void;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.onRemove]
       */
      onRemove?: (
        e: dxScheduler.AppointmentDraggingRemoveEvent
      ) => void;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.scrollSensitivity]
       */
      scrollSensitivity?: number;
      /**
       * [descr:dxSchedulerOptions.appointmentDragging.scrollSpeed]
       */
      scrollSpeed?: number;
    };
    /**
     * [descr:dxSchedulerOptions.appointmentTemplate]
     */
    appointmentTemplate?:
    | core.template
    | ((
      model: dxScheduler.AppointmentTemplateData,
      itemIndex: number,
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSchedulerOptions.appointmentTooltipTemplate]
     */
    appointmentTooltipTemplate?:
    | core.template
    | ((
      model: dxScheduler.AppointmentTooltipTemplateData,
      itemIndex: number,
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSchedulerOptions.cellDuration]
     */
    cellDuration?: number;
    /**
     * [descr:dxSchedulerOptions.crossScrollingEnabled]
     */
    crossScrollingEnabled?: boolean;
    /**
     * [descr:dxSchedulerOptions.currentDate]
     */
    currentDate?: Date | number | string;
    /**
     * [descr:dxSchedulerOptions.currentView]
     */
    currentView?: dxScheduler.ViewType;
    /**
     * [descr:dxSchedulerOptions.customizeDateNavigatorText]
     */
    customizeDateNavigatorText?: (
      info: dxScheduler.DateNavigatorTextInfo
    ) => string;
    /**
     * [descr:dxSchedulerOptions.dataCellTemplate]
     */
    dataCellTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSchedulerOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<Appointment> | null;
    /**
     * [descr:dxSchedulerOptions.dateCellTemplate]
     */
    dateCellTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSchedulerOptions.dateSerializationFormat]
     */
    dateSerializationFormat?: string;
    /**
     * [descr:dxSchedulerOptions.descriptionExpr]
     */
    descriptionExpr?: string;
    /**
     * [descr:dxSchedulerOptions.dropDownAppointmentTemplate]
     * @deprecated [depNote:dxSchedulerOptions.dropDownAppointmentTemplate]
     */
    dropDownAppointmentTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      contentElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSchedulerOptions.editing]
     */
    editing?:
    | boolean
    | {
      /**
           * [descr:dxSchedulerOptions.editing.allowAdding]
           */
      allowAdding?: boolean;
      /**
           * [descr:dxSchedulerOptions.editing.allowDeleting]
           */
      allowDeleting?: boolean;
      /**
           * [descr:dxSchedulerOptions.editing.allowDragging]
           */
      allowDragging?: boolean;
      /**
           * [descr:dxSchedulerOptions.editing.allowResizing]
           */
      allowResizing?: boolean;
      /**
           * [descr:dxSchedulerOptions.editing.allowTimeZoneEditing]
           */
      allowTimeZoneEditing?: boolean;
      /**
           * [descr:dxSchedulerOptions.editing.allowUpdating]
           */
      allowUpdating?: boolean;
    };
    /**
     * [descr:dxSchedulerOptions.endDateExpr]
     */
    endDateExpr?: string;
    /**
     * [descr:dxSchedulerOptions.endDateTimeZoneExpr]
     */
    endDateTimeZoneExpr?: string;
    /**
     * [descr:dxSchedulerOptions.endDayHour]
     */
    endDayHour?: number;
    /**
     * [descr:dxSchedulerOptions.firstDayOfWeek]
     */
    firstDayOfWeek?: common.FirstDayOfWeek;
    /**
     * [descr:dxSchedulerOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxSchedulerOptions.groupByDate]
     */
    groupByDate?: boolean;
    /**
     * [descr:dxSchedulerOptions.groups]
     */
    groups?: string[];
    /**
     * [descr:dxSchedulerOptions.indicatorUpdateInterval]
     */
    indicatorUpdateInterval?: number;
    /**
     * [descr:dxSchedulerOptions.max]
     */
    max?: Date | number | string;
    /**
     * [descr:dxSchedulerOptions.maxAppointmentsPerCell]
     */
    maxAppointmentsPerCell?:
    | number
    | dxScheduler.CellAppointmentsLimit;
    /**
     * [descr:dxSchedulerOptions.min]
     */
    min?: Date | number | string;
    /**
     * [descr:dxSchedulerOptions.noDataText]
     */
    noDataText?: string;
    /**
     * [descr:dxSchedulerOptions.onAppointmentAdded]
     */
    onAppointmentAdded?: (
      e: dxScheduler.AppointmentAddedEvent
    ) => void;
    /**
     * [descr:dxSchedulerOptions.onAppointmentAdding]
     */
    onAppointmentAdding?: (
      e: dxScheduler.AppointmentAddingEvent
    ) => void;
    /**
     * [descr:dxSchedulerOptions.onAppointmentClick]
     */
    onAppointmentClick?:
    | ((e: dxScheduler.AppointmentClickEvent) => void)
    | string;
    /**
     * [descr:dxSchedulerOptions.onAppointmentContextMenu]
     */
    onAppointmentContextMenu?:
    | ((e: dxScheduler.AppointmentContextMenuEvent) => void)
    | string;
    /**
     * [descr:dxSchedulerOptions.onAppointmentDblClick]
     */
    onAppointmentDblClick?:
    | ((e: dxScheduler.AppointmentDblClickEvent) => void)
    | string;
    /**
     * [descr:dxSchedulerOptions.onAppointmentDeleted]
     */
    onAppointmentDeleted?: (
      e: dxScheduler.AppointmentDeletedEvent
    ) => void;

    /**
     * [descr:dxSchedulerOptions.onAppointmentDeleting]
     */
    onAppointmentDeleting?: (
      e: dxScheduler.AppointmentDeletingEvent
    ) => void;
    /**
     * [descr:dxSchedulerOptions.onAppointmentTooltipShowing]
     */
    onAppointmentTooltipShowing?: (
      e: dxScheduler.AppointmentTooltipShowingEvent
    ) => void;
    /**
     * [descr:dxSchedulerOptions.onAppointmentFormOpening]
     */
    onAppointmentFormOpening?: (
      e: dxScheduler.AppointmentFormOpeningEvent
    ) => void;
    /**
     * [descr:dxSchedulerOptions.onAppointmentRendered]
     */
    onAppointmentRendered?: (
      e: dxScheduler.AppointmentRenderedEvent
    ) => void;
    /**
     * [descr:dxSchedulerOptions.onAppointmentUpdated]
     */
    onAppointmentUpdated?: (
      e: dxScheduler.AppointmentUpdatedEvent
    ) => void;
    /**
     * [descr:dxSchedulerOptions.onAppointmentUpdating]
     */
    onAppointmentUpdating?: (
      e: dxScheduler.AppointmentUpdatingEvent
    ) => void;
    /**
     * [descr:dxSchedulerOptions.onCellClick]
     */
    onCellClick?:
    | ((e: dxScheduler.CellClickEvent) => void)
    | string;
    /**
     * [descr:dxSchedulerOptions.onCellContextMenu]
     */
    onCellContextMenu?:
    | ((e: dxScheduler.CellContextMenuEvent) => void)
    | string;
    /**
     * [descr:dxSchedulerOptions.recurrenceEditMode]
     */
    recurrenceEditMode?: dxScheduler.RecurrenceEditMode;
    /**
     * [descr:dxSchedulerOptions.recurrenceExceptionExpr]
     */
    recurrenceExceptionExpr?: string;
    /**
     * [descr:dxSchedulerOptions.recurrenceRuleExpr]
     */
    recurrenceRuleExpr?: string;
    /**
     * [descr:dxSchedulerOptions.remoteFiltering]
     */
    remoteFiltering?: boolean;
    /**
     * [descr:dxSchedulerOptions.resourceCellTemplate]
     */
    resourceCellTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSchedulerOptions.resources]
     */
    resources?: {
      /**
       * [descr:dxSchedulerOptions.resources.allowMultiple]
       */
      allowMultiple?: boolean;
      /**
       * [descr:dxSchedulerOptions.resources.colorExpr]
       */
      colorExpr?: string;
      /**
       * [descr:dxSchedulerOptions.resources.dataSource]
       */
      dataSource?: data.DataSource.DataSourceLike<any> | null;
      /**
       * [descr:dxSchedulerOptions.resources.displayExpr]
       */
      displayExpr?: string | ((resource: any) => string);
      /**
       * [descr:dxSchedulerOptions.resources.fieldExpr]
       */
      fieldExpr?: string;
      /**
       * [descr:dxSchedulerOptions.resources.label]
       */
      label?: string;
      /**
       * [descr:dxSchedulerOptions.resources.useColorAsDefault]
       */
      useColorAsDefault?: boolean;
      /**
       * [descr:dxSchedulerOptions.resources.valueExpr]
       */
      valueExpr?: string | Function;
    }[];
    /**
     * [descr:dxSchedulerOptions.scrolling]
     */
    scrolling?: dxSchedulerScrolling;
    /**
     * [descr:dxSchedulerOptions.selectedCellData]
     */
    selectedCellData?: any[];
    /**
     * [descr:dxSchedulerOptions.shadeUntilCurrentTime]
     */
    shadeUntilCurrentTime?: boolean;
    /**
     * [descr:dxSchedulerOptions.showAllDayPanel]
     */
    showAllDayPanel?: boolean;
    /**
     * [descr:dxSchedulerOptions.showCurrentTimeIndicator]
     */
    showCurrentTimeIndicator?: boolean;
    /**
     * [descr:dxSchedulerOptions.startDateExpr]
     */
    startDateExpr?: string;
    /**
     * [descr:dxSchedulerOptions.startDateTimeZoneExpr]
     */
    startDateTimeZoneExpr?: string;
    /**
     * [descr:dxSchedulerOptions.startDayHour]
     */
    startDayHour?: number;
    /**
     * [descr:dxSchedulerOptions.textExpr]
     */
    textExpr?: string;
    /**
     * [descr:dxSchedulerOptions.timeCellTemplate]
     */
    timeCellTemplate?:
    | core.template
    | ((
      itemData: any,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSchedulerOptions.timeZone]
     */
    timeZone?: string;
    /**
     * [descr:dxSchedulerOptions.useDropDownViewSwitcher]
     */
    useDropDownViewSwitcher?: boolean;
    /**
     * [descr:dxSchedulerOptions.allDayPanelMode]
     */
    allDayPanelMode?: dxScheduler.AllDayPanelMode;
    /**
     * [descr:dxSchedulerOptions.views]
     */
    views?: (| 'day'
    | 'week'
    | 'workWeek'
    | 'month'
    | 'timelineDay'
    | 'timelineWeek'
    | 'timelineWorkWeek'
    | 'timelineMonth'
    | 'agenda'
    | {
      /**
           * [descr:dxSchedulerOptions.views.agendaDuration]
           */
      agendaDuration?: number;
      /**
           * [descr:dxSchedulerOptions.views.appointmentCollectorTemplate]
           */
      appointmentCollectorTemplate?:
      | core.template
      | ((
        data: dxScheduler.AppointmentCollectorTemplateData,
        collectorElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
           * [descr:dxSchedulerOptions.views.appointmentTemplate]
           */
      appointmentTemplate?:
      | core.template
      | ((
        model: dxScheduler.AppointmentTemplateData,
        itemIndex: number,
        contentElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
           * [descr:dxSchedulerOptions.views.appointmentTooltipTemplate]
           */
      appointmentTooltipTemplate?:
      | core.template
      | ((
        model: dxScheduler.AppointmentTooltipTemplateData,
        itemIndex: number,
        contentElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
           * [descr:dxSchedulerOptions.views.dropDownAppointmentTemplate]
           * @deprecated [depNote:dxSchedulerOptions.views.dropDownAppointmentTemplate]
           */
      dropDownAppointmentTemplate?:
      | core.template
      | ((
        itemData: any,
        itemIndex: number,
        contentElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
           * [descr:dxSchedulerOptions.views.cellDuration]
           */
      cellDuration?: number;
      /**
           * [descr:dxSchedulerOptions.views.dataCellTemplate]
           */
      dataCellTemplate?:
      | core.template
      | ((
        itemData: any,
        itemIndex: number,
        itemElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
           * [descr:dxSchedulerOptions.views.dateCellTemplate]
           */
      dateCellTemplate?:
      | core.template
      | ((
        itemData: any,
        itemIndex: number,
        itemElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
           * [descr:dxSchedulerOptions.views.endDayHour]
           */
      endDayHour?: number;
      /**
           * [descr:dxSchedulerOptions.views.firstDayOfWeek]
           */
      firstDayOfWeek?: common.FirstDayOfWeek;
      /**
           * [descr:dxSchedulerOptions.views.groupByDate]
           */
      groupByDate?: boolean;
      /**
           * [descr:dxSchedulerOptions.views.groupOrientation]
           */
      groupOrientation?: common.Orientation;
      /**
           * [descr:dxSchedulerOptions.views.groups]
           */
      groups?: string[];
      /**
           * [descr:dxSchedulerOptions.views.intervalCount]
           */
      intervalCount?: number;
      /**
           * [descr:dxSchedulerOptions.views.maxAppointmentsPerCell]
           */
      maxAppointmentsPerCell?:
      | number
      | dxScheduler.CellAppointmentsLimit;
      /**
           * [descr:dxSchedulerOptions.views.name]
           */
      name?: string;
      /**
           * [descr:dxSchedulerOptions.views.resourceCellTemplate]
           */
      resourceCellTemplate?:
      | core.template
      | ((
        itemData: any,
        itemIndex: number,
        itemElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
           * [descr:dxSchedulerOptions.views.startDate]
           */
      startDate?: Date | number | string;
      /**
           * [descr:dxSchedulerOptions.views.startDayHour]
           */
      startDayHour?: number;
      /**
           * [descr:dxSchedulerOptions.views.timeCellTemplate]
           */
      timeCellTemplate?:
      | core.template
      | ((
        itemData: any,
        itemIndex: number,
        itemElement: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
           * [descr:dxSchedulerOptions.views.type]
           */
      type?: dxScheduler.ViewType;
      /**
           * [descr:dxSchedulerOptions.views.scrolling]
           */
      scrolling?: dxSchedulerScrolling;
      /**
           * [descr:dxSchedulerOptions.views.allDayPanelMode]
           */
      allDayPanelMode?: dxScheduler.AllDayPanelMode;
    })[];
  }
  /**
   * [descr:dxSchedulerScrolling]
   */
  export interface dxSchedulerScrolling {
    /**
     * [descr:dxSchedulerScrolling.mode]
     */
    mode?: common.ScrollMode;
  }
  /**
   * [descr:dxScrollable]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxScrollable<
    TProperties = dxScrollable.Properties,
  > extends DOMComponent<TProperties> {
    /**
     * [descr:dxScrollable.clientHeight()]
     */
    clientHeight(): number;
    /**
     * [descr:dxScrollable.clientWidth()]
     */
    clientWidth(): number;
    /**
     * [descr:dxScrollable.content()]
     */
    content(): core.DxElement;
    /**
     * [descr:dxScrollable.scrollBy(distance)]
     */
    scrollBy(distance: number | any): void;
    /**
     * [descr:dxScrollable.scrollHeight()]
     */
    scrollHeight(): number;
    /**
     * [descr:dxScrollable.scrollLeft()]
     */
    scrollLeft(): number;
    /**
     * [descr:dxScrollable.scrollOffset()]
     */
    scrollOffset(): any;
    /**
     * [descr:dxScrollable.scrollTo(targetLocation)]
     */
    scrollTo(targetLocation: number | any): void;
    /**
     * [descr:dxScrollable.scrollToElement(element)]
     */
    scrollToElement(element: core.UserDefinedElement): void;
    /**
     * [descr:dxScrollable.scrollTop()]
     */
    scrollTop(): number;
    /**
     * [descr:dxScrollable.scrollWidth()]
     */
    scrollWidth(): number;
    /**
     * [descr:dxScrollable.update()]
     */
    update(): core.utils.DxPromise;
  }
  namespace dxScrollable {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type Properties = dxScrollableOptions<ScrollableInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface ScrollableInstance extends dxScrollable {}
    /**
     * [descr:ScrollEventInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ScrollEventInfo<T>
      extends events.NativeEventInfo<
      T,
      WheelEvent | MouseEvent | Event
      > {
      /**
       * [descr:ScrollEventInfo.scrollOffset]
       */
      readonly scrollOffset?: any;
      /**
       * [descr:ScrollEventInfo.reachedLeft]
       */
      readonly reachedLeft?: boolean;
      /**
       * [descr:ScrollEventInfo.reachedRight]
       */
      readonly reachedRight?: boolean;
      /**
       * [descr:ScrollEventInfo.reachedTop]
       */
      readonly reachedTop?: boolean;
      /**
       * [descr:ScrollEventInfo.reachedBottom]
       */
      readonly reachedBottom?: boolean;
    }
  }
  /**
   * [descr:dxScrollableOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxScrollableOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * [descr:dxScrollableOptions.bounceEnabled]
     */
    bounceEnabled?: boolean;
    /**
     * [descr:dxScrollableOptions.direction]
     */
    direction?: common.ScrollDirection;
    /**
     * [descr:dxScrollableOptions.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:dxScrollableOptions.onScroll]
     */
    onScroll?: (
      e: dxScrollable.ScrollEventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxScrollableOptions.onUpdated]
     */
    onUpdated?: (
      e: dxScrollable.ScrollEventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxScrollableOptions.scrollByContent]
     */
    scrollByContent?: boolean;
    /**
     * [descr:dxScrollableOptions.scrollByThumb]
     */
    scrollByThumb?: boolean;
    /**
     * [descr:dxScrollableOptions.showScrollbar]
     */
    showScrollbar?: 'onScroll' | 'onHover' | 'always' | 'never';
    /**
     * [descr:dxScrollableOptions.useNative]
     */
    useNative?: boolean;
  }
  /**
   * [descr:dxScrollView]
   */
  export class dxScrollView extends dxScrollable<dxScrollViewOptions> {
    /**
     * [descr:dxScrollView.refresh()]
     */
    refresh(): void;
    /**
     * [descr:dxScrollView.release(preventScrollBottom)]
     */
    release(
      preventScrollBottom: boolean
    ): core.utils.DxPromise;
  }
  namespace dxScrollView {
    /**
     * [descr:_ui_scroll_view_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxScrollView>;
    /**
     * [descr:_ui_scroll_view_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxScrollView>;
    /**
     * [descr:_ui_scroll_view_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxScrollView> &
    events.ChangedOptionInfo;
    export type Properties = dxScrollViewOptions;
    /**
     * [descr:_ui_scroll_view_PullDownEvent]
     */
    export type PullDownEvent = events.EventInfo<dxScrollView>;
    /**
     * [descr:_ui_scroll_view_ReachBottomEvent]
     */
    export type ReachBottomEvent = events.EventInfo<dxScrollView>;
    /**
     * [descr:_ui_scroll_view_ScrollEvent]
     */
    export type ScrollEvent =
      dxScrollable.ScrollEventInfo<dxScrollView>;
    /**
     * [descr:_ui_scroll_view_UpdatedEvent]
     */
    export type UpdatedEvent =
      dxScrollable.ScrollEventInfo<dxScrollView>;
  }
  /**
   * [descr:dxScrollViewOptions]
   * @deprecated [depNote:dxScrollViewOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxScrollViewOptions
    extends dxScrollableOptions<dxScrollView> {
    /**
     * [descr:dxScrollViewOptions.onPullDown]
     */
    onPullDown?: (e: dxScrollView.PullDownEvent) => void;
    /**
     * [descr:dxScrollViewOptions.onReachBottom]
     */
    onReachBottom?: (e: dxScrollView.ReachBottomEvent) => void;
    /**
     * [descr:dxScrollViewOptions.pulledDownText]
     */
    pulledDownText?: string;
    /**
     * [descr:dxScrollViewOptions.pullingDownText]
     */
    pullingDownText?: string;
    /**
     * [descr:dxScrollViewOptions.reachBottomText]
     */
    reachBottomText?: string;
    /**
     * [descr:dxScrollViewOptions.refreshingText]
     */
    refreshingText?: string;
  }
  /**
   * [descr:dxSelectBox]
   */
  export class dxSelectBox<
    TProperties = dxSelectBox.Properties,
  > extends dxDropDownList<TProperties> {}
  namespace dxSelectBox {
    /**
     * [descr:_ui_select_box_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxSelectBox
    >;
    /**
     * [descr:_ui_select_box_ClosedEvent]
     */
    export type ClosedEvent = events.EventInfo<dxSelectBox>;
    /**
     * [descr:_ui_select_box_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxSelectBox>;
    /**
     * [descr:_ui_select_box_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxSelectBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_select_box_CustomItemCreatingEvent]
     */
    export type CustomItemCreatingEvent =
      events.EventInfo<dxSelectBox> & CustomItemCreatingInfo;
    /**
     * [descr:CustomItemCreatingInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface CustomItemCreatingInfo {
      /**
       * [descr:CustomItemCreatingInfo.text]
       */
      readonly text?: string;
      /**
       * [descr:CustomItemCreatingInfo.customItem]
       */
      customItem?: string | any | PromiseLike<any>;
    }
    /**
     * [descr:_ui_select_box_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxSelectBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_select_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxSelectBox>;
    export type DropDownButtonTemplateData =
      dxDropDownEditor.DropDownButtonTemplateDataModel;
    /**
     * [descr:_ui_select_box_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxSelectBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_select_box_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxSelectBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_select_box_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxSelectBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_select_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxSelectBox>;
    /**
     * [descr:_ui_select_box_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxSelectBox,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_select_box_ItemClickEvent]
     */
    export type ItemClickEvent = events.NativeEventInfo<
    dxSelectBox,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo;
    /**
     * [descr:_ui_select_box_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxSelectBox,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxSelectBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_select_box_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxSelectBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_select_box_OpenedEvent]
     */
    export type OpenedEvent = events.EventInfo<dxSelectBox>;
    /**
     * [descr:_ui_select_box_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxSelectBox> &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_select_box_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxSelectBox,
    ClipboardEvent
    >;
    export type Properties = dxSelectBoxOptions<SelectBoxInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface SelectBoxInstance extends dxSelectBox {}
    /**
     * [descr:_ui_select_box_SelectionChangedEvent]
     */
    export type SelectionChangedEvent =
      events.EventInfo<dxSelectBox> &
      dxDropDownList.SelectionChangedInfo;
    /**
     * [descr:_ui_select_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxSelectBox,
    KeyboardEvent | MouseEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxSelectBoxOptions]
   * @deprecated [depNote:dxSelectBoxOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSelectBoxOptions<TComponent>
    extends dxDropDownListOptions<TComponent> {
    /**
     * [descr:dxSelectBoxOptions.acceptCustomValue]
     */
    acceptCustomValue?: boolean;
    /**
     * [descr:dxSelectBoxOptions.fieldTemplate]
     */
    fieldTemplate?:
    | core.template
    | ((
      selectedItem: any,
      fieldElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSelectBoxOptions.onCustomItemCreating]
     */
    onCustomItemCreating?: (
      e: events.EventInfo<TComponent> &
      dxSelectBox.CustomItemCreatingInfo
    ) => void;
    /**
     * [descr:dxSelectBoxOptions.openOnFieldClick]
     */
    openOnFieldClick?: boolean;
    /**
     * [descr:dxSelectBoxOptions.placeholder]
     */
    placeholder?: string;
    /**
     * [descr:dxSelectBoxOptions.showDropDownButton]
     */
    showDropDownButton?: boolean;
    /**
     * [descr:dxSelectBoxOptions.showSelectionControls]
     */
    showSelectionControls?: boolean;
    /**
     * [descr:dxSelectBoxOptions.valueChangeEvent]
     * @deprecated [depNote:dxSelectBoxOptions.valueChangeEvent]
     */
    valueChangeEvent?: string;

    /**
     * [descr:dxSelectBoxOptions.customItemCreateEvent]
     */
    customItemCreateEvent?: string;

    /**
     * [descr:dxSelectBoxOptions.dropDownOptions]
     */
    dropDownOptions?: dxPopup.Properties;
  }
  /**
   * [descr:dxSlider]
   */
  export class dxSlider extends dxTrackBar<dxSliderOptions> {}
  namespace dxSlider {
    /**
     * [descr:_ui_slider_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxSlider>;
    /**
     * [descr:_ui_slider_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxSlider>;
    /**
     * [descr:_ui_slider_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxSlider>;
    /**
     * [descr:_ui_slider_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxSlider> &
    events.ChangedOptionInfo;
    export type Properties = dxSliderOptions;
    /**
     * [descr:_ui_slider_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxSlider,
    KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | UIEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxSliderBase]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSliderBase {}
  /**
   * [descr:dxSliderBaseOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSliderBaseOptions<TComponent>
    extends dxTrackBarOptions<TComponent> {
    /**
     * [descr:dxSliderBaseOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxSliderBaseOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxSliderBaseOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxSliderBaseOptions.keyStep]
     */
    keyStep?: number;
    /**
     * [descr:dxSliderBaseOptions.label]
     */
    label?: {
      /**
       * [descr:dxSliderBaseOptions.label.format]
       */
      format?: Format;
      /**
       * [descr:dxSliderBaseOptions.label.position]
       */
      position?: common.VerticalEdge;
      /**
       * [descr:dxSliderBaseOptions.label.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxSliderBaseOptions.name]
     */
    name?: string;
    /**
     * [descr:dxSliderBaseOptions.showRange]
     */
    showRange?: boolean;
    /**
     * [descr:dxSliderBaseOptions.step]
     */
    step?: number;
    /**
     * [descr:dxSliderBaseOptions.tooltip]
     */
    tooltip?: {
      /**
       * [descr:dxSliderBaseOptions.tooltip.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxSliderBaseOptions.tooltip.format]
       */
      format?: Format;
      /**
       * [descr:dxSliderBaseOptions.tooltip.position]
       */
      position?: common.VerticalEdge;
      /**
       * [descr:dxSliderBaseOptions.tooltip.showMode]
       */
      showMode?: common.TooltipShowMode;
    };
    /**
     * [descr:dxSliderBaseOptions.valueChangeMode]
     */
    valueChangeMode?: common.SliderValueChangeMode;
  }
  /**
   * [descr:dxSliderOptions]
   * @deprecated [depNote:dxSliderOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSliderOptions extends dxSliderBaseOptions<dxSlider> {
    /**
     * [descr:dxSliderOptions.value]
     */
    value?: number;
  }
  /**
   * [descr:dxSortable]
   */
  export class dxSortable
    extends DOMComponent<dxSortableOptions>
    implements DraggableBase {
    /**
     * [descr:dxSortable.update()]
     */
    update(): void;
  }
  namespace dxSortable {
    /**
     * [descr:_ui_sortable_AddEvent]
     */
    export interface AddEvent {
      /**
       * [descr:_ui_sortable_AddEvent.component]
       */
      readonly component: dxSortable;
      /**
       * [descr:_ui_sortable_AddEvent.element]
       */
      readonly element: core.DxElement;
      /**
       * [descr:_ui_sortable_AddEvent.model]
       */
      readonly model?: any;
      /**
       * [descr:_ui_sortable_AddEvent.event]
       */
      readonly event: events.DxEvent<
      PointerEvent | MouseEvent | TouchEvent
      >;
      /**
       * [descr:_ui_sortable_AddEvent.itemData]
       */
      readonly itemData?: any;
      /**
       * [descr:_ui_sortable_AddEvent.itemElement]
       */
      readonly itemElement: core.DxElement;
      /**
       * [descr:_ui_sortable_AddEvent.fromIndex]
       */
      readonly fromIndex: number;
      /**
       * [descr:_ui_sortable_AddEvent.toIndex]
       */
      readonly toIndex: number;
      /**
       * [descr:_ui_sortable_AddEvent.fromComponent]
       */
      readonly fromComponent: dxSortable | dxDraggable;
      /**
       * [descr:_ui_sortable_AddEvent.toComponent]
       */
      readonly toComponent: dxSortable | dxDraggable;
      /**
       * [descr:_ui_sortable_AddEvent.fromData]
       */
      readonly fromData?: any;
      /**
       * [descr:_ui_sortable_AddEvent.toData]
       */
      readonly toData?: any;
      /**
       * [descr:_ui_sortable_AddEvent.dropInsideItem]
       */
      readonly dropInsideItem: boolean;
    }
    /**
     * [descr:_ui_sortable_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxSortable>;
    /**
     * [descr:_ui_sortable_DragChangeEvent]
     */
    export type DragChangeEvent = events.Cancelable &
    events.NativeEventInfo<
    dxSortable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_sortable_DragChangeEvent.itemData]
         */
      readonly itemData?: any;
      /**
         * [descr:_ui_sortable_DragChangeEvent.itemElement]
         */
      readonly itemElement: core.DxElement;
      /**
         * [descr:_ui_sortable_DragChangeEvent.fromIndex]
         */
      readonly fromIndex?: number;
      /**
         * [descr:_ui_sortable_DragChangeEvent.toIndex]
         */
      readonly toIndex?: number;
      /**
         * [descr:_ui_sortable_DragChangeEvent.fromComponent]
         */
      readonly fromComponent?: dxSortable | dxDraggable;
      /**
         * [descr:_ui_sortable_DragChangeEvent.toComponent]
         */
      readonly toComponent?: dxSortable | dxDraggable;
      /**
         * [descr:_ui_sortable_DragChangeEvent.fromData]
         */
      readonly fromData?: any;
      /**
         * [descr:_ui_sortable_DragChangeEvent.toData]
         */
      readonly toData?: any;
      /**
         * [descr:_ui_sortable_DragChangeEvent.dropInsideItem]
         */
      readonly dropInsideItem?: boolean;
    };
    /**
     * [descr:_ui_sortable_DragEndEvent]
     */
    export type DragEndEvent = events.Cancelable &
    events.NativeEventInfo<
    dxSortable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_sortable_DragEndEvent.itemData]
         */
      readonly itemData?: any;
      /**
         * [descr:_ui_sortable_DragEndEvent.itemElement]
         */
      readonly itemElement: core.DxElement;
      /**
         * [descr:_ui_sortable_DragEndEvent.fromIndex]
         */
      readonly fromIndex: number;
      /**
         * [descr:_ui_sortable_DragEndEvent.toIndex]
         */
      readonly toIndex: number;
      /**
         * [descr:_ui_sortable_DragEndEvent.fromComponent]
         */
      readonly fromComponent: dxSortable | dxDraggable;
      /**
         * [descr:_ui_sortable_DragEndEvent.toComponent]
         */
      readonly toComponent: dxSortable | dxDraggable;
      /**
         * [descr:_ui_sortable_DragEndEvent.fromData]
         */
      readonly fromData?: any;
      /**
         * [descr:_ui_sortable_DragEndEvent.toData]
         */
      readonly toData?: any;
      /**
         * [descr:_ui_sortable_DragEndEvent.dropInsideItem]
         */
      readonly dropInsideItem: boolean;
    };
    /**
     * [descr:_ui_sortable_DragMoveEvent]
     */
    export type DragMoveEvent = events.Cancelable &
    events.NativeEventInfo<
    dxSortable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_sortable_DragMoveEvent.itemData]
         */
      readonly itemData?: any;
      /**
         * [descr:_ui_sortable_DragMoveEvent.itemElement]
         */
      readonly itemElement: core.DxElement;
      /**
         * [descr:_ui_sortable_DragMoveEvent.fromIndex]
         */
      readonly fromIndex: number;
      /**
         * [descr:_ui_sortable_DragMoveEvent.toIndex]
         */
      readonly toIndex: number;
      /**
         * [descr:_ui_sortable_DragMoveEvent.fromComponent]
         */
      readonly fromComponent: dxSortable | dxDraggable;
      /**
         * [descr:_ui_sortable_DragMoveEvent.toComponent]
         */
      readonly toComponent: dxSortable | dxDraggable;
      /**
         * [descr:_ui_sortable_DragMoveEvent.fromData]
         */
      readonly fromData?: any;
      /**
         * [descr:_ui_sortable_DragMoveEvent.toData]
         */
      readonly toData?: any;
      /**
         * [descr:_ui_sortable_DragMoveEvent.dropInsideItem]
         */
      readonly dropInsideItem: boolean;
    };
    /**
     * [descr:_ui_sortable_DragStartEvent]
     */
    export type DragStartEvent = events.Cancelable &
    events.NativeEventInfo<
    dxSortable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_sortable_DragStartEvent.itemData]
         */
      itemData?: any;
      /**
         * [descr:_ui_sortable_DragStartEvent.itemElement]
         */
      readonly itemElement: core.DxElement;
      /**
         * [descr:_ui_sortable_DragStartEvent.fromIndex]
         */
      readonly fromIndex: number;
      /**
         * [descr:_ui_sortable_DragStartEvent.fromData]
         */
      readonly fromData?: any;
    };
    export interface DragTemplateData {
      readonly itemData?: any;
      readonly itemElement: core.DxElement;
      readonly fromIndex: number;
    }
    /**
     * [descr:_ui_sortable_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxSortable>;
    /**
     * [descr:_ui_sortable_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxSortable> &
    events.ChangedOptionInfo;
    export type Properties = dxSortableOptions;
    /**
     * [descr:_ui_sortable_RemoveEvent]
     */
    export type RemoveEvent = events.NativeEventInfo<
    dxSortable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
       * [descr:_ui_sortable_RemoveEvent.itemData]
       */
      readonly itemData?: any;
      /**
       * [descr:_ui_sortable_RemoveEvent.itemElement]
       */
      readonly itemElement: core.DxElement;
      /**
       * [descr:_ui_sortable_RemoveEvent.fromIndex]
       */
      readonly fromIndex: number;
      /**
       * [descr:_ui_sortable_RemoveEvent.toIndex]
       */
      readonly toIndex: number;
      /**
       * [descr:_ui_sortable_RemoveEvent.fromComponent]
       */
      readonly fromComponent: dxSortable | dxDraggable;
      /**
       * [descr:_ui_sortable_RemoveEvent.toComponent]
       */
      readonly toComponent: dxSortable | dxDraggable;
      /**
       * [descr:_ui_sortable_RemoveEvent.fromData]
       */
      readonly fromData?: any;
      /**
       * [descr:_ui_sortable_RemoveEvent.toData]
       */
      readonly toData?: any;
    };
    /**
     * [descr:_ui_sortable_ReorderEvent]
     */
    export type ReorderEvent = events.NativeEventInfo<
    dxSortable,
    PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
       * [descr:_ui_sortable_ReorderEvent.itemData]
       */
      readonly itemData?: any;
      /**
       * [descr:_ui_sortable_ReorderEvent.itemElement]
       */
      readonly itemElement: core.DxElement;
      /**
       * [descr:_ui_sortable_ReorderEvent.fromIndex]
       */
      readonly fromIndex: number;
      /**
       * [descr:_ui_sortable_ReorderEvent.toIndex]
       */
      readonly toIndex: number;
      /**
       * [descr:_ui_sortable_ReorderEvent.fromComponent]
       */
      readonly fromComponent: dxSortable | dxDraggable;
      /**
       * [descr:_ui_sortable_ReorderEvent.toComponent]
       */
      readonly toComponent: dxSortable | dxDraggable;
      /**
       * [descr:_ui_sortable_ReorderEvent.fromData]
       */
      readonly fromData?: any;
      /**
       * [descr:_ui_sortable_ReorderEvent.toData]
       */
      readonly toData?: any;
      /**
       * [descr:_ui_sortable_ReorderEvent.dropInsideItem]
       */
      readonly dropInsideItem: boolean;
      /**
       * [descr:_ui_sortable_ReorderEvent.promise]
       */
      promise?: PromiseLike<void>;
    };
  }
  /**
   * [descr:dxSortableOptions]
   * @deprecated [depNote:dxSortableOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSortableOptions extends DraggableBaseOptions<dxSortable> {
    /**
     * [descr:dxSortableOptions.allowDropInsideItem]
     */
    allowDropInsideItem?: boolean;
    /**
     * [descr:dxSortableOptions.allowReordering]
     */
    allowReordering?: boolean;
    /**
     * [descr:dxSortableOptions.dragTemplate]
     */
    dragTemplate?:
    | core.template
    | ((
      dragInfo: dxSortable.DragTemplateData,
      containerElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxSortableOptions.dropFeedbackMode]
     */
    dropFeedbackMode?: common.DragHighlight;
    /**
     * [descr:dxSortableOptions.filter]
     */
    filter?: string;
    /**
     * [descr:dxSortableOptions.itemOrientation]
     */
    itemOrientation?: common.Orientation;
    /**
     * [descr:dxSortableOptions.moveItemOnDrop]
     */
    moveItemOnDrop?: boolean;
    /**
     * [descr:dxSortableOptions.onAdd]
     */
    onAdd?: (e: dxSortable.AddEvent) => void;
    /**
     * [descr:dxSortableOptions.onDragChange]
     */
    onDragChange?: (e: dxSortable.DragChangeEvent) => void;
    /**
     * [descr:dxSortableOptions.onDragEnd]
     */
    onDragEnd?: (e: dxSortable.DragEndEvent) => void;
    /**
     * [descr:dxSortableOptions.onDragMove]
     */
    onDragMove?: (e: dxSortable.DragMoveEvent) => void;
    /**
     * [descr:dxSortableOptions.onDragStart]
     */
    onDragStart?: (e: dxSortable.DragStartEvent) => void;
    /**
     * [descr:dxSortableOptions.onRemove]
     */
    onRemove?: (e: dxSortable.RemoveEvent) => void;
    /**
     * [descr:dxSortableOptions.onReorder]
     */
    onReorder?: (e: dxSortable.ReorderEvent) => void;
  }
  /**
   * [descr:dxSpeedDialAction]
   */
  export class dxSpeedDialAction extends Widget<dxSpeedDialActionOptions> {}
  namespace dxSpeedDialAction {
    /**
     * [descr:_ui_speed_dial_action_ClickEvent]
     */
    export type ClickEvent = events.NativeEventInfo<
    dxSpeedDialAction,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_ui_speed_dial_action_ClickEvent.actionElement]
       */
      actionElement?: core.DxElement;
    };
    /**
     * [descr:_ui_speed_dial_action_ContentReadyEvent]
     */
    export type ContentReadyEvent =
      events.EventInfo<dxSpeedDialAction> & {
        /**
         * [descr:_ui_speed_dial_action_ContentReadyEvent.actionElement]
         */
        actionElement?: core.DxElement;
      };
    /**
     * [descr:_ui_speed_dial_action_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxSpeedDialAction>;
    /**
     * [descr:_ui_speed_dial_action_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxSpeedDialAction>;
    /**
     * [descr:_ui_speed_dial_action_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxSpeedDialAction> &
      events.ChangedOptionInfo;
    export type Properties = dxSpeedDialActionOptions;
  }
  /**
   * [descr:dxSpeedDialActionOptions]
   * @deprecated [depNote:dxSpeedDialActionOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSpeedDialActionOptions
    extends WidgetOptions<dxSpeedDialAction> {
    /**
     * [descr:dxSpeedDialActionOptions.icon]
     */
    icon?: string;
    /**
     * [descr:dxSpeedDialActionOptions.index]
     */
    index?: number;
    /**
     * [descr:dxSpeedDialActionOptions.label]
     */
    label?: string;
    /**
     * [descr:dxSpeedDialActionOptions.onClick]
     */
    onClick?: (e: dxSpeedDialAction.ClickEvent) => void;
    /**
     * [descr:dxSpeedDialActionOptions.onContentReady]
     */
    onContentReady?: (
      e: dxSpeedDialAction.ContentReadyEvent
    ) => void;
    /**
     * [descr:dxSpeedDialActionOptions.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:dxSwitch]
   */
  export class dxSwitch extends Editor<dxSwitchOptions> {}
  namespace dxSwitch {
    /**
     * [descr:_ui_switch_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxSwitch>;
    /**
     * [descr:_ui_switch_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxSwitch>;
    /**
     * [descr:_ui_switch_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxSwitch>;
    /**
     * [descr:_ui_switch_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxSwitch> &
    events.ChangedOptionInfo;
    export type Properties = dxSwitchOptions;
    /**
     * [descr:_ui_switch_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxSwitch,
    KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | UIEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxSwitchOptions]
   * @deprecated [depNote:dxSwitchOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSwitchOptions extends EditorOptions<dxSwitch> {
    /**
     * [descr:dxSwitchOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxSwitchOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxSwitchOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxSwitchOptions.name]
     */
    name?: string;
    /**
     * [descr:dxSwitchOptions.switchedOffText]
     */
    switchedOffText?: string;
    /**
     * [descr:dxSwitchOptions.switchedOnText]
     */
    switchedOnText?: string;
    /**
     * [descr:dxSwitchOptions.value]
     */
    value?: boolean;
  }
  /**
   * [descr:dxTabPanel]
   */
  export class dxTabPanel<
    TItem extends dxTabPanel.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<
    dxTabPanel.Properties<TItem, TKey>,
    TItem,
    TKey
    > {}
  namespace dxTabPanel {
    /**
     * [descr:_ui_tab_panel_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabPanel<TItem, TKey>>;
    /**
     * [descr:_ui_tab_panel_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabPanel<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
      TitleClickEvent: TitleClickEvent<TItem, TKey>;
      TitleHoldEvent: TitleHoldEvent<TItem, TKey>;
      TitleRenderedEvent: TitleRenderedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_tab_panel_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxTabPanel<TItem, TKey>>;
    /**
     * [descr:_ui_tab_panel_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTabPanel<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tab_panel_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTabPanel<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tab_panel_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTabPanel<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    /**
     * [descr:_ui_tab_panel_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabPanel<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tab_panel_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabPanel<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxTabPanelOptions<TItem, TKey>;
    /**
     * [descr:_ui_tab_panel_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabPanel<TItem, TKey>> &
    CollectionWidget.SelectionChangedInfo<TItem>;
    /**
     * [descr:TabPanelItemInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TabPanelItemInfo<TItem extends ItemLike> {
      /**
       * [descr:TabPanelItemInfo.itemData]
       */
      readonly itemData?: TItem;
      /**
       * [descr:TabPanelItemInfo.itemElement]
       */
      readonly itemElement?: core.DxElement;
    }
    /**
     * [descr:_ui_tab_panel_TitleClickEvent]
     */
    export type TitleClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTabPanel<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    TabPanelItemInfo<TItem>;
    /**
     * [descr:_ui_tab_panel_TitleHoldEvent]
     */
    export type TitleHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTabPanel<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    TabPanelItemInfo<TItem>;
    /**
     * [descr:_ui_tab_panel_TitleRenderedEvent]
     */
    export type TitleRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabPanel<TItem, TKey>> &
    TabPanelItemInfo<TItem>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTabPanelItem extends dxMultiView.Item {
    /**
     * [descr:dxTabPanelItem.badge]
     */
    badge?: string;
    /**
     * [descr:dxTabPanelItem.icon]
     */
    icon?: string;
    /**
     * [descr:dxTabPanelItem.tabTemplate]
     */
    tabTemplate?:
    | core.template
    | (() => string | core.UserDefinedElement);
    /**
     * [descr:dxTabPanelItem.title]
     */
    title?: string;
  }
  /**
   * [descr:dxTabPanelOptions]
   * @deprecated [depNote:dxTabPanelOptions]
   */
  export interface dxTabPanelOptions<
    TItem extends dxTabPanel.ItemLike = any,
    TKey = any,
  > extends dxMultiViewBaseOptions<dxTabPanel<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxTabPanelOptions.animationEnabled]
     */
    animationEnabled?: boolean;
    /**
     * [descr:dxTabPanelOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxTabPanelOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxTabPanelOptions.itemTitleTemplate]
     */
    itemTitleTemplate?:
    | core.template
    | ((
      itemData: TItem,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxTabPanelOptions.iconPosition]
     */
    iconPosition?: common.TabsIconPosition;
    /**
     * [descr:dxTabPanelOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxTabPanelOptions.onTitleClick]
     */
    onTitleClick?:
    | ((e: dxTabPanel.TitleClickEvent<TItem, TKey>) => void)
    | string;
    /**
     * [descr:dxTabPanelOptions.onTitleHold]
     */
    onTitleHold?: (
      e: dxTabPanel.TitleHoldEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxTabPanelOptions.onTitleRendered]
     */
    onTitleRendered?: (
      e: dxTabPanel.TitleRenderedEvent<TItem, TKey>
    ) => void;
    /**
     * [descr:dxTabPanelOptions.repaintChangesOnly]
     */
    repaintChangesOnly?: boolean;
    /**
     * [descr:dxTabPanelOptions.scrollByContent]
     */
    scrollByContent?: boolean;
    /**
     * [descr:dxTabPanelOptions.scrollingEnabled]
     */
    scrollingEnabled?: boolean;
    /**
     * [descr:dxTabPanelOptions.showNavButtons]
     */
    showNavButtons?: boolean;
    /**
     * [descr:dxTabPanelOptions.swipeEnabled]
     */
    swipeEnabled?: boolean;
    /**
     * [descr:dxTabPanelOptions.tabsPosition]
     */
    tabsPosition?: common.Position;
  }
  /**
   * [descr:dxTabs]
   */
  export class dxTabs<
    TItem extends dxTabs.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<
    dxTabs.Properties<TItem, TKey>,
    TItem,
    TKey
    > {}
  namespace dxTabs {
    /**
     * [descr:_ui_tabs_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabs<TItem, TKey>>;
    /**
     * [descr:_ui_tabs_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabs<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_tabs_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxTabs<TItem, TKey>>;
    /**
     * [descr:_ui_tabs_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTabs<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tabs_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTabs<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tabs_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTabs<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type ItemLike = string | Item | any;
    /**
     * [descr:_ui_tabs_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabs<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tabs_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabs<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxTabsBaseOptions<dxTabs<TItem, TKey>, TItem, TKey>;
    /**
     * [descr:_ui_tabs_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTabs<TItem, TKey>> &
    CollectionWidget.SelectionChangedInfo<TItem>;
  }
  /**
   * [descr:dxTabsOptions]
   * @deprecated [depNote:dxTabsOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTabsBaseOptions<
    TComponent extends dxTabs<TItem, TKey> = dxTabs,
    TItem extends dxTabs.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<TComponent, TItem, TKey> {
    /**
     * [descr:dxTabsOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxTabsOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxTabsOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxTabsOptions.iconPosition]
     */
    iconPosition?: common.TabsIconPosition;
    /**
     * [descr:dxTabsOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxTabsOptions.orientation]
     */
    orientation?: common.Orientation;
    /**
     * [descr:dxTabsOptions.repaintChangesOnly]
     */
    repaintChangesOnly?: boolean;
    /**
     * [descr:dxTabsOptions.scrollByContent]
     */
    scrollByContent?: boolean;
    /**
     * [descr:dxTabsOptions.scrollingEnabled]
     */
    scrollingEnabled?: boolean;
    /**
     * [descr:dxTabsOptions.selectionMode]
     */
    selectionMode?: common.SingleOrMultiple;
    /**
     * [descr:dxTabsOptions.showNavButtons]
     */
    showNavButtons?: boolean;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTabsItem extends CollectionWidgetItem {
    /**
     * [descr:dxTabsItem.badge]
     */
    badge?: string;
    /**
     * [descr:dxTabsItem.icon]
     */
    icon?: string;
  }
  /**
   * [descr:dxTabsOptions]
   * @deprecated [depNote:dxTabsOptions]
   */
  export interface dxTabsOptions<
    TItem extends dxTabs.ItemLike = any,
    TKey = any,
  > extends dxTabs.Properties<TItem, TKey> {}
  /**
   * [descr:dxTagBox]
   */
  export class dxTagBox extends dxSelectBox<dxTagBoxOptions> {}
  namespace dxTagBox {
    /**
     * [descr:_ui_tag_box_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxTagBox
    >;
    /**
     * [descr:_ui_tag_box_ClosedEvent]
     */
    export type ClosedEvent = events.EventInfo<dxTagBox>;
    /**
     * [descr:_ui_tag_box_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxTagBox>;
    /**
     * [descr:_ui_tag_box_CustomItemCreatingEvent]
     */
    export type CustomItemCreatingEvent =
      events.EventInfo<dxTagBox> &
      dxSelectBox.CustomItemCreatingInfo;
    /**
     * [descr:_ui_tag_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxTagBox>;
    export type DropDownButtonTemplateData =
      dxDropDownEditor.DropDownButtonTemplateDataModel;
    /**
     * [descr:_ui_tag_box_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxTagBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_tag_box_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxTagBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_tag_box_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxTagBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_tag_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxTagBox>;
    /**
     * [descr:_ui_tag_box_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxTagBox,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_tag_box_ItemClickEvent]
     */
    export type ItemClickEvent = events.NativeEventInfo<dxTagBox> &
    events.ItemInfo;
    /**
     * [descr:_ui_tag_box_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxTagBox,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxTagBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_tag_box_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxTagBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_tag_box_MultiTagPreparingEvent]
     */
    export type MultiTagPreparingEvent = events.Cancelable &
    events.EventInfo<dxTagBox> & {
      /**
         * [descr:_ui_tag_box_MultiTagPreparingEvent.multiTagElement]
         */
      readonly multiTagElement: core.DxElement;
      /**
         * [descr:_ui_tag_box_MultiTagPreparingEvent.selectedItems]
         */
      readonly selectedItems?: (string | number | any)[];
      /**
         * [descr:_ui_tag_box_MultiTagPreparingEvent.text]
         */
      text?: string;
    };
    /**
     * [descr:_ui_tag_box_OpenedEvent]
     */
    export type OpenedEvent = events.EventInfo<dxTagBox>;
    /**
     * [descr:_ui_tag_box_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxTagBox> &
    events.ChangedOptionInfo;
    export type Properties = dxTagBoxOptions;
    /**
     * [descr:_ui_tag_box_SelectAllValueChangedEvent]
     */
    export type SelectAllValueChangedEvent =
      events.EventInfo<dxTagBox> & {
        /**
         * [descr:_ui_tag_box_SelectAllValueChangedEvent.value]
         */
        readonly value: boolean;
      };
    /**
     * [descr:_ui_tag_box_SelectionChangedEvent]
     */
    export type SelectionChangedEvent = events.EventInfo<dxTagBox> &
    CollectionWidget.SelectionChangedInfo;
    /**
     * [descr:_ui_tag_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxTagBox,
    KeyboardEvent | MouseEvent | PointerEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxTagBoxOptions]
   * @deprecated [depNote:dxTagBoxOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTagBoxOptions
    extends Pick<
    dxSelectBoxOptions<dxTagBox>,
    Exclude<keyof dxSelectBoxOptions<dxTagBox>, 'onSelectionChanged'>
    > {
    /**
     * [descr:dxTagBoxOptions.applyValueMode]
     */
    applyValueMode?: common.ApplyValueMode;
    /**
     * [descr:dxTagBoxOptions.hideSelectedItems]
     */
    hideSelectedItems?: boolean;
    /**
     * [descr:dxTagBoxOptions.maxDisplayedTags]
     */
    maxDisplayedTags?: number;
    /**
     * [descr:dxTagBoxOptions.multiline]
     */
    multiline?: boolean;
    /**
     * [descr:dxTagBoxOptions.onMultiTagPreparing]
     */
    onMultiTagPreparing?: (
      e: dxTagBox.MultiTagPreparingEvent
    ) => void;
    /**
     * [descr:dxTagBoxOptions.onSelectAllValueChanged]
     */
    onSelectAllValueChanged?: (
      e: dxTagBox.SelectAllValueChangedEvent
    ) => void;
    /**
     * [descr:dxTagBoxOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxTagBox.SelectionChangedEvent
    ) => void;
    /**
     * [descr:dxTagBoxOptions.selectAllMode]
     */
    selectAllMode?: common.SelectAllMode;
    /**
     * [descr:dxTagBoxOptions.selectedItems]
     */
    selectedItems?: (string | number | any)[];
    /**
     * [descr:dxTagBoxOptions.selectAllText]
     */
    selectAllText?: string;
    /**
     * [descr:dxTagBoxOptions.showDropDownButton]
     */
    showDropDownButton?: boolean;
    /**
     * [descr:dxTagBoxOptions.maxFilterQueryLength]
     */
    maxFilterQueryLength?: number;
    /**
     * [descr:dxTagBoxOptions.showMultiTagOnly]
     */
    showMultiTagOnly?: boolean;
    /**
     * [descr:dxTagBoxOptions.tagTemplate]
     */
    tagTemplate?:
    | core.template
    | ((
      itemData: any,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxTagBoxOptions.value]
     */
    value?: (string | number | any)[];
  }
  /**
   * [descr:dxTextArea]
   */
  export class dxTextArea extends dxTextBox<dxTextAreaOptions> {}
  namespace dxTextArea {
    /**
     * [descr:_ui_text_area_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxTextArea
    >;
    /**
     * [descr:_ui_text_area_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxTextArea>;
    /**
     * [descr:_ui_text_area_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxTextArea,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_text_area_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxTextArea,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_text_area_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxTextArea>;
    /**
     * [descr:_ui_text_area_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxTextArea,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_text_area_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxTextArea,
    FocusEvent
    >;
    /**
     * [descr:_ui_text_area_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxTextArea,
    FocusEvent
    >;
    /**
     * [descr:_ui_text_area_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxTextArea>;
    /**
     * [descr:_ui_text_area_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxTextArea,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_text_area_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxTextArea,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxTextArea,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_text_area_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxTextArea,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_text_area_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxTextArea> &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_text_area_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxTextArea,
    ClipboardEvent
    >;
    export type Properties = dxTextAreaOptions;
    /**
     * [descr:_ui_text_area_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxTextArea,
    KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxTextAreaOptions]
   * @deprecated [depNote:dxTextAreaOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTextAreaOptions extends dxTextBoxOptions<dxTextArea> {
    /**
     * [descr:dxTextAreaOptions.autoResizeEnabled]
     */
    autoResizeEnabled?: boolean;
    /**
     * [descr:dxTextAreaOptions.maxHeight]
     */
    maxHeight?: number | string;
    /**
     * [descr:dxTextAreaOptions.minHeight]
     */
    minHeight?: number | string;
    /**
     * [descr:dxTextAreaOptions.spellcheck]
     */
    spellcheck?: boolean;
  }
  /**
   * [descr:dxTextBox]
   */
  export class dxTextBox<
    TProperties = dxTextBox.Properties,
  > extends dxTextEditor<TProperties> {}
  namespace dxTextBox {
    /**
     * [descr:_ui_text_box_ChangeEvent]
     */
    export type ChangeEvent = events.NativeEventInfo<
    dxTextBox
    >;
    /**
     * [descr:_ui_text_box_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxTextBox>;
    /**
     * [descr:_ui_text_box_CopyEvent]
     */
    export type CopyEvent = events.NativeEventInfo<
    dxTextBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_text_box_CutEvent]
     */
    export type CutEvent = events.NativeEventInfo<
    dxTextBox,
    ClipboardEvent
    >;
    /**
     * [descr:_ui_text_box_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxTextBox>;
    /**
     * [descr:_ui_text_box_EnterKeyEvent]
     */
    export type EnterKeyEvent = events.NativeEventInfo<
    dxTextBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_text_box_FocusInEvent]
     */
    export type FocusInEvent = events.NativeEventInfo<
    dxTextBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_text_box_FocusOutEvent]
     */
    export type FocusOutEvent = events.NativeEventInfo<
    dxTextBox,
    FocusEvent
    >;
    /**
     * [descr:_ui_text_box_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxTextBox>;
    /**
     * [descr:_ui_text_box_InputEvent]
     */
    export type InputEvent = events.NativeEventInfo<
    dxTextBox,
    UIEvent & { target: HTMLInputElement }
    >;
    /**
     * [descr:_ui_text_box_KeyDownEvent]
     */
    export type KeyDownEvent = events.NativeEventInfo<
    dxTextBox,
    KeyboardEvent
    >;
    export type KeyPressEvent = events.NativeEventInfo<
    dxTextBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_text_box_KeyUpEvent]
     */
    export type KeyUpEvent = events.NativeEventInfo<
    dxTextBox,
    KeyboardEvent
    >;
    /**
     * [descr:_ui_text_box_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxTextBox> &
    events.ChangedOptionInfo;
    /**
     * [descr:_ui_text_box_PasteEvent]
     */
    export type PasteEvent = events.NativeEventInfo<
    dxTextBox,
    ClipboardEvent
    >;
    export type Properties = dxTextBoxOptions<TextBoxInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface TextBoxInstance extends dxTextBox {}
    export type TextBoxType =
      | 'email'
      | 'password'
      | 'search'
      | 'tel'
      | 'text'
      | 'url';
    /**
     * [descr:_ui_text_box_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxTextBox,
    KeyboardEvent | MouseEvent | PointerEvent | TouchEvent | Event
    > &
    Editor.ValueChangedInfo;
  }
  /**
   * [descr:dxTextBoxOptions]
   * @deprecated [depNote:dxTextBoxOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTextBoxOptions<TComponent>
    extends dxTextEditorOptions<TComponent> {
    /**
     * [descr:dxTextBoxOptions.maxLength]
     */
    maxLength?: string | number;
    /**
     * [descr:dxTextBoxOptions.mode]
     */
    mode?: dxTextBox.TextBoxType;
    /**
     * [descr:dxTextBoxOptions.value]
     */
    value?: string;
  }
  /**
   * [descr:dxTextEditor]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxTextEditor<
    TProperties = dxTextEditor.Properties,
  > extends Editor<TProperties> {
    /**
     * [descr:dxTextEditor.blur()]
     */
    blur(): void;
    /**
     * [descr:dxTextEditor.focus()]
     */
    focus(): void;
    /**
     * [descr:dxTextEditor.getButton(name)]
     */
    getButton(name: string): dxButton | undefined;
  }
  namespace dxTextEditor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type Properties = dxTextEditorOptions<TextEditorInstance>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface TextEditorInstance extends dxTextEditor {}
  }
  /**
   * [descr:dxTextEditorOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTextEditorOptions<TComponent>
    extends EditorOptions<TComponent> {
    /**
     * [descr:dxTextEditorOptions.buttons]
     */
    buttons?: (| string
    | common.TextBoxPredefinedButton
    | common.TextEditorButton)[];
    /**
     * [descr:dxTextEditorOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxTextEditorOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxTextEditorOptions.inputAttr]
     */
    inputAttr?: any;
    /**
     * [descr:dxTextEditorOptions.label]
     */
    label?: string;
    /**
     * [descr:dxTextEditorOptions.labelMode]
     */
    labelMode?: common.LabelMode;
    /**
     * [descr:dxTextEditorOptions.mask]
     */
    mask?: string;
    /**
     * [descr:dxTextEditorOptions.maskChar]
     */
    maskChar?: string;
    /**
     * [descr:dxTextEditorOptions.maskInvalidMessage]
     */
    maskInvalidMessage?: string;
    /**
     * [descr:dxTextEditorOptions.maskRules]
     */
    maskRules?: any;
    /**
     * [descr:dxTextEditorOptions.name]
     */
    name?: string;
    /**
     * [descr:dxTextEditorOptions.onChange]
     */
    onChange?: (
      e: events.NativeEventInfo<TComponent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onCopy]
     */
    onCopy?: (
      e: events.NativeEventInfo<TComponent, ClipboardEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onCut]
     */
    onCut?: (
      e: events.NativeEventInfo<TComponent, ClipboardEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onEnterKey]
     */
    onEnterKey?: (
      e: events.NativeEventInfo<TComponent, KeyboardEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onFocusIn]
     */
    onFocusIn?: (
      e: events.NativeEventInfo<TComponent, FocusEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onFocusOut]
     */
    onFocusOut?: (
      e: events.NativeEventInfo<TComponent, FocusEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onInput]
     */
    onInput?: (
      e: events.NativeEventInfo<TComponent, UIEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onKeyDown]
     */
    onKeyDown?: (
      e: events.NativeEventInfo<TComponent, KeyboardEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onKeyUp]
     */
    onKeyUp?: (
      e: events.NativeEventInfo<TComponent, KeyboardEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.onPaste]
     */
    onPaste?: (
      e: events.NativeEventInfo<TComponent, ClipboardEvent>
    ) => void;
    /**
     * [descr:dxTextEditorOptions.placeholder]
     */
    placeholder?: string;
    /**
     * [descr:dxTextEditorOptions.showClearButton]
     */
    showClearButton?: boolean;
    /**
     * [descr:dxTextEditorOptions.showMaskMode]
     */
    showMaskMode?: common.MaskMode;
    /**
     * [descr:dxTextEditorOptions.spellcheck]
     */
    spellcheck?: boolean;
    /**
     * [descr:dxTextEditorOptions.stylingMode]
     */
    stylingMode?: common.EditorStyle;
    /**
     * [descr:dxTextEditorOptions.text]
     */
    text?: string;
    /**
     * [descr:dxTextEditorOptions.useMaskedValue]
     */
    useMaskedValue?: boolean;
    /**
     * [descr:dxTextEditorOptions.value]
     */
    value?: any;
    /**
     * [descr:dxTextEditorOptions.valueChangeEvent]
     */
    valueChangeEvent?: string;
  }
  /**
   * [descr:dxTileView]
   */
  export class dxTileView<
    TItem extends dxTileView.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<dxTileViewOptions<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxTileView.scrollPosition()]
     */
    scrollPosition(): number;
  }
  namespace dxTileView {
    /**
     * [descr:_ui_tile_view_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTileView<TItem, TKey>>;
    /**
     * [descr:_ui_tile_view_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTileView<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_tile_view_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxTileView<TItem, TKey>>;
    /**
     * [descr:_ui_tile_view_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTileView<TItem, TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tile_view_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTileView<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tile_view_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTileView<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    /**
     * [descr:_ui_tile_view_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTileView<TItem, TKey>> &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_tile_view_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxTileView<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxTileViewOptions<TItem, TKey>;
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTileViewItem extends CollectionWidgetItem {
    /**
     * [descr:dxTileViewItem.heightRatio]
     */
    heightRatio?: number;
    /**
     * [descr:dxTileViewItem.widthRatio]
     */
    widthRatio?: number;
  }
  /**
   * [descr:dxTileViewOptions]
   * @deprecated [depNote:dxTileViewOptions]
   */
  export interface dxTileViewOptions<
    TItem extends dxTileView.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<dxTileView<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxTileViewOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:dxTileViewOptions.baseItemHeight]
     */
    baseItemHeight?: number;
    /**
     * [descr:dxTileViewOptions.baseItemWidth]
     */
    baseItemWidth?: number;
    /**
     * [descr:dxTileViewOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxTileViewOptions.direction]
     */
    direction?: common.Orientation;
    /**
     * [descr:dxTileViewOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:dxTileViewOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxTileViewOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:dxTileViewOptions.itemMargin]
     */
    itemMargin?: number;
    /**
     * [descr:dxTileViewOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxTileViewOptions.showScrollbar]
     */
    showScrollbar?: common.ScrollbarMode;
  }
  /**
   * [descr:dxToast]
   */
  export class dxToast extends dxOverlay<dxToastOptions> {}
  namespace dxToast {
    /**
     * [descr:_ui_toast_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxToast>;
    /**
     * [descr:_ui_toast_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxToast>;
    /**
     * [descr:_ui_toast_HiddenEvent]
     */
    export type HiddenEvent = events.EventInfo<dxToast>;
    /**
     * [descr:_ui_toast_HidingEvent]
     */
    export type HidingEvent = events.Cancelable &
    events.EventInfo<dxToast>;
    /**
     * [descr:_ui_toast_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxToast>;
    /**
     * [descr:_ui_toast_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxToast> &
    events.ChangedOptionInfo;
    export type Properties = dxToastOptions;
    /**
     * [descr:_ui_toast_ShowingEvent]
     */
    export type ShowingEvent = events.Cancelable &
    events.EventInfo<dxToast>;
    /**
     * [descr:_ui_toast_ShownEvent]
     */
    export type ShownEvent = events.EventInfo<dxToast>;
    export type ToastType = 'custom' | 'error' | 'info' | 'success' | 'warning';
  }
  /**
   * [descr:dxToastAnimation]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxToastAnimation extends dxOverlayAnimation {
    /**
     * [descr:dxToastOptions.animation.hide]
     */
    hide?: AnimationConfig;
    /**
     * [descr:dxToastOptions.animation.show]
     */
    show?: AnimationConfig;
  }
  /**
   * [descr:dxToastOptions]
   * @deprecated [depNote:dxToastOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxToastOptions extends dxOverlayOptions<dxToast> {
    /**
     * [descr:dxToastOptions.animation]
     */
    animation?: dxToastAnimation;
    /**
     * [descr:dxToastOptions.closeOnClick]
     */
    closeOnClick?: boolean;
    /**
     * [descr:dxToastOptions.closeOnOutsideClick]
     * @deprecated [depNote:dxToastOptions.closeOnOutsideClick]
     */
    closeOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxToastOptions.closeOnSwipe]
     */
    closeOnSwipe?: boolean;
    /**
     * [descr:dxToastOptions.displayTime]
     */
    displayTime?: number;
    /**
     * [descr:dxToastOptions.hideOnOutsideClick]
     */
    hideOnOutsideClick?:
    | boolean
    | ((
      event: events.DxEvent<
      MouseEvent | PointerEvent | TouchEvent
      >
    ) => boolean);
    /**
     * [descr:dxToastOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:dxToastOptions.maxWidth]
     */
    maxWidth?: number | string | (() => number | string);
    /**
     * [descr:dxToastOptions.message]
     */
    message?: string;
    /**
     * [descr:dxToastOptions.minWidth]
     */
    minWidth?: number | string | (() => number | string);
    /**
     * [descr:dxToastOptions.position]
     */
    position?: PositionConfig | string;
    /**
     * [descr:dxToastOptions.shading]
     */
    shading?: boolean;
    /**
     * [descr:dxToastOptions.type]
     */
    type?: dxToast.ToastType;
    /**
     * [descr:dxToastOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:dxToolbar]
   */
  export class dxToolbar<
    TItem extends dxToolbar.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<dxToolbarOptions<TItem, TKey>, TItem, TKey> {}
  namespace dxToolbar {
    /**
     * [descr:_ui_toolbar_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxToolbar<TItem, TKey>>;
    /**
     * [descr:_ui_toolbar_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxToolbar<TItem, TKey>>;
    export interface ExplicitTypes<TItem extends ItemLike, TKey> {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TItem, TKey>;
      ItemHoldEvent: ItemHoldEvent<TItem, TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_toolbar_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<dxToolbar<TItem, TKey>>;
    /**
     * [descr:_ui_toolbar_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxToolbar<TItem, TKey>,
    MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_toolbar_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxToolbar<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_toolbar_ItemHoldEvent]
     */
    export type ItemHoldEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxToolbar<TItem, TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type ItemLike = string | Item | any;
    /**
     * [descr:_ui_toolbar_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxToolbar<TItem, TKey>> &
    events.ItemInfo<TItem>;
    export type LocateInMenuMode = 'always' | 'auto' | 'never';
    /**
     * [descr:_ui_toolbar_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxToolbar<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends ItemLike = any,
      TKey = any,
    > = dxToolbarOptions<TItem, TKey>;
    export type ShowTextMode = 'always' | 'inMenu';
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxToolbarItem extends CollectionWidgetItem {
    /**
     * [descr:dxToolbarItem.cssClass]
     */
    cssClass?: string;
    /**
     * [descr:dxToolbarItem.locateInMenu]
     */
    locateInMenu?: dxToolbar.LocateInMenuMode;
    /**
     * [descr:dxToolbarItem.location]
     */
    location?: common.ToolbarItemLocation;
    /**
     * [descr:dxToolbarItem.menuItemTemplate]
     */
    menuItemTemplate?:
    | core.template
    | (() => string | core.UserDefinedElement);
    /**
     * [descr:dxToolbarItem.options]
     */
    options?: any;
    /**
     * [descr:dxToolbarItem.showText]
     */
    showText?: dxToolbar.ShowTextMode;
    /**
     * [descr:dxToolbarItem.widget]
     */
    widget?: common.ToolbarItemComponent;
  }
  /**
   * [descr:dxToolbarOptions]
   * @deprecated [depNote:dxToolbarOptions]
   */
  export interface dxToolbarOptions<
    TItem extends dxToolbar.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<dxToolbar<TItem, TKey>, TItem, TKey> {
    /**
     * [descr:dxToolbarOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<TItem, TKey> | null;
    /**
     * [descr:dxToolbarOptions.items]
     */
    items?: TItem[];
    /**
     * [descr:dxToolbarOptions.multiline]
     */
    multiline?: boolean;
    /**
     * [descr:dxToolbarOptions.menuItemTemplate]
     */
    menuItemTemplate?:
    | core.template
    | ((
      itemData: TItem,
      itemIndex: number,
      itemElement: core.DxElement
    ) => string | core.UserDefinedElement);
  }
  /**
   * [descr:dxTooltip]
   */
  export class dxTooltip extends dxPopover<dxTooltipOptions> {}
  namespace dxTooltip {
    /**
     * [descr:_ui_tooltip_ContentReadyEvent]
     */
    export type ContentReadyEvent = events.EventInfo<dxTooltip>;
    /**
     * [descr:_ui_tooltip_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxTooltip>;
    /**
     * [descr:_ui_tooltip_HiddenEvent]
     */
    export type HiddenEvent = events.EventInfo<dxTooltip>;
    /**
     * [descr:_ui_tooltip_HidingEvent]
     */
    export type HidingEvent = events.Cancelable &
    events.EventInfo<dxTooltip>;
    /**
     * [descr:_ui_tooltip_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxTooltip>;
    /**
     * [descr:_ui_tooltip_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxTooltip> &
    events.ChangedOptionInfo;
    export type Properties = dxTooltipOptions;
    /**
     * [descr:_ui_tooltip_ShowingEvent]
     */
    export type ShowingEvent = events.Cancelable &
    events.EventInfo<dxTooltip>;
    /**
     * [descr:_ui_tooltip_ShownEvent]
     */
    export type ShownEvent = events.EventInfo<dxTooltip>;
  }
  /**
   * [descr:dxTooltipOptions]
   * @deprecated [depNote:dxTooltipOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTooltipOptions extends dxPopoverOptions<dxTooltip> {}
  /**
   * [descr:dxTrackBar]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxTrackBar<TProperties> extends Editor<TProperties> {}
  /**
   * [descr:dxTrackBarOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTrackBarOptions<TComponent>
    extends EditorOptions<TComponent> {
    /**
     * [descr:dxTrackBarOptions.max]
     */
    max?: number;
    /**
     * [descr:dxTrackBarOptions.min]
     */
    min?: number;
  }
  /**
   * [descr:dxTreeList]
   */
  export class dxTreeList<TRowData = any, TKey = any>
    extends Widget<dxTreeListOptions<TRowData, TKey>>
    implements common.grids.GridBase<TRowData, TKey> {
    /**
     * [descr:dxTreeList.addColumn(columnOptions)]
     */
    addColumn(
      columnOptions: dxTreeList.Column<TRowData, TKey> | string
    ): void;
    /**
     * [descr:dxTreeList.addRow()]
     */
    addRow(): core.utils.DxPromise;
    /**
     * [descr:dxTreeList.addRow(parentId)]
     */
    addRow(parentId: TKey): core.utils.DxPromise;
    /**
     * [descr:dxTreeList.collapseRow(key)]
     */
    collapseRow(key: TKey): core.utils.DxPromise;
    /**
     * [descr:dxTreeList.expandRow(key)]
     */
    expandRow(key: TKey): core.utils.DxPromise;
    /**
     * [descr:dxTreeList.forEachNode(callback)]
     */
    forEachNode(callback: Function): void;
    /**
     * [descr:dxTreeList.forEachNode(nodes, callback)]
     */
    forEachNode(
      nodes: dxTreeList.Node<TRowData, TKey>[],
      callback: Function
    ): void;
    /**
     * [descr:dxTreeList.getNodeByKey(key)]
     */
    getNodeByKey(key: TKey): dxTreeList.Node<TRowData, TKey>;
    /**
     * [descr:dxTreeList.getRootNode()]
     */
    getRootNode(): dxTreeList.Node<TRowData, TKey>;
    /**
     * [descr:dxTreeList.getSelectedRowKeys()]
     */
    getSelectedRowKeys(): TKey[];
    /**
     * [descr:dxTreeList.getSelectedRowKeys(mode)]
     */
    getSelectedRowKeys(mode: string): TKey[];
    /**
     * [descr:dxTreeList.getSelectedRowsData()]
     */
    getSelectedRowsData(): TRowData[];
    /**
     * [descr:dxTreeList.getSelectedRowsData(mode)]
     */
    getSelectedRowsData(mode: string): TRowData[];
    /**
     * [descr:dxTreeList.getVisibleColumns()]
     */
    getVisibleColumns(): dxTreeList.Column<TRowData, TKey>[];
    /**
     * [descr:dxTreeList.getVisibleColumns(headerLevel)]
     */
    getVisibleColumns(
      headerLevel: number
    ): dxTreeList.Column<TRowData, TKey>[];
    /**
     * [descr:dxTreeList.getVisibleRows()]
     */
    getVisibleRows(): dxTreeList.Row<TRowData, TKey>[];
    /**
     * [descr:dxTreeList.isRowExpanded(key)]
     */
    isRowExpanded(key: TKey): boolean;
    /**
     * [descr:dxTreeList.loadDescendants()]
     */
    loadDescendants(): core.utils.DxPromise;
    /**
     * [descr:dxTreeList.loadDescendants(keys)]
     */
    loadDescendants(keys: TKey[]): core.utils.DxPromise;
    /**
     * [descr:dxTreeList.loadDescendants(keys, childrenOnly)]
     */
    loadDescendants(
      keys: TKey[],
      childrenOnly: boolean
    ): core.utils.DxPromise;

    beginCustomLoading(messageText: string): void;
    byKey(key: TKey): core.utils.DxPromise<TRowData>;
    cancelEditData(): void;
    cellValue(rowIndex: number, dataField: string): any;
    cellValue(rowIndex: number, dataField: string, value: any): void;
    cellValue(rowIndex: number, visibleColumnIndex: number): any;
    cellValue(rowIndex: number, visibleColumnIndex: number, value: any): void;
    clearFilter(): void;
    clearFilter(filterName: string): void;
    clearSelection(): void;
    clearSorting(): void;
    closeEditCell(): void;
    collapseAdaptiveDetailRow(): void;
    columnCount(): number;
    columnOption(id: number | string): any;
    columnOption(id: number | string, optionName: string): any;
    columnOption(
      id: number | string,
      optionName: string,
      optionValue: any
    ): void;
    columnOption(id: number | string, options: any): void;
    deleteColumn(id: number | string): void;
    deleteRow(rowIndex: number): void;
    deselectAll(): core.utils.DxPromise;
    deselectRows(
      keys: TKey[]
    ): core.utils.DxPromise<TRowData[]>;
    editCell(rowIndex: number, dataField: string): void;
    editCell(rowIndex: number, visibleColumnIndex: number): void;
    editRow(rowIndex: number): void;
    endCustomLoading(): void;
    expandAdaptiveDetailRow(key: TKey): void;
    filter(): any;
    filter(filterExpr: any): void;
    focus(): void;
    focus(element: core.UserDefinedElement): void;
    getCellElement(
      rowIndex: number,
      dataField: string
    ): core.DxElement | undefined;
    getCellElement(
      rowIndex: number,
      visibleColumnIndex: number
    ): core.DxElement | undefined;
    getCombinedFilter(): any;
    getCombinedFilter(returnDataField: boolean): any;
    getDataSource(): data.DataSource<TRowData, TKey>;
    getKeyByRowIndex(rowIndex: number): TKey | undefined;
    getRowElement(
      rowIndex: number
    ): core.UserDefinedElementsArray | undefined;
    getRowIndexByKey(key: TKey): number;
    getScrollable(): dxTreeList.Scrollable;
    getVisibleColumnIndex(id: number | string): number;
    hasEditData(): boolean;
    hideColumnChooser(): void;
    isAdaptiveDetailRowExpanded(key: TKey): boolean;
    isRowFocused(key: TKey): boolean;
    isRowSelected(key: TKey): boolean;
    keyOf(obj: TRowData): TKey;
    navigateToRow(key: TKey): core.utils.DxPromise;
    pageCount(): number;
    pageIndex(): number;
    pageIndex(newIndex: number): core.utils.DxPromise;
    pageSize(): number;
    pageSize(value: number): void;
    refresh(): core.utils.DxPromise;
    refresh(changesOnly: boolean): core.utils.DxPromise;
    repaintRows(rowIndexes: number[]): void;
    saveEditData(): core.utils.DxPromise;
    searchByText(text: string): void;
    selectAll(): core.utils.DxPromise;
    selectRows(
      keys: TKey[],
      preserve: boolean
    ): core.utils.DxPromise<TRowData[]>;
    selectRowsByIndexes(
      indexes: number[]
    ): core.utils.DxPromise<TRowData[]>;
    showColumnChooser(): void;
    state(): any;
    state(state: any): void;
    undeleteRow(rowIndex: number): void;
    updateDimensions(): void;
  }
  namespace dxTreeList {
    /**
     * [descr:_ui_tree_list_AdaptiveDetailRowPreparingEvent]
     */
    export type AdaptiveDetailRowPreparingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.AdaptiveDetailRowPreparingInfo;
    /**
     * [descr:_ui_tree_list_CellClickEvent]
     */
    export type CellClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTreeList<TRowData, TKey>,
    PointerEvent | MouseEvent
    > &
    CellInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_CellDblClickEvent]
     */
    export type CellDblClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTreeList<TRowData, TKey>,
    PointerEvent | MouseEvent
    > &
    CellInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_CellHoverChangedEvent]
     */
    export type CellHoverChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    CellInfo<TRowData, TKey> & {
      /**
         * [descr:_ui_tree_list_CellHoverChangedEvent.eventType]
         */
      readonly eventType: string;
    };
    /**
     * [descr:CellInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface CellInfo<TRowData = any, TKey = any> {
      /**
       * [descr:CellInfo.data]
       */
      readonly data: TRowData;
      /**
       * [descr:CellInfo.key]
       */
      readonly key: TKey;
      /**
       * [descr:CellInfo.value]
       */
      readonly value?: any;
      /**
       * [descr:CellInfo.displayValue]
       */
      readonly displayValue?: any;
      /**
       * [descr:CellInfo.text]
       */
      readonly text: string;
      /**
       * [descr:CellInfo.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:CellInfo.column]
       */
      readonly column: Column<TRowData, TKey>;
      /**
       * [descr:CellInfo.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:CellInfo.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:CellInfo.cellElement]
       */
      readonly cellElement: core.DxElement;
      /**
       * [descr:CellInfo.row]
       */
      readonly row: Row<TRowData, TKey>;
    }
    /**
     * [descr:_ui_tree_list_CellPreparedEvent]
     */
    export type CellPreparedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    CellInfo<TRowData, TKey> & {
      /**
         * [descr:_ui_tree_list_CellPreparedEvent.isSelected]
         */
      readonly isSelected?: boolean;
      /**
         * [descr:_ui_tree_list_CellPreparedEvent.isExpanded]
         */
      readonly isExpanded?: boolean;
      /**
         * [descr:_ui_tree_list_CellPreparedEvent.isNewRow]
         */
      readonly isNewRow?: boolean;
      /**
         * [descr:_ui_tree_list_CellPreparedEvent.watch]
         */
      readonly watch?: Function;
      /**
         * [descr:_ui_tree_list_CellPreparedEvent.oldValue]
         */
      readonly oldValue?: any;
    };
    export type Column<TRowData = any, TKey = any> = dxTreeListColumn<
    TRowData,
    TKey
    >;
    export type ColumnButton<
      TRowData = any,
      TKey = any,
    > = dxTreeListColumnButton<TRowData, TKey>;
    export type ColumnButtonClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTreeList<TRowData, TKey>,
    PointerEvent | MouseEvent
    > & {
      row?: Row<TRowData, TKey>;
      column?: Column<TRowData, TKey>;
    };
    export interface ColumnButtonTemplateData<TRowData = any, TKey = any> {
      readonly component: dxTreeList<TRowData, TKey>;
      readonly data: TRowData;
      readonly key: TKey;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly rowIndex: number;
      readonly rowType: string;
      readonly row: Row<TRowData, TKey>;
    }
    export interface ColumnCellTemplateData<TRowData = any, TKey = any> {
      readonly data: TRowData;
      readonly component: dxTreeList<TRowData, TKey>;
      readonly value?: any;
      readonly oldValue?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    }
    export interface ColumnEditCellTemplateData<TRowData = any, TKey = any> {
      readonly setValue?: any;
      readonly data: TRowData;
      readonly component: dxTreeList<TRowData, TKey>;
      readonly value?: any;
      readonly displayValue?: any;
      readonly text: string;
      readonly columnIndex: number;
      readonly rowIndex: number;
      readonly column: Column<TRowData, TKey>;
      readonly row: Row<TRowData, TKey>;
      readonly rowType: string;
      readonly watch?: Function;
    }
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ColumnHeaderCellTemplateData<TRowData = any, TKey = any> {
      readonly component: dxTreeList<TRowData, TKey>;
      readonly columnIndex: number;
      readonly column: Column<TRowData, TKey>;
    }
    /**
     * [descr:_ui_tree_list_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>>;
    /**
     * [descr:_ui_tree_list_ContextMenuPreparingEvent]
     */
    export type ContextMenuPreparingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> & {
      /**
       * [descr:_ui_tree_list_ContextMenuPreparingEvent.items]
       */
      items?: any[];
      /**
       * [descr:_ui_tree_list_ContextMenuPreparingEvent.target]
       */
      readonly target: string;
      /**
       * [descr:_ui_tree_list_ContextMenuPreparingEvent.targetElement]
       */
      readonly targetElement: core.DxElement;
      /**
       * [descr:_ui_tree_list_ContextMenuPreparingEvent.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:_ui_tree_list_ContextMenuPreparingEvent.column]
       */
      readonly column?: Column<TRowData, TKey>;
      /**
       * [descr:_ui_tree_list_ContextMenuPreparingEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_tree_list_ContextMenuPreparingEvent.row]
       */
      readonly row?: Row<TRowData, TKey>;
    };
    /**
     * [descr:_ui_tree_list_DataErrorOccurredEvent]
     */
    export type DataErrorOccurredEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.DataErrorOccurredInfo;
    /**
     * [descr:_ui_tree_list_DisposingEvent]
     */
    export type DisposingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>>;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxTreeListToolbar = Toolbar;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxTreeListToolbarItem = ToolbarItem;
    /**
     * [descr:_ui_tree_list_EditCanceledEvent]
     */
    export type EditCanceledEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.DataChangeInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_EditCancelingEvent]
     */
    export type EditCancelingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.DataChangeInfo<TRowData, TKey>;
    /**
     * [descr:dxTreeListEditing]
     */
    export interface Editing<TRowData = any, TKey = any>
      extends common.grids.EditingBase<TRowData, TKey> {
      /**
       * [descr:dxTreeListOptions.editing.allowAdding]
       */
      allowAdding?:
      | boolean
      | ((options: {
        readonly component: dxTreeList<TRowData, TKey>;
        readonly row?: Row<TRowData, TKey>;
      }) => boolean);
      /**
       * [descr:dxTreeListOptions.editing.allowDeleting]
       */
      allowDeleting?:
      | boolean
      | ((options: {
        readonly component: dxTreeList<TRowData, TKey>;
        readonly row?: Row<TRowData, TKey>;
      }) => boolean);
      /**
       * [descr:dxTreeListOptions.editing.allowUpdating]
       */
      allowUpdating?:
      | boolean
      | ((options: {
        readonly component: dxTreeList<TRowData, TKey>;
        readonly row?: Row<TRowData, TKey>;
      }) => boolean);
      /**
       * [descr:dxTreeListOptions.editing.texts]
       */
      texts?: EditingTexts;
    }
    /**
     * [descr:_ui_tree_list_EditingStartEvent]
     */
    export type EditingStartEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxTreeList<TRowData, TKey>> & {
      /**
         * [descr:_ui_tree_list_EditingStartEvent.data]
         */
      readonly data: TRowData;
      /**
         * [descr:_ui_tree_list_EditingStartEvent.key]
         */
      readonly key: TKey;
      /**
         * [descr:_ui_tree_list_EditingStartEvent.column]
         */
      readonly column: Column<TRowData, TKey>;
    };
    /**
     * [descr:dxTreeListEditingTexts]
     */
    export type EditingTexts = common.grids.EditingTextsBase & {
      /**
       * [descr:dxTreeListOptions.editing.texts.addRowToNode]
       */
      addRowToNode?: string;
    };
    /**
     * [descr:_ui_tree_list_EditorPreparedEvent]
     */
    export type EditorPreparedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> & {
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.parentType]
       */
      readonly parentType: string;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.value]
       */
      readonly value?: any;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.setValue]
       */
      readonly setValue?: any;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.updateValueTimeout]
       */
      readonly updateValueTimeout?: number;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.width]
       */
      readonly width?: number;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.disabled]
       */
      readonly disabled: boolean;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.rtlEnabled]
       */
      readonly rtlEnabled: boolean;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.editorElement]
       */
      readonly editorElement: core.DxElement;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.readOnly]
       */
      readonly readOnly: boolean;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.dataField]
       */
      readonly dataField?: string;
      /**
       * [descr:_ui_tree_list_EditorPreparedEvent.row]
       */
      readonly row?: Row<TRowData, TKey>;
    };
    /**
     * [descr:_ui_tree_list_EditorPreparingEvent]
     */
    export type EditorPreparingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxTreeList<TRowData, TKey>> & {
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.parentType]
         */
      readonly parentType: string;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.value]
         */
      readonly value?: any;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.setValue]
         */
      readonly setValue?: any;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.updateValueTimeout]
         */
      updateValueTimeout?: number;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.width]
         */
      readonly width?: number;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.disabled]
         */
      readonly disabled: boolean;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.rtlEnabled]
         */
      readonly rtlEnabled: boolean;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.editorElement]
         */
      readonly editorElement: core.DxElement;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.readOnly]
         */
      readonly readOnly: boolean;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.editorName]
         */
      editorName: string;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.editorOptions]
         */
      editorOptions: any;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.dataField]
         */
      readonly dataField?: string;
      /**
         * [descr:_ui_tree_list_EditorPreparingEvent.row]
         */
      readonly row?: Row<TRowData, TKey>;
    };
    export interface ExplicitTypes<TRowData, TKey> {
      AdaptiveDetailRowPreparingEvent: AdaptiveDetailRowPreparingEvent<
      TRowData,
      TKey
      >;
      CellClickEvent: CellClickEvent<TRowData, TKey>;
      CellDblClickEvent: CellDblClickEvent<TRowData, TKey>;
      CellHoverChangedEvent: CellHoverChangedEvent<TRowData, TKey>;
      CellPreparedEvent: CellPreparedEvent<TRowData, TKey>;
      ColumnButtonClickEvent: ColumnButtonClickEvent<TRowData, TKey>;
      ColumnButtonTemplateData: ColumnButtonTemplateData<TRowData, TKey>;
      ColumnCellTemplateData: ColumnCellTemplateData<TRowData, TKey>;
      ColumnEditCellTemplateData: ColumnEditCellTemplateData<TRowData, TKey>;
      ContentReadyEvent: ContentReadyEvent<TRowData, TKey>;
      ContextMenuPreparingEvent: ContextMenuPreparingEvent<TRowData, TKey>;
      DataErrorOccurredEvent: DataErrorOccurredEvent<TRowData, TKey>;
      DisposingEvent: DisposingEvent<TRowData, TKey>;
      EditCanceledEvent: EditCanceledEvent<TRowData, TKey>;
      EditCancelingEvent: EditCancelingEvent<TRowData, TKey>;
      Editing: Editing<TRowData, TKey>;
      EditingStartEvent: EditingStartEvent<TRowData, TKey>;
      EditorPreparedEvent: EditorPreparedEvent<TRowData, TKey>;
      EditorPreparingEvent: EditorPreparingEvent<TRowData, TKey>;
      FocusedCellChangedEvent: FocusedCellChangedEvent<TRowData, TKey>;
      FocusedCellChangingEvent: FocusedCellChangingEvent<TRowData, TKey>;
      FocusedRowChangedEvent: FocusedRowChangedEvent<TRowData, TKey>;
      FocusedRowChangingEvent: FocusedRowChangingEvent<TRowData, TKey>;
      InitializedEvent: InitializedEvent<TRowData, TKey>;
      InitNewRowEvent: InitNewRowEvent<TRowData, TKey>;
      KeyDownEvent: KeyDownEvent<TRowData, TKey>;
      NodesInitializedEvent: NodesInitializedEvent<TRowData, TKey>;
      OptionChangedEvent: OptionChangedEvent<TRowData, TKey>;
      Properties: Properties<TRowData, TKey>;
      RowClickEvent: RowClickEvent<TRowData, TKey>;
      RowCollapsedEvent: RowCollapsedEvent<TRowData, TKey>;
      RowCollapsingEvent: RowCollapsingEvent<TRowData, TKey>;
      RowDblClickEvent: RowDblClickEvent<TRowData, TKey>;
      RowDraggingAddEvent: RowDraggingAddEvent<TRowData, TKey>;
      RowDraggingChangeEvent: RowDraggingChangeEvent<TRowData, TKey>;
      RowDraggingEndEvent: RowDraggingEndEvent<TRowData, TKey>;
      RowDraggingMoveEvent: RowDraggingMoveEvent<TRowData, TKey>;
      RowDraggingRemoveEvent: RowDraggingRemoveEvent<TRowData, TKey>;
      RowDraggingReorderEvent: RowDraggingReorderEvent<TRowData, TKey>;
      RowDraggingStartEvent: RowDraggingStartEvent<TRowData, TKey>;
      RowDraggingTemplateData: common.grids.RowDraggingTemplateData<TRowData>;
      RowExpandedEvent: RowExpandedEvent<TRowData, TKey>;
      RowExpandingEvent: RowExpandingEvent<TRowData, TKey>;
      RowInsertedEvent: RowInsertedEvent<TRowData, TKey>;
      RowInsertingEvent: RowInsertingEvent<TRowData, TKey>;
      RowPreparedEvent: RowPreparedEvent<TRowData, TKey>;
      RowRemovedEvent: RowRemovedEvent<TRowData, TKey>;
      RowRemovingEvent: RowRemovingEvent<TRowData, TKey>;
      RowUpdatedEvent: RowUpdatedEvent<TRowData, TKey>;
      RowUpdatingEvent: RowUpdatingEvent<TRowData, TKey>;
      RowValidatingEvent: RowValidatingEvent<TRowData, TKey>;
      SavedEvent: SavedEvent<TRowData, TKey>;
      SavingEvent: SavingEvent<TRowData, TKey>;
      Scrolling: Scrolling;
      Selection: Selection;
      SelectionChangedEvent: SelectionChangedEvent<TRowData, TKey>;
      Toolbar: Toolbar;
      ToolbarItem: ToolbarItem;
      ToolbarPreparingEvent: ToolbarPreparingEvent<TRowData, TKey>;
    }
    /**
     * [descr:_ui_tree_list_FocusedCellChangedEvent]
     */
    export type FocusedCellChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> & {
      /**
       * [descr:_ui_tree_list_FocusedCellChangedEvent.cellElement]
       */
      readonly cellElement: core.DxElement;
      /**
       * [descr:_ui_tree_list_FocusedCellChangedEvent.columnIndex]
       */
      readonly columnIndex: number;
      /**
       * [descr:_ui_tree_list_FocusedCellChangedEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_tree_list_FocusedCellChangedEvent.row]
       */
      readonly row: Row<TRowData, TKey>;
      /**
       * [descr:_ui_tree_list_FocusedCellChangedEvent.column]
       */
      readonly column: Column<TRowData, TKey>;
    };
    /**
     * [descr:_ui_tree_list_FocusedCellChangingEvent]
     */
    export type FocusedCellChangingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.NativeEventInfo<
    dxTreeList<TRowData, TKey>,
    KeyboardEvent | PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_tree_list_FocusedCellChangingEvent.cellElement]
         */
      readonly cellElement: core.DxElement;
      /**
         * [descr:_ui_tree_list_FocusedCellChangingEvent.prevColumnIndex]
         */
      readonly prevColumnIndex: number;
      /**
         * [descr:_ui_tree_list_FocusedCellChangingEvent.prevRowIndex]
         */
      readonly prevRowIndex: number;
      /**
         * [descr:_ui_tree_list_FocusedCellChangingEvent.newColumnIndex]
         */
      newColumnIndex: number;
      /**
         * [descr:_ui_tree_list_FocusedCellChangingEvent.newRowIndex]
         */
      newRowIndex: number;
      /**
         * [descr:_ui_tree_list_FocusedCellChangingEvent.rows]
         */
      readonly rows: Row<TRowData, TKey>[];
      /**
         * [descr:_ui_tree_list_FocusedCellChangingEvent.columns]
         */
      readonly columns: Column<TRowData, TKey>[];
      /**
         * [descr:_ui_tree_list_FocusedCellChangingEvent.isHighlighted]
         */
      isHighlighted: boolean;
    };
    /**
     * [descr:_ui_tree_list_FocusedRowChangedEvent]
     */
    export type FocusedRowChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> & {
      /**
       * [descr:_ui_tree_list_FocusedRowChangedEvent.rowElement]
       */
      readonly rowElement: core.DxElement;
      /**
       * [descr:_ui_tree_list_FocusedRowChangedEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_tree_list_FocusedRowChangedEvent.row]
       */
      readonly row: Row<TRowData, TKey>;
    };
    /**
     * [descr:_ui_tree_list_FocusedRowChangingEvent]
     */
    export type FocusedRowChangingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.NativeEventInfo<
    dxTreeList<TRowData, TKey>,
    KeyboardEvent | PointerEvent | MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_ui_tree_list_FocusedRowChangingEvent.rowElement]
         */
      readonly rowElement: core.DxElement;
      /**
         * [descr:_ui_tree_list_FocusedRowChangingEvent.prevRowIndex]
         */
      readonly prevRowIndex: number;
      /**
         * [descr:_ui_tree_list_FocusedRowChangingEvent.newRowIndex]
         */
      newRowIndex: number;
      /**
         * [descr:_ui_tree_list_FocusedRowChangingEvent.rows]
         */
      readonly rows: Row<TRowData, TKey>[];
    };
    /**
     * [descr:_ui_tree_list_InitializedEvent]
     */
    export type InitializedEvent<
      TRowData = any,
      TKey = any,
    > = events.InitializedEventInfo<dxTreeList<TRowData, TKey>>;
    /**
     * [descr:_ui_tree_list_InitNewRowEvent]
     */
    export type InitNewRowEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.NewRowInfo<TRowData>;
    /**
     * [descr:_ui_tree_list_KeyDownEvent]
     */
    export type KeyDownEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTreeList<TRowData, TKey>,
    KeyboardEvent
    > &
    common.grids.KeyDownInfo;
    /**
     * [descr:dxTreeListNode]
     */
    export interface Node<TRowData = any, TKey = any> {
      /**
       * [descr:dxTreeListNode.children]
       */
      children?: Node<TRowData, TKey>[];
      /**
       * [descr:dxTreeListNode.data]
       */
      data?: TRowData;
      /**
       * [descr:dxTreeListNode.hasChildren]
       */
      hasChildren?: boolean;
      /**
       * [descr:dxTreeListNode.key]
       */
      key: TKey;
      /**
       * [descr:dxTreeListNode.level]
       */
      level: number;
      /**
       * [descr:dxTreeListNode.parent]
       */
      parent?: Node<TRowData, TKey>;
      /**
       * [descr:dxTreeListNode.visible]
       */
      visible?: boolean;
    }
    /**
     * [descr:_ui_tree_list_NodesInitializedEvent]
     */
    export type NodesInitializedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> & {
      /**
       * [descr:_ui_tree_list_NodesInitializedEvent.root]
       */
      readonly root: Node<TRowData, TKey>;
    };
    /**
     * [descr:_ui_tree_list_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    events.ChangedOptionInfo;
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type OverriddenKeys =
      | 'autoExpandAll'
      | 'columns'
      | 'customizeColumns'
      | 'dataStructure'
      | 'editing'
      | 'expandedRowKeys'
      | 'expandNodesOnFiltering'
      | 'filterMode'
      | 'hasItemsExpr'
      | 'itemsExpr'
      | 'keyExpr'
      | 'onCellClick'
      | 'onCellDblClick'
      | 'onCellHoverChanged'
      | 'onCellPrepared'
      | 'onContextMenuPreparing'
      | 'onEditingStart'
      | 'onEditorPrepared'
      | 'onEditorPreparing'
      | 'onFocusedCellChanged'
      | 'onFocusedCellChanging'
      | 'onFocusedRowChanged'
      | 'onFocusedRowChanging'
      | 'onNodesInitialized'
      | 'onRowClick'
      | 'onRowDblClick'
      | 'onRowPrepared'
      | 'paging'
      | 'parentIdExpr'
      | 'remoteOperations'
      | 'rootValue'
      | 'scrolling'
      | 'selection'
      | 'toolbar';
    /**
     * [descr:dxTreeListPaging]
     */
    export type Paging = common.grids.PagingBase & {
      /**
       * [descr:dxTreeListOptions.paging.enabled]
       */
      enabled?: boolean;
    };
    export type Properties<TRowData = any, TKey = any> = dxTreeListOptions<
    TRowData,
    TKey
    >;
    /**
     * [descr:dxTreeListRowObject]
     */
    export interface Row<TRowData = any, TKey = any> {
      /**
       * [descr:dxTreeListRowObject.isEditing]
       */
      readonly isEditing?: boolean;
      /**
       * [descr:dxTreeListRowObject.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:dxTreeListRowObject.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:dxTreeListRowObject.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:dxTreeListRowObject.key]
       */
      readonly key: TKey;
      /**
       * [descr:dxTreeListRowObject.level]
       */
      readonly level: number;
      /**
       * [descr:dxTreeListRowObject.node]
       */
      readonly node: Node<TRowData, TKey>;
      /**
       * [descr:dxTreeListRowObject.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:dxTreeListRowObject.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:dxTreeListRowObject.values]
       */
      readonly values: any[];
      /**
       * [descr:dxTreeListRowObject.data]
       */
      readonly data: TRowData;
    }
    /**
     * [descr:_ui_tree_list_RowClickEvent]
     */
    export type RowClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTreeList<TRowData, TKey>,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_tree_list_RowClickEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_tree_list_RowClickEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_tree_list_RowClickEvent.values]
       */
      readonly values: any[];
      /**
       * [descr:_ui_tree_list_RowClickEvent.columns]
       */
      readonly columns: Column<TRowData, TKey>[];
      /**
       * [descr:_ui_tree_list_RowClickEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_tree_list_RowClickEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_tree_list_RowClickEvent.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:_ui_tree_list_RowClickEvent.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:_ui_tree_list_RowClickEvent.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:_ui_tree_list_RowClickEvent.rowElement]
       */
      readonly rowElement: core.DxElement;
      /**
       * [descr:_ui_tree_list_RowClickEvent.handled]
       */
      readonly handled: boolean;
      /**
       * [descr:_ui_tree_list_RowClickEvent.node]
       */
      readonly node: Node<TRowData, TKey>;
      /**
       * [descr:_ui_tree_list_RowClickEvent.level]
       */
      readonly level: number;
    };
    /**
     * [descr:_ui_tree_list_RowCollapsedEvent]
     */
    export type RowCollapsedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowKeyInfo<TKey>;
    /**
     * [descr:_ui_tree_list_RowCollapsingEvent]
     */
    export type RowCollapsingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowKeyInfo<TKey>;
    /**
     * [descr:_ui_tree_list_RowDblClickEvent]
     */
    export type RowDblClickEvent<
      TRowData = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxTreeList<TRowData, TKey>,
    PointerEvent | MouseEvent
    > & {
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.values]
       */
      readonly values: any[];
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.columns]
       */
      readonly columns: Column<TRowData, TKey>[];
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:_ui_tree_list_RowDblClickEvent.rowElement]
       */
      readonly rowElement: core.DxElement;
    };
    export type RowDraggingAddEvent<
      TRowData = any,
      TKey = any,
    > = common.ReducedNativeEventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragDropInfo;
    export type RowDraggingChangeEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    common.ReducedNativeEventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragDropInfo;
    export type RowDraggingEndEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    common.ReducedNativeEventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragDropInfo;
    export type RowDraggingMoveEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    common.ReducedNativeEventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragDropInfo;
    export type RowDraggingRemoveEvent<
      TRowData = any,
      TKey = any,
    > = common.ReducedNativeEventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData>;
    export type RowDraggingReorderEvent<
      TRowData = any,
      TKey = any,
    > = common.ReducedNativeEventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowDraggingEventInfo<TRowData> &
    common.grids.DragReorderInfo;
    export type RowDraggingStartEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    common.ReducedNativeEventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.DragStartEventInfo<TRowData>;
    /**
     * [descr:_ui_tree_list_RowExpandedEvent]
     */
    export type RowExpandedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowKeyInfo<TKey>;
    /**
     * [descr:_ui_tree_list_RowExpandingEvent]
     */
    export type RowExpandingEvent<
      TRowData = any,
      TKey = any,
    > = events.Cancelable &
    events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowKeyInfo<TKey>;
    /**
     * [descr:_ui_tree_list_RowInsertedEvent]
     */
    export type RowInsertedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowInsertedInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_RowInsertingEvent]
     */
    export type RowInsertingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowInsertingInfo<TRowData>;
    /**
     * [descr:_ui_tree_list_RowPreparedEvent]
     */
    export type RowPreparedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> & {
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.data]
       */
      readonly data: TRowData;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.key]
       */
      readonly key: TKey;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.values]
       */
      readonly values: any[];
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.columns]
       */
      readonly columns: Column<TRowData, TKey>[];
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.rowIndex]
       */
      readonly rowIndex: number;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.rowType]
       */
      readonly rowType: string;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.isSelected]
       */
      readonly isSelected?: boolean;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.isExpanded]
       */
      readonly isExpanded?: boolean;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.isNewRow]
       */
      readonly isNewRow?: boolean;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.rowElement]
       */
      readonly rowElement: core.DxElement;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.node]
       */
      readonly node: Node<TRowData, TKey>;
      /**
       * [descr:_ui_tree_list_RowPreparedEvent.level]
       */
      readonly level: number;
    };
    /**
     * [descr:_ui_tree_list_RowRemovedEvent]
     */
    export type RowRemovedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowRemovedInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_RowRemovingEvent]
     */
    export type RowRemovingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowRemovingInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_RowUpdatedEvent]
     */
    export type RowUpdatedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowUpdatedInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_RowUpdatingEvent]
     */
    export type RowUpdatingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowUpdatingInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_RowValidatingEvent]
     */
    export type RowValidatingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.RowValidatingInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_SavedEvent]
     */
    export type SavedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.DataChangeInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_SavingEvent]
     */
    export type SavingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.SavingInfo<TRowData, TKey>;
    export type Scrollable = Omit<
    dxScrollable,
    | '_templateManager'
    | '_cancelOptionChange'
    | '_getTemplate'
    | '_invalidate'
    | '_refresh'
    | '_notifyOptionChanged'
    | '_createElement'
    >;
    /**
     * [descr:dxTreeListScrolling]
     */
    export interface Scrolling extends common.grids.ScrollingBase {
      /**
       * [descr:dxTreeListOptions.scrolling.mode]
       */
      mode?: common.ScrollMode;
    }
    /**
     * [descr:Selection]
     */
    export interface Selection extends common.grids.SelectionBase {
      /**
       * [descr:dxTreeListOptions.selection.recursive]
       */
      recursive?: boolean;
    }
    /**
     * [descr:_ui_tree_list_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.SelectionChangedInfo<TRowData, TKey>;
    /**
     * [descr:_ui_tree_list_ToolbarPreparingEvent]
     */
    export type ToolbarPreparingEvent<
      TRowData = any,
      TKey = any,
    > = events.EventInfo<dxTreeList<TRowData, TKey>> &
    common.grids.ToolbarPreparingInfo;
    export type TreeListCommandColumnType = 'adaptive' | 'buttons' | 'drag';
    export type TreeListFilterMode =
      | 'fullBranch'
      | 'withAncestors'
      | 'matchOnly';
    export type TreeListPredefinedColumnButton =
      | 'add'
      | 'cancel'
      | 'delete'
      | 'edit'
      | 'save'
      | 'undelete';
    export type TreeListPredefinedToolbarItem =
      | 'addRowButton'
      | 'applyFilterButton'
      | 'columnChooserButton'
      | 'revertButton'
      | 'saveButton'
      | 'searchPanel';
  }
  /**
   * @deprecated Use the DevExpress.ui.dxTreeList.Column type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeListColumn<TRowData = any, TKey = any>
    extends common.grids.ColumnBase<TRowData> {
    /**
     * [descr:dxTreeListColumn.buttons]
     */
    buttons?: (| dxTreeList.TreeListPredefinedColumnButton
    | dxTreeList.ColumnButton<TRowData, TKey>)[];
    /**
     * [descr:dxTreeListColumn.cellTemplate]
     */
    cellTemplate?:
    | core.template
    | ((
      cellElement: core.DxElement,
      cellInfo: dxTreeList.ColumnCellTemplateData<
      TRowData,
      TKey
      >
    ) => any);
    /**
     * [descr:dxTreeListColumn.columns]
     */
    columns?: (dxTreeList.Column<TRowData, TKey> | string)[];
    /**
     * [descr:dxTreeListColumn.editCellTemplate]
     */
    editCellTemplate?:
    | core.template
    | ((
      cellElement: core.DxElement,
      cellInfo: dxTreeList.ColumnEditCellTemplateData<
      TRowData,
      TKey
      >
    ) => any);
    /**
     * [descr:dxTreeListColumn.headerCellTemplate]
     */
    headerCellTemplate?:
    | core.template
    | ((
      columnHeader: core.DxElement,
      headerInfo: dxTreeList.ColumnHeaderCellTemplateData<
      TRowData,
      TKey
      >
    ) => any);
    /**
     * [descr:dxTreeListColumn.type]
     */
    type?: dxTreeList.TreeListCommandColumnType;
  }
  /**
   * @deprecated Use the TreeList's ColumnButton type instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeListColumnButton<TRowData = any, TKey = any>
    extends common.grids.ColumnButtonBase {
    /**
     * [descr:dxTreeListColumnButton.name]
     */
    name?: dxTreeList.TreeListPredefinedColumnButton | string;
    /**
     * [descr:dxTreeListColumnButton.onClick]
     */
    onClick?: (
      e: dxTreeList.ColumnButtonClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListColumnButton.template]
     */
    template?:
    | core.template
    | ((
      cellElement: core.DxElement,
      cellInfo: dxTreeList.ColumnButtonTemplateData<
      TRowData,
      TKey
      >
    ) => string | core.UserDefinedElement);
    /**
     * [descr:dxTreeListColumnButton.visible]
     */
    visible?:
    | boolean
    | ((options: {
      readonly component: dxTreeList<TRowData, TKey>;
      readonly row?: dxTreeList.Row<TRowData, TKey>;
      readonly column: dxTreeList.Column<TRowData, TKey>;
    }) => boolean);
    /**
     * [descr:dxTreeListColumnButton.disabled]
     */
    disabled?:
    | boolean
    | ((options: {
      readonly component: dxTreeList<TRowData, TKey>;
      readonly row?: dxTreeList.Row<TRowData, TKey>;
      readonly column: dxTreeList.Column<TRowData, TKey>;
    }) => boolean);
  }
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Node instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxTreeListNode<
    TRowData = any,
    TKey = any,
  > = dxTreeList.Node<TRowData, TKey>;
  /**
   * [descr:dxTreeListOptions]
   * @deprecated [depNote:dxTreeListOptions]
   */
  export type dxTreeListOptions<TRowData = any, TKey = any> = Omit<
  common.grids.GridBaseOptions<
  dxTreeList<TRowData, TKey>,
  TRowData,
  TKey
  >,
  dxTreeList.OverriddenKeys
  > & {
    /**
     * [descr:dxTreeListOptions.autoExpandAll]
     */
    autoExpandAll?: boolean;
    /**
     * [descr:dxTreeListOptions.columns]
     */
    columns?: (dxTreeList.Column<TRowData, TKey> | string)[];
    /**
     * [descr:dxTreeListOptions.customizeColumns]
     */
    customizeColumns?: (
      columns: dxTreeList.Column<TRowData, TKey>[]
    ) => void;
    /**
     * [descr:dxTreeListOptions.dataStructure]
     */
    dataStructure?: common.DataStructure;
    /**
     * [descr:dxTreeListOptions.editing]
     */
    editing?: dxTreeList.Editing<TRowData, TKey>;
    /**
     * [descr:dxTreeListOptions.expandNodesOnFiltering]
     */
    expandNodesOnFiltering?: boolean;
    /**
     * [descr:dxTreeListOptions.expandedRowKeys]
     */
    expandedRowKeys?: TKey[];
    /**
     * [descr:dxTreeListOptions.filterMode]
     */
    filterMode?: dxTreeList.TreeListFilterMode;
    /**
     * [descr:dxTreeListOptions.hasItemsExpr]
     */
    hasItemsExpr?: string | Function;
    /**
     * [descr:dxTreeListOptions.itemsExpr]
     */
    itemsExpr?: string | Function;
    /**
     * [descr:dxTreeListOptions.keyExpr]
     */
    keyExpr?: string | Function;
    /**
     * [descr:dxTreeListOptions.onCellClick]
     */
    onCellClick?: (
      e: dxTreeList.CellClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onCellDblClick]
     */
    onCellDblClick?: (
      e: dxTreeList.CellDblClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onCellHoverChanged]
     */
    onCellHoverChanged?: (
      e: dxTreeList.CellHoverChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onCellPrepared]
     */
    onCellPrepared?: (
      e: dxTreeList.CellPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onContextMenuPreparing]
     */
    onContextMenuPreparing?: (
      e: dxTreeList.ContextMenuPreparingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onEditingStart]
     */
    onEditingStart?: (
      e: dxTreeList.EditingStartEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onEditorPrepared]
     */
    onEditorPrepared?: (
      options: dxTreeList.EditorPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onEditorPreparing]
     */
    onEditorPreparing?: (
      e: dxTreeList.EditorPreparingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onFocusedCellChanged]
     */
    onFocusedCellChanged?: (
      e: dxTreeList.FocusedCellChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onFocusedCellChanging]
     */
    onFocusedCellChanging?: (
      e: dxTreeList.FocusedCellChangingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onFocusedRowChanged]
     */
    onFocusedRowChanged?: (
      e: dxTreeList.FocusedRowChangedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onFocusedRowChanging]
     */
    onFocusedRowChanging?: (
      e: dxTreeList.FocusedRowChangingEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onNodesInitialized]
     */
    onNodesInitialized?: (
      e: dxTreeList.NodesInitializedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onRowClick]
     */
    onRowClick?: (
      e: dxTreeList.RowClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onRowDblClick]
     */
    onRowDblClick?: (
      e: dxTreeList.RowDblClickEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.onRowPrepared]
     */
    onRowPrepared?: (
      e: dxTreeList.RowPreparedEvent<TRowData, TKey>
    ) => void;
    /**
     * [descr:dxTreeListOptions.paging]
     */
    paging?: dxTreeList.Paging;
    /**
     * [descr:dxTreeListOptions.parentIdExpr]
     */
    parentIdExpr?: string | Function;
    /**
     * [descr:dxTreeListOptions.remoteOperations]
     */
    remoteOperations?:
    | {
      /**
           * [descr:dxTreeListOptions.remoteOperations.filtering]
           */
      filtering?: boolean;
      /**
           * [descr:dxTreeListOptions.remoteOperations.grouping]
           */
      grouping?: boolean;
      /**
           * [descr:dxTreeListOptions.remoteOperations.sorting]
           */
      sorting?: boolean;
    }
    | common.Mode;
    /**
     * [descr:dxTreeListOptions.rootValue]
     */
    rootValue?: TKey;
    /**
     * [descr:dxTreeListOptions.scrolling]
     */
    scrolling?: dxTreeList.Scrolling;
    /**
     * [descr:dxTreeListOptions.selection]
     */
    selection?: dxTreeList.Selection;
    /**
     * [descr:dxTreeListOptions.toolbar]
     */
    toolbar?: dxTreeList.Toolbar;
  };
  /**
   * @deprecated Use DevExpress.ui.dxTreeList.Row instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxTreeListRowObject<
    TRowData = any,
    TKey = any,
  > = dxTreeList.Row<TRowData, TKey>;
  /**
   * [descr:dxTreeView]
   */
  export class dxTreeView<TKey = any> extends HierarchicalCollectionWidget<
  dxTreeViewOptions<TKey>,
  dxTreeViewItem,
  TKey
  > {
    /**
     * [descr:dxTreeView.collapseAll()]
     */
    collapseAll(): void;
    /**
     * [descr:dxTreeView.collapseItem(itemData)]
     */
    collapseItem(
      itemData: dxTreeView.Item
    ): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.collapseItem(itemElement)]
     */
    collapseItem(itemElement: Element): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.collapseItem(key)]
     */
    collapseItem(key: TKey): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.expandAll()]
     */
    expandAll(): void;
    /**
     * [descr:dxTreeView.expandItem(itemData)]
     */
    expandItem(
      itemData: dxTreeView.Item
    ): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.expandItem(itemElement)]
     */
    expandItem(itemElement: Element): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.expandItem(key)]
     */
    expandItem(key: TKey): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.getNodes()]
     */
    getNodes(): dxTreeView.Node<TKey>[];
    /**
     * [descr:dxTreeView.getSelectedNodes()]
     */
    getSelectedNodes(): dxTreeView.Node<TKey>[];
    /**
     * [descr:dxTreeView.getSelectedNodeKeys()]
     */
    getSelectedNodeKeys(): TKey[];
    /**
     * [descr:dxTreeView.selectAll()]
     */
    selectAll(): void;
    /**
     * [descr:dxTreeView.getScrollable()]
     */
    getScrollable(): dxTreeView.Scrollable;
    /**
     * [descr:dxTreeView.selectItem(itemData)]
     */
    selectItem(itemData: dxTreeView.Item): boolean;
    /**
     * [descr:dxTreeView.selectItem(itemElement)]
     */
    selectItem(itemElement: Element): boolean;
    /**
     * [descr:dxTreeView.selectItem(key)]
     */
    selectItem(key: TKey): boolean;
    /**
     * [descr:dxTreeView.unselectAll()]
     */
    unselectAll(): void;
    /**
     * [descr:dxTreeView.unselectItem(itemData)]
     */
    unselectItem(itemData: dxTreeView.Item): boolean;
    /**
     * [descr:dxTreeView.unselectItem(itemElement)]
     */
    unselectItem(itemElement: Element): boolean;
    /**
     * [descr:dxTreeView.unselectItem(key)]
     */
    unselectItem(key: TKey): boolean;
    /**
     * [descr:dxTreeView.updateDimensions()]
     */
    updateDimensions(): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.scrollToItem(itemData)]
     */
    scrollToItem(
      itemData: dxTreeView.Item
    ): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.scrollToItem(itemElement)]
     */
    scrollToItem(itemElement: Element): core.utils.DxPromise;
    /**
     * [descr:dxTreeView.scrollToItem(key)]
     */
    scrollToItem(key: TKey): core.utils.DxPromise;
  }
  namespace dxTreeView {
    /**
     * [descr:_ui_tree_view_ContentReadyEvent]
     */
    export type ContentReadyEvent<TKey = any> = events.EventInfo<
    dxTreeView<TKey>
    >;
    /**
     * [descr:_ui_tree_view_DisposingEvent]
     */
    export type DisposingEvent<TKey = any> = events.EventInfo<
    dxTreeView<TKey>
    >;
    export interface ExplicitTypes<TKey = any> {
      Properties: Properties<TKey>;
      Node: Node<TKey>;
      ContentReadyEvent: ContentReadyEvent<TKey>;
      DisposingEvent: DisposingEvent<TKey>;
      InitializedEvent: InitializedEvent<TKey>;
      ItemClickEvent: ItemClickEvent<TKey>;
      ItemCollapsedEvent: ItemCollapsedEvent<TKey>;
      ItemContextMenuEvent: ItemContextMenuEvent<TKey>;
      ItemExpandedEvent: ItemExpandedEvent<TKey>;
      ItemHoldEvent: ItemHoldEvent<TKey>;
      ItemRenderedEvent: ItemRenderedEvent<TKey>;
      ItemSelectionChangedEvent: ItemSelectionChangedEvent<TKey>;
      OptionChangedEvent: OptionChangedEvent<TKey>;
      SelectAllValueChangedEvent: SelectAllValueChangedEvent<TKey>;
      SelectionChangedEvent: SelectionChangedEvent<TKey>;
    }
    /**
     * [descr:_ui_tree_view_InitializedEvent]
     */
    export type InitializedEvent<TKey = any> =
      events.InitializedEventInfo<dxTreeView<TKey>>;
    /**
     * [descr:_ui_tree_view_ItemClickEvent]
     */
    export type ItemClickEvent<TKey = any> = events.NativeEventInfo<
    dxTreeView<TKey>,
    KeyboardEvent | MouseEvent | PointerEvent
    > &
    ItemInfo<TKey>;
    /**
     * [descr:_ui_tree_view_ItemCollapsedEvent]
     */
    export type ItemCollapsedEvent<TKey = any> =
      events.NativeEventInfo<
      dxTreeView<TKey>,
      MouseEvent | PointerEvent
      > &
      ItemInfo<TKey>;
    /**
     * [descr:_ui_tree_view_ItemContextMenuEvent]
     */
    export type ItemContextMenuEvent<TKey = any> =
      events.NativeEventInfo<
      dxTreeView<TKey>,
      MouseEvent | PointerEvent | TouchEvent
      > &
      ItemInfo<TKey>;
    /**
     * [descr:_ui_tree_view_ItemExpandedEvent]
     */
    export type ItemExpandedEvent<TKey = any> =
      events.NativeEventInfo<
      dxTreeView<TKey>,
      MouseEvent | PointerEvent
      > &
      ItemInfo<TKey>;
    /**
     * [descr:_ui_tree_view_ItemHoldEvent]
     */
    export type ItemHoldEvent<TKey = any> = events.NativeEventInfo<
    dxTreeView<TKey>,
    MouseEvent | PointerEvent | TouchEvent
    > &
    ItemInfo<TKey>;
    /**
     * [descr:_ui_tree_view_ItemInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ItemInfo<TKey = any> {
      /**
       * [descr:_ui_tree_view_ItemInfo.itemData]
       */
      readonly itemData?: Item;
      /**
       * [descr:_ui_tree_view_ItemInfo.itemElement]
       */
      readonly itemElement?: core.DxElement;
      /**
       * [descr:_ui_tree_view_ItemInfo.itemIndex]
       */
      readonly itemIndex?: number;
      /**
       * [descr:_ui_tree_view_ItemInfo.node]
       */
      readonly node?: Node<TKey>;
    }
    /**
     * [descr:_ui_tree_view_ItemRenderedEvent]
     */
    export type ItemRenderedEvent<TKey = any> = events.EventInfo<
    dxTreeView<TKey>
    > &
    ItemInfo<TKey>;
    /**
     * [descr:_ui_tree_view_ItemSelectionChangedEvent]
     */
    export type ItemSelectionChangedEvent<TKey = any> =
      events.EventInfo<dxTreeView<TKey>> & ItemInfo<TKey>;
    /**
     * [descr:dxTreeViewNode]
     */
    export type Node<TKey = any> = dxTreeViewNode<TKey>;
    /**
     * [descr:_ui_tree_view_OptionChangedEvent]
     */
    export type OptionChangedEvent<TKey = any> = events.EventInfo<
    dxTreeView<TKey>
    > &
    events.ChangedOptionInfo;
    export type Properties<TKey = any> = dxTreeViewOptions<TKey>;
    export type Scrollable = Omit<
    dxScrollable,
    | '_templateManager'
    | '_cancelOptionChange'
    | '_getTemplate'
    | '_invalidate'
    | '_refresh'
    | '_notifyOptionChanged'
    | '_createElement'
    >;
    /**
     * [descr:_ui_tree_view_SelectAllValueChangedEvent]
     */
    export type SelectAllValueChangedEvent<TKey = any> =
      events.EventInfo<dxTreeView<TKey>> & {
        /**
         * [descr:_ui_tree_view_SelectAllValueChangedEvent.value]
         */
        readonly value?: boolean | undefined;
      };
    /**
     * [descr:_ui_tree_view_SelectionChangedEvent]
     */
    export type SelectionChangedEvent<TKey = any> = events.EventInfo<
    dxTreeView<TKey>
    >;
    export type TreeViewCheckBoxMode = 'none' | 'normal' | 'selectAll';
    export type TreeViewExpandEvent = 'dblclick' | 'click';
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeViewItem extends CollectionWidgetItem {
    /**
     * [descr:dxTreeViewItem.expanded]
     */
    expanded?: boolean;
    /**
     * [descr:dxTreeViewItem.hasItems]
     */
    hasItems?: boolean;
    /**
     * [descr:dxTreeViewItem.icon]
     */
    icon?: string;
    /**
     * [descr:dxTreeViewItem.items]
     */
    items?: dxTreeViewItem[];
    /**
     * [descr:dxTreeViewItem.id]
     */
    id?: number | string;
    /**
     * [descr:dxTreeViewItem.parentId]
     */
    parentId?: number | string;
    /**
     * [descr:dxTreeViewItem.selected]
     */
    selected?: boolean;

    [key: string]: any;
  }
  /**
   * [descr:dxTreeViewNode]
   * @deprecated [depNote:dxTreeViewNode]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeViewNode<TKey = any> {
    /**
     * [descr:dxTreeViewNode.children]
     */
    children?: dxTreeViewNode<TKey>[];
    /**
     * [descr:dxTreeViewNode.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:dxTreeViewNode.expanded]
     */
    expanded?: boolean;
    /**
     * [descr:dxTreeViewNode.itemData]
     */
    itemData?: dxTreeView.Item;
    /**
     * [descr:dxTreeViewNode.key]
     */
    key?: TKey;
    /**
     * [descr:dxTreeViewNode.parent]
     */
    parent?: dxTreeViewNode<TKey>;
    /**
     * [descr:dxTreeViewNode.selected]
     */
    selected?: boolean;
    /**
     * [descr:dxTreeViewNode.text]
     */
    text?: string;
  }
  /**
   * [descr:dxTreeViewOptions]
   * @deprecated [depNote:dxTreeViewOptions]
   */
  export interface dxTreeViewOptions<TKey = any>
    extends Omit<
    HierarchicalCollectionWidgetOptions<
    dxTreeView<TKey>,
    dxTreeViewItem,
    TKey
    >,
    'dataSource'
    >,
    SearchBoxMixinOptions {
    /**
     * [descr:dxTreeViewOptions.animationEnabled]
     */
    animationEnabled?: boolean;
    /**
     * [descr:dxTreeViewOptions.createChildren]
     */
    createChildren?: (
      parentNode: dxTreeView.Node<TKey>
    ) => PromiseLike<any> | any[];
    /**
     * [descr:dxTreeViewOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<
    dxTreeView.Item,
    TKey
    > | null;
    /**
     * [descr:dxTreeViewOptions.dataStructure]
     */
    dataStructure?: common.DataStructure;
    /**
     * [descr:dxTreeViewOptions.expandAllEnabled]
     */
    expandAllEnabled?: boolean;
    /**
     * [descr:dxTreeViewOptions.expandEvent]
     */
    expandEvent?: dxTreeView.TreeViewExpandEvent;
    /**
     * [descr:dxTreeViewOptions.expandNodesRecursive]
     */
    expandNodesRecursive?: boolean;
    /**
     * [descr:dxTreeViewOptions.expandedExpr]
     */
    expandedExpr?: string | Function;
    /**
     * [descr:dxTreeViewOptions.hasItemsExpr]
     */
    hasItemsExpr?: string | Function;
    /**
     * [descr:dxTreeViewOptions.items]
     */
    items?: dxTreeView.Item[];
    /**
     * [descr:dxTreeViewOptions.onItemClick]
     */
    onItemClick?: (e: dxTreeView.ItemClickEvent<TKey>) => void;
    /**
     * [descr:dxTreeViewOptions.onItemCollapsed]
     */
    onItemCollapsed?: (
      e: dxTreeView.ItemCollapsedEvent<TKey>
    ) => void;
    /**
     * [descr:dxTreeViewOptions.onItemContextMenu]
     */
    onItemContextMenu?: (
      e: dxTreeView.ItemContextMenuEvent<TKey>
    ) => void;
    /**
     * [descr:dxTreeViewOptions.onItemExpanded]
     */
    onItemExpanded?: (
      e: dxTreeView.ItemExpandedEvent<TKey>
    ) => void;
    /**
     * [descr:dxTreeViewOptions.onItemHold]
     */
    onItemHold?: (e: dxTreeView.ItemHoldEvent<TKey>) => void;
    /**
     * [descr:dxTreeViewOptions.onItemRendered]
     */
    onItemRendered?: (
      e: dxTreeView.ItemRenderedEvent<TKey>
    ) => void;
    /**
     * [descr:dxTreeViewOptions.onItemSelectionChanged]
     */
    onItemSelectionChanged?: (
      e: dxTreeView.ItemSelectionChangedEvent<TKey>
    ) => void;
    /**
     * [descr:dxTreeViewOptions.onSelectAllValueChanged]
     */
    onSelectAllValueChanged?: (
      e: dxTreeView.SelectAllValueChangedEvent<TKey>
    ) => void;
    /**
     * [descr:dxTreeViewOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxTreeView.SelectionChangedEvent<TKey>
    ) => void;
    /**
     * [descr:dxTreeViewOptions.parentIdExpr]
     */
    parentIdExpr?: string | Function;
    /**
     * [descr:dxTreeViewOptions.rootValue]
     */
    rootValue?: any;
    /**
     * [descr:dxTreeViewOptions.scrollDirection]
     */
    scrollDirection?: common.ScrollDirection;
    /**
     * [descr:dxTreeViewOptions.selectAllText]
     */
    selectAllText?: string;
    /**
     * [descr:dxTreeViewOptions.selectByClick]
     */
    selectByClick?: boolean;
    /**
     * [descr:dxTreeViewOptions.selectNodesRecursive]
     */
    selectNodesRecursive?: boolean;
    /**
     * [descr:dxTreeViewOptions.selectionMode]
     */
    selectionMode?: common.SingleOrMultiple;
    /**
     * [descr:dxTreeViewOptions.showCheckBoxesMode]
     */
    showCheckBoxesMode?: dxTreeView.TreeViewCheckBoxMode;
    /**
     * [descr:dxTreeViewOptions.collapseIcon]
     */
    collapseIcon?: string | null;
    /**
     * [descr:dxTreeViewOptions.expandIcon]
     */
    expandIcon?: string | null;
    /**
     * [descr:dxTreeViewOptions.virtualModeEnabled]
     */
    virtualModeEnabled?: boolean;
    /**
     * [descr:dxTreeViewOptions.useNativeScrolling]
     */
    useNativeScrolling?: boolean;
  }
  /**
   * [descr:dxValidationGroup]
   */
  export class dxValidationGroup extends DOMComponent<dxValidationGroupOptions> {
    /**
     * [descr:dxValidationGroup.reset()]
     */
    reset(): void;
    /**
     * [descr:dxValidationGroup.validate()]
     */
    validate(): dxValidationGroup.ValidationResult;
  }
  namespace dxValidationGroup {
    /**
     * [descr:_ui_validation_group_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxValidationGroup>;
    /**
     * [descr:_ui_validation_group_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxValidationGroup>;
    /**
     * [descr:_ui_validation_group_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxValidationGroup> &
      events.ChangedOptionInfo;
    export type Properties = dxValidationGroupOptions;
    export type ValidationResult = dxValidationGroupResult;
  }
  /**
   * [descr:dxValidationGroupOptions]
   * @deprecated [depNote:dxValidationGroupOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidationGroupOptions
    extends DOMComponentOptions<dxValidationGroup> {}
  /**
   * [descr:dxValidationGroupResult]
   * @deprecated [depNote:dxValidationGroupResult]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidationGroupResult {
    /**
     * [descr:dxValidationGroupResult.brokenRules]
     */
    brokenRules?: (| common.RequiredRule
    | common.NumericRule
    | common.RangeRule
    | common.StringLengthRule
    | common.CustomRule
    | common.CompareRule
    | common.PatternRule
    | common.EmailRule
    | common.AsyncRule)[];
    /**
     * [descr:dxValidationGroupResult.complete]
     */
    complete?: core.utils.DxPromise<dxValidationGroupResult>;
    /**
     * [descr:dxValidationGroupResult.isValid]
     */
    isValid?: boolean;
    /**
     * [descr:dxValidationGroupResult.status]
     */
    status?: common.ValidationStatus;
    /**
     * [descr:dxValidationGroupResult.validators]
     */
    validators?: any[];
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class dxValidationMessage extends dxOverlay<dxValidationMessageOptions> {}
  namespace dxValidationMessage {
    export type Properties = dxValidationMessageOptions;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidationMessageOptions
    extends dxOverlayOptions<dxValidationMessage> {
    mode?: string;

    validationErrors?: object[] | null;

    positionSide?: string;

    boundary?: string | core.UserDefinedElement;

    offset?: object;
  }
  /**
   * [descr:dxValidationSummary]
   */
  export class dxValidationSummary<
    TItem extends CollectionWidget.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<
    dxValidationSummaryOptions<TItem, TKey>,
    TItem,
    TKey
    > {
    /**
     * [descr:dxValidationSummary.refreshValidationGroup()]
     */
    refreshValidationGroup(): void;
  }
  namespace dxValidationSummary {
    /**
     * [descr:_ui_validation_summary_ContentReadyEvent]
     */
    export type ContentReadyEvent<
      TItem extends CollectionWidget.ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxValidationSummary<TItem, TKey>>;
    /**
     * [descr:_ui_validation_summary_DisposingEvent]
     */
    export type DisposingEvent<
      TItem extends CollectionWidget.ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxValidationSummary<TItem, TKey>>;
    export interface ExplicitTypes<
      TItem extends CollectionWidget.ItemLike,
      TKey,
    > {
      Properties: Properties<TItem, TKey>;
      ContentReadyEvent: ContentReadyEvent<TItem, TKey>;
      DisposingEvent: DisposingEvent<TItem, TKey>;
      InitializedEvent: InitializedEvent<TItem, TKey>;
      ItemClickEvent: ItemClickEvent<TItem, TKey>;
      OptionChangedEvent: OptionChangedEvent<TItem, TKey>;
    }
    /**
     * [descr:_ui_validation_summary_InitializedEvent]
     */
    export type InitializedEvent<
      TItem extends CollectionWidget.ItemLike = any,
      TKey = any,
    > = events.InitializedEventInfo<
    dxValidationSummary<TItem, TKey>
    >;
    /**
     * [descr:_ui_validation_summary_ItemClickEvent]
     */
    export type ItemClickEvent<
      TItem extends CollectionWidget.ItemLike = any,
      TKey = any,
    > = events.NativeEventInfo<
    dxValidationSummary<TItem, TKey>,
    MouseEvent | PointerEvent
    > &
    events.ItemInfo<TItem>;
    /**
     * [descr:_ui_validation_summary_OptionChangedEvent]
     */
    export type OptionChangedEvent<
      TItem extends CollectionWidget.ItemLike = any,
      TKey = any,
    > = events.EventInfo<dxValidationSummary<TItem, TKey>> &
    events.ChangedOptionInfo;
    export type Properties<
      TItem extends CollectionWidget.ItemLike = any,
      TKey = any,
    > = dxValidationSummaryOptions<TItem, TKey>;
  }
  /**
   * [descr:dxValidationSummaryOptions]
   * @deprecated [depNote:dxValidationSummaryOptions]
   */
  export interface dxValidationSummaryOptions<
    TItem extends CollectionWidget.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<
    dxValidationSummary<TItem, TKey>,
    TItem,
    TKey
    > {
    /**
     * [descr:dxValidationSummaryOptions.validationGroup]
     */
    validationGroup?: string;
  }
  /**
   * [descr:dxValidator]
   */
  export class dxValidator extends DOMComponent<dxValidatorOptions> {
    /**
     * [descr:dxValidator.focus()]
     */
    focus(): void;
    /**
     * [descr:dxValidator.reset()]
     */
    reset(): void;
    /**
     * [descr:dxValidator.validate()]
     */
    validate(): dxValidator.ValidationResult;
  }
  namespace dxValidator {
    export type DisposingEvent = events.EventInfo<dxValidator>;
    export type InitializedEvent =
      events.InitializedEventInfo<dxValidator>;
    export type OptionChangedEvent = events.EventInfo<dxValidator> &
    events.ChangedOptionInfo;
    export type Properties = dxValidatorOptions;
    export interface ValidatedEvent {
      name?: string;
      isValid?: boolean;
      value?: any;
      validationRules?: common.ValidationRule[];
      brokenRule?: common.ValidationRule;
      brokenRules?: common.ValidationRule;
      status?: common.ValidationStatus;
    }
    export type ValidationResult = dxValidatorResult;
  }
  /**
   * [descr:dxValidatorOptions]
   * @deprecated [depNote:dxValidatorOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidatorOptions extends DOMComponentOptions<dxValidator> {
    /**
     * [descr:dxValidatorOptions.adapter]
     */
    adapter?: {
      /**
       * [descr:dxValidatorOptions.adapter.applyValidationResults]
       */
      applyValidationResults?: Function;
      /**
       * [descr:dxValidatorOptions.adapter.bypass]
       */
      bypass?: Function;
      /**
       * [descr:dxValidatorOptions.adapter.focus]
       */
      focus?: Function;
      /**
       * [descr:dxValidatorOptions.adapter.getValue]
       */
      getValue?: Function;
      /**
       * [descr:dxValidatorOptions.adapter.reset]
       */
      reset?: Function;
      /**
       * [descr:dxValidatorOptions.adapter.validationRequestsCallbacks]
       */
      validationRequestsCallbacks?: Function[];
    };
    /**
     * [descr:dxValidatorOptions.name]
     */
    name?: string;
    /**
     * [descr:dxValidatorOptions.onValidated]
     */
    onValidated?: (
      validatedInfo: dxValidator.ValidatedEvent
    ) => void;
    /**
     * [descr:dxValidatorOptions.validationGroup]
     */
    validationGroup?: string;
    /**
     * [descr:dxValidatorOptions.validationRules]
     */
    validationRules?: common.ValidationRule[];
  }
  /**
   * [descr:dxValidatorResult]
   * @deprecated [depNote:dxValidatorResult]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxValidatorResult {
    /**
     * [descr:dxValidatorResult.brokenRule]
     */
    brokenRule?: common.ValidationRule;
    /**
     * [descr:dxValidatorResult.brokenRules]
     */
    brokenRules?: common.ValidationRule[];
    /**
     * [descr:dxValidatorResult.complete]
     */
    complete?: core.utils.DxPromise<dxValidatorResult>;
    /**
     * [descr:dxValidatorResult.isValid]
     */
    isValid?: boolean;
    /**
     * [descr:dxValidatorResult.pendingRules]
     */
    pendingRules?: common.AsyncRule[];
    /**
     * [descr:dxValidatorResult.status]
     */
    status?: common.ValidationStatus;
    /**
     * [descr:dxValidatorResult.validationRules]
     */
    validationRules?: common.ValidationRule[];
    /**
     * [descr:dxValidatorResult.value]
     */
    value?: any;
  }
  /**
   * [descr:Editor]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Editor<
    TProperties = Editor.Properties,
  > extends Widget<TProperties> {
    /**
     * [descr:Editor.clear()]
     */
    clear(): void;

    /**
     * [descr:Editor.reset(value)]
     */
    reset(value?: any): void;
  }
  namespace Editor {
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    interface EditorInstance extends Editor {}
    /**
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    type Properties = EditorOptions<EditorInstance>;
    /**
     * [descr:ValueChangedInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ValueChangedInfo {
      /**
       * [descr:ValueChangedInfo.previousValue]
       */
      readonly previousValue?: any;
      /**
       * [descr:ValueChangedInfo.value]
       */
      readonly value?: any;
    }
  }
  /**
   * [descr:EditorOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface EditorOptions<TComponent> extends WidgetOptions<TComponent> {
    /**
     * [descr:EditorOptions.isValid]
     */
    isValid?: boolean;
    /**
     * [descr:EditorOptions.onValueChanged]
     */
    onValueChanged?: (
      e: events.NativeEventInfo<TComponent> &
      Editor.ValueChangedInfo
    ) => void;
    /**
     * [descr:EditorOptions.readOnly]
     */
    readOnly?: boolean;
    /**
     * [descr:EditorOptions.validationError]
     */
    validationError?: any;
    /**
     * [descr:EditorOptions.validationErrors]
     */
    validationErrors?: any[];
    /**
     * [descr:EditorOptions.validationMessageMode]
     */
    validationMessageMode?: common.ValidationMessageMode;
    /**
     * [descr:EditorOptions.validationMessagePosition]
     */
    validationMessagePosition?: common.Position;
    /**
     * [descr:EditorOptions.validationStatus]
     */
    validationStatus?: common.ValidationStatus;
    /**
     * [descr:EditorOptions.value]
     */
    value?: any;
    /**
     * [descr:EditorOptions.stylingMode]
     */
    stylingMode?: common.EditorStyle;

    /**
     * [descr:EditorOptions.isDirty]
     */
    isDirty?: boolean;
  }
  /**
   * [descr:dxFilterBuilderField]
   */
  export type Field = dxFilterBuilderField;
  /**
   * [descr:Format]
   */
  export type Format =
    | FormatObject
    | common.Format
    | string
    | ((value: number | Date) => string)
    | ((value: Date) => string)
    | ((value: number) => string)
    | ExternalFormat;
  /**
   * [descr:ui.hideToasts()]
   */
  export function hideToasts(): void;
  /**
   * [descr:HierarchicalCollectionWidget]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class HierarchicalCollectionWidget<
    TProperties extends HierarchicalCollectionWidgetOptions<any, TItem, TKey>,
    TItem extends CollectionWidget.ItemLike = any,
    TKey = any,
  > extends CollectionWidget<TProperties, TItem, TKey> {}
  /**
   * [descr:HierarchicalCollectionWidgetOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface HierarchicalCollectionWidgetOptions<
    TComponent extends HierarchicalCollectionWidget<any, TItem, TKey>,
    TItem extends CollectionWidget.ItemLike = any,
    TKey = any,
  > extends CollectionWidgetOptions<TComponent, TItem, TKey> {
    /**
     * [descr:HierarchicalCollectionWidgetOptions.disabledExpr]
     */
    disabledExpr?: string | Function;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.displayExpr]
     */
    displayExpr?: string | ((item: TItem) => string);
    /**
     * [descr:HierarchicalCollectionWidgetOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.itemsExpr]
     */
    itemsExpr?: string | Function;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.keyExpr]
     */
    keyExpr?: string | Function;
    /**
     * [descr:HierarchicalCollectionWidgetOptions.selectedExpr]
     */
    selectedExpr?: string | Function;
  }
  export interface MapLocation {
    /**
     * [descr:MapLocation.lat]
     */
    lat: number;
    /**
     * [descr:MapLocation.lng]
     */
    lng: number;
  }
  /**
   * [descr:ui.notify(message,type,displayTime)]
   */
  export function notify(
    message: string,
    type?: string,
    displayTime?: number
  ): void;
  /**
   * [descr:ui.notify(options,type,displayTime)]
   */
  export function notify(
    options: any,
    type?: string,
    displayTime?: number
  ): void;
  /**
   * [descr:ui.notify(message,stack)]
   */
  export function notify(message: string, stack?: Stack): void;
  /**
   * [descr:ui.notify(options,stack)]
   */
  export function notify(options: any, stack?: Stack): void;
  /**
   * [descr:ui.repaintFloatingActionButton()]
   */
  export function repaintFloatingActionButton(): void;
  /**
   * [descr:SearchBoxMixin]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class SearchBoxMixin {
    constructor(options?: SearchBoxMixinOptions);
  }
  /**
   * [descr:SearchBoxMixinOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface SearchBoxMixinOptions {
    /**
     * [descr:SearchBoxMixinOptions.searchEditorOptions]
     */
    searchEditorOptions?: dxTextBox.Properties;
    /**
     * [descr:SearchBoxMixinOptions.searchEnabled]
     */
    searchEnabled?: boolean;
    /**
     * [descr:SearchBoxMixinOptions.searchExpr]
     */
    searchExpr?: string | Function | (string | Function)[];
    /**
     * [descr:SearchBoxMixinOptions.searchMode]
     */
    searchMode?: common.SearchMode;
    /**
     * [descr:SearchBoxMixinOptions.searchTimeout]
     */
    searchTimeout?: number;
    /**
     * [descr:SearchBoxMixinOptions.searchValue]
     */
    searchValue?: string;
  }
  interface Stack {
    /**
     * [descr:Stack.position]
     */
    position?:
    | 'top left'
    | 'top right'
    | 'bottom left'
    | 'bottom right'
    | 'top center'
    | 'bottom center'
    | 'left center'
    | 'right center'
    | 'center'
    | {
      /**
           * [descr:Stack.position.top]
           */
      top?: number;
      /**
           * [descr:Stack.position.left]
           */
      left?: number;
      /**
           * [descr:Stack.position.bottom]
           */
      bottom?: number;
      /**
           * [descr:Stack.position.right]
           */
      right?: number;
    };
    /**
     * [descr:Stack.direction]
     */
    direction?:
    | 'down-push'
    | 'up-push'
    | 'left-push'
    | 'right-push'
    | 'down-stack'
    | 'up-stack'
    | 'left-stack'
    | 'right-stack';
  }
  /**
   * [descr:ui.template]
   * @deprecated [depNote:ui.template]
   */
  export type Template = core.template;
  /**
   * [descr:ui.themes]
   */
  export class themes {
    /**
     * [descr:ui.themes.current()]
     */
    static current(): string;
    /**
     * [descr:ui.themes.current(themeName)]
     */
    static current(themeName: string): void;
    /**
     * [descr:ui.themes.ready(callback)]
     */
    static ready(callback: Function): void;
    /**
     * [descr:ui.themes.initialized(callback)]
     */
    static initialized(callback: Function): void;
    static isMaterial(theme: string): boolean;
  }
  /**
   * [descr:Widget]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class Widget<TProperties> extends DOMComponent<TProperties> {
    /**
     * [descr:Widget.focus()]
     */
    focus(): void;
    /**
     * [descr:Widget.registerKeyHandler(key, handler)]
     */
    registerKeyHandler(key: string, handler: Function): void;
    /**
     * [descr:Widget.repaint()]
     */
    repaint(): void;
  }
  namespace Widget {
    /**
     * [descr:format]
     * @deprecated [depNote:format]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type format = Format;
  }
  /**
   * [descr:WidgetOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface WidgetOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * [descr:WidgetOptions.accessKey]
     */
    accessKey?: string;
    /**
     * [descr:WidgetOptions.activeStateEnabled]
     */
    activeStateEnabled?: boolean;
    /**
     * [descr:WidgetOptions.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:WidgetOptions.focusStateEnabled]
     */
    focusStateEnabled?: boolean;
    /**
     * [descr:WidgetOptions.hint]
     */
    hint?: string;
    /**
     * [descr:WidgetOptions.hoverStateEnabled]
     */
    hoverStateEnabled?: boolean;
    /**
     * [descr:WidgetOptions.onContentReady]
     */
    onContentReady?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:WidgetOptions.tabIndex]
     */
    tabIndex?: number;
    /**
     * [descr:WidgetOptions.visible]
     */
    visible?: boolean;
  }
}
declare namespace DevExpress.ui.dialog {
  /**
   * [descr:ui.dialog.alert(messageHtml,title)]
   */
  export function alert(
    messageHtml: string,
    title: string
  ): core.utils.DxPromise;
  /**
   * [descr:ui.dialog.confirm(messageHtml,title)]
   */
  export function confirm(
    messageHtml: string,
    title: string
  ): core.utils.DxPromise<boolean>;
  /**
   * [descr:ui.dialog.custom(options)]
   */
  export function custom(options: CustomDialogOptions): any;
}
declare namespace DevExpress.ui.dxAccordion {
  export type Item = dxAccordionItem;
}
declare namespace DevExpress.ui.dxActionSheet {
  export type Item<TKey = any> = dxActionSheetItem<TKey>;
}
declare namespace DevExpress.ui.dxBox {
  export type Item<TKey = any> = dxBoxItem<TKey>;
}
declare namespace DevExpress.ui.dxButtonGroup {
  export type Item = dxButtonGroupItem;
}
declare namespace DevExpress.ui.dxContextMenu {
  export type Item = dxContextMenuItem;
}
declare namespace DevExpress.ui.dxDataGrid {
  /**
   * [descr:dxDataGridToolbar]
   */
  export interface Toolbar {
    /**
     * [descr:dxDataGridToolbar.items]
     */
    items?: (DataGridPredefinedToolbarItem | ToolbarItem)[];
    /**
     * [descr:dxDataGridToolbar.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxDataGridToolbar.disabled]
     */
    disabled?: boolean;
  }
  /**
   * [descr:dxDataGridToolbarItem]
   */
  export type ToolbarItem = dxToolbarItem & {
    /**
     * [descr:dxDataGridToolbarItem.name]
     */
    name?: DataGridPredefinedToolbarItem | string;
    /**
     * [descr:dxDataGridToolbarItem.location]
     */
    location?: common.ToolbarItemLocation;
  };
}
declare namespace DevExpress.ui.dxDiagram {
  /**
   * [descr:dxDiagramItem]
   */
  export type Item = dxDiagramItem;
}
declare namespace DevExpress.ui.dxDropDownButton {
  export type Item = dxDropDownButtonItem;
}
declare namespace DevExpress.ui.dxFileManager {
  export type ContextMenuItem = dxFileManagerContextMenuItem;
  export type ToolbarItem = dxFileManagerToolbarItem;
}
declare namespace DevExpress.ui.dxForm {
  export type ButtonItem = dxFormButtonItem;
  export type EmptyItem = dxFormEmptyItem;
  export type GroupItem = dxFormGroupItem;
  export type Item =
    | SimpleItem
    | GroupItem
    | TabbedItem
    | EmptyItem
    | ButtonItem;
  export type SimpleItem = dxFormSimpleItem;
  export type TabbedItem = dxFormTabbedItem;
}
declare namespace DevExpress.ui.dxGallery {
  export type Item = dxGalleryItem;
}
declare namespace DevExpress.ui.dxGantt {
  export type ContextMenuItem = dxGanttContextMenuItem;
  export type ToolbarItem = dxGanttToolbarItem;
}
declare namespace DevExpress.ui.dxHtmlEditor {
  export type ContextMenuItem = dxHtmlEditorTableContextMenuItem;
  export type ImageUploadTab = dxHtmlEditorImageUploadTabItem;
  export type ToolbarItem = dxHtmlEditorToolbarItem;
}
declare namespace DevExpress.ui.dxList {
  export type Item = dxListItem;
}
declare namespace DevExpress.ui.dxMenu {
  export type Item = dxMenuItem;
}
declare namespace DevExpress.ui.dxMultiView {
  export type Item = dxMultiViewItem;
}
declare namespace DevExpress.ui.dxOverlay {
  /**
   * [descr:ui.dxOverlay.baseZIndex(zIndex)]
   */
  export function baseZIndex(zIndex: number): void;
}
declare namespace DevExpress.ui.dxPivotGrid {
  export type Cell = dxPivotGridPivotGridCell;
}
declare namespace DevExpress.ui.dxPopup {
  /**
   * @deprecated Use ToolbarItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export type dxPopupToolbarItem = ToolbarItem;
  /**
   * [descr:dxPopupToolbarItem]
   */
  export interface ToolbarItem extends dxToolbar.Item {
    /**
     * [descr:dxPopupToolbarItem.toolbar]
     */
    toolbar?: ToolbarLocation;
  }
}
declare namespace DevExpress.ui.dxResponsiveBox {
  export type Item = dxResponsiveBoxItem;
}
declare namespace DevExpress.ui.dxTabPanel {
  export type Item = dxTabPanelItem;
}
declare namespace DevExpress.ui.dxTabs {
  export type Item = dxTabsItem;
}
declare namespace DevExpress.ui.dxTileView {
  export type Item = dxTileViewItem;
}
declare namespace DevExpress.ui.dxToolbar {
  export type Item = dxToolbarItem;
}
declare namespace DevExpress.ui.dxTreeList {
  /**
   * [descr:dxTreeListToolbar]
   */
  export interface Toolbar {
    /**
     * [descr:dxTreeListToolbar.items]
     */
    items?: (TreeListPredefinedToolbarItem | ToolbarItem)[];
    /**
     * [descr:dxTreeListToolbar.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxTreeListToolbar.disabled]
     */
    disabled?: boolean;
  }
  /**
   * [descr:dxTreeListToolbarItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ToolbarItem extends dxToolbarItem {
    /**
     * [descr:dxTreeListToolbarItem.name]
     */
    name?: TreeListPredefinedToolbarItem | string;
    /**
     * [descr:dxTreeListToolbarItem.location]
     */
    location?: common.ToolbarItemLocation;
  }
}
declare namespace DevExpress.ui.dxTreeView {
  export type Item = dxTreeViewItem;
}
declare namespace DevExpress.utils {
  /**
   * [descr:utils.cancelAnimationFrame(requestID)]
   */
  export function cancelAnimationFrame(requestID: number): void;
  /**
   * [descr:utils.getTimeZones(date)]
   */
  export function getTimeZones(date?: Date): dxSchedulerTimeZone[];
  /**
   * [descr:utils.initMobileViewport(options)]
   */
  export function initMobileViewport(options: {
    allowZoom?: boolean;
    allowPan?: boolean;
    allowSelection?: boolean;
  }): void;
  /**
   * [descr:utils.requestAnimationFrame(callback)]
   */
  export function requestAnimationFrame(callback: Function): number;
}
declare namespace DevExpress.viz {
  /**
   * [descr:BarGaugeBarInfo]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BarGaugeBarInfo {
    /**
     * [descr:BarGaugeBarInfo.color]
     */
    color?: string;
    /**
     * [descr:BarGaugeBarInfo.index]
     */
    index?: number;
    /**
     * [descr:BarGaugeBarInfo.value]
     */
    value?: number;
  }
  /**
   * @deprecated Use LegendItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BarGaugeLegendItem
    extends common.charts.BaseLegendItem {
    /**
     * [descr:BarGaugeLegendItem.item]
     */
    item?: BarGaugeBarInfo;
  }
  /**
   * [descr:BaseChart]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class BaseChart<TProperties> extends BaseWidget<TProperties> {
    /**
     * [descr:BaseChart.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:BaseChart.getAllSeries()]
     */
    getAllSeries(): baseSeriesObject[];
    getDataSource(): data.DataSource;
    /**
     * [descr:BaseChart.getSeriesByName(seriesName)]
     */
    getSeriesByName(seriesName: any): chartSeriesObject;
    /**
     * [descr:BaseChart.getSeriesByPos(seriesIndex)]
     */
    getSeriesByPos(seriesIndex: number): chartSeriesObject;
    /**
     * [descr:BaseChart.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:BaseChart.refresh()]
     */
    refresh(): void;
    render(): void;
    /**
     * [descr:BaseChart.render(renderOptions)]
     */
    render(renderOptions: any): void;
  }
  namespace BaseChart {
    /**
     * [descr:PointInteractionInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface PointInteractionInfo {
      /**
       * [descr:PointInteractionInfo.target]
       */
      readonly target: basePointObject;
    }
    /**
     * [descr:_viz_chart_components_base_chart_TooltipInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TooltipInfo {
      /**
       * [descr:_viz_chart_components_base_chart_TooltipInfo.target]
       */
      target?: basePointObject | dxChartAnnotationConfig | any;
    }
  }
  /**
   * [descr:BaseChartAdaptiveLayout]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartAdaptiveLayout {
    /**
     * [descr:BaseChartOptions.adaptiveLayout.height]
     */
    height?: number;
    /**
     * [descr:BaseChartOptions.adaptiveLayout.keepLabels]
     */
    keepLabels?: boolean;
    /**
     * [descr:BaseChartOptions.adaptiveLayout.width]
     */
    width?: number;
  }
  /**
   * [descr:BaseChartAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * [descr:BaseChartAnnotationConfig.argument]
     */
    argument?: number | Date | string;
    /**
     * [descr:BaseChartAnnotationConfig.series]
     */
    series?: string;
    /**
     * [descr:BaseChartAnnotationConfig.value]
     */
    value?: number | Date | string;
  }
  /**
   * [descr:BaseChartLegend]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartLegend extends common.charts.BaseLegend {
    /**
     * [descr:BaseChartOptions.legend.customizeItems]
     */
    customizeItems?: (
      items: BaseChartLegendItem[]
    ) => BaseChartLegendItem[];
    /**
     * [descr:BaseChartOptions.legend.markerTemplate]
     */
    markerTemplate?:
    | core.template
    | ((
      legendItem: BaseChartLegendItem,
      element: SVGGElement
    ) => string | core.UserDefinedElement<SVGElement>);
  }
  /**
   * [descr:BaseChartLegendItem]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartLegendItem
    extends common.charts.BaseLegendItem {
    /**
     * [descr:BaseChartLegendItem.series]
     */
    series?: baseSeriesObject;
  }
  /**
   * [descr:BaseChartOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * [descr:BaseChartOptions.adaptiveLayout]
     */
    adaptiveLayout?: BaseChartAdaptiveLayout;
    /**
     * [descr:BaseChartOptions.animation]
     */
    animation?:
    | {
      /**
           * [descr:BaseChartOptions.animation.duration]
           */
      duration?: number;
      /**
           * [descr:BaseChartOptions.animation.easing]
           */
      easing?: common.charts.AnimationEaseMode;
      /**
           * [descr:BaseChartOptions.animation.enabled]
           */
      enabled?: boolean;
      /**
           * [descr:BaseChartOptions.animation.maxPointCountSupported]
           */
      maxPointCountSupported?: number;
    }
    | boolean;
    /**
     * [descr:BaseChartOptions.customizeLabel]
     */
    customizeLabel?: (pointInfo: any) => dxChartSeriesTypesCommonSeriesLabel;
    /**
     * [descr:BaseChartOptions.customizePoint]
     */
    customizePoint?: (pointInfo: any) => dxChartSeriesTypesCommonSeriesPoint;
    /**
     * [descr:BaseChartOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<any> | null;
    /**
     * [descr:BaseChartOptions.legend]
     */
    legend?: BaseChartLegend;
    /**
     * [descr:BaseChartOptions.onDone]
     */
    onDone?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseChartOptions.onPointClick]
     */
    onPointClick?:
    | ((
      e: events.NativeEventInfo<
      TComponent,
      MouseEvent | PointerEvent
      > &
      BaseChart.PointInteractionInfo
    ) => void)
    | string;
    /**
     * [descr:BaseChartOptions.onPointHoverChanged]
     */
    onPointHoverChanged?: (
      e: events.EventInfo<TComponent> &
      BaseChart.PointInteractionInfo
    ) => void;
    /**
     * [descr:BaseChartOptions.onPointSelectionChanged]
     */
    onPointSelectionChanged?: (
      e: events.EventInfo<TComponent> &
      BaseChart.PointInteractionInfo
    ) => void;
    /**
     * [descr:BaseChartOptions.onTooltipHidden]
     */
    onTooltipHidden?: (
      e: events.EventInfo<TComponent> &
      BaseChart.TooltipInfo
    ) => void;
    /**
     * [descr:BaseChartOptions.onTooltipShown]
     */
    onTooltipShown?: (
      e: events.EventInfo<TComponent> &
      BaseChart.TooltipInfo
    ) => void;
    /**
     * [descr:BaseChartOptions.palette]
     */
    palette?: string[] | common.charts.Palette;
    /**
     * [descr:BaseChartOptions.paletteExtensionMode]
     */
    paletteExtensionMode?: common.charts.PaletteExtensionMode;
    /**
     * [descr:BaseChartOptions.pointSelectionMode]
     */
    pointSelectionMode?: common.SingleOrMultiple;
    /**
     * [descr:BaseChartOptions.series]
     */
    series?: any | any[];
    /**
     * [descr:BaseChartOptions.tooltip]
     */
    tooltip?: BaseChartTooltip;
  }
  /**
   * [descr:BaseChartTooltip]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseChartTooltip extends BaseWidgetTooltip {
    /**
     * [descr:BaseChartOptions.tooltip.argumentFormat]
     */
    argumentFormat?: ui.Format;
    /**
     * [descr:BaseChartOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
    | core.template
    | ((
      pointInfo: any,
      element: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:BaseChartOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (pointInfo: any) => any;
    /**
     * [descr:BaseChartOptions.tooltip.shared]
     */
    shared?: boolean;
    /**
     * [descr:BaseChartOptions.tooltip.interactive]
     */
    interactive?: boolean;
  }
  /**
   * [descr:BaseGauge]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class BaseGauge<TProperties> extends BaseWidget<TProperties> {
    /**
     * [descr:BaseGauge.subvalues()]
     */
    subvalues(): number[];
    /**
     * [descr:BaseGauge.subvalues(subvalues)]
     */
    subvalues(subvalues: number[]): void;
    /**
     * [descr:BaseGauge.value()]
     */
    value(): number;
    /**
     * [descr:BaseGauge.value(value)]
     */
    value(value: number): void;
  }
  namespace BaseGauge {
    export type GaugeIndicatorType =
      | 'circle'
      | 'rangeBar'
      | 'rectangle'
      | 'rectangleNeedle'
      | 'rhombus'
      | 'textCloud'
      | 'triangleMarker'
      | 'triangleNeedle'
      | 'twoColorNeedle';
    /**
     * [descr:_viz_base_gauge_TooltipInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TooltipInfo {
      /**
       * [descr:_viz_base_gauge_TooltipInfo.target]
       */
      target: any;
    }
  }
  /**
   * [descr:BaseGaugeAnimation]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeAnimation {
    /**
     * [descr:BaseGaugeOptions.animation.duration]
     */
    duration?: number;
    /**
     * [descr:BaseGaugeOptions.animation.easing]
     */
    easing?: common.charts.AnimationEaseMode;
    /**
     * [descr:BaseGaugeOptions.animation.enabled]
     */
    enabled?: boolean;
  }
  /**
   * [descr:BaseGaugeLoadingIndicator]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeLoadingIndicator
    extends BaseWidgetLoadingIndicator {
    /**
     * [descr:BaseGaugeOptions.loadingIndicator.enabled]
     */
    enabled?: boolean;
  }
  /**
   * [descr:BaseGaugeOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * [descr:BaseGaugeOptions.animation]
     */
    animation?: BaseGaugeAnimation;
    /**
     * [descr:BaseGaugeOptions.containerBackgroundColor]
     */
    containerBackgroundColor?: string;
    /**
     * [descr:BaseGaugeOptions.loadingIndicator]
     */
    loadingIndicator?: BaseGaugeLoadingIndicator;
    /**
     * [descr:BaseGaugeOptions.onTooltipHidden]
     */
    onTooltipHidden?: (
      e: events.EventInfo<TComponent> &
      BaseGauge.TooltipInfo
    ) => void;
    /**
     * [descr:BaseGaugeOptions.onTooltipShown]
     */
    onTooltipShown?: (
      e: events.EventInfo<TComponent> &
      BaseGauge.TooltipInfo
    ) => void;
    /**
     * [descr:BaseGaugeOptions.rangeContainer]
     */
    rangeContainer?: BaseGaugeRangeContainer;
    /**
     * [descr:BaseGaugeOptions.scale]
     */
    scale?: BaseGaugeScale;
    /**
     * [descr:BaseGaugeOptions.subvalues]
     */
    subvalues?: number[];
    /**
     * [descr:BaseGaugeOptions.tooltip]
     */
    tooltip?: BaseGaugeTooltip;
    /**
     * [descr:BaseGaugeOptions.value]
     */
    value?: number;
  }
  /**
   * [descr:BaseGaugeRangeContainer]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeRangeContainer {
    /**
     * [descr:BaseGaugeOptions.rangeContainer.backgroundColor]
     */
    backgroundColor?: string | common.charts.ChartsColor;
    /**
     * [descr:BaseGaugeOptions.rangeContainer.offset]
     */
    offset?: number;
    /**
     * [descr:BaseGaugeOptions.rangeContainer.palette]
     */
    palette?: string[] | common.charts.Palette;
    /**
     * [descr:BaseGaugeOptions.rangeContainer.paletteExtensionMode]
     */
    paletteExtensionMode?: common.charts.PaletteExtensionMode;
    /**
     * [descr:BaseGaugeOptions.rangeContainer.ranges]
     */
    ranges?: {
      /**
       * [descr:BaseGaugeOptions.rangeContainer.ranges.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:BaseGaugeOptions.rangeContainer.ranges.endValue]
       */
      endValue?: number;
      /**
       * [descr:BaseGaugeOptions.rangeContainer.ranges.startValue]
       */
      startValue?: number;
    }[];
  }
  /**
   * [descr:BaseGaugeScale]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeScale {
    /**
     * [descr:BaseGaugeOptions.scale.allowDecimals]
     */
    allowDecimals?: boolean;
    /**
     * [descr:BaseGaugeOptions.scale.customMinorTicks]
     */
    customMinorTicks?: number[];
    /**
     * [descr:BaseGaugeOptions.scale.customTicks]
     */
    customTicks?: number[];
    /**
     * [descr:BaseGaugeOptions.scale.endValue]
     */
    endValue?: number;
    /**
     * [descr:BaseGaugeOptions.scale.label]
     */
    label?: BaseGaugeScaleLabel;
    /**
     * [descr:BaseGaugeOptions.scale.minorTick]
     */
    minorTick?: {
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.color]
       */
      color?: string;
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.length]
       */
      length?: number;
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseGaugeOptions.scale.minorTick.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseGaugeOptions.scale.minorTickInterval]
     */
    minorTickInterval?: number;
    /**
     * [descr:BaseGaugeOptions.scale.scaleDivisionFactor]
     */
    scaleDivisionFactor?: number;
    /**
     * [descr:BaseGaugeOptions.scale.startValue]
     */
    startValue?: number;
    /**
     * [descr:BaseGaugeOptions.scale.tick]
     */
    tick?: {
      /**
       * [descr:BaseGaugeOptions.scale.tick.color]
       */
      color?: string;
      /**
       * [descr:BaseGaugeOptions.scale.tick.length]
       */
      length?: number;
      /**
       * [descr:BaseGaugeOptions.scale.tick.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseGaugeOptions.scale.tick.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseGaugeOptions.scale.tick.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseGaugeOptions.scale.tickInterval]
     */
    tickInterval?: number;
  }
  /**
   * [descr:BaseGaugeScaleLabel]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeScaleLabel {
    /**
     * [descr:BaseGaugeOptions.scale.label.customizeText]
     */
    customizeText?: (scaleValue: {
      value?: number;
      valueText?: string;
    }) => string;
    /**
     * [descr:BaseGaugeOptions.scale.label.font]
     */
    font?: Font;
    /**
     * [descr:BaseGaugeOptions.scale.label.format]
     */
    format?: ui.Format;
    /**
     * [descr:BaseGaugeOptions.scale.label.overlappingBehavior]
     */
    overlappingBehavior?: common.charts.LabelOverlap;
    /**
     * [descr:BaseGaugeOptions.scale.label.useRangeColors]
     */
    useRangeColors?: boolean;
    /**
     * [descr:BaseGaugeOptions.scale.label.visible]
     */
    visible?: boolean;
  }
  /**
   * [descr:BaseGaugeTooltip]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseGaugeTooltip extends BaseWidgetTooltip {
    /**
     * [descr:BaseGaugeOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
    | core.template
    | ((
      scaleValue: { value?: number; valueText?: string },
      element: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:BaseGaugeOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (scaleValue: {
      value?: number;
      valueText?: string;
    }) => any;
    /**
     * [descr:BaseGaugeOptions.tooltip.interactive]
     */
    interactive?: boolean;
  }
  /**
   * [descr:baseLabelObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface baseLabelObject {
    /**
     * [descr:baseLabelObject.getBoundingRect()]
     */
    getBoundingRect(): any;
    /**
     * [descr:baseLabelObject.shift(x, y)]
     */
    shift(x: number, y: number): this;
    /**
     * [descr:baseLabelObject.hide()]
     */
    hide(): void;
    /**
     * [descr:baseLabelObject.hide(holdInvisible)]
     */
    hide(holdInvisible: boolean): void;
    /**
     * [descr:baseLabelObject.isVisible()]
     */
    isVisible(): boolean;
    /**
     * [descr:baseLabelObject.show()]
     */
    show(): void;
    /**
     * [descr:baseLabelObject.show(holdVisible)]
     */
    show(holdVisible: boolean): void;
  }
  /**
   * [descr:basePointObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface basePointObject {
    /**
     * [descr:basePointObject.clearHover()]
     */
    clearHover(): void;
    /**
     * [descr:basePointObject.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:basePointObject.data]
     */
    data?: any;
    /**
     * [descr:basePointObject.fullState]
     */
    fullState?: number;
    /**
     * [descr:basePointObject.getColor()]
     */
    getColor(): string;
    /**
     * [descr:basePointObject.getLabel()]
     */
    getLabel(): baseLabelObject & baseLabelObject[];
    /**
     * [descr:basePointObject.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:basePointObject.hover()]
     */
    hover(): void;
    /**
     * [descr:basePointObject.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:basePointObject.isSelected()]
     */
    isSelected(): boolean;
    /**
     * [descr:basePointObject.originalArgument]
     */
    originalArgument?: string | number | Date;
    /**
     * [descr:basePointObject.originalValue]
     */
    originalValue?: string | number | Date;
    /**
     * [descr:basePointObject.select()]
     */
    select(): void;
    /**
     * [descr:basePointObject.series]
     */
    series?: any;
    /**
     * [descr:basePointObject.showTooltip()]
     */
    showTooltip(): void;
    /**
     * [descr:basePointObject.tag]
     */
    tag?: any;
  }
  /**
   * [descr:baseSeriesObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface baseSeriesObject {
    /**
     * [descr:baseSeriesObject.clearHover()]
     */
    clearHover(): void;
    /**
     * [descr:baseSeriesObject.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:baseSeriesObject.deselectPoint(point)]
     */
    deselectPoint(point: basePointObject): void;
    /**
     * [descr:baseSeriesObject.fullState]
     */
    fullState?: number;
    /**
     * [descr:baseSeriesObject.getAllPoints()]
     */
    getAllPoints(): basePointObject[];
    /**
     * [descr:baseSeriesObject.getColor()]
     */
    getColor(): string;
    /**
     * [descr:baseSeriesObject.getPointByPos(positionIndex)]
     */
    getPointByPos(positionIndex: number): basePointObject;
    /**
     * [descr:baseSeriesObject.getPointsByArg(pointArg)]
     */
    getPointsByArg(pointArg: number | string | Date): basePointObject[];
    /**
     * [descr:baseSeriesObject.getVisiblePoints()]
     */
    getVisiblePoints(): basePointObject[];
    /**
     * [descr:baseSeriesObject.hide()]
     */
    hide(): void;
    /**
     * [descr:baseSeriesObject.hover()]
     */
    hover(): void;
    /**
     * [descr:baseSeriesObject.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:baseSeriesObject.isSelected()]
     */
    isSelected(): boolean;
    /**
     * [descr:baseSeriesObject.isVisible()]
     */
    isVisible(): boolean;
    /**
     * [descr:baseSeriesObject.name]
     */
    name?: any;
    /**
     * [descr:baseSeriesObject.select()]
     */
    select(): void;
    /**
     * [descr:baseSeriesObject.selectPoint(point)]
     */
    selectPoint(point: basePointObject): void;
    /**
     * [descr:baseSeriesObject.show()]
     */
    show(): void;
    /**
     * [descr:baseSeriesObject.tag]
     */
    tag?: any;
    /**
     * [descr:baseSeriesObject.type]
     */
    type?: string;
  }
  /**
   * [descr:BaseSparkline]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class BaseSparkline<TProperties> extends BaseWidget<TProperties> {
    /**
     * [descr:BaseSparkline.hideLoadingIndicator()]
     */
    hideLoadingIndicator(): void;
    /**
     * [descr:BaseSparkline.showLoadingIndicator()]
     */
    showLoadingIndicator(): void;
  }
  /**
   * [descr:BaseSparklineOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseSparklineOptions<TComponent>
    extends BaseWidgetOptions<TComponent> {
    /**
     * [descr:BaseSparklineOptions.export]
     */
    export?: BaseWidgetExport;
    /**
     * [descr:BaseSparklineOptions.loadingIndicator]
     */
    loadingIndicator?: BaseWidgetLoadingIndicator;
    /**
     * [descr:BaseSparklineOptions.onTooltipHidden]
     */
    onTooltipHidden?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseSparklineOptions.onTooltipShown]
     */
    onTooltipShown?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseSparklineOptions.redrawOnResize]
     */
    redrawOnResize?: boolean;
    /**
     * [descr:BaseSparklineOptions.title]
     */
    title?: BaseWidgetTitle | string;
    /**
     * [descr:BaseSparklineOptions.tooltip]
     */
    tooltip?: BaseSparklineTooltip;
  }
  /**
   * [descr:BaseSparklineTooltip]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseSparklineTooltip extends BaseWidgetTooltip {
    /**
     * [descr:BaseSparklineOptions.tooltip.contentTemplate]
     */
    contentTemplate?:
    | core.template
    | ((
      pointsInfo: any,
      element: core.DxElement
    ) => string | core.UserDefinedElement);
    /**
     * [descr:BaseSparklineOptions.tooltip.customizeTooltip]
     */
    customizeTooltip?: (pointsInfo: any) => any;
    /**
     * [descr:BaseSparklineOptions.tooltip.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:BaseSparklineOptions.tooltip.interactive]
     */
    interactive?: boolean;
  }
  /**
   * [descr:BaseWidget]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export class BaseWidget<TProperties> extends DOMComponent<TProperties> {
    /**
     * [descr:BaseWidget.defaultOptions(rule)]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    static defaultOptions<TProperties>(
      rule: core.DefaultOptionsRule<TProperties>
    ): void;
    /**
     * [descr:BaseWidget.exportTo(fileName, format)]
     */
    exportTo(fileName: string, format: string): void;
    /**
     * [descr:BaseWidget.getSize()]
     */
    getSize(): BaseWidgetSize;
    /**
     * [descr:BaseWidget.hideLoadingIndicator()]
     */
    hideLoadingIndicator(): void;
    /**
     * [descr:BaseWidget.print()]
     */
    print(): void;
    /**
     * [descr:BaseWidget.render()]
     */
    render(): void;
    /**
     * [descr:BaseWidget.showLoadingIndicator()]
     */
    showLoadingIndicator(): void;
    /**
     * [descr:BaseWidget.svg()]
     */
    svg(): string;
  }
  namespace BaseWidget {
    /**
     * [descr:ExportInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface ExportInfo {
      /**
       * [descr:ExportInfo.fileName]
       */
      readonly fileName: string;
      /**
       * [descr:ExportInfo.format]
       */
      readonly format: string;
    }
    /**
     * [descr:FileSavingEventInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type FileSavingEventInfo<T> = events.Cancelable & {
      /**
       * [descr:FileSavingEventInfo.component]
       */
      readonly component: T;
      /**
       * [descr:FileSavingEventInfo.element]
       */
      readonly element: core.DxElement;
      /**
       * [descr:FileSavingEventInfo.fileName]
       */
      readonly fileName: string;
      /**
       * [descr:FileSavingEventInfo.format]
       */
      readonly format: string;
      /**
       * [descr:FileSavingEventInfo.data]
       */
      readonly data: Blob;
    };
    /**
     * [descr:IncidentInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface IncidentInfo {
      /**
       * [descr:IncidentInfo.target]
       */
      readonly target: any;
    }
  }
  /**
   * [descr:BaseWidgetAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetAnnotationConfig {
    /**
     * [descr:BaseWidgetAnnotationConfig.allowDragging]
     */
    allowDragging?: boolean;
    /**
     * [descr:BaseWidgetAnnotationConfig.arrowLength]
     */
    arrowLength?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.arrowWidth]
     */
    arrowWidth?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.border]
     */
    border?: {
      /**
       * [descr:BaseWidgetAnnotationConfig.border.color]
       */
      color?: string;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.cornerRadius]
       */
      cornerRadius?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseWidgetAnnotationConfig.border.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseWidgetAnnotationConfig.color]
     */
    color?: string;
    /**
     * [descr:BaseWidgetAnnotationConfig.data]
     */
    data?: any;
    /**
     * [descr:BaseWidgetAnnotationConfig.description]
     */
    description?: string;
    /**
     * [descr:BaseWidgetAnnotationConfig.font]
     */
    font?: Font;
    /**
     * [descr:BaseWidgetAnnotationConfig.height]
     */
    height?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.image]
     */
    image?:
    | string
    | {
      /**
           * [descr:BaseWidgetAnnotationConfig.image.height]
           */
      height?: number;
      /**
           * [descr:BaseWidgetAnnotationConfig.image.url]
           */
      url?: string;
      /**
           * [descr:BaseWidgetAnnotationConfig.image.width]
           */
      width?: number;
    };
    /**
     * [descr:BaseWidgetAnnotationConfig.offsetX]
     */
    offsetX?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.offsetY]
     */
    offsetY?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.opacity]
     */
    opacity?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.paddingLeftRight]
     */
    paddingLeftRight?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.paddingTopBottom]
     */
    paddingTopBottom?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.shadow]
     */
    shadow?: {
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.blur]
       */
      blur?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.color]
       */
      color?: string;
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.offsetX]
       */
      offsetX?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.offsetY]
       */
      offsetY?: number;
      /**
       * [descr:BaseWidgetAnnotationConfig.shadow.opacity]
       */
      opacity?: number;
    };
    /**
     * [descr:BaseWidgetAnnotationConfig.text]
     */
    text?: string;
    /**
     * [descr:BaseWidgetAnnotationConfig.textOverflow]
     */
    textOverflow?: common.charts.TextOverflow;
    /**
     * [descr:BaseWidgetAnnotationConfig.tooltipEnabled]
     */
    tooltipEnabled?: boolean;
    /**
     * [descr:BaseWidgetAnnotationConfig.type]
     */
    type?: common.charts.AnnotationType;
    /**
     * [descr:BaseWidgetAnnotationConfig.width]
     */
    width?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.wordWrap]
     */
    wordWrap?: common.charts.WordWrap;
    /**
     * [descr:BaseWidgetAnnotationConfig.x]
     */
    x?: number;
    /**
     * [descr:BaseWidgetAnnotationConfig.y]
     */
    y?: number;
  }
  /**
   * [descr:BaseWidgetExport]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetExport {
    /**
     * [descr:BaseWidgetOptions.export.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:BaseWidgetOptions.export.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.export.fileName]
     */
    fileName?: string;
    /**
     * [descr:BaseWidgetOptions.export.formats]
     */
    formats?: common.ExportFormat[];
    /**
     * [descr:BaseWidgetOptions.export.margin]
     */
    margin?: number;
    /**
     * [descr:BaseWidgetOptions.export.printingEnabled]
     */
    printingEnabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.export.svgToCanvas]
     */
    svgToCanvas?: (
      svg: SVGElement,
      canvas: HTMLCanvasElement
    ) => PromiseLike<void>;
  }
  /**
   * [descr:BaseWidgetLoadingIndicator]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetLoadingIndicator {
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.font]
     */
    font?: Font;
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.show]
     */
    show?: boolean;
    /**
     * [descr:BaseWidgetOptions.loadingIndicator.text]
     */
    text?: string;
  }
  /**
   * [descr:BaseWidgetMargin]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetMargin {
    /**
     * [descr:BaseWidgetOptions.margin.bottom]
     */
    bottom?: number;
    /**
     * [descr:BaseWidgetOptions.margin.left]
     */
    left?: number;
    /**
     * [descr:BaseWidgetOptions.margin.right]
     */
    right?: number;
    /**
     * [descr:BaseWidgetOptions.margin.top]
     */
    top?: number;
  }
  /**
   * [descr:BaseWidgetOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetOptions<TComponent>
    extends DOMComponentOptions<TComponent> {
    /**
     * [descr:BaseWidgetOptions.disabled]
     */
    disabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.export]
     */
    export?: BaseWidgetExport;
    /**
     * [descr:BaseWidgetOptions.height]
     */
    height?: number | string | (() => number | string);
    /**
     * [descr:BaseWidgetOptions.loadingIndicator]
     */
    loadingIndicator?: BaseWidgetLoadingIndicator;
    /**
     * [descr:BaseWidgetOptions.margin]
     */
    margin?: BaseWidgetMargin;
    /**
     * [descr:BaseWidgetOptions.onDrawn]
     */
    onDrawn?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseWidgetOptions.onExported]
     */
    onExported?: (e: events.EventInfo<TComponent>) => void;
    /**
     * [descr:BaseWidgetOptions.onExporting]
     */
    onExporting?: (
      e: events.EventInfo<TComponent> &
      BaseWidget.ExportInfo
    ) => void;
    /**
     * [descr:BaseWidgetOptions.onFileSaving]
     */
    onFileSaving?: (
      e: BaseWidget.FileSavingEventInfo<TComponent>
    ) => void;
    /**
     * [descr:BaseWidgetOptions.onIncidentOccurred]
     */
    onIncidentOccurred?: (
      e: events.EventInfo<TComponent> &
      BaseWidget.IncidentInfo
    ) => void;
    /**
     * [descr:BaseWidgetOptions.pathModified]
     */
    pathModified?: boolean;
    /**
     * [descr:BaseWidgetOptions.redrawOnResize]
     */
    redrawOnResize?: boolean;
    /**
     * [descr:BaseWidgetOptions.rtlEnabled]
     */
    rtlEnabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.size]
     */
    size?: BaseWidgetSize;
    /**
     * [descr:BaseWidgetOptions.theme]
     */
    theme?: common.charts.Theme;
    /**
     * [descr:BaseWidgetOptions.title]
     */
    title?: BaseWidgetTitle | string;
    /**
     * [descr:BaseWidgetOptions.tooltip]
     */
    tooltip?: BaseWidgetTooltip;
    /**
     * [descr:BaseWidgetOptions.width]
     */
    width?: number | string | (() => number | string);
  }
  /**
   * [descr:BaseWidgetSize]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetSize {
    /**
     * [descr:BaseWidgetOptions.size.height]
     */
    height?: number;
    /**
     * [descr:BaseWidgetOptions.size.width]
     */
    width?: number;
  }
  /**
   * [descr:BaseWidgetTitle]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetTitle {
    /**
     * [descr:BaseWidgetOptions.title.font]
     */
    font?: Font;
    /**
     * [descr:BaseWidgetOptions.title.horizontalAlignment]
     */
    horizontalAlignment?: common.HorizontalAlignment;
    /**
     * [descr:BaseWidgetOptions.title.margin]
     */
    margin?:
    | number
    | {
      /**
           * [descr:BaseWidgetOptions.title.margin.bottom]
           */
      bottom?: number;
      /**
           * [descr:BaseWidgetOptions.title.margin.left]
           */
      left?: number;
      /**
           * [descr:BaseWidgetOptions.title.margin.right]
           */
      right?: number;
      /**
           * [descr:BaseWidgetOptions.title.margin.top]
           */
      top?: number;
    };
    /**
     * [descr:BaseWidgetOptions.title.placeholderSize]
     */
    placeholderSize?: number;
    /**
     * [descr:BaseWidgetOptions.title.subtitle]
     */
    subtitle?:
    | {
      /**
           * [descr:BaseWidgetOptions.title.subtitle.font]
           */
      font?: Font;
      /**
           * [descr:BaseWidgetOptions.title.subtitle.offset]
           */
      offset?: number;
      /**
           * [descr:BaseWidgetOptions.title.subtitle.text]
           */
      text?: string;
      /**
           * [descr:BaseWidgetOptions.title.subtitle.textOverflow]
           */
      textOverflow?: common.charts.TextOverflow;
      /**
           * [descr:BaseWidgetOptions.title.subtitle.wordWrap]
           */
      wordWrap?: common.charts.WordWrap;
    }
    | string;
    /**
     * [descr:BaseWidgetOptions.title.text]
     */
    text?: string;
    /**
     * [descr:BaseWidgetOptions.title.textOverflow]
     */
    textOverflow?: common.charts.TextOverflow;
    /**
     * [descr:BaseWidgetOptions.title.verticalAlignment]
     */
    verticalAlignment?: common.VerticalEdge;
    /**
     * [descr:BaseWidgetOptions.title.wordWrap]
     */
    wordWrap?: common.charts.WordWrap;
  }
  /**
   * [descr:BaseWidgetTooltip]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface BaseWidgetTooltip {
    /**
     * [descr:BaseWidgetOptions.tooltip.arrowLength]
     */
    arrowLength?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.border]
     */
    border?: {
      /**
       * [descr:BaseWidgetOptions.tooltip.border.color]
       */
      color?: string;
      /**
       * [descr:BaseWidgetOptions.tooltip.border.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:BaseWidgetOptions.tooltip.border.opacity]
       */
      opacity?: number;
      /**
       * [descr:BaseWidgetOptions.tooltip.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:BaseWidgetOptions.tooltip.border.width]
       */
      width?: number;
    };
    /**
     * [descr:BaseWidgetOptions.tooltip.color]
     */
    color?: string;
    /**
     * [descr:BaseWidgetOptions.tooltip.container]
     */
    container?: string | core.UserDefinedElement;
    /**
     * [descr:BaseWidgetOptions.tooltip.cornerRadius]
     */
    cornerRadius?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:BaseWidgetOptions.tooltip.font]
     */
    font?: Font;
    /**
     * [descr:BaseWidgetOptions.tooltip.format]
     */
    format?: ui.Format;
    /**
     * [descr:BaseWidgetOptions.tooltip.opacity]
     */
    opacity?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.paddingLeftRight]
     */
    paddingLeftRight?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.paddingTopBottom]
     */
    paddingTopBottom?: number;
    /**
     * [descr:BaseWidgetOptions.tooltip.shadow]
     */
    shadow?: {
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.blur]
       */
      blur?: number;
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.color]
       */
      color?: string;
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.offsetX]
       */
      offsetX?: number;
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.offsetY]
       */
      offsetY?: number;
      /**
       * [descr:BaseWidgetOptions.tooltip.shadow.opacity]
       */
      opacity?: number;
    };
    /**
     * [descr:BaseWidgetOptions.tooltip.zIndex]
     */
    zIndex?: number;
  }
  /**
   * [descr:chartAxisObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface chartAxisObject {
    /**
     * [descr:chartAxisObject.visualRange()]
     */
    visualRange(): common.charts.VisualRange;
    /**
     * [descr:chartAxisObject.visualRange(visualRange)]
     */
    visualRange(
      visualRange:
      | (number | string | Date)[]
      | common.charts.VisualRange
    ): void;
  }
  /**
   * [descr:chartPointAggregationInfoObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface chartPointAggregationInfoObject {
    /**
     * [descr:chartPointAggregationInfoObject.aggregationInterval]
     */
    aggregationInterval?: any;
    /**
     * [descr:chartPointAggregationInfoObject.data]
     */
    data?: any[];
    /**
     * [descr:chartPointAggregationInfoObject.intervalEnd]
     */
    intervalEnd?: any;
    /**
     * [descr:chartPointAggregationInfoObject.intervalStart]
     */
    intervalStart?: any;
  }
  /**
   * [descr:chartPointObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface chartPointObject extends basePointObject {
    /**
     * [descr:chartPointObject.aggregationInfo]
     */
    aggregationInfo?: chartPointAggregationInfoObject;
    /**
     * [descr:chartPointObject.getBoundingRect()]
     */
    getBoundingRect(): any;
    /**
     * [descr:chartPointObject.originalCloseValue]
     */
    originalCloseValue?: number | string;
    /**
     * [descr:chartPointObject.originalHighValue]
     */
    originalHighValue?: number | string;
    /**
     * [descr:chartPointObject.originalLowValue]
     */
    originalLowValue?: number | string;
    /**
     * [descr:chartPointObject.originalMinValue]
     */
    originalMinValue?: string | number | Date;
    /**
     * [descr:chartPointObject.originalOpenValue]
     */
    originalOpenValue?: number | string;
    /**
     * [descr:chartPointObject.size]
     */
    size?: number | string;
  }
  /**
   * [descr:ChartSeries]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface ChartSeries extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:ChartSeries.name]
     */
    name?: string;
    /**
     * [descr:ChartSeries.tag]
     */
    tag?: any;
    /**
     * [descr:ChartSeries.type]
     */
    type?: common.charts.SeriesType;
  }
  /**
   * [descr:chartSeriesObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface chartSeriesObject extends baseSeriesObject {
    /**
     * [descr:chartSeriesObject.axis]
     */
    axis?: string;
    /**
     * [descr:chartSeriesObject.barOverlapGroup]
     */
    barOverlapGroup?: string;
    /**
     * [descr:chartSeriesObject.getArgumentAxis()]
     */
    getArgumentAxis(): chartAxisObject;
    /**
     * [descr:chartSeriesObject.getValueAxis()]
     */
    getValueAxis(): chartAxisObject;
    /**
     * [descr:chartSeriesObject.pane]
     */
    pane?: string;
    /**
     * [descr:chartSeriesObject.stack]
     */
    stack?: string;
  }
  /**
   * [descr:CommonIndicator]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface CommonIndicator {
    /**
     * [descr:CommonIndicator.arrowLength]
     */
    arrowLength?: number;
    /**
     * [descr:CommonIndicator.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:CommonIndicator.baseValue]
     */
    baseValue?: number;
    /**
     * [descr:CommonIndicator.beginAdaptingAtRadius]
     */
    beginAdaptingAtRadius?: number;
    /**
     * [descr:CommonIndicator.color]
     */
    color?: string | common.charts.ChartsColor;
    /**
     * [descr:CommonIndicator.horizontalOrientation]
     */
    horizontalOrientation?: common.HorizontalEdge;
    /**
     * [descr:CommonIndicator.indentFromCenter]
     */
    indentFromCenter?: number;
    /**
     * [descr:CommonIndicator.length]
     */
    length?: number;
    /**
     * [descr:CommonIndicator.offset]
     */
    offset?: number;
    /**
     * [descr:CommonIndicator.palette]
     */
    palette?: string[] | common.charts.Palette;
    /**
     * [descr:CommonIndicator.secondColor]
     */
    secondColor?: string;
    /**
     * [descr:CommonIndicator.secondFraction]
     */
    secondFraction?: number;
    /**
     * [descr:CommonIndicator.size]
     */
    size?: number;
    /**
     * [descr:CommonIndicator.spindleGapSize]
     */
    spindleGapSize?: number;
    /**
     * [descr:CommonIndicator.spindleSize]
     */
    spindleSize?: number;
    /**
     * [descr:CommonIndicator.text]
     */
    text?: {
      /**
       * [descr:CommonIndicator.text.customizeText]
       */
      customizeText?: (indicatedValue: {
        value?: number;
        valueText?: string;
      }) => string;
      /**
       * [descr:CommonIndicator.text.font]
       */
      font?: Font;
      /**
       * [descr:CommonIndicator.text.format]
       */
      format?: ui.Format;
      /**
       * [descr:CommonIndicator.text.indent]
       */
      indent?: number;
    };
    /**
     * [descr:CommonIndicator.verticalOrientation]
     */
    verticalOrientation?: common.VerticalEdge;
    /**
     * [descr:CommonIndicator.width]
     */
    width?: number;
  }
  /**
   * [descr:viz.currentPalette()]
   */
  export function currentPalette(): string;
  /**
   * [descr:viz.currentPalette(paletteName)]
   */
  export function currentPalette(paletteName: string): void;
  /**
   * [descr:viz.currentTheme()]
   */
  export function currentTheme(): string;
  /**
   * [descr:viz.currentTheme(platform, colorScheme)]
   */
  export function currentTheme(platform: string, colorScheme: string): void;
  /**
   * [descr:viz.currentTheme(theme)]
   */
  export function currentTheme(theme: string): void;
  /**
   * [descr:dxBarGauge]
   */
  export class dxBarGauge extends BaseWidget<dxBarGaugeOptions> {
    /**
     * [descr:dxBarGauge.values()]
     */
    values(): number[];
    /**
     * [descr:dxBarGauge.values(newValues)]
     */
    values(values: number[]): void;
  }
  namespace dxBarGauge {
    /**
     * [descr:_viz_bar_gauge_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxBarGauge>;
    /**
     * [descr:_viz_bar_gauge_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxBarGauge>;
    /**
     * [descr:_viz_bar_gauge_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxBarGauge>;
    /**
     * [descr:_viz_bar_gauge_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxBarGauge> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_bar_gauge_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxBarGauge>;
    /**
     * [descr:_viz_bar_gauge_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent =
      events.EventInfo<dxBarGauge> &
      BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_bar_gauge_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxBarGauge>;
    /**
     * [descr:dxBarGaugeLegend]
     */
    export type Legend = common.charts.BaseLegend & {
      /**
       * [descr:dxBarGaugeOptions.legend.customizeHint]
       */
      customizeHint?: (arg: {
        item?: BarGaugeBarInfo;
        text?: string;
      }) => string;
      /**
       * [descr:dxBarGaugeOptions.legend.customizeItems]
       */
      customizeItems?: (items: LegendItem[]) => LegendItem[];
      /**
       * [descr:dxBarGaugeOptions.legend.customizeText]
       */
      customizeText?: (arg: {
        item?: BarGaugeBarInfo;
        text?: string;
      }) => string;
      /**
       * [descr:dxBarGaugeOptions.legend.itemTextFormat]
       */
      itemTextFormat?: ui.Format;
      /**
       * [descr:dxBarGaugeOptions.legend.markerTemplate]
       */
      markerTemplate?:
      | core.template
      | ((
        legendItem: LegendItem,
        element: SVGGElement
      ) => string | core.UserDefinedElement<SVGElement>);
      /**
       * [descr:dxBarGaugeOptions.legend.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxBarGaugeLoadingIndicator]
     */
    export type LoadingIndicator = BaseWidgetLoadingIndicator & {
      /**
       * [descr:dxBarGaugeOptions.loadingIndicator.enabled]
       */
      enabled?: boolean;
    };
    /**
     * [descr:_viz_bar_gauge_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxBarGauge> &
    events.ChangedOptionInfo;
    export type Properties = dxBarGaugeOptions;
    /**
     * [descr:dxBarGaugeTooltip]
     */
    export type Tooltip = BaseWidgetTooltip & {
      /**
       * [descr:dxBarGaugeOptions.tooltip.contentTemplate]
       */
      contentTemplate?:
      | core.template
      | ((
        scaleValue: { value?: number; valueText?: string; index?: number },
        element: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
       * [descr:dxBarGaugeOptions.tooltip.customizeTooltip]
       */
      customizeTooltip?: (scaleValue: {
        value?: number;
        valueText?: string;
        index?: number;
      }) => any;
      /**
       * [descr:dxBarGaugeOptions.tooltip.interactive]
       */
      interactive?: boolean;
    };
    /**
     * [descr:_viz_bar_gauge_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent = events.EventInfo<dxBarGauge> &
    TooltipInfo;
    /**
     * [descr:_viz_bar_gauge_TooltipInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TooltipInfo {
      /**
       * [descr:_viz_bar_gauge_TooltipInfo.target]
       */
      target?: any;
    }
    /**
     * [descr:_viz_bar_gauge_TooltipShownEvent]
     */
    export type TooltipShownEvent = events.EventInfo<dxBarGauge> &
    TooltipInfo;
  }
  /**
   * [descr:dxBarGaugeOptions]
   * @deprecated [depNote:dxBarGaugeOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBarGaugeOptions extends BaseWidgetOptions<dxBarGauge> {
    /**
     * [descr:dxBarGaugeOptions.animation]
     */
    animation?: any;
    /**
     * [descr:dxBarGaugeOptions.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:dxBarGaugeOptions.barSpacing]
     */
    barSpacing?: number;
    /**
     * [descr:dxBarGaugeOptions.baseValue]
     */
    baseValue?: number;
    /**
     * [descr:dxBarGaugeOptions.endValue]
     */
    endValue?: number;
    /**
     * [descr:dxBarGaugeOptions.geometry]
     */
    geometry?: {
      /**
       * [descr:dxBarGaugeOptions.geometry.endAngle]
       */
      endAngle?: number;
      /**
       * [descr:dxBarGaugeOptions.geometry.startAngle]
       */
      startAngle?: number;
    };
    /**
     * [descr:dxBarGaugeOptions.centerTemplate]
     */
    centerTemplate?:
    | core.template
    | ((
      component: dxBarGauge,
      element: SVGGElement
    ) => string | core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxBarGaugeOptions.label]
     */
    label?: {
      /**
       * [descr:dxBarGaugeOptions.label.connectorColor]
       */
      connectorColor?: string;
      /**
       * [descr:dxBarGaugeOptions.label.connectorWidth]
       */
      connectorWidth?: number;
      /**
       * [descr:dxBarGaugeOptions.label.customizeText]
       */
      customizeText?: (barValue: {
        value?: number;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxBarGaugeOptions.label.font]
       */
      font?: Font;
      /**
       * [descr:dxBarGaugeOptions.label.format]
       */
      format?: ui.Format;
      /**
       * [descr:dxBarGaugeOptions.label.indent]
       */
      indent?: number;
      /**
       * [descr:dxBarGaugeOptions.label.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxBarGaugeOptions.legend]
     */
    legend?: dxBarGauge.Legend;
    /**
     * [descr:dxBarGaugeOptions.loadingIndicator]
     */
    loadingIndicator?: dxBarGauge.LoadingIndicator;
    /**
     * [descr:dxBarGaugeOptions.onTooltipHidden]
     */
    onTooltipHidden?: (e: dxBarGauge.TooltipHiddenEvent) => void;
    /**
     * [descr:dxBarGaugeOptions.onTooltipShown]
     */
    onTooltipShown?: (e: dxBarGauge.TooltipShownEvent) => void;
    /**
     * [descr:dxBarGaugeOptions.palette]
     */
    palette?: string[] | common.charts.Palette;
    /**
     * [descr:dxBarGaugeOptions.paletteExtensionMode]
     */
    paletteExtensionMode?: common.charts.PaletteExtensionMode;
    /**
     * [descr:dxBarGaugeOptions.relativeInnerRadius]
     */
    relativeInnerRadius?: number;
    /**
     * [descr:dxBarGaugeOptions.resolveLabelOverlapping]
     */
    resolveLabelOverlapping?: common.charts.ShiftLabelOverlap;
    /**
     * [descr:dxBarGaugeOptions.startValue]
     */
    startValue?: number;
    /**
     * [descr:dxBarGaugeOptions.tooltip]
     */
    tooltip?: dxBarGauge.Tooltip;
    /**
     * [descr:dxBarGaugeOptions.values]
     */
    values?: number[];
  }
  /**
   * [descr:dxBullet]
   */
  export class dxBullet extends BaseSparkline<dxBulletOptions> {}
  namespace dxBullet {
    /**
     * [descr:_viz_bullet_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxBullet>;
    /**
     * [descr:_viz_bullet_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxBullet>;
    /**
     * [descr:_viz_bullet_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxBullet>;
    /**
     * [descr:_viz_bullet_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxBullet> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_bullet_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxBullet>;
    /**
     * [descr:_viz_bullet_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent = events.EventInfo<dxBullet> &
    BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_bullet_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxBullet>;
    /**
     * [descr:_viz_bullet_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxBullet> &
    events.ChangedOptionInfo;
    export type Properties = dxBulletOptions;
    /**
     * [descr:_viz_bullet_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent = events.EventInfo<dxBullet>;
    /**
     * [descr:_viz_bullet_TooltipShownEvent]
     */
    export type TooltipShownEvent = events.EventInfo<dxBullet>;
  }
  /**
   * [descr:dxBulletOptions]
   * @deprecated [depNote:dxBulletOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxBulletOptions extends BaseSparklineOptions<dxBullet> {
    /**
     * [descr:dxBulletOptions.color]
     */
    color?: string;
    /**
     * [descr:dxBulletOptions.endScaleValue]
     */
    endScaleValue?: number;
    /**
     * [descr:dxBulletOptions.showTarget]
     */
    showTarget?: boolean;
    /**
     * [descr:dxBulletOptions.showZeroLevel]
     */
    showZeroLevel?: boolean;
    /**
     * [descr:dxBulletOptions.startScaleValue]
     */
    startScaleValue?: number;
    /**
     * [descr:dxBulletOptions.target]
     */
    target?: number;
    /**
     * [descr:dxBulletOptions.targetColor]
     */
    targetColor?: string;
    /**
     * [descr:dxBulletOptions.targetWidth]
     */
    targetWidth?: number;
    /**
     * [descr:dxBulletOptions.value]
     */
    value?: number;
  }
  /**
   * [descr:dxChart]
   */
  export class dxChart extends BaseChart<dxChartOptions> {
    /**
     * [descr:dxChart.getArgumentAxis()]
     */
    getArgumentAxis(): chartAxisObject;
    /**
     * [descr:dxChart.getValueAxis()]
     */
    getValueAxis(): chartAxisObject;
    /**
     * [descr:dxChart.getValueAxis(name)]
     */
    getValueAxis(name: string): chartAxisObject;
    /**
     * [descr:dxChart.resetVisualRange()]
     */
    resetVisualRange(): void;
    /**
     * [descr:dxChart.zoomArgument(startValue,endValue)]
     */
    zoomArgument(
      startValue: number | Date | string,
      endValue: number | Date | string
    ): void;
  }
  namespace dxChart {
    export type AggregatedPointsPosition = 'betweenTicks' | 'crossTicks';
    /**
     * [descr:dxChartArgumentAxis]
     */
    export type ArgumentAxis = CommonAxisSettings & {
      /**
       * [descr:dxChartOptions.argumentAxis.aggregateByCategory]
       * @deprecated [depNote:dxChartOptions.argumentAxis.aggregateByCategory]
       */
      aggregateByCategory?: boolean;
      /**
       * [descr:dxChartOptions.argumentAxis.aggregationGroupWidth]
       */
      aggregationGroupWidth?: number;
      /**
       * [descr:dxChartOptions.argumentAxis.aggregationInterval]
       */
      aggregationInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxChartOptions.argumentAxis.argumentType]
       */
      argumentType?: common.charts.ChartsDataType;
      /**
       * [descr:dxChartOptions.argumentAxis.axisDivisionFactor]
       */
      axisDivisionFactor?: number;
      /**
       * [descr:dxChartOptions.argumentAxis.breaks]
       */
      breaks?: common.charts.ScaleBreak[];
      /**
       * [descr:dxChartOptions.argumentAxis.categories]
       */
      categories?: (number | string | Date)[];
      /**
       * [descr:dxChartOptions.argumentAxis.constantLineStyle]
       */
      constantLineStyle?: ArgumentAxisConstantLineStyle;
      /**
       * [descr:dxChartOptions.argumentAxis.constantLines]
       */
      constantLines?: ArgumentAxisConstantLines[];
      /**
       * [descr:dxChartOptions.argumentAxis.endOnTick]
       */
      endOnTick?: boolean;
      /**
       * [descr:dxChartOptions.argumentAxis.holidays]
       */
      holidays?: (Date | string)[] | number[];
      /**
       * [descr:dxChartOptions.argumentAxis.hoverMode]
       */
      hoverMode?: common.charts.ArgumentAxisHoverMode;
      /**
       * [descr:dxChartOptions.argumentAxis.label]
       */
      label?: ArgumentAxisLabel;
      /**
       * [descr:dxChartOptions.argumentAxis.linearThreshold]
       */
      linearThreshold?: number;
      /**
       * [descr:dxChartOptions.argumentAxis.logarithmBase]
       */
      logarithmBase?: number;
      /**
       * [descr:dxChartOptions.argumentAxis.minVisualRangeLength]
       */
      minVisualRangeLength?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxChartOptions.argumentAxis.minorTickCount]
       */
      minorTickCount?: number;
      /**
       * [descr:dxChartOptions.argumentAxis.minorTickInterval]
       */
      minorTickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxChartOptions.argumentAxis.position]
       */
      position?: common.Position;
      /**
       * [descr:dxChartOptions.argumentAxis.customPosition]
       */
      customPosition?: number | Date | string;
      /**
       * [descr:dxChartOptions.argumentAxis.customPositionAxis]
       */
      customPositionAxis?: string;
      /**
       * [descr:dxChartOptions.argumentAxis.offset]
       */
      offset?: number;
      /**
       * [descr:dxChartOptions.argumentAxis.singleWorkdays]
       */
      singleWorkdays?: (Date | string)[] | number[];
      /**
       * [descr:dxChartOptions.argumentAxis.strips]
       */
      strips?: ArgumentAxisStrips[];
      /**
       * [descr:dxChartOptions.argumentAxis.tickInterval]
       */
      tickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxChartOptions.argumentAxis.title]
       */
      title?: ArgumentAxisTitle;
      /**
       * [descr:dxChartOptions.argumentAxis.type]
       */
      type?: common.charts.AxisScaleType;
      /**
       * [descr:dxChartOptions.argumentAxis.visualRange]
       */
      visualRange?:
      | common.charts.VisualRange
      | (number | string | Date)[];
      /**
       * [descr:dxChartOptions.argumentAxis.visualRangeUpdateMode]
       */
      visualRangeUpdateMode?: common.charts.VisualRangeUpdateMode;
      /**
       * [descr:dxChartOptions.argumentAxis.wholeRange]
       */
      wholeRange?:
      | common.charts.VisualRange
      | (number | string | Date)[];
      /**
       * [descr:dxChartOptions.argumentAxis.workWeek]
       */
      workWeek?: number[];
      /**
       * [descr:dxChartOptions.argumentAxis.workdaysOnly]
       */
      workdaysOnly?: boolean;
    };
    /**
     * [descr:_viz_chart_ArgumentAxisClickEvent]
     */
    export type ArgumentAxisClickEvent = events.NativeEventInfo<
    dxChart,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_chart_ArgumentAxisClickEvent.argument]
       */
      readonly argument: Date | number | string;
    };
    /**
     * [descr:dxChartArgumentAxisConstantLines]
     */
    export type ArgumentAxisConstantLines =
      CommonAxisSettingsConstantLineStyle & {
        /**
         * [descr:dxChartOptions.argumentAxis.constantLines.displayBehindSeries]
         */
        displayBehindSeries?: boolean;
        /**
         * [descr:dxChartOptions.argumentAxis.constantLines.extendAxis]
         */
        extendAxis?: boolean;
        /**
         * [descr:dxChartOptions.argumentAxis.constantLines.label]
         */
        label?: ArgumentAxisConstantLinesLabel;
        /**
         * [descr:dxChartOptions.argumentAxis.constantLines.value]
         */
        value?: number | Date | string;
      };
    /**
     * [descr:dxChartArgumentAxisConstantLinesLabel]
     */
    export type ArgumentAxisConstantLinesLabel =
      CommonAxisSettingsConstantLineStyleLabel & {
        /**
         * [descr:dxChartOptions.argumentAxis.constantLines.label.horizontalAlignment]
         */
        horizontalAlignment?: common.HorizontalAlignment;
        /**
         * [descr:dxChartOptions.argumentAxis.constantLines.label.text]
         */
        text?: string;
        /**
         * [descr:dxChartOptions.argumentAxis.constantLines.label.verticalAlignment]
         */
        verticalAlignment?: common.VerticalAlignment;
      };
    /**
     * [descr:dxChartArgumentAxisConstantLineStyle]
     */
    export type ArgumentAxisConstantLineStyle =
      CommonAxisSettingsConstantLineStyle & {
        /**
         * [descr:dxChartOptions.argumentAxis.constantLineStyle.label]
         */
        label?: ArgumentAxisConstantLineStyleLabel;
      };
    /**
     * [descr:dxChartArgumentAxisConstantLineStyleLabel]
     */
    export type ArgumentAxisConstantLineStyleLabel =
      CommonAxisSettingsConstantLineStyleLabel & {
        /**
         * [descr:dxChartOptions.argumentAxis.constantLineStyle.label.horizontalAlignment]
         */
        horizontalAlignment?: common.HorizontalAlignment;
        /**
         * [descr:dxChartOptions.argumentAxis.constantLineStyle.label.verticalAlignment]
         */
        verticalAlignment?: common.VerticalAlignment;
      };
    /**
     * [descr:dxChartArgumentAxisLabel]
     */
    export type ArgumentAxisLabel = CommonAxisSettingsLabel & {
      /**
       * [descr:dxChartOptions.argumentAxis.label.customizeHint]
       */
      customizeHint?: (argument: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxChartOptions.argumentAxis.label.customizeText]
       */
      customizeText?: (argument: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxChartOptions.argumentAxis.label.format]
       */
      format?: ui.Format;
    };
    /**
     * [descr:dxChartArgumentAxisStrips]
     */
    export type ArgumentAxisStrips = CommonAxisSettingsStripStyle & {
      /**
       * [descr:dxChartOptions.argumentAxis.strips.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.argumentAxis.strips.endValue]
       */
      endValue?: number | Date | string;
      /**
       * [descr:dxChartOptions.argumentAxis.strips.label]
       */
      label?: ArgumentAxisStripsLabel;
      /**
       * [descr:dxChartOptions.argumentAxis.strips.startValue]
       */
      startValue?: number | Date | string;
    };
    /**
     * [descr:dxChartArgumentAxisStripsLabel]
     */
    export type ArgumentAxisStripsLabel = CommonAxisSettingsStripStyleLabel & {
      /**
       * [descr:dxChartOptions.argumentAxis.strips.label.text]
       */
      text?: string;
    };
    /**
     * [descr:dxChartArgumentAxisTitle]
     */
    export type ArgumentAxisTitle = CommonAxisSettingsTitle & {
      /**
       * [descr:dxChartOptions.argumentAxis.title.text]
       */
      text?: string;
    };
    export type ChartBubbleSeriesAggregationMethod = 'avg' | 'custom';
    export type ChartFinancialSeriesAggregationMethod = 'ohlc' | 'custom';
    export type ChartLabelDisplayMode = 'rotate' | 'stagger' | 'standard';
    export type ChartRangeSeriesAggregationMethod = 'range' | 'custom';
    export type ChartSeriesAggregationMethod =
      | 'avg'
      | 'count'
      | 'max'
      | 'min'
      | 'ohlc'
      | 'range'
      | 'sum'
      | 'custom';
    export type ChartSingleValueSeriesAggregationMethod =
      | 'avg'
      | 'count'
      | 'max'
      | 'min'
      | 'sum'
      | 'custom';
    export type ChartTooltipLocation = 'center' | 'edge';
    export type ChartZoomAndPanMode = 'both' | 'none' | 'pan' | 'zoom';
    /**
     * [descr:dxChartCommonAxisSettings]
     */
    export interface CommonAxisSettings {
      /**
       * [descr:dxChartOptions.commonAxisSettings.allowDecimals]
       */
      allowDecimals?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.breakStyle]
       */
      breakStyle?: {
        /**
         * [descr:dxChartOptions.commonAxisSettings.breakStyle.color]
         */
        color?: string;
        /**
         * [descr:dxChartOptions.commonAxisSettings.breakStyle.line]
         */
        line?: common.charts.ScaleBreakLineStyle;
        /**
         * [descr:dxChartOptions.commonAxisSettings.breakStyle.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartOptions.commonAxisSettings.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle]
       */
      constantLineStyle?: CommonAxisSettingsConstantLineStyle;
      /**
       * [descr:dxChartOptions.commonAxisSettings.discreteAxisDivisionMode]
       */
      discreteAxisDivisionMode?: common.charts.DiscreteAxisDivisionMode;
      /**
       * [descr:dxChartOptions.commonAxisSettings.aggregatedPointsPosition]
       */
      aggregatedPointsPosition?: AggregatedPointsPosition;
      /**
       * [descr:dxChartOptions.commonAxisSettings.endOnTick]
       */
      endOnTick?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.grid]
       */
      grid?: {
        /**
         * [descr:dxChartOptions.commonAxisSettings.grid.color]
         */
        color?: string;
        /**
         * [descr:dxChartOptions.commonAxisSettings.grid.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxChartOptions.commonAxisSettings.grid.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartOptions.commonAxisSettings.grid.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartOptions.commonAxisSettings.inverted]
       */
      inverted?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label]
       */
      label?: CommonAxisSettingsLabel;
      /**
       * [descr:dxChartOptions.commonAxisSettings.maxValueMargin]
       */
      maxValueMargin?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minValueMargin]
       */
      minValueMargin?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorGrid]
       */
      minorGrid?: {
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorGrid.color]
         */
        color?: string;
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorGrid.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorGrid.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorGrid.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartOptions.commonAxisSettings.minorTick]
       */
      minorTick?: {
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorTick.color]
         */
        color?: string;
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorTick.length]
         */
        length?: number;
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorTick.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorTick.shift]
         */
        shift?: number;
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorTick.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartOptions.commonAxisSettings.minorTick.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartOptions.commonAxisSettings.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.placeholderSize]
       */
      placeholderSize?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.stripStyle]
       */
      stripStyle?: CommonAxisSettingsStripStyle;
      /**
       * [descr:dxChartOptions.commonAxisSettings.tick]
       */
      tick?: {
        /**
         * [descr:dxChartOptions.commonAxisSettings.tick.color]
         */
        color?: string;
        /**
         * [descr:dxChartOptions.commonAxisSettings.tick.length]
         */
        length?: number;
        /**
         * [descr:dxChartOptions.commonAxisSettings.tick.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxChartOptions.commonAxisSettings.tick.shift]
         */
        shift?: number;
        /**
         * [descr:dxChartOptions.commonAxisSettings.tick.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartOptions.commonAxisSettings.tick.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartOptions.commonAxisSettings.title]
       */
      title?: CommonAxisSettingsTitle;
      /**
       * [descr:dxChartOptions.commonAxisSettings.valueMarginsEnabled]
       */
      valueMarginsEnabled?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.width]
       */
      width?: number;
    }
    /**
     * [descr:dxChartCommonAxisSettingsConstantLineStyle]
     */
    export interface CommonAxisSettingsConstantLineStyle {
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.label]
       */
      label?: CommonAxisSettingsConstantLineStyleLabel;
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.paddingLeftRight]
       */
      paddingLeftRight?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.paddingTopBottom]
       */
      paddingTopBottom?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.width]
       */
      width?: number;
    }
    /**
     * [descr:dxChartCommonAxisSettingsConstantLineStyleLabel]
     */
    export interface CommonAxisSettingsConstantLineStyleLabel {
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.label.font]
       */
      font?: Font;
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.label.position]
       */
      position?: common.charts.RelativePosition;
      /**
       * [descr:dxChartOptions.commonAxisSettings.constantLineStyle.label.visible]
       */
      visible?: boolean;
    }
    /**
     * [descr:dxChartCommonAxisSettingsLabel]
     */
    export interface CommonAxisSettingsLabel {
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.template]
       */
      template?:
      | core.template
      | ((
        data: object,
        element: SVGGElement
      ) => string | core.UserDefinedElement<SVGElement>);
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.alignment]
       */
      alignment?: common.HorizontalAlignment;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.displayMode]
       */
      displayMode?: ChartLabelDisplayMode;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.font]
       */
      font?: Font;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.indentFromAxis]
       */
      indentFromAxis?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.overlappingBehavior]
       */
      overlappingBehavior?: common.charts.ChartsAxisLabelOverlap;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.position]
       */
      position?:
      | common.charts.RelativePosition
      | common.Position;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.rotationAngle]
       */
      rotationAngle?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.staggeringSpacing]
       */
      staggeringSpacing?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.textOverflow]
       */
      textOverflow?: common.charts.TextOverflow;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartOptions.commonAxisSettings.label.wordWrap]
       */
      wordWrap?: common.charts.WordWrap;
    }
    /**
     * [descr:dxChartCommonAxisSettingsStripStyle]
     */
    export interface CommonAxisSettingsStripStyle {
      /**
       * [descr:dxChartOptions.commonAxisSettings.stripStyle.label]
       */
      label?: CommonAxisSettingsStripStyleLabel;
      /**
       * [descr:dxChartOptions.commonAxisSettings.stripStyle.paddingLeftRight]
       */
      paddingLeftRight?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.stripStyle.paddingTopBottom]
       */
      paddingTopBottom?: number;
    }
    /**
     * [descr:dxChartCommonAxisSettingsStripStyleLabel]
     */
    export interface CommonAxisSettingsStripStyleLabel {
      /**
       * [descr:dxChartOptions.commonAxisSettings.stripStyle.label.font]
       */
      font?: Font;
      /**
       * [descr:dxChartOptions.commonAxisSettings.stripStyle.label.horizontalAlignment]
       */
      horizontalAlignment?: common.HorizontalAlignment;
      /**
       * [descr:dxChartOptions.commonAxisSettings.stripStyle.label.verticalAlignment]
       */
      verticalAlignment?: common.VerticalAlignment;
    }
    /**
     * [descr:dxChartCommonAxisSettingsTitle]
     */
    export interface CommonAxisSettingsTitle {
      /**
       * [descr:dxChartOptions.commonAxisSettings.title.alignment]
       */
      alignment?: common.HorizontalAlignment;
      /**
       * [descr:dxChartOptions.commonAxisSettings.title.font]
       */
      font?: Font;
      /**
       * [descr:dxChartOptions.commonAxisSettings.title.margin]
       */
      margin?: number;
      /**
       * [descr:dxChartOptions.commonAxisSettings.title.textOverflow]
       */
      textOverflow?: common.charts.TextOverflow;
      /**
       * [descr:dxChartOptions.commonAxisSettings.title.wordWrap]
       */
      wordWrap?: common.charts.WordWrap;
    }
    /**
     * [descr:dxChartCommonPaneSettings]
     */
    export interface CommonPaneSettings {
      /**
       * [descr:dxChartOptions.commonPaneSettings.backgroundColor]
       */
      backgroundColor?: string | common.charts.ChartsColor;
      /**
       * [descr:dxChartOptions.commonPaneSettings.border]
       */
      border?: {
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.bottom]
         */
        bottom?: boolean;
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.color]
         */
        color?: string;
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.dashStyle]
         */
        dashStyle?: common.charts.DashStyle;
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.left]
         */
        left?: boolean;
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.right]
         */
        right?: boolean;
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.top]
         */
        top?: boolean;
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartOptions.commonPaneSettings.border.width]
         */
        width?: number;
      };
    }
    /**
     * [descr:dxChartCommonSeriesSettings]
     */
    export type CommonSeriesSettings = dxChartSeriesTypesCommonSeries & {
      /**
       * [descr:dxChartOptions.commonSeriesSettings.area]
       */
      area?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.bar]
       */
      bar?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.bubble]
       */
      bubble?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.candlestick]
       */
      candlestick?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.fullstackedarea]
       */
      fullstackedarea?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.fullstackedbar]
       */
      fullstackedbar?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.fullstackedline]
       */
      fullstackedline?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.fullstackedspline]
       */
      fullstackedspline?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.fullstackedsplinearea]
       */
      fullstackedsplinearea?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.line]
       */
      line?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.rangearea]
       */
      rangearea?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.rangebar]
       */
      rangebar?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.scatter]
       */
      scatter?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.spline]
       */
      spline?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.splinearea]
       */
      splinearea?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.stackedarea]
       */
      stackedarea?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.stackedbar]
       */
      stackedbar?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.stackedline]
       */
      stackedline?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.stackedspline]
       */
      stackedspline?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.stackedsplinearea]
       */
      stackedsplinearea?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.steparea]
       */
      steparea?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.stepline]
       */
      stepline?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.stock]
       */
      stock?: any;
      /**
       * [descr:dxChartOptions.commonSeriesSettings.type]
       */
      type?: common.charts.SeriesType;
    };
    /**
     * [descr:_viz_chart_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxChart>;
    /**
     * [descr:_viz_chart_DoneEvent]
     */
    export type DoneEvent = events.EventInfo<dxChart>;
    /**
     * [descr:_viz_chart_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxChart>;
    /**
     * @deprecated Use CommonSeriesSettings instead
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type dxChartCommonSeriesSettings = CommonSeriesSettings;
    export type EventKeyModifier = 'alt' | 'ctrl' | 'meta' | 'shift';
    /**
     * [descr:_viz_chart_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxChart>;
    /**
     * [descr:_viz_chart_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxChart> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_chart_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxChart>;
    export type FinancialChartReductionLevel =
      | 'close'
      | 'high'
      | 'low'
      | 'open';
    /**
     * [descr:_viz_chart_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent = events.EventInfo<dxChart> &
    BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_chart_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxChart>;
    /**
     * [descr:dxChartLegend]
     */
    export type Legend = BaseChartLegend & {
      /**
       * [descr:dxChartOptions.legend.customizeHint]
       */
      customizeHint?: (seriesInfo: {
        seriesName?: any;
        seriesIndex?: number;
        seriesColor?: string;
      }) => string;
      /**
       * [descr:dxChartOptions.legend.customizeText]
       */
      customizeText?: (seriesInfo: {
        seriesName?: any;
        seriesIndex?: number;
        seriesColor?: string;
      }) => string;
      /**
       * [descr:dxChartOptions.legend.hoverMode]
       */
      hoverMode?: common.charts.LegendHoverMode;
      /**
       * [descr:dxChartOptions.legend.position]
       */
      position?: common.charts.RelativePosition;
    };
    /**
     * [descr:_viz_chart_LegendClickEvent]
     */
    export type LegendClickEvent = events.Cancelable &
    events.NativeEventInfo<dxChart, MouseEvent | PointerEvent> & {
      /**
         * [descr:_viz_chart_LegendClickEvent.target]
         */
      readonly target: chartSeriesObject;
    };
    /**
     * [descr:_viz_chart_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxChart> &
    events.ChangedOptionInfo;
    /**
     * [descr:dxChartPanes]
     */
    export type Panes = CommonPaneSettings & {
      /**
       * [descr:dxChartOptions.panes.height]
       */
      height?: number | string;
      /**
       * [descr:dxChartOptions.panes.name]
       */
      name?: string;
    };
    /**
     * [descr:_viz_chart_PointClickEvent]
     */
    export type PointClickEvent = events.Cancelable &
    events.NativeEventInfo<dxChart, MouseEvent | PointerEvent> &
    BaseChart.PointInteractionInfo;
    /**
     * [descr:_viz_chart_PointHoverChangedEvent]
     */
    export type PointHoverChangedEvent = events.EventInfo<dxChart> &
    BaseChart.PointInteractionInfo;
    /**
     * [descr:_viz_chart_PointSelectionChangedEvent]
     */
    export type PointSelectionChangedEvent =
      events.EventInfo<dxChart> &
      BaseChart.PointInteractionInfo;
    export type Properties = dxChartOptions;
    /**
     * [descr:_viz_chart_SeriesClickEvent]
     */
    export type SeriesClickEvent = events.NativeEventInfo<
    dxChart,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_chart_SeriesClickEvent.target]
       */
      readonly target: chartSeriesObject;
    };
    /**
     * [descr:_viz_chart_SeriesHoverChangedEvent]
     */
    export type SeriesHoverChangedEvent = events.EventInfo<dxChart> &
    SeriesInteractionInfo;
    /**
     * [descr:_viz_chart_SeriesInteractionInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SeriesInteractionInfo {
      /**
       * [descr:_viz_chart_SeriesInteractionInfo.target]
       */
      target: chartSeriesObject;
    }
    /**
     * [descr:_viz_chart_SeriesSelectionChangedEvent]
     */
    export type SeriesSelectionChangedEvent =
      events.EventInfo<dxChart> & SeriesInteractionInfo;
    /**
     * [descr:dxChartTooltip]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export type Tooltip = BaseChartTooltip & {
      /**
       * [descr:dxChartOptions.tooltip.location]
       */
      location?: ChartTooltipLocation;
    };
    /**
     * [descr:_viz_chart_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent = events.EventInfo<dxChart> &
    BaseChart.TooltipInfo;
    /**
     * [descr:_viz_chart_TooltipShownEvent]
     */
    export type TooltipShownEvent = events.EventInfo<dxChart> &
    BaseChart.TooltipInfo;
    /**
     * [descr:dxChartValueAxis]
     */
    export type ValueAxis = CommonAxisSettings & {
      /**
       * [descr:dxChartOptions.valueAxis.autoBreaksEnabled]
       */
      autoBreaksEnabled?: boolean;
      /**
       * [descr:dxChartOptions.valueAxis.axisDivisionFactor]
       */
      axisDivisionFactor?: number;
      /**
       * [descr:dxChartOptions.valueAxis.breaks]
       */
      breaks?: common.charts.ScaleBreak[];
      /**
       * [descr:dxChartOptions.valueAxis.categories]
       */
      categories?: (number | string | Date)[];
      /**
       * [descr:dxChartOptions.valueAxis.constantLineStyle]
       */
      constantLineStyle?: ValueAxisConstantLineStyle;
      /**
       * [descr:dxChartOptions.valueAxis.constantLines]
       */
      constantLines?: ValueAxisConstantLines[];
      /**
       * [descr:dxChartOptions.valueAxis.endOnTick]
       */
      endOnTick?: boolean;
      /**
       * [descr:dxChartOptions.valueAxis.label]
       */
      label?: ValueAxisLabel;
      /**
       * [descr:dxChartOptions.valueAxis.linearThreshold]
       */
      linearThreshold?: number;
      /**
       * [descr:dxChartOptions.valueAxis.logarithmBase]
       */
      logarithmBase?: number;
      /**
       * [descr:dxChartOptions.valueAxis.maxAutoBreakCount]
       */
      maxAutoBreakCount?: number;
      /**
       * [descr:dxChartOptions.valueAxis.minVisualRangeLength]
       */
      minVisualRangeLength?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxChartOptions.valueAxis.minorTickCount]
       */
      minorTickCount?: number;
      /**
       * [descr:dxChartOptions.valueAxis.minorTickInterval]
       */
      minorTickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxChartOptions.valueAxis.multipleAxesSpacing]
       */
      multipleAxesSpacing?: number;
      /**
       * [descr:dxChartOptions.valueAxis.name]
       */
      name?: string;
      /**
       * [descr:dxChartOptions.valueAxis.pane]
       */
      pane?: string;
      /**
       * [descr:dxChartOptions.valueAxis.position]
       */
      position?: common.Position;
      /**
       * [descr:dxChartOptions.valueAxis.customPosition]
       */
      customPosition?: number | Date | string;
      /**
       * [descr:dxChartOptions.valueAxis.offset]
       */
      offset?: number;
      /**
       * [descr:dxChartOptions.valueAxis.showZero]
       */
      showZero?: boolean;
      /**
       * [descr:dxChartOptions.valueAxis.strips]
       */
      strips?: ValueAxisStrips[];
      /**
       * [descr:dxChartOptions.valueAxis.synchronizedValue]
       */
      synchronizedValue?: number;
      /**
       * [descr:dxChartOptions.valueAxis.tickInterval]
       */
      tickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxChartOptions.valueAxis.title]
       */
      title?: ValueAxisTitle;
      /**
       * [descr:dxChartOptions.valueAxis.type]
       */
      type?: common.charts.AxisScaleType;
      /**
       * [descr:dxChartOptions.valueAxis.valueType]
       */
      valueType?: common.charts.ChartsDataType;
      /**
       * [descr:dxChartOptions.valueAxis.visualRange]
       */
      visualRange?:
      | common.charts.VisualRange
      | (number | string | Date)[];
      /**
       * [descr:dxChartOptions.valueAxis.visualRangeUpdateMode]
       */
      visualRangeUpdateMode?: common.charts.VisualRangeUpdateMode;
      /**
       * [descr:dxChartOptions.valueAxis.wholeRange]
       */
      wholeRange?:
      | common.charts.VisualRange
      | (number | string | Date)[];
    };
    /**
     * [descr:dxChartValueAxisConstantLines]
     */
    export type ValueAxisConstantLines = CommonAxisSettingsConstantLineStyle & {
      /**
       * [descr:dxChartOptions.valueAxis.constantLines.displayBehindSeries]
       */
      displayBehindSeries?: boolean;
      /**
       * [descr:dxChartOptions.valueAxis.constantLines.extendAxis]
       */
      extendAxis?: boolean;
      /**
       * [descr:dxChartOptions.valueAxis.constantLines.label]
       */
      label?: ValueAxisConstantLinesLabel;
      /**
       * [descr:dxChartOptions.valueAxis.constantLines.value]
       */
      value?: number | Date | string;
    };
    /**
     * [descr:dxChartValueAxisConstantLinesLabel]
     */
    export type ValueAxisConstantLinesLabel =
      CommonAxisSettingsConstantLineStyleLabel & {
        /**
         * [descr:dxChartOptions.valueAxis.constantLines.label.horizontalAlignment]
         */
        horizontalAlignment?: common.HorizontalAlignment;
        /**
         * [descr:dxChartOptions.valueAxis.constantLines.label.text]
         */
        text?: string;
        /**
         * [descr:dxChartOptions.valueAxis.constantLines.label.verticalAlignment]
         */
        verticalAlignment?: common.VerticalAlignment;
      };
    /**
     * [descr:dxChartValueAxisConstantLineStyle]
     */
    export type ValueAxisConstantLineStyle =
      CommonAxisSettingsConstantLineStyle & {
        /**
         * [descr:dxChartOptions.valueAxis.constantLineStyle.label]
         */
        label?: ValueAxisConstantLineStyleLabel;
      };
    /**
     * [descr:dxChartValueAxisConstantLineStyleLabel]
     */
    export type ValueAxisConstantLineStyleLabel =
      CommonAxisSettingsConstantLineStyleLabel & {
        /**
         * [descr:dxChartOptions.valueAxis.constantLineStyle.label.horizontalAlignment]
         */
        horizontalAlignment?: common.HorizontalAlignment;
        /**
         * [descr:dxChartOptions.valueAxis.constantLineStyle.label.verticalAlignment]
         */
        verticalAlignment?: common.VerticalAlignment;
      };
    /**
     * [descr:dxChartValueAxisLabel]
     */
    export type ValueAxisLabel = CommonAxisSettingsLabel & {
      /**
       * [descr:dxChartOptions.valueAxis.label.customizeHint]
       */
      customizeHint?: (axisValue: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxChartOptions.valueAxis.label.customizeText]
       */
      customizeText?: (axisValue: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxChartOptions.valueAxis.label.format]
       */
      format?: ui.Format;
    };
    /**
     * [descr:dxChartValueAxisStrips]
     */
    export type ValueAxisStrips = CommonAxisSettingsStripStyle & {
      /**
       * [descr:dxChartOptions.valueAxis.strips.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.valueAxis.strips.endValue]
       */
      endValue?: number | Date | string;
      /**
       * [descr:dxChartOptions.valueAxis.strips.label]
       */
      label?: ValueAxisStripsLabel;
      /**
       * [descr:dxChartOptions.valueAxis.strips.startValue]
       */
      startValue?: number | Date | string;
    };
    /**
     * [descr:dxChartValueAxisStripsLabel]
     */
    export type ValueAxisStripsLabel = CommonAxisSettingsStripStyleLabel & {
      /**
       * [descr:dxChartOptions.valueAxis.strips.label.text]
       */
      text?: string;
    };
    /**
     * [descr:dxChartValueAxisTitle]
     */
    export type ValueAxisTitle = CommonAxisSettingsTitle & {
      /**
       * [descr:dxChartOptions.valueAxis.title.text]
       */
      text?: string;
    };
    /**
     * [descr:_viz_chart_ZoomEndEvent]
     */
    export type ZoomEndEvent = events.Cancelable &
    events.NativeEventInfo<dxChart, MouseEvent | TouchEvent> & {
      /**
         * [descr:_viz_chart_ZoomEndEvent.rangeStart]
         */
      readonly rangeStart: Date | number;
      /**
         * [descr:_viz_chart_ZoomEndEvent.rangeEnd]
         */
      readonly rangeEnd: Date | number;
      /**
         * [descr:_viz_chart_ZoomEndEvent.axis]
         */
      readonly axis: chartAxisObject;
      /**
         * [descr:_viz_chart_ZoomEndEvent.range]
         */
      readonly range: common.charts.VisualRange;
      /**
         * [descr:_viz_chart_ZoomEndEvent.previousRange]
         */
      readonly previousRange: common.charts.VisualRange;
      /**
         * [descr:_viz_chart_ZoomEndEvent.actionType]
         */
      readonly actionType: common.charts.ZoomPanAction;
      /**
         * [descr:_viz_chart_ZoomEndEvent.zoomFactor]
         */
      readonly zoomFactor: number;
      /**
         * [descr:_viz_chart_ZoomEndEvent.shift]
         */
      readonly shift: number;
    };
    /**
     * [descr:_viz_chart_ZoomStartEvent]
     */
    export type ZoomStartEvent = events.Cancelable &
    events.NativeEventInfo<dxChart, MouseEvent | TouchEvent> & {
      /**
         * [descr:_viz_chart_ZoomStartEvent.axis]
         */
      readonly axis: chartAxisObject;
      /**
         * [descr:_viz_chart_ZoomStartEvent.range]
         */
      readonly range: common.charts.VisualRange;
      /**
         * [descr:_viz_chart_ZoomStartEvent.actionType]
         */
      readonly actionType?: common.charts.ZoomPanAction;
    };
  }
  /**
   * [descr:dxChartAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartAnnotationConfig
    extends dxChartCommonAnnotationConfig {
    /**
     * [descr:dxChartAnnotationConfig.name]
     */
    name?: string;
  }
  /**
   * [descr:dxChartCommonAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartCommonAnnotationConfig
    extends BaseChartAnnotationConfig {
    /**
     * [descr:dxChartCommonAnnotationConfig.axis]
     */
    axis?: string;
    /**
     * [descr:dxChartCommonAnnotationConfig.customizeTooltip]
     */
    customizeTooltip?: (annotation: dxChartAnnotationConfig | any) => any;
    /**
     * [descr:dxChartCommonAnnotationConfig.template]
     */
    template?:
    | core.template
    | ((
      annotation: dxChartAnnotationConfig | any,
      element: SVGGElement
    ) => string | core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxChartCommonAnnotationConfig.tooltipTemplate]
     */
    tooltipTemplate?:
    | core.template
    | ((
      annotation: dxChartAnnotationConfig | any,
      element: core.DxElement
    ) => string | core.UserDefinedElement);
  }
  /**
   * [descr:dxChartOptions]
   * @deprecated [depNote:dxChartOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartOptions extends BaseChartOptions<dxChart> {
    /**
     * [descr:dxChartOptions.adjustOnZoom]
     */
    adjustOnZoom?: boolean;
    /**
     * [descr:dxChartOptions.annotations]
     */
    annotations?: (dxChartAnnotationConfig | any)[];
    /**
     * [descr:dxChartOptions.argumentAxis]
     */
    argumentAxis?: dxChart.ArgumentAxis;
    /**
     * [descr:dxChartOptions.autoHidePointMarkers]
     */
    autoHidePointMarkers?: boolean;
    /**
     * [descr:dxChartOptions.barGroupPadding]
     */
    barGroupPadding?: number;
    /**
     * [descr:dxChartOptions.barGroupWidth]
     */
    barGroupWidth?: number;
    /**
     * [descr:dxChartOptions.commonAnnotationSettings]
     */
    commonAnnotationSettings?: dxChartCommonAnnotationConfig;
    /**
     * [descr:dxChartOptions.commonAxisSettings]
     */
    commonAxisSettings?: dxChart.CommonAxisSettings;
    /**
     * [descr:dxChartOptions.commonPaneSettings]
     */
    commonPaneSettings?: dxChart.CommonPaneSettings;
    /**
     * [descr:dxChartOptions.commonSeriesSettings]
     */
    commonSeriesSettings?: dxChart.CommonSeriesSettings;
    /**
     * [descr:dxChartOptions.containerBackgroundColor]
     */
    containerBackgroundColor?: string;
    /**
     * [descr:dxChartOptions.crosshair]
     */
    crosshair?: {
      /**
       * [descr:dxChartOptions.crosshair.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.crosshair.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxChartOptions.crosshair.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxChartOptions.crosshair.horizontalLine]
       */
      horizontalLine?:
      | {
        /**
             * [descr:dxChartOptions.crosshair.horizontalLine.color]
             */
        color?: string;
        /**
             * [descr:dxChartOptions.crosshair.horizontalLine.dashStyle]
             */
        dashStyle?: common.charts.DashStyle;
        /**
             * [descr:dxChartOptions.crosshair.horizontalLine.label]
             */
        label?: {
          /**
               * [descr:dxChartOptions.crosshair.horizontalLine.label.backgroundColor]
               */
          backgroundColor?: string;
          /**
               * [descr:dxChartOptions.crosshair.horizontalLine.label.customizeText]
               */
          customizeText?: (info: {
            value?: Date | number | string;
            valueText?: string;
            point?: chartPointObject;
          }) => string;
          /**
               * [descr:dxChartOptions.crosshair.horizontalLine.label.font]
               */
          font?: Font;
          /**
               * [descr:dxChartOptions.crosshair.horizontalLine.label.format]
               */
          format?: ui.Format;
          /**
               * [descr:dxChartOptions.crosshair.horizontalLine.label.visible]
               */
          visible?: boolean;
        };
        /**
             * [descr:dxChartOptions.crosshair.horizontalLine.opacity]
             */
        opacity?: number;
        /**
             * [descr:dxChartOptions.crosshair.horizontalLine.visible]
             */
        visible?: boolean;
        /**
             * [descr:dxChartOptions.crosshair.horizontalLine.width]
             */
        width?: number;
      }
      | boolean;
      /**
       * [descr:dxChartOptions.crosshair.label]
       */
      label?: {
        /**
         * [descr:dxChartOptions.crosshair.label.backgroundColor]
         */
        backgroundColor?: string;
        /**
         * [descr:dxChartOptions.crosshair.label.customizeText]
         */
        customizeText?: (info: {
          value?: Date | number | string;
          valueText?: string;
          point?: chartPointObject;
        }) => string;
        /**
         * [descr:dxChartOptions.crosshair.label.font]
         */
        font?: Font;
        /**
         * [descr:dxChartOptions.crosshair.label.format]
         */
        format?: ui.Format;
        /**
         * [descr:dxChartOptions.crosshair.label.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:dxChartOptions.crosshair.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartOptions.crosshair.verticalLine]
       */
      verticalLine?:
      | {
        /**
             * [descr:dxChartOptions.crosshair.verticalLine.color]
             */
        color?: string;
        /**
             * [descr:dxChartOptions.crosshair.verticalLine.dashStyle]
             */
        dashStyle?: common.charts.DashStyle;
        /**
             * [descr:dxChartOptions.crosshair.verticalLine.label]
             */
        label?: {
          /**
               * [descr:dxChartOptions.crosshair.verticalLine.label.backgroundColor]
               */
          backgroundColor?: string;
          /**
               * [descr:dxChartOptions.crosshair.verticalLine.label.customizeText]
               */
          customizeText?: (info: {
            value?: Date | number | string;
            valueText?: string;
            point?: chartPointObject;
          }) => string;
          /**
               * [descr:dxChartOptions.crosshair.verticalLine.label.font]
               */
          font?: Font;
          /**
               * [descr:dxChartOptions.crosshair.verticalLine.label.format]
               */
          format?: ui.Format;
          /**
               * [descr:dxChartOptions.crosshair.verticalLine.label.visible]
               */
          visible?: boolean;
        };
        /**
             * [descr:dxChartOptions.crosshair.verticalLine.opacity]
             */
        opacity?: number;
        /**
             * [descr:dxChartOptions.crosshair.verticalLine.visible]
             */
        visible?: boolean;
        /**
             * [descr:dxChartOptions.crosshair.verticalLine.width]
             */
        width?: number;
      }
      | boolean;
      /**
       * [descr:dxChartOptions.crosshair.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartOptions.customizeAnnotation]
     */
    customizeAnnotation?: (
      annotation: dxChartAnnotationConfig | any
    ) => dxChartAnnotationConfig;
    /**
     * [descr:dxChartOptions.dataPrepareSettings]
     */
    dataPrepareSettings?: {
      /**
       * [descr:dxChartOptions.dataPrepareSettings.checkTypeForAllData]
       */
      checkTypeForAllData?: boolean;
      /**
       * [descr:dxChartOptions.dataPrepareSettings.convertToAxisDataType]
       */
      convertToAxisDataType?: boolean;
      /**
       * [descr:dxChartOptions.dataPrepareSettings.sortingMethod]
       */
      sortingMethod?: boolean | ((a: any, b: any) => number);
    };
    /**
     * [descr:dxChartOptions.defaultPane]
     */
    defaultPane?: string;
    /**
     * [descr:dxChartOptions.legend]
     */
    legend?: dxChart.Legend;
    /**
     * [descr:dxChartOptions.maxBubbleSize]
     */
    maxBubbleSize?: number;
    /**
     * [descr:dxChartOptions.minBubbleSize]
     */
    minBubbleSize?: number;
    /**
     * [descr:dxChartOptions.negativesAsZeroes]
     */
    negativesAsZeroes?: boolean;
    /**
     * [descr:dxChartOptions.onArgumentAxisClick]
     */
    onArgumentAxisClick?:
    | ((e: dxChart.ArgumentAxisClickEvent) => void)
    | string;
    /**
     * [descr:dxChartOptions.onLegendClick]
     */
    onLegendClick?:
    | ((e: dxChart.LegendClickEvent) => void)
    | string;
    /**
     * [descr:dxChartOptions.onSeriesClick]
     */
    onSeriesClick?:
    | ((e: dxChart.SeriesClickEvent) => void)
    | string;
    /**
     * [descr:dxChartOptions.onSeriesHoverChanged]
     */
    onSeriesHoverChanged?: (
      e: dxChart.SeriesHoverChangedEvent
    ) => void;
    /**
     * [descr:dxChartOptions.onSeriesSelectionChanged]
     */
    onSeriesSelectionChanged?: (
      e: dxChart.SeriesSelectionChangedEvent
    ) => void;
    /**
     * [descr:dxChartOptions.onZoomEnd]
     */
    onZoomEnd?: (e: dxChart.ZoomEndEvent) => void;
    /**
     * [descr:dxChartOptions.onZoomStart]
     */
    onZoomStart?: (e: dxChart.ZoomStartEvent) => void;
    /**
     * [descr:dxChartOptions.panes]
     */
    panes?: dxChart.Panes | dxChart.Panes[];
    /**
     * [descr:dxChartOptions.resizePanesOnZoom]
     */
    resizePanesOnZoom?: boolean;
    /**
     * [descr:dxChartOptions.resolveLabelOverlapping]
     */
    resolveLabelOverlapping?: common.charts.ChartsLabelOverlap;
    /**
     * [descr:dxChartOptions.rotated]
     */
    rotated?: boolean;
    /**
     * [descr:dxChartOptions.scrollBar]
     */
    scrollBar?: {
      /**
       * [descr:dxChartOptions.scrollBar.color]
       */
      color?: string;
      /**
       * [descr:dxChartOptions.scrollBar.offset]
       */
      offset?: number;
      /**
       * [descr:dxChartOptions.scrollBar.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartOptions.scrollBar.position]
       */
      position?: common.Position;
      /**
       * [descr:dxChartOptions.scrollBar.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartOptions.scrollBar.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartOptions.series]
     */
    series?: ChartSeries | ChartSeries[];
    /**
     * [descr:dxChartOptions.seriesSelectionMode]
     */
    seriesSelectionMode?: common.SingleOrMultiple;
    /**
     * [descr:dxChartOptions.seriesTemplate]
     */
    seriesTemplate?: {
      /**
       * [descr:dxChartOptions.seriesTemplate.customizeSeries]
       */
      customizeSeries?: (seriesName: any) => ChartSeries;
      /**
       * [descr:dxChartOptions.seriesTemplate.nameField]
       */
      nameField?: string;
    };
    /**
     * [descr:dxChartOptions.stickyHovering]
     */
    stickyHovering?: boolean;
    /**
     * [descr:dxChartOptions.synchronizeMultiAxes]
     */
    synchronizeMultiAxes?: boolean;
    /**
     * [descr:dxChartOptions.tooltip]
     */
    tooltip?: dxChart.Tooltip;
    /**
     * [descr:dxChartOptions.valueAxis]
     */
    valueAxis?:
    | dxChart.ValueAxis
    | dxChart.ValueAxis[];
    /**
     * [descr:dxChartOptions.zoomAndPan]
     */
    zoomAndPan?: {
      /**
       * [descr:dxChartOptions.zoomAndPan.allowMouseWheel]
       */
      allowMouseWheel?: boolean;
      /**
       * [descr:dxChartOptions.zoomAndPan.allowTouchGestures]
       */
      allowTouchGestures?: boolean;
      /**
       * [descr:dxChartOptions.zoomAndPan.argumentAxis]
       */
      argumentAxis?: dxChart.ChartZoomAndPanMode;
      /**
       * [descr:dxChartOptions.zoomAndPan.dragBoxStyle]
       */
      dragBoxStyle?: {
        /**
         * [descr:dxChartOptions.zoomAndPan.dragBoxStyle.color]
         */
        color?: string;
        /**
         * [descr:dxChartOptions.zoomAndPan.dragBoxStyle.opacity]
         */
        opacity?: number;
      };
      /**
       * [descr:dxChartOptions.zoomAndPan.dragToZoom]
       */
      dragToZoom?: boolean;
      /**
       * [descr:dxChartOptions.zoomAndPan.panKey]
       */
      panKey?: dxChart.EventKeyModifier;
      /**
       * [descr:dxChartOptions.zoomAndPan.valueAxis]
       */
      valueAxis?: dxChart.ChartZoomAndPanMode;
    };
  }
  /**
   * [descr:dxChartSeriesTypes]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypes {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries]
     */
    AreaSeries?: dxChartSeriesTypesAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.BarSeries]
     */
    BarSeries?: dxChartSeriesTypesBarSeries;
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries]
     */
    BubbleSeries?: dxChartSeriesTypesBubbleSeries;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries]
     */
    CandleStickSeries?: dxChartSeriesTypesCandleStickSeries;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries]
     */
    CommonSeries?: dxChartSeriesTypesCommonSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries]
     */
    FullStackedAreaSeries?: dxChartSeriesTypesFullStackedAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries]
     */
    FullStackedBarSeries?: dxChartSeriesTypesFullStackedBarSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries]
     */
    FullStackedLineSeries?: dxChartSeriesTypesFullStackedLineSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries]
     */
    FullStackedSplineAreaSeries?: dxChartSeriesTypesFullStackedSplineAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries]
     */
    FullStackedSplineSeries?: dxChartSeriesTypesFullStackedSplineSeries;
    /**
     * [descr:dxChartSeriesTypes.LineSeries]
     */
    LineSeries?: dxChartSeriesTypesLineSeries;
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries]
     */
    RangeAreaSeries?: dxChartSeriesTypesRangeAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries]
     */
    RangeBarSeries?: dxChartSeriesTypesRangeBarSeries;
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries]
     */
    ScatterSeries?: dxChartSeriesTypesScatterSeries;
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries]
     */
    SplineAreaSeries?: dxChartSeriesTypesSplineAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.SplineSeries]
     */
    SplineSeries?: dxChartSeriesTypesSplineSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries]
     */
    StackedAreaSeries?: dxChartSeriesTypesStackedAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries]
     */
    StackedBarSeries?: dxChartSeriesTypesStackedBarSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries]
     */
    StackedLineSeries?: dxChartSeriesTypesStackedLineSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries]
     */
    StackedSplineAreaSeries?: dxChartSeriesTypesStackedSplineAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries]
     */
    StackedSplineSeries?: dxChartSeriesTypesStackedSplineSeries;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries]
     */
    StepAreaSeries?: dxChartSeriesTypesStepAreaSeries;
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries]
     */
    StepLineSeries?: dxChartSeriesTypesStepLineSeries;
    /**
     * [descr:dxChartSeriesTypes.StockSeries]
     */
    StockSeries?: dxChartSeriesTypesStockSeries;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.label]
     */
    label?: dxChartSeriesTypesAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.point]
     */
    point?: dxChartSeriesTypesAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.AreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.BarSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesBarSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.BarSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.BarSeries.label]
     */
    label?: dxChartSeriesTypesBarSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.BarSeries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.BarSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.BarSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBubbleSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesBubbleSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.label]
     */
    label?: dxChartSeriesTypesBubbleSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBubbleSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.aggregation.method]
     */
    method?: dxChart.ChartBubbleSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesBubbleSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.BubbleSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesCandleStickSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.hoverStyle]
     */
    hoverStyle?: dxChartSeriesTypesCandleStickSeriesHoverStyle;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.label]
     */
    label?: dxChartSeriesTypesCandleStickSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.selectionStyle]
     */
    selectionStyle?: dxChartSeriesTypesCandleStickSeriesSelectionStyle;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.aggregation.method]
     */
    method?: dxChart.ChartFinancialSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesHoverStyle
    extends dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.hoverStyle.hatching]
     */
    hatching?: dxChartSeriesTypesCandleStickSeriesHoverStyleHatching;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesHoverStyleHatching
    extends dxChartSeriesTypesCommonSeriesHoverStyleHatching {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.hoverStyle.hatching.direction]
     */
    direction?: common.charts.HatchDirection;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesSelectionStyle
    extends dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.selectionStyle.hatching]
     */
    hatching?: dxChartSeriesTypesCandleStickSeriesSelectionStyleHatching;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCandleStickSeriesSelectionStyleHatching
    extends dxChartSeriesTypesCommonSeriesSelectionStyleHatching {
    /**
     * [descr:dxChartSeriesTypes.CandleStickSeries.selectionStyle.hatching.direction]
     */
    direction?: common.charts.HatchDirection;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesCommonSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.axis]
     */
    axis?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.barOverlapGroup]
     */
    barOverlapGroup?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.barPadding]
     */
    barPadding?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.barWidth]
     */
    barWidth?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border]
     */
    border?: dxChartSeriesTypesCommonSeriesBorder;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.closeValueField]
     */
    closeValueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.color]
     */
    color?: string | common.charts.ChartsColor;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.cornerRadius]
     */
    cornerRadius?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.dashStyle]
     */
    dashStyle?: common.charts.DashStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.highValueField]
     */
    highValueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverMode]
     */
    hoverMode?: common.charts.SeriesHoverMode;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle]
     */
    hoverStyle?: dxChartSeriesTypesCommonSeriesHoverStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.ignoreEmptyPoints]
     */
    ignoreEmptyPoints?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.innerColor]
     */
    innerColor?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label]
     */
    label?: dxChartSeriesTypesCommonSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.lowValueField]
     */
    lowValueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.maxLabelCount]
     */
    maxLabelCount?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.minBarSize]
     */
    minBarSize?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.openValueField]
     */
    openValueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.pane]
     */
    pane?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point]
     */
    point?: dxChartSeriesTypesCommonSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.rangeValue1Field]
     */
    rangeValue1Field?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.rangeValue2Field]
     */
    rangeValue2Field?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.reduction]
     */
    reduction?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.reduction.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.reduction.level]
       */
      level?: dxChart.FinancialChartReductionLevel;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionMode]
     */
    selectionMode?: common.charts.SeriesSelectionMode;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle]
     */
    selectionStyle?: dxChartSeriesTypesCommonSeriesSelectionStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.showInLegend]
     */
    showInLegend?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.sizeField]
     */
    sizeField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.stack]
     */
    stack?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.tagField]
     */
    tagField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar]
     */
    valueErrorBar?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.displayMode]
       */
      displayMode?: common.charts.ValueErrorBarDisplayMode;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.edgeLength]
       */
      edgeLength?: number;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.highValueField]
       */
      highValueField?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.lineWidth]
       */
      lineWidth?: number;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.lowValueField]
       */
      lowValueField?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.type]
       */
      type?: common.charts.ValueErrorBarType;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.valueErrorBar.value]
       */
      value?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.valueField]
     */
    valueField?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.aggregation.calculate]
     */
    calculate?: (
      aggregationInfo: chartPointAggregationInfoObject,
      series: chartSeriesObject
    ) => any | any[];
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.aggregation.enabled]
     */
    enabled?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.aggregation.method]
     */
    method?: dxChart.ChartSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesBorder {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border.dashStyle]
     */
    dashStyle?: common.charts.DashStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.border.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border]
     */
    border?: dxChartSeriesTypesCommonSeriesHoverStyleBorder;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.color]
     */
    color?: string | common.charts.ChartsColor;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.dashStyle]
     */
    dashStyle?: common.charts.DashStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching]
     */
    hatching?: dxChartSeriesTypesCommonSeriesHoverStyleHatching;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.width]
     */
    width?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.highlight]
     */
    highlight?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyleBorder {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border.dashStyle]
     */
    dashStyle?: common.charts.DashStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.border.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesHoverStyleHatching {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.direction]
     */
    direction?: common.charts.HatchDirection;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.step]
     */
    step?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.hoverStyle.hatching.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.alignment]
     */
    alignment?: common.HorizontalAlignment;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.argumentFormat]
     */
    argumentFormat?: ui.Format;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.border]
     */
    border?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.border.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.border.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.connector]
     */
    connector?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.connector.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.connector.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.label.connector.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.font]
     */
    font?: Font;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.format]
     */
    format?: ui.Format;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.horizontalOffset]
     */
    horizontalOffset?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.position]
     */
    position?: common.charts.RelativePosition;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.rotationAngle]
     */
    rotationAngle?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.showForZeroValues]
     */
    showForZeroValues?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.verticalOffset]
     */
    verticalOffset?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.label.displayFormat]
     */
    displayFormat?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.border]
     */
    border?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.border.color]
       */
      color?: string;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.color]
     */
    color?: string | common.charts.ChartsColor;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.hoverMode]
     */
    hoverMode?: common.charts.PointInteractionMode;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle]
     */
    hoverStyle?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.border]
       */
      border?: {
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.hoverStyle.size]
       */
      size?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.image]
     */
    image?:
    | string
    | {
      /**
           * [descr:dxChartSeriesTypes.CommonSeries.point.image.height]
           */
      height?:
      | number
      | {
        /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.height.rangeMaxPoint]
                 */
        rangeMaxPoint?: number;
        /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.height.rangeMinPoint]
                 */
        rangeMinPoint?: number;
      };
      /**
           * [descr:dxChartSeriesTypes.CommonSeries.point.image.url]
           */
      url?:
      | string
      | {
        /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.url.rangeMaxPoint]
                 */
        rangeMaxPoint?: string;
        /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.url.rangeMinPoint]
                 */
        rangeMinPoint?: string;
      };
      /**
           * [descr:dxChartSeriesTypes.CommonSeries.point.image.width]
           */
      width?:
      | number
      | {
        /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.width.rangeMaxPoint]
                 */
        rangeMaxPoint?: number;
        /**
                 * [descr:dxChartSeriesTypes.CommonSeries.point.image.width.rangeMinPoint]
                 */
        rangeMinPoint?: number;
      };
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.selectionMode]
     */
    selectionMode?: common.charts.PointInteractionMode;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle]
     */
    selectionStyle?: {
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.border]
       */
      border?: {
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:dxChartSeriesTypes.CommonSeries.point.selectionStyle.size]
       */
      size?: number;
    };
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.size]
     */
    size?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.symbol]
     */
    symbol?: common.charts.PointSymbol;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border]
     */
    border?: dxChartSeriesTypesCommonSeriesSelectionStyleBorder;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.color]
     */
    color?: string | common.charts.ChartsColor;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.dashStyle]
     */
    dashStyle?: common.charts.DashStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching]
     */
    hatching?: dxChartSeriesTypesCommonSeriesSelectionStyleHatching;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.width]
     */
    width?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.highlight]
     */
    highlight?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyleBorder {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border.color]
     */
    color?: string;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border.dashStyle]
     */
    dashStyle?: common.charts.DashStyle;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.border.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesCommonSeriesSelectionStyleHatching {
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.direction]
     */
    direction?: common.charts.HatchDirection;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.step]
     */
    step?: number;
    /**
     * [descr:dxChartSeriesTypes.CommonSeries.selectionStyle.hatching.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.point]
     */
    point?: dxChartSeriesTypesFullStackedAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.FullStackedAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedBarSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedBarSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * [descr:dxChartSeriesTypes.FullStackedBarSeries.label.position]
     */
    position?: common.charts.RelativePosition;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedLineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedLineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedLineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedSplineAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedSplineAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.point]
     */
    point?: dxChartSeriesTypesFullStackedSplineAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesFullStackedSplineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.label]
     */
    label?: dxChartSeriesTypesFullStackedSplineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesFullStackedSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.FullStackedSplineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.LineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesLineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.LineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.LineSeries.label]
     */
    label?: dxChartSeriesTypesLineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.LineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.LineSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.LineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesRangeAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.label]
     */
    label?: dxChartSeriesTypesRangeAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.point]
     */
    point?: dxChartSeriesTypesRangeAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.aggregation.method]
     */
    method?: dxChart.ChartRangeSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.RangeAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesRangeBarSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.label]
     */
    label?: dxChartSeriesTypesRangeBarSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.aggregation.method]
     */
    method?: dxChart.ChartRangeSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesRangeBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.RangeBarSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesScatterSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesScatterSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries.label]
     */
    label?: dxChartSeriesTypesScatterSeriesLabel;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesScatterSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesScatterSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.ScatterSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesSplineAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.label]
     */
    label?: dxChartSeriesTypesSplineAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.point]
     */
    point?: dxChartSeriesTypesSplineAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.SplineAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesSplineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.label]
     */
    label?: dxChartSeriesTypesSplineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.SplineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.label]
     */
    label?: dxChartSeriesTypesStackedAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.point]
     */
    point?: dxChartSeriesTypesStackedAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.StackedAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedBarSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedBarSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.label]
     */
    label?: dxChartSeriesTypesStackedBarSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedBarSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedBarSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * [descr:dxChartSeriesTypes.StackedBarSeries.label.position]
     */
    position?: common.charts.RelativePosition;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedLineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.label]
     */
    label?: dxChartSeriesTypesStackedLineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedLineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedSplineAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.label]
     */
    label?: dxChartSeriesTypesStackedSplineAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.point]
     */
    point?: dxChartSeriesTypesStackedSplineAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStackedSplineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.label]
     */
    label?: dxChartSeriesTypesStackedSplineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStackedSplineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StackedSplineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStepAreaSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.border]
     */
    border?: dxChartSeriesTypesStepAreaSeriesBorder;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.hoverStyle]
     */
    hoverStyle?: dxChartSeriesTypesStepAreaSeriesHoverStyle;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.label]
     */
    label?: dxChartSeriesTypesStepAreaSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.point]
     */
    point?: dxChartSeriesTypesStepAreaSeriesPoint;
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.selectionStyle]
     */
    selectionStyle?: dxChartSeriesTypesStepAreaSeriesSelectionStyle;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesBorder
    extends dxChartSeriesTypesCommonSeriesBorder {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.border.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesHoverStyle
    extends dxChartSeriesTypesCommonSeriesHoverStyle {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.hoverStyle.border]
     */
    border?: dxChartSeriesTypesStepAreaSeriesHoverStyleBorder;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesHoverStyleBorder
    extends dxChartSeriesTypesCommonSeriesHoverStyleBorder {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.hoverStyle.border.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesPoint
    extends dxChartSeriesTypesCommonSeriesPoint {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesSelectionStyle
    extends dxChartSeriesTypesCommonSeriesSelectionStyle {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.selectionStyle.border]
     */
    border?: dxChartSeriesTypesStepAreaSeriesSelectionStyleBorder;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepAreaSeriesSelectionStyleBorder
    extends dxChartSeriesTypesCommonSeriesSelectionStyleBorder {
    /**
     * [descr:dxChartSeriesTypes.StepAreaSeries.selectionStyle.border.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepLineSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStepLineSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.label]
     */
    label?: dxChartSeriesTypesStepLineSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepLineSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.aggregation.method]
     */
    method?: dxChart.ChartSingleValueSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStepLineSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StepLineSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStockSeries
    extends dxChartSeriesTypesCommonSeries {
    /**
     * [descr:dxChartSeriesTypes.StockSeries.aggregation]
     */
    aggregation?: dxChartSeriesTypesStockSeriesAggregation;
    /**
     * [descr:dxChartSeriesTypes.StockSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxChartSeriesTypes.StockSeries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxChartSeriesTypes.StockSeries.label]
     */
    label?: dxChartSeriesTypesStockSeriesLabel;
    /**
     * [descr:dxChartSeriesTypes.StockSeries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStockSeriesAggregation
    extends dxChartSeriesTypesCommonSeriesAggregation {
    /**
     * [descr:dxChartSeriesTypes.StockSeries.aggregation.method]
     */
    method?: dxChart.ChartFinancialSeriesAggregationMethod;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxChartSeriesTypesStockSeriesLabel
    extends dxChartSeriesTypesCommonSeriesLabel {
    /**
     * [descr:dxChartSeriesTypes.StockSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
  }
  /**
   * [descr:dxCircularGauge]
   */
  export class dxCircularGauge extends BaseGauge<dxCircularGaugeOptions> {}
  namespace dxCircularGauge {
    export type CircularGaugeElementOrientation =
      | 'center'
      | 'inside'
      | 'outside';
    export type CircularGaugeLabelOverlap = 'first' | 'last';
    /**
     * [descr:_viz_circular_gauge_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxCircularGauge>;
    /**
     * [descr:_viz_circular_gauge_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxCircularGauge>;
    /**
     * [descr:_viz_circular_gauge_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxCircularGauge>;
    /**
     * [descr:_viz_circular_gauge_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxCircularGauge> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_circular_gauge_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxCircularGauge>;
    /**
     * [descr:_viz_circular_gauge_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent =
      events.EventInfo<dxCircularGauge> &
      BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_circular_gauge_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxCircularGauge>;
    /**
     * [descr:_viz_circular_gauge_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxCircularGauge> &
      events.ChangedOptionInfo;
    export type Properties = dxCircularGaugeOptions;
    /**
     * [descr:dxCircularGaugeRangeContainer]
     */
    export type RangeContainer = BaseGaugeRangeContainer & {
      /**
       * [descr:dxCircularGaugeOptions.rangeContainer.orientation]
       */
      orientation?: CircularGaugeElementOrientation;
      /**
       * [descr:dxCircularGaugeOptions.rangeContainer.width]
       */
      width?: number;
    };
    /**
     * [descr:dxCircularGaugeScale]
     */
    export type Scale = BaseGaugeScale & {
      /**
       * [descr:dxCircularGaugeOptions.scale.label]
       */
      label?: ScaleLabel;
      /**
       * [descr:dxCircularGaugeOptions.scale.orientation]
       */
      orientation?: CircularGaugeElementOrientation;
    };
    /**
     * [descr:dxCircularGaugeScaleLabel]
     */
    export type ScaleLabel = BaseGaugeScaleLabel & {
      /**
       * [descr:dxCircularGaugeOptions.scale.label.hideFirstOrLast]
       */
      hideFirstOrLast?: CircularGaugeLabelOverlap;
      /**
       * [descr:dxCircularGaugeOptions.scale.label.indentFromTick]
       */
      indentFromTick?: number;
    };
    /**
     * [descr:_viz_circular_gauge_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent =
      events.EventInfo<dxCircularGauge> &
      BaseGauge.TooltipInfo;
    /**
     * [descr:_viz_circular_gauge_TooltipShownEvent]
     */
    export type TooltipShownEvent =
      events.EventInfo<dxCircularGauge> &
      BaseGauge.TooltipInfo;
  }
  /**
   * [descr:dxCircularGaugeOptions]
   * @deprecated [depNote:dxCircularGaugeOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxCircularGaugeOptions
    extends BaseGaugeOptions<dxCircularGauge> {
    /**
     * [descr:dxCircularGaugeOptions.geometry]
     */
    geometry?: {
      /**
       * [descr:dxCircularGaugeOptions.geometry.endAngle]
       */
      endAngle?: number;
      /**
       * [descr:dxCircularGaugeOptions.geometry.startAngle]
       */
      startAngle?: number;
    };
    /**
     * [descr:dxCircularGaugeOptions.centerTemplate]
     */
    centerTemplate?:
    | core.template
    | ((
      component: dxCircularGauge,
      element: SVGGElement
    ) => string | core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxCircularGaugeOptions.rangeContainer]
     */
    rangeContainer?: dxCircularGauge.RangeContainer;
    /**
     * [descr:dxCircularGaugeOptions.scale]
     */
    scale?: dxCircularGauge.Scale;
    /**
     * [descr:dxCircularGaugeOptions.subvalueIndicator]
     */
    subvalueIndicator?: GaugeIndicator;
    /**
     * [descr:dxCircularGaugeOptions.valueIndicator]
     */
    valueIndicator?: GaugeIndicator;
  }
  /**
   * [descr:dxFunnel]
   */
  export class dxFunnel extends BaseWidget<dxFunnelOptions> {
    /**
     * [descr:dxFunnel.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:dxFunnel.getAllItems()]
     */
    getAllItems(): dxFunnel.Item[];
    getDataSource(): data.DataSource;
    /**
     * [descr:dxFunnel.hideTooltip()]
     */
    hideTooltip(): void;
  }
  namespace dxFunnel {
    /**
     * [descr:_viz_funnel_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxFunnel>;
    /**
     * [descr:_viz_funnel_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxFunnel>;
    /**
     * [descr:_viz_funnel_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxFunnel>;
    /**
     * [descr:_viz_funnel_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxFunnel> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_funnel_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxFunnel>;
    export type FunnelAlgorithm = 'dynamicHeight' | 'dynamicSlope';
    /**
     * [descr:FunnelItemInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface FunnelItemInfo {
      /**
       * [descr:FunnelItemInfo.item]
       */
      readonly item: Item;
    }
    /**
     * [descr:_viz_funnel_HoverChangedEvent]
     */
    export type HoverChangedEvent = events.EventInfo<dxFunnel> &
    FunnelItemInfo;
    /**
     * [descr:_viz_funnel_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent = events.EventInfo<dxFunnel> &
    BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_funnel_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxFunnel>;
    /**
     * [descr:_viz_funnel_ItemClickEvent]
     */
    export type ItemClickEvent = events.NativeEventInfo<
    dxFunnel,
    MouseEvent | PointerEvent
    > &
    FunnelItemInfo;
    /**
     * [descr:dxFunnelLegend]
     */
    export type Legend = common.charts.BaseLegend & {
      /**
       * [descr:dxFunnelOptions.legend.customizeHint]
       */
      customizeHint?: (itemInfo: { item?: Item; text?: string }) => string;
      /**
       * [descr:dxFunnelOptions.legend.customizeItems]
       */
      customizeItems?: (items: LegendItem[]) => LegendItem[];
      /**
       * [descr:dxFunnelOptions.legend.customizeText]
       */
      customizeText?: (itemInfo: { item?: Item; text?: string }) => string;
      /**
       * [descr:dxFunnelOptions.legend.markerTemplate]
       */
      markerTemplate?:
      | core.template
      | ((
        legendItem: LegendItem,
        element: SVGGElement
      ) => string | core.UserDefinedElement<SVGElement>);
      /**
       * [descr:dxFunnelOptions.legend.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:_viz_funnel_LegendClickEvent]
     */
    export type LegendClickEvent = events.NativeEventInfo<
    dxFunnel,
    MouseEvent | PointerEvent
    > &
    FunnelItemInfo;
    /**
     * [descr:_viz_funnel_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxFunnel> &
    events.ChangedOptionInfo;
    export type Properties = dxFunnelOptions;
    /**
     * [descr:_viz_funnel_SelectionChangedEvent]
     */
    export type SelectionChangedEvent = events.EventInfo<dxFunnel> &
    FunnelItemInfo;
    /**
     * [descr:dxFunnelTooltip]
     */
    export type Tooltip = BaseWidgetTooltip & {
      /**
       * [descr:dxFunnelOptions.tooltip.contentTemplate]
       */
      contentTemplate?:
      | core.template
      | ((
        info: {
          item?: Item;
          value?: number;
          valueText?: string;
          percent?: number;
          percentText?: string;
        },
        element: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
       * [descr:dxFunnelOptions.tooltip.customizeTooltip]
       */
      customizeTooltip?: (info: {
        item?: Item;
        value?: number;
        valueText?: string;
        percent?: number;
        percentText?: string;
      }) => any;
    };
  }
  /**
   * @deprecated Use Item instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFunnelItem {
    /**
     * [descr:dxFunnelItem.argument]
     */
    argument?: string | Date | number;
    /**
     * [descr:dxFunnelItem.data]
     */
    data?: any;
    /**
     * [descr:dxFunnelItem.getColor()]
     */
    getColor(): string;
    /**
     * [descr:dxFunnelItem.hover(state)]
     */
    hover(state: boolean): void;
    /**
     * [descr:dxFunnelItem.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:dxFunnelItem.isSelected()]
     */
    isSelected(): boolean;
    /**
     * [descr:dxFunnelItem.percent]
     */
    percent?: number;
    /**
     * [descr:dxFunnelItem.select(state)]
     */
    select(state: boolean): void;
    /**
     * [descr:dxFunnelItem.showTooltip()]
     */
    showTooltip(): void;
    /**
     * [descr:dxFunnelItem.value]
     */
    value?: number;
  }
  /**
   * [descr:dxFunnelOptions]
   * @deprecated [depNote:dxFunnelOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxFunnelOptions extends BaseWidgetOptions<dxFunnel> {
    /**
     * [descr:dxFunnelOptions.adaptiveLayout]
     */
    adaptiveLayout?: {
      /**
       * [descr:dxFunnelOptions.adaptiveLayout.height]
       */
      height?: number;
      /**
       * [descr:dxFunnelOptions.adaptiveLayout.keepLabels]
       */
      keepLabels?: boolean;
      /**
       * [descr:dxFunnelOptions.adaptiveLayout.width]
       */
      width?: number;
    };
    /**
     * [descr:dxFunnelOptions.algorithm]
     */
    algorithm?: dxFunnel.FunnelAlgorithm;
    /**
     * [descr:dxFunnelOptions.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxFunnelOptions.colorField]
     */
    colorField?: string;
    /**
     * [descr:dxFunnelOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<any> | null;
    /**
     * [descr:dxFunnelOptions.hoverEnabled]
     */
    hoverEnabled?: boolean;
    /**
     * [descr:dxFunnelOptions.inverted]
     */
    inverted?: boolean;
    /**
     * [descr:dxFunnelOptions.item]
     */
    item?: {
      /**
       * [descr:dxFunnelOptions.item.border]
       */
      border?: {
        /**
         * [descr:dxFunnelOptions.item.border.color]
         */
        color?: string;
        /**
         * [descr:dxFunnelOptions.item.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxFunnelOptions.item.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxFunnelOptions.item.hoverStyle]
       */
      hoverStyle?: {
        /**
         * [descr:dxFunnelOptions.item.hoverStyle.border]
         */
        border?: {
          /**
           * [descr:dxFunnelOptions.item.hoverStyle.border.color]
           */
          color?: string;
          /**
           * [descr:dxFunnelOptions.item.hoverStyle.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:dxFunnelOptions.item.hoverStyle.border.width]
           */
          width?: number;
        };
        /**
         * [descr:dxFunnelOptions.item.hoverStyle.hatching]
         */
        hatching?: {
          /**
           * [descr:dxFunnelOptions.item.hoverStyle.hatching.direction]
           */
          direction?: common.charts.HatchDirection;
          /**
           * [descr:dxFunnelOptions.item.hoverStyle.hatching.opacity]
           */
          opacity?: number;
          /**
           * [descr:dxFunnelOptions.item.hoverStyle.hatching.step]
           */
          step?: number;
          /**
           * [descr:dxFunnelOptions.item.hoverStyle.hatching.width]
           */
          width?: number;
        };
      };
      /**
       * [descr:dxFunnelOptions.item.selectionStyle]
       */
      selectionStyle?: {
        /**
         * [descr:dxFunnelOptions.item.selectionStyle.border]
         */
        border?: {
          /**
           * [descr:dxFunnelOptions.item.selectionStyle.border.color]
           */
          color?: string;
          /**
           * [descr:dxFunnelOptions.item.selectionStyle.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:dxFunnelOptions.item.selectionStyle.border.width]
           */
          width?: number;
        };
        /**
         * [descr:dxFunnelOptions.item.selectionStyle.hatching]
         */
        hatching?: {
          /**
           * [descr:dxFunnelOptions.item.selectionStyle.hatching.direction]
           */
          direction?: common.charts.HatchDirection;
          /**
           * [descr:dxFunnelOptions.item.selectionStyle.hatching.opacity]
           */
          opacity?: number;
          /**
           * [descr:dxFunnelOptions.item.selectionStyle.hatching.step]
           */
          step?: number;
          /**
           * [descr:dxFunnelOptions.item.selectionStyle.hatching.width]
           */
          width?: number;
        };
      };
    };
    /**
     * [descr:dxFunnelOptions.label]
     */
    label?: {
      /**
       * [descr:dxFunnelOptions.label.backgroundColor]
       */
      backgroundColor?: string;
      /**
       * [descr:dxFunnelOptions.label.border]
       */
      border?: {
        /**
         * [descr:dxFunnelOptions.label.border.color]
         */
        color?: string;
        /**
         * [descr:dxFunnelOptions.label.border.dashStyle]
         */
        dashStyle?: common.charts.DashStyle;
        /**
         * [descr:dxFunnelOptions.label.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxFunnelOptions.label.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxFunnelOptions.label.connector]
       */
      connector?: {
        /**
         * [descr:dxFunnelOptions.label.connector.color]
         */
        color?: string;
        /**
         * [descr:dxFunnelOptions.label.connector.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxFunnelOptions.label.connector.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxFunnelOptions.label.connector.width]
         */
        width?: number;
      };
      /**
       * [descr:dxFunnelOptions.label.customizeText]
       */
      customizeText?: (itemInfo: {
        item?: dxFunnel.Item;
        value?: number;
        valueText?: string;
        percent?: number;
        percentText?: string;
      }) => string;
      /**
       * [descr:dxFunnelOptions.label.font]
       */
      font?: Font;
      /**
       * [descr:dxFunnelOptions.label.format]
       */
      format?: ui.Format;
      /**
       * [descr:dxFunnelOptions.label.horizontalAlignment]
       */
      horizontalAlignment?: common.HorizontalEdge;
      /**
       * [descr:dxFunnelOptions.label.horizontalOffset]
       */
      horizontalOffset?: number;
      /**
       * [descr:dxFunnelOptions.label.position]
       */
      position?: common.charts.LabelPosition;
      /**
       * [descr:dxFunnelOptions.label.showForZeroValues]
       */
      showForZeroValues?: boolean;
      /**
       * [descr:dxFunnelOptions.label.textOverflow]
       */
      textOverflow?: common.charts.TextOverflow;
      /**
       * [descr:dxFunnelOptions.label.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxFunnelOptions.label.wordWrap]
       */
      wordWrap?: common.charts.WordWrap;
    };
    /**
     * [descr:dxFunnelOptions.legend]
     */
    legend?: dxFunnel.Legend;
    /**
     * [descr:dxFunnelOptions.neckHeight]
     */
    neckHeight?: number;
    /**
     * [descr:dxFunnelOptions.neckWidth]
     */
    neckWidth?: number;
    /**
     * [descr:dxFunnelOptions.onHoverChanged]
     */
    onHoverChanged?: (e: dxFunnel.HoverChangedEvent) => void;
    /**
     * [descr:dxFunnelOptions.onItemClick]
     */
    onItemClick?:
    | ((e: dxFunnel.ItemClickEvent) => void)
    | string;
    /**
     * [descr:dxFunnelOptions.onLegendClick]
     */
    onLegendClick?:
    | ((e: dxFunnel.LegendClickEvent) => void)
    | string;
    /**
     * [descr:dxFunnelOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxFunnel.SelectionChangedEvent
    ) => void;
    /**
     * [descr:dxFunnelOptions.palette]
     */
    palette?: string[] | common.charts.Palette;
    /**
     * [descr:dxFunnelOptions.paletteExtensionMode]
     */
    paletteExtensionMode?: common.charts.PaletteExtensionMode;
    /**
     * [descr:dxFunnelOptions.resolveLabelOverlapping]
     */
    resolveLabelOverlapping?: common.charts.ShiftLabelOverlap;
    /**
     * [descr:dxFunnelOptions.selectionMode]
     */
    selectionMode?: common.SingleMultipleOrNone;
    /**
     * [descr:dxFunnelOptions.sortData]
     */
    sortData?: boolean;
    /**
     * [descr:dxFunnelOptions.tooltip]
     */
    tooltip?: dxFunnel.Tooltip;
    /**
     * [descr:dxFunnelOptions.valueField]
     */
    valueField?: string;
  }
  /**
   * [descr:dxLinearGauge]
   */
  export class dxLinearGauge extends BaseGauge<dxLinearGaugeOptions> {}
  namespace dxLinearGauge {
    /**
     * [descr:_viz_linear_gauge_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxLinearGauge>;
    /**
     * [descr:_viz_linear_gauge_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxLinearGauge>;
    /**
     * [descr:_viz_linear_gauge_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxLinearGauge>;
    /**
     * [descr:_viz_linear_gauge_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxLinearGauge> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_linear_gauge_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxLinearGauge>;
    /**
     * [descr:_viz_linear_gauge_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent =
      events.EventInfo<dxLinearGauge> &
      BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_linear_gauge_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxLinearGauge>;
    /**
     * [descr:_viz_linear_gauge_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxLinearGauge> &
      events.ChangedOptionInfo;
    export type Properties = dxLinearGaugeOptions;
    /**
     * [descr:dxLinearGaugeRangeContainer]
     */
    export type RangeContainer = BaseGaugeRangeContainer & {
      /**
       * [descr:dxLinearGaugeOptions.rangeContainer.horizontalOrientation]
       */
      horizontalOrientation?: common.HorizontalAlignment;
      /**
       * [descr:dxLinearGaugeOptions.rangeContainer.verticalOrientation]
       */
      verticalOrientation?: common.VerticalAlignment;
      /**
       * [descr:dxLinearGaugeOptions.rangeContainer.width]
       */
      width?:
      | {
        /**
             * [descr:dxLinearGaugeOptions.rangeContainer.width.start]
             */
        start?: number;
        /**
             * [descr:dxLinearGaugeOptions.rangeContainer.width.end]
             */
        end?: number;
      }
      | number;
    };
    /**
     * [descr:dxLinearGaugeScale]
     */
    export type Scale = BaseGaugeScale & {
      /**
       * [descr:dxLinearGaugeOptions.scale.horizontalOrientation]
       */
      horizontalOrientation?: common.HorizontalAlignment;
      /**
       * [descr:dxLinearGaugeOptions.scale.label]
       */
      label?: ScaleLabel;
      /**
       * [descr:dxLinearGaugeOptions.scale.scaleDivisionFactor]
       */
      scaleDivisionFactor?: number;
      /**
       * [descr:dxLinearGaugeOptions.scale.verticalOrientation]
       */
      verticalOrientation?: common.VerticalAlignment;
    };
    /**
     * [descr:dxLinearGaugeScaleLabel]
     */
    export type ScaleLabel = BaseGaugeScaleLabel & {
      /**
       * [descr:dxLinearGaugeOptions.scale.label.indentFromTick]
       */
      indentFromTick?: number;
    };
    /**
     * [descr:_viz_linear_gauge_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent =
      events.EventInfo<dxLinearGauge> &
      BaseGauge.TooltipInfo;
    /**
     * [descr:_viz_linear_gauge_TooltipShownEvent]
     */
    export type TooltipShownEvent = events.EventInfo<dxLinearGauge> &
    BaseGauge.TooltipInfo;
  }
  /**
   * [descr:dxLinearGaugeOptions]
   * @deprecated [depNote:dxLinearGaugeOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxLinearGaugeOptions
    extends BaseGaugeOptions<dxLinearGauge> {
    /**
     * [descr:dxLinearGaugeOptions.geometry]
     */
    geometry?: {
      /**
       * [descr:dxLinearGaugeOptions.geometry.orientation]
       */
      orientation?: common.Orientation;
    };
    /**
     * [descr:dxLinearGaugeOptions.rangeContainer]
     */
    rangeContainer?: dxLinearGauge.RangeContainer;
    /**
     * [descr:dxLinearGaugeOptions.scale]
     */
    scale?: dxLinearGauge.Scale;
    /**
     * [descr:dxLinearGaugeOptions.subvalueIndicator]
     */
    subvalueIndicator?: GaugeIndicator;
    /**
     * [descr:dxLinearGaugeOptions.valueIndicator]
     */
    valueIndicator?: GaugeIndicator;
  }
  /**
   * [descr:dxPieChart]
   */
  export class dxPieChart extends BaseChart<dxPieChartOptions> {
    /**
     * [descr:dxPieChart.getInnerRadius()]
     */
    getInnerRadius(): number;
  }
  namespace dxPieChart {
    /**
     * [descr:dxPieChartAdaptiveLayout]
     */
    export type AdaptiveLayout = BaseChartAdaptiveLayout & {
      /**
       * [descr:dxPieChartOptions.adaptiveLayout.keepLabels]
       */
      keepLabels?: boolean;
    };
    /**
     * [descr:_viz_pie_chart_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxPieChart>;
    /**
     * [descr:_viz_pie_chart_DoneEvent]
     */
    export type DoneEvent = events.EventInfo<dxPieChart>;
    /**
     * [descr:_viz_pie_chart_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxPieChart>;
    /**
     * [descr:_viz_pie_chart_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxPieChart>;
    /**
     * [descr:_viz_pie_chart_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxPieChart> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_pie_chart_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxPieChart>;
    /**
     * [descr:_viz_pie_chart_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent =
      events.EventInfo<dxPieChart> &
      BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_pie_chart_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxPieChart>;
    /**
     * [descr:dxPieChartLegend]
     */
    export type Legend = BaseChartLegend & {
      /**
       * [descr:dxPieChartOptions.legend.customizeHint]
       */
      customizeHint?: (pointInfo: {
        pointName?: any;
        pointIndex?: number;
        pointColor?: string;
      }) => string;
      /**
       * [descr:dxPieChartOptions.legend.customizeItems]
       */
      customizeItems?: (items: LegendItem[]) => LegendItem[];
      /**
       * [descr:dxPieChartOptions.legend.customizeText]
       */
      customizeText?: (pointInfo: {
        pointName?: any;
        pointIndex?: number;
        pointColor?: string;
      }) => string;
      /**
       * [descr:dxPieChartOptions.legend.hoverMode]
       */
      hoverMode?: PieChartLegendHoverMode;
      /**
       * [descr:dxPieChartOptions.legend.markerTemplate]
       */
      markerTemplate?:
      | core.template
      | ((
        legendItem: LegendItem,
        element: SVGGElement
      ) => string | core.UserDefinedElement<SVGElement>);
    };
    /**
     * [descr:_viz_pie_chart_LegendClickEvent]
     */
    export type LegendClickEvent = events.NativeEventInfo<
    dxPieChart,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_pie_chart_LegendClickEvent.target]
       */
      readonly target: string | number;
      /**
       * [descr:_viz_pie_chart_LegendClickEvent.points]
       */
      readonly points: piePointObject[];
    };
    /**
     * [descr:_viz_pie_chart_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxPieChart> &
    events.ChangedOptionInfo;
    export type PieChartAnnotationLocation = 'center' | 'edge';
    export type PieChartLegendHoverMode = 'none' | 'allArgumentPoints';
    export type PieChartSegmentDirection = 'anticlockwise' | 'clockwise';
    export type PieChartSeriesInteractionMode = 'none' | 'onlyPoint';
    export type PieChartType = 'donut' | 'doughnut' | 'pie';
    /**
     * [descr:_viz_pie_chart_PointClickEvent]
     */
    export type PointClickEvent = events.NativeEventInfo<
    dxPieChart,
    MouseEvent | PointerEvent
    > &
    BaseChart.PointInteractionInfo;
    /**
     * [descr:_viz_pie_chart_PointHoverChangedEvent]
     */
    export type PointHoverChangedEvent =
      events.EventInfo<dxPieChart> &
      BaseChart.PointInteractionInfo;
    /**
     * [descr:_viz_pie_chart_PointSelectionChangedEvent]
     */
    export type PointSelectionChangedEvent =
      events.EventInfo<dxPieChart> &
      BaseChart.PointInteractionInfo;
    export type Properties = dxPieChartOptions;
    export type SmallValuesGroupingMode =
      | 'none'
      | 'smallValueThreshold'
      | 'topN';
    /**
     * [descr:_viz_pie_chart_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent = events.EventInfo<dxPieChart> &
    BaseChart.TooltipInfo;
    /**
     * [descr:_viz_pie_chart_TooltipShownEvent]
     */
    export type TooltipShownEvent = events.EventInfo<dxPieChart> &
    BaseChart.TooltipInfo;
  }
  /**
   * [descr:dxPieChartAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartAnnotationConfig
    extends dxPieChartCommonAnnotationConfig {
    /**
     * [descr:dxPieChartAnnotationConfig.name]
     */
    name?: string;
  }
  /**
   * [descr:dxPieChartCommonAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartCommonAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * [descr:dxPieChartCommonAnnotationConfig.location]
     */
    location?: dxPieChart.PieChartAnnotationLocation;
    /**
     * [descr:dxPieChartCommonAnnotationConfig.argument]
     */
    argument?: number | Date | string;
    /**
     * [descr:dxPieChartCommonAnnotationConfig.series]
     */
    series?: string;
    /**
     * [descr:dxPieChartCommonAnnotationConfig.customizeTooltip]
     */
    customizeTooltip?: (annotation: dxPieChartAnnotationConfig | any) => any;
    /**
     * [descr:dxPieChartCommonAnnotationConfig.template]
     */
    template?:
    | core.template
    | ((
      annotation: dxPieChartAnnotationConfig | any,
      element: SVGGElement
    ) => string | core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxPieChartCommonAnnotationConfig.tooltipTemplate]
     */
    tooltipTemplate?:
    | core.template
    | ((
      annotation: dxPieChartAnnotationConfig | any,
      element: core.DxElement
    ) => string | core.UserDefinedElement);
  }
  /**
   * [descr:dxPieChartOptions]
   * @deprecated [depNote:dxPieChartOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartOptions extends BaseChartOptions<dxPieChart> {
    /**
     * [descr:dxPieChartOptions.adaptiveLayout]
     */
    adaptiveLayout?: dxPieChart.AdaptiveLayout;
    /**
     * [descr:dxPieChartOptions.centerTemplate]
     */
    centerTemplate?:
    | core.template
    | ((
      component: dxPieChart,
      element: SVGGElement
    ) => string | core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxPieChartOptions.commonSeriesSettings]
     */
    commonSeriesSettings?: any;
    /**
     * [descr:dxPieChartOptions.diameter]
     */
    diameter?: number;
    /**
     * [descr:dxPieChartOptions.innerRadius]
     */
    innerRadius?: number;
    /**
     * [descr:dxPieChartOptions.legend]
     */
    legend?: dxPieChart.Legend;
    /**
     * [descr:dxPieChartOptions.minDiameter]
     */
    minDiameter?: number;
    /**
     * [descr:dxPieChartOptions.onLegendClick]
     */
    onLegendClick?:
    | ((e: dxPieChart.LegendClickEvent) => void)
    | string;
    /**
     * [descr:dxPieChartOptions.palette]
     */
    palette?: string[] | common.charts.Palette;
    /**
     * [descr:dxPieChartOptions.resolveLabelOverlapping]
     */
    resolveLabelOverlapping?: common.charts.ShiftLabelOverlap;
    /**
     * [descr:dxPieChartOptions.segmentsDirection]
     */
    segmentsDirection?: dxPieChart.PieChartSegmentDirection;
    /**
     * [descr:dxPieChartOptions.series]
     */
    series?: PieChartSeries | PieChartSeries[];
    /**
     * [descr:dxPieChartOptions.seriesTemplate]
     */
    seriesTemplate?: {
      /**
       * [descr:dxPieChartOptions.seriesTemplate.customizeSeries]
       */
      customizeSeries?: (seriesName: any) => PieChartSeries;
      /**
       * [descr:dxPieChartOptions.seriesTemplate.nameField]
       */
      nameField?: string;
    };
    /**
     * [descr:dxPieChartOptions.sizeGroup]
     */
    sizeGroup?: string;
    /**
     * [descr:dxPieChartOptions.startAngle]
     */
    startAngle?: number;
    /**
     * [descr:dxPieChartOptions.type]
     */
    type?: dxPieChart.PieChartType;
    /**
     * [descr:dxPieChartOptions.annotations]
     */
    annotations?: (dxPieChartAnnotationConfig | any)[];
    /**
     * [descr:dxPieChartOptions.commonAnnotationSettings]
     */
    commonAnnotationSettings?: dxPieChartCommonAnnotationConfig;
    /**
     * [descr:dxPieChartOptions.customizeAnnotation]
     */
    customizeAnnotation?: (
      annotation: dxPieChartAnnotationConfig | any
    ) => dxPieChartAnnotationConfig;
  }
  /**
   * [descr:dxPieChartSeriesTypes]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartSeriesTypes {
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries]
     */
    CommonPieChartSeries?: dxPieChartSeriesTypesCommonPieChartSeries;
    /**
     * [descr:dxPieChartSeriesTypes.DoughnutSeries]
     */
    DoughnutSeries?: any;
    /**
     * [descr:dxPieChartSeriesTypes.PieSeries]
     */
    PieSeries?: any;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPieChartSeriesTypesCommonPieChartSeries {
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.argumentType]
     */
    argumentType?: common.charts.ChartsDataType;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border]
     */
    border?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border.color]
       */
      color?: string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.color]
     */
    color?: string | common.charts.ChartsColor;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverMode]
     */
    hoverMode?: dxPieChart.PieChartSeriesInteractionMode;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle]
     */
    hoverStyle?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border]
       */
      border?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.dashStyle]
         */
        dashStyle?: common.charts.DashStyle;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching]
       */
      hatching?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.direction]
         */
        direction?: common.charts.HatchDirection;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.step]
         */
        step?: number;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.hatching.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.hoverStyle.highlight]
       */
      highlight?: boolean;
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label]
     */
    label?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.argumentFormat]
       */
      argumentFormat?: ui.Format;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.backgroundColor]
       */
      backgroundColor?: string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border]
       */
      border?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border.color]
         */
        color?: string;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border.dashStyle]
         */
        dashStyle?: common.charts.DashStyle;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.connector]
       */
      connector?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.color]
         */
        color?: string;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.connector.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.customizeText]
       */
      customizeText?: (pointInfo: any) => string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.font]
       */
      font?: Font;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.format]
       */
      format?: ui.Format;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.position]
       */
      position?: common.charts.LabelPosition;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.radialOffset]
       */
      radialOffset?: number;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.rotationAngle]
       */
      rotationAngle?: number;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.textOverflow]
       */
      textOverflow?: common.charts.TextOverflow;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.wordWrap]
       */
      wordWrap?: common.charts.WordWrap;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.label.displayFormat]
       */
      displayFormat?: string;
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.maxLabelCount]
     */
    maxLabelCount?: number;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.minSegmentSize]
     */
    minSegmentSize?: number;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionMode]
     */
    selectionMode?: dxPieChart.PieChartSeriesInteractionMode;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle]
     */
    selectionStyle?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border]
       */
      border?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.dashStyle]
         */
        dashStyle?: common.charts.DashStyle;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching]
       */
      hatching?: {
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.direction]
         */
        direction?: common.charts.HatchDirection;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.step]
         */
        step?: number;
        /**
         * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.hatching.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.selectionStyle.highlight]
       */
      highlight?: boolean;
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping]
     */
    smallValuesGrouping?: {
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.groupName]
       */
      groupName?: string;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.mode]
       */
      mode?: dxPieChart.SmallValuesGroupingMode;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.threshold]
       */
      threshold?: number;
      /**
       * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.smallValuesGrouping.topCount]
       */
      topCount?: number;
    };
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.tagField]
     */
    tagField?: string;
    /**
     * [descr:dxPieChartSeriesTypes.CommonPieChartSeries.valueField]
     */
    valueField?: string;
  }
  /**
   * [descr:dxPolarChart]
   */
  export class dxPolarChart extends BaseChart<dxPolarChartOptions> {
    /**
     * [descr:dxPolarChart.getValueAxis()]
     */
    getValueAxis(): chartAxisObject;
    /**
     * [descr:dxPolarChart.resetVisualRange()]
     */
    resetVisualRange(): void;
  }
  namespace dxPolarChart {
    /**
     * [descr:dxPolarChartAdaptiveLayout]
     */
    export type AdaptiveLayout = BaseChartAdaptiveLayout & {
      /**
       * [descr:dxPolarChartOptions.adaptiveLayout.height]
       */
      height?: number;
      /**
       * [descr:dxPolarChartOptions.adaptiveLayout.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartArgumentAxis]
     */
    export type ArgumentAxis = CommonAxisSettings & {
      /**
       * [descr:dxPolarChartOptions.argumentAxis.argumentType]
       */
      argumentType?: common.charts.ChartsDataType;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.axisDivisionFactor]
       */
      axisDivisionFactor?: number;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.categories]
       */
      categories?: (number | string | Date)[];
      /**
       * [descr:dxPolarChartOptions.argumentAxis.constantLines]
       */
      constantLines?: ArgumentAxisConstantLines[];
      /**
       * [descr:dxPolarChartOptions.argumentAxis.firstPointOnStartAngle]
       */
      firstPointOnStartAngle?: boolean;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.hoverMode]
       */
      hoverMode?: common.charts.ArgumentAxisHoverMode;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.label]
       */
      label?: ArgumentAxisLabel;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.linearThreshold]
       */
      linearThreshold?: number;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.logarithmBase]
       */
      logarithmBase?: number;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.minorTick]
       */
      minorTick?: ArgumentAxisMinorTick;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.minorTickCount]
       */
      minorTickCount?: number;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.minorTickInterval]
       */
      minorTickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.originValue]
       */
      originValue?: number;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.period]
       */
      period?: number;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.startAngle]
       */
      startAngle?: number;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.strips]
       */
      strips?: ArgumentAxisStrips[];
      /**
       * [descr:dxPolarChartOptions.argumentAxis.tick]
       */
      tick?: ArgumentAxisTick;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.tickInterval]
       */
      tickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.type]
       */
      type?: common.charts.AxisScaleType;
    };
    /**
     * [descr:_viz_polar_chart_ArgumentAxisClickEvent]
     */
    export type ArgumentAxisClickEvent = events.NativeEventInfo<
    dxPolarChart,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_polar_chart_ArgumentAxisClickEvent.argument]
       */
      readonly argument: Date | number | string;
    };
    /**
     * [descr:dxPolarChartArgumentAxisConstantLines]
     */
    export type ArgumentAxisConstantLines =
      CommonAxisSettingsConstantLineStyle & {
        /**
         * [descr:dxPolarChartOptions.argumentAxis.constantLines.displayBehindSeries]
         */
        displayBehindSeries?: boolean;
        /**
         * [descr:dxPolarChartOptions.argumentAxis.constantLines.extendAxis]
         */
        extendAxis?: boolean;
        /**
         * [descr:dxPolarChartOptions.argumentAxis.constantLines.label]
         */
        label?: ArgumentAxisConstantLinesLabel;
        /**
         * [descr:dxPolarChartOptions.argumentAxis.constantLines.value]
         */
        value?: number | Date | string;
      };
    /**
     * [descr:dxPolarChartArgumentAxisConstantLinesLabel]
     */
    export type ArgumentAxisConstantLinesLabel =
      CommonAxisSettingsConstantLineStyleLabel & {
        /**
         * [descr:dxPolarChartOptions.argumentAxis.constantLines.label.text]
         */
        text?: string;
      };
    /**
     * [descr:dxPolarChartArgumentAxisLabel]
     */
    export type ArgumentAxisLabel = CommonAxisSettingsLabel & {
      /**
       * [descr:dxPolarChartOptions.argumentAxis.label.customizeHint]
       */
      customizeHint?: (argument: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.label.customizeText]
       */
      customizeText?: (argument: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.label.format]
       */
      format?: ui.Format;
    };
    /**
     * [descr:dxPolarChartArgumentAxisMinorTick]
     */
    export type ArgumentAxisMinorTick = CommonAxisSettingsMinorTick & {
      /**
       * [descr:dxPolarChartOptions.argumentAxis.minorTick.shift]
       */
      shift?: number;
    };
    /**
     * [descr:dxPolarChartArgumentAxisStrips]
     */
    export type ArgumentAxisStrips = CommonAxisSettingsStripStyle & {
      /**
       * [descr:dxPolarChartOptions.argumentAxis.strips.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.strips.endValue]
       */
      endValue?: number | Date | string;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.strips.label]
       */
      label?: ArgumentAxisStripsLabel;
      /**
       * [descr:dxPolarChartOptions.argumentAxis.strips.startValue]
       */
      startValue?: number | Date | string;
    };
    /**
     * [descr:dxPolarChartArgumentAxisStripsLabel]
     */
    export type ArgumentAxisStripsLabel = CommonAxisSettingsStripStyleLabel & {
      /**
       * [descr:dxPolarChartOptions.argumentAxis.strips.label.text]
       */
      text?: string;
    };
    /**
     * [descr:dxPolarChartArgumentAxisTick]
     */
    export type ArgumentAxisTick = CommonAxisSettingsTick & {
      /**
       * [descr:dxPolarChartOptions.argumentAxis.tick.shift]
       */
      shift?: number;
    };
    /**
     * [descr:dxPolarChartCommonAxisSettings]
     */
    export interface CommonAxisSettings {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.allowDecimals]
       */
      allowDecimals?: boolean;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle]
       */
      constantLineStyle?: CommonAxisSettingsConstantLineStyle;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.discreteAxisDivisionMode]
       */
      discreteAxisDivisionMode?: common.charts.DiscreteAxisDivisionMode;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.endOnTick]
       */
      endOnTick?: boolean;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.grid]
       */
      grid?: {
        /**
         * [descr:dxPolarChartOptions.commonAxisSettings.grid.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartOptions.commonAxisSettings.grid.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPolarChartOptions.commonAxisSettings.grid.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartOptions.commonAxisSettings.grid.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.inverted]
       */
      inverted?: boolean;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.label]
       */
      label?: CommonAxisSettingsLabel;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid]
       */
      minorGrid?: {
        /**
         * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartOptions.commonAxisSettings.minorGrid.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorTick]
       */
      minorTick?: CommonAxisSettingsMinorTick;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.stripStyle]
       */
      stripStyle?: CommonAxisSettingsStripStyle;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.tick]
       */
      tick?: CommonAxisSettingsTick;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.width]
       */
      width?: number;
    }
    /**
     * [descr:dxPolarChartCommonAxisSettingsConstantLineStyle]
     */
    export interface CommonAxisSettingsConstantLineStyle {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.label]
       */
      label?: CommonAxisSettingsConstantLineStyleLabel;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.width]
       */
      width?: number;
    }
    /**
     * [descr:dxPolarChartCommonAxisSettingsConstantLineStyleLabel]
     */
    export interface CommonAxisSettingsConstantLineStyleLabel {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.label.font]
       */
      font?: Font;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.constantLineStyle.label.visible]
       */
      visible?: boolean;
    }
    /**
     * [descr:dxPolarChartCommonAxisSettingsLabel]
     */
    export interface CommonAxisSettingsLabel {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.label.font]
       */
      font?: Font;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.label.indentFromAxis]
       */
      indentFromAxis?: number;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.label.overlappingBehavior]
       */
      overlappingBehavior?: common.charts.LabelOverlap;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.label.visible]
       */
      visible?: boolean;
    }
    /**
     * [descr:dxPolarChartCommonAxisSettingsMinorTick]
     */
    export interface CommonAxisSettingsMinorTick {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.length]
       */
      length?: number;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.minorTick.width]
       */
      width?: number;
    }
    /**
     * [descr:dxPolarChartCommonAxisSettingsStripStyle]
     */
    export interface CommonAxisSettingsStripStyle {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.stripStyle.label]
       */
      label?: CommonAxisSettingsStripStyleLabel;
    }
    /**
     * [descr:dxPolarChartCommonAxisSettingsStripStyleLabel]
     */
    export interface CommonAxisSettingsStripStyleLabel {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.stripStyle.label.font]
       */
      font?: Font;
    }
    /**
     * [descr:dxPolarChartCommonAxisSettingsTick]
     */
    export interface CommonAxisSettingsTick {
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.tick.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.tick.length]
       */
      length?: number;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.tick.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.tick.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartOptions.commonAxisSettings.tick.width]
       */
      width?: number;
    }
    /**
     * [descr:dxPolarChartCommonSeriesSetting]
     */
    export type CommonSeriesSettings =
      dxPolarChartSeriesTypesCommonPolarChartSeries & {
        /**
         * [descr:dxPolarChartOptions.commonSeriesSettings.area]
         */
        area?: any;
        /**
         * [descr:dxPolarChartOptions.commonSeriesSettings.bar]
         */
        bar?: any;
        /**
         * [descr:dxPolarChartOptions.commonSeriesSettings.line]
         */
        line?: any;
        /**
         * [descr:dxPolarChartOptions.commonSeriesSettings.scatter]
         */
        scatter?: any;
        /**
         * [descr:dxPolarChartOptions.commonSeriesSettings.stackedbar]
         */
        stackedbar?: any;
        /**
         * [descr:dxPolarChartOptions.commonSeriesSettings.type]
         */
        type?: PolarChartSeriesType;
      };
    /**
     * [descr:_viz_polar_chart_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxPolarChart>;
    /**
     * [descr:_viz_polar_chart_DoneEvent]
     */
    export type DoneEvent = events.EventInfo<dxPolarChart>;
    /**
     * [descr:_viz_polar_chart_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxPolarChart>;
    /**
     * [descr:_viz_polar_chart_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxPolarChart>;
    /**
     * [descr:_viz_polar_chart_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxPolarChart> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_polar_chart_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxPolarChart>;
    /**
     * [descr:_viz_polar_chart_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent =
      events.EventInfo<dxPolarChart> &
      BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_polar_chart_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxPolarChart>;
    /**
     * [descr:dxPolarChartLegend]
     */
    export type Legend = BaseChartLegend & {
      /**
       * [descr:dxPolarChartOptions.legend.customizeHint]
       */
      customizeHint?: (seriesInfo: {
        seriesName?: any;
        seriesIndex?: number;
        seriesColor?: string;
      }) => string;
      /**
       * [descr:dxPolarChartOptions.legend.customizeText]
       */
      customizeText?: (seriesInfo: {
        seriesName?: any;
        seriesIndex?: number;
        seriesColor?: string;
      }) => string;
      /**
       * [descr:dxPolarChartOptions.legend.hoverMode]
       */
      hoverMode?: common.charts.LegendHoverMode;
    };
    /**
     * [descr:_viz_polar_chart_LegendClickEvent]
     */
    export type LegendClickEvent = events.Cancelable &
    events.NativeEventInfo<
    dxPolarChart,
    MouseEvent | PointerEvent
    > & {
      /**
         * [descr:_viz_polar_chart_LegendClickEvent.target]
         */
      readonly target: polarChartSeriesObject;
    };
    /**
     * [descr:_viz_polar_chart_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxPolarChart> &
    events.ChangedOptionInfo;
    /**
     * [descr:_viz_polar_chart_PointClickEvent]
     */
    export type PointClickEvent = events.Cancelable &
    events.NativeEventInfo<
    dxPolarChart,
    MouseEvent | PointerEvent
    > &
    BaseChart.PointInteractionInfo;
    /**
     * [descr:_viz_polar_chart_PointHoverChangedEvent]
     */
    export type PointHoverChangedEvent =
      events.EventInfo<dxPolarChart> &
      BaseChart.PointInteractionInfo;
    /**
     * [descr:_viz_polar_chart_PointSelectionChangedEvent]
     */
    export type PointSelectionChangedEvent =
      events.EventInfo<dxPolarChart> &
      BaseChart.PointInteractionInfo;
    export type PolarChartSeriesType =
      | 'area'
      | 'bar'
      | 'line'
      | 'scatter'
      | 'stackedbar';
    export type Properties = dxPolarChartOptions;
    /**
     * [descr:_viz_polar_chart_SeriesClickEvent]
     */
    export type SeriesClickEvent = events.NativeEventInfo<
    dxPolarChart,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_polar_chart_SeriesClickEvent.target]
       */
      readonly target: polarChartSeriesObject;
    };
    /**
     * [descr:_viz_polar_chart_SeriesHoverChangedEvent]
     */
    export type SeriesHoverChangedEvent =
      events.EventInfo<dxPolarChart> & SeriesInteractionInfo;
    /**
     * [descr:_viz_polar_chart_SeriesInteractionInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface SeriesInteractionInfo {
      /**
       * [descr:_viz_polar_chart_SeriesInteractionInfo.target]
       */
      target: polarChartSeriesObject;
    }
    /**
     * [descr:_viz_polar_chart_SeriesSelectionChangedEvent]
     */
    export type SeriesSelectionChangedEvent =
      events.EventInfo<dxPolarChart> & SeriesInteractionInfo;
    /**
     * [descr:dxPolarChartTooltip]
     */
    export type Tooltip = BaseChartTooltip & {
      /**
       * [descr:dxPolarChartOptions.tooltip.shared]
       */
      shared?: boolean;
    };
    /**
     * [descr:_viz_polar_chart_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent = events.EventInfo<dxPolarChart> &
    BaseChart.TooltipInfo;
    /**
     * [descr:_viz_polar_chart_TooltipShownEvent]
     */
    export type TooltipShownEvent = events.EventInfo<dxPolarChart> &
    BaseChart.TooltipInfo;
    /**
     * [descr:dxPolarChartValueAxis]
     */
    export type ValueAxis = CommonAxisSettings & {
      /**
       * [descr:dxPolarChartOptions.valueAxis.axisDivisionFactor]
       */
      axisDivisionFactor?: number;
      /**
       * [descr:dxPolarChartOptions.valueAxis.categories]
       */
      categories?: (number | string | Date)[];
      /**
       * [descr:dxPolarChartOptions.valueAxis.constantLines]
       */
      constantLines?: ValueAxisConstantLines[];
      /**
       * [descr:dxPolarChartOptions.valueAxis.endOnTick]
       */
      endOnTick?: boolean;
      /**
       * [descr:dxPolarChartOptions.valueAxis.label]
       */
      label?: ValueAxisLabel;
      /**
       * [descr:dxPolarChartOptions.valueAxis.linearThreshold]
       */
      linearThreshold?: number;
      /**
       * [descr:dxPolarChartOptions.valueAxis.logarithmBase]
       */
      logarithmBase?: number;
      /**
       * [descr:dxPolarChartOptions.valueAxis.maxValueMargin]
       */
      maxValueMargin?: number;
      /**
       * [descr:dxPolarChartOptions.valueAxis.minValueMargin]
       */
      minValueMargin?: number;
      /**
       * [descr:dxPolarChartOptions.valueAxis.minVisualRangeLength]
       */
      minVisualRangeLength?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxPolarChartOptions.valueAxis.minorTickCount]
       */
      minorTickCount?: number;
      /**
       * [descr:dxPolarChartOptions.valueAxis.minorTickInterval]
       */
      minorTickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxPolarChartOptions.valueAxis.showZero]
       */
      showZero?: boolean;
      /**
       * [descr:dxPolarChartOptions.valueAxis.strips]
       */
      strips?: ValueAxisStrips[];
      /**
       * [descr:dxPolarChartOptions.valueAxis.tick]
       */
      tick?: ValueAxisTick;
      /**
       * [descr:dxPolarChartOptions.valueAxis.tickInterval]
       */
      tickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxPolarChartOptions.valueAxis.type]
       */
      type?: common.charts.AxisScaleType;
      /**
       * [descr:dxPolarChartOptions.valueAxis.valueMarginsEnabled]
       */
      valueMarginsEnabled?: boolean;
      /**
       * [descr:dxPolarChartOptions.valueAxis.valueType]
       */
      valueType?: common.charts.ChartsDataType;
      /**
       * [descr:dxPolarChartOptions.valueAxis.visualRange]
       */
      visualRange?:
      | common.charts.VisualRange
      | (number | string | Date)[];
      /**
       * [descr:dxPolarChartOptions.valueAxis.visualRangeUpdateMode]
       */
      visualRangeUpdateMode?: ValueAxisVisualRangeUpdateMode;
      /**
       * [descr:dxPolarChartOptions.valueAxis.wholeRange]
       */
      wholeRange?:
      | common.charts.VisualRange
      | (number | string | Date)[];
    };
    /**
     * [descr:dxPolarChartValueAxisConstantLines]
     */
    export type ValueAxisConstantLines = CommonAxisSettingsConstantLineStyle & {
      /**
       * [descr:dxPolarChartOptions.valueAxis.constantLines.displayBehindSeries]
       */
      displayBehindSeries?: boolean;
      /**
       * [descr:dxPolarChartOptions.valueAxis.constantLines.extendAxis]
       */
      extendAxis?: boolean;
      /**
       * [descr:dxPolarChartOptions.valueAxis.constantLines.label]
       */
      label?: ValueAxisConstantLinesLabel;
      /**
       * [descr:dxPolarChartOptions.valueAxis.constantLines.value]
       */
      value?: number | Date | string;
    };
    /**
     * [descr:dxPolarChartValueAxisConstantLinesLabel]
     */
    export type ValueAxisConstantLinesLabel =
      CommonAxisSettingsConstantLineStyleLabel & {
        /**
         * [descr:dxPolarChartOptions.valueAxis.constantLines.label.text]
         */
        text?: string;
      };
    /**
     * [descr:dxPolarChartValueAxisLabel]
     */
    export type ValueAxisLabel = CommonAxisSettingsLabel & {
      /**
       * [descr:dxPolarChartOptions.valueAxis.label.customizeHint]
       */
      customizeHint?: (axisValue: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxPolarChartOptions.valueAxis.label.customizeText]
       */
      customizeText?: (axisValue: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxPolarChartOptions.valueAxis.label.format]
       */
      format?: ui.Format;
    };
    /**
     * [descr:dxPolarChartValueAxisStrips]
     */
    export type ValueAxisStrips = CommonAxisSettingsStripStyle & {
      /**
       * [descr:dxPolarChartOptions.valueAxis.strips.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartOptions.valueAxis.strips.endValue]
       */
      endValue?: number | Date | string;
      /**
       * [descr:dxPolarChartOptions.valueAxis.strips.label]
       */
      label?: ValueAxisStripsLabel;
      /**
       * [descr:dxPolarChartOptions.valueAxis.strips.startValue]
       */
      startValue?: number | Date | string;
    };
    /**
     * [descr:dxPolarChartValueAxisStripsLabel]
     */
    export type ValueAxisStripsLabel = CommonAxisSettingsStripStyleLabel & {
      /**
       * [descr:dxPolarChartOptions.valueAxis.strips.label.text]
       */
      text?: string;
    };
    /**
     * [descr:dxPolarChartValueAxisTick]
     */
    export type ValueAxisTick = CommonAxisSettingsTick & {
      /**
       * [descr:dxPolarChartOptions.valueAxis.tick.visible]
       */
      visible?: boolean;
    };
    export type ValueAxisVisualRangeUpdateMode = 'auto' | 'keep' | 'reset';
    /**
     * [descr:_viz_polar_chart_ZoomEndEvent]
     */
    export type ZoomEndEvent = events.Cancelable &
    events.NativeEventInfo<
    dxPolarChart,
    MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_viz_polar_chart_ZoomEndEvent.axis]
         */
      readonly axis: chartAxisObject;
      /**
         * [descr:_viz_polar_chart_ZoomEndEvent.range]
         */
      readonly range: common.charts.VisualRange;
      /**
         * [descr:_viz_polar_chart_ZoomEndEvent.previousRange]
         */
      readonly previousRange: common.charts.VisualRange;
      /**
         * [descr:_viz_polar_chart_ZoomEndEvent.actionType]
         */
      readonly actionType: common.charts.ZoomPanAction;
      /**
         * [descr:_viz_polar_chart_ZoomEndEvent.zoomFactor]
         */
      readonly zoomFactor: number;
      /**
         * [descr:_viz_polar_chart_ZoomEndEvent.shift]
         */
      readonly shift: number;
    };
    /**
     * [descr:_viz_polar_chart_ZoomStartEvent]
     */
    export type ZoomStartEvent = events.Cancelable &
    events.NativeEventInfo<
    dxPolarChart,
    MouseEvent | TouchEvent
    > & {
      /**
         * [descr:_viz_polar_chart_ZoomStartEvent.axis]
         */
      readonly axis: chartAxisObject;
      /**
         * [descr:_viz_polar_chart_ZoomStartEvent.range]
         */
      readonly range: common.charts.VisualRange;
      /**
         * [descr:_viz_polar_chart_ZoomStartEvent.actionType]
         */
      readonly actionType: common.charts.ZoomPanAction;
    };
  }
  /**
   * [descr:dxPolarChartAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartAnnotationConfig
    extends dxPolarChartCommonAnnotationConfig {
    /**
     * [descr:dxPolarChartAnnotationConfig.name]
     */
    name?: string;
  }
  /**
   * [descr:dxPolarChartCommonAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartCommonAnnotationConfig
    extends BaseChartAnnotationConfig {
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.angle]
     */
    angle?: number;
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.radius]
     */
    radius?: number;
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.customizeTooltip]
     */
    customizeTooltip?: (annotation: dxPolarChartAnnotationConfig | any) => any;
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.template]
     */
    template?:
    | core.template
    | ((
      annotation: dxPolarChartAnnotationConfig | any,
      element: SVGGElement
    ) => string | core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxPolarChartCommonAnnotationConfig.tooltipTemplate]
     */
    tooltipTemplate?:
    | core.template
    | ((
      annotation: dxPolarChartAnnotationConfig | any,
      element: core.DxElement
    ) => string | core.UserDefinedElement);
  }
  /**
   * [descr:dxPolarChartOptions]
   * @deprecated [depNote:dxPolarChartOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartOptions extends BaseChartOptions<dxPolarChart> {
    /**
     * [descr:dxPolarChartOptions.adaptiveLayout]
     */
    adaptiveLayout?: dxPolarChart.AdaptiveLayout;
    /**
     * [descr:dxPolarChartOptions.annotations]
     */
    annotations?: (dxPolarChartAnnotationConfig | any)[];
    /**
     * [descr:dxPolarChartOptions.argumentAxis]
     */
    argumentAxis?: dxPolarChart.ArgumentAxis;
    /**
     * [descr:dxPolarChartOptions.barGroupPadding]
     */
    barGroupPadding?: number;
    /**
     * [descr:dxPolarChartOptions.barGroupWidth]
     */
    barGroupWidth?: number;
    /**
     * [descr:dxPolarChartOptions.commonAnnotationSettings]
     */
    commonAnnotationSettings?: dxPolarChartCommonAnnotationConfig;
    /**
     * [descr:dxPolarChartOptions.commonAxisSettings]
     */
    commonAxisSettings?: dxPolarChart.CommonAxisSettings;
    /**
     * [descr:dxPolarChartOptions.commonSeriesSettings]
     */
    commonSeriesSettings?: dxPolarChart.CommonSeriesSettings;
    /**
     * [descr:dxPolarChartOptions.containerBackgroundColor]
     */
    containerBackgroundColor?: string;
    /**
     * [descr:dxPolarChartOptions.customizeAnnotation]
     */
    customizeAnnotation?: (
      annotation: dxPolarChartAnnotationConfig | any
    ) => dxPolarChartAnnotationConfig;
    /**
     * [descr:dxPolarChartOptions.dataPrepareSettings]
     */
    dataPrepareSettings?: {
      /**
       * [descr:dxPolarChartOptions.dataPrepareSettings.checkTypeForAllData]
       */
      checkTypeForAllData?: boolean;
      /**
       * [descr:dxPolarChartOptions.dataPrepareSettings.convertToAxisDataType]
       */
      convertToAxisDataType?: boolean;
      /**
       * [descr:dxPolarChartOptions.dataPrepareSettings.sortingMethod]
       */
      sortingMethod?:
      | boolean
      | ((
        a: { arg?: Date | number | string; val?: Date | number | string },
        b: { arg?: Date | number | string; val?: Date | number | string }
      ) => number);
    };
    /**
     * [descr:dxPolarChartOptions.legend]
     */
    legend?: dxPolarChart.Legend;
    /**
     * [descr:dxPolarChartOptions.negativesAsZeroes]
     */
    negativesAsZeroes?: boolean;
    /**
     * [descr:dxPolarChartOptions.onArgumentAxisClick]
     */
    onArgumentAxisClick?:
    | ((e: {
      component?: dxPolarChart;
      element?: core.DxElement;
      model?: any;
      event?: events.DxEvent;
      argument?: Date | number | string;
    }) => void)
    | string;
    /**
     * [descr:dxPolarChartOptions.onLegendClick]
     */
    onLegendClick?:
    | ((e: dxPolarChart.LegendClickEvent) => void)
    | string;
    /**
     * [descr:dxPolarChartOptions.onSeriesClick]
     */
    onSeriesClick?:
    | ((e: dxPolarChart.SeriesClickEvent) => void)
    | string;
    /**
     * [descr:dxPolarChartOptions.onSeriesHoverChanged]
     */
    onSeriesHoverChanged?: (
      e: dxPolarChart.SeriesHoverChangedEvent
    ) => void;
    /**
     * [descr:dxPolarChartOptions.onSeriesSelectionChanged]
     */
    onSeriesSelectionChanged?: (
      e: dxPolarChart.SeriesSelectionChangedEvent
    ) => void;
    /**
     * [descr:dxPolarChartOptions.onZoomEnd]
     */
    onZoomEnd?: (e: dxPolarChart.ZoomEndEvent) => void;
    /**
     * [descr:dxPolarChartOptions.onZoomStart]
     */
    onZoomStart?: (e: dxPolarChart.ZoomStartEvent) => void;
    /**
     * [descr:dxPolarChartOptions.resolveLabelOverlapping]
     */
    resolveLabelOverlapping?: common.charts.LabelOverlap;
    /**
     * [descr:dxPolarChartOptions.series]
     */
    series?: PolarChartSeries | PolarChartSeries[];
    /**
     * [descr:dxPolarChartOptions.seriesSelectionMode]
     */
    seriesSelectionMode?: common.SingleOrMultiple;
    /**
     * [descr:dxPolarChartOptions.seriesTemplate]
     */
    seriesTemplate?: {
      /**
       * [descr:dxPolarChartOptions.seriesTemplate.customizeSeries]
       */
      customizeSeries?: (seriesName: any) => PolarChartSeries;
      /**
       * [descr:dxPolarChartOptions.seriesTemplate.nameField]
       */
      nameField?: string;
    };
    /**
     * [descr:dxPolarChartOptions.tooltip]
     */
    tooltip?: dxPolarChart.Tooltip;
    /**
     * [descr:dxPolarChartOptions.useSpiderWeb]
     */
    useSpiderWeb?: boolean;
    /**
     * [descr:dxPolarChartOptions.valueAxis]
     */
    valueAxis?: dxPolarChart.ValueAxis;
  }
  /**
   * [descr:dxPolarChartSeriesTypes]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypes {
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries]
     */
    CommonPolarChartSeries?: dxPolarChartSeriesTypesCommonPolarChartSeries;
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries]
     */
    areapolarseries?: dxPolarChartSeriesTypesAreapolarseries;
    /**
     * [descr:dxPolarChartSeriesTypes.barpolarseries]
     */
    barpolarseries?: dxPolarChartSeriesTypesBarpolarseries;
    /**
     * [descr:dxPolarChartSeriesTypes.linepolarseries]
     */
    linepolarseries?: dxPolarChartSeriesTypesLinepolarseries;
    /**
     * [descr:dxPolarChartSeriesTypes.scatterpolarseries]
     */
    scatterpolarseries?: any;
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries]
     */
    stackedbarpolarseries?: dxPolarChartSeriesTypesStackedbarpolarseries;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesAreapolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries.point]
     */
    point?: dxPolarChartSeriesTypesAreapolarseriesPoint;
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesAreapolarseriesPoint
    extends dxPolarChartSeriesTypesCommonPolarChartSeriesPoint {
    /**
     * [descr:dxPolarChartSeriesTypes.areapolarseries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesBarpolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.barpolarseries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxPolarChartSeriesTypes.barpolarseries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.barPadding]
     */
    barPadding?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.barWidth]
     */
    barWidth?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border]
     */
    border?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.closed]
     */
    closed?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.color]
     */
    color?: string | common.charts.ChartsColor;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.dashStyle]
     */
    dashStyle?: common.charts.DashStyle;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverMode]
     */
    hoverMode?: common.charts.SeriesHoverMode;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle]
     */
    hoverStyle?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border]
       */
      border?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.dashStyle]
         */
        dashStyle?: common.charts.DashStyle;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching]
       */
      hatching?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.direction]
         */
        direction?: common.charts.HatchDirection;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.step]
         */
        step?: number;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.hatching.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.highlight]
       */
      highlight?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.hoverStyle.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.ignoreEmptyPoints]
     */
    ignoreEmptyPoints?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label]
     */
    label?: dxPolarChartSeriesTypesCommonPolarChartSeriesLabel;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.maxLabelCount]
     */
    maxLabelCount?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.minBarSize]
     */
    minBarSize?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.opacity]
     */
    opacity?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point]
     */
    point?: dxPolarChartSeriesTypesCommonPolarChartSeriesPoint;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionMode]
     */
    selectionMode?: common.charts.SeriesSelectionMode;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle]
     */
    selectionStyle?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border]
       */
      border?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.dashStyle]
         */
        dashStyle?: common.charts.DashStyle;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching]
       */
      hatching?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.direction]
         */
        direction?: common.charts.HatchDirection;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.step]
         */
        step?: number;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.hatching.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.highlight]
       */
      highlight?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.selectionStyle.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.showInLegend]
     */
    showInLegend?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.stack]
     */
    stack?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.tagField]
     */
    tagField?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar]
     */
    valueErrorBar?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.displayMode]
       */
      displayMode?: common.charts.ValueErrorBarDisplayMode;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.edgeLength]
       */
      edgeLength?: number;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.highValueField]
       */
      highValueField?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.lineWidth]
       */
      lineWidth?: number;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.lowValueField]
       */
      lowValueField?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.type]
       */
      type?: common.charts.ValueErrorBarType;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueErrorBar.value]
       */
      value?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.valueField]
     */
    valueField?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.width]
     */
    width?: number;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeriesLabel {
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.argumentFormat]
     */
    argumentFormat?: ui.Format;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.backgroundColor]
     */
    backgroundColor?: string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border]
     */
    border?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.dashStyle]
       */
      dashStyle?: common.charts.DashStyle;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector]
     */
    connector?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.connector.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.customizeText]
     */
    customizeText?: (pointInfo: any) => string;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.font]
     */
    font?: Font;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.format]
     */
    format?: ui.Format;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.position]
     */
    position?: common.charts.RelativePosition;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.rotationAngle]
     */
    rotationAngle?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.showForZeroValues]
     */
    showForZeroValues?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.visible]
     */
    visible?: boolean;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.label.displayFormat]
     */
    displayFormat?: string;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesCommonPolarChartSeriesPoint {
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border]
     */
    border?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.color]
       */
      color?: string;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.visible]
       */
      visible?: boolean;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.border.width]
       */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.color]
     */
    color?: string | common.charts.ChartsColor;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverMode]
     */
    hoverMode?: common.charts.PointInteractionMode;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle]
     */
    hoverStyle?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border]
       */
      border?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.hoverStyle.size]
       */
      size?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image]
     */
    image?:
    | string
    | {
      /**
           * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.height]
           */
      height?: number;
      /**
           * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.url]
           */
      url?: string;
      /**
           * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.image.width]
           */
      width?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionMode]
     */
    selectionMode?: common.charts.PointInteractionMode;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle]
     */
    selectionStyle?: {
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border]
       */
      border?: {
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.color]
         */
        color?: string;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.color]
       */
      color?: string | common.charts.ChartsColor;
      /**
       * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.selectionStyle.size]
       */
      size?: number;
    };
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.size]
     */
    size?: number;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.symbol]
     */
    symbol?: common.charts.PointSymbol;
    /**
     * [descr:dxPolarChartSeriesTypes.CommonPolarChartSeries.point.visible]
     */
    visible?: boolean;
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesLinepolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.linepolarseries.hoverMode]
     */
    hoverMode?: 'nearestPoint' | 'includePoints' | 'excludePoints' | 'none';
    /**
     * [descr:dxPolarChartSeriesTypes.linepolarseries.selectionMode]
     */
    selectionMode?: 'includePoints' | 'excludePoints' | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesStackedbarpolarseries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries.hoverMode]
     */
    hoverMode?: 'onlyPoint' | 'allSeriesPoints' | 'allArgumentPoints' | 'none';
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries.label]
     */
    label?: dxPolarChartSeriesTypesStackedbarpolarseriesLabel;
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries.selectionMode]
     */
    selectionMode?:
    | 'onlyPoint'
    | 'allSeriesPoints'
    | 'allArgumentPoints'
    | 'none';
  }
  /**
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxPolarChartSeriesTypesStackedbarpolarseriesLabel
    extends dxPolarChartSeriesTypesCommonPolarChartSeriesLabel {
    /**
     * [descr:dxPolarChartSeriesTypes.stackedbarpolarseries.label.position]
     */
    position?: common.charts.RelativePosition;
  }
  /**
   * [descr:dxRangeSelector]
   */
  export class dxRangeSelector extends BaseWidget<dxRangeSelectorOptions> {
    getDataSource(): data.DataSource;
    /**
     * [descr:dxRangeSelector.getValue()]
     */
    getValue(): (number | string | Date)[];
    render(): void;
    /**
     * [descr:dxRangeSelector.render(skipChartAnimation)]
     */
    render(skipChartAnimation: boolean): void;
    /**
     * [descr:dxRangeSelector.setValue(value)]
     */
    setValue(
      value:
      | (number | string | Date)[]
      | common.charts.VisualRange
    ): void;
  }
  namespace dxRangeSelector {
    export type AxisScale =
      | 'continuous'
      | 'discrete'
      | 'logarithmic'
      | 'semidiscrete';
    export type BackgroundImageLocation =
      | 'center'
      | 'centerBottom'
      | 'centerTop'
      | 'full'
      | 'leftBottom'
      | 'leftCenter'
      | 'leftTop'
      | 'rightBottom'
      | 'rightCenter'
      | 'rightTop';
    export type ChartAxisScale = 'continuous' | 'logarithmic';
    /**
     * [descr:_viz_range_selector_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxRangeSelector>;
    /**
     * [descr:_viz_range_selector_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxRangeSelector>;
    /**
     * [descr:_viz_range_selector_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxRangeSelector>;
    /**
     * [descr:_viz_range_selector_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxRangeSelector> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_range_selector_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxRangeSelector>;
    /**
     * [descr:_viz_range_selector_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent =
      events.EventInfo<dxRangeSelector> &
      BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_range_selector_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxRangeSelector>;
    /**
     * [descr:_viz_range_selector_OptionChangedEvent]
     */
    export type OptionChangedEvent =
      events.EventInfo<dxRangeSelector> &
      events.ChangedOptionInfo;
    export type Properties = dxRangeSelectorOptions;
    export type ValueChangedCallMode = 'onMoving' | 'onMovingComplete';
    /**
     * [descr:_viz_range_selector_ValueChangedEvent]
     */
    export type ValueChangedEvent = events.NativeEventInfo<
    dxRangeSelector,
    MouseEvent | TouchEvent
    > & {
      /**
       * [descr:_viz_range_selector_ValueChangedEvent.value]
       */
      readonly value: (number | string | Date)[];
      /**
       * [descr:_viz_range_selector_ValueChangedEvent.previousValue]
       */
      readonly previousValue: (number | string | Date)[];
    };
  }
  /**
   * [descr:dxRangeSelectorOptions]
   * @deprecated [depNote:dxRangeSelectorOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxRangeSelectorOptions
    extends BaseWidgetOptions<dxRangeSelector> {
    /**
     * [descr:dxRangeSelectorOptions.background]
     */
    background?: {
      /**
       * [descr:dxRangeSelectorOptions.background.color]
       */
      color?: string;
      /**
       * [descr:dxRangeSelectorOptions.background.image]
       */
      image?: {
        /**
         * [descr:dxRangeSelectorOptions.background.image.location]
         */
        location?: dxRangeSelector.BackgroundImageLocation;
        /**
         * [descr:dxRangeSelectorOptions.background.image.url]
         */
        url?: string;
      };
      /**
       * [descr:dxRangeSelectorOptions.background.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxRangeSelectorOptions.behavior]
     */
    behavior?: {
      /**
       * [descr:dxRangeSelectorOptions.behavior.allowSlidersSwap]
       */
      allowSlidersSwap?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.behavior.animationEnabled]
       */
      animationEnabled?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.behavior.callValueChanged]
       * @deprecated [depNote:dxRangeSelectorOptions.behavior.callValueChanged]
       */
      callValueChanged?: dxRangeSelector.ValueChangedCallMode;
      /**
       * [descr:dxRangeSelectorOptions.behavior.manualRangeSelectionEnabled]
       */
      manualRangeSelectionEnabled?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.behavior.moveSelectedRangeByClick]
       */
      moveSelectedRangeByClick?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.behavior.snapToTicks]
       */
      snapToTicks?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.behavior.valueChangeMode]
       */
      valueChangeMode?: common.SliderValueChangeMode;
    };
    /**
     * [descr:dxRangeSelectorOptions.chart]
     */
    chart?: {
      /**
       * [descr:dxRangeSelectorOptions.chart.barGroupPadding]
       */
      barGroupPadding?: number;
      /**
       * [descr:dxRangeSelectorOptions.chart.barGroupWidth]
       */
      barGroupWidth?: number;
      /**
       * [descr:dxRangeSelectorOptions.chart.bottomIndent]
       */
      bottomIndent?: number;
      /**
       * [descr:dxRangeSelectorOptions.chart.commonSeriesSettings]
       */
      commonSeriesSettings?: dxChart.dxChartCommonSeriesSettings;
      /**
       * [descr:dxRangeSelectorOptions.chart.dataPrepareSettings]
       */
      dataPrepareSettings?: {
        /**
         * [descr:dxRangeSelectorOptions.chart.dataPrepareSettings.checkTypeForAllData]
         */
        checkTypeForAllData?: boolean;
        /**
         * [descr:dxRangeSelectorOptions.chart.dataPrepareSettings.convertToAxisDataType]
         */
        convertToAxisDataType?: boolean;
        /**
         * [descr:dxRangeSelectorOptions.chart.dataPrepareSettings.sortingMethod]
         */
        sortingMethod?:
        | boolean
        | ((
          a: { arg?: Date | number | string; val?: Date | number | string },
          b: { arg?: Date | number | string; val?: Date | number | string }
        ) => number);
      };
      /**
       * [descr:dxRangeSelectorOptions.chart.maxBubbleSize]
       */
      maxBubbleSize?: number;
      /**
       * [descr:dxRangeSelectorOptions.chart.minBubbleSize]
       */
      minBubbleSize?: number;
      /**
       * [descr:dxRangeSelectorOptions.chart.negativesAsZeroes]
       */
      negativesAsZeroes?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.chart.palette]
       */
      palette?: string[] | common.charts.Palette;
      /**
       * [descr:dxRangeSelectorOptions.chart.paletteExtensionMode]
       */
      paletteExtensionMode?: common.charts.PaletteExtensionMode;
      /**
       * [descr:dxRangeSelectorOptions.chart.series]
       */
      series?: ChartSeries | ChartSeries[];
      /**
       * [descr:dxRangeSelectorOptions.chart.seriesTemplate]
       */
      seriesTemplate?: {
        /**
         * [descr:dxRangeSelectorOptions.chart.seriesTemplate.customizeSeries]
         */
        customizeSeries?: (seriesName: any) => ChartSeries;
        /**
         * [descr:dxRangeSelectorOptions.chart.seriesTemplate.nameField]
         */
        nameField?: string;
      };
      /**
       * [descr:dxRangeSelectorOptions.chart.topIndent]
       */
      topIndent?: number;
      /**
       * [descr:dxRangeSelectorOptions.chart.valueAxis]
       */
      valueAxis?: {
        /**
         * [descr:dxRangeSelectorOptions.chart.valueAxis.inverted]
         */
        inverted?: boolean;
        /**
         * [descr:dxRangeSelectorOptions.chart.valueAxis.logarithmBase]
         */
        logarithmBase?: number;
        /**
         * [descr:dxRangeSelectorOptions.chart.valueAxis.max]
         */
        max?: number;
        /**
         * [descr:dxRangeSelectorOptions.chart.valueAxis.min]
         */
        min?: number;
        /**
         * [descr:dxRangeSelectorOptions.chart.valueAxis.type]
         */
        type?: dxRangeSelector.ChartAxisScale;
        /**
         * [descr:dxRangeSelectorOptions.chart.valueAxis.valueType]
         */
        valueType?: common.charts.ChartsDataType;
      };
    };
    /**
     * [descr:dxRangeSelectorOptions.containerBackgroundColor]
     */
    containerBackgroundColor?: string;
    /**
     * [descr:dxRangeSelectorOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<any> | null;
    /**
     * [descr:dxRangeSelectorOptions.dataSourceField]
     */
    dataSourceField?: string;
    /**
     * [descr:dxRangeSelectorOptions.indent]
     */
    indent?: {
      /**
       * [descr:dxRangeSelectorOptions.indent.left]
       */
      left?: number;
      /**
       * [descr:dxRangeSelectorOptions.indent.right]
       */
      right?: number;
    };
    /**
     * [descr:dxRangeSelectorOptions.onValueChanged]
     */
    onValueChanged?: (
      e: dxRangeSelector.ValueChangedEvent
    ) => void;
    /**
     * [descr:dxRangeSelectorOptions.scale]
     */
    scale?: {
      /**
       * [descr:dxRangeSelectorOptions.scale.aggregateByCategory]
       * @deprecated [depNote:dxRangeSelectorOptions.scale.aggregateByCategory]
       */
      aggregateByCategory?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.scale.aggregationGroupWidth]
       */
      aggregationGroupWidth?: number;
      /**
       * [descr:dxRangeSelectorOptions.scale.aggregationInterval]
       */
      aggregationInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxRangeSelectorOptions.scale.discreteAxisDivisionMode]
       */
      discreteAxisDivisionMode?: common.charts.DiscreteAxisDivisionMode;
      /**
       * [descr:dxRangeSelectorOptions.scale.allowDecimals]
       */
      allowDecimals?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.scale.breakStyle]
       */
      breakStyle?: {
        /**
         * [descr:dxRangeSelectorOptions.scale.breakStyle.color]
         */
        color?: string;
        /**
         * [descr:dxRangeSelectorOptions.scale.breakStyle.line]
         */
        line?: common.charts.ScaleBreakLineStyle;
        /**
         * [descr:dxRangeSelectorOptions.scale.breakStyle.width]
         */
        width?: number;
      };
      /**
       * [descr:dxRangeSelectorOptions.scale.breaks]
       */
      breaks?: common.charts.ScaleBreak[];
      /**
       * [descr:dxRangeSelectorOptions.scale.categories]
       */
      categories?: (number | string | Date)[];
      /**
       * [descr:dxRangeSelectorOptions.scale.endOnTick]
       */
      endOnTick?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.scale.endValue]
       */
      endValue?: number | Date | string;
      /**
       * [descr:dxRangeSelectorOptions.scale.holidays]
       */
      holidays?: (Date | string)[] | number[];
      /**
       * [descr:dxRangeSelectorOptions.scale.label]
       */
      label?: {
        /**
         * [descr:dxRangeSelectorOptions.scale.label.customizeText]
         */
        customizeText?: (scaleValue: {
          value?: Date | number | string;
          valueText?: string;
        }) => string;
        /**
         * [descr:dxRangeSelectorOptions.scale.label.font]
         */
        font?: Font;
        /**
         * [descr:dxRangeSelectorOptions.scale.label.format]
         */
        format?: ui.Format;
        /**
         * [descr:dxRangeSelectorOptions.scale.label.overlappingBehavior]
         */
        overlappingBehavior?: common.charts.LabelOverlap;
        /**
         * [descr:dxRangeSelectorOptions.scale.label.topIndent]
         */
        topIndent?: number;
        /**
         * [descr:dxRangeSelectorOptions.scale.label.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:dxRangeSelectorOptions.scale.linearThreshold]
       */
      linearThreshold?: number;
      /**
       * [descr:dxRangeSelectorOptions.scale.logarithmBase]
       */
      logarithmBase?: number;
      /**
       * [descr:dxRangeSelectorOptions.scale.marker]
       */
      marker?: {
        /**
         * [descr:dxRangeSelectorOptions.scale.marker.label]
         */
        label?: {
          /**
           * [descr:dxRangeSelectorOptions.scale.marker.label.customizeText]
           */
          customizeText?: (markerValue: {
            value?: Date | number;
            valueText?: string;
          }) => string;
          /**
           * [descr:dxRangeSelectorOptions.scale.marker.label.format]
           */
          format?: ui.Format;
        };
        /**
         * [descr:dxRangeSelectorOptions.scale.marker.separatorHeight]
         */
        separatorHeight?: number;
        /**
         * [descr:dxRangeSelectorOptions.scale.marker.textLeftIndent]
         */
        textLeftIndent?: number;
        /**
         * [descr:dxRangeSelectorOptions.scale.marker.textTopIndent]
         */
        textTopIndent?: number;
        /**
         * [descr:dxRangeSelectorOptions.scale.marker.topIndent]
         */
        topIndent?: number;
        /**
         * [descr:dxRangeSelectorOptions.scale.marker.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:dxRangeSelectorOptions.scale.maxRange]
       */
      maxRange?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxRangeSelectorOptions.scale.minRange]
       */
      minRange?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxRangeSelectorOptions.scale.minorTick]
       */
      minorTick?: {
        /**
         * [descr:dxRangeSelectorOptions.scale.minorTick.color]
         */
        color?: string;
        /**
         * [descr:dxRangeSelectorOptions.scale.minorTick.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxRangeSelectorOptions.scale.minorTick.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxRangeSelectorOptions.scale.minorTick.width]
         */
        width?: number;
      };
      /**
       * [descr:dxRangeSelectorOptions.scale.minorTickCount]
       */
      minorTickCount?: number;
      /**
       * [descr:dxRangeSelectorOptions.scale.minorTickInterval]
       */
      minorTickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxRangeSelectorOptions.scale.placeholderHeight]
       */
      placeholderHeight?: number;
      /**
       * [descr:dxRangeSelectorOptions.scale.showCustomBoundaryTicks]
       */
      showCustomBoundaryTicks?: boolean;
      /**
       * [descr:dxRangeSelectorOptions.scale.singleWorkdays]
       */
      singleWorkdays?: (Date | string)[] | number[];
      /**
       * [descr:dxRangeSelectorOptions.scale.startValue]
       */
      startValue?: number | Date | string;
      /**
       * [descr:dxRangeSelectorOptions.scale.tick]
       */
      tick?: {
        /**
         * [descr:dxRangeSelectorOptions.scale.tick.color]
         */
        color?: string;
        /**
         * [descr:dxRangeSelectorOptions.scale.tick.opacity]
         */
        opacity?: number;
        /**
         * [descr:dxRangeSelectorOptions.scale.tick.width]
         */
        width?: number;
      };
      /**
       * [descr:dxRangeSelectorOptions.scale.tickInterval]
       */
      tickInterval?: common.charts.TimeIntervalConfig;
      /**
       * [descr:dxRangeSelectorOptions.scale.type]
       */
      type?: dxRangeSelector.AxisScale;
      /**
       * [descr:dxRangeSelectorOptions.scale.valueType]
       */
      valueType?: common.charts.ChartsDataType;
      /**
       * [descr:dxRangeSelectorOptions.scale.workWeek]
       */
      workWeek?: number[];
      /**
       * [descr:dxRangeSelectorOptions.scale.workdaysOnly]
       */
      workdaysOnly?: boolean;
    };
    /**
     * [descr:dxRangeSelectorOptions.selectedRangeColor]
     */
    selectedRangeColor?: string;
    /**
     * [descr:dxRangeSelectorOptions.selectedRangeUpdateMode]
     */
    selectedRangeUpdateMode?: common.charts.VisualRangeUpdateMode;
    /**
     * [descr:dxRangeSelectorOptions.shutter]
     */
    shutter?: {
      /**
       * [descr:dxRangeSelectorOptions.shutter.color]
       */
      color?: string;
      /**
       * [descr:dxRangeSelectorOptions.shutter.opacity]
       */
      opacity?: number;
    };
    /**
     * [descr:dxRangeSelectorOptions.sliderHandle]
     */
    sliderHandle?: {
      /**
       * [descr:dxRangeSelectorOptions.sliderHandle.color]
       */
      color?: string;
      /**
       * [descr:dxRangeSelectorOptions.sliderHandle.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxRangeSelectorOptions.sliderHandle.width]
       */
      width?: number;
    };
    /**
     * [descr:dxRangeSelectorOptions.sliderMarker]
     */
    sliderMarker?: {
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.color]
       */
      color?: string;
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.customizeText]
       */
      customizeText?: (scaleValue: {
        value?: Date | number | string;
        valueText?: string;
      }) => string;
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.font]
       */
      font?: Font;
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.format]
       */
      format?: ui.Format;
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.invalidRangeColor]
       */
      invalidRangeColor?: string;
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.paddingLeftRight]
       */
      paddingLeftRight?: number;
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.paddingTopBottom]
       */
      paddingTopBottom?: number;
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.placeholderHeight]
       */
      placeholderHeight?: number;
      /**
       * [descr:dxRangeSelectorOptions.sliderMarker.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxRangeSelectorOptions.tooltip]
     */
    tooltip?: BaseWidgetTooltip;
    /**
     * [descr:dxRangeSelectorOptions.value]
     */
    value?:
    | (number | string | Date)[]
    | common.charts.VisualRange;
  }
  /**
   * [descr:dxSankey]
   */
  export class dxSankey extends BaseWidget<dxSankeyOptions> {
    /**
     * [descr:dxSankey.getAllLinks()]
     */
    getAllLinks(): dxSankeyLink[];
    /**
     * [descr:dxSankey.getAllNodes()]
     */
    getAllNodes(): dxSankeyNode[];
    getDataSource(): data.DataSource;
    /**
     * [descr:dxSankey.hideTooltip()]
     */
    hideTooltip(): void;
  }
  namespace dxSankey {
    /**
     * [descr:_viz_sankey_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxSankey>;
    /**
     * [descr:_viz_sankey_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxSankey>;
    /**
     * [descr:_viz_sankey_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxSankey>;
    /**
     * [descr:_viz_sankey_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxSankey> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_sankey_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxSankey>;
    /**
     * [descr:_viz_sankey_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent = events.EventInfo<dxSankey> &
    BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_sankey_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxSankey>;
    /**
     * [descr:_viz_sankey_LinkClickEvent]
     */
    export type LinkClickEvent = events.NativeEventInfo<
    dxSankey,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_sankey_LinkClickEvent.target]
       */
      readonly target: dxSankeyLink;
    };
    /**
     * [descr:_viz_sankey_LinkHoverEvent]
     */
    export type LinkHoverEvent = events.EventInfo<dxSankey> & {
      /**
       * [descr:_viz_sankey_LinkHoverEvent.target]
       */
      readonly target: dxSankeyLink;
    };
    /**
     * [descr:_viz_sankey_NodeClickEvent]
     */
    export type NodeClickEvent = events.NativeEventInfo<
    dxSankey,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_sankey_NodeClickEvent.target]
       */
      readonly target: dxSankeyNode;
    };
    /**
     * [descr:_viz_sankey_NodeHoverEvent]
     */
    export type NodeHoverEvent = events.EventInfo<dxSankey> & {
      /**
       * [descr:_viz_sankey_NodeHoverEvent.target]
       */
      readonly target: dxSankeyNode;
    };
    /**
     * [descr:_viz_sankey_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxSankey> &
    events.ChangedOptionInfo;
    export type Properties = dxSankeyOptions;
    export type SankeyColorMode = 'none' | 'source' | 'target' | 'gradient';
    /**
     * [descr:dxSankeyTooltip]
     */
    export type Tooltip = BaseWidgetTooltip & {
      /**
       * [descr:dxSankeyOptions.tooltip.customizeLinkTooltip]
       */
      customizeLinkTooltip?: (info: {
        source?: string;
        target?: string;
        weight?: number;
      }) => any;
      /**
       * [descr:dxSankeyOptions.tooltip.customizeNodeTooltip]
       */
      customizeNodeTooltip?: (info: {
        title?: string;
        label?: string;
        weightIn?: number;
        weightOut?: number;
      }) => any;
      /**
       * [descr:dxSankeyOptions.tooltip.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxSankeyOptions.tooltip.linkTooltipTemplate]
       */
      linkTooltipTemplate?:
      | core.template
      | ((
        info: { source?: string; target?: string; weight?: number },
        element: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
       * [descr:dxSankeyOptions.tooltip.nodeTooltipTemplate]
       */
      nodeTooltipTemplate?:
      | core.template
      | ((
        info: { label?: string; weightIn?: number; weightOut?: number },
        element: core.DxElement
      ) => string | core.UserDefinedElement);
    };
  }
  /**
   * [descr:dxSankeyConnectionInfoObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyConnectionInfoObject {
    /**
     * [descr:dxSankeyConnectionInfoObject.source]
     */
    source?: string;
    /**
     * [descr:dxSankeyConnectionInfoObject.target]
     */
    target?: string;
    /**
     * [descr:dxSankeyConnectionInfoObject.weight]
     */
    weight?: number;
  }
  /**
   * [descr:dxSankeyLink]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyLink {
    /**
     * [descr:dxSankeyLink.connection]
     */
    connection?: dxSankeyConnectionInfoObject;
    /**
     * [descr:dxSankeyLink.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:dxSankeyLink.hover(state)]
     */
    hover(state: boolean): void;
    /**
     * [descr:dxSankeyLink.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:dxSankeyLink.showTooltip()]
     */
    showTooltip(): void;
  }
  /**
   * [descr:dxSankeyNode]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyNode {
    /**
     * [descr:dxSankeyNode.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:dxSankeyNode.hover(state)]
     */
    hover(state: boolean): void;
    /**
     * [descr:dxSankeyNode.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:dxSankeyNode.label]
     */
    label?: string;
    /**
     * [descr:dxSankeyNode.linksIn]
     */
    linksIn?: any[];
    /**
     * [descr:dxSankeyNode.linksOut]
     */
    linksOut?: any[];
    /**
     * [descr:dxSankeyNode.showTooltip()]
     */
    showTooltip(): void;
    /**
     * [descr:dxSankeyNode.title]
     * @deprecated [depNote:dxSankeyNode.title]
     */
    title?: string;
  }
  /**
   * [descr:dxSankeyOptions]
   * @deprecated [depNote:dxSankeyOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSankeyOptions extends BaseWidgetOptions<dxSankey> {
    /**
     * [descr:dxSankeyOptions.adaptiveLayout]
     */
    adaptiveLayout?: {
      /**
       * [descr:dxSankeyOptions.adaptiveLayout.height]
       */
      height?: number;
      /**
       * [descr:dxSankeyOptions.adaptiveLayout.keepLabels]
       */
      keepLabels?: boolean;
      /**
       * [descr:dxSankeyOptions.adaptiveLayout.width]
       */
      width?: number;
    };
    /**
     * [descr:dxSankeyOptions.alignment]
     */
    alignment?:
    | common.VerticalAlignment
    | common.VerticalAlignment[];
    /**
     * [descr:dxSankeyOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<any> | null;
    /**
     * [descr:dxSankeyOptions.hoverEnabled]
     */
    hoverEnabled?: boolean;
    /**
     * [descr:dxSankeyOptions.label]
     */
    label?: {
      /**
       * [descr:dxSankeyOptions.label.border]
       */
      border?: {
        /**
         * [descr:dxSankeyOptions.label.border.color]
         */
        color?: string;
        /**
         * [descr:dxSankeyOptions.label.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxSankeyOptions.label.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxSankeyOptions.label.customizeText]
       */
      customizeText?: (itemInfo: dxSankeyNode) => string;
      /**
       * [descr:dxSankeyOptions.label.font]
       */
      font?: Font;
      /**
       * [descr:dxSankeyOptions.label.horizontalOffset]
       */
      horizontalOffset?: number;
      /**
       * [descr:dxSankeyOptions.label.overlappingBehavior]
       */
      overlappingBehavior?: common.charts.TextOverflow;
      /**
       * [descr:dxSankeyOptions.label.shadow]
       */
      shadow?: {
        /**
         * [descr:dxSankeyOptions.label.shadow.blur]
         */
        blur?: number;
        /**
         * [descr:dxSankeyOptions.label.shadow.color]
         */
        color?: string;
        /**
         * [descr:dxSankeyOptions.label.shadow.offsetX]
         */
        offsetX?: number;
        /**
         * [descr:dxSankeyOptions.label.shadow.offsetY]
         */
        offsetY?: number;
        /**
         * [descr:dxSankeyOptions.label.shadow.opacity]
         */
        opacity?: number;
      };
      /**
       * [descr:dxSankeyOptions.label.useNodeColors]
       */
      useNodeColors?: boolean;
      /**
       * [descr:dxSankeyOptions.label.verticalOffset]
       */
      verticalOffset?: number;
      /**
       * [descr:dxSankeyOptions.label.visible]
       */
      visible?: boolean;
    };
    /**
     * [descr:dxSankeyOptions.link]
     */
    link?: {
      /**
       * [descr:dxSankeyOptions.link.border]
       */
      border?: {
        /**
         * [descr:dxSankeyOptions.link.border.color]
         */
        color?: string;
        /**
         * [descr:dxSankeyOptions.link.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxSankeyOptions.link.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxSankeyOptions.link.color]
       */
      color?: string;
      /**
       * [descr:dxSankeyOptions.link.colorMode]
       */
      colorMode?: dxSankey.SankeyColorMode;
      /**
       * [descr:dxSankeyOptions.link.hoverStyle]
       */
      hoverStyle?: {
        /**
         * [descr:dxSankeyOptions.link.hoverStyle.border]
         */
        border?: {
          /**
           * [descr:dxSankeyOptions.link.hoverStyle.border.color]
           */
          color?: string;
          /**
           * [descr:dxSankeyOptions.link.hoverStyle.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:dxSankeyOptions.link.hoverStyle.border.width]
           */
          width?: number;
        };
        /**
         * [descr:dxSankeyOptions.link.hoverStyle.color]
         */
        color?: string;
        /**
         * [descr:dxSankeyOptions.link.hoverStyle.hatching]
         */
        hatching?: {
          /**
           * [descr:dxSankeyOptions.link.hoverStyle.hatching.direction]
           */
          direction?: common.charts.HatchDirection;
          /**
           * [descr:dxSankeyOptions.link.hoverStyle.hatching.opacity]
           */
          opacity?: number;
          /**
           * [descr:dxSankeyOptions.link.hoverStyle.hatching.step]
           */
          step?: number;
          /**
           * [descr:dxSankeyOptions.link.hoverStyle.hatching.width]
           */
          width?: number;
        };
        /**
         * [descr:dxSankeyOptions.link.hoverStyle.opacity]
         */
        opacity?: number;
      };
      /**
       * [descr:dxSankeyOptions.link.opacity]
       */
      opacity?: number;
    };
    /**
     * [descr:dxSankeyOptions.node]
     */
    node?: {
      /**
       * [descr:dxSankeyOptions.node.border]
       */
      border?: {
        /**
         * [descr:dxSankeyOptions.node.border.color]
         */
        color?: string;
        /**
         * [descr:dxSankeyOptions.node.border.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxSankeyOptions.node.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxSankeyOptions.node.color]
       */
      color?: string;
      /**
       * [descr:dxSankeyOptions.node.hoverStyle]
       */
      hoverStyle?: {
        /**
         * [descr:dxSankeyOptions.node.hoverStyle.border]
         */
        border?: {
          /**
           * [descr:dxSankeyOptions.node.hoverStyle.border.color]
           */
          color?: string;
          /**
           * [descr:dxSankeyOptions.node.hoverStyle.border.visible]
           */
          visible?: boolean;
          /**
           * [descr:dxSankeyOptions.node.hoverStyle.border.width]
           */
          width?: number;
        };
        /**
         * [descr:dxSankeyOptions.node.hoverStyle.color]
         */
        color?: string;
        /**
         * [descr:dxSankeyOptions.node.hoverStyle.hatching]
         */
        hatching?: {
          /**
           * [descr:dxSankeyOptions.node.hoverStyle.hatching.direction]
           */
          direction?: common.charts.HatchDirection;
          /**
           * [descr:dxSankeyOptions.node.hoverStyle.hatching.opacity]
           */
          opacity?: number;
          /**
           * [descr:dxSankeyOptions.node.hoverStyle.hatching.step]
           */
          step?: number;
          /**
           * [descr:dxSankeyOptions.node.hoverStyle.hatching.width]
           */
          width?: number;
        };
        /**
         * [descr:dxSankeyOptions.node.hoverStyle.opacity]
         */
        opacity?: number;
      };
      /**
       * [descr:dxSankeyOptions.node.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxSankeyOptions.node.padding]
       */
      padding?: number;
      /**
       * [descr:dxSankeyOptions.node.width]
       */
      width?: number;
    };
    /**
     * [descr:dxSankeyOptions.onLinkClick]
     */
    onLinkClick?:
    | ((e: dxSankey.LinkClickEvent) => void)
    | string;
    /**
     * [descr:dxSankeyOptions.onLinkHoverChanged]
     */
    onLinkHoverChanged?: (e: dxSankey.LinkHoverEvent) => void;
    /**
     * [descr:dxSankeyOptions.onNodeClick]
     */
    onNodeClick?:
    | ((e: dxSankey.NodeClickEvent) => void)
    | string;
    /**
     * [descr:dxSankeyOptions.onNodeHoverChanged]
     */
    onNodeHoverChanged?: (e: dxSankey.NodeHoverEvent) => void;
    /**
     * [descr:dxSankeyOptions.palette]
     */
    palette?: string[] | common.charts.Palette;
    /**
     * [descr:dxSankeyOptions.paletteExtensionMode]
     */
    paletteExtensionMode?: common.charts.PaletteExtensionMode;
    /**
     * [descr:dxSankeyOptions.sortData]
     */
    sortData?: any;
    /**
     * [descr:dxSankeyOptions.sourceField]
     */
    sourceField?: string;
    /**
     * [descr:dxSankeyOptions.targetField]
     */
    targetField?: string;
    /**
     * [descr:dxSankeyOptions.tooltip]
     */
    tooltip?: dxSankey.Tooltip;
    /**
     * [descr:dxSankeyOptions.weightField]
     */
    weightField?: string;
  }
  /**
   * [descr:dxSparkline]
   */
  export class dxSparkline extends BaseSparkline<dxSparklineOptions> {
    getDataSource(): data.DataSource;
  }
  namespace dxSparkline {
    /**
     * [descr:_viz_sparkline_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxSparkline>;
    /**
     * [descr:_viz_sparkline_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxSparkline>;
    /**
     * [descr:_viz_sparkline_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxSparkline>;
    /**
     * [descr:_viz_sparkline_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxSparkline> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_sparkline_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxSparkline>;
    /**
     * [descr:_viz_sparkline_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent =
      events.EventInfo<dxSparkline> &
      BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_sparkline_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxSparkline>;
    /**
     * [descr:_viz_sparkline_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxSparkline> &
    events.ChangedOptionInfo;
    export type Properties = dxSparklineOptions;
    export type SparklineType =
      | 'area'
      | 'bar'
      | 'line'
      | 'spline'
      | 'splinearea'
      | 'steparea'
      | 'stepline'
      | 'winloss';
    /**
     * [descr:_viz_sparkline_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent = events.EventInfo<dxSparkline>;
    /**
     * [descr:_viz_sparkline_TooltipShownEvent]
     */
    export type TooltipShownEvent = events.EventInfo<dxSparkline>;
  }
  /**
   * [descr:dxSparklineOptions]
   * @deprecated [depNote:dxSparklineOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxSparklineOptions
    extends BaseSparklineOptions<dxSparkline> {
    /**
     * [descr:dxSparklineOptions.argumentField]
     */
    argumentField?: string;
    /**
     * [descr:dxSparklineOptions.barNegativeColor]
     */
    barNegativeColor?: string;
    /**
     * [descr:dxSparklineOptions.barPositiveColor]
     */
    barPositiveColor?: string;
    /**
     * [descr:dxSparklineOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<any> | null;
    /**
     * [descr:dxSparklineOptions.firstLastColor]
     */
    firstLastColor?: string;
    /**
     * [descr:dxSparklineOptions.ignoreEmptyPoints]
     */
    ignoreEmptyPoints?: boolean;
    /**
     * [descr:dxSparklineOptions.lineColor]
     */
    lineColor?: string;
    /**
     * [descr:dxSparklineOptions.lineWidth]
     */
    lineWidth?: number;
    /**
     * [descr:dxSparklineOptions.lossColor]
     */
    lossColor?: string;
    /**
     * [descr:dxSparklineOptions.maxColor]
     */
    maxColor?: string;
    /**
     * [descr:dxSparklineOptions.maxValue]
     */
    maxValue?: number;
    /**
     * [descr:dxSparklineOptions.minColor]
     */
    minColor?: string;
    /**
     * [descr:dxSparklineOptions.minValue]
     */
    minValue?: number;
    /**
     * [descr:dxSparklineOptions.pointColor]
     */
    pointColor?: string;
    /**
     * [descr:dxSparklineOptions.pointSize]
     */
    pointSize?: number;
    /**
     * [descr:dxSparklineOptions.pointSymbol]
     */
    pointSymbol?: common.charts.PointSymbol;
    /**
     * [descr:dxSparklineOptions.showFirstLast]
     */
    showFirstLast?: boolean;
    /**
     * [descr:dxSparklineOptions.showMinMax]
     */
    showMinMax?: boolean;
    /**
     * [descr:dxSparklineOptions.type]
     */
    type?: dxSparkline.SparklineType;
    /**
     * [descr:dxSparklineOptions.valueField]
     */
    valueField?: string;
    /**
     * [descr:dxSparklineOptions.winColor]
     */
    winColor?: string;
    /**
     * [descr:dxSparklineOptions.winlossThreshold]
     */
    winlossThreshold?: number;
  }
  /**
   * [descr:dxTreeMap]
   */
  export class dxTreeMap extends BaseWidget<dxTreeMapOptions> {
    /**
     * [descr:dxTreeMap.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:dxTreeMap.drillUp()]
     */
    drillUp(): void;
    /**
     * [descr:dxTreeMap.getCurrentNode()]
     */
    getCurrentNode(): dxTreeMapNode;
    getDataSource(): data.DataSource;
    /**
     * [descr:dxTreeMap.getRootNode()]
     */
    getRootNode(): dxTreeMapNode;
    /**
     * [descr:dxTreeMap.hideTooltip()]
     */
    hideTooltip(): void;
    /**
     * [descr:dxTreeMap.resetDrillDown()]
     */
    resetDrillDown(): void;
  }
  namespace dxTreeMap {
    /**
     * [descr:_viz_tree_map_ClickEvent]
     */
    export type ClickEvent = events.NativeEventInfo<
    dxTreeMap,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_tree_map_ClickEvent.node]
       */
      readonly node: dxTreeMapNode;
    };
    /**
     * [descr:_viz_tree_map_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxTreeMap>;
    /**
     * [descr:_viz_tree_map_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxTreeMap>;
    /**
     * [descr:_viz_tree_map_DrillEvent]
     */
    export type DrillEvent = events.EventInfo<dxTreeMap> & {
      /**
       * [descr:_viz_tree_map_DrillEvent.node]
       */
      readonly node: dxTreeMapNode;
    };
    /**
     * [descr:_viz_tree_map_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxTreeMap>;
    /**
     * [descr:_viz_tree_map_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxTreeMap> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_tree_map_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxTreeMap>;
    /**
     * [descr:_viz_tree_map_HoverChangedEvent]
     */
    export type HoverChangedEvent = events.EventInfo<dxTreeMap> &
    InteractionInfo;
    /**
     * [descr:_viz_tree_map_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent = events.EventInfo<dxTreeMap> &
    BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_tree_map_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxTreeMap>;
    /**
     * [descr:InteractionInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface InteractionInfo {
      /**
       * [descr:InteractionInfo.node]
       */
      readonly node: dxTreeMapNode;
    }
    /**
     * [descr:_viz_tree_map_NodesInitializedEvent]
     */
    export type NodesInitializedEvent =
      events.EventInfo<dxTreeMap> & {
        /**
         * [descr:_viz_tree_map_NodesInitializedEvent.root]
         */
        readonly root: dxTreeMapNode;
      };
    /**
     * [descr:_viz_tree_map_NodesRenderingEvent]
     */
    export type NodesRenderingEvent = events.EventInfo<dxTreeMap> & {
      /**
       * [descr:_viz_tree_map_NodesRenderingEvent.node]
       */
      readonly node: dxTreeMapNode;
    };
    /**
     * [descr:_viz_tree_map_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxTreeMap> &
    events.ChangedOptionInfo;
    export type Properties = dxTreeMapOptions;
    /**
     * [descr:_viz_tree_map_SelectionChangedEvent]
     */
    export type SelectionChangedEvent = events.EventInfo<dxTreeMap> &
    InteractionInfo;
    /**
     * [descr:dxTreeMapTooltip]
     */
    export type Tooltip = BaseWidgetTooltip & {
      /**
       * [descr:dxTreeMapOptions.tooltip.contentTemplate]
       */
      contentTemplate?:
      | core.template
      | ((
        info: { value?: number; valueText?: string; node?: dxTreeMapNode },
        element: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
       * [descr:dxTreeMapOptions.tooltip.customizeTooltip]
       */
      customizeTooltip?: (info: {
        value?: number;
        valueText?: string;
        node?: dxTreeMapNode;
      }) => any;
    };
    export type TreeMapColorizerType =
      | 'discrete'
      | 'gradient'
      | 'none'
      | 'range';
    export type TreeMapLayoutAlgorithm =
      | 'sliceanddice'
      | 'squarified'
      | 'strip';
    export type TreeMapLayoutDirection =
      | 'leftBottomRightTop'
      | 'leftTopRightBottom'
      | 'rightBottomLeftTop'
      | 'rightTopLeftBottom';
  }
  /**
   * [descr:dxTreeMapNode]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeMapNode {
    /**
     * [descr:dxTreeMapNode.customize(options)]
     */
    customize(options: any): void;
    /**
     * [descr:dxTreeMapNode.data]
     */
    data?: any;
    /**
     * [descr:dxTreeMapNode.drillDown()]
     */
    drillDown(): void;
    /**
     * [descr:dxTreeMapNode.getAllChildren()]
     */
    getAllChildren(): dxTreeMapNode[];
    /**
     * [descr:dxTreeMapNode.getAllNodes()]
     */
    getAllNodes(): dxTreeMapNode[];
    /**
     * [descr:dxTreeMapNode.getChild(index)]
     */
    getChild(index: number): dxTreeMapNode;
    /**
     * [descr:dxTreeMapNode.getChildrenCount()]
     */
    getChildrenCount(): number;
    /**
     * [descr:dxTreeMapNode.getParent()]
     */
    getParent(): dxTreeMapNode;
    /**
     * [descr:dxTreeMapNode.index]
     */
    index?: number;
    /**
     * [descr:dxTreeMapNode.isActive()]
     */
    isActive(): boolean;
    /**
     * [descr:dxTreeMapNode.isHovered()]
     */
    isHovered(): boolean;
    /**
     * [descr:dxTreeMapNode.isLeaf()]
     */
    isLeaf(): boolean;
    /**
     * [descr:dxTreeMapNode.isSelected()]
     */
    isSelected(): boolean;
    /**
     * [descr:dxTreeMapNode.label()]
     */
    label(): string;
    /**
     * [descr:dxTreeMapNode.label(label)]
     */
    label(label: string): void;
    /**
     * [descr:dxTreeMapNode.level]
     */
    level?: number;
    /**
     * [descr:dxTreeMapNode.resetCustomization()]
     */
    resetCustomization(): void;
    /**
     * [descr:dxTreeMapNode.select(state)]
     */
    select(state: boolean): void;
    /**
     * [descr:dxTreeMapNode.showTooltip()]
     */
    showTooltip(): void;
    /**
     * [descr:dxTreeMapNode.value()]
     */
    value(): number;
  }
  /**
   * [descr:dxTreeMapOptions]
   * @deprecated [depNote:dxTreeMapOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxTreeMapOptions extends BaseWidgetOptions<dxTreeMap> {
    /**
     * [descr:dxTreeMapOptions.childrenField]
     */
    childrenField?: string;
    /**
     * [descr:dxTreeMapOptions.colorField]
     */
    colorField?: string;
    /**
     * [descr:dxTreeMapOptions.colorizer]
     */
    colorizer?: {
      /**
       * [descr:dxTreeMapOptions.colorizer.colorCodeField]
       */
      colorCodeField?: string;
      /**
       * [descr:dxTreeMapOptions.colorizer.colorizeGroups]
       */
      colorizeGroups?: boolean;
      /**
       * [descr:dxTreeMapOptions.colorizer.palette]
       */
      palette?: string[] | common.charts.Palette;
      /**
       * [descr:dxTreeMapOptions.colorizer.paletteExtensionMode]
       */
      paletteExtensionMode?: common.charts.PaletteExtensionMode;
      /**
       * [descr:dxTreeMapOptions.colorizer.range]
       */
      range?: number[];
      /**
       * [descr:dxTreeMapOptions.colorizer.type]
       */
      type?: dxTreeMap.TreeMapColorizerType;
    };
    /**
     * [descr:dxTreeMapOptions.dataSource]
     */
    dataSource?: data.DataSource.DataSourceLike<any> | null;
    /**
     * [descr:dxTreeMapOptions.group]
     */
    group?: {
      /**
       * [descr:dxTreeMapOptions.group.border]
       */
      border?: {
        /**
         * [descr:dxTreeMapOptions.group.border.color]
         */
        color?: string;
        /**
         * [descr:dxTreeMapOptions.group.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxTreeMapOptions.group.color]
       */
      color?: string;
      /**
       * [descr:dxTreeMapOptions.group.padding]
       */
      padding?: number;
      /**
       * [descr:dxTreeMapOptions.group.headerHeight]
       */
      headerHeight?: number;
      /**
       * [descr:dxTreeMapOptions.group.hoverEnabled]
       */
      hoverEnabled?: boolean;
      /**
       * [descr:dxTreeMapOptions.group.hoverStyle]
       */
      hoverStyle?: {
        /**
         * [descr:dxTreeMapOptions.group.hoverStyle.border]
         */
        border?: {
          /**
           * [descr:dxTreeMapOptions.group.hoverStyle.border.color]
           */
          color?: string;
          /**
           * [descr:dxTreeMapOptions.group.hoverStyle.border.width]
           */
          width?: number;
        };
        /**
         * [descr:dxTreeMapOptions.group.hoverStyle.color]
         */
        color?: string;
      };
      /**
       * [descr:dxTreeMapOptions.group.label]
       */
      label?: {
        /**
         * [descr:dxTreeMapOptions.group.label.font]
         */
        font?: Font;
        /**
         * [descr:dxTreeMapOptions.group.label.textOverflow]
         */
        textOverflow?: common.charts.TextOverflow;
        /**
         * [descr:dxTreeMapOptions.group.label.visible]
         */
        visible?: boolean;
      };
      /**
       * [descr:dxTreeMapOptions.group.selectionStyle]
       */
      selectionStyle?: {
        /**
         * [descr:dxTreeMapOptions.group.selectionStyle.border]
         */
        border?: {
          /**
           * [descr:dxTreeMapOptions.group.selectionStyle.border.color]
           */
          color?: string;
          /**
           * [descr:dxTreeMapOptions.group.selectionStyle.border.width]
           */
          width?: number;
        };
        /**
         * [descr:dxTreeMapOptions.group.selectionStyle.color]
         */
        color?: string;
      };
    };
    /**
     * [descr:dxTreeMapOptions.hoverEnabled]
     */
    hoverEnabled?: boolean;
    /**
     * [descr:dxTreeMapOptions.idField]
     */
    idField?: string;
    /**
     * [descr:dxTreeMapOptions.interactWithGroup]
     */
    interactWithGroup?: boolean;
    /**
     * [descr:dxTreeMapOptions.labelField]
     */
    labelField?: string;
    /**
     * [descr:dxTreeMapOptions.layoutAlgorithm]
     */
    layoutAlgorithm?:
    | dxTreeMap.TreeMapLayoutAlgorithm
    | ((e: {
      rect?: number[];
      sum?: number;
      items?: any[];
    }) => any);
    /**
     * [descr:dxTreeMapOptions.layoutDirection]
     */
    layoutDirection?: dxTreeMap.TreeMapLayoutDirection;
    /**
     * [descr:dxTreeMapOptions.margin]
     */
    margin?: BaseWidgetMargin;
    /**
     * [descr:dxTreeMapOptions.maxDepth]
     */
    maxDepth?: number;
    /**
     * [descr:dxTreeMapOptions.onClick]
     */
    onClick?: ((e: dxTreeMap.ClickEvent) => void) | string;
    /**
     * [descr:dxTreeMapOptions.onDrill]
     */
    onDrill?: (e: dxTreeMap.DrillEvent) => void;
    /**
     * [descr:dxTreeMapOptions.onHoverChanged]
     */
    onHoverChanged?: (e: dxTreeMap.HoverChangedEvent) => void;
    /**
     * [descr:dxTreeMapOptions.onNodesInitialized]
     */
    onNodesInitialized?: (
      e: dxTreeMap.NodesInitializedEvent
    ) => void;
    /**
     * [descr:dxTreeMapOptions.onNodesRendering]
     */
    onNodesRendering?: (
      e: dxTreeMap.NodesRenderingEvent
    ) => void;
    /**
     * [descr:dxTreeMapOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxTreeMap.SelectionChangedEvent
    ) => void;
    /**
     * [descr:dxTreeMapOptions.parentField]
     */
    parentField?: string;
    /**
     * [descr:dxTreeMapOptions.selectionMode]
     */
    selectionMode?: common.SingleMultipleOrNone;
    /**
     * [descr:dxTreeMapOptions.tile]
     */
    tile?: {
      /**
       * [descr:dxTreeMapOptions.tile.border]
       */
      border?: {
        /**
         * [descr:dxTreeMapOptions.tile.border.color]
         */
        color?: string;
        /**
         * [descr:dxTreeMapOptions.tile.border.width]
         */
        width?: number;
      };
      /**
       * [descr:dxTreeMapOptions.tile.color]
       */
      color?: string;
      /**
       * [descr:dxTreeMapOptions.tile.hoverStyle]
       */
      hoverStyle?: {
        /**
         * [descr:dxTreeMapOptions.tile.hoverStyle.border]
         */
        border?: {
          /**
           * [descr:dxTreeMapOptions.tile.hoverStyle.border.color]
           */
          color?: string;
          /**
           * [descr:dxTreeMapOptions.tile.hoverStyle.border.width]
           */
          width?: number;
        };
        /**
         * [descr:dxTreeMapOptions.tile.hoverStyle.color]
         */
        color?: string;
      };
      /**
       * [descr:dxTreeMapOptions.tile.label]
       */
      label?: {
        /**
         * [descr:dxTreeMapOptions.tile.label.font]
         */
        font?: Font;
        /**
         * [descr:dxTreeMapOptions.tile.label.textOverflow]
         */
        textOverflow?: common.charts.TextOverflow;
        /**
         * [descr:dxTreeMapOptions.tile.label.visible]
         */
        visible?: boolean;
        /**
         * [descr:dxTreeMapOptions.tile.label.wordWrap]
         */
        wordWrap?: common.charts.WordWrap;
      };
      /**
       * [descr:dxTreeMapOptions.tile.selectionStyle]
       */
      selectionStyle?: {
        /**
         * [descr:dxTreeMapOptions.tile.selectionStyle.border]
         */
        border?: {
          /**
           * [descr:dxTreeMapOptions.tile.selectionStyle.border.color]
           */
          color?: string;
          /**
           * [descr:dxTreeMapOptions.tile.selectionStyle.border.width]
           */
          width?: number;
        };
        /**
         * [descr:dxTreeMapOptions.tile.selectionStyle.color]
         */
        color?: string;
      };
    };
    /**
     * [descr:dxTreeMapOptions.tooltip]
     */
    tooltip?: dxTreeMap.Tooltip;
    /**
     * [descr:dxTreeMapOptions.valueField]
     */
    valueField?: string;
  }
  /**
   * [descr:dxVectorMap]
   */
  export class dxVectorMap extends BaseWidget<dxVectorMapOptions> {
    /**
     * [descr:dxVectorMap.center()]
     */
    center(): number[];
    /**
     * [descr:dxVectorMap.center(centerCoordinates)]
     */
    center(centerCoordinates: number[]): void;
    /**
     * [descr:dxVectorMap.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:dxVectorMap.convertCoordinates(x, y)]
     * @deprecated [depNote:dxVectorMap.convertCoordinates(x, y)]
     */
    convertCoordinates(x: number, y: number): number[];
    /**
     * [descr:dxVectorMap.convertToGeo(x, y)]
     */
    convertToGeo(x: number, y: number): number[];
    /**
     * [descr:dxVectorMap.convertToXY(longitude, latitude)]
     */
    convertToXY(longitude: number, latitude: number): number[];
    /**
     * [descr:dxVectorMap.getLayerByIndex(index)]
     */
    getLayerByIndex(index: number): MapLayer;
    /**
     * [descr:dxVectorMap.getLayerByName(name)]
     */
    getLayerByName(name: string): MapLayer;
    /**
     * [descr:dxVectorMap.getLayers()]
     */
    getLayers(): MapLayer[];
    /**
     * [descr:dxVectorMap.viewport()]
     */
    viewport(): number[];
    /**
     * [descr:dxVectorMap.viewport(viewportCoordinates)]
     */
    viewport(viewportCoordinates: number[]): void;
    /**
     * [descr:dxVectorMap.zoomFactor()]
     */
    zoomFactor(): number;
    /**
     * [descr:dxVectorMap.zoomFactor(zoomFactor)]
     */
    zoomFactor(zoomFactor: number): void;
  }
  namespace dxVectorMap {
    /**
     * [descr:_viz_vector_map_CenterChangedEvent]
     */
    export type CenterChangedEvent =
      events.EventInfo<dxVectorMap> & {
        /**
         * [descr:_viz_vector_map_CenterChangedEvent.center]
         */
        readonly center: number[];
      };
    /**
     * [descr:_viz_vector_map_ClickEvent]
     */
    export type ClickEvent = events.NativeEventInfo<
    dxVectorMap,
    MouseEvent | PointerEvent
    > & {
      /**
       * [descr:_viz_vector_map_ClickEvent.target]
       */
      readonly target: MapLayerElement;
    };
    /**
     * [descr:_viz_vector_map_DisposingEvent]
     */
    export type DisposingEvent = events.EventInfo<dxVectorMap>;
    /**
     * [descr:_viz_vector_map_DrawnEvent]
     */
    export type DrawnEvent = events.EventInfo<dxVectorMap>;
    /**
     * [descr:_viz_vector_map_ExportedEvent]
     */
    export type ExportedEvent = events.EventInfo<dxVectorMap>;
    /**
     * [descr:_viz_vector_map_ExportingEvent]
     */
    export type ExportingEvent = events.EventInfo<dxVectorMap> &
    BaseWidget.ExportInfo;
    /**
     * [descr:_viz_vector_map_FileSavingEvent]
     */
    export type FileSavingEvent =
      BaseWidget.FileSavingEventInfo<dxVectorMap>;
    /**
     * [descr:_viz_vector_map_IncidentOccurredEvent]
     */
    export type IncidentOccurredEvent =
      events.EventInfo<dxVectorMap> &
      BaseWidget.IncidentInfo;
    /**
     * [descr:_viz_vector_map_InitializedEvent]
     */
    export type InitializedEvent =
      events.InitializedEventInfo<dxVectorMap>;
    /**
     * [descr:dxVectorMapLegends]
     */
    export type Legend = common.charts.BaseLegend & {
      /**
       * [descr:dxVectorMapOptions.legends.customizeHint]
       */
      customizeHint?: (itemInfo: {
        start?: number;
        end?: number;
        index?: number;
        color?: string;
        size?: number;
      }) => string;
      /**
       * [descr:dxVectorMapOptions.legends.customizeItems]
       */
      customizeItems?: (items: LegendItem[]) => LegendItem[];
      /**
       * [descr:dxVectorMapOptions.legends.customizeText]
       */
      customizeText?: (itemInfo: {
        start?: number;
        end?: number;
        index?: number;
        color?: string;
        size?: number;
      }) => string;
      /**
       * [descr:dxVectorMapOptions.legends.font]
       */
      font?: Font;
      /**
       * [descr:dxVectorMapOptions.legends.markerColor]
       */
      markerColor?: string;
      /**
       * [descr:dxVectorMapOptions.legends.markerShape]
       */
      markerShape?: VectorMapMarkerShape;
      /**
       * [descr:dxVectorMapOptions.legends.markerSize]
       */
      markerSize?: number;
      /**
       * [descr:dxVectorMapOptions.legends.markerTemplate]
       */
      markerTemplate?:
      | core.template
      | ((
        legendItem: LegendItem,
        element: SVGGElement
      ) => string | core.UserDefinedElement<SVGElement>);
      /**
       * [descr:dxVectorMapOptions.legends.source]
       */
      source?: {
        /**
         * [descr:dxVectorMapOptions.legends.source.grouping]
         */
        grouping?: string;
        /**
         * [descr:dxVectorMapOptions.legends.source.layer]
         */
        layer?: string;
      };
    };
    /**
     * [descr:_viz_vector_map_OptionChangedEvent]
     */
    export type OptionChangedEvent = events.EventInfo<dxVectorMap> &
    events.ChangedOptionInfo;
    export type Properties = dxVectorMapOptions;
    /**
     * [descr:_viz_vector_map_SelectionChangedEvent]
     */
    export type SelectionChangedEvent =
      events.EventInfo<dxVectorMap> & {
        /**
         * [descr:_viz_vector_map_SelectionChangedEvent.target]
         */
        readonly target: MapLayerElement;
      };
    /**
     * [descr:dxVectorMapTooltip]
     */
    export type Tooltip = BaseWidgetTooltip & {
      /**
       * [descr:dxVectorMapOptions.tooltip.contentTemplate]
       */
      contentTemplate?:
      | core.template
      | ((
        info: MapLayerElement,
        element: core.DxElement
      ) => string | core.UserDefinedElement);
      /**
       * [descr:dxVectorMapOptions.tooltip.customizeTooltip]
       */
      customizeTooltip?: (info: MapLayerElement) => any;
      /**
       * [descr:dxVectorMapOptions.tooltip.format]
       */
      format?: ui.Format;
    };
    /**
     * [descr:_viz_vector_map_TooltipHiddenEvent]
     */
    export type TooltipHiddenEvent = events.EventInfo<dxVectorMap> &
    TooltipInfo;
    /**
     * [descr:_viz_vector_map_TooltipInfo]
     * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
     */
    export interface TooltipInfo {
      /**
       * [descr:_viz_vector_map_TooltipInfo.target]
       */
      target?: MapLayerElement | dxVectorMapAnnotationConfig;
    }
    /**
     * [descr:_viz_vector_map_TooltipShownEvent]
     */
    export type TooltipShownEvent = events.EventInfo<dxVectorMap> &
    TooltipInfo;
    export type VectorMapLayerType = 'area' | 'line' | 'marker';
    export type VectorMapMarkerShape = 'circle' | 'square';
    export type VectorMapMarkerType = 'bubble' | 'dot' | 'image' | 'pie';
    /**
     * [descr:_viz_vector_map_ZoomFactorChangedEvent]
     */
    export type ZoomFactorChangedEvent =
      events.EventInfo<dxVectorMap> & {
        /**
         * [descr:_viz_vector_map_ZoomFactorChangedEvent.zoomFactor]
         */
        readonly zoomFactor: number;
      };
  }
  /**
   * [descr:dxVectorMapAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxVectorMapAnnotationConfig
    extends dxVectorMapCommonAnnotationConfig {
    /**
     * [descr:dxVectorMapAnnotationConfig.name]
     */
    name?: string;
  }
  /**
   * [descr:dxVectorMapCommonAnnotationConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxVectorMapCommonAnnotationConfig
    extends BaseWidgetAnnotationConfig {
    /**
     * [descr:dxVectorMapCommonAnnotationConfig.coordinates]
     */
    coordinates?: number[];
    /**
     * [descr:dxVectorMapCommonAnnotationConfig.customizeTooltip]
     */
    customizeTooltip?: (annotation: dxVectorMapAnnotationConfig | any) => any;
    /**
     * [descr:dxVectorMapCommonAnnotationConfig.template]
     */
    template?:
    | core.template
    | ((
      annotation: dxVectorMapAnnotationConfig | any,
      element: SVGGElement
    ) => string | core.UserDefinedElement<SVGElement>);
    /**
     * [descr:dxVectorMapCommonAnnotationConfig.tooltipTemplate]
     */
    tooltipTemplate?:
    | core.template
    | ((
      annotation: dxVectorMapAnnotationConfig | any,
      element: core.DxElement
    ) => string | core.UserDefinedElement);
  }
  /**
   * [descr:dxVectorMapOptions]
   * @deprecated [depNote:dxVectorMapOptions]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface dxVectorMapOptions extends BaseWidgetOptions<dxVectorMap> {
    /**
     * [descr:dxVectorMapOptions.background]
     */
    background?: {
      /**
       * [descr:dxVectorMapOptions.background.borderColor]
       */
      borderColor?: string;
      /**
       * [descr:dxVectorMapOptions.background.color]
       */
      color?: string;
    };
    /**
     * [descr:dxVectorMapOptions.bounds]
     */
    bounds?: number[];
    /**
     * [descr:dxVectorMapOptions.center]
     */
    center?: number[];
    /**
     * [descr:dxVectorMapOptions.controlBar]
     */
    controlBar?: {
      /**
       * [descr:dxVectorMapOptions.controlBar.borderColor]
       */
      borderColor?: string;
      /**
       * [descr:dxVectorMapOptions.controlBar.color]
       */
      color?: string;
      /**
       * [descr:dxVectorMapOptions.controlBar.enabled]
       */
      enabled?: boolean;
      /**
       * [descr:dxVectorMapOptions.controlBar.panVisible]
       */
      panVisible?: boolean;
      /**
       * [descr:dxVectorMapOptions.controlBar.zoomVisible]
       */
      zoomVisible?: boolean;
      /**
       * [descr:dxVectorMapOptions.controlBar.horizontalAlignment]
       */
      horizontalAlignment?: common.HorizontalAlignment;
      /**
       * [descr:dxVectorMapOptions.controlBar.margin]
       */
      margin?: number;
      /**
       * [descr:dxVectorMapOptions.controlBar.opacity]
       */
      opacity?: number;
      /**
       * [descr:dxVectorMapOptions.controlBar.verticalAlignment]
       */
      verticalAlignment?: common.VerticalEdge;
    };
    /**
     * [descr:dxVectorMapOptions.layers]
     */
    layers?:
    | {
      /**
           * [descr:dxVectorMapOptions.layers.borderColor]
           */
      borderColor?: string;
      /**
           * [descr:dxVectorMapOptions.layers.borderWidth]
           */
      borderWidth?: number;
      /**
           * [descr:dxVectorMapOptions.layers.color]
           */
      color?: string;
      /**
           * [descr:dxVectorMapOptions.layers.colorGroupingField]
           */
      colorGroupingField?: string;
      /**
           * [descr:dxVectorMapOptions.layers.colorGroups]
           */
      colorGroups?: number[];
      /**
           * [descr:dxVectorMapOptions.layers.customize]
           */
      customize?: (elements: MapLayerElement[]) => void;
      /**
           * [descr:dxVectorMapOptions.layers.dataField]
           */
      dataField?: string;
      /**
           * [descr:dxVectorMapOptions.layers.dataSource]
           */
      dataSource?:
      | object
      | data.DataSource.DataSourceLike<any>
      | null;
      /**
           * [descr:dxVectorMapOptions.layers.elementType]
           */
      elementType?: dxVectorMap.VectorMapMarkerType;
      /**
           * [descr:dxVectorMapOptions.layers.hoverEnabled]
           */
      hoverEnabled?: boolean;
      /**
           * [descr:dxVectorMapOptions.layers.hoveredBorderColor]
           */
      hoveredBorderColor?: string;
      /**
           * [descr:dxVectorMapOptions.layers.hoveredBorderWidth]
           */
      hoveredBorderWidth?: number;
      /**
           * [descr:dxVectorMapOptions.layers.hoveredColor]
           */
      hoveredColor?: string;
      /**
           * [descr:dxVectorMapOptions.layers.label]
           */
      label?: {
        /**
             * [descr:dxVectorMapOptions.layers.label.dataField]
             */
        dataField?: string;
        /**
             * [descr:dxVectorMapOptions.layers.label.enabled]
             */
        enabled?: boolean;
        /**
             * [descr:dxVectorMapOptions.layers.label.font]
             */
        font?: Font;
      };
      /**
           * [descr:dxVectorMapOptions.layers.maxSize]
           */
      maxSize?: number;
      /**
           * [descr:dxVectorMapOptions.layers.minSize]
           */
      minSize?: number;
      /**
           * [descr:dxVectorMapOptions.layers.name]
           */
      name?: string;
      /**
           * [descr:dxVectorMapOptions.layers.opacity]
           */
      opacity?: number;
      /**
           * [descr:dxVectorMapOptions.layers.palette]
           */
      palette?: string[] | common.charts.Palette;
      /**
           * [descr:dxVectorMapOptions.layers.paletteSize]
           */
      paletteSize?: number;
      /**
           * [descr:dxVectorMapOptions.layers.paletteIndex]
           */
      paletteIndex?: number;
      /**
           * [descr:dxVectorMapOptions.layers.selectedBorderColor]
           */
      selectedBorderColor?: string;
      /**
           * [descr:dxVectorMapOptions.layers.selectedBorderWidth]
           */
      selectedBorderWidth?: number;
      /**
           * [descr:dxVectorMapOptions.layers.selectedColor]
           */
      selectedColor?: string;
      /**
           * [descr:dxVectorMapOptions.layers.selectionMode]
           */
      selectionMode?: common.SingleMultipleOrNone;
      /**
           * [descr:dxVectorMapOptions.layers.size]
           */
      size?: number;
      /**
           * [descr:dxVectorMapOptions.layers.sizeGroupingField]
           */
      sizeGroupingField?: string;
      /**
           * [descr:dxVectorMapOptions.layers.sizeGroups]
           */
      sizeGroups?: number[];
      /**
           * [descr:dxVectorMapOptions.layers.type]
           */
      type?: dxVectorMap.VectorMapLayerType;
    }[]
    | {
      borderColor?: string;
      borderWidth?: number;
      color?: string;
      colorGroupingField?: string;
      colorGroups?: number[];
      customize?: (elements: MapLayerElement[]) => any;
      dataField?: string;
      dataSource?:
      | object
      | data.DataSource.DataSourceLike<any>
      | null;
      elementType?: 'bubble' | 'dot' | 'image' | 'pie';
      hoverEnabled?: boolean;
      hoveredBorderColor?: string;
      hoveredBorderWidth?: number;
      hoveredColor?: string;
      label?: { dataField?: string; enabled?: boolean; font?: Font };
      maxSize?: number;
      minSize?: number;
      name?: string;
      opacity?: number;
      palette?: string[] | common.charts.Palette;
      paletteSize?: number;
      selectedBorderColor?: string;
      selectedBorderWidth?: number;
      selectedColor?: string;
      selectionMode?: common.SingleMultipleOrNone;
      size?: number;
      sizeGroupingField?: string;
      sizeGroups?: number[];
      type?: 'area' | 'line' | 'marker';
    };
    /**
     * [descr:dxVectorMapOptions.legends]
     */
    legends?: dxVectorMap.Legend[];
    /**
     * [descr:dxVectorMapOptions.margin]
     */
    margin?: BaseWidgetMargin;
    /**
     * [descr:dxVectorMapOptions.maxZoomFactor]
     */
    maxZoomFactor?: number;
    /**
     * [descr:dxVectorMapOptions.onCenterChanged]
     */
    onCenterChanged?: (
      e: dxVectorMap.CenterChangedEvent
    ) => void;
    /**
     * [descr:dxVectorMapOptions.onClick]
     */
    onClick?: ((e: dxVectorMap.ClickEvent) => void) | string;
    /**
     * [descr:dxVectorMapOptions.onSelectionChanged]
     */
    onSelectionChanged?: (
      e: dxVectorMap.SelectionChangedEvent
    ) => void;
    /**
     * [descr:dxVectorMapOptions.onTooltipHidden]
     */
    onTooltipHidden?: (
      e: dxVectorMap.TooltipHiddenEvent
    ) => void;
    /**
     * [descr:dxVectorMapOptions.onTooltipShown]
     */
    onTooltipShown?: (e: dxVectorMap.TooltipShownEvent) => void;
    /**
     * [descr:dxVectorMapOptions.onZoomFactorChanged]
     */
    onZoomFactorChanged?: (
      e: dxVectorMap.ZoomFactorChangedEvent
    ) => void;
    /**
     * [descr:dxVectorMapOptions.panningEnabled]
     */
    panningEnabled?: boolean;
    /**
     * [descr:dxVectorMapOptions.projection]
     */
    projection?: VectorMapProjection | VectorMapProjectionConfig | string | any;
    /**
     * [descr:dxVectorMapOptions.tooltip]
     */
    tooltip?: dxVectorMap.Tooltip;
    /**
     * [descr:dxVectorMapOptions.touchEnabled]
     */
    touchEnabled?: boolean;
    /**
     * [descr:dxVectorMapOptions.wheelEnabled]
     */
    wheelEnabled?: boolean;
    /**
     * [descr:dxVectorMapOptions.zoomFactor]
     */
    zoomFactor?: number;
    /**
     * [descr:dxVectorMapOptions.zoomingEnabled]
     */
    zoomingEnabled?: boolean;
    /**
     * [descr:dxVectorMapOptions.commonAnnotationSettings]
     */
    commonAnnotationSettings?: dxVectorMapCommonAnnotationConfig;
    /**
     * [descr:dxVectorMapOptions.annotations]
     */
    annotations?: (dxVectorMapAnnotationConfig | any)[];
    /**
     * [descr:dxVectorMapOptions.customizeAnnotation]
     */
    customizeAnnotation?: (
      annotation: dxVectorMapAnnotationConfig | any
    ) => dxVectorMapAnnotationConfig;
  }
  /**
   * [descr:viz.exportFromMarkup(markup, options)]
   */
  export function exportFromMarkup(
    markup: string,
    options: {
      fileName?: string;
      format?: string;
      backgroundColor?: string;
      width?: number;
      height?: number;
      onExporting?: Function;
      onExported?: Function;
      onFileSaving?: Function;
      margin?: number;
      svgToCanvas?: Function;
    }
  ): void;
  /**
   * [descr:viz.exportWidgets(widgetInstances)]
   */
  export function exportWidgets(
    widgetInstances: VizWidget | VizWidget[] | VizWidget[][]
  ): void;
  /**
   * [descr:viz.exportWidgets(widgetInstances, options)]
   */
  export function exportWidgets(
    widgetInstances: VizWidget | VizWidget[] | VizWidget[][],
    options: {
      fileName?: string;
      format?: common.ExportFormat;
      backgroundColor?: string;
      margin?: number;
      gridLayout?: boolean;
      verticalAlignment?: common.VerticalAlignment;
      horizontalAlignment?: common.HorizontalAlignment;
      onExporting?: Function;
      onExported?: Function;
      onFileSaving?: Function;
      svgToCanvas?: Function;
    }
  ): void;
  /**
   * [descr:Font]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface Font {
    /**
     * [descr:Font.color]
     */
    color?: string;
    /**
     * [descr:Font.family]
     */
    family?: string;
    /**
     * [descr:Font.opacity]
     */
    opacity?: number;
    /**
     * [descr:Font.size]
     */
    size?: string | number;
    /**
     * [descr:Font.weight]
     */
    weight?: number;
  }
  /**
   * @deprecated Use LegendItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface FunnelLegendItem
    extends common.charts.BaseLegendItem {
    /**
     * [descr:FunnelLegendItem.item]
     */
    item?: dxFunnel.Item;
  }
  /**
   * [descr:GaugeIndicator]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface GaugeIndicator extends CommonIndicator {
    /**
     * [descr:GaugeIndicator.type]
     */
    type?: BaseGauge.GaugeIndicatorType;
  }
  /**
   * [descr:viz.generateColors(palette, count, options)]
   */
  export function generateColors(
    palette: common.charts.Palette | string[],
    count: number,
    options: {
      paletteExtensionMode?: common.charts.PaletteExtensionMode;
      baseColorSet?: common.charts.PaletteColorSet;
    }
  ): string[];
  /**
   * [descr:viz.getMarkup(widgetInstances)]
   */
  export function getMarkup(
    widgetInstances: VizWidget | VizWidget[] | VizWidget[][]
  ): string;
  /**
   * [descr:viz.getPalette(paletteName)]
   */
  export function getPalette(paletteName: string): any;
  /**
   * [descr:viz.getTheme(theme)]
   */
  export function getTheme(theme: string): any;
  /**
   * [descr:MapLayer]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface MapLayer {
    /**
     * [descr:MapLayer.clearSelection()]
     */
    clearSelection(): void;
    /**
     * [descr:MapLayer.elementType]
     */
    elementType?: string;
    /**
     * [descr:MapLayer.getDataSource()]
     */
    getDataSource(): data.DataSource;
    /**
     * [descr:MapLayer.getElements()]
     */
    getElements(): MapLayerElement[];
    /**
     * [descr:MapLayer.index]
     */
    index?: number;
    /**
     * [descr:MapLayer.name]
     */
    name?: string;
    /**
     * [descr:MapLayer.type]
     */
    type?: string;
  }
  /**
   * [descr:MapLayerElement]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface MapLayerElement {
    /**
     * [descr:MapLayerElement.applySettings(settings)]
     */
    applySettings(settings: any): void;
    /**
     * [descr:MapLayerElement.attribute(name)]
     */
    attribute(name: string): any;
    /**
     * [descr:MapLayerElement.attribute(name, value)]
     */
    attribute(name: string, value: any): void;
    /**
     * [descr:MapLayerElement.coordinates()]
     */
    coordinates(): any;
    /**
     * [descr:MapLayerElement.layer]
     */
    layer?: any;
    /**
     * [descr:MapLayerElement.selected()]
     */
    selected(): boolean;
    /**
     * [descr:MapLayerElement.selected(state)]
     */
    selected(state: boolean): void;
  }
  /**
   * @deprecated Use LegendItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PieChartLegendItem
    extends common.charts.BaseLegendItem {
    /**
     * [descr:PieChartLegendItem.argument]
     */
    argument?: string | Date | number;
    /**
     * [descr:PieChartLegendItem.argumentIndex]
     */
    argumentIndex?: number;
    /**
     * [descr:PieChartLegendItem.points]
     */
    points?: piePointObject[];
    /**
     * [descr:PieChartLegendItem.text]
     */
    text?: any;
  }
  /**
   * [descr:PieChartSeries]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PieChartSeries
    extends dxPieChartSeriesTypesCommonPieChartSeries {
    /**
     * [descr:PieChartSeries.name]
     */
    name?: string;
    /**
     * [descr:PieChartSeries.tag]
     */
    tag?: any;
  }
  /**
   * [descr:pieChartSeriesObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface pieChartSeriesObject extends baseSeriesObject {
    /**
     * [descr:pieChartSeriesObject.hover()]
     */
    hover(): void;
    /**
     * [descr:pieChartSeriesObject.clearHover()]
     */
    clearHover(): void;
    /**
     * [descr:pieChartSeriesObject.isHovered()]
     */
    isHovered(): boolean;
  }
  /**
   * [descr:piePointObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface piePointObject extends basePointObject {
    /**
     * [descr:piePointObject.hide()]
     */
    hide(): void;
    /**
     * [descr:piePointObject.isVisible()]
     */
    isVisible(): boolean;
    /**
     * [descr:piePointObject.percent]
     */
    percent?: string | number | Date;
    /**
     * [descr:piePointObject.show()]
     */
    show(): void;
  }
  /**
   * [descr:PolarChartSeries]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface PolarChartSeries
    extends dxPolarChartSeriesTypesCommonPolarChartSeries {
    /**
     * [descr:PolarChartSeries.name]
     */
    name?: string;
    /**
     * [descr:PolarChartSeries.tag]
     */
    tag?: any;
    /**
     * [descr:PolarChartSeries.type]
     */
    type?: dxPolarChart.PolarChartSeriesType;
  }
  /**
   * [descr:polarChartSeriesObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface polarChartSeriesObject extends baseSeriesObject {}
  /**
   * [descr:polarPointObject]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface polarPointObject extends basePointObject {}
  /**
   * [descr:viz.refreshPaths()]
   */
  export function refreshPaths(): void;
  /**
   * [descr:viz.refreshTheme()]
   */
  export function refreshTheme(): void;
  /**
   * [descr:viz.registerPalette(paletteName, palette)]
   */
  export function registerPalette(paletteName: string, palette: any): void;
  /**
   * [descr:viz.registerTheme(customTheme, baseTheme)]
   */
  export function registerTheme(customTheme: any, baseTheme: string): void;
  /**
   * @deprecated Use LegendItem instead
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface VectorMapLegendItem
    extends common.charts.BaseLegendItem {
    /**
     * [descr:VectorMapLegendItem.color]
     */
    color?: string;
    /**
     * [descr:VectorMapLegendItem.end]
     */
    end?: number;
    /**
     * [descr:VectorMapLegendItem.size]
     */
    size?: number;
    /**
     * [descr:VectorMapLegendItem.start]
     */
    start?: number;
  }
  export type VectorMapProjection =
    | 'equirectangular'
    | 'lambert'
    | 'mercator'
    | 'miller';
  /**
   * [descr:VectorMapProjectionConfig]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export interface VectorMapProjectionConfig {
    /**
     * [descr:VectorMapProjectionConfig.aspectRatio]
     */
    aspectRatio?: number;
    /**
     * [descr:VectorMapProjectionConfig.from]
     */
    from?: (coordinates: number[]) => number[];
    /**
     * [descr:VectorMapProjectionConfig.to]
     */
    to?: (coordinates: number[]) => number[];
  }
  export type VizWidget =
    | dxChart
    | dxPieChart
    | dxFunnel
    | dxSankey
    | dxTreeMap
    | dxVectorMap
    | dxSparkline
    | dxBullet
    | dxBarGauge;
}
declare namespace DevExpress.viz.dxBarGauge {
  /**
   * [descr:BarGaugeLegendItem]
   */
  export type LegendItem = BarGaugeLegendItem;
}
declare namespace DevExpress.viz.dxFunnel {
  export type Item = dxFunnelItem;
  /**
   * [descr:FunnelLegendItem]
   */
  export type LegendItem = FunnelLegendItem;
}
declare namespace DevExpress.viz.dxPieChart {
  /**
   * [descr:PieChartLegendItem]
   */
  export type LegendItem = PieChartLegendItem;
}
declare namespace DevExpress.viz.dxVectorMap {
  /**
   * [descr:VectorMapLegendItem]
   */
  export type LegendItem = VectorMapLegendItem;
}
declare namespace DevExpress.viz.map {
  /**
   * [descr:viz.map.projection(data)]
   * @deprecated Attention! This type is for internal purposes only. If you used it previously, please submit a ticket to our {@link https://supportcenter.devexpress.com/ticket/create Support Center}. We will check if there is an alternative solution.
   */
  export const projection: {
    /**
     * [descr:viz.map.projection.add(name, projectionConfig)]
     */
    add(name: string, projectionConfig: VectorMapProjectionConfig | any): void;

    /**
     * [descr:viz.map.projection.get(name)]
     */
    get(name: VectorMapProjection | string): any;

    (data: VectorMapProjectionConfig): any;
  };
}
