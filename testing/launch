#!/usr/bin/env node

var path = require("path"),
    http = require("http"),
    gulp = require("gulp"),
    childProcess = require("child_process"),
    os = require("os");

var PORT = require("./../ports.json").qunit;

if(parseInt(process.versions.node.split('.')[0]) < 6) {
    throw "Node version is too low";
}

watchForTests();

childProcess.spawn(
    "dotnet",
    [ path.join(__dirname, "runner/bin/runner.dll") ],
    { stdio: "inherit" }
);
waitForRunner();


function watchForTests() {
    var process = require('process');
    process.chdir(path.join(__dirname, "../"));

    require('../gulpfile');
    gulp.parallel(
		'generate-components-watch',
        'transpile-watch',
        'style-compiler-themes-dev'
    )();
}

function waitForRunner() {
    var timestamp = Date.now();
    http.request({ port: PORT }, res => openBrowser())
        .on("error", e => setTimeout(
            function() {
                console.log("waiting...");
                waitForRunner();
            },
            Math.max(0, 300 - Date.now() + timestamp)
        ))
        .end();
}

function openBrowser() {
    childProcess.spawn(
        getBrowserCommand(),
        [ "http://localhost:" + PORT ],
        {
            shell: true,
            detached: true
        }
    );
}


function getBrowserCommand() {
    switch(os.platform()) {
        case "win32":
            return "start";

        case "darwin":
            return "open";

        case "linux":
            return "xdg-open";
    }

    throw "Not implemented";
}
