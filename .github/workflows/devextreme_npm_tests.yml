name: devextreme package tests

on: [push, pull_request]

jobs:
  cache_build:
    runs-on: ubuntu-latest

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '15'

    - name: Restore artifacts cache
      uses: actions/cache@v2
      with:
        path: ./artifacts
        key: build-npm-devextreme-artifacts-${{ github.sha }}

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ./mode_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-modules

    - name: Install packages in devextreme repo
      run: test -d artifacts || npm install --no-audit --no-fund

    - name: Build devextreme repo
      run: test -d artifacts || npm run build-npm-devextreme

  test_angular:
    needs: cache_build
    runs-on: windows-latest
    timeout-minutes: 30

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '15'

    - name: Set default run status
      run: echo "default" > last_run_status

    - name: Restore last run status
      uses: actions/cache@v2
      with:
        path: last_run_status
        key: last-run-status-${{ github.job }}-${{ github.sha }}

    - name: Set last run status
      id: last_run_status
      run: cat last_run_status

    - name: Restore npm cache
      if: steps.last_run_status.outputs.last_run_status != 'success'
      uses: actions/cache@v2
      with:
        path: ./mode_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-modules

    - name: Install packages in devextreme repo
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: npm install --no-audit --no-fund

    - name: Restore artifacts cache
      if: steps.last_run_status.outputs.last_run_status != 'success'
      uses: actions/cache@v2
      with:
        path: ./artifacts
        key: build-npm-devextreme-artifacts-${{ github.sha }}

    - name: Build devextreme repo
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: test -d artifacts || npm run build-npm-devextreme

    - name: Clone devextreme-angular repo from PR author fork
      continue-on-error: true
      if: github.event_name == 'pull_request'
      run: git clone -b ${{github.event.pull_request.head.ref}} https://github.com/${{github.event.pull_request.user.login}}/devextreme-angular ./devextreme-angular-repo

    - name: Clone devextreme-angular repo
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: |
        test -d ./devextreme-angular-repo || git clone -b master https://github.com/devexpress/devextreme-angular ./devextreme-angular-repo

    - name: Install devextreme package
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: |
        cd ./devextreme-angular-repo/packages/devextreme-angular
        npm install --force ../../../artifacts/npm/devextreme

    - name: Run npm install for devextreme-angular repo
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: |
        cd ./devextreme-angular-repo
        npm install --no-audit --no-fund

    - name: Update angular metadata
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: |
        npm run internal-tool -- update-meta --output-path ./devextreme-angular-repo/packages/devextreme-angular/metadata/NGMetaData.json --version 21_2 --js-scripts ./js

    - name: Build with Angular 7
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: |
        cd ./devextreme-angular-repo
        npm run build

    - name: Run tests with Angular 7
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: |
        cd ./devextreme-angular-repo
        npx lerna run --scope devextreme-angular gulp -- run.tests

    - name: Save run status
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: echo "::set-output name=last_run_status::success" > last_run_status

  test_bundlers:
    needs: cache_build
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '15'

    - name: Set default run status
      run: echo "default" > last_run_status

    - name: Restore last run status
      uses: actions/cache@v2
      with:
        path: last_run_status
        key: last-run-status-${{ github.job }}-${{ github.sha }}

    - name: Set last run status
      id: last_run_status
      run: cat last_run_status

    - name: Restore npm cache
      if: steps.last_run_status.outputs.last_run_status != 'success'
      uses: actions/cache@v2
      with:
        path: ./mode_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-modules

    - name: Install packages in devextreme repo
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: npm install --no-audit --no-fund

    - name: Restore artifacts cache
      if: steps.last_run_status.outputs.last_run_status != 'success'
      uses: actions/cache@v2
      with:
        path: ./artifacts
        key: build-npm-devextreme-artifacts-${{ github.sha }}

    - name: Build devextreme repo
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: test -d artifacts || npm run build-npm-devextreme

    - name: Install bundlers
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers  
      run: npm install --no-audit --no-fund

    - name: Install DevExtreme package 
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers
      run: npm run install:devextreme  

    - name: Generate entry files 
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers
      run: npm run generate-entry-files  

    - name: Build webpack cjs
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers
      run: npm run build:webpack-cjs

    - name: Build browserify cjs
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers
      run: npm run build:browserify-cjs

    - name: Build webpack
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers
      run: npm run build:webpack

    - name: Build rollup
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers
      run: npm run build:rollup
      
    - name: Build parcel
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers
      run: npm run build:parcel
      
    - name: Build vite
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./testing/bundlers
      run: npm run build:vite

    - name: Save run status
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: echo "::set-output name=last_run_status::success" > last_run_status
      
  build_demos:
    needs: cache_build
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '15'

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ./mode_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-modules

    - name: Install packages in devextreme repo
      run: npm install --no-audit --no-fund

    - name: Restore artifacts cache
      uses: actions/cache@v2
      with:
        path: ./artifacts
        key: build-npm-devextreme-artifacts-${{ github.sha }}

    - name: Build devextreme repo
      run: test -d artifacts || npm run build-npm-devextreme

    - name: Clone devextreme-demos repo from PR author fork
      continue-on-error: true
      if: github.event_name == 'pull_request'
      run: git clone -b ${{github.event.pull_request.head.ref}} https://github.com/${{github.event.pull_request.user.login}}/devextreme-demos ./devextreme-demos

    - name: Clone devextreme-demos repo
      run: |
        BASE_BRANCH=$(node -p -e "require('./package.json').version.slice(0, 4).replace('.', '_')")
        test -d ./devextreme-demos || git clone -b $BASE_BRANCH https://github.com/devexpress/devextreme-demos ./devextreme-demos

    - name: Pack devextreme package
      working-directory: ./artifacts/npm/devextreme
      run: npm pack

    - name: Install packages for devextreme-demos
      working-directory: ./devextreme-demos
      run: npm install --force --no-audit --no-fund

    - name: Install devextreme package
      working-directory: ./devextreme-demos
      run: npm install --force $(find ../artifacts/npm/devextreme/ -maxdepth 1 -name "devextreme-*.tgz")

    - name: Zip node_modules    
      run: 7z a -t7z -mx3 -mmt2 node_modules.7z ./devextreme-demos/node_modules

    - name: Copy build artifacts      
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-demos-sources
        path: node_modules.7z
        retention-days: 1

  test_demos:
    needs: build_demos
    strategy:
      fail-fast: false
      matrix:      
        CONSTEL: [jquery(1/4), jquery(2/4), jquery(3/4), jquery(4/4)]

    runs-on: ubuntu-latest
    name: ${{ matrix.CONSTEL }}
    timeout-minutes: 20
  
    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Set default run status
      run: echo "default" > last_run_status

    - name: Restore last run status
      uses: actions/cache@v2
      with:
        path: last_run_status
        key: last-run-status-${{ github.job }}-${{ matrix.CONSTEL }}-${{ github.sha }}

    - name: Set last run status
      id: last_run_status
      run: cat last_run_status

    - name: Clone devextreme-demos repo from PR author fork
      continue-on-error: true
      if: github.event_name == 'pull_request'
      run: git clone -b ${{github.event.pull_request.head.ref}} https://github.com/${{github.event.pull_request.user.login}}/devextreme-demos ./devextreme-demos

    - name: Clone devextreme-demos repo
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: |
        BASE_BRANCH=$(node -p -e "require('./package.json').version.slice(0, 4).replace('.', '_')")
        test -d ./devextreme-demos || git clone -b $BASE_BRANCH https://github.com/devexpress/devextreme-demos ./devextreme-demos

    - name: Download devextreme sources
      if: steps.last_run_status.outputs.last_run_status != 'success'
      uses: actions/download-artifact@v2
      with:
        name: devextreme-demos-sources
        path: ./devextreme-demos

    - name: Unpack artifacts
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./devextreme-demos
      run: 7z x node_modules.7z

    - name: Prepare JS
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./devextreme-demos
      run: npm run prepare-js
      
    - name: Run Web Server
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./devextreme-demos
      run: |
        python -m http.server 8080 &
        python -m http.server 8081 &
        python -m http.server 8082 &
        python -m http.server 8083 &

    - name: Run TestCafe tests
      if: steps.last_run_status.outputs.last_run_status != 'success'
      working-directory: ./devextreme-demos
      env:
        BROWSERS: chrome:headless
        CONCURRENCY: 4
        TCQUARANTINE: true
        CONSTEL: ${{ matrix.CONSTEL }}
      run: npm run test-testcafe

    - name: Copy screenshots artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: screenshots
        path: ${{ github.workspace }}/devextreme-demos/testing/artifacts/*
        if-no-files-found: ignore

    - name: Save run status
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: echo "::set-output name=last_run_status::success" > last_run_status
