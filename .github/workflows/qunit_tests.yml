name: QUnit tests

concurrency:
  group: wf-${{github.event.pull_request.number}}-${{github.workflow}}
  cancel-in-progress: true

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build
    timeout-minutes: 60

    steps:
    - name: Test .${{ secrets.TEST }}.
      run: echo ${{ secrets.TEST }}
    - name: Set Teams notification
      uses: aliencube/microsoft-teams-actions@v0.8.0
      with:
        webhook_uri: "https://teams.microsoft.com/_#/conversations/%D0%9E%D0%B1%D1%89%D0%B8%D0%B9?threadId=19:7a8fe7395a2d47288c29cfc421df6cbf@thread.skype&ctx=channel"
        title: Test notification from Git Hub Action
        summary: Hello from Git hub
        text: "Проверка возможности отправлять нотификации. Прошу прощения за неудобства. @MikhailVitik"
        sections: '[{ "activityTitle": "Sextion 1" }]'
        actions: '[{ "@type": "OpenUri", "name": "Open Commit", "targets": [{ "os": "default", "uri": "https://github.com/DevExpress/DevExtreme/actions/runs/${{ github.run_id }}" }] }]'
    - name: Get sources
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '15'

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-modules

    - name: Run npm install
      run: npm install --no-audit --no-fund

    - name: Build
      env:
        DEVEXTREME_TEST_CI: "true"
        DOTNET_CLI_TELEMETRY_OPTOUT: "true"
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
      run: npm run build
      
    - name: Zip artifacts 
      run: |
        7z a -tzip -mx3 -mmt2 artifacts.zip artifacts scss/bundles testing/tests/Renovation/widgets.json

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-artifacts
        path: artifacts.zip
        retention-days: 1

  qunit-tests:
    needs: build
    runs-on: ubuntu-latest
    name: Constel ${{ matrix.CONSTEL }}
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        CONSTEL: [ export, misc, ui, ui.widgets(1/2), ui.widgets(2/2), ui.editors, ui.grid, ui.scheduler(1/2), ui.scheduler(2/2), viz, renovation ]

    steps:
# Prepare fast re-run start
    - name: Set default run status
      run: echo "default" > last_run_status

    - name: Restore last run status
      uses: actions/cache@v2
      with:
        path: last_run_status
        key: last-run-status-${{ github.job }}-{{ matrix.CONSTEL }}-${{ github.sha }}

    - name: Set last run status
      id: last_run_status
      run: cat last_run_status

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: devextreme-artifacts
# Prepare fast re-run end

    - name: Get sources
      if: steps.last_run_status.outputs.last_run_status != 'success'
      uses: actions/checkout@v2

    - name: Setup utils
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: |
        sudo apt-get install -y dbus-x11 httping x11vnc xvfb

    - name: Use Node.js
      if: steps.last_run_status.outputs.last_run_status != 'success'
      uses: actions/setup-node@v2
      with:
        node-version: '15'

    - name: Restore npm cache
      if: steps.last_run_status.outputs.last_run_status != 'success'
      uses: actions/cache@v2
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-modules
        
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: devextreme-artifacts

    - name: Unpack artifacts
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: 7z x artifacts.zip
      
    - name: Build dotnet
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: dotnet build build/build-dotnet.sln
      
    - name: Run QUnit tests
      if: steps.last_run_status.outputs.last_run_status != 'success'
      env:
        CONSTEL: ${{ matrix.CONSTEL }}
        NORENOVATION: "true"
        GITHUBACTION: "true"
        TARGET: "test"
      run: |
        chmod +x ./docker-ci.sh
        ./docker-ci.sh

    - name: Save run status
      if: steps.last_run_status.outputs.last_run_status != 'success'
      run: echo "::set-output name=last_run_status::success" > last_run_status