name: QUnit tests

on: [push, pull_request]

jobs:
  test:
    strategy:
      matrix:
        BROWSER: [ IE, MSEdge ]
        CONSTEL: [ export, misc, ui, ui.widgets, ui.editors, ui.grid, ui.scheduler, viz, renovation ]
        JQUERY: [ jquery=3, nojquery=true ]

    runs-on: windows-latest
    timeout-minutes: 60

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: .\node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-modules

    - name: Run npm install
      run: npm install --no-package-lock --no-audit --no-fund

    - name: Build
      env:
        DEVEXTREME_TEST_CI: "true"
        DOTNET_CLI_TELEMETRY_OPTOUT: "true"
        DOTNET_SKIP_FIRST_TIME_EXPERIENCE: "true"
      run: npx npm-run-all -p build transpile-tests

    - name: Run QUnit tests
      env:
        CONSTEL: ${{ matrix.CONSTEL }}
        JQUERY: ${{ matrix.JQUERY }}
        BROWSER: ${{ matrix.BROWSER }}
      run: |
        $runner = Start-Process -FilePath dotnet -ArgumentList './testing/runner/bin/runner.dll --single-run' -PassThru -NoNewWindow
        Write-Host "Runner starting"
        $runner_port = (Get-Content ports.json | ConvertFrom-Json).qunit
        $runner_host = "http://localhost:$runner_port"
        $attempt_count = 30
        For ($i=0; $i -lt $attempt_count; $i++) {
          try {
            Invoke-WebRequest $runner_host -Method 'HEAD' -TimeoutSec 5 | Out-Null
            break
          }
          catch {
            Write-Host "Waiting for runner... Attempt $i"
            Start-Sleep -s 1
          }
        }
        If ($i -eq $attempt_count) {
          Write-Host "Runner doesn't respond"
          exit 1
        }
        Write-Host "Runner started"
        $url = "$runner_host/run?notimers=true&$env:JQUERY&constellation=$env:CONSTEL"
        $browser = $env:BROWSER
        $browserPaths = @{
          IE = "C:\Program Files\Internet Explorer\iexplore.exe";
          MSEdge = "C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe";
        }
        $browserPath = $browserPaths[$browser].ToString()
        Write-Host "Starting $browserPath with $url"
        Start-Process -File "$browserPath" -ArgumentList "$url"
        Write-Host "$browser started"
        Wait-Process -InputObject $runner
        Write-Host "Runner finished"
        exit $runner.ExitCode
