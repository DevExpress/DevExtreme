name: Demos visual tests

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  demos_build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Clone devextreme-demos repo from PR author fork
      continue-on-error: true
      if: github.event_name == 'pull_request'
      run: git clone -b ${{github.event.pull_request.head.ref}} https://github.com/${{github.event.pull_request.user.login}}/devextreme-demos ./devextreme-demos

    - name: Clone devextreme-demos repo
      run: |
        BASE_BRANCH=$(node -p -e "require('./package.json').version.slice(0, 4).replace('.', '_')")
        test -d ./devextreme-demos || git clone -b $BASE_BRANCH https://github.com/devexpress/devextreme-demos ./devextreme-demos

    - name: Restore npm cache
      uses: actions/cache@v2
      with:
        path: ./node_modules
        key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
        restore-keys: ${{ runner.os }}-node-modules

    - name: Run npm install
      run: npm install --no-audit --no-fund

    - name: Build devextreme package
      run: npm run build-npm-devextreme

    - name: Pack devextreme package
      working-directory: ./artifacts/npm/devextreme
      run: npm pack

    - name: Install packages for devextreme-demos
      working-directory: ./devextreme-demos
      run: npm install --no-audit --no-fund

    - name: Install devextreme package
      working-directory: ./devextreme-demos
      run: npm install $(find ../artifacts/npm/devextreme/ -maxdepth 1 -name "devextreme-*.tgz")

    - name: Zip node_modules    
      run: 7z a -t7z -mx3 -mmt2 node_modules.7z ./devextreme-demos/node_modules

    - name: Copy build artifacts      
      uses: actions/upload-artifact@v2
      with:
        name: devextreme-demos-sources
        path: node_modules.7z
        retention-days: 1

  demos_testcafe:
    needs: demos_build
    strategy:
      fail-fast: false
      matrix:      
        CONSTEL: [jquery(1/4), jquery(2/4), jquery(3/4), jquery(4/4)]

    runs-on: ubuntu-latest
    name: ${{ matrix.CONSTEL }}
    timeout-minutes: 20
  
    steps:
    - name: Get sources
      uses: actions/checkout@v2

    - name: Clone devextreme-demos repo from PR author fork
      continue-on-error: true
      if: github.event_name == 'pull_request'
      run: git clone -b ${{github.event.pull_request.head.ref}} https://github.com/${{github.event.pull_request.user.login}}/devextreme-demos ./devextreme-demos

    - name: Clone devextreme-demos repo
      run: |
        BASE_BRANCH=$(node -p -e "require('./package.json').version.slice(0, 4).replace('.', '_')")
        test -d ./devextreme-demos || git clone -b $BASE_BRANCH https://github.com/devexpress/devextreme-demos ./devextreme-demos

    - name: Download devextreme sources
      uses: actions/download-artifact@v2
      with:
        name: devextreme-demos-sources
        path: ./devextreme-demos

    - name: Unpack artifacts
      working-directory: ./devextreme-demos
      run: 7z x node_modules.7z

    - name: Prepare JS
      working-directory: ./devextreme-demos
      run: npm run prepare-js
      
    - name: Run Web Server
      working-directory: ./devextreme-demos
      run: |
        python -m http.server 8080 &
        python -m http.server 8081 &
        python -m http.server 8082 &
        python -m http.server 8083 &

    - name: Run TestCafe tests
      working-directory: ./devextreme-demos
      env:
        BROWSERS: chrome:headless
        CONCURRENCY: 4
        TCQUARANTINE: true
        CONSTEL: ${{ matrix.CONSTEL }}
      run: npm run test-testcafe

    - name: Copy screenshots artifacts
      if: ${{ failure() }}
      uses: actions/upload-artifact@v2
      with:
        name: screenshots
        path: ${{ github.workspace }}/devextreme-demos/testing/artifacts/*
        if-no-files-found: ignore
